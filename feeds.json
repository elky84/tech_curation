[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": [
      {
        "creator": "박명근",
        "title": "파운데이션 모델이란?",
        "link": "https://ppss.kr/archives/269222",
        "pubDate": "Wed, 30 Apr 2025 03:32:08 +0000",
        "content:encodedSnippet": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 답변 등과 같은 작업을 수행할 수 있습니다. 이러한 파인튜닝을 통해 새로운 AI 애플리케이션을 더 빠르고 저렴하게 개발할 수 있습니다.\n파운데이션 모델과 그 내부 작동 방식과 학습 과정, 그리고 실제 적용 사례에 대해 자세히 소개하도록 하겠습니다.\n출처: XENOSTACK\n \n파운데이션 모델은 어떻게 작동되는가?\nGPT나 BERT와 같은 트랜스포머 아키텍처 기반 모델과 같은 파운데이션 모델은 다양한 데이터 세트에 대한 광범위한 사전 학습과 특정 작업에 대한 파인튜닝을 통해 작동됩니다. 다음은 이러한 모델이 어떻게 작동되는지에 대해 소개하도록 하겠습니다.\n사전 훈련(Pre-Training)\n데이터 수집(Data Collection): 파운데이션 모델은 책, 웹사이트, 기사를 비롯한 다양한 텍스트 소스로부터 대규모의 다양한 데이터 세트를 학습하게 됩니다. 이를 통해 모델은 다양한 언어 패턴, 스타일 및 정보를 학습할 수 있습니다.\n학습 목표(Learning Objectives): 사전 훈련 과정에서 모델은 일반적으로 텍스트의 다른 부분이 주어지면 그 부분을 예측하도록 훈련되는데요, 예를 들어, GPT의 경우 모델은 이전 단어가 주어지면 문장의 다음 단어를 예측하게 됩니다 (자동 회귀 훈련(Autoregressive Training)이라고 알려진 프로세스). 반면에 BERT는 입력의 일부 단어가 무작위로 마스킹되고, 모델은 마스킹되지 않은 다른 단어가 제공하는 문맥을 기반으로 이러한 마스킹된 단어를 예측하는 방법을 학습하는 마스크 언어 모델 접근 방식을 사용합니다.\n모델 아키텍처(Model Architecture): 이 모델에 사용되는 트랜스포머 아키텍처는 셀프 어텐션(Self-attention) 메커니즘에 크게 의존하게 됩니다. 이를 통해 모델은 문장이나 문서에서 단어의 위치에 관계없이 각 단어의 중요도를 평가하여 문맥과 단어 간의 관계를 효과적으로 이해할 수 있습니다.\n파인튜닝(Fine-Tuning)\n작업별 특화된 데이터(Task-Specific Data): 사전 학습 후, 더 작은 작업별로 특화된 데이터 세트로 모델을 파인튜닝할 수 있습니다. 예를 들어, 감정 분석 작업의 경우 감정으로 레이블이 지정된 텍스트 샘플의 데이터 세트에 대해 모델을 파인튜닝할 수 있습니다.\n모델 조정(Adjusting the Model:): 파인튜닝 중에 특정 작업에서 더 나은 성능을 발휘하도록 전체 모델 또는 일부가 약간 조정될 수 있습니다. 이 과정에는 모델을 더 훈련시키는 작업이 포함되지만, 위 경우에는 감정 분류나 질문에 대한 답변과 같은 작업별 목표를 염두에 두고 진행됩니다.\n전문화(Specialization): 이 단계에서는 사전 학습 중에 습득한 일반적인 능력을 특정 작업 또는 도메인의 특정 요구 사항과 뉘앙스에 맞게 조정하여 동일한 작업에 대해 처음부터 모델을 학습하는 것에 비해 성능을 크게 향상시킵니다.\n배포(Deployment)\n사용 배포(Deployment for Use): 파인튜닝이 완료되면 가상 비서와 챗봇부터 시작해서 자동 번역, 콘텐츠 생성 도구에 이르기까지 다양한 애플리케이션에 파운데이션 모델을 배포할 수 있습니다.\n \n파운데이션 모델의 유형과 예시\n파운데이션 모델은 아키텍처, 훈련 목표와 애플리케이션이 매우 다양하며, 각 모델은 학습과 데이터와의 상호 작용의 다양한 측면을 활용하도록 맞춤화되어 있습니다. 다음은 다양한 유형의 파운데이션 모델에 대한 자세한 설명입니다.\n자동 회귀 모델(Autoregressive Model)\nGPT 시리즈(GPT-2, GPT-3, GPT-4)와 XLNet과 같은 자동 회귀 모델은 이전의 모든 단어가 주어진 시퀀스에서 다음 단어를 예측하는 훈련 방식을 사용합니다. 이 훈련 방법을 통해 이러한 모델은 일관성 있고 맥락에 맞는 텍스트를 생성할 수 있으며, 이는 특히 창의적인 글쓰기, 챗봇과 개인화된 고객 서비스 상호 작용에 유용합니다.\n오토인코딩 모델(Autoencoding Models)\nBERT와 RoBERTa를 포함한 오토인코딩 모델은 일반적으로 훈련 중에 모델에서 임의의 토큰을 숨기는 마스크드 언어 모델링(Masked Language Modeling)이라는 기술을 사용하여 먼저 입력을 손상시켜 입력을 이해하고 재구성하도록 훈련합니다. 그런 다음 모델은 문맥만을 기반으로 누락된 단어를 예측하는 방법을 학습합니다. 이러한 능력은 언어 구조를 이해하고 텍스트 분류, 개체 인식, 질문 답변과 같은 애플리케이션을 이해하는 데 매우 효과적입니다.\n인코더-디코더 모델(Encoder-Decoder Models)\nT5 (Text-to-Text Transfer Transformer) 및 BART와 같은 인코더-디코더 모델은 입력 텍스트를 출력 텍스트로 변환할 수 있는 다목적 툴입니다. 이러한 모델은 입력 시퀀스를 잠재 공간으로 인코딩한 다음 출력 시퀀스로 디코딩하는 방법을 학습하여 요약, 번역, 텍스트 수정과 같은 복잡한 작업을 처리하는 데 특히 능숙합니다. 이러한 학습에는 다양한 텍스트 to 텍스트 변환 작업이 포함되는 경우가 많기 때문에 여러 도메인에 걸쳐 폭넓게 적용할 수 있습니다.\n멀티모달 모델(Multimodal Models)\nCLIP(OpenAI의)와 DALL-E와 같은 멀티모달 모델은 텍스트와 이미지 등 다양한 데이터 유형에 걸쳐 있는 콘텐츠를 처리하고 생성하도록 설계되었습니다. 이러한 모델은 멀티모달 콘텐츠를 이해하고 생성함으로써 이미지 캡션, 텍스트 기반 이미지 검색, 텍스트 설명에서 이미지 생성 등 이미지와 텍스트 설명 간의 관계를 해석하는 작업에 매우 유용하게 활용됩니다.\n검색 증강 모델(Retrieval-Augmented Models)\n검색 증강 모델(예: RETRO (Retrieval-Enhanced Transformer))은 외부 지식 검색 프로세스를 통합하여 기존 언어 모델의 기능을 향상시키게 됩니다. 이 접근 방식을 사용하면 예측 단계에서 모델이 대규모 데이터베이스나 말뭉치에서 관련 데이터를 가져와 더 많은 정보를 바탕으로 정확한 결과를 도출할 수 있습니다. 이 모델은 특히 질문 답변이나 콘텐츠 검증과 같이 사실에 대한 정확성과 깊이가 필요한 애플리케이션에 효과적입니다.\n시퀀스 투 시컨스 모델(Sequence-to-Sequence Models)\nGoogle의 트랜스포머나 Facebook의 BART와 같은 시퀀스 투 시퀀스 (seq2seq) 모델은 입력 시퀀스를 밀접하게 관련된 출력 시퀀스로 변환해야 하는 작업을 처리합니다. 이러한 모델은 전체 콘텐츠 또는 그 의미를 정확하게 파악하여 다른 형태로 전달해야 하는 기계 번역이나 문서 요약의 기초가 됩니다.\n이같이 각 유형의 파운데이션 모델은 각각의 고유한 학습이나 운영 설계 덕분에 특정 작업에 고유하게 적합합니다. 다음 섹션에서는 몇 가지 사용 사례를 통해 파운데이션 모델의 기능에 대해 자세히 살펴보겠습니다.\n \n파운데이션 모델의 활용 사례\n파운데이션 모델은 대규모 데이터 세트에서 학습할 수 있는 적응성과 역량으로 다양한 산업을 변화시키고 있습니다. 다음은 몇 가지 흥미로운 예시입니다:\n자연어 처리(NLP): 파운데이션 모델은 많은 NLP 애플리케이션의 근간이 되는데요, 기계 번역을 구동하여 여러 언어 간에 원활한 커뮤니케이션을 가능하게 합니다. 또한 감정 분석(텍스트의 감정적 어조 이해)이나 챗봇 개발과 같은 작업에서 인간과 컴퓨터 간의 보다 자연스러운 상호 작용을 위해 사용할 수도 있습니다.\n콘텐츠 제작(Content Creation): 파운데이션 모델은 시와 대본에서 마케팅 카피에 이르기까지 다양한 텍스트를 창작하여 콘텐츠 제작자와 마케터를 지원할 수 있습니다.\n이미지 및 비디오 분석(Image and Video Analysis): 시각적 영역에서 파운데이션 모델은 이미지 및 비디오 분석에 탁월합니다. 보안 카메라의 물체 감지, 의사를 돕기 위한 의료 이미지 분석, 영화에서 사실적인 특수 효과를 생성하는 등의 작업에 사용할 수 있습니다.\n과학적 발견(Scientific Discovery): 이 모델은 대규모 데이터 세트를 분석하여 기존 방법으로는 놓칠 수 있는 패턴과 관계를 파악함으로써 과학적 연구를 가속화할 수 있습니다. 이러한 기능은 신약 개발, 재료 과학 또는 기후 변화 연구에 도움이 될 수 있습니다.\n자동화(Automation): 파운데이션 모델은 문서 요약이나 데이터 입력과 같은 반복적인 작업을 자동화하여 더 복잡한 작업을 위한 시간을 확보할 수 있습니다.\n이는 파운데이션 모델의 활용 사례 중 일부에 불과하며, 연구자들이 새로운 가능성을 모색함에 따라 잠재적인 응용 분야는 지속적으로 확장되고 있습니다. 파운데이션 모델은 다양한 산업과 일상생활을 변화시킬 수 있는 엄청난 가능성을 지니고 있습니다.\n \n파운데이션 모델 훈련 방법\n파운데이션 모델 훈련은 상당한 컴퓨팅 리소스와 전문 지식이 필요한 복잡한 작업입니다. 주요 단계를 간단하게 아래와 같이 소개합니다.\n데이터 수집과 준비(Data Collection and Preparation): 그 기반은 데이터를 기반으로 합니다. 원하는 작업과 관련된 방대한 양의 레이블이 지정되지 않은 데이터가 수집됩니다. 이러한 데이터는 거대 언어 모델 (LLM)의 경우 텍스트, 컴퓨터 비전 모델의 경우에는 이미지, 그리고 멀티모달 모델의 경우 텍스트와 이미지들의 조합일 수 있습니다. 데이터의 품질과 일관성을 보장하기 위해 데이터를 정리하고 전처리하는 것이 매우 중요합니다.\n모델 아키텍처와 선택(Model Architecture and Selection): 선택하는 파운데이션 모델 유형은 데이터와 작업에 따라 다릅니다. 일단 선택하면 모델 아키텍처는 대규모 데이터 집합을 효과적으로 처리하도록 파이뉸됩니다.\n자기 주도 학습(Self-Supervised Learning): 바로 여기서 마법이 일어납니다. 레이블이 지정된 데이터를 사용하는 지도 학습과 달리 파운데이션 모델은 자기 지도 학습 기법을 활용합니다. 이 경우에는 모델 자체가 레이블이 지정되지 않은 데이터에서 작업과 레이블을 생성하여 학습하게 되는데요, 여기에는 텍스트 데이터의 시퀀스에서 다음 단어를 예측하거나 이미지에서 누락된 부분을 식별하는 등의 작업이 포함됩니다.\n훈련과 최적화(Training and Optimization): 모델은 GPU 또는 TPU와 같은 강력한 컴퓨팅 리소스를 사용하여 준비된 데이터에 대해 학습됩니다. 모델 크기와 데이터 세트의 복잡성에 따라 이 훈련 과정은 며칠 또는 몇 주가 걸릴 수 있는데요, 모델의 성능을 최적화하기 위해 Gradient descent과 같은 기법이 사용됩니다.\n평가와 향상(Evaluation and Refinement): 학습 후에는 벤치마크 데이터 세트나 특정 작업에서 모델의 성능을 평가합니다. 결과가 이상적이지 않은 경우, 하이퍼파라미터를 조정하거나 품질 개선을 위해 데이터 준비 단계로 돌아가 모델을 더욱 세분화할 수 있습니다.\n파운데이션 모델을 훈련하는 것은 지속적인 과정이라는 점에 유의해야 합니다. 연구원들은 모델 성능과 성숙도를 향상시키기 위해 데이터 처리, 모델 아키텍처, 자기 지도 학습 작업에 대한 새로운 기술을 끊임없이 탐구하고 있습니다.\n \n파운데이션 모델의 장점\n파운데이션 모델은 다양한 영역에서 널리 채택되고 사용되는 데 기여하는 상당한 이점을 제공합니다. 몇 가지 주요 장점을 자세히 살펴보세요:\n다용도성과 적응성(Versatility and Adaptability): 기존의 좁게 초점을 맞춘 AI 모델과 달리 파운데이션 모델은 다용도로 사용할 수 있습니다. 해당 도메인(텍스트, 이미지 등) 내에서 다양한 작업에 맞게 미세 조정할 수 있으며, 심지어 멀티모달 모델의 경우 여러 도메인에 걸쳐 조정할 수도 있습니다. 이러한 유연성은 각 특정 작업에 대해 처음부터 새 모델을 구축하는 것에 비해 시간과 리소스를 절약할 수 있습니다.\n효율성과 비용 효율성(Efficiency and Cost-Effectiveness): 사전 학습된 파운데이션 모델은 개발자에게 확실한 출발점을 제공합니다. 특정 작업에 맞게 모델을 미세 조정하는 것이 완전히 새로운 모델을 처음부터 학습시키는 것보다 더 빠르고 계산 비용이 적게 드는 경우가 많습니다. 이러한 효율성은 비용 절감과 개발 주기 단축으로 이어집니다.\n향상된 성능(Improved Performance): 파운데이션 모델은 대량의 데이터 세트에 대한 대규모 학습으로 인해 다양한 작업에서 기존 모델보다 뛰어난 성능을 발휘하는 경우가 많습니다. 기계 번역, 이미지 인식 또는 텍스트 요약 작업에서 더 높은 정확도를 달성할 수 있습니다.\nAI의 민주화(Democratization of AI): 사전 학습된 파운데이션 모델을 사용할 수 있으므로 AI 개발의 진입 장벽이 낮아집니다. 대규모 컴퓨팅 리소스에 액세스할 수 없는 소규모 기업이나 연구원도 이러한 모델을 활용하여 혁신적인 AI 애플리케이션을 개발할 수 있습니다.\n과학적 발견의 가속화(Acceleration of Scientific Discovery): 파운데이션 모델은 방대한 과학 데이터 세트를 분석하여 기존 방법으로는 놓칠 수 있는 숨겨진 패턴과 그 관계를 발견할 수 있습니다. 이 기능은 신약 개발, 재료 과학 또는 기후 변화 연구와 같은 분야에서 과학적 진보를 크게 가속화할 수 있습니다.\n \n파운데이션 모델이 맞닥뜨린 과제\n파운데이션 모델은 뛰어난 기능에도 불구하고 전 세계 연구자들이 적극적으로 해결하기 위해 노력하고 있는 몇 가지 과제를 안고 있습니다. 다음은 몇 가지 주요 과제들입니다.\n데이터 편향성과 공정성(Data Bias and Fairness): 파운데이션 모델은 학습된 기존 데이터에 존재했던 편향성을 그대로 이어받을 수 있습니다. 이로 인해 차별적이거나 불공정한 결과가 나올 수 있는데요, 이러한 편향성을 완화하려면 신중한 데이터 선택, 큐레이션, 보다 공정한 학습 알고리즘 개발이 필요합니다.\n설명 가능성과 해석 가능성(Explainability and Interpretability): 파운데이션 모델이 어떻게 결과물에 도달하는지 이해하는 것은 어려울 수 있습니다. 이러한 투명성 부족은 잠재적인 오류나 편견을 식별하고 해결하기 어렵게 만듭니다. 이러한 모델을 보다 해석하기 쉽게 만드는 방법을 개발하기 위한 연구가 진행 중입니다.\n연산 리소스(Computational Resources): 파운데이션 모델을 훈련하고 실행하려면 GPU나 TPU와 같은 상당한 연산 능력과 리소스가 필요합니다. 따라서 이러한 인프라에 액세스할 수 없는 소규모 기업이나 연구자에게는 접근성이 제한될 수 있습니다.\n보안과 개인 정보 관련 이슈(Security and Privacy Concerns): 파운데이션 모델을 학습하는 데 사용되는 방대한 양의 데이터는 데이터 유츌에 대한 보안과 개인정보 보호 문제를 야기합니다. 악의적인 공격자는 학습 데이터나 모델 자체의 취약점을 악용할 수 있습니다. 강력한 보안 조치와 책임감 있는 데이터 처리 관행을 보장하는 것이 중요합니다.\n환경 영향(Environmental Impact): 이러한 모델을 훈련하는 데는 상당한 양의 에너지가 소모될 수 있습니다. 보다 에너지 효율적인 훈련 방법을 개발하고 재생 가능한 에너지원을 사용하는 것은 파운데이션 모델을 지속 가능하게 배포하기 위한 중요한 고려 사항입니다.\n출처: NVIDIA 블로그\n \n결론\n파운데이션 모델은 AI 기능의 획기적인 도약을 가져다줍니다. 다용도성, 효율성, 방대한 양의 데이터를 통한 학습 능력은 다양한 산업과 일상생활을 변화시킬 차세대 지능형 애플리케이션의 기반을 닦고 있습니다.\n원문: Digital Marketing Curation\n이 필자의 다른 글 읽기\n검색 엔진 마케팅(SEM)에서 해야 할 것과 하지 말아야 할 것\n가독성을 높이는 7가지 이메일 디자인 팁\n당장 그만두어야 하는 구식 SEO 전략 7가지",
        "enclosure": {
          "type": "image/jpeg",
          "length": "0",
          "url": "https://ppss.kr/wp-content/uploads/2025/04/1-7.jpg"
        },
        "dc:creator": "박명근",
        "content": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 [&#8230;]",
        "contentSnippet": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 […]",
        "guid": "https://ppss.kr/?p=269222",
        "categories": [
          "IT",
          "개발"
        ],
        "isoDate": "2025-04-30T03:32:08.000Z"
      }
    ]
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Augustin Popa",
        "title": "What’s New in vcpkg (April 2025)",
        "link": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/",
        "pubDate": "Fri, 02 May 2025 21:44:09 +0000",
        "content:encodedSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg also no longer have to build the vcpkg tool from source when they install vcpkg.\nSome stats for this period:\nThere are now 2,587 total ports available in the vcpkg curated registry. A port is a versioned recipe for building a package from source, such as a C or C++ library.\n23 new ports were added to the curated registry.\n234 ports were updated. As always, we validate each change to a port by building all other ports that depend on or are depended by the library that is being updated for our 15 main triplets.\n92 community contributors made commits.\nThe main vcpkg repo has over 6,800 forks and 24,600 stars on GitHub.\nvcpkg changelog (2025.04.09 release)\nThe following notable changes were made in April:\nArm64 Linux users of vcpkg now receive a prebuilt binary when they bootstrap, rather than having to wait for a source build (PR: Microsoft/vcpkg-tool#1599).\nImproved vcpkg output to clearly state relative paths to files that are being downloaded (PR: Microsoft/vcpkg-tool#1618).\nFixed a crash on Windows when curl is used to download assets (PR: Microsoft/vcpkg-tool#1639, thanks @autoantwort!).\nFixed some bugs with SPDX files generated by vcpkg (PR: Microsoft/vcpkg-tool#1607, thanks @Thomas1664!).\nFixed some bugs with how vcpkg interacts with curl (PRs: Microsoft/vcpkg-tool#1440, Microsoft/vcpkg-tool#1598, Microsoft/vcpkg-tool#1630, thanks @moritz-h, @AndreyAlifanov, and @Osyotr!).\nOther bug fixes (thanks @autoantwort!).\nDocumentation changes\nNew concepts article: Offline Usage of vcpkg. Details two methods on how to deploy vcpkg in environments without live Internet connectivity (PR: Microsoft/vcpkg-docs#457).\nAdded entry for VCPKG_LOCK_FIND_PACKAGE_<Pkg> to vcpkg in CMake projects concepts article. When this option is set, non-nested calls to CMake’s find_package can be required or disabled (PR: Microsoft/vcpkg-docs#344).\nAdded entry for MAYBE_UNUSED_VARIABLES to the Maintainer guide. This can be used to silence a warning during the CMake configuration step (PR: Microsoft/vcpkg-docs#468).\nRevised vcpkg FAQ entry for how to use custom compiler flags to rebuild libraries by providing more specific and actionable advice (PR: Microsoft/vcpkg-docs#465).\nRevised usage and copyright instructions in Tutorial: Package a library with vcpkg and Provide usage documentation for your ports articles (PR: Microsoft/vcpkg-docs#463, thanks @dg0yt!).\nSorted Concepts table of contents entries alphabetically (PR: Microsoft/vcpkg-docs#471).\nIf you have any suggestions for our documentation, please submit an issue in our GitHub repo or see the box at the bottom of a particular article.\n\nTotal ports available for tested triplets\nTriplet\nPorts available\n\n\nx86-windows\n2366\n\n\nx64-windows\n2489\n\n\nx64-windows-release\n2489\n\n\nx64-windows-static\n2352\n\n\nx64-windows-static-md\n2405\n\n\nx64-uwp\n1387\n\n\narm64-windows\n2078\n\n\narm64-windows-static-md\n2056\n\n\narm64-uwp\n1351\n\n\nx64-osx\n2352\n\n\narm64-osx\n2271\n\n\nx64-linux\n2472\n\n\narm-neon-android\n1827\n\n\nx64-android\n1884\n\n\narm64-android\n1851\n\n\n\nWhile vcpkg supports a much larger variety of target platforms and architectures (as community triplets), the list above is validated exhaustively to ensure updated ports don’t break other ports in the catalog.\nThank you to our contributors\nvcpkg couldn’t be where it is today without contributions from our open-source community. Thank you for your continued support! The following people contributed to the vcpkg, vcpkg-tool, or vcpkg-docs repos in this release (listed alphabetically by GitHub username):\na4z\ngian21391\nowent\n\n\nAaronVanGeffen\nguillermocalvo\nPolarGoose\n\n\nadolfos94\ngwaldron\nrremilian\n\n\nAlex-PLACET\nhelynranta\nRippeR37\n\n\nalfredh\nHexDecimal\nrmisev\n\n\naluaces\nhosseinmoein\nRT2Code\n\n\naminya\nJAicewizard\nrtzoeller\n\n\nautoantwort\njalegido\nsaschanaz\n\n\nazure-sdk\njeremy-rifkin\nSidneyCogdill\n\n\nAenBleidd\njglanz\nsinfomicien\n\n\nbgsuello\njonahbeckford\nskypjack\n\n\nbraindigitalis\njreichel-nvidia\nsnnn\n\n\nbuck-yeh\nk-wojcik\nsorokin\n\n\nBurningEnlightenment\nlbartoletti\nstarfishmod\n\n\nc8ef\nlongnguyen2004\nstrega-nil\n\n\ncenit\nluncliff\nSunBlack\n\n\nchrismile\nm7913d\nswebb2066\n\n\nculhatsker\nm-kuhn\ntalregev\n\n\nDarkx32\nmathgeekcoder\ntartanpaint\n\n\ndaschuer\nMarkus87\ntghviking\n\n\nderchr\nmiyanyan\nThomas1664\n\n\ndg0yt\nmussorgsky\nThomsonTan\n\n\nDryvnt\nmvieth\ntimheeg\n\n\ndunhor\nMysvac\ntoge\n\n\neao197\nNeumann-A\nTradias\n\n\nEnzoMassyle\nnickdademo\nVuYeK\n\n\nErik-White\nNiproblema\nwalbourn\n\n\newertons\nnlogozzo\nweirddan455\n\n\nF-I-D-O\noleg-derevenetz\nyanzixiang\n\n\nFidelxyz\nolizit\nytnuf\n\n\ng-maxime\nOsyotr\n\n\n\n\nLearn more\nYou can find the main release notes on GitHub. Recent updates to the vcpkg tool can be viewed on the vcpkg-tool Releases page. To contribute to vcpkg documentation, visit the vcpkg-docs repo. If you’re new to vcpkg or curious about how a package manager can make your life easier as a C/C++ developer, check out the vcpkg website – vcpkg.io.\nIf you would like to contribute to vcpkg and its library catalog, or want to give us feedback on anything, check out our GitHub repo. Please report bugs or request updates to ports in our issue tracker or join more general discussion in our discussion forum.\n \nThe post What’s New in vcpkg (April 2025) appeared first on C++ Team Blog.",
        "dc:creator": "Augustin Popa",
        "comments": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/#comments",
        "content": "<p>This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/\">What’s New in vcpkg (April 2025)</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg […]\nThe post What’s New in vcpkg (April 2025) appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35441",
        "categories": [
          "C++",
          "Vcpkg",
          "vcpkg"
        ],
        "isoDate": "2025-05-02T21:44:09.000Z"
      },
      {
        "creator": "Sinem Akinci",
        "title": "There’s a Linux File Explorer built into Visual Studio!?!",
        "link": "https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/",
        "pubDate": "Thu, 01 May 2025 15:44:39 +0000",
        "content:encodedSnippet": "The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It’s a powerful tool for managing remote environments without leaving your development workflow.\nScott Hanselman published a new YouTube video to his channel, taking us on the journey of discovering and using the Remote File Explorer to interact with his personal PiDP-11 through shell scripts stored on the minicomputer.\nCheck out Scott’s video and his thoughts about using the Remote File Explorer below:\n\nUsing the Remote File Explorer and remote development capabilities from Visual Studio\nTo learn more about utilizing the Remote File Explorer, please see our announcement blog post and our updates blog post.\nVisual Studio delivers a comprehensive suite of remote development capabilities, empowering developers to build, run, and debug applications on remote Linux systems with the same experience they enjoy locally. From the Integrated Terminal, which offers direct access to the remote shell, to full support for the build system, project system, language services, and debugging tools, every part of the development workflow is designed to work remotely. Whether you’re using MSBuild or CMake-based projects, Visual Studio enables true cross-platform development – allowing you to stay productive across environments without leaving the IDE. To learn more, visit our remote Linux development docs for Visual Studio.\nWant to learn more?\nCheck out our playlist of remote Linux videos for C++ development on YouTube to discover more of our remote tooling:\nhttps://www.youtube.com/playlist?list=PLReL099Y5nRc6a6gTmir60KUABlPtAodZ\nThe Microsoft C++ team is continuously looking to improve the remote Linux experience with the IDE and would love to hear from any enterprise that works with Visual Studio. Please reach out to us via email at visualcpp@microsoft.com.\nThe post There’s a Linux File Explorer built into Visual Studio!?! appeared first on C++ Team Blog.",
        "dc:creator": "Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/#comments",
        "content": "<p>The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It&#8217;s a powerful tool for managing remote environments without leaving your development workflow. Scott Hanselman published a new YouTube video to his channel, taking us on the journey of [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/\">There’s a Linux File Explorer built into Visual Studio!?!</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It’s a powerful tool for managing remote environments without leaving your development workflow. Scott Hanselman published a new YouTube video to his channel, taking us on the journey of […]\nThe post There’s a Linux File Explorer built into Visual Studio!?! appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35410",
        "categories": [
          "C++"
        ],
        "isoDate": "2025-05-01T15:44:39.000Z"
      },
      {
        "creator": "Alexandra Kemper, Sinem Akinci",
        "title": "VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths",
        "link": "https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/",
        "pubDate": "Wed, 30 Apr 2025 23:31:17 +0000",
        "content:encodedSnippet": "The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on your preferences. \n Experience these new features for yourself by updating to version 1.25.  \nCopilot Hover\nWant to understand your unfamiliar codebases like undocumented library code quicker without having to navigate around files and read several lines of code? Looking for easy-to-digest information in the middle of your coding task to help get you started? \nGitHub Copilot now leverages C++ language services to provide summaries of symbols that you would like to learn more about or are lacking documentation. This requires an active GitHub Copilot subscription, now available to try for free. \nWhen you hover over any symbol, you’ll now have an option to Generate Copilot summary. \n\nCopilot will leverage context provided by C++ language services to generate more information on a given symbol for you no matter where you are in your codebase, using its declaration or definition information. For example, see how it helps understand the ctx_server struct from llama.cpp, an LLM inference written in C/C++. \n\nPlease let us know any feedback on the user experience by commenting on our open issue tracking this. \nCustomize Recursive #include Processing  \nHave you ever worked on a project that wasn’t configured and had issues with recursive #includes? With this release, we have introduced three new settings to give you more control over how recursive include paths are processed. This lets you tune IntelliSense for better correctness and performance in your project.  \nThe ideal way to configure the C++ Extension is with a configuration provider (such as CMake Tools) or a compile_commands.json file, which will provide the configuration for IntelliSense. Otherwise, the C++ extension, by default, adds a ‘recursive’ include path to your configuration which searches all subdirectories of your workspace as if they were #include paths. Recursion is indicated by appending /** to your include path in your c_cpp_properties.json file: \n\nWhile using recursive includes saves you from having to list every include path individually, the process of resolving recursive includes can be resource and time intensive, especially for large projects.   \nTo better tailor this process to your project’s structure and your performance needs, you can now optimize with three new configuration options in c_cpp_properties.json:\n1. recursiveIncludes.reduce\nBy default, the C++ extension avoids passing unneeded include paths to the IntelliSense process. When the extension opens and parses a source file, it recursively follows each #include to track every directory that contains a header. Only these relevant directories are used in the final configuration passed to the IntelliSense process. However, the process of identifying directories to reduce can add additional overhead. \nWith the new “recursiveIncludes.reduce” setting, you can choose to skip this reduction step. By setting reduce to “never”, all recursive include paths will be passed to the IntelliSense process. In some situations, depending on the sub-directory layout, header file structure, and other project characteristics, this can lead to performance improvements. \nFor example, when setting reduce to “never” for the PyTorch source code, there was an average 3.1x speedup in the time to generate the initial semantic colorization for a file on first open. For this project, it is faster to pass all include paths to the IntelliSense process rather than spend time reducing include paths to relevant directories.  This speedup was 1.5x on MacOS, 2x on Linux, and 5.8x on Windows. Testing was done using version 1.99 of VS Code, comparing the C++ extension version 1.23 to 1.25. \n  \nNote that performance gains may vary depending on the machine and project used. To learn more, please reference the recursive include path documentation.\n2. recursiveIncludes.priority\nHave you ever opened a large project for the first time, opened a file that uses  #include “string.h” and IntelliSense finds the wrong string.h? It turns out one of your project’s sub directories contains a header file named “string.h” that conflicts with the system header for “string.h”. With the new priority setting, you can now determine which of these two to choose. \nAlways prioritize your own header file? Choose “beforeSystemIncludes”.  This process mimics a compiler’s resolution order, which ensures IntelliSense results match the compiler’s results and allows for more predictability. For example, if you create a “string.h” locally, you probably want IntelliSense to pick up that file in the same way a compiler would. \nAlways prioritize the system header? Choose “afterSystemIncludes”. For example, if your code contains the sysroots for multiple IoT devices, you want to pick up system includes from your compiler and not from the first sysroot found in your workspace.  \n3. recursiveIncludes.order\nCustomize further by specifying the search order so relevant header files are found first. If your workspace has multiple files of the same name, and the incorrect file is chosen, try switching to “breadthFirst” instead of the default “depthFirst” so headers closer to the root of the recursive include path have higher priority.   \nTry it out \nTo experiment with these new settings and experience the performance improvements yourself, open your workspace in VS Code, then: \nOpen the Command Palette (Ctrl+Shift+P on Windows or Cmd+Shift+P on Mac) and open the editor for c_cpp_properties.json by running: `C/C++: Edit Configurations (JSON)`\nConfirm you’re using a recursive path ending in /** under “includePath”: \n\n      3. Add or modify the fields in the recursiveIncludes section:\n \nSave your changes and reopen a file in your project to see them take effect. You can toggle these settings to determine which configuration provides the best performance for your project.  \nWhat do you think?  \nDownload the C/C++ extension for Visual Studio Code  today, give it a try, and let us know what you think.  \nIf you have any questions around this release, feel free to start a discussion in our GitHub repository. Otherwise, if you run into any issues, please report them in the issues section. We can be reached via the comments below, per email at  visualcpp@microsoft.com, or through our team on X/Twitter at  @VisualC. \n \nThe post VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths appeared first on C++ Team Blog.",
        "dc:creator": "Alexandra Kemper, Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/#respond",
        "content": "<p>The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/\">VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot &#038; Customize recursive include paths</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on […]\nThe post VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35419",
        "categories": [
          "C++",
          "Copilot",
          "performance",
          "Visual Studio Code"
        ],
        "isoDate": "2025-04-30T23:31:17.000Z"
      },
      {
        "creator": "Sy Brand",
        "title": "Pure Virtual C++ 2025 is Tomorrow",
        "link": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/",
        "pubDate": "Tue, 29 Apr 2025 09:07:40 +0000",
        "content:encodedSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It’s running live tomorrow, 30th April, from 14:00 to 16:30 UTC.\nRegister for Free\n\nThe talks are:\n14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi\n14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang\n15:00 UTC: Making unfamiliar C++ code familiar with GitHub Copilot with Sinem Akinci\n15:30 UTC: C++ Modules Myth Busting with Cameron DaCamara\n16:00 UTC: constexpr everything?! with Hana Dusíková\nWe also have a host of pre-conference content available on YouTube.\nWe look forward to seeing you there!\nThe post Pure Virtual C++ 2025 is Tomorrow appeared first on C++ Team Blog.",
        "dc:creator": "Sy Brand",
        "comments": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/#respond",
        "content": "<p>Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It&#8217;s running live tomorrow, 30th April, from 14:00 to 16:30 UTC. The talks are: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making unfamiliar C++ code familiar with [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/\">Pure Virtual C++ 2025 is Tomorrow</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It’s running live tomorrow, 30th April, from 14:00 to 16:30 UTC. The talks are: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making unfamiliar C++ code familiar with […]\nThe post Pure Virtual C++ 2025 is Tomorrow appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35414",
        "categories": [
          "Announcement",
          "C++",
          "Pure Virtual C++"
        ],
        "isoDate": "2025-04-29T09:07:40.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "Enhancing the Python ecosystem with type checking and free threading",
        "link": "https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/",
        "pubDate": "Mon, 05 May 2025 16:00:05 +0000",
        "content:encodedSnippet": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts. \nWe’ll look at two key efforts in Python’s packaging ecosystem to make packages faster and easier to use:\n Unlock performance wins for developers through free-threaded Python – where we leverage Python 3.13’s support for concurrent programming (made possible by removing the Global Interpreter Lock (GIL)). \n Increase developer velocity in the IDE with improved type annotations.\nEnhancing typed Python in the Python scientific stack\nType hints, introduced in Python 3.5 with PEP-484, allow developers to specify variable types, enhancing code understanding without affecting runtime behavior. Type-checkers validate these annotations, helping prevent bugs and improving IDE functions like autocomplete and jump-to-definition. Despite their benefits, adoption is inconsistent across the open source ecosystem, with varied approaches to specifying and maintaining type annotations.\nThe landscape of open source software is fractured with respect to how type annotations are specified, maintained, and distributed to end users. Some projects have in-line annotations (types directly declared in the source code directly), others keep types in stub files, and many projects have no types at all, relying on third party repositories such as the typeshed to provide community-maintained stubs. Each approach has its own pros and cons, but application and maintenance of them has been inconsistent.\nMeta and Quansight are addressing this inconsistency through:\nDirect contributions: We have improved the type coverage for pandas-stubs and numpy, and are eager to expand the effort to more packages. \nCommunity engagement: Promoting type annotation efforts to encourage community involvement, listen to feedback and create actionable ways to improve the ecosystem. \nTooling and automation: Developing tools to address common challenges adding types and keeping the types up-to-date with the source code.\nImproved type annotations in pandas\nTL;DR: Pandas is the second most downloaded package from the Python scientific stack. We improved pandas-stubs package type annotation coverage from 36% to over 50%.\nBackground\nThe pandas community maintains its own stubs in a separate repository, which must be installed to obtain type annotations. While these stubs are checked separately from the source code, it allows the community to use types with their own type checking and IDE. \nImproving type coverage\nWhen we began our work in pandas-stubs, coverage was around 36%, as measured by the percentage of parameters, returns, and attributes that had a complete type annotation (the annotation is present and all generics have type arguments). After several weeks of work and about 30 PRs, type completeness is now measured at over 50%. The majority of our contributions involved adding annotations to previously-untyped parameters, adding type arguments to raw generic types, and removing deprecated/undocumented interfaces. We also improved several inaccurate annotations and updated others to match the inline annotations in the pandas source code. \nKey introductions\nTwo key introductions significantly increased coverage:\nReplacing raw Series types with UnknownSeries, a new type aliased to Series[Any]. When applied to return type annotations, this reduces the number of type checker false-positives when the function is called.\nImproving types of core Dataframe operations like insert, combine, replace, transpose, and assign, as well as many timestamp and time-zone related APIs.\nTooling development\nIn addition to improving coverage directly, we developed tooling to catalog public interfaces missing annotations. We also augmented our tools for measuring type coverage to handle the situation where stubs are distributed independently, rather than being packaged into the core library wheel.\nWhat is free-threaded Python ?\nFree-threaded Python (FTP) is an experimental build of CPython that allows multiple threads to interact with the VM in parallel. Previously, access to the VM required holding the global interpreter lock (GIL), thereby serializing execution of concurrently running threads. With the GIL becoming optional, developers will be able to take full advantage of multi-core processors and write truly parallel code.\nBenefits of free-threaded Python\nThe benefits of free-threaded Python are numerous:\nTrue parallelism in a single process: With the GIL removed, developers can write Python code that takes full advantage of multi-core processors without needing to use multiple processes. CPU-bound code can execute in parallel across multiple cores.\nImproved performance: By allowing multiple threads to execute Python code simultaneously, work can be effectively distributed across multiple threads inside a single process.\nSimplified concurrency: Free-threading provides developers with a more ergonomic way to write parallel programs in Python. Gone are the days of needing to use multiprocessing.Pool and/or resorting to custom shared memory data structures to efficiently share data between worker processes.\nGetting Python’s ecosystem ready for FTP\nThe ecosystem of Python packages must work well with free-threaded Python in order for it to be practically useful; application owners can’t use free-threading unless their dependencies work well with it. To that end, we have been taking a “bottoms up” approach to tackle the most difficult/popular packages in the ecosystem. We’ve added free-threading support to many of the most popular packages used for scientific computing (e.g. numpy, scipy, scikit-learn) and language bindings (e.g. Cython, nanobind, pybind, PyO3).\nJust getting started\nTogether, we made substantial progress in improving type annotations and free-threading compatibility in Python libraries. We couldn’t have done it without the Python community and are asking others to join our efforts.  Whether it’s further updates to the type annotations or preparing your code for FTP, we value your help moving the Python ecosystem forward!\nTo learn more about Meta Open Source, visit our open source site, subscribe to our YouTube channel, or follow us on Facebook, Threads, X and LinkedIn.\nThe post Enhancing the Python ecosystem with type checking and free threading appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.  We’ll look at two key efforts in Python’s packaging ecosystem to make packages faster and easier to use: 🚀 Unlock performance wins for developers through free-threaded Python – [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/\">Enhancing the Python ecosystem with type checking and free threading</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.  We’ll look at two key efforts in Python’s packaging ecosystem to make packages faster and easier to use: 🚀 Unlock performance wins for developers through free-threaded Python – [...]\nRead More...\nThe post Enhancing the Python ecosystem with type checking and free threading appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22472",
        "categories": [
          "DevInfra"
        ],
        "isoDate": "2025-05-05T16:00:05.000Z"
      },
      {
        "creator": "",
        "title": "Taking the plunge: The engineering journey of building a subsea cable",
        "link": "https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/",
        "pubDate": "Thu, 01 May 2025 18:48:02 +0000",
        "content:encodedSnippet": "Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – are critical for Meta to serve people wherever they are in the world. In fact, more than 95% of the world’s intercontinental traffic goes through subsea cables. \nMeta’s engineering team prioritizes both innovation and quality when designing and deploying these cables. In the latest Meta Tech Podcast, Andy Palmer-Felgate and Pascal Pecci, both subsea cable systems engineers, join Pascal Hartig on the Meta Tech podcast to discuss the latest in subsea engineering technology. This episode dives deeper into the engineering nuances of large-scale subsea cable projects like the recently announced Project Waterworth. \nLearn more about Meta’s work on these engineering feats. Download or listen to the episode below:\n\nThe Meta Tech Podcast is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features.\nSend us feedback on Instagram, Threads, or X.\n\nAnd if you’re interested in learning more about career opportunities at Meta, visit the Meta Careers page.\nThe post Taking the plunge: The engineering journey of building a subsea cable appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Taking the plunge: The engineering journey of building a subsea cable</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – [...]\nRead More...\nThe post Taking the plunge: The engineering journey of building a subsea cable appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22481",
        "categories": [
          "Connectivity",
          "Networking & Traffic",
          "Meta Tech Podcast"
        ],
        "isoDate": "2025-05-01T18:48:02.000Z"
      },
      {
        "creator": "",
        "title": "Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes",
        "link": "https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/",
        "pubDate": "Tue, 29 Apr 2025 17:15:17 +0000",
        "content:encodedSnippet": "We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing.\nBy providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems. \nThis initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community to address the critical challenge of software vulnerability repair.\nAutoPatchBench is available now on GitHub.\nAI is increasingly being applied to solve security challenges, including repairing vulnerabilities identified through fuzzing. However, the lack of a standardized benchmark for objectively assessing AI-driven bug repair agents specific to fuzzing has impeded progress in academia and the broader community. Today, we are publicly releasing AutoPatchBench, a benchmark designed to evaluate AI program repair systems. AutoPatchBench sits within CyberSecEval 4, Meta’s new benchmark suite for evaluating AI capabilities to support defensive use cases. It features 136 fuzzing-identified C/C++ vulnerabilities in real-world code repos along with verified fixes sourced from the ARVO dataset. \nAutoPatchBench provides a standardized evaluation framework for assessing the effectiveness of AI-assisted vulnerability repair tools. This benchmark aims to facilitate a comprehensive understanding of the capabilities and limitations of various AI-driven approaches to repairing fuzzing-found bugs. By offering a consistent set of evaluation criteria, AutoPatchBench fosters transparency and reproducibility in research, enabling both academic and industry professionals to identify best practices and areas for improvement.\nFixing fuzzing-found vulnerabilities with AI\nFuzzing is a cornerstone in automated testing, renowned for its effectiveness in uncovering security vulnerabilities. By bombarding a target program with vast amounts of pseudo-random input data, fuzz testing exposes critical security and reliability issues, such as memory corruption, invalid pointer dereference, integer overflow, and parsing errors. \nHowever, resolving a fuzzing crash is often a labor intensive task, demanding intricate debugging and thorough code review to pinpoint and rectify the underlying cause. This process can be both time-consuming and resource-intensive. Unlike regular test failures, fuzzing bugs frequently reveal security vulnerabilities that pose severe threats to system integrity and user data. Given these stakes, automating the repair of fuzzing bugs with AI becomes not just advantageous but essential. AI’s ability to swiftly analyze patterns and propose solutions significantly reduces the time and effort required for repairs, making it an invaluable ally in safeguarding our digital environments.\nLet’s explore the process of addressing bugs identified through fuzzing by examining a demonstrative example. Consider the following C function, which harbors a read/write buffer overflow vulnerability:\n#include <stdio.h>\r\n#include <string.h>\r\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strcpy(buffer, input); // Potential buffer overflow\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\nIn this scenario, a fuzzing harness might supply an input that surpasses the buffer’s capacity, leading to a crash due to buffer overflow. A typical stack trace from such a crash might appear as follows:\n== Fuzzer Crash Report ==\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff7af1223 in strcpy () from /lib/x86_64-linux-gnu/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff7af1223 in strcpy ()\r\n#1  0x0000555555555140 in process_input (input=0x7fffffffe695 \"AAAAAA...\")\r\n#2  0x0000555555555162 in main (argc=2, argv=0x7fffffffe5f8)\nHere, the process_input function invokes strcpy on a string that exceeds the eight-character buffer, causing a segmentation fault. A straightforward patch involves ensuring the copy operation remains within the buffer’s limits. This can be achieved by using a bounded copy function like strncpy or implementing a length check before copying:\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strncpy(buffer, input, sizeof(buffer) - 1);\r\n    buffer[sizeof(buffer) - 1] = '\\0';\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\nThis patch ensures that the string remains within the buffer’s limits, effectively preventing out-of-bounds writes. Its correctness can be confirmed by verifying that the fuzzing input, which previously caused the crash, no longer does so. Additional checks can be conducted to ensure the patch doesn’t introduce any unintended side effects.\nAs illustrated, fixing a fuzzing crash involves:\nAnalyzing the crash stack trace and the target code. \nPinpointing the root cause. \nPatching the vulnerable code. \nVerifying the fix’s accuracy. \nAn AI-based solution can automate these steps by utilizing an LLM’s capability to understand and generate code.\nWhy we developed AutoPatchBench\nAutoPatchBench is informed by key advancements in the field of AI-driven program repair, particularly those focusing on fuzzing-found vulnerabilities. Among the notable contributions is Google’s tech report on AI-powered patching, which pioneered the use of LLMs for addressing fuzzing crashes, achieving a 15% fix rate with their proprietary dataset. Subsequently, Google’s study on generic program repair agents introduced the GITS-Eval benchmark, encompassing 178 bugs across various programming languages. \nIn the realm of AI software engineering agents, benchmarks like SWE-Bench and SWE-Bench Verified have gained widespread acceptance for evaluating generic AI SWE agents. However, these benchmarks do not specifically tackle the unique challenges posed by fuzzing-found vulnerabilities, which demand specialized approaches that utilize fuzzing-specific artifacts and address security concerns. \nAutoPatchBench addresses this gap by offering a dedicated benchmark focused on a wide variety of C/C++ vulnerabilities of 11 crash types identified through fuzzing with automated verification capability. Unlike the broader focus of GITS-Eval and SWE-Bench, AutoPatchBench is specifically designed to assess the effectiveness of AI-driven tools in repairing security-critical bugs typically uncovered by fuzzing. This targeted approach enables a more precise evaluation of AI capabilities in meeting the complex requirements of fuzzing-found vulnerabilities, thereby advancing the field of AI-assisted program repair in a focused manner.\nInside AutoPatchBench\nWe’re making AutoPatchBench publicly available as part of CyberSecEval 4 to encourage community collaboration in tackling the challenge of automating fuzzing crash repairs. This benchmark is specifically designed for AI program repair agents focusing on C/C++ bugs identified through fuzzing. It includes real-world C/C++ vulnerabilities with verified fixes sourced from the ARVO dataset, and incorporates additional verification of AI-generated patches through fuzzing and white-box differential testing.\nARVO dataset\nThe ARVO dataset serves as the foundation for AutoPatchBench, offering a comprehensive collection of real-world vulnerabilities that are essential for advancing AI-driven security research. Sourced from C/C++ projects identified by Google’s OSS-Fuzz, ARVO includes over 5,000 reproducible vulnerabilities across more than 250 projects. Each entry is meticulously documented with a triggering input, a canonical developer-written patch, and the capability to rebuild the project in both its vulnerable and patched states. \nHowever, there are notable challenges when using the ARVO dataset as a benchmark for AI patch generation:\nWhile reproducibility is vital for a reliable benchmark, the ARVO dataset includes samples where crashes are not consistently reproducible. Some samples lack crash stack traces, making it exceedingly difficult to address the crash.\nAlthough ARVO provides a ground-truth fix for each identified vulnerability, it lacks an automated mechanism to verify the correctness of a generated patch. Objective automated verification is essential for a benchmark focused on patch generation.\nAutoPatchBench addresses these challenges by creating a curated subset and by employing a comprehensive and automated verification process.\nSelection criteria\nTo ensure the reliability and effectiveness of AutoPatchBench, we meticulously filtered the ARVO dataset samples based on the following criteria:\nValid C/C++ vulnerability: The ground-truth fix shall edit one or more C/C++ source files that are not fuzzing harnesses.\nDual-container setup: Each vulnerability is accompanied by two containers—one that contains vulnerable code and another for the fixed code—that build without error.\nReproducibility: The crash must be consistently reproducible within the vulnerable container.\nValid stack trace: A valid stack trace must be present within the vulnerable container to facilitate accurate diagnosis and repair.\nSuccessful compilation: The vulnerable code must compile successfully within its designated container, ensuring that the environment is correctly set up for testing.\nFixed code verification: The fixed code must also compile successfully within its respective container, confirming that the patch does not introduce new build issues.\nCrash resolution: The crash must be verified as resolved within the fixed container, demonstrating the effectiveness of the patch.\nFuzzing pass: The fixed code must pass a comprehensive fuzzing test without finding new crashes, ensuring that the ground-truth patch maintains the integrity and functionality of the software.\nAfter applying these rigorous selection criteria, we retained 136 samples for AutoPatchBench that fulfill the necessary conditions for both patch generation and verification. From this refined set, we created a down-sampled subset of 113 AutoPatchBench-Lite samples to provide a focused benchmark for testing AI patch generation tools. These subsets preserves the diversity and complexity of real-world vulnerabilities including 11 distinct crash types, offering a solid foundation for advancing AI-driven security solutions.\nPatch verification\nIn the process of patch generation, the patch generator utilizes two automated methods to verify the viability of a generated patch before submitting it for evaluation. The first method involves attempting to build the patched program, which checks for syntactic correctness. The second method involves attempting to reproduce the crash by running the input that initially triggered it. If the crash no longer occurs, it suggests that the issue has been resolved. However, these steps alone are insufficient to guarantee the correctness of the patch, as a patch might not maintain the program’s intended functionality, rendering it incorrect despite resolving the crash.\nTo address this issue, AutoPatchBench adopts a comprehensive approach to automate the evaluation of generated patches. This involves subjecting the patched code to further fuzz testing using the original fuzzing harness that initially detected the crash. Additionally, white-box differential testing compares the runtime behavior of the patched program against the ground truth repaired program, confirming that the patch has effectively resolved the underlying bug without altering the program’s intended functionality. Since a patch can potentially be made in multiple places, we cannot assume that the LLM will patch the same function as the groundtruth patch does. Instead we find all the callstacks for each call to a patched function. Then we find the lowest common ancestor (LCA) across all pairs of stacktraces offered by the groundtruth patch and the LLM patch. We then utilize debug information to inspect arguments, return values, and local variables at the first function above the LCA, differential testing offers a detailed view of the patch’s impact on the program state. \nThis process evaluates whether the generated patch produces a program state identical to the ground truth program after the patched function returns. By using a diverse set of inputs obtained from fuzzing, this gives higher confidence that the bug is fixed without changing the visible behavior of the patched functions. This differential testing is implemented using a Python script that leverages LLDB APIs to dump all visible states and identify differences between the ground truth and the patched program. \nHowever, as with all attempts to solve provably undecidable problems (in this case: program equivalence), there are some failure modes for this verification step. For example, sometimes the analysis fails with timeouts, in which case we consider the semantics to be preserved if both the ground truth and the LLM patch timed out. Programs might also behave non-deterministically, and we run each input three times to identify nondeterministic struct fields and values. Such fields will not be compared to avoid false alarms from noisy, random values. Additionally, we strip any fields that contain the substring “build” or “time” as we’ve observed false positives from build-ids (that happen to be deterministic within a program, but not across different patches). \nIt should also be noted that on a number of examples, the crashing PoC never actually triggered the breakpoints on the ground truth patch, making comparison of the resulting states impossible. However, our case study showed that white-box differential testing is still effective in filtering out a majority of incorrect patches despite its limitation, which will be discussed in the case study.\nAutoPatchBench and AutoPatchBench-Lite\nAutoPatchBench is a comprehensive benchmark dataset of 136 samples. It encompasses a wide range of real-world vulnerabilities, providing a robust framework for assessing the capabilities of automated patch generation systems. \nWithin this benchmark, we have also created a subset called AutoPatchBench-Lite that consists of 113 samples. AutoPatchBench-Lite focuses on a simpler subset of vulnerabilities where the root cause of the crash is confined to a single function. This version is designed to cater to scenarios where the complexity of the bug is relatively low, making it more accessible for tools that are in the early stages of development or for those that specialize in handling straightforward issues.\nThe rationale for creating AutoPatchBench-Lite stems from the observation that when root causes are distributed across multiple locations within the code, the difficulty of generating a correct patch increases significantly. Addressing such “hard” crashes requires a tool to possess advanced reasoning capabilities to analyze larger codebases and apply patches to multiple areas simultaneously. This complexity not only challenges the tool’s design but also demands a higher level of sophistication in its algorithms to ensure accurate and effective patching.\nBy offering both AutoPatchBench and AutoPatchBench-Lite, we provide a tiered approach to benchmarking, allowing developers to progressively test and refine their tools. This structure supports the development of more advanced solutions capable of tackling both simple and complex vulnerabilities, ultimately contributing to the enhancement of AI-assisted bug repair techniques.\nExpected use cases\nAutoPatchBench offers significant value to a diverse range of users. Developers of auto-patch tools can leverage our open-sourced patch generator to enhance their tools and assess their effectiveness using the benchmark. Software projects employing fuzzing can incorporate our open-sourced patch generator to streamline vulnerability repair. Additionally, model developers can integrate the benchmark into their development cycles to build more robust and specialized expert models for bug repair. The tooling around the patch generator provided here can also be used in reinforcement learning as a reward signal during training. This data helps train models to better understand the nuances of bug repair, enabling them to learn from past fixes and improve their ability to generate accurate patches. \nReference implementation\nWe developed a basic patch generator to establish a baseline performance using AutoPatchBench. This generator is specifically designed to address simple crashes that involve patching a single function. We have open-sourced this reference implementation to encourage the community to build and expand upon it.\nFigure 1 shows a high-level overview of its design. The patch generator takes crash stack trace and target source code as input. It identifies the source locations from the stack trace and extracts every function that contains those locations. It then asks the LLM to identify the root cause and repair the crash by patching one of the functions. Upon receiving a response from the LLM, the patch generator extracts the revised code, applies the patch, compiles the program, and tests it against the original input that caused the crash. If the build or test fails, we re-engage the LLM with the error message from the build or test output, requesting it to attempt a solution again until the crash is resolved. If a fix trajectory fails to reach a valid solution that passes build and crash reproduction within a finite number of steps, we start a new trajectory to reset the context window, preventing prolonged entrapment in an incorrect path.\nFigure 1: Patch generation flowchart.\nThe example prompt below also captures the essence of our approach. Note that the actual prompt is more detailed and divided into multiple segments to promote chain-of-thought reasoning.\nAs an experienced Security Engineer at Meta, your task is to address the following security-critical fuzzing crash. Below is the stack trace of the crash:\r\n\r\n== Fuzzer Crash Report ==\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff7af1223 in strcpy () from /lib/x86_64-linux-gnu/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff7af1223 in strcpy ()\r\n#1  0x0000555555555140 in process_input (input=0x7fffffffe695 \"AAAAAA...\")\r\n#2  0x0000555555555162 in main (argc=2, argv=0x7fffffffe5f8)\r\n\r\nHere is the source code for the functions involved in the stack trace:\r\n\r\nstrcpy() {...}\r\n\r\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strcpy(buffer, input); // Potential buffer overflow\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\r\nint main() {...}\r\n\r\nAssuming the root cause of the crash is within one of these functions, generate a patched version of the faulty function to resolve the fuzzing crash. Ensure that you provide a complete rewrite of the function so that the patch can be applied and the code compiled without errors.\r\n\nA case study with AutoPatchBench-Lite\nIn the case study, we demonstrate the use of AutoPatchBench by evaluating our reference patch generator with several LLM models. Given that our reference implementation is limited to addressing simple issues, we conducted our evaluation with AutoPatchBench-Lite, which contains 113 samples. To prevent fix trajectories from becoming excessively prolonged, we capped the maximum length of each trajectory at five. Additionally, we set the maximum number of retries to 10. \nPlease note that the case study is not intended to provide a statistically rigorous comparison of model performance. Instead, it aims to present preliminary results to establish a baseline expectation. We encourage future research to build upon these findings.\nEffectiveness of patch generation and verification\nWe evaluated the effectiveness of the patch generator and our automated verification processes while using different LLM models as back-end. The figure below illustrates the effectiveness of patch generation and verification by presenting the percentage of samples that successfully passed each sequential verification step: (1) patch validity: build and crash reproducibility check, (2) fuzzing pass: passes 10-minute fuzzing, and (3) testing pass: passes white-box differential testing. It is important to note that the patch generation process only utilizes step (1) to verify the build and crash reproducibility. The fuzzing and differential testing are conducted post-generation to assess correctness.\nFigure 2: Patch generation and verification success rate.\nFigure 2 shows that all models achieved similar generation success rates of around 60% and similar post-verification success rates of around 5-11% with overlapping confidence intervals, and therefore, we do not draw any conclusion about their relative performance. The graph does, however, reveal that a substantial portion of the generated patches are found to be incorrect when subjected to fuzzing and white-box differential testing. For instance, Gemini 1.5 Pro achieved a 61.1% patch generation success rate, yet fewer than 15% of these patches (5.3% out of total set) were found to be correct. This gap highlights that build and crash reproduction are not good enough signals to infer the correctness of generated patches, and that future patch generation approaches should scrutinize the semantic preservation of generated patches more thoroughly. This gap also underscores the vital role of the comprehensive verification processes that checks semantic equivalence, a distinctive contribution of AutoPatchBench.\nEffect of inference-time computation\nTo assess the impact of inference-time computation on improving the patch generation success rate, we present the distribution of retry counts among the 73 patches produced by Llama 4 Maverick.\n\nFigure 3: Percentage of generated patches per number of iterations.\nFigure 3 shows that 44 out of 73 patches, or 60.2%, were successfully generated on the first attempt. The remaining 40% of the samples required more than two iterations, with no evident plateau until the 10th iteration. This outcome demonstrates that allocating more computational resources during inference-time leads to a higher success rate and suggests that increasing the number of retries could yield better results.\nManual validation\nIn our investigation of the precision and recall of white-box differential testing, we conducted a manual validation of 44 patches that passed 10-minute fuzzing against human-written ground truth fixes with the help of security experts. These patches were selected from a pool of 73 generated by Llama 4 Maverick. The following table shows the confusion matrix.\nTable 1: Confusion matrix between human judgement and differential testing\n\nTest pass\nTest fail\nSum\n\n\nHuman pass\n5\n0\n5\n\n\nHuman reject\n7\n32\n39\n\n\nSum\n12\n32\n44\n\n\n\n \nThe results showed that the differential testing achieved an accuracy of 84.1% for this sample (5 + 32 / 44), indicating a high overall agreement with the human assessment. However, a closer examination of the confusion matrix revealed a notable discrepancy between precision and recall. Specifically, the testing method demonstrated 100.0% recall in this case study, correctly identifying all 5 instances that humans judged as correct. In contrast, precision was relatively low (41.7%), with 7 false positives out of 12 total positive predictions. This suggests that differential testing reported success on some incorrect patches as well, highlighting the need for manual validation of patch correctness. Despite this shortcoming, the result clearly shows the utility of differential testing in automatically rejecting a substantial number of incorrect patches, which will substantially save the manual validation effort.\nKey insights\nOur case study revealed several limitations of the current patch generator.\nThe root cause may not exist in the stack trace\nFrequently, crashes are the result of state contamination that occurs prior to the crash being triggered. Consequently, none of the functions within the stack frames may include the code responsible for the root cause. Since our current implementation requires the LLM to assume that the root cause is located within one of the functions in the stack trace, it is unable to generate an accurate patch in such cases. Solving this problem would require a more autonomous agent which can reason about the root cause on its own with a code browsing capability.\nCheating\nIn some instances, the LLM resorted to “cheating” by producing patches that superficially resolved the issue without addressing the underlying problem. This can occur when the generator modifies or removes code in a way that prevents the crash from occurring, but does not actually fix the root cause of the issue. We observed that cheating happens more frequently when we request the LLM to retry within the same trajectory. A potential solution to this could be to empower the LLM to say “I cannot fix it,” which may come with a tradeoff with success rate. However, note that most of the cheating was caught in the verification step, highlighting the utility of differential testing.\nNeed for enhanced patch verification methods\nFuzzing and white-box differential testing have shown that a large majority of generated patches are incorrect when compared to the ground-truth patches. This finding highlights the challenge of generating accurate patches without enhanced verification capabilities. To address this gap, several approaches can be considered:\nA patch generator could provide additional code context when querying the LLM for a patch so that LLM can better understand the consequence of a code patch.\nA patch generator could make additional LLM queries to verify the perseverance of existing functionality.\nA patch generator can attempt to generate multiple valid patches by exploring multiple trajectories in parallel, and let LLM choose the best option that is most likely to be correct.\nIn a well-tested real-world codebase, a patch generator can utilize existing tests to validate the patches it creates. This process complements building the code and checking for crash reproduction, allowing the patch generator to retry if a patch fails the tests. The accuracy of the generated patches is largely dependent on the thoroughness of the existing tests.\nIn conclusion, while our study has identified several challenges with the current patch generation process, it also opens up opportunities for improvement. By addressing these limitations with innovative solutions, we can enhance the accuracy and reliability of patch generation, paving the way for more robust and effective automated tools.\nGet started with AutoPatchBench\nAutoPatchBench is now available on GitHub. We welcome pull requests to integrate new/additional agent architectures into the framework, and look forward to seeing how well they perform on AutoPatchBench.\nThe post Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing. By providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems.  This initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/\">Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing. By providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems.  This initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community [...]\nRead More...\nThe post Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22391",
        "categories": [
          "AI Research"
        ],
        "isoDate": "2025-04-29T17:15:17.000Z"
      },
      {
        "creator": "",
        "title": "Building Private Processing for AI tools on WhatsApp",
        "link": "https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/",
        "pubDate": "Tue, 29 Apr 2025 17:15:00 +0000",
        "content:encodedSnippet": "We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way.\nWe’re sharing an early look into Private Processing, an optional capability that enables users to initiate a request to a confidential and secure environment and use AI for processing messages where no one — including Meta and WhatsApp — can access them.\nTo validate our implementation of these and other security principles, independent security researchers will be able to continuously verify our privacy and security architecture and its integrity.\nAI has revolutionized the way people interact with technology and information, making it possible for people to automate complex tasks and gain valuable insights from vast amounts of data. However, the current state of AI processing — which relies on large language models often running on servers, rather than mobile hardware — requires that users’ requests are visible to the provider. Although that works for many use cases, it presents challenges in enabling people to use AI to process private messages while preserving the level of privacy afforded by end-to-end encryption.\nWe set out to enable AI capabilities with the privacy that people have come to expect from WhatsApp, so that AI can deliver helpful capabilities, such as summarizing messages, without Meta or WhatsApp having access to them, and in the way that meets the following principles:\nOptionality: Using Meta AI through WhatsApp, including features that use Private Processing, must be optional. \nTransparency: We must provide transparency when our features use Private Processing.\nUser control: For people’s most sensitive chats that require extra assurance, they must be able to prevent messages from being used for AI features like mentioning Meta AI in chats, with the help of WhatApp’s Advanced Chat Privacy feature.\nIntroducing Private Processing\nWe’re excited to share an initial overview of Private Processing, a new technology we’ve built to support people’s needs and aspirations to leverage AI in a secure and privacy-preserving way. This confidential computing infrastructure, built on top of a Trusted Execution Environment (TEE), will make it possible for people to direct AI to process their requests — like summarizing unread WhatsApp threads or getting writing suggestions — in our secure and private cloud environment. In other words, Private Processing will allow users to leverage powerful AI features, while preserving WhatsApp’s core privacy promise, ensuring no one except you and the people you’re talking to can access or share your personal messages, not even Meta or WhatsApp. \nTo uphold this level of privacy and security, we designed Private Processing with the following foundational requirements:\nConfidential processing: Private Processing must be built in such a way that prevents any other system from accessing user’s data — including Meta, WhatsApp or any third party — while in processing or in transit to Private Processing.\nEnforceable guarantees: Attempts to modify that confidential processing guarantee must cause the system to fail closed or become publicly discoverable via verifiable transparency.\nVerifiable transparency: Users and security researchers must be able to audit the behavior of Private Processing to independently verify our privacy and security guarantees.\nHowever, we know that technology platforms like ours operate in a highly adversarial environment where threat actors continuously adapt, and software and hardware systems keep evolving, generating unknown risks. As part of our defense-in-depth approach and best practices for any security-critical system, we’re treating the following additional layers of requirements as core to Private Processing on WhatsApp:\nNon-targetability: An attacker should not be able to target a particular user for compromise without attempting to compromise the entire Private Processing system.\nStateless processing and forward security: Private Processing must not retain access to user messages once the session is complete to ensure that the attacker can not gain access to historical requests or responses.\nThreat modeling for Private Processing\nBecause we set out to meet these high-security requirements, our work to build Private Processing began with developing a threat model to help us identify potential attack vectors and vulnerabilities that could compromise the confidentiality, integrity, or availability of user data. We’ve worked with our peers in the security community to audit the architecture and our implementation to help us continue to harden them. \nBuilding in the open\nTo help inform our industry’s progress in building private AI processing, and to enable independent security research in this area, we will be publishing components of Private Processing, expanding the scope of our Bug Bounty program to include Private Processing, and releasing a detailed security engineering design paper, as we get closer to the launch of Private Processing in the coming weeks. \nWhile AI-enabled processing of personal messages for summarization and writing suggestions at users’ direction is the first use case where Meta applies Private Processing, we expect there will be others where the same or similar infrastructure might be beneficial in processing user requests. We will continue to share our learnings and progress transparently and responsibly.\nHow Private Processing works\nPrivate Processing creates a secure cloud environment where AI models can analyze and process data without exposing it to unauthorized parties. \nHere’s how it works:\nAuthentication: First, Private Processing obtains anonymous credentials to verify that the future requests are coming from authentic WhatsApp clients.\nThird-party routing and load balancing: In addition to these credentials, Private Processing fetches HPKE encryption public keys from a third-party CDN in order to support Oblivious HTTP (OHTTP).\nWire session establishment: Private Processing establishes an OHTTP connection from the user’s device to a Meta gateway via a third-party relay which hides requester IP from Meta and WhatsApp.\nApplication session establishment: Private Processing establishes a Remote Attestation + Transport Layer Security (RA-TLS) session between the user’s device and the TEE. The attestation verification step cross-checks the measurements against a third-party ledger to ensure that the client only connects to code which satisfies our verifiable transparency guarantee.\nRequest to Private Processing: After the above session is established, the device makes a request to Private Processing (e.g., message summarization request), that is encrypted end-to-end between the device and Private Processing with an ephemeral key that Meta and WhatsApp cannot access. In other words, no one except the user’s device or the selected TEEs can decrypt the request.\nPrivate Processing: Our AI models process data in a confidential virtual machine (CVM), a type of TEE, without storing any messages, in order to generate a response. CVMs may communicate with other CVMs using the same RA-TLS connection clients use to complete processing. \nResponse from Private Processing: The processed results are then returned to the user’s device, encrypted with a key that only the device and the pre-selected Private Processing server ever have access to. Private Processing does not retain access to messages after the session is completed.\nThe threat model\nIn designing any security-critical system, it is important to develop a threat model to guide how we build its defenses. Our threat model for Private Processing includes three key components:\nAssets: The sensitive data and systems that we need to protect.\nThreat actors: The individuals or groups that may attempt to compromise our assets.\nThreat scenarios: The ways in which our assets could be compromised, including the tactics, techniques, and procedures (TTPs) that threat actors might use.\nAssets\nIn the context of applying Private Processing to summarizing unread messages or providing writing suggestions at users’ direction, we will use Private Processing to protect messaging content, whether they have been received by the user, or still in draft form. We use the term “messages” to refer to these primary assets in the context of this blog.\nIn addition to messages, we also include additional, secondary assets which help support the goal of Private Processing and may interact with or directly process assets: the Trusted Computing Base (TCB) of the Confidential Virtual Machine (CVM), the underlying hardware, and the cryptographic keys used to protect data in transit.\nThreat actors\nWe have identified three threat actor types that could attack our system to attempt to recover assets.\nMalicious or compromised insiders with access to our infrastructure.\nA third party or supply chain vendor with access to components of the infrastructure.\nMalicious end users targeting other users on the platform.\nThreat scenarios\nWhen building Private Processing to be resilient against these threat actors, we consider relevant threat scenarios that may be pursued against our systems, including (but not limited to) the following:\nExternal actors directly exploit the exposed product attack surface or compromise the services running in Private Processing CVMs to extract messages.\nAnywhere the system processes untrusted data, there is potentially an attack surface for a threat actor to exploit. Examples of these kinds of attacks include exploitation of zero-day vulnerabilities or attacks unique to AI such as prompt injection. \nPrivate Processing is designed to reduce such an attack surface through limiting the exposed entry points to a small set of thoroughly reviewed components which are subject to regular assurance testing. The service binaries are hardened and run in a containerized environment to mitigate the risks of code execution and limit a compromised binary’s ability to exfiltrate data from within the CVM to an external party.\nInternal or external attackers extract messages exposed through the CVM.\nObservability and debuggability remains a challenge in highly secure environments as they can be at odds with the goal of confidential computing, potentially exposing side channels to identify data and in the worst case accidentally leaking messages themselves. However, deploying any service at scale requires some level of observability to identify failure modes, since they may negatively impact many users, even when the frequency is uncommon. We implement a log-filtering system to limit export to only allowed log lines, such as error logs.\nLike any complex system, Private Processing is built of components to form a complex supply chain of both hardware and software. Internally, our CVM build process occurs in restricted environments that maintain provenance and require multi-party review. Transparency of the CVM environment, which we’ll provide through publishing a third-party log of CVM binary digests and CVM binary images, will allow external researchers to analyze, replicate, and report instances where they believe logs could leak user data.\nInsiders with physical or remote access to Private Processing hosts interfere with the CVM at boot and runtime, potentially bypassing the protections in order to extract messages.\nTEE software exploitation is a growing area of security research, and vulnerability researchers have repeatedly demonstrated the ability to bypass TEE guarantees. Similarly, physical attacks on Private Processing hosts may be used to defeat TEE guarantees or present compromised hosts as legitimate to an end user.\nTo address these unknown risks, we built Private Processing on the principle of defense-in-depth by actively tracking novel vulnerabilities in this space, minimizing and sanitizing untrusted inputs to the TEE, minimizing attack surface through CVM hardening and enabling abuse detection through enhanced host monitoring.\nBecause we know that defending against physical access introduces significant complexity and attack surface even with industry-leading controls, we continuously pursue further attack surface hardening. In addition, we reduce these risks through measures like encrypted DRAM and standard physical security controls to protect our datacenters from bad actors.\nTo further address these unknown risks, we seek to eliminate the viability of targeted attacks via routing sessions through a third-party OHTTP relay to prevent an attacker’s ability to route a specific user to a specific machine.\nDesigning Private Processing\nHere is how we designed Private Processing to meet these foundational security and privacy requirements against the threat model we developed. \n(Further technical documentation and security research engagements updates are coming soon).\nConfidential processing\nData shared to Private Processing is processed in an environment which does not make it available to any other system. This protection is further upheld by encrypting data end-to-end between the client and the Private Processing application, so that only Private Processing, and no one in between – including Meta, WhatsApp, or any third-party relay – can access the data.\nTo prevent possible user data leakage, only limited service reliability logs are permitted to leave the boundaries of CVM.\nSystem software\nTo prevent privileged runtime access to Private Processing, we prohibit remote shell access, including from the host machine, and implement security measures including code isolation. Code isolation ensures that only designated code in Private Processing has access to user data. Prohibited remote shell access ensures that neither the host nor a networked user can gain access to the CVM shell.\nWe defend against potential source control and supply chain attacks by implementing established industry best practices. This includes building software exclusively from checked-in source code and artifacts, where any change requires multiple engineers to modify the build artifacts or build pipeline.\nAs another layer of security, all code changes are auditable. This allows us to ensure that any potential issues are discovered — either through our continuous internal audits of code, or by external security researchers auditing our binaries.\nSystem hardware\nPrivate Processing utilizes CPU-based confidential virtualization technologies, along with Confidential Compute mode GPUs, which prevent certain classes of attacks from the host operating system, as well as certain physical attacks.\nEnforceable guarantees\nPrivate Processing utilizes CPU-based confidential virtualization technologies which allow attestation of software based in a hardware root of trust to guarantee the security of the system prior to each client-server connection. Before any data is transmitted, Private Processing checks these attestations, and confirms them against a third-party log of acceptable binaries.\nStateless and forward secure service\nWe operate Private Processing as a stateless service, which neither stores nor retains access to messages after the session has been completed.\nAdditionally, Private Processing does not store messages to disk or external storage, and thus does not maintain durable access to this data.\nAs part of our data minimization efforts, requests to Private Processing only include data that is useful for processing the prompt — for example, message summarization will only include the messages the user directed AI to summarize.\nNon-targetability\nPrivate Processing implements the OHTTP protocol to establish a secure session with Meta routing layers. This ensures that Meta and WhatsApp do not know which user is connecting to what CVM. In other words, Meta and WhatsApp do not know the user that initiated a request to Private Processing while the request is in route, so that a specific user cannot be routed to any specific hardware.\nPrivate Processing uses anonymous credentials to authenticate users over OHTTP. This way, Private Processing can authenticate users to the Private Processing system, but remains unable to identify them. Private Processing does not include any other identifiable information as part of the request during the establishment of a system session. We limit the impact of small-scale attacks by ensuring that they cannot be used to target the data of a specific user.\nVerifiable transparency\nTo provide users visibility into the processing of their data and aid in validation of any client-side behaviors, we will provide capabilities to obtain an in-app log of requests made to Private Processing, data shared with it, and details of how that secure session was set up. \nIn order to provide verifiability, we will make available the CVM image binary powering Private Processing. We will make these components available to researchers to allow independent, external verification of our implementation.\nIn addition, to enable deeper bug bounty research in this area, we will publish source code for certain components of the system, including our attestation verification code or load bearing code.\nWe will also be expanding the scope of our existing Bug Bounty program to cover Private Processing to enable further independent security research into Private Processing’s design and implementation. \nFinally, we will be publishing a detailed technical white paper on the security engineering design of Private Processing to provide further transparency into our security practices, and aid others in the industry in building similar systems.\nGet Involved\nWe’re deeply committed to providing our users with the best possible messaging experience while ensuring that only they and the people they’re talking to can access or share their personal messages. Private Processing is a critical component of this commitment, and we’re excited to make it available in the coming weeks.\nWe welcome feedback from our users, researchers, and the broader security community through our security research program:\nMore details: Meta Bug Bounty\nContact us\nThe post Building Private Processing for AI tools on WhatsApp appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way. We’re sharing an early look into Private Processing, an optional capability [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/\">Building Private Processing for AI tools on WhatsApp</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way. We’re sharing an early look into Private Processing, an optional capability [...]\nRead More...\nThe post Building Private Processing for AI tools on WhatsApp appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22434",
        "categories": [
          "Security & Privacy",
          "WhatsApp"
        ],
        "isoDate": "2025-04-29T17:15:00.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Oleg Zinovyev",
        "title": "What’s Next for CLion: The 2025.2 Roadmap",
        "link": "https://blog.jetbrains.com/clion/2025/05/2025-2-roadmap/",
        "pubDate": "Mon, 05 May 2025 08:02:55 +0000",
        "content:encodedSnippet": "We’ve begun work on our next major release, 2025.2, which we plan to introduce in July. After reviewing your feedback and our strategic goals, we’ve prioritized the following areas for development:\n🚀 CLion Nova language engine improvements and bug fixes\n🎛️ New features for embedded development\n🤖 Support for Junie, JetBrains’ smart coding agent\nRead on to learn more about our planned updates.\nOur team is committed to creating an IDE that makes development smooth and productive. However, the following is only a preliminary roadmap. We can’t guarantee that all the issues and features listed below will be addressed and implemented in CLion 2025.2. Unexpected circumstances could require us to modify our plans or implementation timelines for some items.\nCLion Nova\nThe CLion Nova language engine will receive a number of new features and enhancements that will bring it closer to becoming the default IDE engine for all users. Here are the major planned updates:\nNew smart keys: We will continue adding the smart keys available in CLion Classic that are missing in CLion Nova. In addition to the ones we already included in 2025.1, we plan to add several more, such as Jump outside closing bracket/quote and Reformat block on typing ‘}’ (CPP-42032).\nFaster typing assistance for remote development: We’re still working on improving the typing assistant’s responsiveness for remote development and plan to have a working solution in time for the 2025.2 release. As a result, actions such as smart indentation when you press Enter or automatic insertion of pair parentheses, brackets, and quotes will be as fast as in local mode.\nFixes for issues involving missed compilation errors: CLion Nova may overlook some possible compilation errors when analyzing your source code and may not show the corresponding warnings in the editor. As a result, these errors only appear in the terminal after the build is complete. After fixing this issue, CLion Nova will catch all the errors before you click Build, Run, or Debug.\nFixes for reformatting issues: We plan to address a problem that results in CLion Nova’s formatter not always working as expected. One example of this is when, after pressing Enter, the indentation on the next line doesn’t follow the settings in your code style scheme.\nEmbedded development\nFor embedded development, we’ll focus on providing our real-time variable view (Live Watches), extending the debug server functionality, and improving CLion’s FreeRTOS integration.\nLive Watches: Many embedded developers need to monitor variable values and memory changes in real time without stopping a program, for example, when working with Bluetooth devices that require a persistent connection. Live Watches will make this possible. We’ve been working on this feature for some time (​​CPP-22056), and we apologize to those who expected it to be implemented in the current release. This feature will be one of our main priorities for 2025.2.\nESP32 debug server: Although we planned to add a configuration option for the ESP32 debug server in 2025.1, we had to switch to one designed specifically for STM32 chips instead. So, a new template for ESP32 MCUs will complement the already available Generic, SEGGER J-Link, and STM32 templates. Read our documentation to learn more about debug servers and when they’re helpful.\nImproving CLion’s FreeRTOS integration: We plan to make the support of FreeRTOS (an open-source real-time operating system) more flexible. This includes displaying FreeRTOS tasks in the way the feature is implemented for threads and adding the ability to view FreeRTOS objects in the debugger, support for new architectures, such as Arm Cortex-M33, and more (see the list of related issues).\nSupport for Junie\nJetBrains recently introduced Junie, an AI coding agent that can serve as a full-fledged pair programmer. It speeds up your development process by answering questions, performing complex tasks, and following guidelines (learn more).\nJunie is already available as a plugin for several JetBrains IDEs, but not yet for CLion. Adding Junie support for CLion comes with its own challenges. We’re excited about the prospect and are working to make this available in 2025.2. While we can’t fully confirm this timeline just yet, we want you to know that this is an active area of focus for us.\nUI improvements for the Project tool window\nThe Project tool window allows you to navigate through your project’s directories and files, including external sources such as SD cards, when working on Zephyr or ESP-IDF projects. Currently, it’s not always easy to distinguish between internal and external sources when looking at their path prefixes displayed in the tool window. For 2025.2, we’re making several improvements to the Project tool window UI to help you distinguish external sources more clearly (CPP-33951).\nConclusion\nThere’s more exciting news about CLion just around the corner – stay tuned!\nIn the meantime, we encourage you to check out our latest release, 2025.1, which includes many great features for CLion Nova, debugging, embedded development, and project formats.\nDOWNLOAD CLION 2025.1",
        "dc:creator": "Oleg Zinovyev",
        "content": "We’ve begun work on our next major release, 2025.2, which we plan to introduce in July. After reviewing your feedback and our strategic goals, we’ve prioritized the following areas for development: 🚀 CLion Nova language engine improvements and bug fixes 🎛️ New features for embedded development 🤖 Support for Junie, JetBrains’ smart coding agent Read [&#8230;]",
        "contentSnippet": "We’ve begun work on our next major release, 2025.2, which we plan to introduce in July. After reviewing your feedback and our strategic goals, we’ve prioritized the following areas for development: 🚀 CLion Nova language engine improvements and bug fixes 🎛️ New features for embedded development 🤖 Support for Junie, JetBrains’ smart coding agent Read […]",
        "guid": "https://blog.jetbrains.com/?post_type=clion&p=564742",
        "categories": [
          "news",
          "roadmap",
          "clionnova",
          "embedded",
          "esp32",
          "freertos",
          "junie"
        ],
        "isoDate": "2025-05-05T08:02:55.000Z"
      },
      {
        "creator": "Anna Rovinskaia",
        "title": "New Livestream: Unleash the Power of Git with IntelliJ IDEA Version Control Tools",
        "link": "https://blog.jetbrains.com/idea/2025/05/new-livestream-new-livestream-unleash-the-power-of-git-with-intellij-idea-cersion-control-tools/",
        "pubDate": "Mon, 05 May 2025 08:01:15 +0000",
        "content:encodedSnippet": "Join us for a new IntelliJ IDEA Livestream episode with Justin Clareburt and discover all of the powerful version control tools available in IntelliJ IDEA. \nDate: May 15, 2025\nTime: 3:00–4:00 pm UTC\nREGISTER FOR THE LIVESTREAM\n\n\n\n\nSession abstract\nDiscover all of the powerful UI tooling in IntelliJ IDEA that you never knew was there. It’s simple to use and incredibly powerful. More than just checkout, commit, push, and pull, you can easily rebase and merge branches, cherry-pick commits, view deep history, perform a hard or soft reset, and manage merge conflicts with ease. You’ll never want to touch the Git command line again once you see how powerful and user-friendly IntelliJ IDEA’s built-in Git tooling is.\nAsking questions\nJustin will try to answer all of your questions during the session. If we run out of time, we’ll publish answers to any remaining questions in a follow-up blog post.\nYour speaker and host\nSpeaker\nJustin Clareburt \nJustin Clareburt has been an IntelliJ IDEA power user and evangelist for over 20 years, with a reputation as the world’s leading expert in keyboard shortcuts. While working for Google, he built features for Android Studio (IntelliJ-based), and as a Program Manager for Microsoft Visual Studio, he built the IntelliJ platform keyboard mapping scheme and still maintains the tooling for the ReSharper, IntelliJ IDEA, Emacs, and Sublime keyboard profiles. Justin is primarily focused on helping build and promote developer tooling to improve the lives of developers as they strive for quality and efficiency.\nHost\nMala Gupta\n\nA Java Champion and JUG leader, Mala has authored multiple books with Manning, Packt, and O’Reilly Publications. She has more than two decades of experience in the software industry and is a regular speaker at industry conferences around the world. She is a vocal supporter of Java certification as a path to career advancement.\n\nHappy developing!",
        "dc:creator": "Anna Rovinskaia",
        "content": "Join us for a new IntelliJ IDEA Livestream episode with Justin Clareburt and discover all of the powerful version control tools available in IntelliJ IDEA. Date: May 15, 2025 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract Discover all of the powerful UI tooling in IntelliJ IDEA that you never knew was there. [&#8230;]",
        "contentSnippet": "Join us for a new IntelliJ IDEA Livestream episode with Justin Clareburt and discover all of the powerful version control tools available in IntelliJ IDEA. Date: May 15, 2025 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract Discover all of the powerful UI tooling in IntelliJ IDEA that you never knew was there. […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=562364",
        "categories": [
          "livestreams",
          "intellij-idea",
          "intellijidealivestream",
          "livestream",
          "webinars"
        ],
        "isoDate": "2025-05-05T08:01:15.000Z"
      },
      {
        "creator": "Maria Sharobaeva",
        "title": "JetBrains Academy – April Digest",
        "link": "https://blog.jetbrains.com/education/2025/05/02/jetbrains-academy-april/",
        "pubDate": "Fri, 02 May 2025 16:29:25 +0000",
        "content:encodedSnippet": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.\nAI updates\nLearning to code in the AI era – still worth it?\nWondering if learning to code is still worthwhile in the age of AI? In this blog post, Clara tackles three key questions to help you decide.\nRead now\n                                                    \nFree AI course\nIf you can’t beat it, lead it. Take our AI-Assisted Programming course to learn how to collaborate with AI, improve AI-generated code, and build apps from scratch using AI-powered tools. Write better code, faster.\nStart learning\n                                                    \nAI features for in-IDE learning\nLearning in an IDE with the JetBrains Academy plugin just got smoother. With machine translation in 10 languages and the new Theory Lookup feature for quick explanations of key terms, understanding tasks is now easier than ever.\nLearn more\n                                                    \nTech events \nIntelliJ IDEA Conf – free virtual event\nJoin us online on June 3–4 to explore sessions on Java, Kotlin, AI, Spring Boot, Gradle, and more. Get ready to learn from the best!\nSign up now\n                                                    \nPython courses\nHands-on Python course\n Designed for beginners with no prior experience, this course will show you how to build a solid Python foundation and create your first portfolio-ready app – all within 15 hours.\nStart learning\n                                                    \nAMazing course for you\nStrengthen your algorithmic thinking by generating a 2D maze using depth-first search (DFS). This course is best suited for learners with basic Python knowledge.\nTry now",
        "dc:creator": "Maria Sharobaeva",
        "content": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.",
        "contentSnippet": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=564610",
        "categories": [
          "digest",
          "jetbrains-academy",
          "newsletter"
        ],
        "isoDate": "2025-05-02T16:29:25.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "Qodana 2025.1 Release",
        "link": "https://blog.jetbrains.com/qodana/2025/05/qodana-2025-1-release/",
        "pubDate": "Fri, 02 May 2025 12:47:29 +0000",
        "content:encodedSnippet": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release!\nTry Qodana\nOWASP Top 10: covering even more categories\nAt Qodana, we take security very seriously, and recently discussed inspections that commonly make it to the OWASP Top 10. \nWe also know that configuring taint rules for the security analyzers can be a difficult and time-consuming task, often requiring manual effort to detect rules and correctly configure it.\nTo simplify this process, we provide predefined taint configuration, built on various benchmarks and external providers, automatically covering common sources and sinks. \nQodana now includes predefined taint rules for the most common categories of OWASP Top 10:2021 vulnerabilities: (A01, A03, A07, A08, A10). This significantly improves issue detection out of the box, minimizing user effort while ensuring broad security coverage.\nTo address issues with the problem’s trace reconstruction, we had to rethink the way issue propagation being shown to the user. Now we’re capable of showing even more complex cases including tricky aliasing.\n\n\n\n\nFeedback received and addressed: for those who need deeper customization, taint rules can be configured using KTS files, allowing users to define both library and user codes as sources or sinks. This flexibility ensures that security analysis adapts to project-specific needs without unnecessary complexity.\n\n\n\n\nTL;DR\nAutomatic detection for common security flaws.\n700+ new configuration entries covering common frameworks and libraries.\nThe ability to add configuration on your own: customize via KTS files to define sources and sinks.\nEnhanced Azure & GitLab CI/CD Integrations\nTo improve adoption beyond GitHub, we’ve made major enhancements to Azure and GitLab integrations. These changes streamline workflows and enable better visibility into analysis results.\nAzure improvements\nIn Azure, it’s now possible to reduce the time spent on PR analysis by only analyzing files that were changed using pr-mode. Also, instead of getting results in the build log, the Qodana extension provides you with a summary in the Extensions tab. \nThis release also integrates the powerful Qodana Quick Fix feature into your analysis. This allows you to fix some problems in your code and apply them to the branch you’ve analyzed or create a pull request with suggested fixes. To use this feature you will need to update the Qodana pipeline configuration.\nTL;DR\nGet faster PR analysis by checking only modified files.\nResults now appear in the Extensions tab instead of cluttering the build log.\nAuto-apply fixes to the analyzed branch or create a PR with suggested changes.\n\n\n\n\n\n\n\n\n\n\n\n\nGitLab enhancements\nNow you can use the new Qodana component to perform analysis in your repository. This means that instead of using the linter container directly, you can configure Qodana with a predefined set of needed arguments (there is no need to understand all the steps to launch Qodana; the component does it for you). \nThe new component supports mr-mode (the same as pr-mode in Azure) for fast analysis in merge requests, which analyses only the changed files, summary comments in merge requests and quick fixes. To use it you’ll need to include the Qodana component in your pipeline configuration file. \nTL;DR\nUse the new Qodana component for simplified configuration.\nIt supports merge request (MR) mode to analyze only changed files.\nit provides summary comments and quick fixes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPro C++ Linter [EAP]\nBased on demand, especially from our .NET, and Rider communities, we’re introducing Qodana for C/C++. This advanced linter goes beyond Clang-Tidy to detect critical issues like memory leaks, null dereferences, and uninitialized memory usage to name a few.\nThe old community-licensed linter that was previously known under this name is now called “Qodana Community for C/C++”.\nWhy upgrade?\nThe new C++ paid linter for professional teams: \nIncludes MISRA, and Data Flow Analysis for error tracking during value propagation.\nIs a more powerful option than Clang-Tidy for bug detection.\nHas easy integration with Qodana CLI and Docker.\nExample of a DFA analysis inspection catching a memory leak.\n\n\n\nWould you have caught this in a normal code review?\n\n\n\n\n\n\n\n\nWhat are DFA inspections?\nDFA (or data flow) inspections are based on a more thorough code analysis, such as tracking possible variable states through possible execution paths. Such introspection allows DFA to catch some of the more sneaky errors in your code. For example, these inspections are capable of finding nullptr dereferences, memory leaks, out of bounds memory accesses, and more.\nYou can try this new linter using Qodana CLI or by manually running the jetbrains/qodana-cpp docker image with a token from Qodana Cloud.\nSwitching to Kotlin K2 Mode\nWe’ve enabled K2 mode for qodana-jvm and qodana-jvm-community linters. This update aligns with JetBrains’ move towards K2 in IntelliJ IDEA 2025.1 and offers improved performance and stability, along with support for new Kotlin 2.1 features.\nPotential issues to be aware of:\nThird-party plugins might not support K2 yet.\nSome inspections are still being implemented (see details).\nNeed to switch back? \nThere are a number of way to do this depending on the way linter is configured. But you could simply set the property “idea.kotlin.plugin.use.k2” to “false” in your linter configuration.\nView Documentation\nWhat to do next\n\nIf you’re using the latest tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2025.1 release. If not, please change from 2024.4 to 2025.1 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension here.\nWith these new enhancements, you have greater potential to substantially improve your coding experience. For further information, including detailed setup instructions for each feature, please refer to our official documentation. \nWe’re continuously improving Qodana to provide better inspections, integrations, and security features. Stay tuned for more updates in upcoming releasesYou can also stay up to date with Qodana by joining our communities on Reddit, LinkedIn, and X.\nOther Qodana releases this month\nInsights Dashboard\nNative Mode\nVisual Studio Plugin\nSSO\nQodana On-Prem Lite",
        "dc:creator": "Kerry Beetge",
        "content": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories [&#8230;]",
        "contentSnippet": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=564423",
        "categories": [
          "releases",
          "azure-integrations",
          "eap",
          "github-integrations",
          "k2-mode",
          "qodana",
          "release"
        ],
        "isoDate": "2025-05-02T12:47:29.000Z"
      },
      {
        "creator": "Jan-Niklas Wortmann",
        "title": "Streamline Database Management With WebStorm’s Database Tool",
        "link": "https://blog.jetbrains.com/webstorm/2025/05/streamline-database-management-with-webstorm-s-database-tool/",
        "pubDate": "Thu, 01 May 2025 14:00:00 +0000",
        "content:encodedSnippet": "Here’s something that might surprise you: if you’re using WebStorm, you already have access to a professional-grade database IDE. That’s right, the full-featured DataGrip database toolset isn’t just a separate product or an additional paid plugin anymore; it’s bundled into WebStorm. Even if you’re comfortable with other IDEs and their database extensions, you might find some compelling features here that could enhance your database workflow.\nTL;DR\nThe powerful features of DataGrip, JetBrains’ database IDE, are included in WebStorm for free. Highlights include smart schema-aware code completion, query plan analyzer, an optimized data editor, automatic documentation writing, and an AI query assistant. Try this enterprise-grade database support in your JavaScript and TypeScript IDE to enjoy smoother and more streamlined database work.\nEssential database features you might have missed\n1. Smart code completion that understands your schema\nLook, we’ve all been there – typing out table names like it’s 1999. But here’s the thing: WebStorm’s database tools don’t just autocomplete; they understand your entire database schema.\nSELECT u.* FROM us--\nBefore you even finish typing, WebStorm knows you probably mean users and that you’ll want to join it with user_preferences based on your schema. It’s like having a really smart pair programmer who actually remembers the database schema.\n\n2. Query plans that explain issues with your database\nThe visual query plan analyzer is a powerful tool that helps you understand and optimize your database queries. Here’s how to use it:\nWrite your query in the database console:\nSELECT * FROM users \nJOIN orders ON users.id = orders.user_id \nWHERE orders.status = 'processing'\nRight-click on the query, then select Explain Plan.\nIn the Explain Plan window, you’ll see:\n\nA visual execution plan showing how the database processes your query.\nA cost associated with the operation. \n\n\n\n\nThe associated cost is a useful metric that helps you identify costly operations and enables you to further optimize them. \n3. Data editor that makes database updates surprisingly effortless\nWe’ve all been there. The product demo is in 15 minutes, and someone notices a typo in the production database – that important customer of yours should be named “Whole Foods”, not “Hole Foods”! You need to quickly update a status flag on several test accounts. Your options: Craft a precise UPDATE statement and triple-check it, or just… fix it directly.\nForget writing tedious UPDATE statements – the integrated data editor gives you spreadsheet-like powers over your precious data for those “just need to fix this one thing real quick” moments:\nDirect cell editing for the impatient pragmatists:\nDouble-click any cell to edit values directly.\nChanges get highlighted until you commit them.\nPress Tab to move through cells like a spreadsheet pro.\nHit Enter to save, Escape to cancel, and submit with ⌘Enter / Ctrl+Enter.\nBulk edits for when repetitive tasks threaten your zen:\nSelect multiple cells to edit similar values simultaneously.\nCopy-paste directly from Excel (yes, they thought of that).\nConstraint-aware edits for avoiding that 3:00 am production emergency call:\nForeign key constraints are actively enforced while editing.\nData type validation before you commit the change.\nColor-coding for modified, invalid, and conflicting values.\nWhat you’d write without the data editor:\nUPDATE users SET status = 'premium', trial_ends_at = NULL WHERE id IN (1043, 1044, 1045, 1046);\nUPDATE users SET email = 'sarah.jones@newdomain.com' WHERE id = 2967;\nWith the data editor, these become mouse clicks and keyboard shortcuts. And because WebStorm knows you occasionally try to save invalid data, it warns you before submitting changes that would violate constraints.\n4. Documentation that writes itself\nBecause, let’s face it, you weren’t going to write it anyway. The automated documentation generator creates comprehensive schema diagrams and details all document relationships and constraints.\nDiagrams are extremely useful to document the current status quo of a system and use as a baseline for discussing changes. By right-clicking on the database and selecting Diagrams | Show Diagram, you can get an accurate ER diagram of the existing system in place.\n\n\n\n\n5. AI query assistant (for when SQL syntax makes your brain hurt)\nLet’s be honest – not everyone dreams in SQL, and that’s okay. Instead of wrestling with JOIN and PARTITION BY clauses at 3:00 am, you can now just tell JetBrains AI Assistant what you want in plain English, like you’re ordering a coffee:\n“Show me active users who haven’t placed an order in the last 30 days”.\nMuch better than trying to remember if it’s LEFT JOIN or RIGHT JOIN for the fifth time in one day, right? The AI query assistant understands your database schema and translates your human thoughts into proper SQL – no more copy-paste roulette.\n\n\n\n\n\n\n\n\nAI Assistant just got better when working with databases in the 2025.1 release, and we highly recommend giving it another look!\nWhy should JavaScript developers care?\nIf we’re building modern web applications, let’s be honest with ourselves. We’re probably dealing with databases whether we like it or not. Sure, your ORM handles most cases, but when it doesn’t, you need real database tools. And switching between your IDE and a separate database editor is about as efficient as using Internet Explorer 6 for development.\nThe bottom line\nWebStorm isn’t just an IDE for handling JavaScript and TypeScript – it’s a complete development environment that includes one of the best database tools in the industry. Having your database tools integrated directly into your development workflow means less context switching, better productivity, and a more streamlined development experience.",
        "dc:creator": "Jan-Niklas Wortmann",
        "content": "Here&#8217;s something that might surprise you: if you&#8217;re using WebStorm, you already have access to a professional-grade database IDE. That&#8217;s right, the full-featured DataGrip database toolset isn&#8217;t just a separate product or an additional paid plugin anymore; it&#8217;s bundled into WebStorm. Even if you&#8217;re comfortable with other IDEs and their database extensions, you might find [&#8230;]",
        "contentSnippet": "Here’s something that might surprise you: if you’re using WebStorm, you already have access to a professional-grade database IDE. That’s right, the full-featured DataGrip database toolset isn’t just a separate product or an additional paid plugin anymore; it’s bundled into WebStorm. Even if you’re comfortable with other IDEs and their database extensions, you might find […]",
        "guid": "https://blog.jetbrains.com/?post_type=webstorm&p=564288",
        "categories": [
          "tips-tricks",
          "database-support",
          "webstorm"
        ],
        "isoDate": "2025-05-01T14:00:00.000Z"
      },
      {
        "creator": "Anton Arhipov",
        "title": "Structuring Ktor Projects Using Domain-Driven Design (DDD) Concepts: A Step-by-Step Guide With a Minimalistic CRM",
        "link": "https://blog.jetbrains.com/kotlin/2025/04/domain-driven-design-guide/",
        "pubDate": "Wed, 30 Apr 2025 12:29:16 +0000",
        "content:encodedSnippet": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system.\nSample code for the article: https://github.com/antonarhipov/ktor-ddd-example \nKtor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), Ktor does not enforce a predefined project structure, which can be both an advantage and a challenge. Many developers, especially those new to Ktor, often wonder:\nHow should I structure my Ktor project for scalability, maintainability, and long-term growth?\nIn this guide, we’ll answer that question step by step by building a minimalistic CRM system. This CRM will start as a simple Ktor application and gradually evolve into a well-structured, scalable project following best practices inspired by domain-driven design (DDD) and feature-based modularization.\nHow we’ll approach this\nWe’ll start with a simple, unstructured Ktor project and progressively refine it to have a well-structured, scalable architecture. Each step will introduce new concepts and improvements:\nIntroduce domain models to define entities like Customer, Note, and Reminder.\nDefine repositories and services to separate the business logic from the routes.\nAdd a presentation layer with Ktor routes.\nDefining the domain model: Entities and value objects\nOur first step is to define the core domain model for our minimalistic CRM. In domain-driven design (DDD), we structure the domain layer around entities, value objects, and aggregates to model real-world concepts effectively.\nDefining entities\nSince we’re building a minimalistic CRM system, we need to define the fundamental building blocks:\nCustomer: Represents a client with whom you interact.\nContact: Represents a method to reach a customer. One customer can have multiple contacts.\nNote: Represents business information or interactions (can be tied to a customer or an order).\nReminder: Represents an alert associated with a contact (and optionally linked to a note) to help you remember promises or follow-ups.\n// domain/customer/Customer.kt\n\nimport java.time.LocalDateTime\nimport java.util.UUID\n\n// A simple Value Object for unique identifiers\n@JvmInline\nvalue class CustomerId(val value: Long)\n@JvmInline\nvalue class ContactId(val value: Long)\n@JvmInline\nvalue class NoteId(val value: Long)\n\n\ndata class Contact(\n   val id: ContactId? = null,\n   val name: String,\n   val email: Email, \n   val phone: String\n)\n\ndata class Note(\n   val id: NoteId? = null,\n   val content: String,\n   val createdAt: LocalDateTime = LocalDateTime.now()\n)\n\ndata class Customer(\n   val id: CustomerId? = null,\n   val name: String,\n   val contacts: List<Contact> = emptyList(),\n   val notes: List<Note> = emptyList()\n) {\n   fun withContact(contact: Contact): Customer {\n      return copy(contacts = contacts + contact)\n   }\n\n   fun withNote(note: Note): Customer {\n      return copy(notes = notes + note)\n   }\n}\nDefining value objects\nValue objects are immutable and are defined solely by their attributes. They help encapsulate concepts such as identifiers or more complex attributes (e.g., an Email object with validation). In our example, the unique identifiers (like CustomerId) are implemented as value objects, ensuring immutability and encapsulation of identity details.\nYou can further extend this idea by encapsulating additional business rules. For example:\n// Example: a more complex value object for \n// Email might include validation logic.\n@JvmInline\nvalue class Email(val address: String) {\n    init {\n        require(address.contains(\"@\")) { \"Invalid email address\" }\n    }\n}\nRelationships and aggregates\nIn domain-driven design (DDD), an aggregate is a cluster of domain objects that should be treated as a single unit when enforcing business rules. Each aggregate has a clearly defined boundary and a single aggregate root, which serves as the only entry point for modifying the aggregate’s state.\nIn our initial model:\nCustomer is the aggregate root, ensuring consistency and encapsulating its associated contacts and notes. All modifications to these related entities must go through the customer.\nReminder is a separate entity linked to a customer (and optionally a note), but it has its own lifecycle and behaviors, making it an independent aggregate.\nUsing aggregates helps enforce business rules and invariants. For example, defining customer as the aggregate root ensures that contacts are always managed in the context of their customer, preventing orphaned or inconsistent data.\nThis is what the project structure looks like so far with the two aggregations defined above:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         ├─ Application.kt  // Ktor application entry point\n         └─ domain/\n            ├─ customer/\n            │  └─ Customer.kt  // Customer, Contact, Note \n            └─ reminder/\n               └── Reminder.kt  // Reminder\nIn this first step of our guide, we defined the core domain elements for our minimalistic CRM:\nEntities: Customer, Contact, Note, and Reminder\nValue objects: CustomerId, ContactId, NoteId, and ReminderId (and potentially others like Email)\nThese definitions set the stage for further expansion, such as implementing business logic within domain services, setting up repositories for persistence, and eventually wiring up these components in our Ktor application.\nNext, we can look at how to encapsulate business behaviors, and later, how these domain elements interact with the application layer in a modularized Ktor structure.\nEncapsulating business behaviors: Repositories, services, and domain events.\nIn a DDD-inspired design, repositories, domain services, and domain events work together to implement your CRM’s use cases while maintaining clear separation of concerns.\nRepositories\nRepositories act as an abstraction layer between your domain model and the data persistence mechanism (like a database). They provide simple methods for retrieving, storing, and updating domain entities without exposing the underlying data access logic.\ninterface CustomerRepository {\n   fun findById(id: CustomerId): Customer?\n   fun save(customer: Customer)\n\n   // Additional methods like delete, update, list, etc.\n}\nThe repository encapsulates all the queries and transactions needed to work with the domain model. For instance, when adding a new contact, the repository can ensure that the updated customer aggregate is properly stored.\nOur demo project uses a mock in-memory implementation of the repository interface. The real implementation depends on the technology and infrastructure used by your organization. In Ktor projects, you often see the Exposed database library used to implement this functionality. However, Ktor does not enforce any constraints on repository implementations, so you can choose to use any other data access libraries.\nDomain services\nDomain services encapsulate business logic that doesn’t naturally belong to an entity or value object. They coordinate complex operations that might involve multiple domain objects or aggregates.\nclass CustomerService(\n   private val customerRepository: CustomerRepository,\n   private val eventPublisher: EventPublisher\n) {\n\n   fun createCustomer(name: String): Customer {\n       val customer = Customer(name = name)\n       customerRepository.save(customer)\n       return customer\n   }\n\n   fun getCustomer(id: Long): Customer? {\n       return customerRepository.findById(CustomerId(id))\n   }\n\n   fun addContact(customerId: CustomerId, contact: Contact): Customer? {\n       val customer = customerRepository.findById(customerId)\n           ?: return null\n\n       // Business logic to add a contact (could be a method on Customer entity)\n       val updatedCustomer = customer.withContact(contact)\n       customerRepository.save(updatedCustomer)\n\n       // Publish a domain event to signal that a new contact has been added\n       eventPublisher.publish(ContactAddedEvent(customerId, contact))\n\n       return updatedCustomer\n   }\n\n\n   fun addNote(customerId: CustomerId, note: Note): Customer? {\n       val customer = customerRepository.findById(customerId)\n           ?: return null\n\n       val updatedCustomer = customer.withNote(note)\n       customerRepository.save(updatedCustomer)\n\n       // Publish a domain event to signal about a new note\n       eventPublisher.publish(NoteAddedEvent(customerId, note))\n\n       return updatedCustomer\n   }\n}\nThe service:\nFetches the current state of the customer.\nApplies business rules (e.g., adding a contact or note).\nPersists the updated state via the repository.\nPublishes a domain event to notify other parts of the system of the change.\nDomain events\nDomain events are messages that indicate something significant has occurred within the domain. They help decouple the direct consequences of a business operation from the triggering action. Other components can listen to these events and perform additional tasks (e.g., sending notifications, updating search indexes) without cluttering the core business logic.\n// DomainEvents.kt\nsealed interface DomainEvent\n\ndata class ContactAddedEvent(\n   val customerId: CustomerId,\n   val contact: Contact\n): DomainEvent\n\ndata class NoteAddedEvent(\n   val customerId: CustomerId,\n   val note: Note\n): DomainEvent\nEvent publishing\nAn EventPublisher interface can be used to publish these events. In a real-world application, this can be integrated with an event bus or messaging system:\ninterface EventPublisher {\n   fun publish(event: DomainEvent)\n}\nBenefits:\nDecoupling: Other parts of your application can subscribe to these events without the service needing to know about them.\nExtensibility: As your application evolves, additional behavior can be attached to these events without modifying the core business logic.\nBringing it all together\nIn our minimalistic CRM, when a user action triggers a use case (e.g., adding a new contact or note), the flow might look like this:\nUser action:\nThe client makes an API call to add a contact to a customer.\nService coordination:\nThe CustomerService retrieves the customer using the CustomerRepository, applies the business logic to add the contact, and saves the updated customer.\nEvent publication:\nAfter saving, the service publishes a ContactAddedEvent through the EventPublisher. Other parts of the system (like notification modules or logging services) can listen to this event and react accordingly.\nThis approach ensures that your domain logic remains clean, well-organized, and focused on business rules while delegating infrastructure and cross-cutting concerns to dedicated components.\nNow the project structure looks as follows:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         └─ com/\n            └─ example/\n               ├─ Application.kt\n               ├─ domain/\n               │  ├─ customer/\n               │  │  ├─ Customer.kt\n               │  │  ├─ CustomerRepository.kt\n               │  │  └─ CustomerService.kt\n               │  └─ reminder /\n               │     ├─ Reminder.kt\n               │     ├─ ReminderRepository.kt\n               │     └─ ReminderService.kt\n               └─ events/ \n                  ├─ DomainEvents.kt\n                  └─ EventPublisher.kt\nBuilding the presentation layer with Ktor\nThe code samples above didn’t use any external libraries or Ktor APIs because these are just implementation details. The conceptual framework of domain-driven design allowed us to structure the code so that we can plug in the necessary dependencies to create the application.\nNow we can move on and wire the services into the web server, exposing the REST API as a presentation layer. For this purpose, we will add the corresponding route definitions into the domain subpackages.\n// domain/customer/CustomerRoutes.kt\nfun Application.customerRoutes() {\n   routing {\n       val repository = InMemoryCustomerRepository() \n       val eventPublisher = EventPublisherImpl()\n\n       //TODO: use the service in the routes below\n       val service = CustomerService(repository, eventPublisher)\n\n       route(\"/customers\") {\n           // Create customer\n           post {\n               val customer = call.receive<Customer>()\n               val createdCustomer = service.createCustomer(customer.name)\n               call.respond(HttpStatusCode.Created, createdCustomer)\n           }\n\n           // Get customer by ID\n           get(\"/{id}\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@get call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val customer = service.getCustomer(id)\n               if (customer != null) {\n                   call.respond(customer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Add contact to customer\n           post(\"/{id}/contacts\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@post call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val contact = call.receive<Contact>()\n               val updatedCustomer = service.addContact(CustomerId(id), contact)\n\n               if (updatedCustomer != null) {\n                   call.respond(updatedCustomer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Add note to customer\n           post(\"/{id}/notes\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@post call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val note = call.receive<Note>()\n               val updatedCustomer = service.addNote(CustomerId(id), note)\n\n               if (updatedCustomer != null) {\n                   call.respond(updatedCustomer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n       }\n   }\n}\n\n\n\n// domain/reminder/ReminderRoutes.kt\nfun Application.reminderRoutes() {\n   routing {\n       val repository = InMemoryReminderRepository()\n       val service = ReminderService(repository)\n\n       route(\"/reminders\") {\n           // Create a reminder\n           post {\n               val reminder = call.receive<Reminder>()\n               val createdReminder = service.createReminder(\n                   customerId = reminder.customerId,\n                   noteId = reminder.noteId?.value,\n                   remindAt = reminder.remindAt,\n                   message = reminder.message\n               )\n               call.respond(HttpStatusCode.Created, createdReminder)\n           }\n\n           // Get reminder by ID\n           get(\"/{id}\") {\n               val id = call.parameters[\"id\"] ?: return@get call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val reminder = service.getReminder(id)\n               if (reminder != null) {\n                   call.respond(reminder)\n               } else {\n                   call.respondText(\"Reminder not found\", \nstatus = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Get reminders for a customer\n           get(\"/customer/{customerId}\") {\n               val customerId = call.parameters[\"customerId\"] \n?: return@get call.respondText(\n                 \t  \"Missing or malformed customerId\",\n               \t    status = HttpStatusCode.BadRequest\n             \t\t  )\n\n               val reminders = service.getRemindersForCustomer(CustomerId(customerId))\n               call.respond(reminders)\n           }\n       }\n   }\n}\nYou might have noticed that the repository and event publisher implementations are created manually. However, as the project grows, it might be more convenient to implement this using the dependency injection (DI) pattern instead.\nThe subroutes for the corresponding domain objects and aggregates are defined as extension functions in their respective files. This is a common pattern when working with Ktor projects. These functions are called from within the Application.kt module function on the application startup:\n// Application.kt\nfun main() {\n   embeddedServer(Netty, port = 8080, module = Application::module)\n       .start(wait = true)\n}\n\nfun Application.module() {\n   install(ContentNegotiation) {\n       json()\n   }\n\n   routing {\n       // Register routes from the domain subpackages\n       customerRoutes() \n       reminderRoutes()\n   }\n}\nWith the routing files, our project structure looks as follows:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         └─ com/\n            └─ example/\n               ├─ Application.kt\n               ├─ domain/\n               │  ├─ customer/\n               │  │  ├─ Customer.kt\n               │  │  ├─ CustomerRepository.kt\n               │  │  ├─ CustomerRoutes.kt\n               │  │  └─ CustomerService.kt\n               │  └─ reminder /\n               │     ├─ Reminder.kt\n               │     ├─ ReminderRepository.kt\n               │     ├─ ReminderRoutes.kt\n               │     └─ ReminderService.kt\n               └─ events/ \n                  ├─ DomainEvents.kt\n                  └─ EventPublisher.kt \nAt this point, we have integrated the business logic into the Ktor application, and the next step ise adding the infrastructural aspects, such as database configuration, authentication, etc. \nSummary\nThis article introduced key domain-driven design (DDD) concepts – like entities, value objects, repositories, and domain services – and demonstrated how to apply them in a Ktor project. We built a simple CRM system, organizing the code into well-defined domain subpackages (customers, reminders) with dedicated value classes and modular routes. This approach creates a clear, scalable, and maintainable codebase for your Ktor applications.\nThe source code for the sample presented in this article is available at: https://github.com/antonarhipov/ktor-ddd-example",
        "dc:creator": "Anton Arhipov",
        "content": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system. Sample code for the article: https://github.com/antonarhipov/ktor-ddd-example&#160; Ktor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), [&#8230;]",
        "contentSnippet": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system. Sample code for the article: https://github.com/antonarhipov/ktor-ddd-example  Ktor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=563791",
        "categories": [
          "kotlin",
          "guide"
        ],
        "isoDate": "2025-04-30T12:29:16.000Z"
      },
      {
        "creator": "Anton Semenkin",
        "title": "Mellum Goes Open Source: A Purpose-Built LLM for Developers, Now on Hugging Face",
        "link": "https://blog.jetbrains.com/ai/2025/04/mellum-goes-open-source-a-purpose-built-llm-for-developers-now-on-hugging-face/",
        "pubDate": "Wed, 30 Apr 2025 11:10:27 +0000",
        "content:encodedSnippet": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth.\nBut code completion is just the start.\nMellum will grow into a family of focal models, each specialized for different coding tasks – from code completion to diff prediction and beyond.\nNow, the base model is open-sourced and available on Hugging Face. Whether you’re building tools, running research experiments, or just curious, you’ll have full access to a fast, multilingual model*.\n*Mellum supports code completion for Java, Kotlin, Python, Go, PHP, C, C++, C#, JavaScript, TypeScript, CSS, HTML, Rust, Ruby. \n🤔 Why open-source Mellum?\nThis question was the subject of a big internal discussion.\nMellum is not just a fine-tuned version of an open-source model. It’s a model we trained from scratch to power cloud-based code completion in JetBrains IDEs, and it was released to the public last year. It’s also the first in a planned family of code-specialized models.\nSo why open-source it?\nBecause we believe in transparency, collaboration, and the power of shared progress. From Linux and Git to Node.js and Docker, open source has driven some of the biggest leaps in technology. With open-source LLMs now outperforming some industry leaders, it’s reasonable to assume that AI’s general evolution might follow a similar trajectory.\nMellum isn’t a plug-and-play solution. By releasing it on Hugging Face, we are offering researchers, educators, and advanced teams the opportunity to explore how a purpose-built model works under the hood. \nWhat is a focal model?\nIn machine learning, specialization isn’t new – it’s a core approach that has guided model design for decades, with models built to solve specific tasks efficiently and effectively. Somewhere along the way, the AI conversation shifted towards general-purpose models that aim to do everything, often at a massive computational and environmental cost. \nFocal models return to that original principle: build models to excel in one area.\nThink of it like T-shaped skills – a concept where a person has a broad understanding across many topics (the horizontal top bar or their breadth of knowledge), but deep expertise in one specific area (the vertical stem or depth). Focal models follow this same idea: they aren’t built to handle everything. Instead, they specialize and excel at a single task where depth truly delivers value. \nMellum is a clear example. It’s a small, efficient model designed specifically for code-related tasks, starting with code completion.\nWhy did we take this approach? Because not every problem demands a generalist solution, and not every team has the resources or need to run large, catch-all models.\nFocal models like Mellum offer clear advantages:\nPurpose-built precision for domain-specific tasks\nCost efficiency when it comes to running and deploying them\nLower computation and carbon footprints\nGreater accessibility for researchers, educators, and smaller teams\nThis isn’t a step backward – it’s applying proven principles of specialization to modern AI problems. We see that as a smarter way forward.\nHow does Mellum perform?\nMellum is a multilingual, 4B parameter model optimized specifically for code completion. We benchmarked it on several datasets across multiple languages, and also ran extensive human evaluations in JetBrains IDEs. In this post, we’ll provide some evaluation data for Mellum compared to some bigger models. Full details, results, and comparisons are available on the model card.\n\nHumanEval InfillingRepoBench 1.1 (2K context, py)SAFIM (avg)\nsingle-linemulti-line\nMellum-4B-base66.238.528.238.1\nInCoder-6B69.038.6—33.8\nCodeLlama-7B-base83.050.834.145.0\nCodeLlama-13B-base85.656.136.252.8\nDeepSeek-Coder-6.7B80.7——63.4\n\n\n\n\n\nWho Mellum is (and isn’t) for\nLet’s be real – the average developer probably won’t fine-tune or deploy Mellum. That’s okay.\nInstead, the current version of Mellum on Hugging Face is meant for:\nAI/ML researchers: Especially those exploring AI’s role in software development, benchmarking, or model interpretability.\nAI/ML engineers and educators: As a foundation for learning how to build, fine-tune, and adapt domain-specific language models, or to support educational programs focused on LLM architecture and specialization.\nTry Mellum today\nMellum is now live on Hugging Face. This is just the beginning. We’re not chasing generality – we’re building focus. If Mellum sparks even one meaningful experiment, contribution, or collaboration, we would consider it a win.\nWe’d love for you to join us by trying Mellum for yourself.\nExplore Mellum on Hugging Face",
        "dc:creator": "Anton Semenkin",
        "content": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth. But code completion is just the start. Mellum will grow into a family of focal models, each specialized for different coding tasks [&#8230;]",
        "contentSnippet": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth. But code completion is just the start. Mellum will grow into a family of focal models, each specialized for different coding tasks […]",
        "guid": "https://blog.jetbrains.com/?post_type=ai&p=563872",
        "categories": [
          "jetbrains-ai",
          "ai",
          "mellum"
        ],
        "isoDate": "2025-04-30T11:10:27.000Z"
      },
      {
        "creator": "Aleksandra Aganezova",
        "title": "Jens Oliver Meiert: How WebStorm and AI Assistant Fit Right Into My Workflow",
        "link": "https://blog.jetbrains.com/webstorm/2025/04/jens-oliver-meiert-how-webstorm-and-ai-assistant-fit-right-into-my-workflow/",
        "pubDate": "Tue, 29 Apr 2025 17:04:46 +0000",
        "content:encodedSnippet": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens shares what keeps him coming back to JetBrains IDEs, his experience with WebStorm, and how AI is reshaping modern development.\nHi Jens, we’re excited to chat with you! To kick things off, let’s go back to where it all started. You’ve been using JetBrains products for over 20 years. How did your journey with them begin?\nI started using JetBrains products in 2001 when I worked for a Java-focused company. IntelliJ IDEA was a cutting-edge editor, offering features that felt ahead of their time. While my focus has always been on frontend development, I found IntelliJ IDEA to be a great fit for my work even back then. Over the years, I’ve tried other editors — Sublime Text, Eclipse, and also VS Code at certain points — but I always came back to JetBrains IDEs because they consistently offer a well-thought-out developer experience.\nA few years ago, I switched to WebStorm, and it has been my go-to editor ever since. The design, coding assistance, and integrations make it a natural choice for my projects. It just works the way I expect an IDE to work, supporting my projects seamlessly and staying out of my way when I need to focus.\nWhat makes WebStorm stand out from other editors?\nWebStorm has a level of polish and reliability that’s hard to find elsewhere. It’s not just about features — it’s about how those features work together to make development smoother. The experience feels well-structured, and even when I return after trying other tools, I don’t feel like I’m missing anything.\nOne of the things I appreciate most is how JetBrains editors stay true to their philosophy of supporting developers without interfering. Features like autosave, intelligent refactoring, and a consistent UI make coding more efficient. It’s clear that JetBrains puts thought into every aspect of the developer experience, and that’s why I continue using their tools after all these years.\nYou’ve recently started using AI Assistant in WebStorm. How has it impacted your workflow?\nAI Assistant has been a very useful addition. While I wouldn’t say I’m using 100% of its capabilities yet, the features I do use have already had a noticeable impact on my daily work. One of the areas where it helps me the most is with commit messages — with more than 10,000 commits a year, generating clear, meaningful messages saves me a lot of time. It also integrates well with GitHub Copilot and other AI coding tools I use, allowing me to experiment with different AI-assisted workflows.\nAdditionally, AI Assistant provides great support for debugging and code explanations. When I come across a piece of code that isn’t working as expected, instead of searching through documentation, I can ask AI Assistant for insights. It often provides a quick, helpful answer, making my debugging process significantly faster.\nHow does AI Assistant compare to other AI coding tools?\nOne of the key advantages of AI Assistant is how seamlessly it integrates into WebStorm. Unlike external AI tools that feel like an add-on, AI Assistant is built directly into the IDE, making it a natural extension of my workflow. I don’t have to switch between different applications or browser tabs — it’s always there when I need it.\nAnother aspect I appreciate is its contextual understanding. AI Assistant provides recommendations that align with the JetBrains way of working, which means its suggestions are often more relevant than those from generic AI-powered tools. It’s designed to enhance my existing workflow rather than disrupt it, which makes a big difference in usability.\nHave you encountered any challenges using AI Assistant?\nThere was a period when it was necessary to re-authenticate every day to use AI Assistant, which was a little frustrating. However, JetBrains quickly addressed the issue, and it has been working smoothly since then.\nAside from that, my main challenge is making sure I’m getting the most out of AI Assistant. It’s a powerful tool, and I know I’ve only scratched the surface. There’s probably a lot more I could be doing with it to improve my efficiency.\nAs someone who has been in the industry for more than 20 years, what are your thoughts on AI’s role in the future of development?\nAI is undeniably reshaping software development. I believe it would be foolish not to embrace it in some capacity. However, I don’t think AI will replace developers — it will augment our capabilities. AI excels at automating repetitive tasks, generating boilerplate code, and assisting with debugging, but it still requires human oversight, especially when it comes to architectural decisions, code maintainability, and creative problem-solving.\nOne area where AI is already making a big impact is code reviews. It can help spot patterns, enforce best practices, and speed up the review process, though I don’t see it fully replacing human reviewers anytime soon. The key is learning how to leverage AI effectively rather than relying on it blindly.\nWhat advice would you give to developers considering AI-powered tools like AI Assistant?\nTry it out, but don’t just accept AI-generated code without thinking critically. Use it as a way to enhance your workflow. Also, experiment with different features — even if you don’t use AI Assistant for everything, you may find certain capabilities that save you a significant amount of time.\nFinally, stay open to how AI evolves. We’re in the early stages of AI integration in development tools, and the landscape is changing rapidly. Developers who take the time to understand and adapt to these tools will have a significant advantage in the long run.\nNo interview is complete without this question: what’s your favorite shortcut?\nWithout a doubt, double Shift (Search Everywhere). It’s such a simple yet powerful feature that lets me quickly find files, actions, and settings. It’s one of those things that just feels right, and I use it constantly.\nFinal thoughts?\nI’m excited to see where AI-powered development goes next. WebStorm and AI Assistant — as well as Junie, which I just got to evaluate — are already making a big difference in my workflow, and I expect that over time, these tools will only become more powerful and intuitive. But more broadly, I keep coming back to JetBrains because of the reliability and care they put into their products. With WebStorm, I know I’m working with a tool that supports me rather than gets in my way.\nWe’d like to thank Jens for taking part in this interview!\nIf you haven’t tried AI Assistant yet, you can now explore it with the new free tier. Give it a spin and see how it works for you.\nThe WebStorm team",
        "dc:creator": "Aleksandra Aganezova",
        "content": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens [&#8230;]",
        "contentSnippet": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens […]",
        "guid": "https://blog.jetbrains.com/?post_type=webstorm&p=563763",
        "categories": [
          "interviews",
          "ai",
          "ai-in-ides"
        ],
        "isoDate": "2025-04-29T17:04:46.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "The First Set of Bug Fixes for ReSharper and Rider 2025.1 Is Here!",
        "link": "https://blog.jetbrains.com/dotnet/2025/04/29/2025-1-1-hot-fix/",
        "pubDate": "Tue, 29 Apr 2025 06:53:33 +0000",
        "content:encodedSnippet": "Hello everyone,\nThe ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts:\nReSharper 2025.1: Comprehensive improvements to C# language support, including initial support for C# 14 preview features, performance enhancements, and more.\nRider 2025.1: A major upgrade to AI Assistant, remote development on Windows host machines, numerous enhancements to .NET and C++ debugging, and a whole host of other improvements. \n\n\n\n\nAnd now, let’s go over the most important fixes in 2025.1.1.\nReSharper 2025.1.1 \nThe first bug-fix update fixes the issue in dotTrace. Copying a tab in dotTrace Viewer now correctly clones the tab along with its selected filters. [DTRC-31677]\nDownload ReSharper 2025.1.1\n                                                    \nRider 2025.1.1\nThis update includes the following fixes:\nCorrect syntax highlighting for Unity identifiers and classes has been fixed. [RIDER-124907] \nRider no longer freezes when editing Razor .cshtml files in .NET 8 MVC applications. [RIDER-124864]\n\n\n\n    \nDownload Rider 2025.1.1\n                                                    \nYou can download the latest builds from our website (Rider, ReSharper) or via the Toolbox App. You can also update Rider as a snap.",
        "dc:creator": "Sasha Ivanova",
        "content": "Hello everyone, The ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts: And now, let’s go over the most important fixes in 2025.1.1. ReSharper 2025.1.1&#160; The first bug-fix update fixes the issue [&#8230;]",
        "contentSnippet": "Hello everyone, The ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts: And now, let’s go over the most important fixes in 2025.1.1. ReSharper 2025.1.1  The first bug-fix update fixes the issue […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=563498",
        "categories": [
          "net-tools",
          "bugfix",
          "news",
          "releases",
          "resharper",
          "rider"
        ],
        "isoDate": "2025-04-29T06:53:33.000Z"
      }
    ]
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": [
      {
        "creator": "charsyam",
        "title": "Redis 와 Valkey 무엇을 선택해야 할까?",
        "link": "https://charsyam.wordpress.com/2025/05/03/redis-%ec%99%80-valkey-%eb%ac%b4%ec%97%87%ec%9d%84-%ec%84%a0%ed%83%9d%ed%95%b4%ec%95%bc-%ed%95%a0%ea%b9%8c/",
        "pubDate": "Sat, 03 May 2025 08:16:52 +0000",
        "content:encodedSnippet": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다.\n 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 싸진다는 장점만 있다고 보시면 됩니다.) 왜냐하면 클라우드에서 쓸 수 있는 Redis 버전은 기본적으로 7.2.4 의 이전 버전들이라, 그 시점은 Valkey가 Fork 되면서 그대로 이전했기 때문입니다. 즉, 기존 Redis 를 제공하는 클라우드의 내부 버전이 다르더라도 그냥 제품명만 Redis -> Valkey로 바꿔서 그대로 제공이 됩니다. 그냥 바꾸면 변경이 되는 수준입니다.\n 그럼, 실제로 문제가 되는 것은 어떤 상황일까요? 현재 우리가 Redis를 자체적으로 운영하고 있는데, Valkey로 바꾸어야 되는가 입니다. 이 이야기를 하기 전에 Redis와 Valkey가 이제 차이가 나는가? 라는 주제 부터 얘기를 해야 합니다. Redis 8과 Valkey 8이 2025년에 나오면서 조금씩 큰 차이가 벌어지고 있습니다. \n Redis Module 이야 대부분이 원래 RSAL 라이센스라, 클라우드에서 제공이 안되었지만, Redis 는 사용자의 편의성 기능과 AI쪽에 좀 더 집중하고 있는 모습입니다. \n Redis는 7 버전 이후에 Hash 에 서브 Key를 Expire 하는 기능이 들어갔지만, Valkey에는 들어가지 않았습니다.(포크가 되는 시점에, 개발되고 있다가, 포크되고 반영된…) Redis 8에는 VectorSet 이나 AutoComplete 등 AI 지원 기능이나 편의성 기능이 이번에 많이 추가 되었습니다.(내부적으로 콜렉션등에 성능개선도 있었다고…)\n Valkey 는 8 버전부터, CPU Cache Line을 맞추거나, 포인터 접근 횟수를 줄여서, 좀더 메모리를 아끼거나, 성능을 높이는 쪽으로 가고 있습니다. 그래서 8부터는 명령이나 이런 부분에서 어느정도 차이가 나고 있습니다.(다만 아직 기본 명령 보다는, 모듈쪽에서 차이가 나는거 같습니다.)\n 그럼 발전성은 어떨까요? Redis 8이 AGPLv3가 추가되면서 기업에서 뭔가 사용하기가 어려워졌지만, 여전히 Redis(회사) 가 많은 지원을 하고 있고, 가장 많은 컨트리뷰션을 하고 있습니다. 반대로 Valkey는 리눅스 파운데이션과 AWS, 알리바바 등 지원이 있지만, Redis 보다는 조금 덜 활성화 된걸로 보입니다.\n 결국 선택의 우리의 몫입니다. 다만 정말 특별한 기능을 사용하지 않고, 기존 흐름을 따르는 형태에서는 뭘 선택해도 당장은 큰 문제는 없어보입니다. 하지만, 새로운 Redis 기능을 써야 한다면, 이제 좀 고민을 하셔야 될듯 합니다.",
        "dc:creator": "charsyam",
        "comments": "https://charsyam.wordpress.com/2025/05/03/redis-%ec%99%80-valkey-%eb%ac%b4%ec%97%87%ec%9d%84-%ec%84%a0%ed%83%9d%ed%95%b4%ec%95%bc-%ed%95%a0%ea%b9%8c/#respond",
        "content": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다. 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 [&#8230;]",
        "contentSnippet": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다. 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 […]",
        "guid": "http://charsyam.wordpress.com/?p=3568",
        "categories": [
          "Uncategorized"
        ],
        "isoDate": "2025-05-03T08:16:52.000Z"
      },
      {
        "creator": "charsyam",
        "title": "Redis 8 에서의 AGPLv3 추가의 의미(오픈소스로의 리턴?)",
        "link": "https://charsyam.wordpress.com/2025/05/02/redis-8-%ec%97%90%ec%84%9c%ec%9d%98-agplv3-%ec%b6%94%ea%b0%80%ec%9d%98-%ec%9d%98%eb%af%b8%ec%98%a4%ed%94%88%ec%86%8c%ec%8a%a4%eb%a1%9c%ec%9d%98-%eb%a6%ac%ed%84%b4/",
        "pubDate": "Fri, 02 May 2025 14:12:59 +0000",
        "content:encodedSnippet": "지금부터의 의견은 100% 내 개인적인 의견이다.\n 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다.\n 먼저 RSALv2 와 SSPLv1 라이센스에 대해서 먼저 알아보자. 이 두 해당 라이센스는 공식적인 오픈소스 라이센스로 인정받지 못한다. 즉 기본적으로 Redis는 더 이상 오픈소스로 인정 되지 않는다는 얘기였다.(그래서 각 종 리눅스 배포판에서 빠지게 되었다.)\n 일단 각 라이센스 부터 정리하면. 아래와 같다.\n\n라이센스비고\nRSALv2비상업적 또는 자체 내부 서비스 용도로는 사용 가능.\nSaaS(서비스형 소프트웨어) 형태로 Redis를 제공하는 것은 금지.\n예: AWS, GCP 같은 클라우드 벤더가 Redis를 서비스로 제공하는 것 제한.\n수정 및 배포는 가능하지만, 상업적 Redis-as-a-Service 제공은 불허.\nSSPLv1기본적으로 GPLv3 기반이지만, 클라우드 제공자에게 훨씬 더 엄격함.\nRedis를 서비스로 제공하고 싶다면, 해당 서비스 전체의 소스코드를 공개해야 함.\n예: Redis와 함께 사용하는 관리 도구, 오케스트레이션 시스템 등도 모두 공개해야 함.\n사실상 대기업의 SaaS 제공을 어렵게 만드는 라이선스입니다.\n\n\n\n\n\n 딱 살펴보면 알겠지만, Redis를 그냥 사용하는 것은 되지만, Redis As a Service 를 못하게 하는 라이센스라고 보면 된다. 여기서 타겟이 되는 것은 AWS Elasticach 나 GCP 같은 클라우드 업체이며, 더 이상 Redis 를 서비스 할 수 없게 된다.(정확히는 Redis 7.2.4 부터이고 그 이전까지는 여전히 BSDv3 이므로 상관없다.)\n Redis(회사) 에서 말하는 것은 오픈소스 레디스에 우리는 이렇게 투자를 많이하는데, 클라우드 업체에서는 과실만 따먹고, 여기에 대한 투자를 하지 않는다라는 것이다.(물론, 알리바바 클라우드나 AWS에서도 꽤 공헌이 있었다.)\n 여기서 재미있는 것은 Redis(회사) 의 엔터프라이즈 버전이나, AWS의 Elasticash 같은 경우 Open Source Redis의 엄청난 개조버전이라는 것이다.(여기서, Redis 엔터프라이즈 버전은 오픈소스 Redis를 앞에서 Redis(회사)에서 만든 Proxy가 붙어서 다른 형태로 동작하게 하는 걸로 알고 있다.) 즉, 이렇게 수정한 버전을 서비스를 할려면, 소스를 공개하라는 뜻이다.\n 그런데 몇일전에, Redis 8을 릴리즈하면서 이제 AGPLv3 를 라이센스에 추가했다. 관련 글에는 고객들이 오픈소스 라이센스일때 더 적용하기 쉽다고 해서, AGPLv3를 추가했다는 것이다. 그리고 AGPLv3는 인정 받는 오픈소스 라이센스가 맞다. \n 그럼 AGPLv3는 어떤 특징이 있을까?\n가장 “자유로운” 라이선스처럼 보일 수 있으나, 기업 입장에서는 부담이 큼.\n네트워크 상에서 Redis를 서비스 형태로 제공할 경우, 소스코드 전체를 공개해야 함.\nRedis를 커스터마이징하거나 변경한 버전을 서비스로 제공하면, 해당 서비스 전체 소스도 공개해야 함.\n 살펴보면 SSPLv1 과 유사하다는 것을 알 수 있다. 즉, 결국 Redis 오픈 소스 버전을 쓰고 싶다면, 결과물을 공개하라는 의지가 계속 들어가 있는 것이다.\n 당연히 오픈소스 Redis 로 다시 돌아왔지만, 그 목적이 예전처럼 더 자유로웠던 BSDv3가 아닌 것은, 그 목적이 어느 정도 명확해서라고 생각한다.",
        "dc:creator": "charsyam",
        "comments": "https://charsyam.wordpress.com/2025/05/02/redis-8-%ec%97%90%ec%84%9c%ec%9d%98-agplv3-%ec%b6%94%ea%b0%80%ec%9d%98-%ec%9d%98%eb%af%b8%ec%98%a4%ed%94%88%ec%86%8c%ec%8a%a4%eb%a1%9c%ec%9d%98-%eb%a6%ac%ed%84%b4/#respond",
        "content": "지금부터의 의견은 100% 내 개인적인 의견이다. 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다. 먼저 RSALv2 와 SSPLv1 라이센스에 [&#8230;]",
        "contentSnippet": "지금부터의 의견은 100% 내 개인적인 의견이다. 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다. 먼저 RSALv2 와 SSPLv1 라이센스에 […]",
        "guid": "http://charsyam.wordpress.com/?p=3554",
        "categories": [
          "Uncategorized"
        ],
        "isoDate": "2025-05-02T14:12:59.000Z"
      }
    ]
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": [
      {
        "creator": "KwonGyo",
        "title": "해외주식 백트래킹 사이트.",
        "link": "http://kwongyo.tistory.com/46",
        "pubDate": "Fri, 2 May 2025 01:04:21 +0900",
        "author": "KwonGyo",
        "comments": "http://kwongyo.tistory.com/46#entry46comment",
        "content": "<h2 data-ke-size=\"size26\">안녕하세요. 최근 주식 백트래킹 사이트를 운영하고 있습니다.</h2>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\"><a href=\"https://deepquant.app\">https://deepquant.app</a></h2>\n<figure id=\"og_1746115488767\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"DeepQuant - 나만의 전략을 위한 주식 백테스팅\" data-og-description=\"DeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!\" data-og-host=\"deepquant.app\" data-og-source-url=\"https://deepquant.app\" data-og-url=\"https://deepquant.app/\" data-og-image=\"\"><a href=\"https://deepquant.app\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://deepquant.app\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">DeepQuant - 나만의 전략을 위한 주식 백테스팅</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">DeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!</p>\n<p class=\"og-host\" data-ke-size=\"size16\">deepquant.app</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">아직 제공하고 있는 기능은 많이 없지만, 점차 늘려갈 예정입니다!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1378\" data-origin-height=\"942\"><span data-url=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" data-alt=\"사이트 접속시 노출되는 화면.\"><img src=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbQNnBX%2FbtsNHPv8Vuf%2FzfshIt1ay4nBktJPuUNVSK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1378\" height=\"942\" data-origin-width=\"1378\" data-origin-height=\"942\"/></span><figcaption>사이트 접속시 노출되는 화면.</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">원하는 해외주식 종목을 선택해서 그동안 생각했던 매수/매도조건을 테스트 해볼 수 있도록 제작 하였습니다.</p>\n<p data-ke-size=\"size16\">저는 이평선과 볼린저밴드를 주로 많이 보는 편인데요. 이를 바탕으로 제작 해보았습니다.</p>\n<p data-ke-size=\"size16\">추후 기능들을 더 넣을 예정입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"923\" data-origin-height=\"510\"><span data-url=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" data-alt=\"트레이딩 안전 설정\"><img src=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbp5ggS%2FbtsNIMS56Q6%2FkRQyIFIgsgLLewF9fuzV0K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"923\" height=\"510\" data-origin-width=\"923\" data-origin-height=\"510\"/></span><figcaption>트레이딩 안전 설정</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">트레이딩 안전 설정을 사용하시면, 상승채널일때만 매매하는 테스트도 진행해볼 수 있습니다.&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"430\" data-origin-height=\"248\"><span data-url=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" data-alt=\"i 마크에 마우스 올리면 노출되는 안내문구.\"><img src=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAkPuN%2FbtsNHynR3e3%2FvF3dp1NaEtx5Xik2nIW430%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"430\" height=\"248\" data-origin-width=\"430\" data-origin-height=\"248\"/></span><figcaption>i 마크에 마우스 올리면 노출되는 안내문구.</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">기능 이해가 잘 안 되시는 경우에는 i 버튼에 마우스 올리시면 설명이 노출되도록 해두었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"888\" data-origin-height=\"975\"><span data-url=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" data-alt=\"백테스트 결과\"><img src=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcMqME1%2FbtsNHdjYMeP%2FIOCOEiH2apQyZRqk1rGF40%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"888\" height=\"975\" data-origin-width=\"888\" data-origin-height=\"975\"/></span><figcaption>백테스트 결과</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">백테스트 히스토리는 위와 같이 나오는데요. 어떤 전략으로 인하여 매수/매도가 발생했는지 알 수 있게 매매 히스토리를 제공합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">어느 기능을 더 추가해야할지 잘 감이 안 옵니다. 행잉맨, 해머, 슈티스타, 반전 해머, 비석형, 드래건플라이, 긴십자형, 상승장악형 등등 다양한 캔들 패턴이 있는데, 이를 어떤 패턴으로 제공하면 좋을지 잘 모르겠습니다. 어떤 패턴들을 잘 보시는지 모르겠습니다. 댓글을 통하여 알려주시면 다음 기능 추가시에 적극 반영하겠습니다.</p>\n<p data-ke-size=\"size16\">이런식으로 알려주시면 더 좋은 참고가 될 거 같습니다.</p>\n<p data-ke-size=\"size16\">상승장악형 - 전 하락캔들이 3%일때, 5%이상 상승장악 캔들이 나오면 매수 ( 혹은 반대의 케이스에 매도 )</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">감사합니다!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<p data-ke-size=\"size16\">서비스를 바탕으로 기능을 정리 해보았습니다. 사용시 참고하시면 될 거 같습니다. 사이트에 기재된 글이기도 합니다.</p>\n<h2 data-ke-size=\"size26\">1. DeepQuant: 주요 기능 살펴보기</h2>\n<p data-ke-size=\"size16\">DeepQuant는 사용자가 코딩 없이 자신만의 주식 투자 전략을 과거 데이터로 검증해볼 수 있는 웹 기반 백테스팅 서비스입니다. 제공된 프론트엔드 코드를 통해 다음과 같은 기능들을 확인할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\">핵심 기능: 주식 백테스팅</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>전략 시뮬레이션:</b> 사용자가 설정한 매수/매도 조건에 따라 특정 주식(티커)의 과거 데이터를 기반으로 가상 투자를 실행하고 그 결과를 확인합니다.</li>\n<li><b>웹 기반 인터페이스:</b> 별도의 프로그램 설치 없이 웹 브라우저에서 모든 기능을 이용할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\">백테스팅 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>기본 정보 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>티커 검색:</b> 분석할 주식의 티커 심볼 또는 회사 이름을 입력하면 관련 주식이 자동으로 추천됩니다</li>\n<li><b>초기 예수금 설정:</b> 백테스팅을 시작할 가상 투자금을 달러($) 단위로 입력합니다</li>\n<li><b>조회 기간 설정:</b> 백테스팅을 수행할 시작 년/월과 종료 년/월을 'YYYY.MM' 형식으로 입력하거나 달력 UI를 통해 선택합니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>분봉 매매 옵션:</b> (베타/옵션 기능으로 추정) '분봉으로 매매하기' 체크 시 더 짧은 시간 간격으로 테스트할 수 있으며, 이 경우 조회 기간이 제한될 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>매수 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>상세 조건 추가:</b> '+' 버튼을 눌러 매수 신호를 발생시킬 조건을 동적으로 추가할 수 있습니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이동평균선(SMA) 우상향:</b> 단기 이동평균선이 장기 이동평균선을 상향 돌파하는 시점을 조건으로 설정합니다 (예: 5일선이 20일선을 돌파)</li>\n<li><b>볼린저 밴드:</b> 가격이 볼린저 밴드 하단에 근접하거나 특정 %B 값(%B &lt; 임계값) 이하일 때를 조건으로 설정합니다 (기간, 표준편차 배수 K, %B 임계값 설정)</li>\n<li><b>(준비중) RSI, MACD, 스토캐스틱:</b> 향후 추가될 지표로 UI 상에 표시되어 있습니다</li>\n</ul>\n</li>\n<li><b>매수 투자 조건:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>투자 단위:</b> 매수 시 투자할 금액을 현재 보유 예수금의 <b>비율(%)</b> 또는 <b>고정 금액(달러)</b>으로 설정할 수 있습니다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>매도 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>상세 조건 추가:</b> '+' 버튼으로 매도 신호 조건을 추가합니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이동평균선(SMA) 우하향:</b> 단기 이동평균선이 장기 이동평균선을 하향 돌파하는 시점을 조건으로 설정합니다</li>\n<li><b>볼린저 밴드:</b> 가격이 볼린저 밴드 상단에 근접하거나 특정 %B 값(%B &gt; 임계값) 이상일 때를 조건으로 설정합니다</li>\n<li><b>수익/손실률 기준:</b> 목표 수익률(%) 또는 손절 기준(%)을 설정하여 매도할 수 있습니다. (체크박스로 활성화)</li>\n<li><b>(준비중) RSI, MACD, 스토캐스틱:</b> 향후 추가될 지표로 UI 상에 표시되어 있습니다</li>\n</ul>\n</li>\n<li><b>매도 투자 조건:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>매도 단위:</b> 매도 시 매도할 수량을 현재 보유 주식의 <b>비율(%)</b> 또는 <b>고정 수량(주)</b>으로 설정할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>트레이딩 안전 설정 (선택 사항):</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>활성화 토글:</b> 전체 안전 설정을 켜고 끌 수 있는 스위치가 제공됩니다</li>\n<li><b>세부 규칙:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>최소 보유 기간:</b> 매수 후 최소 N일(캔들 수) 동안 매도를 금지합니다 (수익/손실률 기준 제외).</li>\n<li><b>재진입 쿨다운:</b> 매도 후 최소 N일 동안 재매수를 금지합니다.</li>\n<li><b>최소 가격 변동:</b> 마지막 매도 가격 대비 N% 이상 가격 변동 시에만 다음 매수가 가능합니다.</li>\n<li><b>최대 연속 거래:</b> 같은 방향(매수 또는 매도)으로 연속 N회까지만 거래를 허용합니다.</li>\n<li><b>채널 감지:</b> 특정 조건(기간, 상승 기울기%, 유효성 임계값)을 만족하는 가격 채널 패턴이 감지될 때만 거래를 실행하도록 필터링할 수 있습니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>이 기능 활성화 시, 설정된 매수/매도 조건 외에 추가적으로 채널 조건을 만족해야 거래가 실행됩니다. (툴팁 설명 참고)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">결과 확인 및 분석</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>요약 정보:</b> 백테스팅 실행 시 설정된 티커, 기간, 조건 등 주요 설정값을 요약하여 보여줍니다. 이 영역은 접고 펼 수 있습니다.</li>\n<li><b>상세 거래 내역:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>날짜별 매매 활동(매수, 매도, 보유), 실행 조건, 보유 주식 수, 거래별 수익률(금액 및 %), 예수금 변화, 총 평가금액(예수금+주식 평가액)을 표 형태로 제공합니다</li>\n<li>수익률은 상승 시 빨간색(▲), 하락 시 파란색(▼)으로 시각적으로 구분됩니다.</li>\n</ul>\n</li>\n<li><b>로딩 상태 표시:</b> 백테스팅 실행 중에는 로딩 스피너와 함께 '분석 중...' 메시지가 표시됩니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\">커뮤니티 및 추가 정보</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>실시간 백테스팅 현황:</b> 다른 사용자들이 최근 실행한 백테스팅 정보(티커, 수익률 등)를 사이드바에서 실시간으로 확인할 수 있습니다. 상세 전략은 접기/펼치기로 볼 수 있습니다.</li>\n<li><b>Top 백테스팅 결과:</b> 높은 수익률을 기록한 백테스팅 결과 상위 N개를 사이드바에서 보여줍니다. 상세 전략 확인이 가능합니다.</li>\n<li><b>서비스 소개 페이지:</b> 서비스 기능, 사용 가이드, 백테스팅 개념, 사용되는 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 별도 페이지에서 탭 형식으로 제공합니다.</li>\n<li><b>게시판:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용자 간 소통을 위한 게시판 기능을 제공합니다.</li>\n<li><b>글쓰기:</b> 제목, 닉네임, 비밀번호, 내용(Toast UI 에디터 사용)을 입력하여 게시글을 작성할 수 있습니다. 이미지 첨부(업로드 토큰 필요, 진행률 표시) 기능이 포함된 위지윅/마크다운 에디터를 제공합니다.</li>\n<li><b>글 목록:</b> 게시글 목록을 제목, 글쓴이(IP 일부 표시), 작성시간, 댓글 수와 함께 보여주며, 공지 기능 및 페이지네이션을 지원합니다.</li>\n<li><b>글 상세 보기:</b> 게시글 내용, 작성자 정보(닉네임, IP 일부, 작성시간, 고유번호)를 보여주며, 비밀번호를 이용한 게시글 삭제 기능을 제공합니다.</li>\n<li><b>댓글:</b> 닉네임, 비밀번호, 내용을 입력하여 댓글을 작성하고, 작성된 댓글 목록(작성자, IP 일부, 시간)을 볼 수 있습니다. 비밀번호를 이용한 댓글 삭제 기능을 제공합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 data-ke-size=\"size23\">기타</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>반응형 디자인:</b> 데스크톱, 태블릿, 모바일 등 다양한 화면 크기에 맞춰 레이아웃이 조절됩니다 (CSS 파일 확인).</li>\n<li><b>투자 유의사항 안내:</b> 모든 페이지 하단에 백테스팅 결과는 과거 데이터 기반이며 미래 수익을 보장하지 않고, 투자 결정 책임은 사용자에게 있다는 면책 조항이 명시되어 있습니다.</li>\n</ul>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">2. DeepQuant 백테스팅, 이렇게 사용해보세요! (단계별 가이드)</h2>\n<p data-ke-size=\"size16\">DeepQuant 서비스를 이용하여 나만의 주식 매매 전략을 백테스팅하는 방법은 다음과 같습니다.</p>\n<h3 data-ke-size=\"size23\">1단계: 기본 정보 입력</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>티커 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'티커' 입력란에 분석하고 싶은 주식의 <b>티커 심볼</b>(예: AAPL) 또는 <b>회사 이름</b>을 입력 시작합니다.</li>\n<li>입력과 동시에 관련 주식 목록이 자동으로 나타나면, 원하는 주식을 <b>클릭하여 선택</b>합니다.</li>\n</ul>\n</li>\n<li><b>예수금 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'예수금' 입력란에 백테스팅을 시작할 <b>초기 가상 투자금</b>을 <b>달러($)</b> 단위 숫자로 입력합니다. (예: 10000)</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">2단계: 매수 조건 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>매수 상세 조건 추가:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매수상세조건' 섹션에서 <b>[+ 조건 추가]</b> 버튼을 클릭합니다.</li>\n<li>나타나는 드롭다운 메뉴에서 원하는 매수 조건(예: '이평선 우상향', '볼린저 밴드')을 선택합니다.</li>\n<li>선택한 조건에 필요한 <b>파라미터 값</b>을 입력합니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이평선 우상향:</b> 단기 N일선 값과 장기 M일선 값을 입력합니다. (예: 5, 20)</li>\n<li><b>볼린저 밴드:</b> 기간(예: 20), 표준편차 배수 K(예: 2.0), 매수할 %B 임계값(예: 0.2)을 입력합니다.</li>\n</ul>\n</li>\n<li>필요한 만큼 조건을 더 추가할 수 있습니다.</li>\n</ul>\n</li>\n<li><b>매수 투자 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매수투자조건' 섹션에서 매수 시 투자할 <b>금액 또는 비율</b>을 입력합니다.</li>\n<li>숫자 입력 후, 옆의 <b>단위 토글 버튼</b>을 클릭하여 <b>'%'</b>(예수금 비율) 또는 <b>'달러'</b>(고정 금액)를 선택합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">3단계: 매도 조건 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>매도 상세 조건 추가:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매도상세조건' 섹션에서 <b>[+ 조건 추가]</b> 버튼을 클릭합니다.</li>\n<li>드롭다운 메뉴에서 원하는 매도 조건(예: '이평선 우하향', '볼린저 밴드', '수익/손실률 기준')을 선택합니다.</li>\n<li>선택한 조건에 필요한 <b>파라미터 값</b>을 입력합니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이평선 우하향:</b> 단기 N일선 값과 장기 M일선 값을 입력합니다.</li>\n<li><b>볼린저 밴드:</b> 기간, K값, 매도할 %B 임계값(예: 0.8)을 입력합니다.</li>\n<li><b>수익/손실률 기준:</b> 해당 조건을 추가하면 '목표 수익률'과 '손절 기준' 입력란이 나타납니다. 사용하려는 항목 앞의 <b>체크박스를 선택</b>하고 원하는 <b>비율(%)</b>을 입력합니다. (둘 중 하나 또는 둘 다 활성화 가능)</li>\n</ul>\n</li>\n<li>필요한 만큼 조건을 더 추가할 수 있습니다. ('수익/손실률 기준'은 하나만 추가 가능)</li>\n</ul>\n</li>\n<li><b>매도 투자 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매도투자조건' 섹션에서 매도 시 매도할 <b>수량 또는 비율</b>을 입력합니다.</li>\n<li>숫자 입력 후, 옆의 <b>단위 토글 버튼</b>을 클릭하여 <b>'%'</b>(보유량 비율) 또는 <b>'주'</b>(고정 수량)를 선택합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">4단계: 트레이딩 안전 설정 (선택 사항)</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>안전 설정 활성화:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'트레이딩 안전 설정' 섹션 우측의 <b>토글 스위치</b>를 클릭하여 기능을 활성화합니다.</li>\n</ul>\n</li>\n<li><b>세부 규칙 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용하려는 안전 규칙 앞의 <b>체크박스를 선택</b>합니다.</li>\n<li>선택된 규칙에 필요한 <b>숫자 값</b>을 입력합니다 (예: 최소 보유 기간 '5'일, 재진입 쿨다운 '3'일 등).</li>\n<li><b>채널 감지</b>를 활성화하면, 추가적으로 '감지 기간', '상승 기울기', '유효성 임계값'을 설정하는 입력란이 나타납니다. 필요한 값을 입력합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">5단계: 조회 기간 설정 및 실행</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>조회 기간 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'조회기간' 섹션에서 백테스팅을 시작할 년/월과 종료할 년/월을 <b>'YYYY.MM' 형식</b>으로 직접 입력하거나, 입력란 옆의 <b>달력 아이콘( )</b>을 클릭하여 원하는 년도와 월을 선택합니다.</li>\n<li><b>주의:</b> 시작 날짜는 종료 날짜보다 반드시 이전이어야 합니다.</li>\n<li><b>(선택) 분봉 매매:</b> '분봉으로 매매하기' 체크박스를 선택하면 분 단위 데이터로 테스트합니다. 이 경우 조회 기간이 자동으로 조절될 수 있습니다.</li>\n</ul>\n</li>\n<li><b>결과 보기:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>모든 설정이 완료되면 <b>[결과 보기]</b> 버튼을 클릭합니다. 버튼이 '분석 중...'으로 바뀌며 로딩 스피너가 나타납니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">6단계: 결과 해석</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>요약 정보 확인:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>결과 영역 상단에 설정했던 티커, 기간, 주요 조건들이 요약되어 표시됩니다. '상세조건' 부분을 클릭하여 접거나 펼 수 있습니다.</li>\n</ul>\n</li>\n<li><b>상세 거래 내역 확인:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'결과' 섹션에 상세한 거래 내역이 표 형태로 나타납니다.</li>\n<li><b>날짜:</b> 거래 발생 시점</li>\n<li><b>매매:</b> 매수 / 매도 / 보유 상태</li>\n<li><b>조건:</b> 해당 거래를 발생시킨 조건</li>\n<li><b>소유 주식 수:</b> 해당 시점 보유 주식 수</li>\n<li><b>수익률:</b> 해당 거래로 인한 수익/손실 금액</li>\n<li><b>수익률(%):</b> 해당 거래로 인한 수익/손실률 (%)</li>\n<li><b>예수금:</b> 해당 시점 보유 현금</li>\n<li><b>총 평가금액:</b> 보유 현금과 보유 주식의 평가 가치를 합한 총 자산. 이 값의 추세가 전략의 전반적인 성과를 나타냅니다.</li>\n<li>표를 통해 전략의 진입/청산 시점, 수익/손실 발생 패턴 등을 분석할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">추가 팁</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>초기화:</b> 설정값을 모두 지우고 처음부터 다시 시작하려면 <b>[초기화]</b> 버튼을 사용하세요.</li>\n<li><b>다른 사용자 결과 참고:</b> 메인 페이지 우측의 '실시간 백테스팅 현황'과 'Top 백테스팅 결과'를 참고하여 다른 사용자들은 어떤 전략을 테스트하는지 살펴보세요. 클릭하면 상세 조건을 확인할 수 있습니다.</li>\n<li><b>지표/용어 이해:</b> '서비스 소개' 페이지의 '백테스팅이란?', '지표 설명' 탭에서 관련 용어와 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 참고하면 전략 수립에 도움이 됩니다.</li>\n<li><b>커뮤니티 활용:</b> 궁금한 점이나 전략 아이디어는 '게시판'을 통해 다른 사용자들과 공유하고 토론해 보세요.</li>\n</ul>\n<p data-ke-size=\"size16\"><b>주의:</b> DeepQuant는 정보 제공 및 교육 목적으로 제공되며, 백테스팅 결과는 과거 데이터에 기반한 시뮬레이션으로 미래 수익을 보장하지 않습니다. 모든 투자 결정의 책임은 사용자 본인에게 있습니다.</p>",
        "contentSnippet": "안녕하세요. 최근 주식 백트래킹 사이트를 운영하고 있습니다.\nhttps://deepquant.app\n\n \nDeepQuant - 나만의 전략을 위한 주식 백테스팅\nDeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!\ndeepquant.app\n\n아직 제공하고 있는 기능은 많이 없지만, 점차 늘려갈 예정입니다!\n사이트 접속시 노출되는 화면.\n\n\n원하는 해외주식 종목을 선택해서 그동안 생각했던 매수/매도조건을 테스트 해볼 수 있도록 제작 하였습니다.\n저는 이평선과 볼린저밴드를 주로 많이 보는 편인데요. 이를 바탕으로 제작 해보았습니다.\n추후 기능들을 더 넣을 예정입니다.\n트레이딩 안전 설정\n\n\n트레이딩 안전 설정을 사용하시면, 상승채널일때만 매매하는 테스트도 진행해볼 수 있습니다. \n \ni 마크에 마우스 올리면 노출되는 안내문구.\n\n\n기능 이해가 잘 안 되시는 경우에는 i 버튼에 마우스 올리시면 설명이 노출되도록 해두었습니다.\n \n백테스트 결과\n\n\n백테스트 히스토리는 위와 같이 나오는데요. 어떤 전략으로 인하여 매수/매도가 발생했는지 알 수 있게 매매 히스토리를 제공합니다.\n \n어느 기능을 더 추가해야할지 잘 감이 안 옵니다. 행잉맨, 해머, 슈티스타, 반전 해머, 비석형, 드래건플라이, 긴십자형, 상승장악형 등등 다양한 캔들 패턴이 있는데, 이를 어떤 패턴으로 제공하면 좋을지 잘 모르겠습니다. 어떤 패턴들을 잘 보시는지 모르겠습니다. 댓글을 통하여 알려주시면 다음 기능 추가시에 적극 반영하겠습니다.\n이런식으로 알려주시면 더 좋은 참고가 될 거 같습니다.\n상승장악형 - 전 하락캔들이 3%일때, 5%이상 상승장악 캔들이 나오면 매수 ( 혹은 반대의 케이스에 매도 )\n \n감사합니다!\n \n \n서비스를 바탕으로 기능을 정리 해보았습니다. 사용시 참고하시면 될 거 같습니다. 사이트에 기재된 글이기도 합니다.\n1. DeepQuant: 주요 기능 살펴보기\nDeepQuant는 사용자가 코딩 없이 자신만의 주식 투자 전략을 과거 데이터로 검증해볼 수 있는 웹 기반 백테스팅 서비스입니다. 제공된 프론트엔드 코드를 통해 다음과 같은 기능들을 확인할 수 있습니다.\n핵심 기능: 주식 백테스팅\n전략 시뮬레이션: 사용자가 설정한 매수/매도 조건에 따라 특정 주식(티커)의 과거 데이터를 기반으로 가상 투자를 실행하고 그 결과를 확인합니다.\n웹 기반 인터페이스: 별도의 프로그램 설치 없이 웹 브라우저에서 모든 기능을 이용할 수 있습니다.\n백테스팅 설정\n기본 정보 입력:\n\n티커 검색: 분석할 주식의 티커 심볼 또는 회사 이름을 입력하면 관련 주식이 자동으로 추천됩니다\n초기 예수금 설정: 백테스팅을 시작할 가상 투자금을 달러($) 단위로 입력합니다\n조회 기간 설정: 백테스팅을 수행할 시작 년/월과 종료 년/월을 'YYYY.MM' 형식으로 입력하거나 달력 UI를 통해 선택합니다\n\n분봉 매매 옵션: (베타/옵션 기능으로 추정) '분봉으로 매매하기' 체크 시 더 짧은 시간 간격으로 테스트할 수 있으며, 이 경우 조회 기간이 제한될 수 있습니다.\n매수 조건 설정:\n\n상세 조건 추가: '+' 버튼을 눌러 매수 신호를 발생시킬 조건을 동적으로 추가할 수 있습니다\n\n이동평균선(SMA) 우상향: 단기 이동평균선이 장기 이동평균선을 상향 돌파하는 시점을 조건으로 설정합니다 (예: 5일선이 20일선을 돌파)\n볼린저 밴드: 가격이 볼린저 밴드 하단에 근접하거나 특정 %B 값(%B < 임계값) 이하일 때를 조건으로 설정합니다 (기간, 표준편차 배수 K, %B 임계값 설정)\n(준비중) RSI, MACD, 스토캐스틱: 향후 추가될 지표로 UI 상에 표시되어 있습니다\n매수 투자 조건:\n\n투자 단위: 매수 시 투자할 금액을 현재 보유 예수금의 비율(%) 또는 고정 금액(달러)으로 설정할 수 있습니다\n매도 조건 설정:\n\n상세 조건 추가: '+' 버튼으로 매도 신호 조건을 추가합니다\n\n이동평균선(SMA) 우하향: 단기 이동평균선이 장기 이동평균선을 하향 돌파하는 시점을 조건으로 설정합니다\n볼린저 밴드: 가격이 볼린저 밴드 상단에 근접하거나 특정 %B 값(%B > 임계값) 이상일 때를 조건으로 설정합니다\n수익/손실률 기준: 목표 수익률(%) 또는 손절 기준(%)을 설정하여 매도할 수 있습니다. (체크박스로 활성화)\n(준비중) RSI, MACD, 스토캐스틱: 향후 추가될 지표로 UI 상에 표시되어 있습니다\n매도 투자 조건:\n\n매도 단위: 매도 시 매도할 수량을 현재 보유 주식의 비율(%) 또는 고정 수량(주)으로 설정할 수 있습니다.\n트레이딩 안전 설정 (선택 사항):\n\n활성화 토글: 전체 안전 설정을 켜고 끌 수 있는 스위치가 제공됩니다\n세부 규칙:\n\n최소 보유 기간: 매수 후 최소 N일(캔들 수) 동안 매도를 금지합니다 (수익/손실률 기준 제외).\n재진입 쿨다운: 매도 후 최소 N일 동안 재매수를 금지합니다.\n최소 가격 변동: 마지막 매도 가격 대비 N% 이상 가격 변동 시에만 다음 매수가 가능합니다.\n최대 연속 거래: 같은 방향(매수 또는 매도)으로 연속 N회까지만 거래를 허용합니다.\n채널 감지: 특정 조건(기간, 상승 기울기%, 유효성 임계값)을 만족하는 가격 채널 패턴이 감지될 때만 거래를 실행하도록 필터링할 수 있습니다.\n\n이 기능 활성화 시, 설정된 매수/매도 조건 외에 추가적으로 채널 조건을 만족해야 거래가 실행됩니다. (툴팁 설명 참고)\n결과 확인 및 분석\n요약 정보: 백테스팅 실행 시 설정된 티커, 기간, 조건 등 주요 설정값을 요약하여 보여줍니다. 이 영역은 접고 펼 수 있습니다.\n상세 거래 내역:\n\n날짜별 매매 활동(매수, 매도, 보유), 실행 조건, 보유 주식 수, 거래별 수익률(금액 및 %), 예수금 변화, 총 평가금액(예수금+주식 평가액)을 표 형태로 제공합니다\n수익률은 상승 시 빨간색(▲), 하락 시 파란색(▼)으로 시각적으로 구분됩니다.\n로딩 상태 표시: 백테스팅 실행 중에는 로딩 스피너와 함께 '분석 중...' 메시지가 표시됩니다.\n커뮤니티 및 추가 정보\n실시간 백테스팅 현황: 다른 사용자들이 최근 실행한 백테스팅 정보(티커, 수익률 등)를 사이드바에서 실시간으로 확인할 수 있습니다. 상세 전략은 접기/펼치기로 볼 수 있습니다.\nTop 백테스팅 결과: 높은 수익률을 기록한 백테스팅 결과 상위 N개를 사이드바에서 보여줍니다. 상세 전략 확인이 가능합니다.\n서비스 소개 페이지: 서비스 기능, 사용 가이드, 백테스팅 개념, 사용되는 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 별도 페이지에서 탭 형식으로 제공합니다.\n게시판:\n\n사용자 간 소통을 위한 게시판 기능을 제공합니다.\n글쓰기: 제목, 닉네임, 비밀번호, 내용(Toast UI 에디터 사용)을 입력하여 게시글을 작성할 수 있습니다. 이미지 첨부(업로드 토큰 필요, 진행률 표시) 기능이 포함된 위지윅/마크다운 에디터를 제공합니다.\n글 목록: 게시글 목록을 제목, 글쓴이(IP 일부 표시), 작성시간, 댓글 수와 함께 보여주며, 공지 기능 및 페이지네이션을 지원합니다.\n글 상세 보기: 게시글 내용, 작성자 정보(닉네임, IP 일부, 작성시간, 고유번호)를 보여주며, 비밀번호를 이용한 게시글 삭제 기능을 제공합니다.\n댓글: 닉네임, 비밀번호, 내용을 입력하여 댓글을 작성하고, 작성된 댓글 목록(작성자, IP 일부, 시간)을 볼 수 있습니다. 비밀번호를 이용한 댓글 삭제 기능을 제공합니다.\n기타\n반응형 디자인: 데스크톱, 태블릿, 모바일 등 다양한 화면 크기에 맞춰 레이아웃이 조절됩니다 (CSS 파일 확인).\n투자 유의사항 안내: 모든 페이지 하단에 백테스팅 결과는 과거 데이터 기반이며 미래 수익을 보장하지 않고, 투자 결정 책임은 사용자에게 있다는 면책 조항이 명시되어 있습니다.\n2. DeepQuant 백테스팅, 이렇게 사용해보세요! (단계별 가이드)\nDeepQuant 서비스를 이용하여 나만의 주식 매매 전략을 백테스팅하는 방법은 다음과 같습니다.\n1단계: 기본 정보 입력\n티커 입력:\n\n'티커' 입력란에 분석하고 싶은 주식의 티커 심볼(예: AAPL) 또는 회사 이름을 입력 시작합니다.\n입력과 동시에 관련 주식 목록이 자동으로 나타나면, 원하는 주식을 클릭하여 선택합니다.\n예수금 입력:\n\n'예수금' 입력란에 백테스팅을 시작할 초기 가상 투자금을 달러($) 단위 숫자로 입력합니다. (예: 10000)\n2단계: 매수 조건 설정\n매수 상세 조건 추가:\n\n'매수상세조건' 섹션에서 [+ 조건 추가] 버튼을 클릭합니다.\n나타나는 드롭다운 메뉴에서 원하는 매수 조건(예: '이평선 우상향', '볼린저 밴드')을 선택합니다.\n선택한 조건에 필요한 파라미터 값을 입력합니다.\n\n이평선 우상향: 단기 N일선 값과 장기 M일선 값을 입력합니다. (예: 5, 20)\n볼린저 밴드: 기간(예: 20), 표준편차 배수 K(예: 2.0), 매수할 %B 임계값(예: 0.2)을 입력합니다.\n필요한 만큼 조건을 더 추가할 수 있습니다.\n매수 투자 조건 설정:\n\n'매수투자조건' 섹션에서 매수 시 투자할 금액 또는 비율을 입력합니다.\n숫자 입력 후, 옆의 단위 토글 버튼을 클릭하여 '%'(예수금 비율) 또는 '달러'(고정 금액)를 선택합니다.\n3단계: 매도 조건 설정\n매도 상세 조건 추가:\n\n'매도상세조건' 섹션에서 [+ 조건 추가] 버튼을 클릭합니다.\n드롭다운 메뉴에서 원하는 매도 조건(예: '이평선 우하향', '볼린저 밴드', '수익/손실률 기준')을 선택합니다.\n선택한 조건에 필요한 파라미터 값을 입력합니다.\n\n이평선 우하향: 단기 N일선 값과 장기 M일선 값을 입력합니다.\n볼린저 밴드: 기간, K값, 매도할 %B 임계값(예: 0.8)을 입력합니다.\n수익/손실률 기준: 해당 조건을 추가하면 '목표 수익률'과 '손절 기준' 입력란이 나타납니다. 사용하려는 항목 앞의 체크박스를 선택하고 원하는 비율(%)을 입력합니다. (둘 중 하나 또는 둘 다 활성화 가능)\n필요한 만큼 조건을 더 추가할 수 있습니다. ('수익/손실률 기준'은 하나만 추가 가능)\n매도 투자 조건 설정:\n\n'매도투자조건' 섹션에서 매도 시 매도할 수량 또는 비율을 입력합니다.\n숫자 입력 후, 옆의 단위 토글 버튼을 클릭하여 '%'(보유량 비율) 또는 '주'(고정 수량)를 선택합니다.\n4단계: 트레이딩 안전 설정 (선택 사항)\n안전 설정 활성화:\n\n'트레이딩 안전 설정' 섹션 우측의 토글 스위치를 클릭하여 기능을 활성화합니다.\n세부 규칙 설정:\n\n사용하려는 안전 규칙 앞의 체크박스를 선택합니다.\n선택된 규칙에 필요한 숫자 값을 입력합니다 (예: 최소 보유 기간 '5'일, 재진입 쿨다운 '3'일 등).\n채널 감지를 활성화하면, 추가적으로 '감지 기간', '상승 기울기', '유효성 임계값'을 설정하는 입력란이 나타납니다. 필요한 값을 입력합니다.\n5단계: 조회 기간 설정 및 실행\n조회 기간 입력:\n\n'조회기간' 섹션에서 백테스팅을 시작할 년/월과 종료할 년/월을 'YYYY.MM' 형식으로 직접 입력하거나, 입력란 옆의 달력 아이콘( )을 클릭하여 원하는 년도와 월을 선택합니다.\n주의: 시작 날짜는 종료 날짜보다 반드시 이전이어야 합니다.\n(선택) 분봉 매매: '분봉으로 매매하기' 체크박스를 선택하면 분 단위 데이터로 테스트합니다. 이 경우 조회 기간이 자동으로 조절될 수 있습니다.\n결과 보기:\n\n모든 설정이 완료되면 [결과 보기] 버튼을 클릭합니다. 버튼이 '분석 중...'으로 바뀌며 로딩 스피너가 나타납니다.\n6단계: 결과 해석\n요약 정보 확인:\n\n결과 영역 상단에 설정했던 티커, 기간, 주요 조건들이 요약되어 표시됩니다. '상세조건' 부분을 클릭하여 접거나 펼 수 있습니다.\n상세 거래 내역 확인:\n\n'결과' 섹션에 상세한 거래 내역이 표 형태로 나타납니다.\n날짜: 거래 발생 시점\n매매: 매수 / 매도 / 보유 상태\n조건: 해당 거래를 발생시킨 조건\n소유 주식 수: 해당 시점 보유 주식 수\n수익률: 해당 거래로 인한 수익/손실 금액\n수익률(%): 해당 거래로 인한 수익/손실률 (%)\n예수금: 해당 시점 보유 현금\n총 평가금액: 보유 현금과 보유 주식의 평가 가치를 합한 총 자산. 이 값의 추세가 전략의 전반적인 성과를 나타냅니다.\n표를 통해 전략의 진입/청산 시점, 수익/손실 발생 패턴 등을 분석할 수 있습니다.\n추가 팁\n초기화: 설정값을 모두 지우고 처음부터 다시 시작하려면 [초기화] 버튼을 사용하세요.\n다른 사용자 결과 참고: 메인 페이지 우측의 '실시간 백테스팅 현황'과 'Top 백테스팅 결과'를 참고하여 다른 사용자들은 어떤 전략을 테스트하는지 살펴보세요. 클릭하면 상세 조건을 확인할 수 있습니다.\n지표/용어 이해: '서비스 소개' 페이지의 '백테스팅이란?', '지표 설명' 탭에서 관련 용어와 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 참고하면 전략 수립에 도움이 됩니다.\n커뮤니티 활용: 궁금한 점이나 전략 아이디어는 '게시판'을 통해 다른 사용자들과 공유하고 토론해 보세요.\n주의: DeepQuant는 정보 제공 및 교육 목적으로 제공되며, 백테스팅 결과는 과거 데이터에 기반한 시뮬레이션으로 미래 수익을 보장하지 않습니다. 모든 투자 결정의 책임은 사용자 본인에게 있습니다.",
        "guid": "http://kwongyo.tistory.com/46",
        "categories": [
          "주식백테스트",
          "주식시뮬레이션",
          "주식테스트",
          "해외주식",
          "해외주식백테스트",
          "해외주식백트래킹"
        ],
        "isoDate": "2025-05-01T16:04:21.000Z"
      }
    ]
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": [
      {
        "title": "USB를 이용한 전원 공급 (2) - USB PD",
        "link": "https://blog.seulgi.kim/2025/05/blog-post.html",
        "pubDate": "2025-05-04T17:07:00.004Z",
        "author": "Seulgi Kim",
        "summary": "USB 포트는 원래 데이터 전송을 위한 인터페이스였지만, 시간이 지나면서 전력 공급 수단으로도 활용되기 시작했다. 이를 지원하기 위해 USB BC가 도입되었고, 기존보다 높은 전류를 제공할 수 있도록 개선되었다. 하지만 USB BC 1.2는 5V 전압 고정이라는 한계를 갖고 있어, 노트북 같은 고출력 기기를 충전하기에는 부족했다. 이런 제약 조건을 해결하기 위해 제조사마다 별도의 급속 충전 방식을 만들기 시작했고, 이로 인해 특정 브랜드의 디바이스는 해당 브랜드의 충전기에서만 고속 충전이 가능한 호환성 문제도 발생하였다.\n\n이러한 문제를 해결하기 위해 USB-IF는 USB Power Delivery(a.k.a. USB PD)라는 전력 공급을 위한 새로운 표준을 만들었다. USB PD는 전압과 전류를 ",
        "id": "tag:blogger.com,1999:blog-5754933877504806384.post-8059409676462154833",
        "isoDate": "2025-05-04T17:07:00.004Z"
      }
    ]
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "Beat processors - 7th",
        "link": "https://kangmyounghun.blogspot.com/2025/05/beat-processors-7th.html",
        "pubDate": "2025-05-02T08:42:00.003Z",
        "author": "강명훈",
        "content": "<div>audit.log 연동.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>processors:</div><div>&nbsp; - include_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message\"</div><div>&nbsp; - copy_fields:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - from: message</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; to: message2</div><div>&nbsp; - replace:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - field: \"message2\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"\\\"\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replacement: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div><span><a name='more'></a></span>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var list = evt.Get(\"message2\").split(\" \");</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var i in list) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var key = list[i].split(\"=\")[0];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var val = list[i].split(\"=\")[1];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(key, val)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; - drop_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message2\"</div><div>&nbsp; - dissect:</div><div>&nbsp; &nbsp; &nbsp; field: \"msg\"</div><div>&nbsp; &nbsp; &nbsp; tokenizer: \"%{}(%{timestamp}:%{}\"</div><div>&nbsp; &nbsp; &nbsp; target_prefix: \"\"</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T08:39:45.009Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"timestamp\": \"1745768855.270\",</div><div>&nbsp; \"type\": \"NETFILTER_CFG\",</div><div>&nbsp; \"msg\": \"audit(1745768855.270:63):\",</div><div>&nbsp; \"table\": \"filter\",</div><div>&nbsp; \"family\": \"10\",</div><div>&nbsp; \"entries\": \"0\",</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T08:39:45.009Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"arch\": \"c000003e\",</div><div>&nbsp; \"pid\": \"1336\",</div><div>&nbsp; \"exe\": \"/usr/bin/kmod\",</div><div>&nbsp; \"key\": \"(null)\",</div><div>&nbsp; \"success\": \"yes\",</div><div>&nbsp; \"a0\": \"1e2da20\",</div><div>&nbsp; \"a1\": \"1d75\",</div><div>&nbsp; \"exit\": \"0\",</div><div>&nbsp; \"ppid\": \"1335\",</div><div>&nbsp; \"ses\": \"4294967295\",</div><div>&nbsp; \"subj\": \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; \"auid\": \"4294967295\",</div><div>&nbsp; \"gid\": \"0\",</div><div>&nbsp; \"fsuid\": \"0\",</div><div>&nbsp; \"egid\": \"0\",</div><div>&nbsp; \"sgid\": \"0\",</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",</div><div>&nbsp; \"syscall\": \"175\",</div><div>&nbsp; \"a3\": \"1e2a500\",</div><div>&nbsp; \"uid\": \"0\",</div><div>&nbsp; \"timestamp\": \"1745768855.720\",</div><div>&nbsp; \"type\": \"SYSCALL\",</div><div>&nbsp; \"a2\": \"41a2d8\",</div><div>&nbsp; \"items\": \"0\",</div><div>&nbsp; \"euid\": \"0\",</div><div>&nbsp; \"suid\": \"0\",</div><div>&nbsp; \"msg\": \"audit(1745768855.720:63):\",</div><div>&nbsp; \"fsgid\": \"0\",</div><div>&nbsp; \"tty\": \"(none)\",</div><div>&nbsp; \"comm\": \"modprobe\"</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>unixtime을 date 포맷으로 바꿔야 한다. 예전 같으면 한참 헤맸겠지?</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhF64x8lt-QRRH4WJP2wZQblS0Gw-Ir33-LNvDJqix4jSihtLadojgT9poSXaiIJgwcOCfMTrWknerkpG1M3qTwSsaGDMo32seKoTwrsgEBmL0PTB_sQNbNNzDU-RLjMKw78nGx62DPtTPdpwViRbPGnU5JBNtewruysGvXTsw1fQ3FYhivYivt4QDj-iEQ/s1012/unixtime2date.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1012\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhF64x8lt-QRRH4WJP2wZQblS0Gw-Ir33-LNvDJqix4jSihtLadojgT9poSXaiIJgwcOCfMTrWknerkpG1M3qTwSsaGDMo32seKoTwrsgEBmL0PTB_sQNbNNzDU-RLjMKw78nGx62DPtTPdpwViRbPGnU5JBNtewruysGvXTsw1fQ3FYhivYivt4QDj-iEQ/s16000/unixtime2date.png\" /></a></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>processors:</div><div>&nbsp; - include_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message\"</div><div>&nbsp; - copy_fields:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - from: message</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; to: message2</div><div>&nbsp; - replace:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - field: \"message2\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"\\\"\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replacement: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var list = evt.Get(\"message2\").split(\" \");</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var i in list) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var key = list[i].split(\"=\")[0];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var val = list[i].split(\"=\")[1];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(key, val)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; - drop_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message2\"</div><div>&nbsp; - dissect:</div><div>&nbsp; &nbsp; &nbsp; field: \"msg\"</div><div>&nbsp; &nbsp; &nbsp; tokenizer: \"%{}(%{timestamp}:%{}\"</div><div>&nbsp; &nbsp; &nbsp; target_prefix: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var timestamp = new Date(evt.Get(\"timestamp\") * 1000)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(\"@timestamp\", timestamp)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-04-27T15:47:35.270Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\",</div><div>&nbsp; \"timestamp\": \"1745768855.270\",</div><div>&nbsp; \"type\": \"NETFILTER_CFG\",</div><div>&nbsp; \"msg\": \"audit(1745768855.270:63):\",</div><div>&nbsp; \"table\": \"filter\",</div><div>&nbsp; \"family\": \"10\",</div><div>&nbsp; \"entries\": \"0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-04-27T15:47:35.720Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"arch\": \"c000003e\",</div><div>&nbsp; \"items\": \"0\",</div><div>&nbsp; \"pid\": \"1336\",</div><div>&nbsp; \"sgid\": \"0\",</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",</div><div>&nbsp; \"auid\": \"4294967295\",</div><div>&nbsp; \"uid\": \"0\",</div><div>&nbsp; \"exit\": \"0\",</div><div>&nbsp; \"a0\": \"1e2da20\",</div><div>&nbsp; \"fsgid\": \"0\",</div><div>&nbsp; \"key\": \"(null)\",</div><div>&nbsp; \"timestamp\": \"1745768855.720\",</div><div>&nbsp; \"a1\": \"1d75\",</div><div>&nbsp; \"a3\": \"1e2a500\",</div><div>&nbsp; \"euid\": \"0\",</div><div>&nbsp; \"fsuid\": \"0\",</div><div>&nbsp; \"type\": \"SYSCALL\",</div><div>&nbsp; \"ppid\": \"1335\",</div><div>&nbsp; \"ses\": \"4294967295\",</div><div>&nbsp; \"comm\": \"modprobe\",</div><div>&nbsp; \"msg\": \"audit(1745768855.720:63):\",</div><div>&nbsp; \"success\": \"yes\",</div><div>&nbsp; \"egid\": \"0\",</div><div>&nbsp; \"exe\": \"/usr/bin/kmod\",</div><div>&nbsp; \"subj\": \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; \"syscall\": \"175\",</div><div>&nbsp; \"a2\": \"41a2d8\",</div><div>&nbsp; \"gid\": \"0\",</div><div>&nbsp; \"suid\": \"0\",</div><div>&nbsp; \"tty\": \"(none)\"</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>참고로 <a href=\"https://docs.splunk.com/Documentation/Splunk/9.4.2/SearchReference/DateandTimeFunctions#strftime.28.26lt.3Btime.26gt.3B.2C.26lt.3Bformat.26gt.3B.29\" target=\"_blank\">스플렁크는 이렇게</a>.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3ZdvWoxgm2ms2EGHm1KtqhIjk6wXHFWTQcCvAKu5kcTj6CoTbGlFSqimlGc44KhJZA0PChTeHRa7rpV_ldaR3A_ySfLX-QlRubcYEkxkLdpHCC8b9SZWCOvX3zWaUq967d4kKLTtDISUguynHooUUVqALgEimX5CqWxz79vzhmXtvgY8oCVkCv0_f9bGy/s1393/splunk_unixtime.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"753\" data-original-width=\"1393\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3ZdvWoxgm2ms2EGHm1KtqhIjk6wXHFWTQcCvAKu5kcTj6CoTbGlFSqimlGc44KhJZA0PChTeHRa7rpV_ldaR3A_ySfLX-QlRubcYEkxkLdpHCC8b9SZWCOvX3zWaUq967d4kKLTtDISUguynHooUUVqALgEimX5CqWxz79vzhmXtvgY8oCVkCv0_f9bGy/s16000/splunk_unixtime.png\" /></a></div><div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/02/filebeat-processors-6th.html\">Beat processors - 6th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/04/logstash-ruby-8th.html\">Logstash 필터 ruby - 8th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/05/filebeat-90.html\">Filebeat 9.0의 변화</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/09/convert-ip-to-decimal.html\">convert ip to decimal</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/10/key-value.html\" target=\"\">엘라스틱의 key-value 처리</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/09/filebeat.html\">Filebeat 웹 로그 모듈 버그?</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/06/processors-registereddomain.html\" target=\"\">도메인 정규화 Processor: registered_domain</a></li></ul></div></div>",
        "contentSnippet": "audit.log 연동.\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n  - copy_fields:\n      fields:\n        - from: message\n          to: message2\n  - replace:\n      fields:\n        - field: \"message2\"\n          pattern: \"\\\"\"\n          replacement: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var list = evt.Get(\"message2\").split(\" \");\n          for (var i in list) {\n            var key = list[i].split(\"=\")[0];\n            var val = list[i].split(\"=\")[1];\n            evt.Put(key, val)\n          }\n        }\n  - drop_fields:\n      fields: \"message2\"\n  - dissect:\n      field: \"msg\"\n      tokenizer: \"%{}(%{timestamp}:%{}\"\n      target_prefix: \"\"\n\n\n\n\n{\n  \"@timestamp\": \"2025-05-02T08:39:45.009Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"timestamp\": \"1745768855.270\",\n  \"type\": \"NETFILTER_CFG\",\n  \"msg\": \"audit(1745768855.270:63):\",\n  \"table\": \"filter\",\n  \"family\": \"10\",\n  \"entries\": \"0\",\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"\n}\n{\n  \"@timestamp\": \"2025-05-02T08:39:45.009Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"arch\": \"c000003e\",\n  \"pid\": \"1336\",\n  \"exe\": \"/usr/bin/kmod\",\n  \"key\": \"(null)\",\n  \"success\": \"yes\",\n  \"a0\": \"1e2da20\",\n  \"a1\": \"1d75\",\n  \"exit\": \"0\",\n  \"ppid\": \"1335\",\n  \"ses\": \"4294967295\",\n  \"subj\": \"system_u:system_r:insmod_t:s0\",\n  \"auid\": \"4294967295\",\n  \"gid\": \"0\",\n  \"fsuid\": \"0\",\n  \"egid\": \"0\",\n  \"sgid\": \"0\",\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",\n  \"syscall\": \"175\",\n  \"a3\": \"1e2a500\",\n  \"uid\": \"0\",\n  \"timestamp\": \"1745768855.720\",\n  \"type\": \"SYSCALL\",\n  \"a2\": \"41a2d8\",\n  \"items\": \"0\",\n  \"euid\": \"0\",\n  \"suid\": \"0\",\n  \"msg\": \"audit(1745768855.720:63):\",\n  \"fsgid\": \"0\",\n  \"tty\": \"(none)\",\n  \"comm\": \"modprobe\"\n}\n\n\n\n\nunixtime을 date 포맷으로 바꿔야 한다. 예전 같으면 한참 헤맸겠지?\n\n\n\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n  - copy_fields:\n      fields:\n        - from: message\n          to: message2\n  - replace:\n      fields:\n        - field: \"message2\"\n          pattern: \"\\\"\"\n          replacement: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var list = evt.Get(\"message2\").split(\" \");\n          for (var i in list) {\n            var key = list[i].split(\"=\")[0];\n            var val = list[i].split(\"=\")[1];\n            evt.Put(key, val)\n          }\n        }\n  - drop_fields:\n      fields: \"message2\"\n  - dissect:\n      field: \"msg\"\n      tokenizer: \"%{}(%{timestamp}:%{}\"\n      target_prefix: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var timestamp = new Date(evt.Get(\"timestamp\") * 1000)\n          evt.Put(\"@timestamp\", timestamp)\n        }\n\n\n\n\n{\n  \"@timestamp\": \"2025-04-27T15:47:35.270Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\",\n  \"timestamp\": \"1745768855.270\",\n  \"type\": \"NETFILTER_CFG\",\n  \"msg\": \"audit(1745768855.270:63):\",\n  \"table\": \"filter\",\n  \"family\": \"10\",\n  \"entries\": \"0\"\n}\n{\n  \"@timestamp\": \"2025-04-27T15:47:35.720Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"arch\": \"c000003e\",\n  \"items\": \"0\",\n  \"pid\": \"1336\",\n  \"sgid\": \"0\",\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",\n  \"auid\": \"4294967295\",\n  \"uid\": \"0\",\n  \"exit\": \"0\",\n  \"a0\": \"1e2da20\",\n  \"fsgid\": \"0\",\n  \"key\": \"(null)\",\n  \"timestamp\": \"1745768855.720\",\n  \"a1\": \"1d75\",\n  \"a3\": \"1e2a500\",\n  \"euid\": \"0\",\n  \"fsuid\": \"0\",\n  \"type\": \"SYSCALL\",\n  \"ppid\": \"1335\",\n  \"ses\": \"4294967295\",\n  \"comm\": \"modprobe\",\n  \"msg\": \"audit(1745768855.720:63):\",\n  \"success\": \"yes\",\n  \"egid\": \"0\",\n  \"exe\": \"/usr/bin/kmod\",\n  \"subj\": \"system_u:system_r:insmod_t:s0\",\n  \"syscall\": \"175\",\n  \"a2\": \"41a2d8\",\n  \"gid\": \"0\",\n  \"suid\": \"0\",\n  \"tty\": \"(none)\"\n}\n\n\n\n\n참고로 스플렁크는 이렇게.\n\n\n\n\n\n관련 글\n\nBeat processors - 6th\nLogstash 필터 ruby - 8th\nFilebeat 9.0의 변화\nconvert ip to decimal\n엘라스틱의 key-value 처리\nFilebeat 웹 로그 모듈 버그?\n도메인 정규화 Processor: registered_domain",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-981124766619140623",
        "isoDate": "2025-05-02T08:42:00.003Z"
      },
      {
        "title": "Filebeat 9.0의 변화",
        "link": "https://kangmyounghun.blogspot.com/2025/05/filebeat-90.html",
        "pubDate": "2025-05-02T03:42:00.005Z",
        "author": "강명훈",
        "content": "<div>audit.log 연동.</div><div><br /></div><div><div style=\"background-color: #f6f9fc; color: #1d2a3e; font-family: &quot;Roboto Mono&quot;, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 21px; white-space: pre;\"><div><span style=\"color: #a11262;\">filebeat.inputs:</span></div><div><span style=\"color: #a11262;\">-</span> <span style=\"color: #047471;\">type: filestream</span></div><div>&nbsp; <span style=\"color: #111c2c;\">id:</span> <span style=\"color: #111c2c;\">my-filestream-id</span></div><div>&nbsp; <span style=\"color: #111c2c;\">enabled:</span> <span style=\"color: #111c2c;\">true</span></div><div>&nbsp; <span style=\"color: #111c2c;\">paths:</span></div><div>&nbsp; &nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">d:\\test.log</span></div><br /><div><span style=\"color: #a11262;\">output.console:</span></div><div>&nbsp; <span style=\"color: #047471;\">pretty: true</span></div><br /><div><span style=\"color: #a11262;\">processors:</span></div><div>&nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">include_fields:</span></div><div>&nbsp; &nbsp; &nbsp; <span style=\"color: #111c2c;\">fields:</span> <span style=\"color: #111c2c;\">\"message\"</span></div></div></div><div><br /></div><div><span><a name='more'></a></span>실행은 됐는데 데이터를 가져오지 못한다.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhoR7SEyH4u7OPnhrrKh1rBTVuUUtHkEG7s_EjBsQnFrzD9rsxkuADdbIUyo2HhM_K9rh-7Itm-5uNlOXOKt8sR1FOVj3v2quJrhCOjnJPlBZH8e0gewX-ebsOLFJLkaNmagwMIuYLb4LDDkZu4c0Ud7DkusroAA_0V-pUhU8-rjgktGWgwX5CpUHGDv5AW/s1280/filebeat_log.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhoR7SEyH4u7OPnhrrKh1rBTVuUUtHkEG7s_EjBsQnFrzD9rsxkuADdbIUyo2HhM_K9rh-7Itm-5uNlOXOKt8sR1FOVj3v2quJrhCOjnJPlBZH8e0gewX-ebsOLFJLkaNmagwMIuYLb4LDDkZu4c0Ud7DkusroAA_0V-pUhU8-rjgktGWgwX5CpUHGDv5AW/s16000/filebeat_log.png\" /></a></div><div><br /></div><div><a href=\"https://www.elastic.co/docs/reference/beats/filebeat/command-line-options#global-flags\" target=\"_blank\">디버그 모드</a><span style=\"font-size: x-small;\">(<span style=\"font-family: courier;\">filebeat.exe -e -d \"*\"</span>)</span> 실행.</div><div><br /></div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFJCvQ5RJUkY-qJumLvUwq8Fvv4Vf3NF-G-Cft3TyqNRx5WaW-BViWwVcGxXk5n6fZ5zZ-k9OucuqUsmxJF3zAC3LXY-Z-arG-2fhHOwX2KAQ3irZ5vB6kd6ELJDOsmRtrB_NPuhvxbAR26Jf9S-UCi4KbOtfepnIsXZBDhzy5rpIWPmUTgAULbk1HDa0N/s1280/filebeat_debug.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFJCvQ5RJUkY-qJumLvUwq8Fvv4Vf3NF-G-Cft3TyqNRx5WaW-BViWwVcGxXk5n6fZ5zZ-k9OucuqUsmxJF3zAC3LXY-Z-arG-2fhHOwX2KAQ3irZ5vB6kd6ELJDOsmRtrB_NPuhvxbAR26Jf9S-UCi4KbOtfepnIsXZBDhzy5rpIWPmUTgAULbk1HDa0N/s16000/filebeat_debug.png\" /></a></div><br />파일 사이즈가 너무 작다고? 8.18까지 잘 되던 게 안 되는 거 보니 9.0에서 변화가 있는 모양. 릴리즈 노트를 살펴보니 파일 수집 방식이 변경됐다. <a href=\"https://www.elastic.co/docs/release-notes/beats/breaking-changes\" target=\"_blank\">1MB 이상일 때만 수집 가능</a>하다고.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVoS-b3Qfa8YDGw-DVmaXSA8uh3v4vwvYwlcN6J1oW_XLTpdkQIP3-ELipMu404etZ9WgygimY8oehq9GYwWklZc2rdJu23vVktHv6O06c1PIH08cOjYaZeiihpnrd6obo3U7YWQDVKtp6mHeEQ5uZhbdLm2z3lFLNQC0xmb0r66B31ctuyNHr6uwUgDU6/s1280/beat9_release.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"676\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVoS-b3Qfa8YDGw-DVmaXSA8uh3v4vwvYwlcN6J1oW_XLTpdkQIP3-ELipMu404etZ9WgygimY8oehq9GYwWklZc2rdJu23vVktHv6O06c1PIH08cOjYaZeiihpnrd6obo3U7YWQDVKtp6mHeEQ5uZhbdLm2z3lFLNQC0xmb0r66B31ctuyNHr6uwUgDU6/s16000/beat9_release.png\" /></a></div><div><br /></div>설정 변경.<br /><div><br /></div><div><div style=\"color: #1d2a3e; font-family: &quot;Roboto Mono&quot;, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; white-space: pre;\"><div style=\"background-color: #f6f9fc; line-height: 21px;\"><div><span style=\"color: #a11262;\">filebeat.inputs:</span></div><div><span style=\"color: #a11262;\">-</span> <span style=\"color: #047471;\">type: filestream</span></div><div>&nbsp; <span style=\"color: #111c2c;\">id:</span> <span style=\"color: #111c2c;\">my-filestream-id</span></div><div>&nbsp; <span style=\"color: #111c2c;\">enabled:</span> <span style=\"color: #111c2c;\">true</span></div><div>&nbsp; <span style=\"color: #111c2c;\">paths:</span></div><div>&nbsp; &nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">d:\\test.log</span></div><div>&nbsp; <span style=\"color: #111c2c;\">prospector.scanner.fingerprint.enabled:</span> <span style=\"color: #111c2c;\">false</span></div><br /><div><span style=\"color: #a11262;\">output.console:</span></div><div>&nbsp; <span style=\"color: #047471;\">pretty: true</span></div><br /><div><span style=\"color: #a11262;\">processors:</span></div><div>&nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">include_fields:</span></div><div>&nbsp; &nbsp; &nbsp; <span style=\"color: #111c2c;\">fields:</span> <span style=\"color: #111c2c;\">\"message\"</span></div></div></div></div>\n<div><pre><code><div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T03:41:27.182Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T03:41:27.182Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\"</div><div>}</div></div></code></pre></div>\n<div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/04/elasticsearch-90.html\">Elasticsearch 9.0의 변화</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/05/beat-processors-7th.html\">Beat processors - 7th</a></li></ul></div></div>",
        "contentSnippet": "audit.log 연동.\n\n\n\nfilebeat.inputs:\n- type: filestream\n  id: my-filestream-id\n  enabled: true\n  paths:\n    - d:\\test.log\n\noutput.console:\n  pretty: true\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n\n\n\n실행은 됐는데 데이터를 가져오지 못한다.\n\n\n\n\n\n디버그 모드(filebeat.exe -e -d \"*\") 실행.\n\n\n\n파일 사이즈가 너무 작다고? 8.18까지 잘 되던 게 안 되는 거 보니 9.0에서 변화가 있는 모양. 릴리즈 노트를 살펴보니 파일 수집 방식이 변경됐다. 1MB 이상일 때만 수집 가능하다고.\n\n\n\n\n설정 변경.\n\n\n\nfilebeat.inputs:\n- type: filestream\n  id: my-filestream-id\n  enabled: true\n  paths:\n    - d:\\test.log\n  prospector.scanner.fingerprint.enabled: false\n\noutput.console:\n  pretty: true\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n\n\n\n\n{\n  \"@timestamp\": \"2025-05-02T03:41:27.182Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"\n}\n{\n  \"@timestamp\": \"2025-05-02T03:41:27.182Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\"\n}\n\n\n\n\n관련 글\n\nElasticsearch 9.0의 변화\nBeat processors - 7th",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-1446608482965908543",
        "isoDate": "2025-05-02T03:42:00.005Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": [
      {
        "title": "상권을 이기는 작은 가게의 성공 법칙 | 임상진",
        "link": "https://sungjk.github.io/2025/05/04/dailybeer.html",
        "pubDate": "2025-05-04T00:00:00+00:00",
        "content": "\n            \n            &lt;h1 id=&quot;함께-하고-싶은-가게&quot;&gt;함께 하고 싶은 가게&lt;/h1&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2025/05/04/dailybeer.png&quot; alt=&quot;dailybeer&quot; title=&quot;dailybeer&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;생활맥주, 이 가게에서 일 해보고 싶다.&lt;/p&gt;\n\n&lt;p&gt;최근에 동료와 점심을 먹다가 이런 질문을 던졌다. “지금 하고 있는 일을 안한다면 어떤 일을 하고 싶으세요?” 이 질문을 던졌던 이유는 이 책을 읽고 나서 들었던 생각 때문이다. 책을 읽는 내내 ‘이 가게에서 일 해보고 싶다’는 생각이 들었다. 외식업 뿐만 아니라 요리에 대해서도 아는게 없는데, 정말 많은걸 배울 수 있는 환경일 것 같다는 생각과 생활맥주 브랜드의 가맹을 내고 싶다는 마음이 들었다.&lt;/p&gt;\n\n&lt;p&gt;여의도 10평 가게에서 시작해서 국내 대표 수제 맥주 프랜차이즈로 자리 잡고, 지금은 글로벌 진출을 시도하고 있는 생활 맥주. 가맹 사업을 통해 수수료 장사를 취하는 수많은 프랜차이즈들과 다르게, 수십개의 직영점을 운영하면서 변화하는 외식 트렌드에 맞게 지속적인 성장을 추구하고 가맹점에게 사업의 성공을 위해 사업 아이템, 노하우 등을 제공하는 모습도 인상 깊었다. 그래서 이 브랜드가 더 잘 되어서 시장의 성장에 영향을 주고 이런 사업가들이 많이 나왔으면 좋겠다는 생각으로 이어졌다.&lt;/p&gt;\n\n&lt;p&gt;이 책에서 인상 깊었던 문장 중 하나는 ‘가맹점은 판매하는 것이 아니라 브랜드의 동업자를 늘리는 일’ 이라는 말이었다. 그 말 한 줄에 사업가로서의 철학, 책임감, 그리고 동반자 의식이 모두 담겨 있다고 느꼈다. 단지 브랜드를 확장하는 데에만 집중하는 것이 아니라, 함께 성장하고 함께 살아남는 구조를 고민하는 브랜드라는 점. 만약 창업을 하게 된다면, 단순히 수익만 좇는 것이 아니라 내가 속한 업계와 사회에 어떤 가치를 남길 수 있을지를 더 깊이 고민하게 될 것 같다.&lt;/p&gt;\n\n&lt;p&gt;책을 덮고 나서도 한참 동안 생각에 잠겼다. ‘지속 가능한 브랜드’, ‘대체 불가한 플랫폼’, ‘전 세계인이 즐기는 맥주 공간’. 이런 거창한 목표들이 단순히 꿈이 아니라 아주 구체적인 계획과 실행으로 이어졌다는 사실은, 내게도 ‘내 삶을 어떻게 설계할 것인가’ 에 대한 자극을 주었다.&lt;/p&gt;\n\n&lt;p&gt;사실 이 책을 사기 전에 생활맥주에 가본 적이 없었다. 술을 찾아서 먹는 사람은 아닌지라;; 길 가다 간판 한 두 번 마주하는 정도였다. 그런데 내가 이 책을 읽는다고 하니 가게를 가보지도 않고 글로 배운다고 옆에서 사람들이 웃었다(듣고 보니 나도 웃겼음). 아무튼.. 책을 읽는 내내 내가 너무너무 닮고 싶은 창업가의 상과 일치해서 가슴 뛰기도 하고 배울 점도 많아서 단순히 외식업 종사자가 아니더라도 기업가 정신에 대해 알고 싶다면 이 책을 읽어보기를 추천한다. 다 읽고 맨 앞장부터 다시 훑어보는데 매장에서 사용할 수 있는 무료 쿠폰이 있는걸 발견했다! 그냥 덮었다면 몰랐을 것을.. 조금 감동했다. 책에 소개된 생활맥주 브랜드가 실제 매장에서도 느껴지는지 너무 궁금하다. 조만간 첫 고객으로서 방문할테니 기대하겠습니다!&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2025/05/04/dailybeer-coupon.png&quot; alt=&quot;dailybeer-coupon&quot; title=&quot;dailybeer-coupon&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;기업-분석&quot;&gt;기업 분석&lt;/h1&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;국내 수제맥주 프랜차이즈 1위 브랜드. 현재 운영사는 ㈜데일리비어. 창업주 겸 대표이사인 임상진 대표&lt;/li&gt;\n  &lt;li&gt;2014년 5월. 서울 여의도에 1호점을 개점&lt;/li&gt;\n  &lt;li&gt;2024년 8월. 기준 전국 약 328개의 매장 보유. 이 중 약 15%(50여개) 이상의 직영점 운영중&lt;/li&gt;\n  &lt;li&gt;2021년 8월. LB인베스트먼트 등으로부터 70억 원 규모의 시리즈 A 투자유치 완료&lt;/li&gt;\n  &lt;li&gt;2023년. KB증권과 코스닥 상장을 위한 대표주관 계약을 체결하여 IPO 준비중&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;마케팅-전략&quot;&gt;마케팅 전략&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;상생 브랜딩과 차별화: “맥주덕후의 팬”을 자처하며, 수제맥주 문화 저변 확대에 초점을 맞춘 브랜딩. 단순히 브랜드 인지도만 높이기보다 “맥주를 사랑하는 사람들을 위해 무엇을 할 수 있을까”를 고민하며, 국내 소규모 양조장들을 발굴해 소개하는 캠페인(‘마시자! 지역맥주’ 프로젝트) 등을 진행. 지역 브루어리와의 상생이면서 브랜드만의 차별화 포인트. 또한 “맥주에 소주를 무료로 타준다”는 파격 서비스까지 도입하여 화제를 모았는데, 이 역시 독특한 고객경험 제공과 입소문 효과를 노린 전략. 브랜딩 철학은 “생활맥주는 맥주 덕후를 위해 태어난 브랜드” 라는 메시지로 일관되게 전달되었고, 수제맥주 애호가층의 충성도를 높이는 성과.&lt;/li&gt;\n  &lt;li&gt;오프라인 매장 전략 (직영점+가맹점 모델): 직영점을 적극 활용하는 독특한 운영 전략. 전체 매장의 약 15~17%에 달하는 직영점을 통해 새로운 메뉴나 서비스를 먼저 테스트하고 검증한 후 가맹점에 적용. “대부분 프랜차이즈 본부는 위험을 피하기 위해 직영점을 잘 안 내지만, 우리는 본사 매출의 65%가 직영에서 나올 정도로 직접 뛰고 있다”고 언급. “본사도 창업한다”는 접근법은 가맹점주들에게 본사의 노하우 전수를 용이하게 하고, 가맹점 모집 시 신뢰도를 높이는 효과. 또한 가맹점주 교육, 운영 컨설팅, 지역 상권분석 지원 등을 체계화하여 가맹점과 본사가 함께 성장하는 구조를 지향. 이런 이유로 가맹점 평균 매출 및 낮은 폐점률 측면에서 업계 상위권을 유지하고 있다는 평가&lt;/li&gt;\n  &lt;li&gt;SNS 및 디지털 마케팅: 젊은 층 공략을 위해 소셜 미디어와 콘텐츠 마케팅도 적극 활용. 공식 유튜브 채널을 개설해 맥주 상식이나 매장 브이로그를 공유하고, 인스타그램과 페이스북 등을 통해 신제품 출시 소식, 이벤트 안내, 소비자 참여형 캠페인을 전개. 예를 들어, 10주년 기념 해시태그 이벤트나 인증샷 챌린지 등을 열어 온라인 바이럴 유도. 또한 월간 뉴스레터를 통해 가맹 희망자 대상 창업 정보와 브랜드 소식을 전하고, 배달 앱 및 위치기반 앱과 제휴 프로모션도 시행하는 등 디지털 채널에서의 고객 접점을 넓힘. 이러한 멀티채널 홍보 전략으로 MZ세대 소비자들의 관심을 끌고 브랜드 충성도를 높임&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;5년간-재무제표20192023&quot;&gt;5년간 재무제표(2019~2023)&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;매출액: 2019년과 2020년에는 연간 매출 약 80~90억 원대로 추정. 코로나19 확산에도 매출 규모를 비교적 잘 유지. 2021년 매출은 약 101억 원으로 소폭 증가에 그쳤으나, 전년 대비 정체된 수준. 그러나 2022년 매출 203억 원으로 전년 대비 2배 증가하며 큰 도약을 이루었고, 2023년에는 약 295억 원으로 또다시 45% 이상 급증. 이로써 5년 전과 비교하면 매출규모가 3배 이상으로 성장&lt;/li&gt;\n  &lt;li&gt;영업이익: 2020년까지 비교적 안정적 이익을 내오다가, 2021년에 영업손실 -4억 원을 기록하며 일시적인 적자. 이는 사회적 거리두기로 매장 영업이 어려웠던 영향. 하지만 2022년 영업이익 24억 원으로 흑자전환에 성공했고, 2023년에는 영업이익 44억 원으로 이익 규모 확대. 영업이익률도 2021년 -4% 수준에서 2022년 11.8%, 2023년 14~15% 수준으로 개선되며 수익성이 크게 향상&lt;/li&gt;\n  &lt;li&gt;당기순이익: 최종 순이익 역시 2021년까지는 부진. 2020년에는 순이익을 간신히 내거나 보합 수준이었으나, 2021년 약 -4.3억 원의 당기순손실을 기록. 이후 매출이 뛰었던 2022년에는 순이익 약 16억 원으로 흑자전환했고, 2023년에도 약 14억 원 내외의 순이익을 거둔 것으로 추정. 다만 2023년의 순이익은 영업이익에 비해 낮은 편인데, 이는 양조장 인수 및 설비투자에 따른 감가상각 비용 증가와 이자비용 증가 등에 기인한다. 실제로 데일리비어의 이자비용은 2022년 약 9.8억 원에서 2023년 약 14.5억 원으로 1년 새 47% 증가하여 순이익을 일부 잠식&lt;/li&gt;\n  &lt;li&gt;재무구조: 2021년 투자유치로 자본금을 확충한 후, 양조장 인수로 자산과 부채 규모가 모두 증가. 2023년 말 기준 자본총계는 약 200억 원에 이르며, 부채비율도 이전 대비 상승. 다만 영업활동 현금흐름이 개선되고 있어 전반적인 재무 안정성은 양호한 편. 회사는 축적된 이익과 투자자금으로 설비를 확보하면서도 부채를 관리하여 성장과 안정의 균형을 추구&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;연도별-매출-추이yearrevenueyoy&quot;&gt;연도별 매출 추이(Year/Revenue/YoY):&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;2021: 101억원 +19%&lt;/li&gt;\n  &lt;li&gt;2022: 204억원\t+102%&lt;/li&gt;\n  &lt;li&gt;2023: 282억원\t+38%&lt;/li&gt;\n  &lt;li&gt;2024: 400억원(proj) +42%&lt;/li&gt;\n  &lt;li&gt;2025: 500억원(proj) +25%&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;연도별-영업이익-추이yearprofityoy&quot;&gt;연도별 영업이익 추이(Year/Profit/YoY):&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;2021: -4억원 -150% 이상 (코로나19 영향)&lt;/li&gt;\n  &lt;li&gt;2022: 24억원 +700% 이상 (수제맥주 양조장 인수, 직영점 확장 등)&lt;/li&gt;\n  &lt;li&gt;2023: 44억원 +83%&lt;/li&gt;\n  &lt;li&gt;2024: 65억원(proj) +48% (상장 추진과 브랜드 확장 전략 등)&lt;/li&gt;\n  &lt;li&gt;2025: 90억원(proj) +38%&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;인상-깊었던-구절&quot;&gt;인상 깊었던 구절&lt;/h1&gt;\n\n&lt;h3 id=&quot;사업에-실패하는-창업가들의-공통점&quot;&gt;사업에 실패하는 창업가들의 공통점&lt;/h3&gt;\n\n&lt;ol&gt;\n  &lt;li&gt;트렌드에 편승해서 성공하려는 마음&lt;/li&gt;\n  &lt;li&gt;이윤 추구를 최우선으로 하는 마음&lt;/li&gt;\n  &lt;li&gt;사업을 통해 자아실현을 하고자 하는 마음가짐&lt;/li&gt;\n  &lt;li&gt;자유를 추구하는 마음으로 사업을 시작하는 마음가짐&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h3 id=&quot;도요타의-카이젠-정신&quot;&gt;도요타의 ‘카이젠 정신’&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;‘개선’ 이라는 의미의 일본어 ‘카이젠’과 ‘정신’이 합쳐진 말&lt;/li&gt;\n  &lt;li&gt;더 나아기지 위해 현실에 안주하지 않고 끊임없이 개선에 개선을 거듭하는 경영 철학&lt;/li&gt;\n  &lt;li&gt;성공한 기업가는 산업과 소비자를 리드하기 위해 끊임없이 개선된 서비스를 선보인다. 창업가는 사업이 안정화되면 일의 일부를 적임자에게 위임하고 다음 단계로 올라가기 위해 전진해야만 한다. 창업가가 멈추면 기업이 멈추기 때문이다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;외식업-생존&quot;&gt;외식업 생존&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;동네 음식점은 인사와 대화로 대부분의 문제를 해결할 수 있다&lt;/li&gt;\n  &lt;li&gt;사장은 내 가게를 다시 찾아준 손님을 기억하고 있다는 사실을 반드시 알려야 한다&lt;/li&gt;\n  &lt;li&gt;외식 사업을 오래 지속하려면 새로운 손님을 다시 오게 하는 것이 더 중요하다&lt;/li&gt;\n  &lt;li&gt;성공 DNA는 바로 손님에게 진정성 있게 다가가는 사장님의 마음가짐이다&lt;/li&gt;\n  &lt;li&gt;부자가 되고 싶다면 경제평론가의 책이 아닌 부자의 책을 읽어야 한다. 마찬가지로 사업에 성공하고 싶다면 성공한 사업가의 책을 읽어야 한다&lt;/li&gt;\n  &lt;li&gt;같은 비즈니스 모델로 사업을 운영해 본 경험과, 그 모델로 성공한 경험이 있는 ‘진짜 전문가’에게 조언을 받아라&lt;/li&gt;\n  &lt;li&gt;창업을 하면 대부분 빠른 성장을 추구하는데 그것보다 중요한 것이 지속적인 성장이다&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;작은-가게의-성공-법칙&quot;&gt;작은 가게의 성공 법칙&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;경쟁하지 말고 독점하라 - 제로 투 원&lt;/li&gt;\n  &lt;li&gt;더 좋기보다는 최초가 되는 편이 낫다 - 마케팅 불변의 법칙&lt;/li&gt;\n  &lt;li&gt;사업에 차별성을 부여한다는 것을 너무 어렵게만 생각할 필요는 없다. ‘경쟁하지 않는다’ 는 원칙을 세우고, ‘경쟁력’ 보다 ‘차별성’ 에 중점을 두어야 한다&lt;/li&gt;\n  &lt;li&gt;공간 브랜딩을 위해서는 무엇보다 사업의 본질, 정체성을 분명히 해야 한다. ‘무엇을 위한 공간인가?가 가장 먼저 정의되어야 한다. 생활맥주는 사업 시작부터 ‘수제 맥주를 파는 매장’이 아닌 ‘수제 맥주를 즐기는 공간’ 으로 기획되었다&lt;/li&gt;\n  &lt;li&gt;메뉴의 종류가 많아지면 구입해야 할 식재료의 종류가 많아지고, 이것은 곧 복잡한 재고 관리를 의미한다&lt;/li&gt;\n  &lt;li&gt;작게 창업해서 크게 확장하라&lt;/li&gt;\n  &lt;li&gt;작은 브랜드일수록 고비용의 유명 인플루언서 마케팅이나 PPL 보다는 매장 브랜딩과 단골 만들기에 집중해야 한다&lt;/li&gt;\n  &lt;li&gt;외생 변수로 인한 악영향을 최소화하고, 사업 포트폴리오를 확장하기 위해서는 평소의 고객이 브랜드의 어떤 점을 사랑하고, 어떤 점을 불편하게 생각하는지에 대해 지나치다 싶을 만큼 관심을 가져야 한다&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;프랜차이즈&quot;&gt;프랜차이즈&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;가맹점은 판매하는 것이 아니다. 브랜드의 동업자를 늘리는 일이다&lt;/li&gt;\n  &lt;li&gt;수익을 늘리기 위해서 질이 조금 떨어지는 제품을 대고 싶은 유혹에 빠질 수도 있다. 이렇게 되면 가맹점은 손해를 볼 것이고, 결국 그 손해는 나에게 돌아온다&lt;/li&gt;\n  &lt;li&gt;기업가 정신은 우리 생활에 꼭 필요한 사업을 통해 ‘우리의 이익’ 을 추구하는 정신이다. 또한, 새로운 사업을 개척하여 새로운 문화와 새로운 라이프 스타일, 새로운 가치와 새로운 고객을 창출해야 한다&lt;/li&gt;\n  &lt;li&gt;손님을 끌어당기는 것도 중요하지만, 더 중요한 것은 손님이 다시 오게 하는 것이다. 사업에 있어 ‘지속성’은 매우 중요한 요소다. 신규 손님으로 유지되는 대박집으로는 단골이 많은 백년식당을 넘어설 수 없다. 백년식당으로 성공하겠다 정도의 각오 없이는 음식점을 시작하지 않는 편이 낫다&lt;/li&gt;\n  &lt;li&gt;프랜차이즈 브랜드가 오래가기 위해서는 스스로 끊임없이 변화해야 한다는 것이다. 상품 개발부터 디자인 리뉴얼까지 브랜드가 끊임없이 발전해야만 오래 지속될 수 있다&lt;/li&gt;\n  &lt;li&gt;브랜드의 정체성은 고수하되 소비자와 쌍방향 소통하며 판매 전략과 서비스를 여러 형태로 변형시킨다&lt;/li&gt;\n  &lt;li&gt;프랜차이즈의 정의는 ‘본사가 가맹점에게 사업의 성공을 위해 사업 아이템, 노하우, 사업 시스템을 포함해 브랜드 사업권을 제공하고, 가맹점은 이에 대한 대가를 금전적으로 지불하는 사업 모델’ 이라고 생각한다&lt;/li&gt;\n  &lt;li&gt;백 번을 교육하는 것보다 업무를 단순화하는 것이 실수를 줄이는 데 더 효율적이기 때문이다&lt;/li&gt;\n  &lt;li&gt;Keep your eyes open. Get inspired. Don’t copy(열린 마음으로 세상을 바라보고, 영감을 얻어라. 절대 카피하지 말라) - 폴 스미스(Paul Smith)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;외식업자의-꿈&quot;&gt;외식업자의 꿈&lt;/h3&gt;\n\n&lt;p&gt;“인생이 꿈을 만드는 것이 아니다. 꿈이 인생을 만드는 것이다.”&lt;/p&gt;\n\n&lt;p&gt;메이저리그의 역사를 새롭게 쓰고 있는 현재진행형 야구 레전드인 오타니 쇼헤이의 말이다. 이 말을 떠올릴 때마다 인생을 원하는 방향으로 이끌기 위해서 꿈을 꾸는 것이 얼마나 중요한 일인지를 새삼 생각하게 된다. 하루하루 눈앞의 일을 닥치는 대로 처리하는 것만으로는 원하는 목적지에 도착하기 어렵다. 사업가로서 꿈을 이루고 싶다면 목적지를 정확히 설정하고 그 방향을 위해 현재를 움직여야 한다.&lt;/p&gt;\n\n&lt;p&gt;생활맥주를 통해 내가 이루고 싶은 꿈은 세 가지였다. ‘지속 가능한 브랜드를 만들겠다’는 것, ‘대체 불가한 플랫폼을 만들겠다’는 것 그리고 ‘글로벌 맥주 브랜드로 성공하겠다’는 것이었다. 외식 업계에서 지속 가능한 브랜드로 성공하기 위해서는 파트너와 함께 성장하는 것이 중요했고, 대체 불가한 플랫폼으로 살아남기 위해서는 독보적인 시스템이 필요했다. 그리고 글로벌 맥주 브랜드로 성공하기 위해서 끊임없이 해외 진출의 기회를 모색했다. 생활맥주를 시작한 2014년부터 나는 이 꿈을 이루기 위해 부지런하게 발품을 팔며, 지금의 생활맥주를 만들었다. 생활맥주를 시작하면서 품은 꿈이 지난 11년 동안 내 삶을 이끌었다. 만약 내가 그저 생활 맥주를 통해 부를 축적하는 데만 몰두했다면, 생활맥주는 지금 사라지고 없을지도 모른다. 생활맥주 다점포 사업자로서 매장 몇 개를 운영하는 것에 만족했을 수도 있고, 새로운 사업 아이템을 찾아 헤매고 있을 수도 있다.&lt;/p&gt;\n\n&lt;p&gt;나는 여전히 꿈꾸고 있다. 생활맥주는 이제 막 해외 진출에 발걸음을 뗀 어린아이과 같은 기업이지만, 나는 머지않아 전 세계 곳곳에서 생활맥주를 만날 수 있기를 꿈꾼다. 은퇴 후에는 전 세계를 여행하며 세계 각지의 생활맥주를 찾아다니며 개성 넘치는 맥주를 마시는 상상을 한다. 나뿐만이 아니다. 외식업을 시작하는 모든 사업가가 꿈꾸기를 바란다. 국내 외식 업계에서 가장 필요한 것은 꿈을 성취하기 위해 노력하는 기업가들이다. 나는 대한민국의 모든 외식 사업가들이 눈앞의 이익을 추구하기보다는 지속적으로 성장할 수 있는 브랜드를 만드는 꿈을 품기를 바라고, 산업에 기여할 수 있는 브랜드를 만드는 꿈을 꾸기를 바란다. 사업은 궁극적으로 소비자와 세상을 이롭게 하는 일이다. 더 많은 외식 사업가들이 사업을 통해 더 많은 사람을 행복으로 이끄는 꿈을 설계하기를 바라고, 그 꿈을 만드시 이루길 바란다. 나 역시 ‘전 세계의 맥주 문화를 이끄는 외식기업으로 성공하겠다’ 는 꿈을 이루기 위해 더 열심히 나아가고자 한다.&lt;/p&gt;\n\n            \n          ",
        "contentSnippet": "<h1 id=\"함께-하고-싶은-가게\">함께 하고 싶은 가게</h1>\n\n<p><img src=\"/images/2025/05/04/dailybeer.png\" alt=\"dailybeer\" title=\"dailybeer\" class=\"center-image\" /></p>\n\n<p>생활맥주, 이 가게에서 일 해보고 싶다.</p>\n\n<p>최근에 동료와 점심을 먹다가 이런 질문을 던졌다. “지금 하고 있는 일을 안한다면 어떤 일을 하고 싶으세요?” 이 질문을 던졌던 이유는 이 책을 읽고 나서 들었던 생각 때문이다. 책을 읽는 내내 ‘이 가게에서 일 해보고 싶다’는 생각이 들었다. 외식업 뿐만 아니라 요리에 대해서도 아는게 없는데, 정말 많은걸 배울 수 있는 환경일 것 같다는 생각과 생활맥주 브랜드의 가맹을 내고 싶다는 마음이 들었다.</p>\n\n<p>여의도 10평 가게에서 시작해서 국내 대표 수제 맥주 프랜차이즈로 자리 잡고, 지금은 글로벌 진출을 시도하고 있는 생활 맥주. 가맹 사업을 통해 수수료 장사를 취하는 수많은 프랜차이즈들과 다르게, 수십개의 직영점을 운영하면서 변화하는 외식 트렌드에 맞게 지속적인 성장을 추구하고 가맹점에게 사업의 성공을 위해 사업 아이템, 노하우 등을 제공하는 모습도 인상 깊었다. 그래서 이 브랜드가 더 잘 되어서 시장의 성장에 영향을 주고 이런 사업가들이 많이 나왔으면 좋겠다는 생각으로 이어졌다.</p>\n\n<p>이 책에서 인상 깊었던 문장 중 하나는 ‘가맹점은 판매하는 것이 아니라 브랜드의 동업자를 늘리는 일’ 이라는 말이었다. 그 말 한 줄에 사업가로서의 철학, 책임감, 그리고 동반자 의식이 모두 담겨 있다고 느꼈다. 단지 브랜드를 확장하는 데에만 집중하는 것이 아니라, 함께 성장하고 함께 살아남는 구조를 고민하는 브랜드라는 점. 만약 창업을 하게 된다면, 단순히 수익만 좇는 것이 아니라 내가 속한 업계와 사회에 어떤 가치를 남길 수 있을지를 더 깊이 고민하게 될 것 같다.</p>\n\n<p>책을 덮고 나서도 한참 동안 생각에 잠겼다. ‘지속 가능한 브랜드’, ‘대체 불가한 플랫폼’, ‘전 세계인이 즐기는 맥주 공간’. 이런 거창한 목표들이 단순히 꿈이 아니라 아주 구체적인 계획과 실행으로 이어졌다는 사실은, 내게도 ‘내 삶을 어떻게 설계할 것인가’ 에 대한 자극을 주었다.</p>\n\n<p>사실 이 책을 사기 전에 생활맥주에 가본 적이 없었다. 술을 찾아서 먹는 사람은 아닌지라;; 길 가다 간판 한 두 번 마주하는 정도였다. 그런데 내가 이 책을 읽는다고 하니 가게를 가보지도 않고 글로 배운다고 옆에서 사람들이 웃었다(듣고 보니 나도 웃겼음). 아무튼.. 책을 읽는 내내 내가 너무너무 닮고 싶은 창업가의 상과 일치해서 가슴 뛰기도 하고 배울 점도 많아서 단순히 외식업 종사자가 아니더라도 기업가 정신에 대해 알고 싶다면 이 책을 읽어보기를 추천한다. 다 읽고 맨 앞장부터 다시 훑어보는데 매장에서 사용할 수 있는 무료 쿠폰이 있는걸 발견했다! 그냥 덮었다면 몰랐을 것을.. 조금 감동했다. 책에 소개된 생활맥주 브랜드가 실제 매장에서도 느껴지는지 너무 궁금하다. 조만간 첫 고객으로서 방문할테니 기대하겠습니다!</p>\n\n<p><img src=\"/images/2025/05/04/dailybeer-coupon.png\" alt=\"dailybeer-coupon\" title=\"dailybeer-coupon\" class=\"center-image\" /></p>\n\n<hr />\n\n<h1 id=\"기업-분석\">기업 분석</h1>\n\n<ul>\n  <li>국내 수제맥주 프랜차이즈 1위 브랜드. 현재 운영사는 ㈜데일리비어. 창업주 겸 대표이사인 임상진 대표</li>\n  <li>2014년 5월. 서울 여의도에 1호점을 개점</li>\n  <li>2024년 8월. 기준 전국 약 328개의 매장 보유. 이 중 약 15%(50여개) 이상의 직영점 운영중</li>\n  <li>2021년 8월. LB인베스트먼트 등으로부터 70억 원 규모의 시리즈 A 투자유치 완료</li>\n  <li>2023년. KB증권과 코스닥 상장을 위한 대표주관 계약을 체결하여 IPO 준비중</li>\n</ul>\n\n<h3 id=\"마케팅-전략\">마케팅 전략</h3>\n\n<ul>\n  <li>상생 브랜딩과 차별화: “맥주덕후의 팬”을 자처하며, 수제맥주 문화 저변 확대에 초점을 맞춘 브랜딩. 단순히 브랜드 인지도만 높이기보다 “맥주를 사랑하는 사람들을 위해 무엇을 할 수 있을까”를 고민하며, 국내 소규모 양조장들을 발굴해 소개하는 캠페인(‘마시자! 지역맥주’ 프로젝트) 등을 진행. 지역 브루어리와의 상생이면서 브랜드만의 차별화 포인트. 또한 “맥주에 소주를 무료로 타준다”는 파격 서비스까지 도입하여 화제를 모았는데, 이 역시 독특한 고객경험 제공과 입소문 효과를 노린 전략. 브랜딩 철학은 “생활맥주는 맥주 덕후를 위해 태어난 브랜드” 라는 메시지로 일관되게 전달되었고, 수제맥주 애호가층의 충성도를 높이는 성과.</li>\n  <li>오프라인 매장 전략 (직영점+가맹점 모델): 직영점을 적극 활용하는 독특한 운영 전략. 전체 매장의 약 15~17%에 달하는 직영점을 통해 새로운 메뉴나 서비스를 먼저 테스트하고 검증한 후 가맹점에 적용. “대부분 프랜차이즈 본부는 위험을 피하기 위해 직영점을 잘 안 내지만, 우리는 본사 매출의 65%가 직영에서 나올 정도로 직접 뛰고 있다”고 언급. “본사도 창업한다”는 접근법은 가맹점주들에게 본사의 노하우 전수를 용이하게 하고, 가맹점 모집 시 신뢰도를 높이는 효과. 또한 가맹점주 교육, 운영 컨설팅, 지역 상권분석 지원 등을 체계화하여 가맹점과 본사가 함께 성장하는 구조를 지향. 이런 이유로 가맹점 평균 매출 및 낮은 폐점률 측면에서 업계 상위권을 유지하고 있다는 평가</li>\n  <li>SNS 및 디지털 마케팅: 젊은 층 공략을 위해 소셜 미디어와 콘텐츠 마케팅도 적극 활용. 공식 유튜브 채널을 개설해 맥주 상식이나 매장 브이로그를 공유하고, 인스타그램과 페이스북 등을 통해 신제품 출시 소식, 이벤트 안내, 소비자 참여형 캠페인을 전개. 예를 들어, 10주년 기념 해시태그 이벤트나 인증샷 챌린지 등을 열어 온라인 바이럴 유도. 또한 월간 뉴스레터를 통해 가맹 희망자 대상 창업 정보와 브랜드 소식을 전하고, 배달 앱 및 위치기반 앱과 제휴 프로모션도 시행하는 등 디지털 채널에서의 고객 접점을 넓힘. 이러한 멀티채널 홍보 전략으로 MZ세대 소비자들의 관심을 끌고 브랜드 충성도를 높임</li>\n</ul>\n\n<h3 id=\"5년간-재무제표20192023\">5년간 재무제표(2019~2023)</h3>\n\n<ul>\n  <li>매출액: 2019년과 2020년에는 연간 매출 약 80~90억 원대로 추정. 코로나19 확산에도 매출 규모를 비교적 잘 유지. 2021년 매출은 약 101억 원으로 소폭 증가에 그쳤으나, 전년 대비 정체된 수준. 그러나 2022년 매출 203억 원으로 전년 대비 2배 증가하며 큰 도약을 이루었고, 2023년에는 약 295억 원으로 또다시 45% 이상 급증. 이로써 5년 전과 비교하면 매출규모가 3배 이상으로 성장</li>\n  <li>영업이익: 2020년까지 비교적 안정적 이익을 내오다가, 2021년에 영업손실 -4억 원을 기록하며 일시적인 적자. 이는 사회적 거리두기로 매장 영업이 어려웠던 영향. 하지만 2022년 영업이익 24억 원으로 흑자전환에 성공했고, 2023년에는 영업이익 44억 원으로 이익 규모 확대. 영업이익률도 2021년 -4% 수준에서 2022년 11.8%, 2023년 14~15% 수준으로 개선되며 수익성이 크게 향상</li>\n  <li>당기순이익: 최종 순이익 역시 2021년까지는 부진. 2020년에는 순이익을 간신히 내거나 보합 수준이었으나, 2021년 약 -4.3억 원의 당기순손실을 기록. 이후 매출이 뛰었던 2022년에는 순이익 약 16억 원으로 흑자전환했고, 2023년에도 약 14억 원 내외의 순이익을 거둔 것으로 추정. 다만 2023년의 순이익은 영업이익에 비해 낮은 편인데, 이는 양조장 인수 및 설비투자에 따른 감가상각 비용 증가와 이자비용 증가 등에 기인한다. 실제로 데일리비어의 이자비용은 2022년 약 9.8억 원에서 2023년 약 14.5억 원으로 1년 새 47% 증가하여 순이익을 일부 잠식</li>\n  <li>재무구조: 2021년 투자유치로 자본금을 확충한 후, 양조장 인수로 자산과 부채 규모가 모두 증가. 2023년 말 기준 자본총계는 약 200억 원에 이르며, 부채비율도 이전 대비 상승. 다만 영업활동 현금흐름이 개선되고 있어 전반적인 재무 안정성은 양호한 편. 회사는 축적된 이익과 투자자금으로 설비를 확보하면서도 부채를 관리하여 성장과 안정의 균형을 추구</li>\n</ul>\n\n<h3 id=\"연도별-매출-추이yearrevenueyoy\">연도별 매출 추이(Year/Revenue/YoY):</h3>\n\n<ul>\n  <li>2021: 101억원 +19%</li>\n  <li>2022: 204억원\t+102%</li>\n  <li>2023: 282억원\t+38%</li>\n  <li>2024: 400억원(proj) +42%</li>\n  <li>2025: 500억원(proj) +25%</li>\n</ul>\n\n<h3 id=\"연도별-영업이익-추이yearprofityoy\">연도별 영업이익 추이(Year/Profit/YoY):</h3>\n\n<ul>\n  <li>2021: -4억원 -150% 이상 (코로나19 영향)</li>\n  <li>2022: 24억원 +700% 이상 (수제맥주 양조장 인수, 직영점 확장 등)</li>\n  <li>2023: 44억원 +83%</li>\n  <li>2024: 65억원(proj) +48% (상장 추진과 브랜드 확장 전략 등)</li>\n  <li>2025: 90억원(proj) +38%</li>\n</ul>\n\n<hr />\n\n<h1 id=\"인상-깊었던-구절\">인상 깊었던 구절</h1>\n\n<h3 id=\"사업에-실패하는-창업가들의-공통점\">사업에 실패하는 창업가들의 공통점</h3>\n\n<ol>\n  <li>트렌드에 편승해서 성공하려는 마음</li>\n  <li>이윤 추구를 최우선으로 하는 마음</li>\n  <li>사업을 통해 자아실현을 하고자 하는 마음가짐</li>\n  <li>자유를 추구하는 마음으로 사업을 시작하는 마음가짐</li>\n</ol>\n\n<h3 id=\"도요타의-카이젠-정신\">도요타의 ‘카이젠 정신’</h3>\n\n<ul>\n  <li>‘개선’ 이라는 의미의 일본어 ‘카이젠’과 ‘정신’이 합쳐진 말</li>\n  <li>더 나아기지 위해 현실에 안주하지 않고 끊임없이 개선에 개선을 거듭하는 경영 철학</li>\n  <li>성공한 기업가는 산업과 소비자를 리드하기 위해 끊임없이 개선된 서비스를 선보인다. 창업가는 사업이 안정화되면 일의 일부를 적임자에게 위임하고 다음 단계로 올라가기 위해 전진해야만 한다. 창업가가 멈추면 기업이 멈추기 때문이다.</li>\n</ul>\n\n<h3 id=\"외식업-생존\">외식업 생존</h3>\n\n<ul>\n  <li>동네 음식점은 인사와 대화로 대부분의 문제를 해결할 수 있다</li>\n  <li>사장은 내 가게를 다시 찾아준 손님을 기억하고 있다는 사실을 반드시 알려야 한다</li>\n  <li>외식 사업을 오래 지속하려면 새로운 손님을 다시 오게 하는 것이 더 중요하다</li>\n  <li>성공 DNA는 바로 손님에게 진정성 있게 다가가는 사장님의 마음가짐이다</li>\n  <li>부자가 되고 싶다면 경제평론가의 책이 아닌 부자의 책을 읽어야 한다. 마찬가지로 사업에 성공하고 싶다면 성공한 사업가의 책을 읽어야 한다</li>\n  <li>같은 비즈니스 모델로 사업을 운영해 본 경험과, 그 모델로 성공한 경험이 있는 ‘진짜 전문가’에게 조언을 받아라</li>\n  <li>창업을 하면 대부분 빠른 성장을 추구하는데 그것보다 중요한 것이 지속적인 성장이다</li>\n</ul>\n\n<h3 id=\"작은-가게의-성공-법칙\">작은 가게의 성공 법칙</h3>\n\n<ul>\n  <li>경쟁하지 말고 독점하라 - 제로 투 원</li>\n  <li>더 좋기보다는 최초가 되는 편이 낫다 - 마케팅 불변의 법칙</li>\n  <li>사업에 차별성을 부여한다는 것을 너무 어렵게만 생각할 필요는 없다. ‘경쟁하지 않는다’ 는 원칙을 세우고, ‘경쟁력’ 보다 ‘차별성’ 에 중점을 두어야 한다</li>\n  <li>공간 브랜딩을 위해서는 무엇보다 사업의 본질, 정체성을 분명히 해야 한다. ‘무엇을 위한 공간인가?가 가장 먼저 정의되어야 한다. 생활맥주는 사업 시작부터 ‘수제 맥주를 파는 매장’이 아닌 ‘수제 맥주를 즐기는 공간’ 으로 기획되었다</li>\n  <li>메뉴의 종류가 많아지면 구입해야 할 식재료의 종류가 많아지고, 이것은 곧 복잡한 재고 관리를 의미한다</li>\n  <li>작게 창업해서 크게 확장하라</li>\n  <li>작은 브랜드일수록 고비용의 유명 인플루언서 마케팅이나 PPL 보다는 매장 브랜딩과 단골 만들기에 집중해야 한다</li>\n  <li>외생 변수로 인한 악영향을 최소화하고, 사업 포트폴리오를 확장하기 위해서는 평소의 고객이 브랜드의 어떤 점을 사랑하고, 어떤 점을 불편하게 생각하는지에 대해 지나치다 싶을 만큼 관심을 가져야 한다</li>\n</ul>\n\n<h3 id=\"프랜차이즈\">프랜차이즈</h3>\n\n<ul>\n  <li>가맹점은 판매하는 것이 아니다. 브랜드의 동업자를 늘리는 일이다</li>\n  <li>수익을 늘리기 위해서 질이 조금 떨어지는 제품을 대고 싶은 유혹에 빠질 수도 있다. 이렇게 되면 가맹점은 손해를 볼 것이고, 결국 그 손해는 나에게 돌아온다</li>\n  <li>기업가 정신은 우리 생활에 꼭 필요한 사업을 통해 ‘우리의 이익’ 을 추구하는 정신이다. 또한, 새로운 사업을 개척하여 새로운 문화와 새로운 라이프 스타일, 새로운 가치와 새로운 고객을 창출해야 한다</li>\n  <li>손님을 끌어당기는 것도 중요하지만, 더 중요한 것은 손님이 다시 오게 하는 것이다. 사업에 있어 ‘지속성’은 매우 중요한 요소다. 신규 손님으로 유지되는 대박집으로는 단골이 많은 백년식당을 넘어설 수 없다. 백년식당으로 성공하겠다 정도의 각오 없이는 음식점을 시작하지 않는 편이 낫다</li>\n  <li>프랜차이즈 브랜드가 오래가기 위해서는 스스로 끊임없이 변화해야 한다는 것이다. 상품 개발부터 디자인 리뉴얼까지 브랜드가 끊임없이 발전해야만 오래 지속될 수 있다</li>\n  <li>브랜드의 정체성은 고수하되 소비자와 쌍방향 소통하며 판매 전략과 서비스를 여러 형태로 변형시킨다</li>\n  <li>프랜차이즈의 정의는 ‘본사가 가맹점에게 사업의 성공을 위해 사업 아이템, 노하우, 사업 시스템을 포함해 브랜드 사업권을 제공하고, 가맹점은 이에 대한 대가를 금전적으로 지불하는 사업 모델’ 이라고 생각한다</li>\n  <li>백 번을 교육하는 것보다 업무를 단순화하는 것이 실수를 줄이는 데 더 효율적이기 때문이다</li>\n  <li>Keep your eyes open. Get inspired. Don’t copy(열린 마음으로 세상을 바라보고, 영감을 얻어라. 절대 카피하지 말라) - 폴 스미스(Paul Smith)</li>\n</ul>\n\n<h3 id=\"외식업자의-꿈\">외식업자의 꿈</h3>\n\n<p>“인생이 꿈을 만드는 것이 아니다. 꿈이 인생을 만드는 것이다.”</p>\n\n<p>메이저리그의 역사를 새롭게 쓰고 있는 현재진행형 야구 레전드인 오타니 쇼헤이의 말이다. 이 말을 떠올릴 때마다 인생을 원하는 방향으로 이끌기 위해서 꿈을 꾸는 것이 얼마나 중요한 일인지를 새삼 생각하게 된다. 하루하루 눈앞의 일을 닥치는 대로 처리하는 것만으로는 원하는 목적지에 도착하기 어렵다. 사업가로서 꿈을 이루고 싶다면 목적지를 정확히 설정하고 그 방향을 위해 현재를 움직여야 한다.</p>\n\n<p>생활맥주를 통해 내가 이루고 싶은 꿈은 세 가지였다. ‘지속 가능한 브랜드를 만들겠다’는 것, ‘대체 불가한 플랫폼을 만들겠다’는 것 그리고 ‘글로벌 맥주 브랜드로 성공하겠다’는 것이었다. 외식 업계에서 지속 가능한 브랜드로 성공하기 위해서는 파트너와 함께 성장하는 것이 중요했고, 대체 불가한 플랫폼으로 살아남기 위해서는 독보적인 시스템이 필요했다. 그리고 글로벌 맥주 브랜드로 성공하기 위해서 끊임없이 해외 진출의 기회를 모색했다. 생활맥주를 시작한 2014년부터 나는 이 꿈을 이루기 위해 부지런하게 발품을 팔며, 지금의 생활맥주를 만들었다. 생활맥주를 시작하면서 품은 꿈이 지난 11년 동안 내 삶을 이끌었다. 만약 내가 그저 생활 맥주를 통해 부를 축적하는 데만 몰두했다면, 생활맥주는 지금 사라지고 없을지도 모른다. 생활맥주 다점포 사업자로서 매장 몇 개를 운영하는 것에 만족했을 수도 있고, 새로운 사업 아이템을 찾아 헤매고 있을 수도 있다.</p>\n\n<p>나는 여전히 꿈꾸고 있다. 생활맥주는 이제 막 해외 진출에 발걸음을 뗀 어린아이과 같은 기업이지만, 나는 머지않아 전 세계 곳곳에서 생활맥주를 만날 수 있기를 꿈꾼다. 은퇴 후에는 전 세계를 여행하며 세계 각지의 생활맥주를 찾아다니며 개성 넘치는 맥주를 마시는 상상을 한다. 나뿐만이 아니다. 외식업을 시작하는 모든 사업가가 꿈꾸기를 바란다. 국내 외식 업계에서 가장 필요한 것은 꿈을 성취하기 위해 노력하는 기업가들이다. 나는 대한민국의 모든 외식 사업가들이 눈앞의 이익을 추구하기보다는 지속적으로 성장할 수 있는 브랜드를 만드는 꿈을 품기를 바라고, 산업에 기여할 수 있는 브랜드를 만드는 꿈을 꾸기를 바란다. 사업은 궁극적으로 소비자와 세상을 이롭게 하는 일이다. 더 많은 외식 사업가들이 사업을 통해 더 많은 사람을 행복으로 이끄는 꿈을 설계하기를 바라고, 그 꿈을 만드시 이루길 바란다. 나 역시 ‘전 세계의 맥주 문화를 이끄는 외식기업으로 성공하겠다’ 는 꿈을 이루기 위해 더 열심히 나아가고자 한다.</p>",
        "guid": "https://sungjk.github.io/2025/05/04/dailybeer.html",
        "isoDate": "2025-05-04T00:00:00.000Z"
      },
      {
        "title": "Gradle Build Cache에 S3 활용하기",
        "link": "https://sungjk.github.io/2025/05/01/gradle-build-remote-cache.html",
        "pubDate": "2025-05-01T00:00:00+00:00",
        "content": "\n            \n            &lt;p&gt;팀에서 Kotlin, Spring Boot 기반의 수십개의 마이크로서비스를 모노레포에 운영하고 있습니다. 멀티 레포 프로젝트에 비해 방대한 맥락과 코드가 한 곳에 모여있다보니 작성한 코드를 빌드하는 과정에서 병목이 생기기도 합니다. 그리고 CI 머신의 리소스를 여러 서비스가 공유하고 있다면 빌드 시간이 길어지는건, 다른 서비스의 빌드 시간에도 영향을 주는 구조가 됩니다. 결국 이 문제는 &lt;em&gt;사용자에게 더 빠르게 가치를 제공해야 한다&lt;/em&gt;는 팀의 개발 철학과 멀어지는 결과를 야기한다.&lt;/p&gt;\n\n&lt;p&gt;이렇듯 빌드 속도가 제품 개발에 영향을 미치고 있다면, 간단한 설정만으로 빌드 결과물을 캐싱해놓고 재사용할 수 있는 Gradle Build Cache를 도입해보면 좋다. 이 플러그인은 Gradle Build Cache를 AWS S3에 저장해놓고 재사용함으로써 빌드 시간을 단축시킬 수 있게 도와줍니다. 적용 결과 적게는 2배, 많게는 10배 이상까지 빌드 시간이 단축되었습니다.&lt;/p&gt;\n\n&lt;p&gt;(CI를 Github Action에서 수행한다고 가정하고 작성하였습니다.)&lt;/p&gt;\n\n&lt;h3 id=&quot;awss3buildcache-적용하기&quot;&gt;AwsS3BuildCache 적용하기&lt;/h3&gt;\n\n&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle.kts&lt;/code&gt; 파일에 아래와 같이 Github Action에서 빌드 수행시 Remote(S3) 저장소로 빌드 결과물이 저장될 수 있도록 설정한다. Gradle Build Task 수행 단계에서 빌드 결과물을 자동으로 Local 또는 Remote로 저장할 수 있다.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.burrunan.s3-build-cache&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.9.0&quot;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행되었으면 &quot;true&quot;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;nf&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행된 경우가 아니면 Local Cache 사용&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행되었으면 Remote Cache(S3) 사용&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;isPush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;Groovy를 사용중이라면 아래와 같이 적용하면 된다.&lt;/p&gt;\n\n&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.github.burrunan.s3-build-cache&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.9.0&quot;&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;\n        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;선택-gradle-build-cache-옵션-활성화하기&quot;&gt;(선택) Gradle Build Cache 옵션 활성화하기&lt;/h3&gt;\n\n&lt;p&gt;Gradle 6.0 이상부터는 빌드시 Cache가 기본적으로 활성화되어 있는데, 하위 버전을 사용하고 있다면 빌드 커맨드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--build-cache&lt;/code&gt; 옵션을 추가해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build --build-cache&lt;/code&gt; 로 실행하면 된다.&lt;/p&gt;\n\n&lt;p&gt;아니면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; 파일에 아래 설정을 추가하면 Gradle의 캐시 사용을 명시적으로 표현할 수 있다.&lt;/p&gt;\n\n&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.gradle.caching=true\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;선택-로컬-환경에서-build-cache-활성화하기&quot;&gt;(선택) 로컬 환경에서 Build Cache 활성화하기&lt;/h3&gt;\n\n&lt;p&gt;만약 로컬 환경에서도 S3 Build Cache를 사용하고 싶다면, 관리와 비용 측면에서 Cache Push는 CI에서만 호도록 아래 설정처럼 사용하기를 권장합니다. 빈번한 캐시 업로드와 다운로드로 인해 S3 사용량 증가로 인해 트래픽과 과금에 영향을 줄 수 있습니다.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;nf&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// CI는 로컬 캐시 비활성화&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 로컬은 pull-only, CI만 push 허용&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isPush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;https://github.com/burrunan/gradle-s3-build-cache&quot;&gt;burrunan/gradle-s3-build-cache&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure&quot;&gt;Configure the Build Cache&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables&quot;&gt;Store information in variables - GitHub Docs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n            \n          ",
        "contentSnippet": "<p>팀에서 Kotlin, Spring Boot 기반의 수십개의 마이크로서비스를 모노레포에 운영하고 있습니다. 멀티 레포 프로젝트에 비해 방대한 맥락과 코드가 한 곳에 모여있다보니 작성한 코드를 빌드하는 과정에서 병목이 생기기도 합니다. 그리고 CI 머신의 리소스를 여러 서비스가 공유하고 있다면 빌드 시간이 길어지는건, 다른 서비스의 빌드 시간에도 영향을 주는 구조가 됩니다. 결국 이 문제는 <em>사용자에게 더 빠르게 가치를 제공해야 한다</em>는 팀의 개발 철학과 멀어지는 결과를 야기한다.</p>\n\n<p>이렇듯 빌드 속도가 제품 개발에 영향을 미치고 있다면, 간단한 설정만으로 빌드 결과물을 캐싱해놓고 재사용할 수 있는 Gradle Build Cache를 도입해보면 좋다. 이 플러그인은 Gradle Build Cache를 AWS S3에 저장해놓고 재사용함으로써 빌드 시간을 단축시킬 수 있게 도와줍니다. 적용 결과 적게는 2배, 많게는 10배 이상까지 빌드 시간이 단축되었습니다.</p>\n\n<p>(CI를 Github Action에서 수행한다고 가정하고 작성하였습니다.)</p>\n\n<h3 id=\"awss3buildcache-적용하기\">AwsS3BuildCache 적용하기</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">settings.gradle.kts</code> 파일에 아래와 같이 Github Action에서 빌드 수행시 Remote(S3) 저장소로 빌드 결과물이 저장될 수 있도록 설정한다. Gradle Build Task 수행 단계에서 빌드 결과물을 자동으로 Local 또는 Remote로 저장할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">plugins</span> <span class=\"p\">{</span>\n    <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"s\">\"com.github.burrunan.s3-build-cache\"</span><span class=\"p\">)</span> <span class=\"n\">version</span> <span class=\"s\">\"1.9.0\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// GITHUB ACTION 에서 수행되었으면 \"true\"</span>\n<span class=\"c1\">// https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables</span>\n<span class=\"kd\">val</span> <span class=\"py\">isGithubAction</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"GITHUB_ACTIONS\"</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"s\">\"true\"</span>\n\n<span class=\"nf\">buildCache</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// GITHUB ACTION 에서 수행된 경우가 아니면 Local Cache 사용</span>\n    <span class=\"nf\">local</span> <span class=\"p\">{</span>\n        <span class=\"n\">isEnabled</span> <span class=\"p\">=</span> <span class=\"n\">isGithubAction</span><span class=\"p\">.</span><span class=\"nf\">not</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// GITHUB ACTION 에서 수행되었으면 Remote Cache(S3) 사용</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isGithubAction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">remote</span><span class=\"p\">&lt;</span><span class=\"n\">com</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">burrunan</span><span class=\"p\">.</span><span class=\"n\">s3cache</span><span class=\"p\">.</span><span class=\"nc\">AwsS3BuildCache</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n            <span class=\"n\">region</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-region\"</span>\n            <span class=\"n\">bucket</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-s3-bucket\"</span>\n            <span class=\"n\">prefix</span> <span class=\"p\">=</span> <span class=\"s\">\"gradle/build/$YourProjectName/\"</span>\n            <span class=\"n\">isPush</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Groovy를 사용중이라면 아래와 같이 적용하면 된다.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n    <span class=\"n\">id</span> <span class=\"s2\">\"com.github.burrunan.s3-build-cache\"</span> <span class=\"n\">version</span> <span class=\"s2\">\"1.9.0\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">def</span> <span class=\"n\">isGithubAction</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">getenv</span><span class=\"o\">(</span><span class=\"s2\">\"GITHUB_ACTIONS\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"n\">buildCache</span> <span class=\"o\">{</span>\n    <span class=\"n\">local</span> <span class=\"o\">{</span>\n        <span class=\"n\">enabled</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">isGithubAction</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isGithubAction</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">remote</span><span class=\"o\">(</span><span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">github</span><span class=\"o\">.</span><span class=\"na\">burrunan</span><span class=\"o\">.</span><span class=\"na\">s3cache</span><span class=\"o\">.</span><span class=\"na\">AwsS3BuildCache</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"s2\">\"your-aws-region\"</span>\n            <span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"your-aws-s3-bucket\"</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"gradle/build/$YourProjectName/\"</span>\n            <span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"선택-gradle-build-cache-옵션-활성화하기\">(선택) Gradle Build Cache 옵션 활성화하기</h3>\n\n<p>Gradle 6.0 이상부터는 빌드시 Cache가 기본적으로 활성화되어 있는데, 하위 버전을 사용하고 있다면 빌드 커맨드에 <code class=\"language-plaintext highlighter-rouge\">--build-cache</code> 옵션을 추가해서 <code class=\"language-plaintext highlighter-rouge\">./gradlew build --build-cache</code> 로 실행하면 된다.</p>\n\n<p>아니면 <code class=\"language-plaintext highlighter-rouge\">gradle.properties</code> 파일에 아래 설정을 추가하면 Gradle의 캐시 사용을 명시적으로 표현할 수 있다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>org.gradle.caching=true\n</code></pre></div></div>\n\n<h3 id=\"선택-로컬-환경에서-build-cache-활성화하기\">(선택) 로컬 환경에서 Build Cache 활성화하기</h3>\n\n<p>만약 로컬 환경에서도 S3 Build Cache를 사용하고 싶다면, 관리와 비용 측면에서 Cache Push는 CI에서만 호도록 아래 설정처럼 사용하기를 권장합니다. 빈번한 캐시 업로드와 다운로드로 인해 S3 사용량 증가로 인해 트래픽과 과금에 영향을 줄 수 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">val</span> <span class=\"py\">isGithubAction</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"GITHUB_ACTIONS\"</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"s\">\"true\"</span>\n\n<span class=\"nf\">buildCache</span> <span class=\"p\">{</span>\n    <span class=\"nf\">local</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// CI는 로컬 캐시 비활성화</span>\n        <span class=\"n\">isEnabled</span> <span class=\"p\">=</span> <span class=\"p\">!</span><span class=\"n\">isGithubAction</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">remote</span><span class=\"p\">&lt;</span><span class=\"n\">com</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">burrunan</span><span class=\"p\">.</span><span class=\"n\">s3cache</span><span class=\"p\">.</span><span class=\"nc\">AwsS3BuildCache</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"n\">region</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-region\"</span>\n        <span class=\"n\">bucket</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-s3-bucket\"</span>\n        <span class=\"n\">prefix</span> <span class=\"p\">=</span> <span class=\"s\">\"gradle/build/$YourProjectName/\"</span>\n        <span class=\"c1\">// 로컬은 pull-only, CI만 push 허용</span>\n        <span class=\"n\">isPush</span> <span class=\"p\">=</span> <span class=\"n\">isGithubAction</span>\n        <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n  <li><a href=\"https://github.com/burrunan/gradle-s3-build-cache\">burrunan/gradle-s3-build-cache</a></li>\n  <li><a href=\"https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure\">Configure the Build Cache</a></li>\n  <li><a href=\"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables\">Store information in variables - GitHub Docs</a></li>\n</ul>",
        "guid": "https://sungjk.github.io/2025/05/01/gradle-build-remote-cache.html",
        "isoDate": "2025-05-01T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Lael's World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "Suno v4.5 주요 업데이트 소개, 프로급 음악 제작이 더 쉬워졌다!",
        "link": "http://muzbox.tistory.com/483577",
        "pubDate": "Fri, 2 May 2025 09:43:15 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483577#entry483577comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;음악 창작의 새 역사를 쓰는 Suno v4.5가 드디어 공개됐어요! 더 풍부한 장르, 감성적인 보컬, 복잡한 사운드까지... 여러분의 음악적 상상력이 현실이 되는 마법 같은 경험을 함께 해볼까요?</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1280\" data-origin-height=\"853\"><span data-url=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\" data-phocus=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\"><img src=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FojiOZ%2FbtsNIP98I8X%2FotAALfFFw6QxLJEU3W7TU0%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"Suno v4.5 주요 업데이트 소개\" loading=\"lazy\" width=\"1280\" height=\"853\" data-origin-width=\"1280\" data-origin-height=\"853\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">여러분, 혹시 머릿속에서 맴도는 멜로디가 있으신가요? 어떤 특별한 순간에 떠오르는 그 음악, 그냥 흘려보내기 아쉽지 않으셨어요? 저도 그랬어요. 음악을 전공하지 않았지만 항상 제 감정을 표현할 수 있는 노래를 만들고 싶었거든요.</p>\n<p data-ke-size=\"size16\">솔직히 말해서, 음악 제작은 전문가들의 영역이라고만 생각했어요. 작곡, 편곡, 믹싱... 이런 단어들만 들어도 진입장벽이 느껴지잖아요. 그런데 Suno의 새로운 v4.5 모델을 경험하고 나서 제 생각이 완전히 바뀌었어요. 진짜로요!  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>Suno v4.5, 무엇이 달라졌을까? ✨</b></span></h2>\n<p data-ke-size=\"size16\">Suno v4.5는 이전 버전에서 한 단계 더 진화했어요. 제가 직접 사용해본 결과, 몇 가지 놀라운 변화를 발견했답니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">확장된 장르와 장르 믹스업  </span></h3>\n<p data-ke-size=\"size16\">장르 옵션이 크게 확장되었고, v4.5는 이전보다 장르를 더 정확하게 따라갑니다. 예전에는 'EDM'이라고 하면 뭔가 비슷비슷한 느낌이었는데, 이제는 확실히 다양한 EDM 하위 장르의 특징을 잘 살려주더라고요.</p>\n<p data-ke-size=\"size16\">제가 한번 \"펑크 록\"과 \"재즈 하우스\"를 입력했는데, 와... 진짜 그 장르의 특성이 잘 살아있었어요! 심지어 \"그레고리안 성가\"까지 도전해봤는데, 마치 중세 수도원에 있는 것 같은 경험이었죠.</p>\n<p data-ke-size=\"size16\">더 신기한 건 장르 조합도 훨씬 잘 작동한다는 거예요. 미드웨스트 이모와 네오소울을 섞거나 EDM과 포크를 조합하면 더 일관되고 창의적인 음악이 만들어집니다. 전에는 뭔가 어색했던 결합들이 이제는 마치 원래부터 존재했던 장르처럼 자연스럽게 들려요.</p>\n<blockquote data-ke-style=\"style3\">Start&nbsp;with&nbsp;Rap&nbsp;,&nbsp;transition&nbsp;to&nbsp;R&amp;B&nbsp;Vocals&nbsp;&nbsp;&nbsp;for&nbsp;the&nbsp;hook,&nbsp;then&nbsp;switch&nbsp;the&nbsp;beat&nbsp;to&nbsp;a&nbsp;Stereo&nbsp;Bounce&nbsp;and&nbsp;finally&nbsp;into&nbsp;a&nbsp;Soul&nbsp;Sample<br /><br />랩으로&nbsp;시작하여&nbsp;후크를&nbsp;위해&nbsp;R&amp;B&nbsp;보컬로&nbsp;전환한&nbsp;다음&nbsp;비트를&nbsp;스테레오&nbsp;바운스로&nbsp;전환하고&nbsp;마지막으로&nbsp;소울&nbsp;샘플로&nbsp;전환합니다.</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">향상된 보컬 퀄리티  </span></h3>\n<p data-ke-size=\"size16\">보컬은 이제 더 넓은 음역대와 감정적 깊이를 갖추게 되었습니다. 섬세하고 친밀한 퍼포먼스부터 비브라토가 있는 강력한 전달력까지 모든 것을 만들 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">실제로 감정을 담은 가사를 작성하고 그에 맞는 보컬 스타일을 지정하니, 마치 진짜 가수가 부른 것처럼 느껴졌어요. 예전에는 뭔가 기계적인 느낌이 살짝 있었는데, 이제는 진짜 사람이 감정을 담아 부르는 것 같아요. 저는 개인적으로 이 부분이 가장 마음에 들었답니다!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 복잡한 사운드 구현  </span></h3>\n<p data-ke-size=\"size16\">v4.5는 자연스러운 톤 변화부터 악기 레이어링, 섬세한 사운드 디테일까지 깊이를 더하는 미묘한 음악적 요소를 포착합니다. 예전에는 기본적인 느낌만 전달됐다면, 이제는 섬세한 뉘앙스까지 표현돼요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">\"기분 좋은 노스텔직한 톤\", \"나뭇잎 질감\", \"멜로딕한 휘파람\" 같은 설명이 이제 직접 음악에 반영될 수 있습니다. 제가 \"숲속에서 들리는 새소리와 함께 잔잔한 피아노 멜로디\"라고 입력했더니, 정말 그 분위기가 생생하게 담긴 음악이 만들어졌어요. 마치 제 상상력이 그대로 음악이 된 느낌이었달까요?</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"suno4.5.jpg\" data-origin-width=\"1093\" data-origin-height=\"609\"><span data-url=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbqGIS0%2FbtsNHuzarV6%2FgqkvOlKf7LmKFP8e53sIaK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"SUNO 4.5\" loading=\"lazy\" width=\"1093\" height=\"609\" data-filename=\"suno4.5.jpg\" data-origin-width=\"1093\" data-origin-height=\"609\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>더 똑똑해진 Suno, 더 직관적인 경험  </b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 스마트한 프롬프트 해석 능력</span></h3>\n<p data-ke-size=\"size16\">v4.5는 여러분의 설명을 더 잘 이해하고 번역합니다. 여러분이 지정한 세부 사항, 분위기, 악기를 더 잘 포착합니다. 이제 감정적 뉘앙스와 기술적 음악 요소 모두 노래에 더 잘 반영됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">전에는 \"슬프면서도 희망적인 느낌\"이라고 하면 뭔가 어중간한 결과물이 나왔는데, 이제는 진짜 슬픔에서 시작해 점점 희망적인 분위기로 변해가는 섬세한 감정 전환까지 표현해내요. 진짜 사람이 작곡한 것 같은 느낌이랄까요?</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">프롬프트 향상 도우미</span></h3>\n<p data-ke-size=\"size16\">v4.5의 새로운 복잡성을 최대한 활용하기 위해 프롬프트 향상 도우미를 활용해보세요. 여러분의 장르 아이디어가 그대로 사용하거나 원하는 대로 수정할 수 있는 풍부하고 상세한 스타일 설명으로 발전하는 것을 볼 수 있습니다.</p>\n<p data-ke-size=\"size16\">이건 정말 유용한 기능이에요! 제가 \"힙합\"이라고만 입력했을 때, 프롬프트 향상 도우미는 \"90년대 붐뱁 비트와 재즈 샘플이 결합된 올드스쿨 힙합, 유려한 래핑과 소울풀한 후렴구\" 같은 상세한 설명으로 확장해주더라고요. 덕분에 더 정확한 음악을 만들 수 있었답니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>더 다양한 창작 기능들, 한계는 없다!  </b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">업그레이드된 커버와 페르소나</span></h3>\n<p data-ke-size=\"size16\">커버와 페르소나가 큰 향상을 받았습니다. 커버곡을 만들면 더 많은 멜로디 디테일을 유지해야 합니다. 장르 전환도 개선되었습니다&mdash;좋아하는 록 음악을 하우스 리믹스로 바꾸어 변화를 들어보세요.</p>\n<p data-ke-size=\"size16\">제가 좋아하는 팝송을 재즈 버전으로 커버해봤는데, 원곡의 멜로디는 그대로 유지하면서도 완전히 다른 분위기로 재탄생했어요. 이전에는 원곡의 느낌이 많이 사라졌었는데, 이제는 \"아, 이 노래구나!\" 하고 바로 알아차릴 수 있더라고요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">커버와 페르소나의 결합</span></h3>\n<p data-ke-size=\"size16\">커버와 페르소나를 함께 사용하여 목소리, 스타일, 구조를 한 번에 리믹스하세요. 함께 사용하면 무한한 창의적 가능성을 열어줍니다.</p>\n<p data-ke-size=\"size16\">이건 정말 혁명적인 기능이에요! 제 취향의 아티스트 목소리로 좋아하는 노래를 부르게 하고, 동시에 장르까지 바꿀 수 있다니... 상상만 해도 설레지 않나요? 저는 팝송을 메탈 버전으로 바꾸고 완전 다른 보컬로 커버해봤는데, 그 결과물이 너무 신선했어요!</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 빠른 생성 속도와 긴 곡 길이</span></h3>\n<p data-ke-size=\"size16\">생성 속도가 크게 향상되어 실험하고 개선할 시간이 더 많아졌습니다. 이제 기다리는 시간이 훨씬 줄어들어서 창작 과정이 중단되지 않고 아이디어가 떠오르는 대로 바로바로 시도해볼 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그리고 이제 최대 8분 길이의 노래를 만들 수 있으며, 긴 구성에서도 처음부터 끝까지 품질과 일관성을 유지할 수 있습니다. 전에는 긴 곡을 만들면 후반부로 갈수록 퀄리티가 떨어지는 경우가 있었는데, 이제는 8분짜리 대곡도 처음부터 끝까지 완성도 있게 만들 수 있어요!</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">개선된 오디오 품질</span></h3>\n<p data-ke-size=\"size16\">v4.5는 더 균형 잡히고 풍부한 믹스를 제공하며, 오디오 열화와 시머 효과를 모두 감소시킵니다. 더 긴 구성에서도 처음부터 끝까지 일관된 사운드 품질을 유지합니다.</p>\n<p data-ke-size=\"size16\">이전 버전에서는 가끔 사운드가 울리거나 지직거리는 현상이 있었는데, v4.5에서는 이런 문제가 확실히 개선되었어요. 마치 프로 스튜디오에서 녹음한 것처럼 깔끔한 사운드를 경험할 수 있었답니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1360\" data-origin-height=\"768\"><span data-url=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FGVxPW%2FbtsNIAZF0cP%2FzOewIEBpO3bI6mSElYQBi1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"SUNO 4.5 업데이트 요약\" loading=\"lazy\" width=\"1360\" height=\"768\" data-origin-width=\"1360\" data-origin-height=\"768\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>나만의 음악 세계를 열어보세요  </b></span></h2>\n<p data-ke-size=\"size16\">음악 창작은 더 이상 전문가들만의 영역이 아니에요. Suno v4.5와 함께라면 누구나 자신만의 음악적 상상력을 현실로 만들 수 있어요. 복잡한 장비나 전문 지식 없이도, 그저 여러분의 아이디어를 글로 표현하는 것만으로 멋진 음악이 탄생합니다.</p>\n<p data-ke-size=\"size16\">저는 Suno v4.5를 써보고 정말 놀랐어요. 제 머릿속에서만 울리던 그 멜로디, 제가 느끼던 그 감정들이 실제 음악으로 표현된다는 게 얼마나 신기한지 몰라요. 지금 당장 여러분도 <a href=\"https://suno.com/create\">Suno에서 v4.5 노래를 만들어보세요</a>. 더 많은 기능들이 곧 출시될 예정이니 귀 기울여 주세요!</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>FAQ</b></span></h2>\n<p data-ke-size=\"size16\"><b>Q: Suno v4.5는 무료인가요?</b></p>\n<p data-ke-size=\"size16\">A: 기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro &amp; Premier 구독 옵션이 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 음악 전문가가 아니어도 사용할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 만든 음악의 저작권은 누구에게 있나요?</b></p>\n<p data-ke-size=\"size16\">A: Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.</p>\n<p data-ke-size=\"size16\"><b>Q: 몇 분 길이의 음악까지 만들 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 외국어 노래도 만들 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"Suno v4.5는 무료인가요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"음악 전문가가 아니어도 사용할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"만든 음악의 저작권은 누구에게 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"몇 분 길이의 음악까지 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"외국어 노래도 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\"\n    }\n  }]\n}\n</script>",
        "contentSnippet": "음악 창작의 새 역사를 쓰는 Suno v4.5가 드디어 공개됐어요! 더 풍부한 장르, 감성적인 보컬, 복잡한 사운드까지... 여러분의 음악적 상상력이 현실이 되는 마법 같은 경험을 함께 해볼까요?\n\n\n \n여러분, 혹시 머릿속에서 맴도는 멜로디가 있으신가요? 어떤 특별한 순간에 떠오르는 그 음악, 그냥 흘려보내기 아쉽지 않으셨어요? 저도 그랬어요. 음악을 전공하지 않았지만 항상 제 감정을 표현할 수 있는 노래를 만들고 싶었거든요.\n솔직히 말해서, 음악 제작은 전문가들의 영역이라고만 생각했어요. 작곡, 편곡, 믹싱... 이런 단어들만 들어도 진입장벽이 느껴지잖아요. 그런데 Suno의 새로운 v4.5 모델을 경험하고 나서 제 생각이 완전히 바뀌었어요. 진짜로요!  \n \nSuno v4.5, 무엇이 달라졌을까? ✨\nSuno v4.5는 이전 버전에서 한 단계 더 진화했어요. 제가 직접 사용해본 결과, 몇 가지 놀라운 변화를 발견했답니다.\n확장된 장르와 장르 믹스업  \n장르 옵션이 크게 확장되었고, v4.5는 이전보다 장르를 더 정확하게 따라갑니다. 예전에는 'EDM'이라고 하면 뭔가 비슷비슷한 느낌이었는데, 이제는 확실히 다양한 EDM 하위 장르의 특징을 잘 살려주더라고요.\n제가 한번 \"펑크 록\"과 \"재즈 하우스\"를 입력했는데, 와... 진짜 그 장르의 특성이 잘 살아있었어요! 심지어 \"그레고리안 성가\"까지 도전해봤는데, 마치 중세 수도원에 있는 것 같은 경험이었죠.\n더 신기한 건 장르 조합도 훨씬 잘 작동한다는 거예요. 미드웨스트 이모와 네오소울을 섞거나 EDM과 포크를 조합하면 더 일관되고 창의적인 음악이 만들어집니다. 전에는 뭔가 어색했던 결합들이 이제는 마치 원래부터 존재했던 장르처럼 자연스럽게 들려요.\nStart with Rap , transition to R&B Vocals   for the hook, then switch the beat to a Stereo Bounce and finally into a Soul Sample\n랩으로 시작하여 후크를 위해 R&B 보컬로 전환한 다음 비트를 스테레오 바운스로 전환하고 마지막으로 소울 샘플로 전환합니다.\n \n향상된 보컬 퀄리티  \n보컬은 이제 더 넓은 음역대와 감정적 깊이를 갖추게 되었습니다. 섬세하고 친밀한 퍼포먼스부터 비브라토가 있는 강력한 전달력까지 모든 것을 만들 수 있습니다.\n \n실제로 감정을 담은 가사를 작성하고 그에 맞는 보컬 스타일을 지정하니, 마치 진짜 가수가 부른 것처럼 느껴졌어요. 예전에는 뭔가 기계적인 느낌이 살짝 있었는데, 이제는 진짜 사람이 감정을 담아 부르는 것 같아요. 저는 개인적으로 이 부분이 가장 마음에 들었답니다!\n \n더 복잡한 사운드 구현  \nv4.5는 자연스러운 톤 변화부터 악기 레이어링, 섬세한 사운드 디테일까지 깊이를 더하는 미묘한 음악적 요소를 포착합니다. 예전에는 기본적인 느낌만 전달됐다면, 이제는 섬세한 뉘앙스까지 표현돼요.\n \n\"기분 좋은 노스텔직한 톤\", \"나뭇잎 질감\", \"멜로딕한 휘파람\" 같은 설명이 이제 직접 음악에 반영될 수 있습니다. 제가 \"숲속에서 들리는 새소리와 함께 잔잔한 피아노 멜로디\"라고 입력했더니, 정말 그 분위기가 생생하게 담긴 음악이 만들어졌어요. 마치 제 상상력이 그대로 음악이 된 느낌이었달까요?\n\n\n \n더 똑똑해진 Suno, 더 직관적인 경험  \n더 스마트한 프롬프트 해석 능력\nv4.5는 여러분의 설명을 더 잘 이해하고 번역합니다. 여러분이 지정한 세부 사항, 분위기, 악기를 더 잘 포착합니다. 이제 감정적 뉘앙스와 기술적 음악 요소 모두 노래에 더 잘 반영됩니다.\n \n전에는 \"슬프면서도 희망적인 느낌\"이라고 하면 뭔가 어중간한 결과물이 나왔는데, 이제는 진짜 슬픔에서 시작해 점점 희망적인 분위기로 변해가는 섬세한 감정 전환까지 표현해내요. 진짜 사람이 작곡한 것 같은 느낌이랄까요?\n프롬프트 향상 도우미\nv4.5의 새로운 복잡성을 최대한 활용하기 위해 프롬프트 향상 도우미를 활용해보세요. 여러분의 장르 아이디어가 그대로 사용하거나 원하는 대로 수정할 수 있는 풍부하고 상세한 스타일 설명으로 발전하는 것을 볼 수 있습니다.\n이건 정말 유용한 기능이에요! 제가 \"힙합\"이라고만 입력했을 때, 프롬프트 향상 도우미는 \"90년대 붐뱁 비트와 재즈 샘플이 결합된 올드스쿨 힙합, 유려한 래핑과 소울풀한 후렴구\" 같은 상세한 설명으로 확장해주더라고요. 덕분에 더 정확한 음악을 만들 수 있었답니다.\n \n더 다양한 창작 기능들, 한계는 없다!  \n업그레이드된 커버와 페르소나\n커버와 페르소나가 큰 향상을 받았습니다. 커버곡을 만들면 더 많은 멜로디 디테일을 유지해야 합니다. 장르 전환도 개선되었습니다—좋아하는 록 음악을 하우스 리믹스로 바꾸어 변화를 들어보세요.\n제가 좋아하는 팝송을 재즈 버전으로 커버해봤는데, 원곡의 멜로디는 그대로 유지하면서도 완전히 다른 분위기로 재탄생했어요. 이전에는 원곡의 느낌이 많이 사라졌었는데, 이제는 \"아, 이 노래구나!\" 하고 바로 알아차릴 수 있더라고요.\n커버와 페르소나의 결합\n커버와 페르소나를 함께 사용하여 목소리, 스타일, 구조를 한 번에 리믹스하세요. 함께 사용하면 무한한 창의적 가능성을 열어줍니다.\n이건 정말 혁명적인 기능이에요! 제 취향의 아티스트 목소리로 좋아하는 노래를 부르게 하고, 동시에 장르까지 바꿀 수 있다니... 상상만 해도 설레지 않나요? 저는 팝송을 메탈 버전으로 바꾸고 완전 다른 보컬로 커버해봤는데, 그 결과물이 너무 신선했어요!\n더 빠른 생성 속도와 긴 곡 길이\n생성 속도가 크게 향상되어 실험하고 개선할 시간이 더 많아졌습니다. 이제 기다리는 시간이 훨씬 줄어들어서 창작 과정이 중단되지 않고 아이디어가 떠오르는 대로 바로바로 시도해볼 수 있어요.\n \n그리고 이제 최대 8분 길이의 노래를 만들 수 있으며, 긴 구성에서도 처음부터 끝까지 품질과 일관성을 유지할 수 있습니다. 전에는 긴 곡을 만들면 후반부로 갈수록 퀄리티가 떨어지는 경우가 있었는데, 이제는 8분짜리 대곡도 처음부터 끝까지 완성도 있게 만들 수 있어요!\n개선된 오디오 품질\nv4.5는 더 균형 잡히고 풍부한 믹스를 제공하며, 오디오 열화와 시머 효과를 모두 감소시킵니다. 더 긴 구성에서도 처음부터 끝까지 일관된 사운드 품질을 유지합니다.\n이전 버전에서는 가끔 사운드가 울리거나 지직거리는 현상이 있었는데, v4.5에서는 이런 문제가 확실히 개선되었어요. 마치 프로 스튜디오에서 녹음한 것처럼 깔끔한 사운드를 경험할 수 있었답니다.\n \n\n\n나만의 음악 세계를 열어보세요  \n음악 창작은 더 이상 전문가들만의 영역이 아니에요. Suno v4.5와 함께라면 누구나 자신만의 음악적 상상력을 현실로 만들 수 있어요. 복잡한 장비나 전문 지식 없이도, 그저 여러분의 아이디어를 글로 표현하는 것만으로 멋진 음악이 탄생합니다.\n저는 Suno v4.5를 써보고 정말 놀랐어요. 제 머릿속에서만 울리던 그 멜로디, 제가 느끼던 그 감정들이 실제 음악으로 표현된다는 게 얼마나 신기한지 몰라요. 지금 당장 여러분도 Suno에서 v4.5 노래를 만들어보세요. 더 많은 기능들이 곧 출시될 예정이니 귀 기울여 주세요!\nFAQ\nQ: Suno v4.5는 무료인가요?\nA: 기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\nQ: 음악 전문가가 아니어도 사용할 수 있나요?\nA: 네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\nQ: 만든 음악의 저작권은 누구에게 있나요?\nA: Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\nQ: 몇 분 길이의 음악까지 만들 수 있나요?\nA: v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\nQ: 외국어 노래도 만들 수 있나요?\nA: 네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"Suno v4.5는 무료인가요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"음악 전문가가 아니어도 사용할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"만든 음악의 저작권은 누구에게 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"몇 분 길이의 음악까지 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"외국어 노래도 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\"\n    }\n  }]\n}",
        "guid": "http://muzbox.tistory.com/483577",
        "categories": [
          "AI, 미래기술/AI 비디오 및 멀티미디어",
          "ai 음악 생성",
          "suno v4.5",
          "보컬 향상",
          "음악 창작 도구",
          "음악 커버",
          "음악 테크놀로지",
          "음악 페르소나",
          "음악 프롬프트",
          "인공지능 작곡",
          "장르 믹스업"
        ],
        "isoDate": "2025-05-02T00:43:15.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": []
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "C++ - EASTL 디자인",
        "link": "https://jacking75.github.io/Cpp_20250505/",
        "pubDate": "Mon, 05 May 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vQAsPSfhJPm0pu2EahSwusZjZNPeTETbxklThH8Lm8GliNfLLtn71WRKpv_NkF9CkLuYHEFAqGiA7xa/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/Cpp_20250505/",
        "isoDate": "2025-05-04T15:00:00.000Z"
      },
      {
        "title": "C++ - Mimalloc:Free List Sharding in Action 을 읽고 정리",
        "link": "https://jacking75.github.io/Cpp_20250430/",
        "pubDate": "Wed, 30 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vRaj95MhE1bMYF30dVP-xSbiJrASaFlF693zgj_nK5kmIzK8R5AJU1SHNh2RWfcFqz2OgoFHAIaax2V/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/Cpp_20250430/",
        "isoDate": "2025-04-29T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "짜치는 일들",
        "link": "https://jeho.page/essay/2025/05/02/petty-stuff.html",
        "pubDate": "2025-05-02T12:39:00.000Z",
        "author": "김재호",
        "content": "<blockquote>\n  <p>사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다.<br />\n짜치는 일을 안 하기는 어렵다. 견뎌야 한다. 그런데 그런 일들을 견디기 위해서는 본인이 생각했을 때 의미있는 사업을 해야 한다. 적어도 내게 의미있는 이야기 이어야 한다.</p>\n\n  <p><em><a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7322830400169328640\">링크드인 게시글에서</a></em></p>\n</blockquote>\n\n<p>여전히 짜치는 일들을 합니다.<br />\n의미 있는 일이라 생각해서라기보다는…<br />\n내가 할 수 있는 것들은 다 해보고 싶은 마음(그래야 후회하지 않을 테니까)</p>\n\n<p>쪽팔린 것은 정말 싫은데… 그 쪽팔린 것들을 안 해보고 포기하면 그게 더 쪽팔려서.<br />\n내 안의 쪽팔림과 싸워서 이겨보고 싶은 마음이 있습니다.</p>\n\n<p>스테이 헝그리라는 게 참 힘든 일입니다.</p>\n\n<p>가만히 생각해 보면 인생에서 제가 성취했다고 할 만한 것은 네카라쿠배에서 일해봤다는 거.<br />\n<a href=\"https://withcoffee.app/\">커피한잔이란 서비스</a> 만들어서 회사 없이 스스로 돈 벌고 있다는 거.</p>\n\n<p>이거 딱 2개밖에 없는 거 같습니다.<br />\n별 보잘것없는 성취입니다.</p>\n\n<p>웃기는 것은 겨우 이 정도 성취에도 <strong>이만하면 됐지</strong> 하는 생각이 든다는 것…</p>\n\n<p>훨씬 큰 성취를 이룬 사람들이 계속 Stay Hungry 마음가짐을 유지하고 있는 걸 보면 존경심이 우러나옵니다.</p>\n\n<p>짜치는 일들을 계속하고 싶습니다.<br />\n배고플 때의 마음을 잊고 싶지가 않습니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2023/10/06/acquisition-is-hard.html\">전단지 돌리는 게 뭐 어때서</a></li>\n  <li><a href=\"/essay/2021/11/15/LG전자-앞에서-전단지를-돌리던-개발자.html\">LG전자 앞에서 전단지를 돌리던 개발자</a></li>\n</ul>",
        "contentSnippet": "사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다.\n링크드인 게시글에서\n여전히 짜치는 일들을 합니다.\n쪽팔린 것은 정말 싫은데… 그 쪽팔린 것들을 안 해보고 포기하면 그게 더 쪽팔려서.\n스테이 헝그리라는 게 참 힘든 일입니다.\n가만히 생각해 보면 인생에서 제가 성취했다고 할 만한 것은 네카라쿠배에서 일해봤다는 거.\n커피한잔이란 서비스 만들어서 회사 없이 스스로 돈 벌고 있다는 거.\n이거 딱 2개밖에 없는 거 같습니다.\n웃기는 것은 겨우 이 정도 성취에도 이만하면 됐지 하는 생각이 든다는 것…\n훨씬 큰 성취를 이룬 사람들이 계속 Stay Hungry 마음가짐을 유지하고 있는 걸 보면 존경심이 우러나옵니다.\n짜치는 일들을 계속하고 싶습니다.\n\n함께 읽으면 좋은 글:\n전단지 돌리는 게 뭐 어때서\nLG전자 앞에서 전단지를 돌리던 개발자",
        "summary": "사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다. 짜치는 일을 안 하기는 어렵다. 견뎌야 한다. 그런데 그런 일들을 견디기 위해서는 본인이 생각했을 때 의미있는 사업을 해야 한다. 적어도 내게 의미있는 이야기 이어야 한다. 링크드인 게시글에서",
        "id": "https://jeho.page/essay/2025/05/02/petty-stuff",
        "isoDate": "2025-05-02T12:39:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "인디게임이 만들어지는 과정",
        "link": "http://serverdown.tistory.com/1305",
        "pubDate": "Mon, 5 May 2025 11:11:55 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1305#entry1305comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"657\" data-origin-height=\"290\"><span data-url=\"https://blog.kakaocdn.net/dn/Tn44M/btsNJVqAABr/AkKEZaK2IHVKZM4soLDX90/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Tn44M/btsNJVqAABr/AkKEZaK2IHVKZM4soLDX90/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Tn44M/btsNJVqAABr/AkKEZaK2IHVKZM4soLDX90/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTn44M%2FbtsNJVqAABr%2FAkKEZaK2IHVKZM4soLDX90%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"657\" height=\"290\" data-origin-width=\"657\" data-origin-height=\"290\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=vY-Z0XnOSs8\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=vY-Z0XnOSs8</a></p>\n<p data-ke-size=\"size16\">영상은 링크로 가서 봐야하군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">2048 로 시작했지만 계속 뭔가 들어가게 되면서&nbsp;</p>\n<p data-ke-size=\"size16\">다른 게임이 됩니다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=vY-Z0XnOSs8\n영상은 링크로 가서 봐야하군요\n \n2048 로 시작했지만 계속 뭔가 들어가게 되면서 \n다른 게임이 됩니다.",
        "guid": "http://serverdown.tistory.com/1305",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-05-05T02:11:55.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "주말작업 - 라즈베리파이 서버 설치 / HTTPS &amp; TCP 서버 배포 / mysql 설치 / drizzle orm",
        "link": "http://serverdown.tistory.com/1304",
        "pubDate": "Mon, 5 May 2025 00:22:04 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1304#entry1304comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"840\" data-origin-height=\"280\"><span data-url=\"https://blog.kakaocdn.net/dn/cgLOmB/btsNKxJtwmF/hQdsA4H2RXHfb2BOq8MrWk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cgLOmB/btsNKxJtwmF/hQdsA4H2RXHfb2BOq8MrWk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cgLOmB/btsNKxJtwmF/hQdsA4H2RXHfb2BOq8MrWk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcgLOmB%2FbtsNKxJtwmF%2FhQdsA4H2RXHfb2BOq8MrWk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"840\" height=\"280\" data-origin-width=\"840\" data-origin-height=\"280\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\">묵혀둔 라스베리파이 다시 꺼냈습니다.</h2>\n<p data-ke-size=\"size16\">4년동안 별 활용도 없이 조금 해보다 말고를 반복했는데 이번엔 진짜로 갑니다.</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"309\" data-origin-height=\"225\"><span data-url=\"https://blog.kakaocdn.net/dn/QbnnE/btsNKg82GFc/jcxSCiDA1UEGEApDEPh1U0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/QbnnE/btsNKg82GFc/jcxSCiDA1UEGEApDEPh1U0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/QbnnE/btsNKg82GFc/jcxSCiDA1UEGEApDEPh1U0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQbnnE%2FbtsNKg82GFc%2FjcxSCiDA1UEGEApDEPh1U0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"309\" height=\"225\" data-origin-width=\"309\" data-origin-height=\"225\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\">HTTPS 서비스</h2>\n<p data-ke-size=\"size16\">라즈베리파이 꺼내서 서버 설치하고 node.js 로 https 서버도 띄웠습니다.</p>\n<p data-ke-size=\"size16\">주소는 공유기에서 제공하는 DDNS 인가? 하는 이름 서비스 받아왔구요</p>\n<p data-ke-size=\"size16\">letsencrypt 의 webroot 방식으로 인증 받아 사용중입니다.<br /><span style=\"color: initial; letter-spacing: 0px;\">진작 이렇게 쓸껄 돌아돌아 여기까지 왔네요</span></p>\n<p data-ke-size=\"size16\">https 주소: <a href=\"https://sid123.tplinkdns.com/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://sid123.tplinkdns.com/</a></p>\n<p data-ke-size=\"size16\">기능은 없고 표시만 된다 수준입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">TCP 서버</h2>\n<p data-ke-size=\"size16\">telnet sid123.tplinkdns.com 3001</p>\n<p data-ke-size=\"size16\">입력하고 엔터치면 echo 해 줍니다.</p>\n<p data-ke-size=\"size16\">되는지만 확인한거라</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"400\" data-origin-height=\"400\"><span data-url=\"https://blog.kakaocdn.net/dn/cDi5uu/btsNKoFO8jY/TeapA3XaiiUz8jPMXxmtW1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/cDi5uu/btsNKoFO8jY/TeapA3XaiiUz8jPMXxmtW1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/cDi5uu/btsNKoFO8jY/TeapA3XaiiUz8jPMXxmtW1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcDi5uu%2FbtsNKoFO8jY%2FTeapA3XaiiUz8jPMXxmtW1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"400\" height=\"400\" data-origin-width=\"400\" data-origin-height=\"400\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\">MYSQL 설치 &amp; drizzle orm</h2>\n<p data-ke-size=\"size16\">mysql 이 없어졌고 mariaDB 가 생겼습니다.&nbsp;</p>\n<p data-ke-size=\"size16\">둘은 호환 되는거라 기능은 동일합니다.</p>\n<p data-ke-size=\"size16\">orm 을 사용해 보려고 설치한거라 별 문제는 없었습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"460\" data-origin-height=\"460\"><span data-url=\"https://blog.kakaocdn.net/dn/cSWtiK/btsNLaNMOa0/RjqLAeonQ2u9Ld9Wy1VRg1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cSWtiK/btsNLaNMOa0/RjqLAeonQ2u9Ld9Wy1VRg1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cSWtiK/btsNLaNMOa0/RjqLAeonQ2u9Ld9Wy1VRg1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcSWtiK%2FbtsNLaNMOa0%2FRjqLAeonQ2u9Ld9Wy1VRg1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"460\" height=\"460\" data-origin-width=\"460\" data-origin-height=\"460\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">DRIZZLE ORM 은 코드로 db 를 관리하는 방식을 말합니다.</p>\n<p data-ke-size=\"size16\">코드에 테이블을 만들면 db 에도 테이블이 생기고 코드를 고치면 db 도고쳐지고</p>\n<p data-ke-size=\"size16\">자동완성도 되고 그런식입니다.</p>\n<p data-ke-size=\"size16\">처음부터 제대로 테이블을 만들 수 없고 쿼리오류가 나서 몇가지 기능은&nbsp; 빼버렸습니다.</p>\n<p data-ke-size=\"size16\">겨우 select insert 만 해서 놔둔 상태입니다.</p>\n<p data-ke-size=\"size16\">DRIZZLE 은 최근에 나온 ORM 인데 문제가 좀 있습니다.</p>\n<p data-ke-size=\"size16\">날짜가 UTC 기반으로 저장되는데 다르게 저장할 방법도 없습니다.</p>\n<p data-ke-size=\"size16\">그냥 저장할때 마다 UTC 에 + 9시간 더하던지 해야하는거 같은데</p>\n<p data-ke-size=\"size16\">좀더 써봐야겠습니다. 진지한 서비스는 아직 못할 수준이군요</p>",
        "contentSnippet": "묵혀둔 라스베리파이 다시 꺼냈습니다.\n4년동안 별 활용도 없이 조금 해보다 말고를 반복했는데 이번엔 진짜로 갑니다.\n \n \n\n\nHTTPS 서비스\n라즈베리파이 꺼내서 서버 설치하고 node.js 로 https 서버도 띄웠습니다.\n주소는 공유기에서 제공하는 DDNS 인가? 하는 이름 서비스 받아왔구요\nletsencrypt 의 webroot 방식으로 인증 받아 사용중입니다.\n진작 이렇게 쓸껄 돌아돌아 여기까지 왔네요\nhttps 주소: https://sid123.tplinkdns.com/\n기능은 없고 표시만 된다 수준입니다.\n \nTCP 서버\ntelnet sid123.tplinkdns.com 3001\n입력하고 엔터치면 echo 해 줍니다.\n되는지만 확인한거라\n \n\n\nMYSQL 설치 & drizzle orm\nmysql 이 없어졌고 mariaDB 가 생겼습니다. \n둘은 호환 되는거라 기능은 동일합니다.\norm 을 사용해 보려고 설치한거라 별 문제는 없었습니다.\n\n\nDRIZZLE ORM 은 코드로 db 를 관리하는 방식을 말합니다.\n코드에 테이블을 만들면 db 에도 테이블이 생기고 코드를 고치면 db 도고쳐지고\n자동완성도 되고 그런식입니다.\n처음부터 제대로 테이블을 만들 수 없고 쿼리오류가 나서 몇가지 기능은  빼버렸습니다.\n겨우 select insert 만 해서 놔둔 상태입니다.\nDRIZZLE 은 최근에 나온 ORM 인데 문제가 좀 있습니다.\n날짜가 UTC 기반으로 저장되는데 다르게 저장할 방법도 없습니다.\n그냥 저장할때 마다 UTC 에 + 9시간 더하던지 해야하는거 같은데\n좀더 써봐야겠습니다. 진지한 서비스는 아직 못할 수준이군요",
        "guid": "http://serverdown.tistory.com/1304",
        "categories": [
          "drizzle",
          "ORM",
          "라즈베리파이",
          "서버"
        ],
        "isoDate": "2025-05-04T15:22:04.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "집에서 서버 돌려보자 / https / tcp / mysql",
        "link": "http://serverdown.tistory.com/1303",
        "pubDate": "Sun, 4 May 2025 18:13:38 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1303#entry1303comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"840\" data-origin-height=\"280\"><span data-url=\"https://blog.kakaocdn.net/dn/b6Zpb7/btsNJvTmO3N/iUveO7kCeyJZTymMkN9u5k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b6Zpb7/btsNJvTmO3N/iUveO7kCeyJZTymMkN9u5k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b6Zpb7/btsNJvTmO3N/iUveO7kCeyJZTymMkN9u5k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb6Zpb7%2FbtsNJvTmO3N%2FiUveO7kCeyJZTymMkN9u5k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"840\" height=\"280\" data-origin-width=\"840\" data-origin-height=\"280\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">시작하게된 썰</h2>\n<p data-ke-size=\"size16\">온라인 게임 만들자는 요청이 있어서 서버를 집에서 돌리기로 했다.</p>\n<p data-ke-size=\"size16\">저번엔 비용은 비용대로 내고 서비스도 망해서 돈이 아까웠다.<br />그래서 이번엔 집에서 할 작정이다.</p>\n<p data-ke-size=\"size16\">매번 쪼금하다 포기했던 라즈베리파이도 꺼내보고 집에서 서버도 돌려볼려고 한다.<br />이번엔 포기하지 말고 끝까지 가볼 생각이다.</p>\n<p data-ke-size=\"size16\">예전에 커피한잔 개발자가 말하길 서비스가 워낙 작아서 비용쓸꺼 없이 집에서 서비스 돌렸다고 한다.</p>\n<p data-ke-size=\"size16\">나도 따라해야겠다.&nbsp;<br />한달에 2.5만원 정도인데 서비스 초기에는 비용이 너무 아깝다.<br />그리고 성능도 라즈베리파이보다 못했었다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">MariaDB 설치하기 ( mysql 과 호환된다.)</h2>\n<p data-ke-size=\"size16\">ORM 을 써볼려고 Drizzle 을 보고 있다. 프리즈마 다음에 나온거라 이게 좋다고 한다.</p>\n<p data-ke-size=\"size16\">설치문서: <a href=\"https://serverdown.tistory.com/1302\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://serverdown.tistory.com/1302</a></p>\n<figure id=\"og_1746349589802\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"라즈베리파이4 MariaDB 설치 및 외부 접속 설정 / Raspberry Pi 4 / RP4\" data-og-description=\"mysql 은 이제 없고 maria db 는 설치가 가능했다.둘은 어차피 호환이 되는 거라 고민없이 Maria db 넘어간다 설치 명령어apt-get updateapt-get upgradeapt-cache search mariadbapt-get install mariadb-server 테스트 실행여\" data-og-host=\"blog.sidnft.com\" data-og-source-url=\"https://serverdown.tistory.com/1302\" data-og-url=\"https://blog.sidnft.com/1302\" data-og-image=\"https://scrap.kakaocdn.net/dn/bWukOV/hyYMSvmSIJ/TAMnoYN9IhY3f5G7l18kD0/img.png?width=800&amp;height=266&amp;face=0_0_800_266,https://scrap.kakaocdn.net/dn/choBkr/hyYMUUf4iR/Pa2oNPn5Y09ImMKNpbvEAk/img.png?width=800&amp;height=266&amp;face=0_0_800_266,https://scrap.kakaocdn.net/dn/e0aD3/hyYM3p69SR/bfXOwpCeNkB16PeeGevr3K/img.png?width=1200&amp;height=400&amp;face=0_0_1200_400\"><a href=\"https://serverdown.tistory.com/1302\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://serverdown.tistory.com/1302\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bWukOV/hyYMSvmSIJ/TAMnoYN9IhY3f5G7l18kD0/img.png?width=800&amp;height=266&amp;face=0_0_800_266,https://scrap.kakaocdn.net/dn/choBkr/hyYMUUf4iR/Pa2oNPn5Y09ImMKNpbvEAk/img.png?width=800&amp;height=266&amp;face=0_0_800_266,https://scrap.kakaocdn.net/dn/e0aD3/hyYM3p69SR/bfXOwpCeNkB16PeeGevr3K/img.png?width=1200&amp;height=400&amp;face=0_0_1200_400');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">라즈베리파이4 MariaDB 설치 및 외부 접속 설정 / Raspberry Pi 4 / RP4</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">mysql 은 이제 없고 maria db 는 설치가 가능했다.둘은 어차피 호환이 되는 거라 고민없이 Maria db 넘어간다 설치 명령어apt-get updateapt-get upgradeapt-cache search mariadbapt-get install mariadb-server 테스트 실행여</p>\n<p class=\"og-host\" data-ke-size=\"size16\">blog.sidnft.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size26\">express 로 https 서비스 돌려보기</h2>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">이거 되면 웹소켓도 돌릴 수 있어서 웹용 온라인 게임을 만들수 있다.<br />유니티의 웹빌드도 온라인 게임 가능하다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">준비중</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size26\">tcp 서버 열여서 소켓 통신 (온라인게임 만들기용도)</h2>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">웹통신은 아니고 소켓 통신이다.<br />웹소켓은 통신이 느린 감이 있어서 모바일에선 소켓 통신을 쓰도록한다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\"><span style=\"text-align: start;\">준비중</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">실제서비스</h2>\n<p data-ke-size=\"size16\">뭐만들지도 잘 모르겠다. 만들고나면 여기다 업데이트 하겠다.</p>\n<p data-ke-size=\"size16\">준비중</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "시작하게된 썰\n온라인 게임 만들자는 요청이 있어서 서버를 집에서 돌리기로 했다.\n저번엔 비용은 비용대로 내고 서비스도 망해서 돈이 아까웠다.\n그래서 이번엔 집에서 할 작정이다.\n매번 쪼금하다 포기했던 라즈베리파이도 꺼내보고 집에서 서버도 돌려볼려고 한다.\n이번엔 포기하지 말고 끝까지 가볼 생각이다.\n예전에 커피한잔 개발자가 말하길 서비스가 워낙 작아서 비용쓸꺼 없이 집에서 서비스 돌렸다고 한다.\n나도 따라해야겠다. \n한달에 2.5만원 정도인데 서비스 초기에는 비용이 너무 아깝다.\n그리고 성능도 라즈베리파이보다 못했었다.\n \nMariaDB 설치하기 ( mysql 과 호환된다.)\nORM 을 써볼려고 Drizzle 을 보고 있다. 프리즈마 다음에 나온거라 이게 좋다고 한다.\n설치문서: https://serverdown.tistory.com/1302\n\n \n라즈베리파이4 MariaDB 설치 및 외부 접속 설정 / Raspberry Pi 4 / RP4\nmysql 은 이제 없고 maria db 는 설치가 가능했다.둘은 어차피 호환이 되는 거라 고민없이 Maria db 넘어간다 설치 명령어apt-get updateapt-get upgradeapt-cache search mariadbapt-get install mariadb-server 테스트 실행여\nblog.sidnft.com\n\n \n \nexpress 로 https 서비스 돌려보기\n이거 되면 웹소켓도 돌릴 수 있어서 웹용 온라인 게임을 만들수 있다.\n유니티의 웹빌드도 온라인 게임 가능하다.\n준비중\n \ntcp 서버 열여서 소켓 통신 (온라인게임 만들기용도)\n웹통신은 아니고 소켓 통신이다.\n웹소켓은 통신이 느린 감이 있어서 모바일에선 소켓 통신을 쓰도록한다.\n준비중\n \n실제서비스\n뭐만들지도 잘 모르겠다. 만들고나면 여기다 업데이트 하겠다.\n준비중",
        "guid": "http://serverdown.tistory.com/1303",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-05-04T09:13:38.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "라즈베리파이4 MariaDB 설치 및 외부 접속 설정 / Raspberry Pi 4 / RP4",
        "link": "http://serverdown.tistory.com/1302",
        "pubDate": "Sun, 4 May 2025 17:59:35 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1302#entry1302comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1200\" data-origin-height=\"400\"><span data-url=\"https://blog.kakaocdn.net/dn/bwhIjX/btsNJtH4Iiv/1ElakCdRugpRTvNiofnkh1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bwhIjX/btsNJtH4Iiv/1ElakCdRugpRTvNiofnkh1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bwhIjX/btsNJtH4Iiv/1ElakCdRugpRTvNiofnkh1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbwhIjX%2FbtsNJtH4Iiv%2F1ElakCdRugpRTvNiofnkh1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1200\" height=\"400\" data-origin-width=\"1200\" data-origin-height=\"400\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"840\" data-origin-height=\"280\"><span data-url=\"https://blog.kakaocdn.net/dn/cd5AjN/btsNLnzu0UH/cMLw6f6htYNMXK2epvETYk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cd5AjN/btsNLnzu0UH/cMLw6f6htYNMXK2epvETYk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cd5AjN/btsNLnzu0UH/cMLw6f6htYNMXK2epvETYk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcd5AjN%2FbtsNLnzu0UH%2FcMLw6f6htYNMXK2epvETYk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"840\" height=\"280\" data-origin-width=\"840\" data-origin-height=\"280\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">mysql 은 이제 없고 maria db 는 설치가 가능했다.</p>\n<p data-ke-size=\"size16\">둘은 어차피 호환이 되는 거라 고민없이 Maria db 넘어간다</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<h2 data-ke-size=\"size26\">설치 명령어</h2>\n<p data-ke-size=\"size16\">apt-get update<br />apt-get upgrade<br />apt-cache&nbsp;search&nbsp;mariadb<br />apt-get&nbsp;install&nbsp;mariadb-server</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">테스트 실행</h2>\n<p data-ke-size=\"size16\">여기까지 오면 설치가 된것이다.</p>\n<p data-ke-size=\"size16\">mysql<br />show databases;</p>\n<p data-ke-size=\"size16\">이렇게 치면 db 리스트가 나오는데 이러면 동작하는 것이다.</p>\n<p data-ke-size=\"size16\">나가는 명령어는&nbsp;</p>\n<p data-ke-size=\"size16\">exit</p>\n<p data-ke-size=\"size16\">다 ctrl-c 눌러도 안나가져서 고민했었다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">외부 접속용 계정 만들기</h2>\n<p data-ke-size=\"size16\">root 는 그냥 두고 새 계정을 만들어 사용한다.</p>\n<p data-ke-size=\"size16\">CREATE&nbsp;USER&nbsp;'pi_user'@'%'&nbsp;IDENTIFIED&nbsp;BY&nbsp;'pi_user'; <br />GRANT&nbsp;ALL&nbsp;PRIVILEGES&nbsp;ON&nbsp;*.*&nbsp;TO&nbsp;'pi_user'@'%'&nbsp;WITH&nbsp;GRANT&nbsp;OPTION; <br />FLUSH&nbsp;PRIVILEGES;</p>\n<p data-ke-size=\"size16\">pi_user 를 만들었다. 암호 변경방법</p>\n<p data-ke-size=\"size16\">use&nbsp;mysql; <br />set password for 'pi_user'@'%' = password('새로운 암호'); <br />flush&nbsp;privileges;</p>\n<p data-ke-size=\"size16\">암호는 이렇게 바꾸면 된다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">서버의 포트 열기</h2>\n<p data-ke-size=\"size16\">pi 에는 방화벽이 없지만 maria db 가 bind 초기값이 127.0.0.1 이라 접속이 안되었다</p>\n<p data-ke-size=\"size16\">열린 포트를 확인한다. 처음엔 3306 이지만 확인하는 방법도 알면 좋을 것이다.</p>\n<p data-ke-size=\"size16\"><span style=\"background-color: #000000; color: #000000; text-align: start;\">SHOW</span><span style=\"text-align: start;\"> </span><span style=\"background-color: #000000; color: #000000; text-align: start;\">GLOBAL</span><span style=\"text-align: start;\"> VARIABLES </span><span style=\"background-color: #000000; color: #000000; text-align: start;\">LIKE</span><span style=\"text-align: start;\"> </span><span style=\"background-color: #000000; color: #000000; text-align: start;\">'PORT'</span><span style=\"text-align: start;\">;</span></p>\n<p data-ke-size=\"size16\">3306 이라고 나온다.</p>\n<p data-ke-size=\"size16\">exit 로 쉘로 나가서 열린 포트를 확인한다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">열린 포트 확인</p>\n<p data-ke-size=\"size16\">ss&nbsp;-ltn&nbsp;|&nbsp;grep&nbsp;3306</p>\n<p data-ke-size=\"size16\">LISTEN&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;127.0.0.1:3306</p>\n<p data-ke-size=\"size16\">127.0.0.1 로 보인다. 0.0.0.0 으로 열어야 외부접속을 받아 줄 것이다. 설정을 변경해보자</p>\n<p data-ke-size=\"size16\">nano&nbsp;/etc/mysql/mariadb.conf.d/50-server.cnf</p>\n<p data-ke-size=\"size16\">nano 로 이파일을 수정하자</p>\n<p data-ke-size=\"size16\">밑으로 내려가다보면 127~~~ 이 보인다.</p>\n<p data-ke-size=\"size16\">bind-address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;127.0.0.1</p>\n<p data-ke-size=\"size16\">를</p>\n<p data-ke-size=\"size16\">bind-address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;0.0.0.0</p>\n<p data-ke-size=\"size16\">로 고치고 저장</p>\n<p data-ke-size=\"size16\">db 도 재시작해야한다.</p>\n<p data-ke-size=\"size16\">systemctl&nbsp;restart&nbsp;mariadb</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">다시 열린 포트 확인</p>\n<p data-ke-size=\"size16\">ss&nbsp;-ltn&nbsp;|&nbsp;grep&nbsp;3306 <br />LISTEN&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:3306&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0.0.0:*</p>\n<p data-ke-size=\"size16\">0.0.0.0 으로 잘 고쳐졌다.</p>\n<p data-ke-size=\"size16\">HeidiSQL 을 꺼내 접속해보니 잘되었다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "mysql 은 이제 없고 maria db 는 설치가 가능했다.\n둘은 어차피 호환이 되는 거라 고민없이 Maria db 넘어간다\n \n설치 명령어\napt-get update\napt-get upgrade\napt-cache search mariadb\napt-get install mariadb-server\n \n테스트 실행\n여기까지 오면 설치가 된것이다.\nmysql\nshow databases;\n이렇게 치면 db 리스트가 나오는데 이러면 동작하는 것이다.\n나가는 명령어는 \nexit\n다 ctrl-c 눌러도 안나가져서 고민했었다.\n \n외부 접속용 계정 만들기\nroot 는 그냥 두고 새 계정을 만들어 사용한다.\nCREATE USER 'pi_user'@'%' IDENTIFIED BY 'pi_user'; \nGRANT ALL PRIVILEGES ON *.* TO 'pi_user'@'%' WITH GRANT OPTION; \nFLUSH PRIVILEGES;\npi_user 를 만들었다. 암호 변경방법\nuse mysql; \nset password for 'pi_user'@'%' = password('새로운 암호'); \nflush privileges;\n암호는 이렇게 바꾸면 된다.\n \n서버의 포트 열기\npi 에는 방화벽이 없지만 maria db 가 bind 초기값이 127.0.0.1 이라 접속이 안되었다\n열린 포트를 확인한다. 처음엔 3306 이지만 확인하는 방법도 알면 좋을 것이다.\nSHOW GLOBAL VARIABLES LIKE 'PORT';\n3306 이라고 나온다.\nexit 로 쉘로 나가서 열린 포트를 확인한다.\n \n열린 포트 확인\nss -ltn | grep 3306\nLISTEN   0        80              127.0.0.1:3306\n127.0.0.1 로 보인다. 0.0.0.0 으로 열어야 외부접속을 받아 줄 것이다. 설정을 변경해보자\nnano /etc/mysql/mariadb.conf.d/50-server.cnf\nnano 로 이파일을 수정하자\n밑으로 내려가다보면 127~~~ 이 보인다.\nbind-address            = 127.0.0.1\n를\nbind-address            = 0.0.0.0\n로 고치고 저장\ndb 도 재시작해야한다.\nsystemctl restart mariadb\n \n다시 열린 포트 확인\nss -ltn | grep 3306 \nLISTEN 0      80           0.0.0.0:3306      0.0.0.0:*\n0.0.0.0 으로 잘 고쳐졌다.\nHeidiSQL 을 꺼내 접속해보니 잘되었다.",
        "guid": "http://serverdown.tistory.com/1302",
        "categories": [
          "프로그래밍/개발메모",
          "mariadb",
          "MySQL",
          "pi4"
        ],
        "isoDate": "2025-05-04T08:59:35.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "혁신의 본질은 대단한 개인이 아니고 환경이다.",
        "link": "http://serverdown.tistory.com/1301",
        "pubDate": "Sun, 4 May 2025 12:19:21 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1301#entry1301comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"460\" data-origin-height=\"274\"><span data-url=\"https://blog.kakaocdn.net/dn/b7c9zU/btsNK9gUtR1/4PKUSYmOB0cYkkd43M5U40/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b7c9zU/btsNK9gUtR1/4PKUSYmOB0cYkkd43M5U40/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b7c9zU/btsNK9gUtR1/4PKUSYmOB0cYkkd43M5U40/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb7c9zU%2FbtsNK9gUtR1%2F4PKUSYmOB0cYkkd43M5U40%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"460\" height=\"274\" data-origin-width=\"460\" data-origin-height=\"274\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=_pRm-OcjcSg\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=_pRm-OcjcSg</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=_pRm-OcjcSg\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/gZyLR/hyYMSvhx21/ucpsmsXYhi5DnfJRCYiFuk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bstZW2/hyYM16P9eG/dVfRoBflspNaEMyBL4nqwK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"태평양에 미국의 섬이 많은 이유는 새똥 때문? | 인류를 넘사벽 동물로 만든 두가지 터닝 포인트!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/_pRm-OcjcSg\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상에는 어마어마한 혁신을 이룬 기술들은</p>\n<p data-ke-size=\"size16\">동시에대 여러명이 개발중이거나 개발되었으며&nbsp;</p>\n<p data-ke-size=\"size16\">효율 편의성 국적 지위 등의 이유로 나가 떨어졌습니다.</p>\n<p data-ke-size=\"size16\">실패한 개인은 이렇게 파산하고 쓰러지고 사라지는 것은 필연입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">내가 개발했지만 성공하지 못하는 것은 당연하니 실망하지말고 개선하되</p>\n<p data-ke-size=\"size16\">인생 몰빵은 하지맙시다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">성공은 우연이며 내 차례가 아닐 수 있습니다.<br />다음 환경에 적응해야합니다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=_pRm-OcjcSg\n\n\n\n \n영상에는 어마어마한 혁신을 이룬 기술들은\n동시에대 여러명이 개발중이거나 개발되었으며 \n효율 편의성 국적 지위 등의 이유로 나가 떨어졌습니다.\n실패한 개인은 이렇게 파산하고 쓰러지고 사라지는 것은 필연입니다.\n \n내가 개발했지만 성공하지 못하는 것은 당연하니 실망하지말고 개선하되\n인생 몰빵은 하지맙시다.\n \n성공은 우연이며 내 차례가 아닐 수 있습니다.\n다음 환경에 적응해야합니다.",
        "guid": "http://serverdown.tistory.com/1301",
        "categories": [
          "유튜브",
          "인생",
          "혁신"
        ],
        "isoDate": "2025-05-04T03:19:21.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "시진핑 내려온다는 설이 있습니다.",
        "link": "http://serverdown.tistory.com/1300",
        "pubDate": "Sat, 3 May 2025 13:06:01 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1300#entry1300comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"970\" data-origin-height=\"647\"><span data-url=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\" data-phocus=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\"><img src=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbieO5I%2FbtsNJKvDMEe%2Fz5OARPkCy0Kn3Mr3KEo1Mk%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"970\" height=\"647\" data-origin-width=\"970\" data-origin-height=\"647\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">2025-05-02 현재 이런 영상들이 올라왔습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=0cYeltObgZ4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=0cYeltObgZ4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=0cYeltObgZ4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/rwz1G/hyYMRQpmnE/tujdJC5FkdTd7NZqnNY8CK/img.jpg?width=1280&amp;height=720&amp;face=296_88_622_444,https://scrap.kakaocdn.net/dn/cbSjPb/hyYMTU2STJ/1rJJWqGFCSL5zww8AcZFX0/img.jpg?width=1280&amp;height=720&amp;face=296_88_622_444\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"【시사포커스】 충격! 습근평 연금설!그가 전권 행사?! (태산 보도)\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/0cYeltObgZ4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=y-lr8RIHj_4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=y-lr8RIHj_4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=y-lr8RIHj_4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bkrbOp/hyYM0fyeXe/1lC7X5lwm0uOsyiOu0eu51/img.jpg?width=1280&amp;height=720&amp;face=232_46_972_324,https://scrap.kakaocdn.net/dn/bg3xNt/hyYMSaJWAT/rVVBTbgLpBz7aD86gQk6O1/img.jpg?width=1280&amp;height=720&amp;face=232_46_972_324\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"[지식뉴스] &quot;미 국채 붕괴? 아무도 못 던져요&quot; 버티던 시진핑, 결국 굴복하나..트럼프가 중국 흔드\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/y-lr8RIHj_4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근 이상한 뉴스들도 있었습니다.</p>\n<p data-ke-size=\"size16\">트럼프는 중국과 협상중이라고 하고<br />시진핑은 협상하지 않았다고 하는 뉴스죠</p>\n<p data-ke-size=\"size16\">이때 그럼 다른 사람이랑 협상 중이겠거니 했는데</p>\n<p data-ke-size=\"size16\">아예 차기정권이랑 협상 중인거 같군요</p>\n<p data-ke-size=\"size16\">시진핑이 내려온다면 중국은 근본적으로 바뀔 수 있기 때문에<br />중국 투자에 고려해봐야합니다.</p>\n<p data-ke-size=\"size16\">한국 IMF 맞았을대 처럼 그런 상황이 아닐까 싶네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근 할투에서도 중국 투자를 권유하고 있고&nbsp;<br />서재형 또한 여러나라에 분산하라는 방향을 제시하고 있습니다.</p>\n<p data-ke-size=\"size16\">모든 사람 말이 맞으려면 단 한가지 결과로 모이게 됩니다.</p>\n<p data-ke-size=\"size16\">시진핑이 내려고 중국은 이전과 다르게 된다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">아마도 트럼프의 미친짓이 차기 중국 정권을 움직인거 같습니다.<br />이대로만 망한다는 공감대를 형성 한걸로 보입니다.</p>\n<p data-ke-size=\"size16\">저는</p>\n<p data-ke-size=\"size16\">CWEB - 중국 인터넷 기업 2배</p>\n<p data-ke-size=\"size16\">항셍 테크&nbsp;</p>\n<p data-ke-size=\"size16\">곧 나올 중국 테크 TOP10 ETF 등에 자금을 옮길 예정입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">존버나드 신규 중국 ETF: <a href=\"https://www.youtube.com/watch?v=69aVRSuI14o&amp;t=960s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=69aVRSuI14o&amp;t=960s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=69aVRSuI14o\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/dBHP8N/hyYPg9EYOz/g7dkzMd9O81hsiiwvgKgp1/img.jpg?width=1280&amp;height=720&amp;face=52_128_382_256,https://scrap.kakaocdn.net/dn/bj17WG/hyYMZ1Y6M8/N8SRfPBrJgQ4iTObT7VnO1/img.jpg?width=1280&amp;height=720&amp;face=52_128_382_256\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"드디어 중국ETF들이 대거 상장합니다. 중국주식이 요즘 주목받는 이유 슈카월드도 소개 ( TIGER 차\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/69aVRSuI14o\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">할투 중국 중계: <a href=\"https://www.youtube.com/watch?v=Cpwoz5PV1wc\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=Cpwoz5PV1wc</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Cpwoz5PV1wc\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bYTxH9/hyYMWxrxBT/uFuAYDbsu7KuDB1S5vldm0/img.jpg?width=1280&amp;height=720&amp;face=892_90_1016_226,https://scrap.kakaocdn.net/dn/L2ahS/hyYM2YJSai/7KnlyM5vzbtI9k0d4kuIpk/img.jpg?width=1280&amp;height=720&amp;face=892_90_1016_226\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"1433. 중국 경제 무너지는 중? 현장에 가봤더니 충격!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Cpwoz5PV1wc\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근에 중국 투자를 권유하는 내용이 점점 늘고 있습니다.</p>",
        "contentSnippet": "2025-05-02 현재 이런 영상들이 올라왔습니다.\n \n영상: https://www.youtube.com/watch?v=0cYeltObgZ4\n\n\n\n \n \n \n영상: https://www.youtube.com/watch?v=y-lr8RIHj_4\n\n\n\n \n최근 이상한 뉴스들도 있었습니다.\n트럼프는 중국과 협상중이라고 하고\n시진핑은 협상하지 않았다고 하는 뉴스죠\n이때 그럼 다른 사람이랑 협상 중이겠거니 했는데\n아예 차기정권이랑 협상 중인거 같군요\n시진핑이 내려온다면 중국은 근본적으로 바뀔 수 있기 때문에\n중국 투자에 고려해봐야합니다.\n한국 IMF 맞았을대 처럼 그런 상황이 아닐까 싶네요\n \n최근 할투에서도 중국 투자를 권유하고 있고 \n서재형 또한 여러나라에 분산하라는 방향을 제시하고 있습니다.\n모든 사람 말이 맞으려면 단 한가지 결과로 모이게 됩니다.\n시진핑이 내려고 중국은 이전과 다르게 된다.\n \n아마도 트럼프의 미친짓이 차기 중국 정권을 움직인거 같습니다.\n이대로만 망한다는 공감대를 형성 한걸로 보입니다.\n저는\nCWEB - 중국 인터넷 기업 2배\n항셍 테크 \n곧 나올 중국 테크 TOP10 ETF 등에 자금을 옮길 예정입니다.\n \n존버나드 신규 중국 ETF: https://www.youtube.com/watch?v=69aVRSuI14o&t=960s\n\n\n\n \n할투 중국 중계: https://www.youtube.com/watch?v=Cpwoz5PV1wc\n\n\n\n \n최근에 중국 투자를 권유하는 내용이 점점 늘고 있습니다.",
        "guid": "http://serverdown.tistory.com/1300",
        "categories": [
          "투자",
          "중국투자"
        ],
        "isoDate": "2025-05-03T04:06:01.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "2025-05-01 살질 일기 / 시간낭비",
        "link": "http://serverdown.tistory.com/1299",
        "pubDate": "Thu, 1 May 2025 14:35:04 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1299#entry1299comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcdUlpx%2FbtsNGsPJP2Z%2FvZoYEgEqlDlK7s1vz0sHC1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">블록분해 프로젝트의 프로덕션이 진행되었다.</p>\n<p data-ke-size=\"size16\">이제 광고를 붙이려고 작업하였는데</p>\n<p data-ke-size=\"size16\">Unity Ads 의 banner 를 기기에 붙이는데 실패했다.</p>\n<p data-ke-size=\"size16\">에디터에서는 나오지만 장비에서는 에러로그와 함께 실패하였다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">c# 에서&nbsp;</p>\n<p data-ke-size=\"size16\">Advertisement.Banner.Load(unit_id,&nbsp;options);</p>\n<p data-ke-size=\"size16\">를 호출하면</p>\n<p data-ke-size=\"size16\">05-01 14:16:19.146 21562 29909 E Unity&nbsp;&nbsp;&nbsp;: AndroidJavaException: java.lang.RuntimeException: Can't create handler inside thread Thread[Thread-4,10,main] that has not called Looper.prepare()</p>\n<p data-ke-size=\"size16\">에러 로그가 나온다.</p>\n<p data-ke-size=\"size16\">내용만 봐선 쓰레드 문제인거 같은데 메인쓰레드에서 돌렸는데도 발생한다.</p>\n<p data-ke-size=\"size16\">아예 모듈이 잘못된거 같다는 생각이 들지만 해결 방법은 없다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">같은 문제로 고생하는 글도 찾았다.<br />도움은 안되었다.</p>\n<p data-ke-size=\"size16\"><a href=\"https://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">여기에 game_id 를 넣어야할꺼 같은데 클릭이 안되서 입력할 수가 없다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"705\" data-origin-height=\"874\"><span data-url=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhnOao%2FbtsNGGz9olk%2FG4nTpcGEyDdSLKKlHpcWMk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"705\" height=\"874\" data-origin-width=\"705\" data-origin-height=\"874\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">왜이러는 걸까...</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">unlink 후 다시 link 를 하니 자동으로 입력되었다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"569\" data-origin-height=\"658\"><span data-url=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbf0k0C%2FbtsNHqC4NxU%2FFlsKYPyuJ7hKRVOx6Y6sW1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"569\" height=\"658\" data-origin-width=\"569\" data-origin-height=\"658\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">unlink /&nbsp; link 는 여기서 한다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"570\" data-origin-height=\"616\"><span data-url=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Frlrzk%2FbtsNG0EVAtA%2F4l3vIitRot5sE3KskaRahK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"570\" height=\"616\" data-origin-width=\"570\" data-origin-height=\"616\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">모듈이 뭔가 부족해서 그런건가 싶어서 관련있을꺼 같은 모듈도 추가해봤다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"708\" data-origin-height=\"440\"><span data-url=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkzAZa%2FbtsNHdYkEJ1%2FMqKqp5BZCR3ftWmcTwKnx0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"708\" height=\"440\" data-origin-width=\"708\" data-origin-height=\"440\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">돌아라 얍 !</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">조금 바꾸고 다시 시도 조금 바꾸고 다시 시도<br />하다보니 시간이 너무 많이 소모되네요<br />시간낭비 갑인거 같습니다.</p>\n<h2 data-ke-size=\"size26\">결론</h2>\n<p data-ke-size=\"size16\">쥐뿔도 되는거 없습니다.</p>\n<p data-ke-size=\"size16\">Admob 으로 갑니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">3시간 더 소비해서 배너 붙였습니다.</p>\n<p data-ke-size=\"size16\">시작이 잘못되면 시간이 낭비되는군요.</p>\n<p data-ke-size=\"size16\">익숙한걸 해야겠습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1108\" data-origin-height=\"1477\"><span data-url=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbDFjmJ%2FbtsNG1cQmDI%2FGmb4ZUmISL6O282OHQYmak%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1108\" height=\"1477\" data-origin-width=\"1108\" data-origin-height=\"1477\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "블록분해 프로젝트의 프로덕션이 진행되었다.\n이제 광고를 붙이려고 작업하였는데\nUnity Ads 의 banner 를 기기에 붙이는데 실패했다.\n에디터에서는 나오지만 장비에서는 에러로그와 함께 실패하였다.\n \nc# 에서 \nAdvertisement.Banner.Load(unit_id, options);\n를 호출하면\n05-01 14:16:19.146 21562 29909 E Unity   : AndroidJavaException: java.lang.RuntimeException: Can't create handler inside thread Thread[Thread-4,10,main] that has not called Looper.prepare()\n에러 로그가 나온다.\n내용만 봐선 쓰레드 문제인거 같은데 메인쓰레드에서 돌렸는데도 발생한다.\n아예 모듈이 잘못된거 같다는 생각이 들지만 해결 방법은 없다.\n \n같은 문제로 고생하는 글도 찾았다.\n도움은 안되었다.\nhttps://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764\n \n여기에 game_id 를 넣어야할꺼 같은데 클릭이 안되서 입력할 수가 없다.\n\n\n왜이러는 걸까...\n \n \nunlink 후 다시 link 를 하니 자동으로 입력되었다.\n\n\n \nunlink /  link 는 여기서 한다.\n\n\n \n모듈이 뭔가 부족해서 그런건가 싶어서 관련있을꺼 같은 모듈도 추가해봤다.\n\n\n돌아라 얍 !\n \n조금 바꾸고 다시 시도 조금 바꾸고 다시 시도\n하다보니 시간이 너무 많이 소모되네요\n시간낭비 갑인거 같습니다.\n결론\n쥐뿔도 되는거 없습니다.\nAdmob 으로 갑니다.\n \n3시간 더 소비해서 배너 붙였습니다.\n시작이 잘못되면 시간이 낭비되는군요.\n익숙한걸 해야겠습니다.",
        "guid": "http://serverdown.tistory.com/1299",
        "categories": [
          "프로그래밍/개발메모",
          "AdMob",
          "unity"
        ],
        "isoDate": "2025-05-01T05:35:04.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "(만드는중) Admob 유럽 규정 메시지 만들기",
        "link": "http://serverdown.tistory.com/1298",
        "pubDate": "Thu, 1 May 2025 10:26:11 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1298#entry1298comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"321\" data-origin-height=\"186\"><span data-url=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcnBnYe%2FbtsNGzBcZ9d%2FSfizrxF1YBsO3q9XXNHMvk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"321\" height=\"186\" data-origin-width=\"321\" data-origin-height=\"186\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">유럽은 무슨 규정이 있나봅니다. 광고 표시 매시지를 만들라고 하네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1057\" data-origin-height=\"244\"><span data-url=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTYNE5%2FbtsNGDQSy2L%2Fc4L1PY06ZDfKtJEqNAIYOK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1057\" height=\"244\" data-origin-width=\"1057\" data-origin-height=\"244\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"702\" data-origin-height=\"484\"><span data-url=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCv73g%2FbtsNG9IfJRM%2FCDHhGS52RkxSA7B8KPJOp0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"702\" height=\"484\" data-origin-width=\"702\" data-origin-height=\"484\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">진행해봐야겠습니다.</p>\n<p data-ke-size=\"size16\">들어가서 봤는데 별게 없었습니다.</p>\n<p data-ke-size=\"size16\">이미 메시지가 있고 그 글자를 바꿀 수 있는 정도 였습니다.</p>\n<p data-ke-size=\"size16\">만들어진 메시지는 [옵션 관리] 와 [동의] 였습니다.</p>\n<p data-ke-size=\"size16\">그냥 광고 붙이면 될꺼 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "유럽은 무슨 규정이 있나봅니다. 광고 표시 매시지를 만들라고 하네요\n \n\n\n \n\n\n진행해봐야겠습니다.\n들어가서 봤는데 별게 없었습니다.\n이미 메시지가 있고 그 글자를 바꿀 수 있는 정도 였습니다.\n만들어진 메시지는 [옵션 관리] 와 [동의] 였습니다.\n그냥 광고 붙이면 될꺼 같습니다.",
        "guid": "http://serverdown.tistory.com/1298",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-05-01T01:26:11.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "블록 분해 게임 - 아이디어",
        "link": "http://serverdown.tistory.com/1297",
        "pubDate": "Wed, 30 Apr 2025 13:24:43 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1297#entry1297comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FP4bFn%2FbtsNEDjpjYV%2Fy93mj4s7A8HLhuGGpDD4G0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">블록 분해 게임</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/_EVuM-JzcMw\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/_EVuM-JzcMw</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=_EVuM-JzcMw\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/baKKvT/hyYIcBcZDR/GcLxtaCiuMNWkNAxajpkZk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/ZcB5w/hyYIaDolnG/ltMLSXY2NNdfAVxk3zHHHK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Brick Away v2 play\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/_EVuM-JzcMw\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">상자대신 물고기</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/dPZPeKa-1ws\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/dPZPeKa-1ws</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=dPZPeKa-1ws\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/oeyKZ/hyYH5PEkTR/fnJGf7kXE8YnkfrIGtAuXk/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/czZaeo/hyYMfDVKag/cso5y4KSBMJ63IkMhMKu3k/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"물고기상자\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/dPZPeKa-1ws\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">한칸애 물고기 하나를 너으면 찌그러트려야하고</p>\n<p data-ke-size=\"size16\">3칸짜리 상자를 상어 한마리에 대입하는건 왜곡이 덜하겠군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "블록 분해 게임\n영상: https://youtu.be/_EVuM-JzcMw\n\n\n\n \n상자대신 물고기\n영상: https://youtu.be/dPZPeKa-1ws\n\n\n\n한칸애 물고기 하나를 너으면 찌그러트려야하고\n3칸짜리 상자를 상어 한마리에 대입하는건 왜곡이 덜하겠군요",
        "guid": "http://serverdown.tistory.com/1297",
        "categories": [
          "프로그래밍/개발메모",
          "게임",
          "아이디어"
        ],
        "isoDate": "2025-04-30T04:24:43.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "vue motion-v defineComponent export 예제",
        "link": "http://serverdown.tistory.com/1296",
        "pubDate": "Wed, 30 Apr 2025 13:16:16 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1296#entry1296comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"627\" data-origin-height=\"246\"><span data-url=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbnlovK%2FbtsNGvjAZhK%2FzXk1RGWGiXlrDbiQzDQX7k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"627\" height=\"246\" data-origin-width=\"627\" data-origin-height=\"246\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">독립된 버튼 하나를 완성한 컴포넌트 소스이다.</p>\n<p data-ke-size=\"size16\">setup 방식 말고 <span style=\"text-align: start;\">defineComponent 방식이 없어서 하나 올려본다.</span></p>\n<p data-ke-size=\"size16\">특징</p>\n<p data-ke-size=\"size16\">to 를 받아서 페이지 이동시켜주는데</p>\n<p data-ke-size=\"size16\">press 애니메이션을 볼 수 있도록 setTimeout 으로 0.5초 딜레이를 줬다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">CODE</h2>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">template</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">class</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"mt-8\"</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">motion.button</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; :</span><span style=\"color: #9cdcfe;\">while-hover</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #ffffff;\">{ </span><span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">1.5</span><span style=\"color: #ffffff;\">, </span><span style=\"color: #9cdcfe;\">x</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">50</span><span style=\"color: #ffffff;\"> }</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; :</span><span style=\"color: #9cdcfe;\">while-press</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #ffffff;\">{ </span><span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">0.8</span><span style=\"color: #ffffff;\"> }</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; @</span><span style=\"color: #9cdcfe;\">click</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #dcdcaa;\">delay_push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">to</span><span style=\"color: #ffffff;\">)</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #9cdcfe;\">class</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"tw_btn_detail\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; more detail</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">motion.button</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">template</span><span style=\"color: #808080;\">&gt;</span></div>\n<br />\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">lang</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"ts\"</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #7ca668;\">// components\\DetailButton.vue</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">motion</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"motion-v\"</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">defineComponent</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"vue\"</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">useRouter</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"vue-router\"</span><span style=\"color: #ffffff;\">;</span></div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #c586c0;\">default</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #dcdcaa;\">defineComponent</span><span style=\"color: #ffffff;\">({</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">name</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"DetailButton\"</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">props</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #4ec9b0;\">to</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #4ec9b0;\">String</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">components</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #ce9178;\">\"motion.button\"</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">motion</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #4ec9b0;\">button</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #dcdcaa;\">data</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> () </span><span style=\"color: #569cd6;\">=&gt;</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #569cd6;\">const</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #dcdcaa;\">useRouter</span><span style=\"color: #ffffff;\">();</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #c586c0;\">return</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; };</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">methods</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #dcdcaa;\">delay_push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">_to</span><span style=\"color: #d4d4d4;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #4ec9b0;\">string</span><span style=\"color: #ffffff;\">) {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #dcdcaa;\">setTimeout</span><span style=\"color: #ffffff;\">(() </span><span style=\"color: #569cd6;\">=&gt;</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style=\"color: #569cd6;\">this</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #dcdcaa;\">push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">_to</span><span style=\"color: #ffffff;\">);</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; }, </span><span style=\"color: #b5cea8;\">500</span><span style=\"color: #ffffff;\">);</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">});</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div>\n<br />\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">style</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">scope</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #d7ba7d;\">.tw_btn_detail</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #c586c0;\">@apply</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">rounded-full</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">border-2</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">px-4</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">py-2</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #ffffff;\">}</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">style</span><span style=\"color: #808080;\">&gt;</span></div>\n</div>\n<h2 data-ke-size=\"size26\">import&nbsp;</h2>\n<p data-ke-size=\"size16\"><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">DetailButton</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #ce9178;\">\"@/components/DetailButton.vue\"</span><span style=\"color: #ffffff;\">;</span></p>\n<h2 data-ke-size=\"size26\">template&nbsp;</h2>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">DetailButton</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">to</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"/af\"</span><span style=\"color: #808080;\">&gt;</span><span style=\"color: #ffffff;\">more detail</span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">DetailButton</span><span style=\"color: #808080;\">&gt;</span></div>\n</div>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/SKlJDIWingw\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/SKlJDIWingw</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=SKlJDIWingw\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cydSP2/hyYMZ8eElS/6BypzFhcz0EUQQ2RrEUDKk/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/cPwUeQ/hyYIiuFBoY/veza3ixUUiohKZSn4kRmK1/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"motion v exmaple\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/SKlJDIWingw\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">블링블링</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "독립된 버튼 하나를 완성한 컴포넌트 소스이다.\nsetup 방식 말고 defineComponent 방식이 없어서 하나 올려본다.\n특징\nto 를 받아서 페이지 이동시켜주는데\npress 애니메이션을 볼 수 있도록 setTimeout 으로 0.5초 딜레이를 줬다.\n \nCODE\n<template>\n  <div class=\"mt-8\">\n    <motion.button\n      :while-hover=\"{ scale: 1.5, x: 50 }\"\n      :while-press=\"{ scale: 0.8 }\"\n      @click=\"delay_push(to)\"\n      class=\"tw_btn_detail\"\n    >\n      more detail\n    </motion.button>\n  </div>\n</template>\n<script lang=\"ts\">\n// components\\DetailButton.vue\nimport { motion } from \"motion-v\";\nimport { defineComponent } from \"vue\";\nimport { useRouter } from \"vue-router\";\nexport default defineComponent({\n  name: \"DetailButton\",\n  props: {\n    to: String,\n  },\n  components: {\n    \"motion.button\": motion.button,\n  },\n  data: () => {\n    const router = useRouter();\n    return {\n      router,\n    };\n  },\n  methods: {\n    delay_push(_to: string) {\n      setTimeout(() => {\n        this.router.push(_to);\n      }, 500);\n    },\n  },\n});\n</script>\n<style scope>\n.tw_btn_detail {\n  @apply rounded-full border-2 px-4 py-2;\n}\n</style>\nimport \nimport DetailButton from \"@/components/DetailButton.vue\";\ntemplate \n<DetailButton to=\"/af\">more detail</DetailButton>\n \n영상: https://youtu.be/SKlJDIWingw\n\n\n\n블링블링",
        "guid": "http://serverdown.tistory.com/1296",
        "categories": [
          "프로그래밍/개발메모",
          "motion-v",
          "VUE"
        ],
        "isoDate": "2025-04-30T04:16:16.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": [
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "한비자, 관계의 기술",
        "link": "https://jojoldu.tistory.com/826",
        "pubDate": "Tue, 6 May 2025 09:38:32 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "https://jojoldu.tistory.com/826#entry826comment",
        "content": "<p data-ke-size=\"size16\">사람 대 사람 사이에서 가장 중요한 건 서로간의 '이득' 이라는 것을 책 한권을 통해 전달하는 것으로 읽혔다.<br />이득 기반으로 인간 관계가 움직인다는 사상을 인정하고 좋아하기에 전체적인 내용을 많이 동의했다.</p>\n<p data-ke-size=\"size16\">내 기준에서 회사는 4단계의 계층이 있다고 본다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>대표</li>\n<li>C레벨 혹은 임원</li>\n<li>중간 리더</li>\n<li>팀원</li>\n</ul>\n<p data-ke-size=\"size16\">이 중 이 책에서 언급되는 \"군주\"는 사실상 회사의 대표라고 볼 수 있는데, 대표에게 직언을 할 수 있는 위치인 C레벨 (혹은 임원)은 이 책의 여러 고사들에게서 배울 점이 많다.</p>\n<p data-ke-size=\"size16\">그 중에서도 아래 메세지들은 지금의 내 위치에서 생각해볼 것들이 많았다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"군주에게 간언하고 설득하는 자는 군주가 자기를 사랑하는지, 미워하는지 살펴 본 후 설득해야 한다는 것을 알 수 있다\"</li>\n<li>\"누군가를 설득할 때에는 상대방이 수치심을 느끼거나 부끄러워하는 감정을 건드리지 말아야 한다\"</li>\n<li>\"일반적으로 군주들은 신임하지 않는 자가 간언하면 비방한다고 생각하고, 신임하는 사람이 간언하지 않으면 봉록만을 훔치는 자라고 생각하는 경향이 있다\"</li>\n</ul>\n<p data-ke-size=\"size16\">\"<b>군주에게서 충분한 신임을 얻기 전까지는 간언을 조심해야하며, 신뢰를 얻은 후에는 간언을 계속 해야하며, 신뢰의 정도에 따라 간언의 수위를 조절해야하며, 간언을 전달할 때는 최대한 역린을 건드리지 않도록 주의하면서 전달해야한다</b>\" 로 정리될 수 있다.</p>\n<p data-ke-size=\"size16\">이 내용은 군주에게 간언해야하는 위치의 사람들이 항상 생각해야할 것들이다.<br />회사로 본다면 아마도 C레벨과 임원들이 해당될 것 같다.</p>\n<p data-ke-size=\"size16\">종종 회사에 합류하자마자 바로 어떠한 액션을 취하려고 강한 주장을 하거나 대표에게 직언을 하는 리더나 임원들의 이야기들을 들을때가 있다.<br />그리고 그 리더는 대부분 얼마가지 않아 퇴사를 했다는 것도.</p>\n<p data-ke-size=\"size16\">상위 직급자와 나와의 신뢰 관계는 어느 정도이며, 이 정도에서는 어디까지의 이야기가 허용 가능한지 판단할 수 있는 시야를 갖고 있는 사람이 좋은 리더가 될 수 있다는 생각이 들었다.</p>\n<p data-ke-size=\"size16\">또 하나 중요한 점은 C레벨 혹은 중간 리더는 <b>본인의 신뢰 자산을 기반으로 아직 충분한 신뢰 자산이 쌓이지 않은 팀원들의 건설적인 의견을 대표에게 잘 전달해야한다는 것</b>이다.</p>\n<p data-ke-size=\"size16\">예전에 <a href=\"https://www.linkedin.com/posts/xissy_%EC%BF%A0%ED%8C%A1%EC%9D%84-%EB%96%A0%EB%82%98-%EB%8B%A4%EB%A5%B8-%ED%95%9C%EA%B5%AD-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85%EB%93%A4%EC%97%90%EC%84%9C-%EC%9D%BC%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%98-%ED%92%88%EA%B3%A0-%EC%9E%88%EB%8D%98-%EA%B6%81%EA%B8%88%EC%A6%9D%EC%9D%B4-%ED%95%98%EB%82%98-activity-7278644686020296704-Bg7l?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAACnY5SkBWe-Gk8dRhHNKDYYBGK-ix9ICZxg\">태호님이 작성하신 쿠팡의 통역가분들에 대한 이야기</a> 를 보고나서, 이것이 조직의 중간 리더의 역할과 다를 바 없다고 생각이 들었다.</p>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">&ldquo;회사가 커지면 상하 위계 간은 물론이고 각 조직 간의 크고 작은 이해관계와 알력다툼이 만연하며 성장 속도가 늦어지는데, 어째서 쿠팡은 이렇게 되지 않았고 이를 최소화할 수 있었을까?&rdquo;<br />나중에 문득 깨달은 것이지만, 나는 바로 쿠팡의 통역사분들이 이를 가능하게 했다고 감히 생각한다.<br />쿠팡은 한국 본사의 임원진부터 글로벌 오피스의 실무자까지 많은 외국인들과 함께 일한다.<br />업무 시 공용어는 한국어보다는 영어다.<br />모든 주요 문서는 영어로 작성되고 모든 주요 미팅에는 전담 통역사가 함께 들어와 실시간 통역을 지원한다.<br />그런데 이분들의 실시간 통역이란 것이 단순히 영어를 한글로, 한글을 영어로 바꿔 말하는 게 다가 아니더라.<br />쿠팡의 통역사분들은 수많은 미팅에 들어가고 문서를 검토하며 회사 전반과 각 조직의 가장 많은 정보와 컨텍스트를 갖고 있어 이것이 마법을 만들어낸다.<br /><br />예를 들어,<br />누군가 오해를 살 수 있는 표현을 해도 -&gt; 통역이 오해 없도록 명확한 용어로 바뀐다.<br />누군가 잘못된 정보를 근거로 해도 -&gt; 통역 시 가볍게 다시 물어 정정할 수 있도록 한다.<br />누군가 조직 이기주의 등 편협한 소리를 해도 -&gt; 통역이 톤앤매너를 조절해 건설적으로 이것이 논의될 수 있는 기회로 바꾼다.<br />미팅이 같은 말을 반복하며 빙빙 돌고 있어도 -&gt; 통역이 간파하고 원래의 주제에서 결론을 낼 수 있도록 넛지를 한다.<br />누군가 너무 감정적이거나 화를 내도 -&gt; 통역이 그 감정이 잠시 담길 작은 버퍼가 되어준다.</p>\n<p data-ke-size=\"size16\">등등등<br />정말 수많은 부분에서 통역사분들의 역량이 발휘된다.<br />굉장한 건 이것들이 미팅 안에서 절대 티가 나지 않는다는 것이다.<br />통역사가 주인공이 되는 일은 없다.<br />다만 그 미팅은 여러 함정을 무사히 넘기고 좋은 의사 결정을 이룬다.<br />누군가 정말 잘하는 것들은 그대로 스며들어 당연한 것이 되지 잘한 티가 나지 않더라.</p>\n</blockquote>\n<p data-ke-size=\"size16\">팀원들은 아직까지 조직간 관계나 처세 등에 대해 익숙하지 않다.<br />대표와의 신뢰 관계도 충분하지 않다.<br />이런 상황에서 팀원 -&gt; 대표로의 간언은 유효할 확률이 거의 없다.<br />이때 중간 리더가 (쿠팡의 통역처럼) 팀원의 의견을 잘 해석하여 대표가 설득될 수 있는 수준으로 포장하여 전달해야하는 역할을 해야한다.<br />중간 리더의 신뢰 자산은 그러라고 쌓는 것이다.</p>\n<p data-ke-size=\"size16\">물론 이 외에도 조직원들을 어떻게 대해야하는지에 대해서도 인사이트를 얻을 수 있었다.<br />조직 내에서 해야할 일들에 대해서 \"<b>이 일은 본인에게도 좋은 일이다</b>\" 는 것으로 자연스럽게 귀결 될 수 있도록 전달하는 것이 참 중요하다.</p>\n<p data-ke-size=\"size16\">조직장으로서는 이 일을 개인을 위한 일 인것처럼 느껴지게 할 것인지를 고민해야하고,<br />개인은 어떻게 하면 이 일이 나에게 도움이 되도록 해석할 것인가가 전체적인 삶의 만족도를 결정하게 되는 것 같다.</p>\n<h2 data-ke-size=\"size26\">책 속 문장</h2>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">한비자는 <b>인간은 이해득실만을 따질 뿐 도덕성은 생각하지 않는다</b>고 보았다.<br />그는 이것을 부모가 낳은 아이가 아들일 경우와 딸일 경우 보여주는 행동의 차이로 설명했다.<br />아들이나 딸 모두 부모의 품에서 나왔지만, 아들을 선호하는 것은 따지고 보면 부모 자신의 노후를 걱정한 데서 비롯된다는 것이다.<br />또한 사람들의 이해관계는 늘 어긋난다.<br />예컨대 군주와 신하가 생각하는 이익이 각기 다르며, 남편과 아내, 형과 아우 사이에도 이해는 서로 엇갈리기 마련이다.<br />이 중에서도 특히 군주와 신하는 남남이 만나 각자의 이익을 추구하는 관계이므로 군주가 신하에게 충성만을 요구한다거나 도덕만으로 다스린다는 것은 어리석은 일이다.</p>\n</blockquote>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">[옛날 미자하는 위나라 왕에게 총애를 받았다.<br />위나라의 범에 왕의 수레를 몰래 타는 자에게는 발이 잘리는 형벌을 내리도록 하였다.<br />미자하의 어머니가 병들었을 때 어떤 사람이 밤에 몰래 와서 미자하에게 알려주었다.<br />그러자 미자하는 슬쩍 왕의 수레를 타고 나갔다.<br />왕은 이 일을 듣고 그를 칭찬하며 말하였다.<br />\"효자로구나. 어머지를 위하느라 발이 잘리는 벌도 잊었구나!\"<br />다른 날 미자하는 왕과 함께 정원에서 노닐다가 복숭아를 따먹게 되었는데, 맛이 아주 달자 반쪽을 왕에게 주었다.<br />왕이 말하였다.<br />\"나를 사랑하는구나. 맛이 좋으니 과인을 잊지 않고 맛보게 하는구나\"<br />세월이 흘러 미자하의 미모가 쇠하고 왕의 사랑도 식게 되었을 때 한번은 미자하가 왕에게 죄를 지었다.<br />그러자 왕은 이렇게 말하였다.<br />\"이놈은 옛날에 과인의 수레를 몰래 훔쳐 타기도 하고, 또 자기가 먹던 복숭아를 과인에게 먹으라고 내밀기도 하였다.\"<br />미자하의 행동은 변함이 없었으나 전에는 칭찬을 받았지만 뒤에는 벌을 받은 까닭은 사랑이 미움으로 바뀌었기 때문이다.]<br />...<br /><b>군주에게 간언하고 설득하는 자는 군주가 자기를 사랑하는지, 미워하는지 살펴 본 후 설득해야 한다는 것을 알 수 있다</b>.<br />...<br />비단 왕뿐 아니라 사람에게도 저마다 역린이 있다.<br /><b>누군가를 설득할 때에는 상대방이 수치심을 느끼거나 부끄러워하는 감정을 건드리지 말아야 한다</b>.<br />아무리 논리적으로 설득할지라도 외면당할 수 있기 때문이다.<br />결국 <b>상대방의 마음을 잘 헤아려 나의 의도를 그에게 맞추려면 상대방의 역린을 읽어낼 수 있는 감수성이 필요하다</b>.<br />설득은 마음을 움직이는 일이므로 논리보다는 감성이 앞선다고 할 수 있다.</p>\n</blockquote>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">노자는 통치술의 첫째로서, 통치가의 존재 그 자체를 부정하고 있다.<br /><b>앞에 나서서 설치는 자는 최상의 군주가 아니고 뒤에서 조용히 조종하는 자가 최상</b>이라는 것이다.<br />물론 그 존재 자체도 느끼지 못할 때 그것이 최상이다.</p>\n</blockquote>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">일반적으로 군주들은 <b>신임하지 않는 자가 간언하면 비방한다고 생각하고, 신임하는 사람이 간언하지 않으면 봉록만을 훔치는 자</b>라고 생각하는 경향이 있다.<br />그러므로 <b>신하들은 충성스러운 간언을 할 분위기가 조성되지 않으면 침묵하게 된다</b>.<br />이러한 문제를 해결하고자 당 태종은 간언을 독려한다.<br />\"사람이 자기 얼굴을 보려면 반드시 맑은 거울이 있어야 하고, 군주가 자기 허물을 알려면 반드시 충직한 신하에 의지해야 하오.<br />군주가 만일 자신을 현인이나 성인이라고 여기는 착각에 빠져있고, 신하도 정확한 의견을 제시하여 바로잡지 않는다면, 이런 상황에서 위험과 실패를 면하는 것이 어찌 가능하겠소?<br />군주가 국토와 사직을 버리면 신하 또한 자신의 집안을 보존할 수 없소.<br />수양제는 잔인하고 포학했지만 신하가 입을 다문 채 아무 말도 하지 않았으므로 자기에게 어떤 허물이 있는지 듣지 못했소.<br />결국 나라는 멸망했소.<br />우세기 등의 대신 또한 오래지 않아 피살되었소.<br />이것은 과거 오래전의 일이 아니오.<br />대신들은 내가 백성들에게 불리한 일을 하는 것을 보게 되면, 반드시 거리낌 없이 직언을 하여 비판 해야 하오.\"</p>\n</blockquote>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">한비자는 도성을 떠나 유람을 가는 것 또한 지극히 경계했다.<br /><b>군주가 궁궐을 비우고 외부로 떠나는 것은 결국 궁정의 긴장감을 무너뜨리게 되므로</b>, 조직의 긴장도를 위해 군주는 유람할 시간이 없다는 것이다.</p>\n</blockquote>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">아이가 어릴 때 부모의 양육이 소홀하게 되면, 그 자식은 성장하여 부모를 원망하게 된다.<br />또 그 자식이 장년이 되었을 때 부모에 대한 효도를 망각하면, 그 부모는 자식을 책망하게 될 것이다.<br />부자 사이는 가장 친밀한 사이임에도 책망하거나 원망한다는 것은 서로 상대가 자기를 위해서 일을 한다는 마음이 없었기 때문이다.<br />아랫사람을 고용하여 씨앗을 뿌리거나 경작을 시킬 때, 주인이 집안 살림에서 과용을 하며 좋은 음식과 쫗은 옷을 주고 노동의 대가로 돈도 챙겨주는 것은 그 아랫사람을 배려하기 때문이 아니다 .<br />그렇게 후하게 대해야만 깊이 땅을 팔 것이며, 잡초를 샅샅이 뽑으리라 생각하기 때문인 것이다.<br />...<br />결국 주인과 일하는 사람 양쪽 모두 자기 이익만을 생각하고 있는 것이다.<br />그러므로 자기에게 이익이 되도록 일을 하면 적대적인 나라 사람과도 우호적으로 지낼 수 있고, 자기 이익을 떠나게 되면 부자지간도 서로가 원망하게 된다는 것이다.<br />...<br /><b>남을 위해 죽도록 일하는 것이 아니라 자신의 이익과 목표를 위해 일한다고 생각하면 상대에 대한 평가도 어렵지 않으리라</b>.</p>\n</blockquote>\n<h2 data-ke-size=\"size26\">ps.</h2>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">여담이지만, 챕터별로 편차가 있지만, 챕터의 제목과 챕터의 전반부/후반부의 내용이 상이해서 생뚱 맞다는 느낌을 받았다.<br />챕터의 첫번째 사례로 드는 고사는 제목과 잘 어울려서 챕터를 이해하는데 도움이 되었지만, 두번째, 세번째 고사는 사실 챕터에서 이야기하고자 하는 바와 어울리지 않을 때가 많아서 띠용한 적이 종종 있다.<br />예를 들어 \"15. 만족을 모르면 근심도 떠나지 않는다\" 에서 2번째 고사는 새옹지마 사례다보니 '일희일비 하지 않는다' 라는 주제에선 어울리겠지만, '만족할 줄 알아야 한다'를 이야기해야하는 이 챕터에서는 전혀 어울리는 고사는 아니라고 생각했다.<br />그 외에도 이런 사례가 많아서 책의 좋은 내용과 별개로 책에 대한 평가를 할 때 '절하' 되는 근거가 될 것 같다.</p>\n</blockquote>",
        "contentSnippet": "사람 대 사람 사이에서 가장 중요한 건 서로간의 '이득' 이라는 것을 책 한권을 통해 전달하는 것으로 읽혔다.\n이득 기반으로 인간 관계가 움직인다는 사상을 인정하고 좋아하기에 전체적인 내용을 많이 동의했다.\n내 기준에서 회사는 4단계의 계층이 있다고 본다.\n대표\nC레벨 혹은 임원\n중간 리더\n팀원\n이 중 이 책에서 언급되는 \"군주\"는 사실상 회사의 대표라고 볼 수 있는데, 대표에게 직언을 할 수 있는 위치인 C레벨 (혹은 임원)은 이 책의 여러 고사들에게서 배울 점이 많다.\n그 중에서도 아래 메세지들은 지금의 내 위치에서 생각해볼 것들이 많았다.\n\"군주에게 간언하고 설득하는 자는 군주가 자기를 사랑하는지, 미워하는지 살펴 본 후 설득해야 한다는 것을 알 수 있다\"\n\"누군가를 설득할 때에는 상대방이 수치심을 느끼거나 부끄러워하는 감정을 건드리지 말아야 한다\"\n\"일반적으로 군주들은 신임하지 않는 자가 간언하면 비방한다고 생각하고, 신임하는 사람이 간언하지 않으면 봉록만을 훔치는 자라고 생각하는 경향이 있다\"\n\"군주에게서 충분한 신임을 얻기 전까지는 간언을 조심해야하며, 신뢰를 얻은 후에는 간언을 계속 해야하며, 신뢰의 정도에 따라 간언의 수위를 조절해야하며, 간언을 전달할 때는 최대한 역린을 건드리지 않도록 주의하면서 전달해야한다\" 로 정리될 수 있다.\n이 내용은 군주에게 간언해야하는 위치의 사람들이 항상 생각해야할 것들이다.\n회사로 본다면 아마도 C레벨과 임원들이 해당될 것 같다.\n종종 회사에 합류하자마자 바로 어떠한 액션을 취하려고 강한 주장을 하거나 대표에게 직언을 하는 리더나 임원들의 이야기들을 들을때가 있다.\n그리고 그 리더는 대부분 얼마가지 않아 퇴사를 했다는 것도.\n상위 직급자와 나와의 신뢰 관계는 어느 정도이며, 이 정도에서는 어디까지의 이야기가 허용 가능한지 판단할 수 있는 시야를 갖고 있는 사람이 좋은 리더가 될 수 있다는 생각이 들었다.\n또 하나 중요한 점은 C레벨 혹은 중간 리더는 본인의 신뢰 자산을 기반으로 아직 충분한 신뢰 자산이 쌓이지 않은 팀원들의 건설적인 의견을 대표에게 잘 전달해야한다는 것이다.\n예전에 태호님이 작성하신 쿠팡의 통역가분들에 대한 이야기 를 보고나서, 이것이 조직의 중간 리더의 역할과 다를 바 없다고 생각이 들었다.\n“회사가 커지면 상하 위계 간은 물론이고 각 조직 간의 크고 작은 이해관계와 알력다툼이 만연하며 성장 속도가 늦어지는데, 어째서 쿠팡은 이렇게 되지 않았고 이를 최소화할 수 있었을까?”\n나중에 문득 깨달은 것이지만, 나는 바로 쿠팡의 통역사분들이 이를 가능하게 했다고 감히 생각한다.\n쿠팡은 한국 본사의 임원진부터 글로벌 오피스의 실무자까지 많은 외국인들과 함께 일한다.\n업무 시 공용어는 한국어보다는 영어다.\n모든 주요 문서는 영어로 작성되고 모든 주요 미팅에는 전담 통역사가 함께 들어와 실시간 통역을 지원한다.\n그런데 이분들의 실시간 통역이란 것이 단순히 영어를 한글로, 한글을 영어로 바꿔 말하는 게 다가 아니더라.\n쿠팡의 통역사분들은 수많은 미팅에 들어가고 문서를 검토하며 회사 전반과 각 조직의 가장 많은 정보와 컨텍스트를 갖고 있어 이것이 마법을 만들어낸다.\n예를 들어,\n누군가 오해를 살 수 있는 표현을 해도 -> 통역이 오해 없도록 명확한 용어로 바뀐다.\n누군가 잘못된 정보를 근거로 해도 -> 통역 시 가볍게 다시 물어 정정할 수 있도록 한다.\n누군가 조직 이기주의 등 편협한 소리를 해도 -> 통역이 톤앤매너를 조절해 건설적으로 이것이 논의될 수 있는 기회로 바꾼다.\n미팅이 같은 말을 반복하며 빙빙 돌고 있어도 -> 통역이 간파하고 원래의 주제에서 결론을 낼 수 있도록 넛지를 한다.\n누군가 너무 감정적이거나 화를 내도 -> 통역이 그 감정이 잠시 담길 작은 버퍼가 되어준다.\n등등등\n정말 수많은 부분에서 통역사분들의 역량이 발휘된다.\n굉장한 건 이것들이 미팅 안에서 절대 티가 나지 않는다는 것이다.\n통역사가 주인공이 되는 일은 없다.\n다만 그 미팅은 여러 함정을 무사히 넘기고 좋은 의사 결정을 이룬다.\n누군가 정말 잘하는 것들은 그대로 스며들어 당연한 것이 되지 잘한 티가 나지 않더라.\n팀원들은 아직까지 조직간 관계나 처세 등에 대해 익숙하지 않다.\n대표와의 신뢰 관계도 충분하지 않다.\n이런 상황에서 팀원 -> 대표로의 간언은 유효할 확률이 거의 없다.\n이때 중간 리더가 (쿠팡의 통역처럼) 팀원의 의견을 잘 해석하여 대표가 설득될 수 있는 수준으로 포장하여 전달해야하는 역할을 해야한다.\n중간 리더의 신뢰 자산은 그러라고 쌓는 것이다.\n물론 이 외에도 조직원들을 어떻게 대해야하는지에 대해서도 인사이트를 얻을 수 있었다.\n조직 내에서 해야할 일들에 대해서 \"이 일은 본인에게도 좋은 일이다\" 는 것으로 자연스럽게 귀결 될 수 있도록 전달하는 것이 참 중요하다.\n조직장으로서는 이 일을 개인을 위한 일 인것처럼 느껴지게 할 것인지를 고민해야하고,\n개인은 어떻게 하면 이 일이 나에게 도움이 되도록 해석할 것인가가 전체적인 삶의 만족도를 결정하게 되는 것 같다.\n책 속 문장\n한비자는 인간은 이해득실만을 따질 뿐 도덕성은 생각하지 않는다고 보았다.\n그는 이것을 부모가 낳은 아이가 아들일 경우와 딸일 경우 보여주는 행동의 차이로 설명했다.\n아들이나 딸 모두 부모의 품에서 나왔지만, 아들을 선호하는 것은 따지고 보면 부모 자신의 노후를 걱정한 데서 비롯된다는 것이다.\n또한 사람들의 이해관계는 늘 어긋난다.\n예컨대 군주와 신하가 생각하는 이익이 각기 다르며, 남편과 아내, 형과 아우 사이에도 이해는 서로 엇갈리기 마련이다.\n이 중에서도 특히 군주와 신하는 남남이 만나 각자의 이익을 추구하는 관계이므로 군주가 신하에게 충성만을 요구한다거나 도덕만으로 다스린다는 것은 어리석은 일이다.\n[옛날 미자하는 위나라 왕에게 총애를 받았다.\n위나라의 범에 왕의 수레를 몰래 타는 자에게는 발이 잘리는 형벌을 내리도록 하였다.\n미자하의 어머니가 병들었을 때 어떤 사람이 밤에 몰래 와서 미자하에게 알려주었다.\n그러자 미자하는 슬쩍 왕의 수레를 타고 나갔다.\n왕은 이 일을 듣고 그를 칭찬하며 말하였다.\n\"효자로구나. 어머지를 위하느라 발이 잘리는 벌도 잊었구나!\"\n다른 날 미자하는 왕과 함께 정원에서 노닐다가 복숭아를 따먹게 되었는데, 맛이 아주 달자 반쪽을 왕에게 주었다.\n왕이 말하였다.\n\"나를 사랑하는구나. 맛이 좋으니 과인을 잊지 않고 맛보게 하는구나\"\n세월이 흘러 미자하의 미모가 쇠하고 왕의 사랑도 식게 되었을 때 한번은 미자하가 왕에게 죄를 지었다.\n그러자 왕은 이렇게 말하였다.\n\"이놈은 옛날에 과인의 수레를 몰래 훔쳐 타기도 하고, 또 자기가 먹던 복숭아를 과인에게 먹으라고 내밀기도 하였다.\"\n미자하의 행동은 변함이 없었으나 전에는 칭찬을 받았지만 뒤에는 벌을 받은 까닭은 사랑이 미움으로 바뀌었기 때문이다.]\n...\n군주에게 간언하고 설득하는 자는 군주가 자기를 사랑하는지, 미워하는지 살펴 본 후 설득해야 한다는 것을 알 수 있다.\n...\n비단 왕뿐 아니라 사람에게도 저마다 역린이 있다.\n누군가를 설득할 때에는 상대방이 수치심을 느끼거나 부끄러워하는 감정을 건드리지 말아야 한다.\n아무리 논리적으로 설득할지라도 외면당할 수 있기 때문이다.\n결국 상대방의 마음을 잘 헤아려 나의 의도를 그에게 맞추려면 상대방의 역린을 읽어낼 수 있는 감수성이 필요하다.\n설득은 마음을 움직이는 일이므로 논리보다는 감성이 앞선다고 할 수 있다.\n노자는 통치술의 첫째로서, 통치가의 존재 그 자체를 부정하고 있다.\n앞에 나서서 설치는 자는 최상의 군주가 아니고 뒤에서 조용히 조종하는 자가 최상이라는 것이다.\n물론 그 존재 자체도 느끼지 못할 때 그것이 최상이다.\n일반적으로 군주들은 신임하지 않는 자가 간언하면 비방한다고 생각하고, 신임하는 사람이 간언하지 않으면 봉록만을 훔치는 자라고 생각하는 경향이 있다.\n그러므로 신하들은 충성스러운 간언을 할 분위기가 조성되지 않으면 침묵하게 된다.\n이러한 문제를 해결하고자 당 태종은 간언을 독려한다.\n\"사람이 자기 얼굴을 보려면 반드시 맑은 거울이 있어야 하고, 군주가 자기 허물을 알려면 반드시 충직한 신하에 의지해야 하오.\n군주가 만일 자신을 현인이나 성인이라고 여기는 착각에 빠져있고, 신하도 정확한 의견을 제시하여 바로잡지 않는다면, 이런 상황에서 위험과 실패를 면하는 것이 어찌 가능하겠소?\n군주가 국토와 사직을 버리면 신하 또한 자신의 집안을 보존할 수 없소.\n수양제는 잔인하고 포학했지만 신하가 입을 다문 채 아무 말도 하지 않았으므로 자기에게 어떤 허물이 있는지 듣지 못했소.\n결국 나라는 멸망했소.\n우세기 등의 대신 또한 오래지 않아 피살되었소.\n이것은 과거 오래전의 일이 아니오.\n대신들은 내가 백성들에게 불리한 일을 하는 것을 보게 되면, 반드시 거리낌 없이 직언을 하여 비판 해야 하오.\"\n한비자는 도성을 떠나 유람을 가는 것 또한 지극히 경계했다.\n군주가 궁궐을 비우고 외부로 떠나는 것은 결국 궁정의 긴장감을 무너뜨리게 되므로, 조직의 긴장도를 위해 군주는 유람할 시간이 없다는 것이다.\n아이가 어릴 때 부모의 양육이 소홀하게 되면, 그 자식은 성장하여 부모를 원망하게 된다.\n또 그 자식이 장년이 되었을 때 부모에 대한 효도를 망각하면, 그 부모는 자식을 책망하게 될 것이다.\n부자 사이는 가장 친밀한 사이임에도 책망하거나 원망한다는 것은 서로 상대가 자기를 위해서 일을 한다는 마음이 없었기 때문이다.\n아랫사람을 고용하여 씨앗을 뿌리거나 경작을 시킬 때, 주인이 집안 살림에서 과용을 하며 좋은 음식과 쫗은 옷을 주고 노동의 대가로 돈도 챙겨주는 것은 그 아랫사람을 배려하기 때문이 아니다 .\n그렇게 후하게 대해야만 깊이 땅을 팔 것이며, 잡초를 샅샅이 뽑으리라 생각하기 때문인 것이다.\n...\n결국 주인과 일하는 사람 양쪽 모두 자기 이익만을 생각하고 있는 것이다.\n그러므로 자기에게 이익이 되도록 일을 하면 적대적인 나라 사람과도 우호적으로 지낼 수 있고, 자기 이익을 떠나게 되면 부자지간도 서로가 원망하게 된다는 것이다.\n...\n남을 위해 죽도록 일하는 것이 아니라 자신의 이익과 목표를 위해 일한다고 생각하면 상대에 대한 평가도 어렵지 않으리라.\nps.\n여담이지만, 챕터별로 편차가 있지만, 챕터의 제목과 챕터의 전반부/후반부의 내용이 상이해서 생뚱 맞다는 느낌을 받았다.\n챕터의 첫번째 사례로 드는 고사는 제목과 잘 어울려서 챕터를 이해하는데 도움이 되었지만, 두번째, 세번째 고사는 사실 챕터에서 이야기하고자 하는 바와 어울리지 않을 때가 많아서 띠용한 적이 종종 있다.\n예를 들어 \"15. 만족을 모르면 근심도 떠나지 않는다\" 에서 2번째 고사는 새옹지마 사례다보니 '일희일비 하지 않는다' 라는 주제에선 어울리겠지만, '만족할 줄 알아야 한다'를 이야기해야하는 이 챕터에서는 전혀 어울리는 고사는 아니라고 생각했다.\n그 외에도 이런 사례가 많아서 책의 좋은 내용과 별개로 책에 대한 평가를 할 때 '절하' 되는 근거가 될 것 같다.",
        "guid": "https://jojoldu.tistory.com/826",
        "categories": [
          "도서",
          "C레벨",
          "리더",
          "리더십",
          "스타트업",
          "트레바리",
          "한비자"
        ],
        "isoDate": "2025-05-06T00:38:32.000Z"
      }
    ]
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": [
      {
        "creator": "megayuchi",
        "title": "GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing 성능비교",
        "link": "https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/",
        "pubDate": "Thu, 01 May 2025 09:35:21 +0000",
        "content:encodedSnippet": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. \nhttps://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/\n스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다.\n\n\n\n\ngpu바꾼 김에 성능 비교를 좀 해봤다.\nRTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다.\n해상도 : 512×512 , voxel 오브젝트 개수 : 54000개, 1×1 복셀로 환산 voxel 개수 : 714만개\n[i3-12100, GTX 1660ti]\nST – 2710.8518 ms\nMT – 584.7888 ms\nCUDA – 3.3825 ms\n[i7-13800H, RTX 4050]\nST – 2558.8728 ms\nMT – 313.6158 ms\nCUDA – 1.4541 ms\n[i7-13700K, RTX 5070]\nST – 2165.4072 ms\nMT – 242.3115 ms\nCUDA – 0.6885 ms",
        "dc:creator": "megayuchi",
        "comments": "https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/#respond",
        "content": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. https://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/ 스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다. gpu바꾼 김에 성능 비교를 좀 해봤다.RTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다. 해상도 : 512&#215;512 , voxel 오브젝트 개수 : 54000개, 1&#215;1 복셀로 환산 voxel 개수 : 714만개 [i3-12100, &#8230; <a class=\"more-link\" href=\"https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/\">More <span class=\"screen-reader-text\">GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing&#160;성능비교</span></a>",
        "contentSnippet": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. https://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/ 스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다. gpu바꾼 김에 성능 비교를 좀 해봤다.RTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다. 해상도 : 512×512 , voxel 오브젝트 개수 : 54000개, 1×1 복셀로 환산 voxel 개수 : 714만개 [i3-12100, … More GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing 성능비교",
        "guid": "http://megayuchi.com/?p=7101",
        "categories": [
          "Development",
          "CUDA",
          "Game Engine Development",
          "Voxel Horizon"
        ],
        "isoDate": "2025-05-01T09:35:21.000Z"
      }
    ]
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "MCP 개념 및 LINE Messaging API를 활용한 MCP 서버 구축 사례 소개",
        "link": "https://techblog.lycorp.co.jp/ko/introduction-to-mcp-and-building-mcp-server-using-line-messaging-api",
        "pubDate": "Fri, 02 May 2025 02:00:00 GMT",
        "content": "들어가며최근 Anthropic에서 Claude LLM을 통해 모델 컨텍스트 프로토콜(Model Context Protocol, 이하 MCP)을 발표했습니다. MCP는 대형 언어 모...",
        "contentSnippet": "들어가며최근 Anthropic에서 Claude LLM을 통해 모델 컨텍스트 프로토콜(Model Context Protocol, 이하 MCP)을 발표했습니다. MCP는 대형 언어 모...",
        "guid": "https://techblog.lycorp.co.jp/ko/introduction-to-mcp-and-building-mcp-server-using-line-messaging-api",
        "isoDate": "2025-05-02T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": [
      {
        "creator": "호돌맨",
        "title": "신용산역에서 바라본 남산타워",
        "link": "https://hodolman.tistory.com/72",
        "pubDate": "Thu, 1 May 2025 20:06:21 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/72#entry72comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000355x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbOmc1j%2FbtsNGTe6jvf%2FpI34ULLziyVkiycD5JXklK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000355x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000535x4.jpg\" data-origin-width=\"2000\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPyWSY%2FbtsNHtzYLf5%2FlLWj4jc0tbh0ylcH1P0Tuk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2000\" height=\"3000\" data-filename=\"edited_DSC000535x4.jpg\" data-origin-width=\"2000\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000635x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FblI5l2%2FbtsNIvYbPa7%2FVjqCpM03WGFkcPTtPaAnG1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000635x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000685x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4l9FU%2FbtsNGTzrIbK%2FKLwETFn3DCoK2ghhEu1Ru1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2400\" height=\"3000\" data-filename=\"edited_DSC000685x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000735x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPIRpl%2FbtsNGT0xmM9%2FpIJgBWgF8s1xIFyO97zKWK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2400\" height=\"3000\" data-filename=\"edited_DSC000735x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000645x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F9YJsH%2FbtsNIASGcEi%2FriLX60KuFL3zFrPM1Mo0zK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000645x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">남산타워라고 하면 너무 아재같나</p>",
        "contentSnippet": "남산타워라고 하면 너무 아재같나",
        "guid": "https://hodolman.tistory.com/72",
        "categories": [
          "사진",
          "남산타워",
          "신용산",
          "용산"
        ],
        "isoDate": "2025-05-01T11:06:21.000Z"
      },
      {
        "creator": "호돌맨",
        "title": "배드맨",
        "link": "https://hodolman.tistory.com/71",
        "pubDate": "Tue, 29 Apr 2025 22:16:49 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/71#entry71comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"DSC000155x4.jpg\" data-origin-width=\"2420\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcHRQdA%2FbtsNECdf4si%2FIdYkGkmGrg1Yaz1X8cxg2k%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2420\" height=\"3000\" data-filename=\"DSC000155x4.jpg\" data-origin-width=\"2420\" data-origin-height=\"3000\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">기변하고</p>\n<p data-ke-size=\"size16\">소사역 부근에서 촬영했습니다.</p>",
        "contentSnippet": "기변하고\n소사역 부근에서 촬영했습니다.",
        "guid": "https://hodolman.tistory.com/71",
        "categories": [
          "사진",
          "배드맨",
          "빛과어둠"
        ],
        "isoDate": "2025-04-29T13:16:49.000Z"
      }
    ]
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": [
      {
        "title": "63,000건 배치 처리 중 락 유발 이슈 회고",
        "link": "https://velog.io/@sweet_sumin/63000%EA%B1%B4-%EB%B0%B0%EC%B9%98-%EC%B2%98%EB%A6%AC-%EC%A4%91-%EB%9D%BD-%EC%9C%A0%EB%B0%9C-%EC%9D%B4%EC%8A%88-%ED%9A%8C%EA%B3%A0",
        "pubDate": "Fri, 02 May 2025 08:02:37 GMT",
        "content": "<p>운영 서버에서 63,000건의 이미지 배치 작업 중 락이 발생하며 장애가 발생했다. 처음 겪는 규모 있는 데이터 처리 이슈였고, 원인은 단순하지만 치명적이었다. 이 글은 그 문제의 원인, 해결, 그리고 회고를 정리한 실무 경험 공유이다.</p>\n<h2 id=\"배경\">배경</h2>\n<p>이번에 회사에서 진행했던 프로젝트는 승인서버 프로젝트이다. 승인서버 프로젝트는 외부 연동으로 들어온 데이터를 우리 관리 시스템으로 들어오기 전에 검수하는 시스템을 구축하는 프로젝트다.\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/6fed5c7c-cb69-47db-b20a-22c575e9de44/image.png\" alt=\"\"></p>\n<p>크게 보면 이렇게 볼 수 있다. </p>\n<p>여기서 내가 한 일 중 하나는 이미지 배치 처리 기능의 설계 및 구현이다. 주요 작업은 다음과 같다.</p>\n<h4 id=\"s3-이미지-업로드를-위한-비동기-배치-모듈-개발\">S3 이미지 업로드를 위한 비동기 배치 모듈 개발</h4>\n<ul>\n<li>1시간 단위로 실행되는 이미지 배치 작업: INIT, FAIL 상태이며 재시도 횟수가 1 이하인 프로덕트/아이템 이미지를 대상으로 처리</li>\n<li>특정 프로덕트 단위의 재연동 기능 구현: 선택된 프로덕트의 INIT, FAIL 상태 이미지만 재처리하며, 재시도 제한 없음<h4 id=\"이미지-업로드-후-상태-및-재시도-관리\">이미지 업로드 후 상태 및 재시도 관리</h4>\n</li>\n<li>업로드 성공 시: retry 횟수 증가 + 상태 COMPLETE로 변경</li>\n<li>업로드 실패 시: retry 횟수 증가 + 상태 FAIL 유지 및 슬랙 알림 전송</li>\n</ul>\n<h3 id=\"배치를-적용한-이유\">배치를 적용한 이유</h3>\n<p>2차 승인 단계에서 등록되는 각 프로덕트/아이템은 여러 개의 이미지를 포함하고 있으며, 이 이미지들은 모두 AWS S3에 업로드되어야 한다. 초기에는 등록 시점에 실시간으로 이미지를 업로드하는 방식도 고려했지만, 아래와 같은 이유로 배치 처리 방식을 도입하게 되었다.</p>\n<h4 id=\"성능-이슈\">성능 이슈</h4>\n<p>이미지 업로드는 네트워크 I/O와 S3 API 호출이 포함된 작업으로, 처리 시간이 길다. 이를 실시간으로 수행할 경우 등록 속도가 느려지고, 사용자 경험에도 부정적인 영향을 줄 수 있다.</p>\n<h4 id=\"처리-안정성-확보\">처리 안정성 확보</h4>\n<p>등록 도중 이미지 업로드에 실패하면 전체 등록이 실패할 수 있다. 배치로 처리하면 실패한 이미지에 한해 재처리할 수 있어 안정적인 처리가 가능하다.</p>\n<h4 id=\"s3-요청-비용-최적화\">S3 요청 비용 최적화</h4>\n<p>AWS S3는 요청 건수에 따라 비용이 발생한다. 실시간으로 이미지를 업로드할 경우, 이미지 수만큼 S3 요청이 발생하고, 트래픽이 많아질수록 비용도 크게 증가한다.\n배치 처리 방식은 요청을 모아서 처리하기 때문에 네트워크 연결 및 클라이언트 설정을 재사용할 수 있고, 요청 효율을 높여 비용 절감과 처리 흐름 단순화에 기여한다.</p>\n<p>이러한 이유로 이미지 업로드 작업을 프로덕트/아이템 등록 시점이 아닌 배치 처리로 전환하게 되었고, 해당 로직의 설계와 구현은 내가 직접 맡아 수행하였다.</p>\n<h2 id=\"장애-발생-및-대응\">장애 발생 및 대응</h2>\n<p>시원한 음료 한 잔 마시며 한숨 돌리고 있던 그 때\n경고가 떴다!!!!!!\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/ef11a743-65ba-4ee4-bca4-897c62e68487/image.png\" alt=\"\">\n락이 걸린다고? 갑자기?? 배치에서??? 왜???\n범인은 나였다. 나야 나...(내가 그 주인공이 될 줄은 몰랐다)</p>\n<h4 id=\"원인\">원인</h4>\n<p>이미지 업로드를 시키는 과정은 사실 단순하다. </p>\n<p>1) INIT,FAIL 상태 &amp; 재시도 1 이하인 임시이미지 조회\n2) 해당 이미지 S3에 업로드\n3) 해당 이미지 상태, 재시도 개수 수정 저장</p>\n<p>근데 문제는 내가 데이터의 규모를 예상치 못하고 조회시 관련 모든 데이터를 가져오게 만들었다는 것이다. 사실 이것만 봤을때는 뭐가 문제인데 할 수 있다. 관련 모든 데이터를 가져오는게 맞잖아?\n그러나.. 데이터의 양이 6만 3천개라면?\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/5e3ed05d-2227-4f5f-8b61-37225eea1f6f/image.png\" alt=\"\"></p>\n<h4 id=\"왜-락이-걸렸을까\">왜 락이 걸렸을까?</h4>\n<p>쉽게 말하면 6만개의 데이터를 수정하면서도 저장(flush)를 미루니까 트랜잭션이 너무 길어지고 락이 오래 유지되는 상황에서 동시에 같은 row에 접근하려는 다른 트랜잭션과 충돌이 발생하게 된것이다. </p>\n<blockquote>\n<p>정리하면, 다음 세 가지가 문제의 핵심이었다:</p>\n</blockquote>\n<ol>\n<li>한 번에 모든 데이터를 불러옴 (6만 건)</li>\n<li>처리 중간에 flush 없이 트랜잭션을 유지</li>\n<li>DB 업데이트가 지연되면서 row-level lock 충돌 발생</li>\n</ol>\n<h4 id=\"해결법\">해결법</h4>\n<p>page 단위로 chunk 100개씩 가져와서 락을 빨리 빨리 해제하도록 수정하였다. </p>\n<ul>\n<li><p>AS_IS <img src=\"https://velog.velcdn.com/images/sweet_sumin/post/0493b66f-93fa-4415-a80a-3bbff7f8dc0b/image.png\" alt=\"\"></p>\n</li>\n<li><p>TO_BE\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/07dd7da4-25ee-46d6-af76-baca4dff96c7/image.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"후기\">후기</h2>\n<p>해결 방법은 단순했다. 데이터를 페이지 단위로 나눠서 처리하면 되는 일이었다. 하지만 처음에는 그 방식이 떠오르지 않았다. 테스트 환경에서는 문제없이 동작했고, 실제 운영에서 63,000건이 넘는 데이터가 한 번에 들어올 거라고는 예상하지 못했기 때문이다.</p>\n<p>이번 일을 통해 대규모 데이터 처리에서의 사소한 설계 차이가 시스템 안정성에 큰 영향을 줄 수 있다는 점을 몸소 깨달았다. 특히 다음 두 가지를 깊이 체감했다:</p>\n<ul>\n<li><p>운영 환경 데이터를 기준으로 사고할 것</p>\n</li>\n<li><p>트랜잭션은 짧고 명확하게 유지할 것</p>\n</li>\n</ul>\n<p>실제 장애는 대량 데이터를 한꺼번에 처리하면서 트랜잭션이 길어지고, 그로 인해 DB 락 충돌이 발생한 것이 원인이었다. 이후 100건 단위로 나눠 처리하는 방식으로 개선하면서 락 점유 시간을 줄일 수 있었다.</p>\n<p>단순한 설계 실수도 큰 장애로 이어질 수 있다는 점을 다시금 느꼈고, 앞으로는 더 철저하게 사고하고 검증해야겠다는 다짐을 하게 된 경험이었다.</p>\n",
        "contentSnippet": "운영 서버에서 63,000건의 이미지 배치 작업 중 락이 발생하며 장애가 발생했다. 처음 겪는 규모 있는 데이터 처리 이슈였고, 원인은 단순하지만 치명적이었다. 이 글은 그 문제의 원인, 해결, 그리고 회고를 정리한 실무 경험 공유이다.\n배경\n이번에 회사에서 진행했던 프로젝트는 승인서버 프로젝트이다. 승인서버 프로젝트는 외부 연동으로 들어온 데이터를 우리 관리 시스템으로 들어오기 전에 검수하는 시스템을 구축하는 프로젝트다.\n\n크게 보면 이렇게 볼 수 있다. \n여기서 내가 한 일 중 하나는 이미지 배치 처리 기능의 설계 및 구현이다. 주요 작업은 다음과 같다.\nS3 이미지 업로드를 위한 비동기 배치 모듈 개발\n1시간 단위로 실행되는 이미지 배치 작업: INIT, FAIL 상태이며 재시도 횟수가 1 이하인 프로덕트/아이템 이미지를 대상으로 처리\n특정 프로덕트 단위의 재연동 기능 구현: 선택된 프로덕트의 INIT, FAIL 상태 이미지만 재처리하며, 재시도 제한 없음\n이미지 업로드 후 상태 및 재시도 관리\n업로드 성공 시: retry 횟수 증가 + 상태 COMPLETE로 변경\n업로드 실패 시: retry 횟수 증가 + 상태 FAIL 유지 및 슬랙 알림 전송\n배치를 적용한 이유\n2차 승인 단계에서 등록되는 각 프로덕트/아이템은 여러 개의 이미지를 포함하고 있으며, 이 이미지들은 모두 AWS S3에 업로드되어야 한다. 초기에는 등록 시점에 실시간으로 이미지를 업로드하는 방식도 고려했지만, 아래와 같은 이유로 배치 처리 방식을 도입하게 되었다.\n성능 이슈\n이미지 업로드는 네트워크 I/O와 S3 API 호출이 포함된 작업으로, 처리 시간이 길다. 이를 실시간으로 수행할 경우 등록 속도가 느려지고, 사용자 경험에도 부정적인 영향을 줄 수 있다.\n처리 안정성 확보\n등록 도중 이미지 업로드에 실패하면 전체 등록이 실패할 수 있다. 배치로 처리하면 실패한 이미지에 한해 재처리할 수 있어 안정적인 처리가 가능하다.\nS3 요청 비용 최적화\nAWS S3는 요청 건수에 따라 비용이 발생한다. 실시간으로 이미지를 업로드할 경우, 이미지 수만큼 S3 요청이 발생하고, 트래픽이 많아질수록 비용도 크게 증가한다.\n배치 처리 방식은 요청을 모아서 처리하기 때문에 네트워크 연결 및 클라이언트 설정을 재사용할 수 있고, 요청 효율을 높여 비용 절감과 처리 흐름 단순화에 기여한다.\n이러한 이유로 이미지 업로드 작업을 프로덕트/아이템 등록 시점이 아닌 배치 처리로 전환하게 되었고, 해당 로직의 설계와 구현은 내가 직접 맡아 수행하였다.\n장애 발생 및 대응\n시원한 음료 한 잔 마시며 한숨 돌리고 있던 그 때\n경고가 떴다!!!!!!\n\n락이 걸린다고? 갑자기?? 배치에서??? 왜???\n범인은 나였다. 나야 나...(내가 그 주인공이 될 줄은 몰랐다)\n원인\n이미지 업로드를 시키는 과정은 사실 단순하다. \n1) INIT,FAIL 상태 & 재시도 1 이하인 임시이미지 조회\n2) 해당 이미지 S3에 업로드\n3) 해당 이미지 상태, 재시도 개수 수정 저장\n근데 문제는 내가 데이터의 규모를 예상치 못하고 조회시 관련 모든 데이터를 가져오게 만들었다는 것이다. 사실 이것만 봤을때는 뭐가 문제인데 할 수 있다. 관련 모든 데이터를 가져오는게 맞잖아?\n그러나.. 데이터의 양이 6만 3천개라면?\n\n왜 락이 걸렸을까?\n쉽게 말하면 6만개의 데이터를 수정하면서도 저장(flush)를 미루니까 트랜잭션이 너무 길어지고 락이 오래 유지되는 상황에서 동시에 같은 row에 접근하려는 다른 트랜잭션과 충돌이 발생하게 된것이다. \n정리하면, 다음 세 가지가 문제의 핵심이었다:\n한 번에 모든 데이터를 불러옴 (6만 건)\n처리 중간에 flush 없이 트랜잭션을 유지\nDB 업데이트가 지연되면서 row-level lock 충돌 발생\n해결법\npage 단위로 chunk 100개씩 가져와서 락을 빨리 빨리 해제하도록 수정하였다. \nAS_IS \nTO_BE\n\n후기\n해결 방법은 단순했다. 데이터를 페이지 단위로 나눠서 처리하면 되는 일이었다. 하지만 처음에는 그 방식이 떠오르지 않았다. 테스트 환경에서는 문제없이 동작했고, 실제 운영에서 63,000건이 넘는 데이터가 한 번에 들어올 거라고는 예상하지 못했기 때문이다.\n이번 일을 통해 대규모 데이터 처리에서의 사소한 설계 차이가 시스템 안정성에 큰 영향을 줄 수 있다는 점을 몸소 깨달았다. 특히 다음 두 가지를 깊이 체감했다:\n운영 환경 데이터를 기준으로 사고할 것\n트랜잭션은 짧고 명확하게 유지할 것\n실제 장애는 대량 데이터를 한꺼번에 처리하면서 트랜잭션이 길어지고, 그로 인해 DB 락 충돌이 발생한 것이 원인이었다. 이후 100건 단위로 나눠 처리하는 방식으로 개선하면서 락 점유 시간을 줄일 수 있었다.\n단순한 설계 실수도 큰 장애로 이어질 수 있다는 점을 다시금 느꼈고, 앞으로는 더 철저하게 사고하고 검증해야겠다는 다짐을 하게 된 경험이었다.",
        "guid": "https://velog.io/@sweet_sumin/63000%EA%B1%B4-%EB%B0%B0%EC%B9%98-%EC%B2%98%EB%A6%AC-%EC%A4%91-%EB%9D%BD-%EC%9C%A0%EB%B0%9C-%EC%9D%B4%EC%8A%88-%ED%9A%8C%EA%B3%A0",
        "isoDate": "2025-05-02T08:02:37.000Z"
      }
    ]
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "개인정보가 불안할 때, 토스 쓰면 안전한 이유",
        "link": "https://blog.toss.im/article/toss-guide-safety",
        "pubDate": "Fri, 02 May 2025 10:21:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}최근 개인정보 유출 사고가 자주 일어나면서 관련 우려가 커지고 있습니다. 언제나 안심하고 쓸 수 있도록, .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}토스가 고객들의 개인정보를 지키는 기술과 정책, 또 토스를 활용해 더 안전하게 금융생활하는 법을 알려드릴게요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}토스가 미리 지켜드려요\n🔒 토스 피싱제로\n토스에는 악성 앱 탐지 솔루션이 탑재되어 있습니다. 토스 보안기술팀이 자체 개발한 ‘악성 앱 분석 자동화 시스템’을 활용해 휴대폰에 설치된 앱의 악성 여부를 감지해내죠. 내 휴대폰에 악성 앱이 깔려 있으면 빠르게 알아채고 앱 삭제를 권합니다. 의심스러운 앱 설치나 접근도 감지하고 경고해요.\n토스 피싱제로는 지난 2023년 출시 이후 1년 반 동안 악성 앱 86만 건을 잡았습니다.\n🔒 FDS(이상거래 탐지 시스템)\n토스는 365일 24시간 고객의 거래 패턴을 실시간으로 분석하고 있습니다. 이상 징후를 감지해 즉시 차단하기 위해서예요. 그래서 만약 평소와 다른 환경이나 시도가 발생하면 위험을 조기에 차단해드립니다. 이때, 토스가 수년간 축적한 데이터와 머신러닝 기반 탐지 로직 등을 복합적으로 활용합니다.\n🔒 안심보상제\n이처럼 단단한 시스템에도 불구하고 보이스피싱 등 사고가 발생했다면? 즉시 토스에 신고하세요. 토스가 피해 사례를 검토한 뒤 최대 5,000만 원까지 보상해드립니다.\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}안심보상제 자세히 보기\n지금 신청해두면 더 든든해요\n🔒 금융명의보호 서비스\n개인정보가 유출되면 누군가 내 명의를 도용해 대출을 받거나 카드를 개설하려고 할 수 있죠. 하지만 이런 시도를 할 때 꼭 필요한 절차가 바로 내 신용을 조회하는 것입니다. \n지금 토스에서 금융명의보호 서비스를 신청해두면, 누가, 언제 내 신용을 조회했는지 확인할 수 있습니다. 새로 신용조회가 발생하면 즉시 알림도 보내드려요. 기록 중에 내가 모르는 신용조회 내역이 있다면, 명의 도용 시도가 있었을 수 있으니 꼭 확인해보시기를 바랍니다.\n금융명의보호 신청하기\n🔒 가족보안지킴이 서비스\n금융 범죄의 주요 타깃은 고연령층입니다. 가족보안지킴이 서비스에서 부모님을 가족으로 등록해두면 의심스러운 거래가 감지될 때 자녀에게 알림을 보내드립니다. \n예를 들어 72세 아버지 휴대폰에서 갑자기 사기 의심 계좌로 송금 시도가 일어나면 바로 알림이 오기 때문에 피해가 더 커지는 것을 막을 수 있습니다. \n✱토스 앱 > 전체 > 🔍 ‘가족 보안 지킴이’ 검색\n가족보안지킴이 신청하기\n개인정보가 불안할 때, 토스를 쓰면 안전해요\n금융 사기가 늘고 있다는 뉴스를 접할 때마다 우리는 불안해지지만, 토스의 보안은 사전에 감지하고, 실시간으로 대응하고, 끝까지 책임지는 시스템을 갖추고 있습니다. 앞으로도 모든 고객의 일상 속 안심, 정교한 기술로 지켜나가겠습니다.",
        "content": "명의 도용 방지, 악성 앱 탐지, 가족 보안 지킴이 등 토스로 내 정보 지키는 법",
        "contentSnippet": "명의 도용 방지, 악성 앱 탐지, 가족 보안 지킴이 등 토스로 내 정보 지키는 법",
        "guid": "https://blog.toss.im/article/toss-guide-safety",
        "isoDate": "2025-05-02T10:21:00.000Z"
      },
      {
        "title": "2025 활기찬 노후를 위한 중장년 시니어 정책 총정리: 중장년경력지원제부터 치매안심센터까지",
        "link": "https://blog.toss.im/article/money-policies-41",
        "pubDate": "Fri, 02 May 2025 01:02:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}중장년경력지원제\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1kxrhf3{white-space:pre-wrap;}50대 이상 사무직 등 주된 업무에서 퇴직한 중장년이 경력전환에 도움이 되는 일경험을 통해 취업 가능성을 높이도록 도와주는 취업 지원 프로그램입니다.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n지원 대상: 퇴직 후 경력전환을 위해 자격을 취득했거나 직업훈련을 이수한 50대 이상 중장년\n지원 내용\n\n1~3개월간 일경험 참여기업에서 직무교육과 현장직무를 수행할 기회 제공\n참여수당으로 월 최대 150만 원 지급\n\n\n참여 및 지원절차: 자격취득 또는 훈련이수 > 참여신청서 제출 > 참여기업과 약정 체결 > 일경험 참여\n신청 방법: 중장년 내일센터 기관에 신청\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*(서울) 02-6350-1500/(인천·경기·강원) 032-421-8301/ (부산·울산·경남)051 -860-1300/(대구·경북) 054-461-5520/ (광주·전남·전북·제주)062-531-5712/(대전·충남·충북·세종) 042-489-3820\n\n\n고령 운전자 교통안전교육\n65세 이상 운전자에게 인지능력 측정과 교통안전교육을 해드립니다.\n\n\n지원 대상: 65세 이상 운전자 (75세 이상 운전자 중 면허 취득/갱신 대상자는 의무)\n지원 내용: 운전능력 자가진단 및 교통 안전교육\n\n교육 이수 시 자동차보험 할인(할인 조건은 보험사마다 다름)\n\n\n신청 방법: .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}한국도로교통공단 고객센터(1577-1120) 및 홈페이지\n\n\n농지이양 은퇴 직불사업\n고령 농업인의 은퇴 이후 생활안정을 위해 농지이양을 조건으로 월 최대 200만 원을 최장 10년간 지급합니다.\n\n\n지원 대상: 10년 이상 계속 농업경영을 하고 있는 고령 농업인(65~79세)이 3년 이상 소유한 농지를 청년농업인 등에게 이양하는 경우 최대 10년간(~84세까지) 직불금 지급\n지원 내용\n1) 매도\n-농업인이 소유한 농지를 한국농어촌공사 등에 매도하는 방식\n-농지이양 은퇴직불금 + (공사 매도 시) 농지 매도대금 지급\n-지원 단가는 1ha당 매월 50만 원(연간 600만 원)\n2)매도 조건부 임대\n-농업인이 소유 농지를 농지은행에 임대 후 농지연금 지급기간 종료 시 매도하는 은퇴직불형 농지연금에 가입하는 방식\n- 농지이양 은퇴직불금 + 은퇴직불형 농지 연금 + 농지임대료 + 농지 매도대금(농지 연금 채무액제외)\n-지원 단가는 1ha당 매월 40만 원(연간 480만 원)\n\n신청 방법: 한국농어촌공사 관할 지사에 신청\n문의: 농지은행 상담센터(1577-7770)\n\n\n의료급여수급자 노인 틀니 지원\n65세 이상 어르신들 틀니에 급여를 적용하고, 무상 수리도 지원합니다.\n\n\n지원대상: 65세 이상 의료급여 수급자\n지원내용:\n\n완전 틀니(금속상, 레진상) 및 부분 틀니 급여 적용\n*본인 부담: 1종 수급권자 5%, 2종 수급권자 15%\n부분 틀니 지대치: 별도 본인 부담(비급여)\n틀니 급여 주기: 동일 부위, 동일 종류의 틀니 7년 1회\n*틀니 제작 도중 병원을 옮기거나, 7년 이내에 환자 부주의로 새로 틀니를 제작할 경우에는 비급여 적용\n*틀니 장착 후 무상 수리: 3개월 이내 6회까지 가능(진찰료만 부담)\n\n\n신청 방법: 주소지 관할 시군구, 읍면동 행정복지센터 또는 의료급여기관에서 전산 등록 신청 대행\n\n\n치매안심센터\n치매 예방, 상담, 조기진단, 교육 등 치매통합관리서비스를 제공합니다.\n\n\n지원 대상: 지역주민, 지역 내에 거주하는 치매환자 및 가족\n지원 내용: 치매 예방, 상담, 조기진단, 보건복지 자원 연계 및 교육 등\n신청 방법: 가까운 치매안심센터\n\n\n치매상담 콜센터\n보건복지부와 중앙치매센터가 운영하는 콜센터로, 365일(7:00~22:00) 전문상담사들이 맞춤형 치매상담 서비스를 제공합니다.\n\n\n지원 대상: 치매에 관심 있는 누구나\n지원 내용: 전문상담사의 전화상담, 치매 관련 최신 정보 제공, 치매환자의 치료와 보호 및 관리에 관한 정보 제공, 치매환자 가족의 심리 상담 등\n문의: 치매상담 콜센터(1899-9988)",
        "content": "대표적인 중중년 시니어 정책 모아보기 ",
        "contentSnippet": "대표적인 중중년 시니어 정책 모아보기",
        "guid": "https://blog.toss.im/article/money-policies-41",
        "isoDate": "2025-05-02T01:02:00.000Z"
      },
      {
        "title": "토스페이 혜택, 사용법 총정리 2025년 5월",
        "link": "https://blog.toss.im/article/tosspay-2025-02",
        "pubDate": "Wed, 30 Apr 2025 15:05:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}3분만 시간 내면 \n✔️ 토스페이에 카드나 계좌를 등록하고 결제하는 방법을 알 수 있어요. \n✔️ 컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스, SSFSHOP 등 5월 할인·적립 혜택을 알 수 있어요. \n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}토스로도 간편결제 하세요\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}복잡한 인증 절차나 정보 입력 없이 빠르고 간편하게 결제할 수 있는 간편결제, 토스로도 할 수 있는 것 알고 계셨나요? 미리 등록한 카드나 계좌를 선택해 몇 번의 클릭만으로 편리한 결제를 경험해보세요. \n토스페이 사용법 \n한 번만 카드나 계좌를 등록해두면, 결제 시 선택하여 바로 사용할 수 있습니다. 또한, 토스페이 결제 시 포인트 적립 및 다양한 혜택도 받을 수 있어요. 예를 들어, 토스페이로 간편결제 하면 다양한 금융사의 카드/계좌에서 돈이 출금되었더라도, 모든 결제에 대해 토스페이 포인트가 쌓이는 장점이 있어요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n토스페이에 카드, 계좌 등록하기 \n.css-hokoge{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;counter-reset:numberedList;}.css-hokoge ul,.css-hokoge ol{margin:16px 0 0;}.css-hokoge>li{counter-increment:numberedList;margin-bottom:16px;padding-left:24px;}.css-hokoge>li:last-of-type{margin-bottom:0;}.css-hokoge>li>span{position:relative;}.css-hokoge>li>span>:first-child::before{content:counter(numberedList) '.';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n토스 홈에서 [결제]를 클릭해주세요. ‘결제수단’을 클릭하고, ‘추가하기’로 이동하면 추가할 결제수단(카드나 계좌)을 선택할 수 있어요. \n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n카드는 카드앱을 통해 몇 번의 클릭만으로 연결할 수 있고, 직접 번호를 입력하거나 스캔할 수도 있어요.\n계좌는 계좌번호와 은행명만 입력하면 5초 만에 연결할 수 있어요.\n\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}📌 Tip. 신용카드도 등록 가능해요\n자주 쓰는 신용카드로도 토스페이 결제가 가능해요! 카드 실적, 카드 할부 모두 다 동일한 혜택을 받을 수 있어요.\n토스페이로 결제하기 \n토스페이는 온라인과 오프라인 결제가 모두 가능해요. \n\n📌 온라인 결제\n\n쇼핑몰 결제창에서 결제수단으로 토스페이를 선택하고 결제를 진행해주세요. \n결제 진행 시, 토스앱으로 곧장 연결되어 간편하게 결제를 진행할 수 있어요. 등록해둔 수단 중 출금될 수단을 선택해 결제하면 돼요.  \n\n📌 오프라인 결제\n\n토스 홈에서 [결제]를 클릭해주세요.\nQR코드를 클릭하면 출금될 카드·계좌를 선택할 수 있어요. \n바코드 리더기에 QR코드를 스캔하면 결제가 완료돼요.\n\n토스페이 5월 혜택 모아보기\n5월은 연휴부터 어버이날, 어린이날 등 챙길 일도 많고 지출도 많아지는 시기죠. 이럴 때 무심코 지나쳤던 ‘결제혜택’이 생각보다 꽤 큰 절약이 된다는 사실, 알고 계셨나요? 토스페이는 매월 패션, 뷰티, 여행, 식품, 인테리어 등 생활 밀접 업종 중심으로 실질적인 혜택을 제공합니다. 이번 5월 가성비 쇼핑을 도와줄 혜택 리스트, 지금 바로 확인해보세요! \n토스페이 5월 결제혜택 모아보기\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n.css-mlvj3o{white-space:pre-wrap;color:#4593fc;font-weight:bold;}토스페이로 결제하고 자동 할인받기 \n아래 혜택들은 결제 시 토스페이를 선택하면 자동으로 할인이 적용돼요. .css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n✈️ 여행 \n소중한 사람과의 여행, 떠나기 전에 면세 혜택으로 알뜰하게 시작하세요.\n\n✅ 신세계면세점\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n20만 원 이상 결제 시 2만 원 즉시 할인\n40만 원 이상 결제 시 4만 원 즉시 할인\n이벤트 기간: 25.05.09~25.05.16\n\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}신세계면세점 바로 가기\n🍽️ 식품 \n우리 가족 집밥 준비, 컬리에서 토스페이로 결제하면 재료비를 아낄 수 있어요.\n\n✅ 컬리\n\n6만 원 이상 결제 시 2천 원 즉시 할인\n이벤트 기간: 25.05.19~25.06.01\n컬리 첫 결제 고객은 4만 원 이상 결제 시 즉시 3천 원 할인해드려요.(05.01~05.31)\n\n\n컬리 바로 가기\n👗 패션\n선물용 옷이 고민이라면? 백화점 브랜드 패션 플랫폼 포스티에서 할인받고 구매하세요.\n\n✅  포스티\n\n계좌 혹은 토스페이머니로 3만 원 이상 결제 시 1천 원 즉시 할인\n이벤트 기간: 25.05.21~25.05.31\n\n\n포스티 바로 가기\n🛍️ 종합몰 \n11번가 그랜드십일절 행사 기간 중 토스페이 결제 시 매일 쏠쏠한 혜택이 쏟아집니다. \n\n✅ 11번가\n\n5.1 파리바게뜨 1천 원 이상 결제 시 7% 즉시 할인 \n5.2 메가MCG커피 1천 원 이상 결제 시 7% 즉시 할인 \n5.2~3 웨이브 3,000원 즉시 할인\n5.4 쉐이크쉑 1천 원 이상 결제 시 7% 즉시 할인 \n5.5 버거킹 1천 원 이상 결제 시 7% 즉시 할인 \n5.6 이디야 1천 원 이상 결제 시 7% 즉시 할인 \n\n\n11번가 바로 가기\n💻 전자\n예산을 넘어가는 전자기기만 눈에 들어온다면, 토스페이 할인으로 예산에 딱 맞게 준비하세요.\n\n✅ 컴퓨존\n\n계좌로 60만 원 이상 결제 시 5% 즉시 할인 \n매일 9시 선착순으로 제공합니다. 놓치지 마세요!\n이벤트 기간: 25.05.07~25.05.31\n\n\n컴퓨존 바로 가기\n할인 쿠폰 발급 받기\n아래 혜택들은 토스 앱에서 쿠폰을 발급받고 토스페이로 결제하면 자동으로 적용돼요.\n👗 패션\n선물할 옷도, 내 옷도 필요한 5월, 쿠폰으로 현명하게 챙겨보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ 아디다스\n\n5% 할인 쿠폰 \n\n✅ SSFSHOP\n\n7% 할인 쿠폰\n\n\n🍽️ 식품\n건강기능식품부터 일상 속 음료까지, 온 가족을 위한 소비를 실천해보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ 종근당건강몰\n\n10% 할인 쿠폰 \n\n✅ 코크플레이 (코카콜라)\n\n15% 할인 쿠폰\n\n\n🛍️ 종합몰\n필요한 것, 사고 싶은 것 모두 GSSHOP 쿠폰으로 부담 없이 챙겨보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ GSSHOP\n\n10% 할인 쿠폰\n\n\n혹시 여행 계획 있으신가요?\n특히 중국으로 떠나는 분이라면, 이 소식은 꼭 알아두세요. 중국에서도 토스페이로 간편하게 결제할 수 있고, 5월에는 할인 혜택까지 받을 수 있습니다!\n\n기간: 25.04.28~25.05.31\n\n3만 원 이상 결제 시 3천 원 할인\n\n\n\n지출이 많은 5월, 토스페이와 함께 부담은 줄이고 알뜰함은 더하세요. 다가오는 초여름에도 실속 있는 혜택으로 다시 찾아올게요.",
        "content": "컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스 등 할인·적립 쿠폰 확인하기",
        "contentSnippet": "컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스 등 할인·적립 쿠폰 확인하기",
        "guid": "https://blog.toss.im/article/tosspay-2025-02",
        "isoDate": "2025-04-30T15:05:00.000Z"
      },
      {
        "title": "명의 도용 방지하는 법, 금융명의보호 서비스",
        "link": "https://blog.toss.im/article/toss-guide-credit-change",
        "pubDate": "Wed, 30 Apr 2025 05:22:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}나도 모르게 명의 도용되지 않도록 방지하려면?\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n빈번해지는 해킹 사고, 다양한 피싱 수법 등 개인정보 탈취를 걱정해야 하는 일이 늘어갑니다. 개인정보가 유출되면 특히 ‘내가 모르는 사이 명의를 도용당해 금융 거래가 일어나지 않을까’ 불안해지죠. \n명의 도용을 예방하고 싶은 분들을 위해 토스에서 .css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;}금융명의보호 서비스를 준비했어요. 1) 그동안 나도 모르게 조회된 대출·카드 기록이 있었는지 확인하고, 2) 앞으로 대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 카카오 알림톡을 받아볼 수 있습니다.  \n✅ 토스 금융명의보호 서비스 쓰는 법 \n(1) 모바일에서 아티클 하단 ‘금융명의보호 시작하기’ 버튼을 클릭하세요. \n(2) 아래 화면에서 ‘조회 내역 바로 확인하기’를 클릭하세요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n(3) 신용점수가 나오면, 아래로 스크롤해서 ‘신용조회· 변동’ 기록을 확인하세요. \n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}✱토스 앱 > 전체 > ‘내 신용점수’ 검색 > 신용점수 숫자를 클릭해도 같은 화면을 만날 수 있어요. \n\n(4) 앞으로는 내 명의의 대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 카카오 알림톡을 보내드립니다.\n\n✅ 토스 신용조회 서비스가 처음인 경우 \n(1) 모바일에서 아티클 하단 ‘금융명의보호 시작하기’ 버튼을 클릭하세요.\n(2) 꼭 필요한 사항에 동의해야 대출·카드 조회 기록을 확인할 수 있어요.\n\n대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 알려주는 ‘토스 금융명의보호 서비스’와 함께 안전한 금융생활 하시기를 바랍니다.",
        "content": "대출·카드 정보가 조회되면 실시간 알림톡을 보내드려요",
        "contentSnippet": "대출·카드 정보가 조회되면 실시간 알림톡을 보내드려요",
        "guid": "https://blog.toss.im/article/toss-guide-credit-change",
        "isoDate": "2025-04-30T05:22:00.000Z"
      },
      {
        "title": "토스, <머니 코드 콘서트: 아웃 오브 방구석> 개최",
        "link": "https://blog.toss.im/article/moneychordconcert",
        "pubDate": "Wed, 30 Apr 2025 03:26:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}머니그라피 대표 시리즈 ‘머니 코드’ 시즌 2, 콘서트 개최하며 여정 마무리\n더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n토스(운영사 비바리퍼블리카, 대표 이승건)는 유튜브 채널 '머니그라피(Moneygraphy)' 대표 시리즈 '머니 코드(Money chord)' 시즌2의 마지막 여정으로 콘서트를 개최한다. 오는 5월 31일 서울대학교 제 1파워플랜트에서 열린다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n‘머니 코드’는 대중문화의 최전선에서 활동하는 아티스트들과 함께 음악, 예술, 그리고 금융에 대한 진솔한 이야기를 나누는 토스의 유튜브 콘텐츠다. 음악 산업 속 다양한 질문과 고민들을 던지며 깊이 있는 대화를 전하는 것이 특징이다. 시즌 2에서는 시즌 1의 ‘방구석 리스너’로 활약했던 우키팝과 룩삼이 진행을 맡았으며, 다양한 장르의 아티스트들과 함께 문화적 공감대를 형성하면서도 산업 현장의 현실을 생생하게 담아냈다.\n이번 공연 <머니 코드 콘서트: 아웃 오브(Out of) 방구석>은 ‘방구석을 벗어나 세상과 마주한다’는 시즌 2의 주제를 콘서트로 확장한 형태로, 머니 코드의 철학을 공유한 아티스트들이 한자리에 모여 음악으로 소통하는 자리가 될 예정이다. 콘서트 라인업으로는 래퍼 더콰이엇을 비롯해 기타리스트 겸 DJ 하세가와 요헤이, 싱어송라이터 김뜻돌, 얼터너티브 케이팝 그룹 바밍타이거, 전자 음악 아티스트 키라라가 출연을 확정지었다.\n티켓은 5월 9일 금요일 오후 12시부터 멜론티켓을 통해 예매 가능하다. 동행 관객을 위한 1+1 티켓 옵션도 함께 마련했다. 공연에 대한 자세한 정보는 공식 웹사이트를 통해 확인할 수 있다. 웹사이트는 30일 오후 12시 오픈 예정이다.\n머니그라피 채널 연출을 총괄하는 토스 백순도 PD는 “이번 콘서트는 방구석이라는 한계를 깨고 세상을 마주한다는 ‘머니 코드’ 시즌 2의 서사를 현실에서 완성짓는 무대가 될 것”이라며 “머니그라피가 추구해온 정체성을 오프라인이라는 물리적 공간 안에서 가장 밀도 높게 보여줄 수 있는 순간이 되기를 기대한다”고 전했다. 이어 “‘머니 코드’를 통해 소개해온 아티스트들의 진정성이 이번 콘서트를 계기로 더 많은 사람들에게 닿기를 바란다”고 덧붙였다.\n한편, 머니그라피는 2021년 9월 첫 영상을 시작으로 취향과 경제를 잇는 콘텐츠를 선보여왔다. 음악 산업을 다루는 ‘머니 코드’를 비롯해 소비문화의 이면을 탐구하는 ‘B주류경제학’,  한국의 소비문화와 트렌드를 분석하는 ‘K’s스터디’ 등 다양한 시리즈가 사랑을 받으며, 채널 개설 약 3년 반 만에 구독자 수 39만 명을 돌파했다. (끝)",
        "content": "더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈",
        "contentSnippet": "더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈",
        "guid": "https://blog.toss.im/article/moneychordconcert",
        "isoDate": "2025-04-30T03:26:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]