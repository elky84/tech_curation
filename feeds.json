[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Augustin Popa",
        "title": "Siemens Healthineers manages C++ libraries with vcpkg in an offline build environment",
        "link": "https://devblogs.microsoft.com/cppblog/siemens-healthineers-manages-c-libraries-with-vcpkg-in-an-offline-build-environment/",
        "pubDate": "Tue, 12 Nov 2024 23:10:37 +0000",
        "content:encodedSnippet": "vcpkg is a free and open-source C/C++ package manager maintained by Microsoft and the C++ community that runs on Windows, macOS, and Linux. Over the years we have heard from companies using vcpkg to manage dependencies at enterprise-scale. For this blog post, I spoke to Shrey Chauhan, a Senior DevOps Engineer with Siemens Healthineers.\nSiemens Healthineers adopted vcpkg in late 2023 after a successful proof of concept. Their main motivation was to improve their versioning and overall dependency management for C++ libraries in their offline, air-gapped build environment. They also like vcpkg’s integration with the Visual Studio IDE, extensive and evolving library support, and automatic dependency resolution.\nAbout Siemens Healthineers and development team\nShrey: The Ultrasound business area is an integral part of Siemens Healthineers. This advanced medical device features a comprehensive hardware layer and a full-stack windows-based software layer. Ultrasound Software teams handle the development of the entire software stack, while the DevOps team manages CI/CD processes, including building, packaging, deployment, and related tools.\nC++ development environment\nSiemens Healthineers develops on Windows and targets Windows x64. They use Visual Studio 2022 with MSBuild projects, and their project is a combination of C#, C++/CLI, and C++. They have around 300 developers maintaining over 6 million lines of code. In addition, they use Azure DevOps as their continuous integration system.\nHow they were managing C++ dependencies before vcpkg\nTheir team mostly consumes open-source dependencies. They were previously packaging the C++ dependencies in individual .zip packages, which were being downloaded from a JFrog Artifactory repository. This is a tedious process because the path to each .dll or .lib needs to be correct and could vary based on the package.\nQ: When did your team move to vcpkg and why did you ultimately choose to move to vcpkg?\nShrey: We moved to vcpkg around September or October 2023 with the main reasoning being improved versioning and dependency management of C++ libraries. We did a proof of concept to determine if it suited our needs with respect to our air-gapped build environment, which was successful after a little help from vcpkg team. Additional features we benefitted from:\nvcpkg is well integrated with Visual Studio IDE\nHas extensive library support, which is still evolving\nAutomatic dependency resolution\nIn Siemens Ultrasound, our builds/CI are on a protected network with restricted access to the Internet. By default, vcpkg downloads packages from source repositories (Internet) which did not work for us because of access restrictions. We were able to work with the vcpkg team to integrate custom Asset Caching (which was later documented under: How to create a x-script Asset Caching source for NuGet | Microsoft Learn) to use our own Azure DevOps NuGet feed as a source to upload & restore packages. This addressed our issue with the air-gapped environment and allowed us to reuse existing cached packages, making the process more efficient.\nQ: What is your overall impression of vcpkg?\nShrey: Overall, the feedback has been good so far. vcpkg does a great job of caching the built libraries, making the developers’ workflow efficient. It has also been easily accepted by developers because of its ease of use (i.e. no extra steps or setup was required).\nLearn More About vcpkg\nIf you want to learn more about vcpkg, check out our website at vcpkg.io and read the vcpkg overview in our documentation.\nIf you have a story you would like to share with us about your experiences with vcpkg, feel free to contact us at vcpkg@microsoft.com. You can submit bug reports in our GitHub issue tracker or make feature requests in our discussion forum.\nThe post Siemens Healthineers manages C++ libraries with vcpkg in an offline build environment appeared first on C++ Team Blog.",
        "dc:creator": "Augustin Popa",
        "comments": "https://devblogs.microsoft.com/cppblog/siemens-healthineers-manages-c-libraries-with-vcpkg-in-an-offline-build-environment/#respond",
        "content": "<p>vcpkg is a free and open-source C/C++ package manager maintained by Microsoft and the C++ community that runs on Windows, macOS, and Linux. Over the years we have heard from companies using vcpkg to manage dependencies at enterprise-scale. For this blog post, I spoke to Shrey Chauhan, a Senior DevOps Engineer with Siemens Healthineers. Siemens [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/siemens-healthineers-manages-c-libraries-with-vcpkg-in-an-offline-build-environment/\">Siemens Healthineers manages C++ libraries with vcpkg in an offline build environment</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "vcpkg is a free and open-source C/C++ package manager maintained by Microsoft and the C++ community that runs on Windows, macOS, and Linux. Over the years we have heard from companies using vcpkg to manage dependencies at enterprise-scale. For this blog post, I spoke to Shrey Chauhan, a Senior DevOps Engineer with Siemens Healthineers. Siemens […]\nThe post Siemens Healthineers manages C++ libraries with vcpkg in an offline build environment appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34928",
        "categories": [
          "C++",
          "Vcpkg",
          "CPP",
          "vcpkg"
        ],
        "isoDate": "2024-11-12T23:10:37.000Z"
      },
      {
        "creator": "Sy Brand",
        "title": "What’s New for C++ Developers in Visual Studio 2022 17.12",
        "link": "https://devblogs.microsoft.com/cppblog/whats-new-for-c-developers-in-visual-studio-2022-17-12/",
        "pubDate": "Tue, 12 Nov 2024 20:58:48 +0000",
        "content:encodedSnippet": "We are happy to announce that Visual Studio 2022 version 17.12 is now generally available! This post summarizes the new features you can find in this release for C++. You can download Visual Studio 2022 from the Visual Studio downloads page or upgrade your existing installation by following the Update Visual Studio Learn page.\nStandard Library and MSVC Compiler\nAs always, you can find all the details about our STL work in the changelog on GitHub. Thanks to everyone who contributed changes for this release!\nOn the conformance side, we have finished the implementation of C++23’s P2286R8 Formatting Ranges by implementing:\nFormatters for the container adaptors stack, queue, and priority_queue. #4825\nrange-default-formatter. #4716\n\n\nWe implemented multidimensional subscript operators in the compiler, which supports our existing <mdspan> implementation. For example, you can use the my_mdspan[i,j] syntax to index multidimensional spans. Here’s a full example:\n#include <mdspan>\r\n#include <print>\r\n\r\nusing namespace std;\r\nint main() {\r\n    const char* const str{\"CatDogElkFox\"};\r\n    //Defines a multidimensional view of str\r\n    mdspan<const char, extents<int, 4, 3>> m{str, 4, 3};\r\n\r\n    for (int i = 0; i < m.extents().extent(0); ++i) {\r\n        for (int j = 0; j < m.extents().extent(1); ++j) {\r\n            //Note the m[i, j] syntax\r\n            print(\"m[{}, {}]: '{}'; \", i, j, m[i, j]);\r\n        }\r\n        println();\r\n    }\r\n}\nThis release also comes with some new C++26 features:\nP2997R1 Removing The Common Reference Requirement From The Indirectly Invocable Concepts\nP0952R2 A New Specification For generate_canonical()\nP2968R2 Make std::ignore A First-Class Object\nYou’ll find improvements to several debug visualizers, including those for mutex/recursive_mutex and move_iterator.\nWe added lifetimebound attributes to min, max, clamp, ranges::min, ranges::max, and ranges::clamp, allowing MSVC code analysis and Clang -Wdangling to detect dangling references in improper usage. See the documentation for warnings C26815 and C26816 for more information about lifetimebound annotations.\nFinally, we improved the performance of several types and algorithms. The popcount() function now uses a compiler intrinsic on ARM64. We further improved the vectorized implementations of the minmax_element() and minmax() algorithm families, and optimized the search() and find_end() algorithms. We also overhauled the implementations of condition_variable and condition_variable_any, which has knock-on effects on the timed_mutex and recursive_timed_mutex types.\nC++ Productivity\nSet Command Line Arguments\nFor Unreal Engine projects, you can now set the command line arguments to pass to your application directly from the toolbar. This toolbar component will show up by default if you have the Game development with C++ workload installed. If you don’t see it, you can add it by right-clicking on the toolbar and selecting Set Arguments.\n\nWe’ll be adding support for this feature to non-UE projects in the future. See Pass command-line arguments while debugging on Microsoft Learn for documentation.\nOpen Folder for Unreal Engine uproject\nWe have added an additional entry point to open your Unreal Engine uproject with Visual Studio’s uproject support. You can now open your uproject directly from the File menu by selecting Open > Folder…. This will open your Unreal Engine project in Visual Studio.\nFor more information on how to use this feature, see the documentation on Microsoft Learn and our announcement blog post.\n\nChange Signature Improvements\nWe have updated the Change Signature interface, allowing you to add, remove, and rearrange parameters in the parameter configuration section. Additionally, you can change their order by selecting and dragging them to a new position.\nThe access methods remain the same: press Ctrl+. to trigger the Quick Actions and Refactorings menu and select Change Signature.\n\nBuild Insights\nRun Build Insights on Selected Files\nYou can select a few files, run Build Insights on them, and see exactly how these files impact build performance.\n\nFilter Projects\nYou can now filter results based on projects. Simply click the filter button on the filter column header and select the projects you want to filter.\n\nGlob Patterns to Filter Files\nThe File Path Filter is incredibly useful for narrowing down your analysis to specific directories or excluding paths that aren’t relevant to your task.\n\nEnhanced Save Experience\nNow you can designate a folder to automatically store the reports so you can easily access them during your investigation.\n\nView Explanations\nYou can now see a short description on how each tab of Build Insights can be used, along with a link to the documentation for a detailed explanation.\n\nPath Adjustments\nWe have hidden full and relative paths to reduce clutter. To see full paths, simply hover over the file. You will also see a new File Name column for both files and translation units, displayed by default to help you quickly identify files without parsing lengthy paths.\n\nGeneral Productivity\nCopy from the Error List\nWhen you copy an error from the Error List using Ctrl+C, now only the description is copied to the clipboard. This makes it easier to search for the error online or share it with others.\nYou can still copy the entire row by right-clicking the error and selecting Copy Row from the context menu or hitting Ctrl+Shift+C.\nIf what you wanted to do with the error description was to do a web search, then just hit Ctrl+F1 to search for information about the error online.\n\nDock the Code Search window\nIf you need Code or Feature Search to stay out of your way, you now have more control over the behavior of the search window.\nYou can now dock the search window and perform tool window actions with it, like Solution Explorer and others.\n\nAfter opening Code Search or Feature Search, click on the box icon at the top right to convert it into a tool window. You may choose to dock it elsewhere, pop it out, auto-hide, etc. You can revert to the dismissible window by closing the tool window and reopening search.\n\nWe’ve also simplified and cleaned up the previewing experience in search. There is now one button, indicated with an eye icon, to toggle the preview on and off.\n\nRefresh your Find results\nWe heard from a lot of users that it’s frustrating having to reopen the Find window and go through the motions of redoing a search to get updated results. Maybe you just refactored some code and want to confirm everything has been changed as expected, or you pulled some recent changes and need your recent Find operation to reflect those updates.\nAfter completing Find in Files, you will now have the option to refresh the results in the window. You’ll get your updated results without having to redo the search.\n\nNon-blocking Code Cleanup on save\nPreviously when a Code Cleanup action was run on save, you couldn’t perform any actions in the IDE. We’ve now enhanced this to operate in a non-blocking manner. The cleanup process will run in the background and can be automatically cancelled if you resume typing.\nGit\nManage file renaming\nWhen you rename files from the Solution Explorer, you’ll now be reminded to stage your changes to see the renames in Git.\n\nCopy Git link\nYou can now get a GitHub or Azure DevOps link to a specific line of code to make it easy to share with your colleagues. Access this option by right-clicking on some code and selecting Git > Copy GitHub/Azure DevOps Permalink.\n\nDebugging\nInline Return Values\nThe debugger now displays return values inline, making it much easier to see the return value of functions that have complex return statements.\n\nGitHub Copilot\nSmart Variable Inspection\nYou can now click on Ask Copilot next to the value of a variable to get AI-driven insights into what led to your current program state. For example, the following program has an off-by-one error in its loop condition, resulting in undefined behavior:\n\nIf you click Ask Copilot, it tells you what went wrong:\n\nFix my Code\nFor errors in the Visual Studio Error List, you can click Ask Copilot for an explanation and a fix to get suggestions on how to rectify your errors. For example, if we try to fix the code from the previous section by introducing a range based for loop, we might get the following error:\n\nCopilot suggests the following:\n\nDebug Failed Tests\nWe might fix the above issue and write a test case to ensure the function works, but then have a cat sit on our keyboard and accidentally initialize n_cats to 1 instead of 0. Fortunately, GitHub Copilot now comes with options to help debug the test failure:\n\nSelecting this option may give something like the following:\n\nSend us your feedback\nWe are very much interested in your feedback to continue to improve this experience. The comments below are open. Feedback can also be shared through Visual Studio Developer Community. You can also reach us on Twitter (@VisualC), or via email at visualcpp@microsoft.com.\nThe post What’s New for C++ Developers in Visual Studio 2022 17.12 appeared first on C++ Team Blog.",
        "dc:creator": "Sy Brand",
        "comments": "https://devblogs.microsoft.com/cppblog/whats-new-for-c-developers-in-visual-studio-2022-17-12/#comments",
        "content": "<p>We are happy to announce that Visual Studio 2022 version 17.12 is now generally available! This post summarizes the new features you can find in this release for C++. You can download Visual Studio 2022 from the Visual Studio downloads page or upgrade your existing installation by following the Update Visual Studio Learn page. Standard Library and MSVC [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/whats-new-for-c-developers-in-visual-studio-2022-17-12/\">What’s New for C++ Developers in Visual Studio 2022 17.12</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "We are happy to announce that Visual Studio 2022 version 17.12 is now generally available! This post summarizes the new features you can find in this release for C++. You can download Visual Studio 2022 from the Visual Studio downloads page or upgrade your existing installation by following the Update Visual Studio Learn page. Standard Library and MSVC […]\nThe post What’s New for C++ Developers in Visual Studio 2022 17.12 appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34893",
        "categories": [
          "C++"
        ],
        "isoDate": "2024-11-12T20:58:48.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "How Meta built large-scale cryptographic monitoring",
        "link": "https://engineering.fb.com/2024/11/12/security/how-meta-built-large-scale-cryptographic-monitoring/",
        "pubDate": "Tue, 12 Nov 2024 17:00:10 +0000",
        "content:encodedSnippet": "Cryptographic monitoring at scale has been instrumental in helping our engineers understand how cryptography is used at Meta.\nMonitoring has given us a distinct advantage in our efforts to proactively detect and remove weak cryptographic algorithms and has assisted with our general change safety and reliability efforts.\nWe’re sharing insights into our own cryptographic monitoring system, including challenges faced in its implementation, with the hope of assisting others in the industry aiming to deploy cryptographic monitoring at a similar scale.\nMeta’s managed cryptographic library, FBCrypto, plays an important role within Meta’s infrastructure and is used by the majority of our core infrastructure services. Given this, having a robust monitoring system in place for FBCrypto has been instrumental in ensuring its reliability as well as in helping our engineers understand how cryptography is used at Meta so they can make informed development decisions.\nMonitoring the health of our library allows us to detect and revert bugs before they reach production services. The data from our monitoring service provides insight into the usage of FBCrypto, allowing us to make data-driven decisions when deciding what improvements to make to the library. For example, it helps us identify components that need more attention either because they are on a hot path or are less stable.\nUnderstanding exactly how clients are using said library is a common pain point in managing any widely distributed library. But the improved understanding of FBCrypto provided by our monitoring helps us maintain a high bar for security posture. Since there is a limit to how much data a symmetric cryptographic key can protect, logging allows us to detect key overuse and rotate keys proactively. It also helps us build an inventory of cryptography usage, making it easy to identify the callsites of weakened algorithms that need to be migrated – a very important task because we need to proactively switch from weakened algorithms to newer, more robust ones as cryptography strength decays over time.\nMore generally, improved understanding helps us to make emergency algorithm migrations when a vulnerability of a primitive is discovered.\nMore recently, this is aiding our efforts to ensure post-quantum readiness in our asymmetric use cases. The available data improves our decision-making process while prioritizing quantum-vulnerable use cases\nHow cryptographic monitoring works at Meta\nEffective cryptographic monitoring requires storing persisted logs of cryptographic events, upon which diagnostic and analytic tools can be used to gather further insights. Supporting logging at the scale of FBCrypto requires an implementation with unique performance considerations in mind. Given that FBCrypto is used along many high-volume and critical code paths, a naive logging implementation could easily overwhelm a standard logging infrastructure or cause significant performance regressions. This is true for most widely distributed libraries and is especially true in the field of cryptography, where the sheer volume of usage can come as a complete surprise to those unfamiliar with the space. For example, we recently disclosed that roughly 0.05% of CPU cycles at Meta are spent on X25519 key exchange. \nMost of Meta’s logs are constructed and written via Scribe, Meta’s standard logging framework. From there, data persists in Scuba and Hive, Meta’s short-term and long term data stores, respectively.\nTypically, the Scribe API is called directly to construct a log for every “event” that needs to be logged. For FBCrypto, this would mean constructing a log for nearly every cryptographic operation that our library is used for. Unfortunately, given the sheer frequency of such operations, a solution like this would consume an unreasonable amount of write throughput and storage capacity. A common solution to this problem would be to introduce sampling (i.e., only log 1/X cryptographic operations, and increase X until we no longer have capacity concerns). However, we felt strongly about not introducing any sampling since doing so would result in most logs being omitted, giving us a less clear picture of the library’s usage.\nInstead, the logging uses a “buffering and flushing” strategy, in which cryptographic events are aggregated across time and flushed to a data store at a preconfigured interval.\nDuring the aggregation, a “count” is maintained for every unique event. When it comes time to flush, this count is exported along with the log to convey how often that particular event took place. \nBelow is a rough illustration of what this looks like:\n\nIn the above example, the key named “myKeyName” is used to perform encryption using the AES-GCM-SIV encryption algorithm (in practice we log more fields than just key name, method, and algorithm). The operation happens five times and is assigned on a count of five. Since machines often compute millions of cryptographic operations per day, this strategy can lead to significant compute savings in production. \nA client-side view\nThe aggregation and flushing is implemented within FBCrypto, so the logging and flushing code sits on the client hosts. When clients call a given cryptographic operation (e.g., “encrypt()”), the operation is performed and the log is added to our aggregated buffer. We refer to the object that holds the buffer as the “buffered logger.”\nNote that the logging does not change the interface of FBCrypto, so all of this is transparent to the clients of the library. \n\nIn multithreaded environments all threads will log to the same buffer. For this to be performant, we need to choose the right underlying data structure (see the section below on “Additional optimizations” for more details).\nWhile the aggregation works to reduce space and time overhead, the logs need to eventually be written to storage for further use. To do this, a background thread runs on the client host to periodically call the Scribe API to export the logs and flush the map’s contents. \nBelow is an overview of the overall flow: \n\nAdditional optimizations\nWe had to make some additional optimizations to support cryptographic monitoring on Meta’s major products (Facebook, Whatsapp, Instagram, etc.).\nWith careful design choices around the logging logic and data structures used, our cryptographic logging operates with no sampling and has had a negligible impact on compute performance across Meta’s fleet.\nPartially randomized flushing\nDue to the nature of our buffering and flushing strategy, certain clients who were running jobs that restarted large sets of machines at around the same time would have those machines’ logs get flushed at about the same time. This would result in “spiky” writes to the logging platform, followed by longer periods of underutilization between flushes. To normalize our write throughput, we distribute these spikes across time by applying a randomized delay on a per-host basis before logs are flushed for the first time. This leads to a more uniform flushing cadence, allowing for a more consistent load on Scribe. \nThe figure below demonstrates how this works:\n\nDerived crypto\nFBCrypto supports a feature called derived crypto, which allows “child” keysets to be derived from “parent” keysets by applying a key derivation function (KDF) to all the keys in the keyset with some salt. This feature is used by a few large-scale use cases that need to generate millions of keys.\nOur logging initially created a unique row in the buffered logger for every derived keyset, which used a lot of space and put increased load on backend data stores. To address this, we now aggregate the cryptographic operations of derived keys under the name of the parent key. This reduces our overall capacity needs without harming our ability to detect key overuse since, in the worst case, the aggregations would be a pessimistic counter for any given child key. \nThanks to this aggregation, we were able to cut down on the vast majority of our logging volume, compared to the space that would have been used with no aggregation. \nThe Folly library \nInternally, our buffering makes use of the folly::ConcurrentHashMap, which is built to be performant under heavy writes in multithreaded environments, while still guaranteeing atomic accesses.  \nUnified offerings\nMeta’s existing infrastructure and its emphasis on unified offerings are key to supporting this at scale (see the Scribe logging framework and the FBCrypto library). These properties often mean that solutions only have to be implemented once in order for the entire company to benefit.\nThis is especially true here. Most machines in Meta’s fleet can log to Scribe, giving us easy log ingestion support. Furthermore, the wide adoption of FBCrypto gives us insights into cryptographic operations without needing clients to migrate to a new library/API. \nFrom an engineering perspective, this helps us overcome many hurdles that others in the industry might face. For example, it helps us avoid fragmentation that might require multiple custom solutions to be implemented, which would increase our engineering workload.\nThe impact of cryptographic monitoring\nThe insights from our cryptographic monitoring efforts have served multiple use cases across our security and infrastructure reliability efforts.\nPreemptively mitigating security vulnerabilities\nThanks to our long retention window, we can monitor trends over time and use them for more predictive modeling and analysis. We can present our findings to cryptography experts, who can do further analysis and predict whether vulnerabilities may emerge. This allows us to preemptively identify clients using cryptography in risky ways and work with them to mitigate these issues before they become real security vulnerabilities. \nThis is particularly beneficial in preparation for the world of post-quantum cryptography (PQC), which requires us to find clients using vulnerable algorithms and ensure they are migrated off in a timely fashion. \nWe have also found that being able to preemptively detect these vulnerabilities well in advance has led to stronger support during cross-team collaborations. Thanks to the ample notice, teams can seamlessly integrate any necessary migration efforts into their roadmap with minimal interruption to their ongoing projects.\nPromoting infrastructure reliability\nOur root dataset has also served as a useful proxy for client health. This is partially thanks to the lack of sampling, as we can see the exact number of calls taking place, along with their respective success rates. This has been particularly important during large-scale migrations, where anomalous drops in success rate, call volume, etc., may indicate a bug in a new code path. Indeed, numerous detectors and alarms have been built off our dataset to help us perform big migrations safely.\nThe dataset also contains library versioning information, so we can monitor what versions of our library are running across the fleet in real-time. This has been especially useful for rolling out new features, as we can see exactly which clients have picked up the latest changes. This allows us to move faster and more confidently, even when running large-scale migrations across the fleet. \nChallenges to cryptographic monitoring\nSupporting cryptographic logging at Meta’s scale has had its own unique set of challenges.\nCapacity constraints\nDespite our optimizations, we have occasionally found ourselves putting increased load on Scribe (see point above about underestimating cryptographic usage) and have worked with the Scribe team to manage the unexpected increase in write throughput. Doing so has been relatively easy for the company, considering the design optimizations mentioned above.\nWe also occasionally put an increased load on Scuba, which is optimized to be performant for real-time data (i.e., warm storage) and can be inefficient if used for larger datasets. To minimize compute costs, we also rely on Hive tables for longer-term storage (i.e., cold storage). \nFlushing on shutdown\nBesides flushing the logs in the shared singleton map at a preconfigured time interval, client machines will also do one final flush to log all remaining contents of their log buffer to Scribe when a job is being shut down. We have found that operating in a “shutdown environment” can lead to a number of interesting scenarios, particularly when attempting to access Scribe and its dependencies. Many of these scenarios boil down to the nuances of folly::Singleton, which is Meta’s go-to library for managing singletons. Likewise, running something “on shutdown” in Java requires using only synchronous I/O code and operating quickly.\nOur next initiatives for cryptographic monitoring\nWhile our work thus far has been largely a success, there are many exciting avenues for improvements. For example, further optimizing Scribe throughput and Scuba storage utilization to make more efficient use of Meta’s infrastructure  \nWe will also continue to leverage the logging data to further develop monitoring and data analytics to promote security and reliability. On the security side, this means continuing to take an inventory of use cases that would be vulnerable in a PQC world and migrate them to more resilient algorithms/configurations. In terms of reliability, it means gaining a better understanding of the end-to-end latency for cryptography use cases.\nWithin all of this it’s also important that we continue driving the unification of cryptographic offerings and monitoring tooling. While FBCrypto provides a unified set of offerings, there are other cryptographic use cases across Meta that use a different set of tools for telemetry and data collection. More non-trivial work is needed to achieve full unification with all use cases.\nAcknowledgments\nThis work could not have been accomplished without the critical efforts of numerous folks, particularly Grace Wu, Ilya Maykov, Isaac Elbaz, and the rest of the CryptoEng team at Meta.\nThe post How Meta built large-scale cryptographic monitoring appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Cryptographic monitoring at scale has been instrumental in helping our engineers understand how cryptography is used at Meta. Monitoring has given us a distinct advantage in our efforts to proactively detect and remove weak cryptographic algorithms and has assisted with our general change safety and reliability efforts. We’re sharing insights into our own cryptographic monitoring [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/11/12/security/how-meta-built-large-scale-cryptographic-monitoring/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/11/12/security/how-meta-built-large-scale-cryptographic-monitoring/\">How Meta built large-scale cryptographic monitoring</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Cryptographic monitoring at scale has been instrumental in helping our engineers understand how cryptography is used at Meta. Monitoring has given us a distinct advantage in our efforts to proactively detect and remove weak cryptographic algorithms and has assisted with our general change safety and reliability efforts. We’re sharing insights into our own cryptographic monitoring [...]\nRead More...\nThe post How Meta built large-scale cryptographic monitoring appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21935",
        "categories": [
          "Security"
        ],
        "isoDate": "2024-11-12T17:00:10.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "eBay News Team",
        "title": "Introducing eBay Evo: The Evolution of eBay’s Brand and Design System",
        "link": "https://innovation.ebayinc.com/tech/features/ebay-evo-the-evolution-of-ebays-brand-and-design-system/",
        "pubDate": "Mon, 18 Nov 2024 00:00:00 -0800",
        "dc:creator": "eBay News Team",
        "content": "<div style=\"margin-bottom: 10px;\"><img src=\"https://static.ebayinc.com/static/assets/Uploads/Blog/Posts/_resampled/FitWzIwMCwxMTNd/Overview-Still.jpg?fs=aa44968bd70eed27\" width=\"200\" height=\"113\" alt=\"Introducing eBay Evo: The Evolution of eBay’s Brand and Design System\" /></div><div>Developed in-house, Evo enhances the customer experience through a modern and simplified approach.</div>",
        "contentSnippet": "Developed in-house, Evo enhances the customer experience through a modern and simplified approach.",
        "guid": "https://innovation.ebayinc.com/tech/features/ebay-evo-the-evolution-of-ebays-brand-and-design-system/",
        "categories": [
          "article"
        ],
        "isoDate": "2024-11-18T08:00:00.000Z"
      }
    ]
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": [
      {
        "creator": "Netflix Technology Blog",
        "title": "Netflix’s Distributed Counter Abstraction",
        "link": "https://netflixtechblog.com/netflixs-distributed-counter-abstraction-8d0c45eb66b2?source=rss----2615bd06b42e---4",
        "pubDate": "Tue, 12 Nov 2024 20:45:23 GMT",
        "content:encodedSnippet": "By: Rajiv Shringi, Oleksii Tkachuk, Kartik Sathyanarayanan\nIntroduction\nIn our previous blog post, we introduced Netflix’s TimeSeries Abstraction, a distributed service designed to store and query large volumes of temporal event data with low millisecond latencies. Today, we’re excited to present the Distributed Counter Abstraction. This counting service, built on top of the TimeSeries Abstraction, enables distributed counting at scale while maintaining similar low latency performance. As with all our abstractions, we use our Data Gateway Control Plane to shard, configure, and deploy this service globally.\nDistributed counting is a challenging problem in computer science. In this blog post, we’ll explore the diverse counting requirements at Netflix, the challenges of achieving accurate counts in near real-time, and the rationale behind our chosen approach, including the necessary trade-offs.\nNote: When it comes to distributed counters, terms such as ‘accurate’ or ‘precise’ should be taken with a grain of salt. In this context, they refer to a count very close to accurate, presented with minimal delays.\nUse Cases and Requirements\nAt Netflix, our counting use cases include tracking millions of user interactions, monitoring how often specific features or experiences are shown to users, and counting multiple facets of data during A/B test experiments, among others.\nAt Netflix, these use cases can be classified into two broad categories:\n\nBest-Effort: For this category, the count doesn’t have to be very accurate or durable. However, this category requires near-immediate access to the current count at low latencies, all while keeping infrastructure costs to a minimum.\nEventually Consistent: This category needs accurate and durable counts, and is willing to tolerate a slight delay in accuracy and a slightly higher infrastructure cost as a trade-off.\n\nBoth categories share common requirements, such as high throughput and high availability. The table below provides a detailed overview of the diverse requirements across these two categories.\n\nDistributed Counter Abstraction\nTo meet the outlined requirements, the Counter Abstraction was designed to be highly configurable. It allows users to choose between different counting modes, such as Best-Effort or Eventually Consistent, while considering the documented trade-offs of each option. After selecting a mode, users can interact with APIs without needing to worry about the underlying storage mechanisms and counting methods.\nLet’s take a closer look at the structure and functionality of the API.\nAPI\nCounters are organized into separate namespaces that users set up for each of their specific use cases. Each namespace can be configured with different parameters, such as Type of Counter, Time-To-Live (TTL), and Counter Cardinality, using the service’s Control Plane.\nThe Counter Abstraction API resembles Java’s AtomicInteger interface:\nAddCount/AddAndGetCount: Adjusts the count for the specified counter by the given delta value within a dataset. The delta value can be positive or negative. The AddAndGetCount counterpart also returns the count after performing the add operation.\n{\n  \"namespace\": \"my_dataset\",\n  \"counter_name\": \"counter123\",\n  \"delta\": 2,\n  \"idempotency_token\": { \n    \"token\": \"some_event_id\",\n    \"generation_time\": \"2024-10-05T14:48:00Z\"\n  }\n}\nThe idempotency token can be used for counter types that support them. Clients can use this token to safely retry or hedge their requests. Failures in a distributed system are a given, and having the ability to safely retry requests enhances the reliability of the service.\nGetCount: Retrieves the count value of the specified counter within a dataset.\n{\n  \"namespace\": \"my_dataset\",\n  \"counter_name\": \"counter123\"\n}\nClearCount: Effectively resets the count to 0 for the specified counter within a dataset.\n{\n  \"namespace\": \"my_dataset\",\n  \"counter_name\": \"counter456\",\n  \"idempotency_token\": {...}\n}\nNow, let’s look at the different types of counters supported within the Abstraction.\nTypes of Counters\nThe service primarily supports two types of counters: Best-Effort and Eventually Consistent, along with a third experimental type: Accurate. In the following sections, we’ll describe the different approaches for these types of counters and the trade-offs associated with each.\nBest Effort Regional Counter\nThis type of counter is powered by EVCache, Netflix’s distributed caching solution built on the widely popular Memcached. It is suitable for use cases like A/B experiments, where many concurrent experiments are run for relatively short durations and an approximate count is sufficient. Setting aside the complexities of provisioning, resource allocation, and control plane management, the core of this solution is remarkably straightforward:\n// counter cache key\ncounterCacheKey = <namespace>:<counter_name>\n// add operation\nreturn delta > 0\n    ? cache.incr(counterCacheKey, delta, TTL)\n    : cache.decr(counterCacheKey, Math.abs(delta), TTL);\n// get operation\ncache.get(counterCacheKey);\n// clear counts from all replicas\ncache.delete(counterCacheKey, ReplicaPolicy.ALL);\nEVCache delivers extremely high throughput at low millisecond latency or better within a single region, enabling a multi-tenant setup within a shared cluster, saving infrastructure costs. However, there are some trade-offs: it lacks cross-region replication for the increment operation and does not provide consistency guarantees, which may be necessary for an accurate count. Additionally, idempotency is not natively supported, making it unsafe to retry or hedge requests.\nEdit: A note on probabilistic data structures:\nProbabilistic data structures like HyperLogLog (HLL) can be useful for tracking an approximate number of distinct elements, like distinct views or visits to a website, but are not ideally suited for implementing distinct increments and decrements for a given key. Count-Min Sketch (CMS) is an alternative that can be used to adjust the values of keys by a given amount. Data stores like Redis support both HLL and CMS. However, we chose not to pursue this direction for several reasons:\n\nWe chose to build on top of data stores that we already operate at scale.\nProbabilistic data structures do not natively support several of our requirements, such as resetting the count for a given key or having TTLs for counts. Additional data structures, including more sketches, would be needed to support these requirements.\nOn the other hand, the EVCache solution is quite simple, requiring minimal lines of code and using natively supported elements. However, it comes at the trade-off of using a small amount of memory per counter key.\n\nEventually Consistent Global Counter\nWhile some users may accept the limitations of a Best-Effort counter, others opt for precise counts, durability and global availability. In the following sections, we’ll explore various strategies for achieving durable and accurate counts. Our objective is to highlight the challenges inherent in global distributed counting and explain the reasoning behind our chosen approach.\nApproach 1: Storing a Single Row per Counter\nLet’s start simple by using a single row per counter key within a table in a globally replicated datastore.\n\nLet’s examine some of the drawbacks of this approach:\n\nLack of Idempotency: There is no idempotency key baked into the storage data-model preventing users from safely retrying requests. Implementing idempotency would likely require using an external system for such keys, which can further degrade performance or cause race conditions.\nHeavy Contention: To update counts reliably, every writer must perform a Compare-And-Swap operation for a given counter using locks or transactions. Depending on the throughput and concurrency of operations, this can lead to significant contention, heavily impacting performance.\n\nSecondary Keys: One way to reduce contention in this approach would be to use a secondary key, such as a bucket_id, which allows for distributing writes by splitting a given counter into buckets, while enabling reads to aggregate across buckets. The challenge lies in determining the appropriate number of buckets. A static number may still lead to contention with hot keys, while dynamically assigning the number of buckets per counter across millions of counters presents a more complex problem.\nLet’s see if we can iterate on our solution to overcome these drawbacks.\nApproach 2: Per Instance Aggregation\nTo address issues of hot keys and contention from writing to the same row in real-time, we could implement a strategy where each instance aggregates the counts in memory and then flushes them to disk at regular intervals. Introducing sufficient jitter to the flush process can further reduce contention.\n\nHowever, this solution presents a new set of issues:\n\nVulnerability to Data Loss: The solution is vulnerable to data loss for all in-memory data during instance failures, restarts, or deployments.\nInability to Reliably Reset Counts: Due to counting requests being distributed across multiple machines, it is challenging to establish consensus on the exact point in time when a counter reset occurred.\nLack of Idempotency: Similar to the previous approach, this method does not natively guarantee idempotency. One way to achieve idempotency is by consistently routing the same set of counters to the same instance. However, this approach may introduce additional complexities, such as leader election, and potential challenges with availability and latency in the write path.\n\nThat said, this approach may still be suitable in scenarios where these trade-offs are acceptable. However, let’s see if we can address some of these issues with a different event-based approach.\nApproach 3: Using Durable Queues\nIn this approach, we log counter events into a durable queuing system like Apache Kafka to prevent any potential data loss. By creating multiple topic partitions and hashing the counter key to a specific partition, we ensure that the same set of counters are processed by the same set of consumers. This setup simplifies facilitating idempotency checks and resetting counts. Furthermore, by leveraging additional stream processing frameworks such as Kafka Streams or Apache Flink, we can implement windowed aggregations.\n\nHowever, this approach comes with some challenges:\n\nPotential Delays: Having the same consumer process all the counts from a given partition can lead to backups and delays, resulting in stale counts.\nRebalancing Partitions: This approach requires auto-scaling and rebalancing of topic partitions as the cardinality of counters and throughput increases.\n\nFurthermore, all approaches that pre-aggregate counts make it challenging to support two of our requirements for accurate counters:\n\nAuditing of Counts: Auditing involves extracting data to an offline system for analysis to ensure that increments were applied correctly to reach the final value. This process can also be used to track the provenance of increments. However, auditing becomes infeasible when counts are aggregated without storing the individual increments.\nPotential Recounting: Similar to auditing, if adjustments to increments are necessary and recounting of events within a time window is required, pre-aggregating counts makes this infeasible.\n\nBarring those few requirements, this approach can still be effective if we determine the right way to scale our queue partitions and consumers while maintaining idempotency. However, let’s explore how we can adjust this approach to meet the auditing and recounting requirements.\nApproach 4: Event Log of Individual Increments\nIn this approach, we log each individual counter increment along with its event_time and event_id. The event_id can include the source information of where the increment originated. The combination of event_time and event_id can also serve as the idempotency key for the write.\n\nHowever, in its simplest form, this approach has several drawbacks:\n\nRead Latency: Each read request requires scanning all increments for a given counter potentially degrading performance.\nDuplicate Work: Multiple threads might duplicate the effort of aggregating the same set of counters during read operations, leading to wasted effort and subpar resource utilization.\nWide Partitions: If using a datastore like Apache Cassandra, storing many increments for the same counter could lead to a wide partition, affecting read performance.\nLarge Data Footprint: Storing each increment individually could also result in a substantial data footprint over time. Without an efficient data retention strategy, this approach may struggle to scale effectively.\n\nThe combined impact of these issues can lead to increased infrastructure costs that may be difficult to justify. However, adopting an event-driven approach seems to be a significant step forward in addressing some of the challenges we’ve encountered and meeting our requirements.\nHow can we improve this solution further?\nNetflix’s Approach\nWe use a combination of the previous approaches, where we log each counting activity as an event, and continuously aggregate these events in the background using queues and a sliding time window. Additionally, we employ a bucketing strategy to prevent wide partitions. In the following sections, we’ll explore how this approach addresses the previously mentioned drawbacks and meets all our requirements.\nNote: From here on, we will use the words “rollup” and “aggregate” interchangeably. They essentially mean the same thing, i.e., collecting individual counter increments/decrements and arriving at the final value.\nTimeSeries Event Store:\nWe chose the TimeSeries Data Abstraction as our event store, where counter mutations are ingested as event records. Some of the benefits of storing events in TimeSeries include:\nHigh-Performance: The TimeSeries abstraction already addresses many of our requirements, including high availability and throughput, reliable and fast performance, and more.\nReducing Code Complexity: We reduce a lot of code complexity in Counter Abstraction by delegating a major portion of the functionality to an existing service.\nTimeSeries Abstraction uses Cassandra as the underlying event store, but it can be configured to work with any persistent store. Here is what it looks like:\n\nHandling Wide Partitions: The time_bucket and event_bucket columns play a crucial role in breaking up a wide partition, preventing high-throughput counter events from overwhelming a given partition. For more information regarding this, refer to our previous blog.\nNo Over-Counting: The event_time, event_id and event_item_key columns form the idempotency key for the events for a given counter, enabling clients to retry safely without the risk of over-counting.\nEvent Ordering: TimeSeries orders all events in descending order of time allowing us to leverage this property for events like count resets.\nEvent Retention: The TimeSeries Abstraction includes retention policies to ensure that events are not stored indefinitely, saving disk space and reducing infrastructure costs. Once events have been aggregated and moved to a more cost-effective store for audits, there’s no need to retain them in the primary storage.\nNow, let’s see how these events are aggregated for a given counter.\nAggregating Count Events:\nAs mentioned earlier, collecting all individual increments for every read request would be cost-prohibitive in terms of read performance. Therefore, a background aggregation process is necessary to continually converge counts and ensure optimal read performance.\nBut how can we safely aggregate count events amidst ongoing write operations?\nThis is where the concept of Eventually Consistent counts becomes crucial. By intentionally lagging behind the current time by a safe margin, we ensure that aggregation always occurs within an immutable window.\nLets see what that looks like:\n\nLet’s break this down:\n\nlastRollupTs: This represents the most recent time when the counter value was last aggregated. For a counter being operated for the first time, this timestamp defaults to a reasonable time in the past.\nImmutable Window and Lag: Aggregation can only occur safely within an immutable window that is no longer receiving counter events. The “acceptLimit” parameter of the TimeSeries Abstraction plays a crucial role here, as it rejects incoming events with timestamps beyond this limit. During aggregations, this window is pushed slightly further back to account for clock skews.\n\nThis does mean that the counter value will lag behind its most recent update by some margin (typically in the order of seconds). This approach does leave the door open for missed events due to cross-region replication issues. See “Future Work” section at the end.\n\nAggregation Process: The rollup process aggregates all events in the aggregation window since the last rollup to arrive at the new value.\n\nRollup Store:\nWe save the results of this aggregation in a persistent store. The next aggregation will simply continue from this checkpoint.\n\nWe create one such Rollup table per dataset and use Cassandra as our persistent store. However, as you will soon see in the Control Plane section, the Counter service can be configured to work with any persistent store.\nLastWriteTs: Every time a given counter receives a write, we also log a last-write-timestamp as a columnar update in this table. This is done using Cassandra’s USING TIMESTAMP feature to predictably apply the Last-Write-Win (LWW) semantics. This timestamp is the same as the event_time for the event. In the subsequent sections, we’ll see how this timestamp is used to keep some counters in active rollup circulation until they have caught up to their latest value.\nRollup Cache\nTo optimize read performance, these values are cached in EVCache for each counter. We combine the lastRollupCount and lastRollupTs into a single cached value per counter to prevent potential mismatches between the count and its corresponding checkpoint timestamp.\n\nBut, how do we know which counters to trigger rollups for? Let’s explore our Write and Read path to understand this better.\nAdd/Clear Count:\n\nAn add or clear count request writes durably to the TimeSeries Abstraction and updates the last-write-timestamp in the Rollup store. If the durability acknowledgement fails, clients can retry their requests with the same idempotency token without the risk of overcounting. Upon durability, we send a fire-and-forget request to trigger the rollup for the request counter.\nGetCount:\n\nWe return the last rolled-up count as a quick point-read operation, accepting the trade-off of potentially delivering a slightly stale count. We also trigger a rollup during the read operation to advance the last-rollup-timestamp, enhancing the performance of subsequent aggregations. This process also self-remediates a stale count if any previous rollups had failed.\nWith this approach, the counts continually converge to their latest value. Now, let’s see how we scale this approach to millions of counters and thousands of concurrent operations using our Rollup Pipeline.\nRollup Pipeline:\nEach Counter-Rollup server operates a rollup pipeline to efficiently aggregate counts across millions of counters. This is where most of the complexity in Counter Abstraction comes in. In the following sections, we will share key details on how efficient aggregations are achieved.\nLight-Weight Roll-Up Event: As seen in our Write and Read paths above, every operation on a counter sends a light-weight event to the Rollup server:\nrollupEvent: {\n  \"namespace\": \"my_dataset\",\n  \"counter\": \"counter123\"\n}\nNote that this event does not include the increment. This is only an indication to the Rollup server that this counter has been accessed and now needs to be aggregated. Knowing exactly which specific counters need to be aggregated prevents scanning the entire event dataset for the purpose of aggregations.\n\nIn-Memory Rollup Queues: A given Rollup server instance runs a set of in-memory queues to receive rollup events and parallelize aggregations. In the first version of this service, we settled on using in-memory queues to reduce provisioning complexity, save on infrastructure costs, and make rebalancing the number of queues fairly straightforward. However, this comes with the trade-off of potentially missing rollup events in case of an instance crash. For more details, see the “Stale Counts” section in “Future Work.”\nMinimize Duplicate Effort: We use a fast non-cryptographic hash like XXHash to ensure that the same set of counters end up on the same queue. Further, we try to minimize the amount of duplicate aggregation work by having a separate rollup stack that chooses to run fewer beefier instances.\n\nAvailability and Race Conditions: Having a single Rollup server instance can minimize duplicate aggregation work but may create availability challenges for triggering rollups. If we choose to horizontally scale the Rollup servers, we allow threads to overwrite rollup values while avoiding any form of distributed locking mechanisms to maintain high availability and performance. This approach remains safe because aggregation occurs within an immutable window. Although the concept of now() may differ between threads, causing rollup values to sometimes fluctuate, the counts will eventually converge to an accurate value within each immutable aggregation window.\nRebalancing Queues: If we need to scale the number of queues, a simple Control Plane configuration update followed by a re-deploy is enough to rebalance the number of queues.\n      \"eventual_counter_config\": {             \n          \"queue_config\": {                    \n            \"num_queues\" : 8,  // change to 16 and re-deploy\n...\nHandling Deployments: During deployments, these queues shut down gracefully, draining all existing events first, while the new Rollup server instance starts up with potentially new queue configurations. There may be a brief period when both the old and new Rollup servers are active, but as mentioned before, this race condition is managed since aggregations occur within immutable windows.\nMinimize Rollup Effort: Receiving multiple events for the same counter doesn’t mean rolling it up multiple times. We drain these rollup events into a Set, ensuring a given counter is rolled up only once during a rollup window.\nEfficient Aggregation: Each rollup consumer processes a batch of counters simultaneously. Within each batch, it queries the underlying TimeSeries abstraction in parallel to aggregate events within specified time boundaries. The TimeSeries abstraction optimizes these range scans to achieve low millisecond latencies.\nDynamic Batching: The Rollup server dynamically adjusts the number of time partitions that need to be scanned based on cardinality of counters in order to prevent overwhelming the underlying store with many parallel read requests.\n\nAdaptive Back-Pressure: Each consumer waits for one batch to complete before issuing the rollups for the next batch. It adjusts the wait time between batches based on the performance of the previous batch. This approach provides back-pressure during rollups to prevent overwhelming the underlying TimeSeries store.\nHandling Convergence:\n\nIn order to prevent low-cardinality counters from lagging behind too much and subsequently scanning too many time partitions, they are kept in constant rollup circulation. For high-cardinality counters, continuously circulating them would consume excessive memory in our Rollup queues. This is where the last-write-timestamp mentioned previously plays a crucial role. The Rollup server inspects this timestamp to determine if a given counter needs to be re-queued, ensuring that we continue aggregating until it has fully caught up with the writes.\nNow, let’s see how we leverage this counter type to provide an up-to-date current count in near-realtime.\nExperimental: Accurate Global Counter\nWe are experimenting with a slightly modified version of the Eventually Consistent counter. Again, take the term ‘Accurate’ with a grain of salt. The key difference between this type of counter and its counterpart is that the delta, representing the counts since the last-rolled-up timestamp, is computed in real-time.\n\nAnd then, currentAccurateCount = lastRollupCount + delta\n\nAggregating this delta in real-time can impact the performance of this operation, depending on the number of events and partitions that need to be scanned to retrieve this delta. The same principle of rolling up in batches applies here to prevent scanning too many partitions in parallel. Conversely, if the counters in this dataset are accessed frequently, the time gap for the delta remains narrow, making this approach of fetching current counts quite effective.\nNow, let’s see how all this complexity is managed by having a unified Control Plane configuration.\nControl Plane\nThe Data Gateway Platform Control Plane manages control settings for all abstractions and namespaces, including the Counter Abstraction. Below, is an example of a control plane configuration for a namespace that supports eventually consistent counters with low cardinality:\n\"persistence_configuration\": [\n  {\n    \"id\": \"CACHE\",                             // Counter cache config\n    \"scope\": \"dal=counter\",                                                   \n    \"physical_storage\": {\n      \"type\": \"EVCACHE\",                       // type of cache storage\n      \"cluster\": \"evcache_dgw_counter_tier1\"   // Shared EVCache cluster\n    }\n  },\n  {\n    \"id\": \"COUNTER_ROLLUP\",\n    \"scope\": \"dal=counter\",                    // Counter abstraction config\n    \"physical_storage\": {                     \n      \"type\": \"CASSANDRA\",                     // type of Rollup store\n      \"cluster\": \"cass_dgw_counter_uc1\",       // physical cluster name\n      \"dataset\": \"my_dataset_1\"                // namespace/dataset   \n    },\n    \"counter_cardinality\": \"LOW\",              // supported counter cardinality\n    \"config\": {\n      \"counter_type\": \"EVENTUAL\",              // Type of counter\n      \"eventual_counter_config\": {             // eventual counter type\n        \"internal_config\": {                  \n          \"queue_config\": {                    // adjust w.r.t cardinality\n            \"num_queues\" : 8,                  // Rollup queues per instance\n            \"coalesce_ms\": 10000,              // coalesce duration for rollups\n            \"capacity_bytes\": 16777216         // allocated memory per queue\n          },\n          \"rollup_batch_count\": 32             // parallelization factor\n        }\n      }\n    }\n  },\n  {\n    \"id\": \"EVENT_STORAGE\",\n    \"scope\": \"dal=ts\",                         // TimeSeries Event store\n    \"physical_storage\": {\n      \"type\": \"CASSANDRA\",                     // persistent store type\n      \"cluster\": \"cass_dgw_counter_uc1\",       // physical cluster name\n      \"dataset\": \"my_dataset_1\",               // keyspace name\n    },\n    \"config\": {                              \n      \"time_partition\": {                      // time-partitioning for events\n        \"buckets_per_id\": 4,                   // event buckets within\n        \"seconds_per_bucket\": \"600\",           // smaller width for LOW card\n        \"seconds_per_slice\": \"86400\",          // width of a time slice table\n      },\n      \"accept_limit\": \"5s\",                    // boundary for immutability\n    },\n    \"lifecycleConfigs\": {\n      \"lifecycleConfig\": [\n        {\n          \"type\": \"retention\",                 // Event retention\n          \"config\": {\n            \"close_after\": \"518400s\",\n            \"delete_after\": \"604800s\"          // 7 day count event retention\n          }\n        }\n      ]\n    }\n  }\n]\nUsing such a control plane configuration, we compose multiple abstraction layers using containers deployed on the same host, with each container fetching configuration specific to its scope.\n\nProvisioning\nAs with the TimeSeries abstraction, our automation uses a bunch of user inputs regarding their workload and cardinalities to arrive at the right set of infrastructure and related control plane configuration. You can learn more about this process in a talk given by one of our stunning colleagues, Joey Lynch : How Netflix optimally provisions infrastructure in the cloud.\nPerformance\nAt the time of writing this blog, this service was processing close to 75K count requests/second globally across the different API endpoints and datasets:\n\nwhile providing single-digit millisecond latencies for all its endpoints:\n\nFuture Work\nWhile our system is robust, we still have work to do in making it more reliable and enhancing its features. Some of that work includes:\n\nRegional Rollups: Cross-region replication issues can result in missed events from other regions. An alternate strategy involves establishing a rollup table for each region, and then tallying them in a global rollup table. A key challenge in this design would be effectively communicating the clearing of the counter across regions.\nError Detection and Stale Counts: Excessively stale counts can occur if rollup events are lost or if a rollup fails and isn’t retried. This isn’t an issue for frequently accessed counters, as they remain in rollup circulation. This issue is more pronounced for counters that aren’t accessed frequently. Typically, the initial read for such a counter will trigger a rollup, self-remediating the issue. However, for use cases that cannot accept potentially stale initial reads, we plan to implement improved error detection, rollup handoffs, and durable queues for resilient retries.\n\nConclusion\nDistributed counting remains a challenging problem in computer science. In this blog, we explored multiple approaches to implement and deploy a Counting service at scale. While there may be other methods for distributed counting, our goal has been to deliver blazing fast performance at low infrastructure costs while maintaining high availability and providing idempotency guarantees. Along the way, we make various trade-offs to meet the diverse counting requirements at Netflix. We hope you found this blog post insightful.\nStay tuned for Part 3 of Composite Abstractions at Netflix, where we’ll introduce our Graph Abstraction, a new service being built on top of the Key-Value Abstraction and the TimeSeries Abstraction to handle high-throughput, low-latency graphs.\nAcknowledgments\nSpecial thanks to our stunning colleagues who contributed to the Counter Abstraction’s success: Joey Lynch, Vinay Chella, Kaidan Fullerton, Tom DeVoe, Mengqing Wang\n\nNetflix’s Distributed Counter Abstraction was originally published in Netflix TechBlog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Netflix Technology Blog",
        "guid": "https://medium.com/p/8d0c45eb66b2",
        "categories": [
          "counter",
          "software-architecture",
          "system-design-interview",
          "distributed-systems",
          "scalability"
        ],
        "isoDate": "2024-11-12T20:45:23.000Z"
      }
    ]
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Elena Kerpeleva",
        "title": "Busy Plugin Developers Newsletter – Q3 2024",
        "link": "https://blog.jetbrains.com/platform/2024/11/busy-plugin-developers-newsletter-q3-2024/",
        "pubDate": "Mon, 18 Nov 2024 20:39:43 +0000",
        "content:encodedSnippet": "⭐️ Community highlights\nJetBrains Plugin Developer Conf 2024: Kicking off our first event\nOn November 7, we hosted the first-ever JetBrains Plugin Developer Conf, a virtual event dedicated entirely to plugin development for JetBrains products.\n\n\n\n\nThe conference brought together JetBrains experts and plugin developers to explore a wide range of topics, including developing and launching plugins on JetBrains Marketplace, plugin localization, handling user feedback, plugin testing, building collaborative plugins, and more. Attendees also got a glimpse into our future plans for Marketplace and the latest tooling updates.\nMissed the event? You can watch the recording here.\n⭐️ Marketplace updates\nSpecial offers are now displayed on the Pricing Tab\nPaid plugin authors can now display discounts on the Pricing tab, with the previous price crossed out. To set up a special offer, reach out to the JetBrains Marketplace Support team. Learn more in our documentation. \n\n\n\n\nSales report update\nWe’ve made some improvements to our sales report. You can now filter reports by month, and the table includes detailed information about purchased licenses. Additionally, the full report can be downloaded as a .csv file. \n\n\n\n\nMore new UI Icons for your plugins\nWe’ve added over 1,000 new UI icons to the IntelliJ Platform Icons library. These icons are tailored to the new UI and come with Apache 2.0 licensing. You can also use our Figma library to design your own custom icons. Get all the details in this blog post. \nMigrating your IntelliJ IDEA Kotlin plugin to K2 Mode\nIf your plugin code depends on the Kotlin K1 plugin API, this news is for you. Starting from IntelliJ 2024.2.1, you need to migrate to the Kotlin K2 mode. Otherwise, your plugin might not work properly when K2 mode is enabled. Learn more about how to migrate in this blog post.\n⭐️ Plugin development tooling updates\nIntelliJ Platform Plugin Template 2.0.2\nThe IntelliJ Platform Plugin Template is a repository that streamlines the initial stages of plugin development for IntelliJ-based IDEs. The latest update upgrades the Gradle Wrapper to 8.10.2, sets the platformVersion to 2023.3.8, and updates key dependencies. Check out the release notes for more details. \nIntelliJ Plugin Verifier 1.379\nPlugin Verifier Version 1.379 adds the ability to ignore restrictions on the internal com.intellij.languageBundle extension point, improved handling for malformed annotation descriptors with obfuscation, and support for composite action names with namespaces in TeamCity Actions. This update also removes duplicate vendor checks for JetBrains plugins, unifies plugin problem classification, and fixes an issue with empty dotnet plugin names. Check out the changelog for more details.\nIntelliJ Platform Gradle Plugin 2.0 is out\nVersion 2.0 of the IntelliJ Platform Gradle Plugin is now available. This updated plugin for the Gradle build system simplifies the configuration of environments for building, testing, verifying, and publishing plugins for IntelliJ-based IDEs.  Find all of the details here. \nUseful resources\nThreading Model and Background Processes\nThe revamped Threading Model page provides updated guidance on managing concurrency in the IntelliJ Platform, detailing UI thread restrictions, background tasks, and thread safety to help developers build responsive, stable plugins. \nThe new Background Processes page complements this with best practices for handling asynchronous tasks, using progress indicators, and creating cancelable tasks for enhanced user experience and performance.\nWorkspace Model\nThe Workspace Model article introduces plugin developers to the Workspace Model in the IntelliJ Platform, highlighting its architecture, data handling capabilities, and interaction with the Project Model. It explains how to use the Workspace Model to efficiently store, manage, and access project-related data.",
        "dc:creator": "Elena Kerpeleva",
        "content": "⭐️ Community highlights JetBrains Plugin Developer Conf 2024: Kicking off our first event On November 7, we hosted the first-ever JetBrains Plugin Developer Conf, a virtual event dedicated entirely to plugin development for JetBrains products. The conference brought together JetBrains experts and plugin developers to explore a wide range of topics, including developing and launching [&#8230;]",
        "contentSnippet": "⭐️ Community highlights JetBrains Plugin Developer Conf 2024: Kicking off our first event On November 7, we hosted the first-ever JetBrains Plugin Developer Conf, a virtual event dedicated entirely to plugin development for JetBrains products. The conference brought together JetBrains experts and plugin developers to explore a wide range of topics, including developing and launching […]",
        "guid": "https://blog.jetbrains.com/?post_type=platform&p=527916",
        "categories": [
          "marketplace",
          "news",
          "busy-plugin-developers"
        ],
        "isoDate": "2024-11-18T20:39:43.000Z"
      },
      {
        "creator": "Alexandra Charikova",
        "title": "Let’s meet at Slush 2024 in Helsinki!",
        "link": "https://blog.jetbrains.com/blog/2024/11/18/let-s-meet-at-slush-2024-in-helsinki/",
        "pubDate": "Mon, 18 Nov 2024 18:26:29 +0000",
        "content:encodedSnippet": "Meet with our JetBrains for Startups team at Slush 2024 in Helsinki on November 20–21!\nThis November, our JetBrains team is returning for the third year in a row to the most founder-focused event on Earth. Join us at booth 7A2 to discuss how our tools can accelerate your startup’s growth, win exclusive swag, or simply drop by to say hello!\nOur team will be there to talk about AI, scaling startups, and the future of development. In addition, we’ll be showcasing our latest AI-powered tools, including IDEs, AI Assistant, and YouTrack. You can also catch a glimpse of the new tools, special partner offers, and exclusive resources that have been added to our JetBrains Startup Program. Whether you are building your first MVP, scaling up, or refining your product, our tools can support you in the process.\nYou can also learn more about our Partner Program for incubators, accelerators, and investors – a unique opportunity to bring JetBrains tools to your portfolio companies. To meet with us, book a slot via the Slush Platform, reach out at startups@jetbrains.com, or simply stop by our booth.\nDon’t miss our special activities, including a Wheel of Fortune with special prizes to be won!\n\n\n\n\nWhere to find us:\nHall: 7 | Booth: 7A2, near the Builder Stage and Mentoring Area\nVenue: Messukeskus Helsinki\n\n\n\n\nLearn more about our programs for startups:\nJetBrains Startup Program\nJetBrains Partner Program for incubators, accelerators and investors\nWe look forward to connecting with you at Slush 2024 and exploring how JetBrains can help bring your ideas to life. See you there!",
        "dc:creator": "Alexandra Charikova",
        "content": "Meet with our JetBrains for Startups team at Slush 2024 in Helsinki on November 20–21! This November, our JetBrains team is returning for the third year in a row to the most founder-focused event on Earth. Join us at booth 7A2 to discuss how our tools can accelerate your startup’s growth, win exclusive swag, or [&#8230;]",
        "contentSnippet": "Meet with our JetBrains for Startups team at Slush 2024 in Helsinki on November 20–21! This November, our JetBrains team is returning for the third year in a row to the most founder-focused event on Earth. Join us at booth 7A2 to discuss how our tools can accelerate your startup’s growth, win exclusive swag, or […]",
        "guid": "https://blog.jetbrains.com/?post_type=blog&p=528503",
        "categories": [
          "events",
          "startup-offer",
          "startups"
        ],
        "isoDate": "2024-11-18T18:26:29.000Z"
      },
      {
        "creator": "Teodor Irkhin",
        "title": "K2 Mode Becomes Stable",
        "link": "https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/",
        "pubDate": "Mon, 18 Nov 2024 14:16:21 +0000",
        "content:encodedSnippet": "In IntelliJ IDEA 2024.3, K2 mode is out of Beta and is now Stable and ready for general use. K2 mode significantly improves code analysis stability, memory consumption efficiency, and the IDE’s overall performance, and it supports Kotlin 2.1 language features.\nBackground\nK2 mode in IntelliJ IDEA was developed to address limitations in the previous version of the Kotlin plugin, including various performance and stability issues. It aims to enhance the efficiency of the Kotlin plugin for IntelliJ IDEA by improving code analysis stability and performance while reducing UI freezes. Additionally, K2 mode enables support for new language features that will be introduced in Kotlin 2.1 and later versions.\nCompatibility\nIntelliJ IDEA’s K2 mode doesn’t depend on the Kotlin compiler version specified in the project’s build settings. K2 mode represents an almost complete rewrite of Kotlin support within the IDE. The name “K2” reflects that the Kotlin plugin includes an internal version of the K2 Kotlin compiler, which it uses for code analysis, while K1 mode uses the K1 compiler. The version of the Kotlin compiler bundled in IntelliJ IDEA is entirely independent of the version specified in the project’s build file, though it may affect the range of supported Kotlin versions in projects.\nHow to enable K2 mode\nTo enable K2 mode, go to Preferences/Settings | Languages & Frameworks | Kotlin and select the Enable K2 mode checkbox.\n\n\n\n\nResults\nAdoption\nSince the 2024.2 release, K2 mode (Beta) has shown adoption rates of 15% – and this number is growing weekly. K2 mode was enabled by default starting with 2024.3 EAP 1, and 86% of developers who tried it are still using it.\nPerformance\nWith the new architecture, K2 mode has vast potential for future enhancements, and we already have improvements in Kotlin code analysis, completion, and navigation speed. \nThere are benchmarks that we use to measure the performance of the most popular IntelliJ IDEA features. These benchmarks work on real codebases, including open-source and internal projects. Here are some of the projects we measured the performance on:\nIntelliJ IDEA: the IntelliJ IDEA Ultimate’s source code (closed source)\nkotlinx.coroutines https://github.com/Kotlin/kotlinx.coroutines \nKtor: https://github.com/ktorio/ktor\n\n\n\n\nBelow are the results. Lower is better.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUnsupported functionality \nSome third-party IntelliJ IDEA plugins that depend on the Kotlin plugin may be currently unavailable because of recent changes to the Kotlin plugin API. We’re actively working on supporting plugin authors to make their plugins compatible with K2 mode as quickly as possible. For more information, please refer to our detailed migration guide.\nSome functionality like Kotlin scratch file support, as well as some minor inspections, intention actions, and quick-fixes are still in progress and will be supported in the next version.\nPlans for the future\nBy the 2025.1 version, we plan to make K2 mode the default option.\nWith the new architecture, we’ve broken the ceiling of previous limitations, and we now have many new ways to improve the future performance of the Kotlin plugin. We’ll continue to make it more performant, memory-efficient, and stable to make your experience smoother. While K2 mode is a powerful tool, it’s important to note that it won’t address all challenges immediately, but it does provide a great foundation from which we can make further improvements! \nThe future of Kotlin awaits!",
        "dc:creator": "Teodor Irkhin",
        "content": "In IntelliJ IDEA 2024.3, K2 mode is out of Beta and is now Stable and ready for general use. K2 mode significantly improves code analysis stability, memory consumption efficiency, and the IDE’s overall performance, and it supports Kotlin 2.1 language features. Background K2 mode in IntelliJ IDEA was developed to address limitations in the previous [&#8230;]",
        "contentSnippet": "In IntelliJ IDEA 2024.3, K2 mode is out of Beta and is now Stable and ready for general use. K2 mode significantly improves code analysis stability, memory consumption efficiency, and the IDE’s overall performance, and it supports Kotlin 2.1 language features. Background K2 mode in IntelliJ IDEA was developed to address limitations in the previous […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=527536",
        "categories": [
          "idea",
          "kotlin",
          "news",
          "intelij-idea",
          "k2"
        ],
        "isoDate": "2024-11-18T14:16:21.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "Qodana Case Studies: Preventing Critical Production Incidents with Moovit",
        "link": "https://blog.jetbrains.com/qodana/2024/11/qodana-case-studies-moovit/",
        "pubDate": "Mon, 18 Nov 2024 13:03:28 +0000",
        "content:encodedSnippet": "Moovit – a popular commuter app serving 1.5 billion users in over 3,500 cities – has become a critical part of people’s daily transit since its inception in 2012. \nAs with any large-scale application, the Moovit team has to maintain a clean and sustainable codebase to limit outages and ensure a smooth and effective service for its widespread user base. This also had to be achieved within a team that included users of Java, Spring, Jenkins, and IntelliJ IDEA. \nTechnically, this requires:\nNull pointer detection and finding other flaws that can cause outages.\nReducing production issues in the development stage.\nEnforcing critical code rules, team-wide.\nEnhancing developer productivity and adopting best practices.\n\n\n\n\nPaving the road to production readiness with Qodana\nAfter careful deliberation, Moovit selected Qodana. They were impressed by its strong integration capabilities, competitive pricing, and high level of customization – a combination of features they couldn’t find with another provider. Once these important boxes were checked, the Moovit team used Qodana to:\nHelp run quick scans for early issue detection.\nCreate custom rules and configurations suited to their use case. \nImprove scalability and cost-effectiveness throughout the development process. \nThe result?\n““In the long term, it has stabilized our production system and allowed developers to avoid fixing issues too late in the pipeline. We’re seeing the shift of the paradigm, where development teams follow the policies and save a few sleepless nights with Qodana.””\n\n            \nAmit Weinblum\n                                                                Infrastructure Team Leader at Moovit\n                                    \nView the official case study below for more information on the project and how Moovit benefited from prioritizing code quality with Qodana and IntelliJ IDEA. You can also view other Qodana case studies for more information on how your team can benefit from Qodana. \nView Case Study",
        "dc:creator": "Kerry Beetge",
        "content": "Moovit – a popular commuter app serving 1.5 billion users in over 3,500 cities – has become a critical part of people’s daily transit since its inception in 2012.&#160; As with any large-scale application, the Moovit team has to maintain a clean and sustainable codebase to limit outages and ensure a smooth and effective service [&#8230;]",
        "contentSnippet": "Moovit – a popular commuter app serving 1.5 billion users in over 3,500 cities – has become a critical part of people’s daily transit since its inception in 2012.  As with any large-scale application, the Moovit team has to maintain a clean and sustainable codebase to limit outages and ensure a smooth and effective service […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=527652",
        "categories": [
          "case-study-qodana",
          "idea",
          "qodana",
          "casestudy",
          "intellijidea"
        ],
        "isoDate": "2024-11-18T13:03:28.000Z"
      },
      {
        "creator": "Anna Rovinskaia",
        "title": "New Livestream: The JUnit Crew Presents the Latest Features",
        "link": "https://blog.jetbrains.com/idea/2024/11/new-livestream-the-junit-crew-presents-the-latest-features/",
        "pubDate": "Mon, 18 Nov 2024 09:50:54 +0000",
        "content:encodedSnippet": "Join us for a new IntelliJ IDEA Livestream episode with JUnit team members to discover the most recent updates to the test automation framework.\nDate: November 27, 2024\nTime: 3:00–4:00 pm UTC\nREGISTER FOR THE LIVESTREAM\n\n\n\n\nSession abstract\nIn this session, the JUnit team will introduce the recent 5.11 release’s new features, as well as the highlights of the previous 5.9 and 5.10 releases.\n\nFor JUnit Jupiter, their demos will include enhancements made to Jupiter core extensions (for example, @AutoClose,  @TempDir, and  @Timeout), parameterized tests (for example,  @FieldSource and convenience base classes), repeated tests (failure threshold), and the extension model (for example, ExecutableInvoker and the new TestInstancePreConstructCallback extension point).\n\nOn the platform side, the team will demonstrate life cycle methods for test suites, new ConsoleLauncher options, and the dry-run mode for test execution.\n\nLast but not least, they will share exciting news about their agreement with the Sovereign Tech Fund, who have planned to invest in the project throughout 2024 and 2025. They will conclude the session with an outlook of what’s coming in JUnit 5.12.\n\n\n\n\nAsking questions\nChristian, Mark, Sam, and Juliette will try to answer all of your questions during the session. If we run out of time, we’ll publish answers to any remaining questions in a follow-up blog post.\nYour speakers and host\nSpeakers\nChristian Stein\nBeyond his role working on language tools in the Java Platform Group at Oracle, Christian is a member of the JUnit team, where he explores testing in the modular world and builds a module-only build tool. He also writes blog posts about all things Java at sormuras.github.io.\nMarc Philipp\nMarc is a software engineer with extensive experience in developing business and consumer applications, as well as training and coaching other developers. One of his focus areas has always been providing tools for fellow software developers and improving their productivity. He is a long-time core committer and maintainer of JUnit, as well as an initiator of the JUnit Lambda crowdfunding campaign that resulted in JUnit 5.\nSam Brannen\nSam is a Principal Software Engineer at Broadcom and has extensive experience with the design, implementation, and testing of enterprise Java frameworks and applications using Spring, JUnit, and a plethora of open-source technologies. Sam is a popular speaker at international conferences on Spring, Java, and testing. He is also a core maintainer of Spring and JUnit 5, as well as the author and maintainer of Spring’s testing framework. When not in front of his computer, Sam enjoys traveling and spending time with his kids.\nJuliette de Rancourt\nJuliette has been a full-stack developer for 6 years, building web applications in various functional contexts and contributing to the JUnit 5 framework.\nHost\nMala Gupta\n\nA Java Champion and JUG leader, Mala has authored multiple books with Manning, Packt, and O’Reilly Publications. She has more than two decades of experience in the software industry and is a regular speaker at industry conferences around the world. She is a vocal supporter of Java certification as a path to career advancement.\n\nHappy developing!",
        "dc:creator": "Anna Rovinskaia",
        "content": "Join us for a new IntelliJ IDEA Livestream episode with JUnit team members to discover the most recent updates to the test automation framework. Date: November 27, 2024 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract In this session, the JUnit team will introduce the recent 5.11 release&#8217;s new features, as well as [&#8230;]",
        "contentSnippet": "Join us for a new IntelliJ IDEA Livestream episode with JUnit team members to discover the most recent updates to the test automation framework. Date: November 27, 2024 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract In this session, the JUnit team will introduce the recent 5.11 release’s new features, as well as […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=525646",
        "categories": [
          "livestreams",
          "intellij-idea",
          "intellijidealivestream",
          "livestream",
          "webinars"
        ],
        "isoDate": "2024-11-18T09:50:54.000Z"
      },
      {
        "creator": "Dmitriy Smirnov",
        "title": "Faster Time-to-Code in IntelliJ IDEA",
        "link": "https://blog.jetbrains.com/idea/2024/11/faster-time-to-code-in-intellij-idea/",
        "pubDate": "Thu, 14 Nov 2024 14:57:03 +0000",
        "content:encodedSnippet": "IntelliJ IDEA’s power and wide range of functionality can make it somewhat resource-hungry. Depending on the project you’re working with, the IDE has been known to lag, which can naturally be frustrating.\nPerhaps the most common scenario in which developers are required to wait is when opening a project. IntelliJ IDEA needs to load and synchronize the project, perform indexing, and do a lot of other small things to enable all the useful features it has.\nIn this post, we’ll look at the steps we’ve taken to improve performance in newer versions of IntelliJ IDEA, reducing time-to-code and making the IDE more responsive right from startup.\nDownload IntelliJ IDEA now!\n                                                    \nOur mission: improve time-to-code\nIf you take a look at an IntelliJ IDEA version from before 2023.2, the IDE had to wait for the full sync of your project’s Maven or Gradle project model before it could even start indexing. Then, while waiting for indexing to finish, all the smart features of the IDE, including code highlighting and navigation, were disabled. Only after indexing was complete could they be used.\nHere’s a schematic representation of components involved:\n\n\n\n\nThe time it took to synchronize and index projects increased the larger the projects got. While this was to be expected, as huge projects are more complex for the IDE to work with, waiting several minutes before being able to start working was still tedious.\nUnfortunately, with so many steps to perform while loading a project, significant time could be spent even on smaller ones, resulting in the perception that IntelliJ IDEA was performing slowly.\nNobody likes having to wait, especially when you’re thinking about the work you want to dive into. That’s why we made improving this situation a high-priority task.\nTo gauge our progress, we decided to track what we call time-to-code – the time between the application starting or the project opening and the moment when it becomes possible to comfortably work with code in it. Our goal was simply to reduce time-to-code as much as possible.\nImproving the project opening flow and experience\nThe problem of improving startup and project opening in IntelliJ IDEA is actually complex, as it depends on several components and their interconnection. This complexity has an advantage, however, as it allows us to approach the problem from multiple angles. While we wait for longer-term efforts on technical improvements to bear fruit, we’ve also been able to adjust IntelliJ IDEA’s approach to indexing for significant time-to-code benefits that can already be experienced.\nTechnical improvements\nOne obvious approach to reducing time-to-code is performing technical updates to improve the IDE’s performance – optimizing code and architecture, using better hardware, parallelizing, etc. IntelliJ IDEA is more than 20 years old, and some architectural and algorithmic decisions made in the early days are still present in the product. \nWork is being done here. We’ve invested a lot of effort into proper monitoring, investigating, and optimizing performance bottlenecks, and this has already delivered some noticeable results. We’ve improved the application’s startup Application Performance Index (Apdex) to the top category with a score of 0.94, improved the speed of multi-threaded indexing by 25%, and got rid of unnecessary locks during parallel indexing, reducing the time other threads have to wait for such locks to become available. But this is going to be a long journey, as refactorings can have consequences for other subsystems in the IDE and need to be evaluated carefully over a longer time. For more details about technical performance improvements, check out this great talk by Yuri Artamonov, and stay tuned for more articles.\nWhile we worked on the technical side, we also decided to take a different approach, addressing the perceived performance of the IDE. \nPhased sync indexing\nThe IDE does not necessarily need to be technically improved in order for users to experience it as faster. As long as they are able to start working sooner, they will perceive a performance improvement. From our research, we know that a lot of users think that the IDE is ready for work when they can see the project structure and proper code highlighting. So that is where we concentrated our efforts.\nThe IDE has to perform several crucial steps before highlighting and navigation can work, but we wondered whether these steps really need to run in series, sequentially.\nSome promising experiments in version 2023.3 showed that splitting the process of syncing and indexing into several stages and running them in an asynchronous manner allowed users to get to their code much faster.\nSo as a first step, we made IntelliJ IDEA start indexing the files in the project directory before it actually gets the project model from the underlying build tool like Gradle or Maven. The downside of this was that unnecessary files got indexed, and after synchronizing with the build tool, reindexing was required. Nevertheless, the overall time-to-code (including both the sync and the full indexing) decreased significantly, becoming up to 1.5 times faster on big projects, according to our test suite.\nWithout the project model loaded, however, it was not possible to properly build relationships between parts of the project, show the correct project tree, highlight, or provide navigation.\nTo address this problem, we implemented what we call phased sync. Instead of requesting the full project model from the build tool all at once, we had the IDE get the model in phases. Currently, there are two. \nPhase 1: Skip resolving dependencies\nIn the first phase, which happens as early in the project-loading process as possible, IntelliJ IDEA does not resolve dependencies or connect to the internet. It simply provides a model that’s accurate enough to allow the IDE to show the project tree, index the most necessary parts of the project, and provide some essential smart features. \nObviously, some dependencies might still be missing after this phase, causing resolution problems and cases where code gets marked red even if it is correct. The IDE is actually aware of these false positive errors, and it addresses them at the level of individual language support by suppressing errors that are caused by missing dependencies. It is also able to properly handle navigation attempts with respective messages. Since version 2024.2, this error suppression has worked for Java, and in 2024.3, the support was extended to Kotlin.\nThis first phase is especially fast in Maven because its static pom.xml configuration files can be parsed by the IDE without launching Maven, while still providing enough knowledge to build a very accurate model.\nFor Gradle, which is dynamic by nature and very flexible in its scripts, IntelliJ IDEA cannot parse scripts on its own at the moment – meaning it has to run the Gradle daemon. We sped up this process by only requesting sourceSets, the required language level, and other basic information from Gradle. However, with the Declarative Gradle initiative, we may be able to improve this dramatically in the future.\nPhase 2: Download and resolve dependencies\nDuring the second phase, IntelliJ IDEA downloads all plugins and dependencies, properly resolves all configurations, and provides a fully accurate model for the IDE to work with. Indexes are then updated based on the full model.\nWith this two-phase approach, you get an almost fully functional version of IntelliJ IDEA much faster, while dependencies are still downloaded and resolved.\nAs an additional improvement, we’ve made it possible for a lot of features to work while indexes are not yet ready, further decreasing time-to-code. The most important ones are code highlighting within individual files, partial code resolution, and run configurations. Of course, having the underlying index ready makes these operations even faster, but they work reliably even with only partial indexes.\nThe result\nFrom a bird’s eye view, the entire process now looks like this: \n\n\n\n\nHow do we know it was worth it?\nDepending on the project, time-to-code (or, more precisely, time before full highlighting in the schema above) in our test suite is up to several times faster the first time a project is opened.\nHere is an example showing how fast the project tree is displayed and highlighting is enabled in a project where it used to take tens of seconds to access these features.\n\n\n\n\nSurveys show that around 30% of our users think IntelliJ IDEA 2024.2 allows them to get started with coding faster than before.\nWhat’s next?\nWhile not all of IntelliJ IDEA’s features are available while indexing a project, the two-phased syncing approach has definitely sped up overall startup performance, giving you a faster time-to-code. Additionally, we’ve made many actions compatible with having no index or only a partial one available. And in the version 2024.2, around 10% of our users do actually write code before the entire sync and indexing process finishes. But we’re not done yet.\nOur aim now is to improve phased syncing, especially with Gradle, to improve time-to-code even further. We’re also updating the UX of working with your project while dependencies have not yet been resolved.\nIn the meantime, we hope you enjoy the fruits of the labor we put in improving time-to-code. Download the latest version of IntelliJ IDEA and let us know what you think!",
        "dc:creator": "Dmitriy Smirnov",
        "content": "IntelliJ IDEA’s power and wide range of functionality can make it somewhat resource-hungry. Depending on the project you’re working with, the IDE has been known to lag, which can naturally be frustrating. Perhaps the most common scenario in which developers are required to wait is when opening a project. IntelliJ IDEA needs to load and [&#8230;]",
        "contentSnippet": "IntelliJ IDEA’s power and wide range of functionality can make it somewhat resource-hungry. Depending on the project you’re working with, the IDE has been known to lag, which can naturally be frustrating. Perhaps the most common scenario in which developers are required to wait is when opening a project. IntelliJ IDEA needs to load and […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=525551",
        "categories": [
          "idea",
          "news",
          "indexing",
          "intellij-idea"
        ],
        "isoDate": "2024-11-14T14:57:03.000Z"
      },
      {
        "creator": "Ilia Afanasiev",
        "title": "Unveiling Game Development in Rust with Bevy: Key Insights from Herbert Wolverson’s Livestream",
        "link": "https://blog.jetbrains.com/rust/2024/11/14/unveiling-game-development-in-rust-with-bevy-key-insights-from-herbert-wolverson-s-livestream/",
        "pubDate": "Thu, 14 Nov 2024 14:12:42 +0000",
        "content:encodedSnippet": "Disclaimer: This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format.\nGame development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront of this revolution. In a recent RustRover Livestream, Herbert Wolverson, an accomplished author and educator in the Rust community, shared his expertise on using Rust and Bevy for game development. Here’s a summary of the key insights from the live stream.\n\n\n\n\n\n\nGetting to know Herbert Wolverson\nHerbert Wolverson is renowned for his contributions to the Rust ecosystem. He authored the Rust Roguelike Tutorial, Hands-on Rust, Rust Brain Teasers, and the soon-to-be-published Advanced Hands-on Rust. His expertise extends beyond writing; he also teaches Rust through Ardan Labs, conducts workshops, and is active in open-source projects like LibreQoS.\nIntroduction to Rust\nHerbert began coding at a young age, influenced by his father, who was a computer science teacher. After exploring various programming languages including BASIC, Pascal, C, and C++, Herbert discovered Rust and found its strict, safety-oriented design appealing. He emphasized how Rust’s compiler enforces good practices, such as preventing the use of uninitialized variables and ensuring safe memory management.\nUnderstanding game development Idioms and ECS\nIn traditional game development, many use object-oriented programming (OOP), creating a deep hierarchy of objects. However, this method can lead to performance issues and complex maintenance. Herbert pointed out the limitations of OOP in game development and introduced the Entity-Component-System (ECS) model as a more suitable alternative in Rust.\nBenefits of ECS\n1. Composition Over Inheritance: ECS focuses on composing entities with various components rather than relying on deep inheritance trees.\n2. Performance: ECS models manage memory efficiently, minimizing cache misses and fragmentation.\n3. Parallel Processing: Rust’s strict guarantees allow Bevy to provide multithreading for free, enhancing performance.\nBevy’s ECS and game design\nHerbert outlined the basics of Bevy’s ECS:\n– Entities: Unique IDs without behavior.\n– Components: Data attached to entities.\n– Systems: Functions processing entities and components, forming game logic.\nPractical examples with Bevy\nSetting up Bevy\nTo start, include Bevy in your Cargo.toml file and set up a basic application:\n\n\n\n\nCreating and moving entities\nHerbert demonstrated how to create entities and add components. For instance, spawning Ferris the Crab:\n\n\n\n\nThis code sets up a basic 2D game with a camera and a sprite.\nAdding interactivity\nHerbert explained how to make entities interactive by adding systems that handle user input:\n\n\n\n\nLeveraging Bevy plugins\nHerbert highlighted the power of plugins in Bevy, such as Rapier for physics and Hanabi for particle effects. By adding a few lines, you can integrate complex functionality:\n\n\n\n\nFind the complete code from the livestream in the GitHub repository.\nHerbert Wolverson’s insights showcase the potential of Rust and Bevy for game development. By leveraging Rust’s strict safety features and Bevy’s ECS model, developers can create efficient, high-performance, and safe game applications. Whether you’re a seasoned programmer or new to game development, Bevy provides a robust and flexible framework to bring your game ideas to life. \nAdditional resources:\nFor those looking to delve deeper, Herbert’s books and tutorials are invaluable resources. Stay tuned to our blog for more guides and tutorials on game development with Rust and Bevy. Happy coding!",
        "dc:creator": "Ilia Afanasiev",
        "content": "Disclaimer: This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format. Game development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront [&#8230;]",
        "contentSnippet": "Disclaimer: This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format. Game development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront […]",
        "guid": "https://blog.jetbrains.com/?post_type=rust&p=527370",
        "categories": [
          "intellij-rust",
          "livestream",
          "bevy",
          "game-development-in-rust",
          "rustrover"
        ],
        "isoDate": "2024-11-14T14:12:42.000Z"
      },
      {
        "creator": "Richie Mitish",
        "title": "Discover DataGrip 2024.3: New AI Assistant Features and More",
        "link": "https://blog.jetbrains.com/datagrip/2024/11/14/discover-datagrip-2024-3-new-ai-assistant-features-and-more/",
        "pubDate": "Thu, 14 Nov 2024 14:11:40 +0000",
        "content:encodedSnippet": "DataGrip 2024.3 is here! This is the third major update of 2024. Let’s take a look at what it has to offer. For a detailed description of this update, please visit our What’s New page.\nAI Assistant\nSQL query execution error messages now include useful actions for handling the errors with AI Assistant.\n\n\n\n\n\nText-to-SQL now shows a diff in the editor.\nWorking with data\nThe grid paging control can be moved to the bottom of the data editor.\nThe in-editor query results grid now adjusts to the full width of your editor.\n\n\n\n\nCode editor\nDataGrip now automatically highlights all instances of the text you select within a file.\nThe editor can now identify and highlight queries that contain an excessive number of JOIN clauses.\n\n\n\n\n\nFor BigQuery, the editor now properly detects both table-valued functions and their return columns.\nConnectivity\nSmart refresh is now supported for MySQL and MariaDB.\n\n\n\n\nIf you’re interested in upgrading to DataGrip 2024.3, or if you have any questions or suggestions, here are a few links you might find useful:\nDownload DataGrip 2024.3.\nVisit our What’s New page for the full list of improvements.\nContact us on X.\nReport any bugs to our issue tracker.\n\n\n\n\nThe DataGrip team",
        "dc:creator": "Richie Mitish",
        "content": "DataGrip 2024.3 is here! This is the third major update of 2024. Let’s take a look at what it has to offer. For a detailed description of this update, please visit our What’s New page. AI Assistant Working with data Code editor Connectivity If you’re interested in upgrading to DataGrip 2024.3, or if you have [&#8230;]",
        "contentSnippet": "DataGrip 2024.3 is here! This is the third major update of 2024. Let’s take a look at what it has to offer. For a detailed description of this update, please visit our What’s New page. AI Assistant Working with data Code editor Connectivity If you’re interested in upgrading to DataGrip 2024.3, or if you have […]",
        "guid": "https://blog.jetbrains.com/?post_type=datagrip&p=520271",
        "categories": [
          "news",
          "releases",
          "newsletter"
        ],
        "isoDate": "2024-11-14T14:11:40.000Z"
      },
      {
        "creator": "Maha Taqi",
        "title": "Inline AI Prompting, Coding Assistance for the dataclass_transform Decorator (PEP 681), and More in PyCharm 2024.3!",
        "link": "https://blog.jetbrains.com/pycharm/2024/11/pycharm-2024-3/",
        "pubDate": "Thu, 14 Nov 2024 13:42:07 +0000",
        "content:encodedSnippet": "Code smarter, optimize performance, and stay focused on what matters most with the latest updates in PyCharm 2024.3. From enhanced support for AI Assistant and Jupyter notebooks to new features like no-code data filtering, there’s so much to explore. \nLearn about all the updates on our What’s New page, download the latest version from our website, or update your current version through our free Toolbox App.\n\n\n\n    \nDownload PyCharm 2024.3\n                                                    \nKey features of PyCharm 2024.3\nAI Assistant\nInline AI prompting\nGet help with code, generate documentation, or write tests by prompting AI directly in PyCharm’s editor. Just type your request on a new line and hit Enter.\nEdits made by AI are marked in purple in the gutter, so changes are easy to spot. Need a fresh suggestion? Press Tab, Ctrl+/ ( ⌘/ on macOS), or manually edit the purple input text yourself. This feature is available for Python, JavaScript, TypeScript, JSON, YAML, and Jupyter notebooks.\n\n\n\n\nFor a personalized AI chat experience, you can now also choose from Google Gemini, OpenAI, or your own local models. Moreover, enhanced context management now lets you control what AI Assistant takes into consideration. The brand-new UI auto-includes open files and selected code and comes with options to add or remove files and attach project-wide instructions to guide responses across your codebase.\nAbility to convert for loops into list comprehensions\nRefactor your code faster with AI Assistant, which can now help you change massive for loops into list comprehensions. This feature works for all for loops, including nested and while loops.\n\n\n\n\nLocal multiline AI code completion PyCharm Professional\nPyCharm Professional now provides local multiline AI code completion suggestions based on the proprietary JetBrains ML model used for Full Line Code Completion. Note that we don’t use your data to train the model.\n\n\n\n\nLocal multiline code completion typically generates 2–4 lines of code in scenarios where it can predict the next sequence of logical steps, such as within loops, when handling conditions, or when completing common code patterns and boilerplate sections.\nCoding assistance for the dataclass_transform decorator (PEP 681)\nPyCharm now supports intelligent coding assistance for custom data classes created with libraries using the dataclass_transform decorator. Enjoy the same support as for standard data classes, including attribute code completion and type inference for constructor signatures.\n\n\n\n    \nDownload PyCharm 2024.3\n                                                    \nJupyter Notebook PyCharm Professional\nAuto-installation for multiple packages \nPyCharm 2024.3 makes it easier to install packages that are imported in your code. A new quick-fix is available for bulk auto-installations, allowing you to download and install several packages in one click.\n\n\n\n\nAbility to open Jupyter table outputs in the Data View window\nView Jupyter table outputs in the Data View tool window to access powerful features like heatmaps, formatting, slicing, and AI functions for enhanced dataframe analysis. Just click on the Open in Data View icon to get started. \n\n\n\n\nNo-code data filtering \nEffortlessly filter data in the Data View tool window or within dataframes without writing any code. Just click the Filter icon in the upper-right corner, choose your filter options and see results in the same window. This functionality works with all supported Python frameworks, including pandas, Polars, NumPy, PyTorch, TensorFlow, and Hugging Face Datasets.\n\n\n\n\nDebug port specification PyCharm Professional\nPyCharm now allows you to specify a single debugger port for all communications, simplifying debugging in restricted environments like Docker or WSL. After you set the port in the debugger settings, the debugger runs as a server and all communication between it and the IDE flows through the specified port.\n\n\n\n    \nDownload PyCharm 2024.3\n                                                    \nVisit our What’s New page or check out the full release notes for more features and additional details about the features mentioned here. Please report any bugs on our issue tracker so we can address them promptly.\nConnect with us on X (formerly Twitter) to share your thoughts on PyCharm 2024.3. We look forward to hearing from you!",
        "dc:creator": "Maha Taqi",
        "content": "Code smarter, optimize performance, and stay focused on what matters most with the latest updates in PyCharm 2024.3. From enhanced support for AI Assistant and Jupyter notebooks to new features like no-code data filtering, there’s so much to explore.&#160; Learn about all the updates on our What’s New page, download the latest version from our [&#8230;]",
        "contentSnippet": "Code smarter, optimize performance, and stay focused on what matters most with the latest updates in PyCharm 2024.3. From enhanced support for AI Assistant and Jupyter notebooks to new features like no-code data filtering, there’s so much to explore.  Learn about all the updates on our What’s New page, download the latest version from our […]",
        "guid": "https://blog.jetbrains.com/?post_type=pycharm&p=527287",
        "categories": [
          "releases"
        ],
        "isoDate": "2024-11-14T13:42:07.000Z"
      },
      {
        "creator": "Hanna Yakush",
        "title": "PhpStorm 2024.3 Is Now Available",
        "link": "https://blog.jetbrains.com/phpstorm/2024/11/phpstorm-2024-3-is-now-available/",
        "pubDate": "Thu, 14 Nov 2024 11:26:48 +0000",
        "content:encodedSnippet": "This release is a major update that includes support for PHP 8.4, xdebug_notify(), Pest 3.0, and Pest parallel and mutation testing, and more. If you’re using PhpStorm together with JetBrains AI Assistant, it also got updated with the new AI code completion model, new inline AI prompting, and more.\nDownload PhpStorm 2024.3\n\n\n\n\nPHP 8.4 support\nPhpStorm 2024.3 comes loaded with new inspections and quick-fixes to help you smoothly upgrade to the feature-rich PHP 8.4, set to be released on November 21, 2024. Discover its features in a new video by Brent Roose, our developer advocate:\n\n\n\n\n\n\nBelow is a brief overview of how the new PHP 8.4 features are supported in your PhpStorm workflow. As usual, you can try the new features by setting the project language level to PHP 8.4. You can do so in the language level settings (PHP | PHP Language Level), from the status bar at the bottom of your IDE, or by specifying the requirement in composer.json.\nProperty hooks\nOne of the biggest changes in modern PHP history, property hooks are designed to eliminate boilerplate getters and setters by allowing you to implement get and set hooks for properties.  \nFor property hooks (including the property hooks inside promoted properties), PhpStorm provides:\nA quick-fix for replacing getters and setters with get and set property hooks.\n\n\n\n\n\nAn intention action for adding property hooks to properties.\n\n\n\n\n\nCode completion for the get and set keywords with the insertion of property hook bodies. \n\n\n\n\n\nThe ability to generate get and set hooks for a property via a Generate action similar to Generate | Getters and Setters.\n\n\n\n\n\nAutomatic detection of property hooks that can be converted into their short-hand notations and a quick-fix for converting them.\n\n\n\n\n\nChecks to ensure the proper usage of the property hooks syntax and logic, including:\n\nProperty hook implementation checks in class hierarchies for abstract properties.\nHooked properties that cannot be accessed, read, or written to by reference (&get).\nIncompatible return types in property hooks.\nImproper usage of property hooks with final properties.\nUnused parameters within set property hooks.\nset hook’s parameter type not matching the parameter type declared at the property level. \nIncompatible return types within get hooks.\nDetection of the disallowed readonly hooked properties.\nAsymmetric visibility\nAsymmetric visibility allows a typed property to have separate visibility defined for read and write operations. \nPhpStorm 2024.3 helps ensure the proper implementation of asymmetric visibility scopes in your code by providing checks and quick-fixes for: \nRedundant asymmetric visibility modifiers.\nAttempts to make a property’s set visibility wider than the main (get) visibility.\nRedundant final modifiers for private (set) properties.\nAttempts to narrow property visibility in inherited properties.\nAttempts to modify an asymmetric visibility property outside of the set visibility scope.\n\n\n\n\nNew array functions\nYou can use PhpStorm 2024.3 to convert foreach loops to the newly added array_find(), array_find_key(), array_any(), and array_all() PHP 8.4 functions.\n\n\n\n\nNote that, in PhpStorm, you can run a specific inspection on the project’s whole codebase and apply the fix right from the Problems tool window. Go to Code | Analyze Code | Run Inspection by Name and search for the inspection you need.\n\n\n\n\nnew without parentheses\nPhpStorm 2024.3 supports dropping parentheses around the new expression in constructions of the (new MyClass())->method() type. \n\n\n\n\nYou can view the full list of PHP 8.4 inspections added to PhpStorm in the 2024.3 release by going to Settings | Editor | Inspections and typing “PHP 8.4” in the search field to filter the list.\n\n\n\n\nAI Assistant Plugin\nPlease note that AI Assistant features are only available with an AI Pro subscription or in the trial version. \nTry AI Assistant\nJetBrains’ new code completion model for PHP\nWe’ve significantly improved the quality and reduced the latency of our AI code completion for PHP. These enhancements are powered by Mellum – JetBrains’ new proprietary large language model (LLM) optimized for faster, smarter, and more contextually aware cloud code completion.\nFor more information about JetBrains’ new LLM, see this blog post.\nSyntax highlighting for suggested code\nInline code completion suggestions now come with syntax highlighting, improving their readability.\nIncremental acceptance of code suggestions\nMultiline code suggestions can now be accepted either all at once (by pressing Tab) or incrementally – word by word (Ctrl+→ for Windows or ⌥→ for macOS) or line by line (End for Windows or ⌘Сmd+→ for macOS).\n\n\n\n\nInline AI prompts\nWith new inline AI prompting, AI Assistant now detects and processes requests in natural language as you type them directly in the editor. It instantly interprets the requests and generates suggested code without you having to complete any extra steps. \n\n\n\n\nPhpStorm leaves a purple mark in the gutter next to lines changed by AI Assistant, so you can easily see what has been updated. If you don’t like a suggestion, you can adjust the initial prompt by clicking on the purple block in the gutter or pressing Ctrl+/ (Windows/Linux) or ⌘/ (macOS). \nTitle and description generation for pull and merge requests\nAI Assistant now helps generate accurate titles and descriptions for your pull and merge requests directly from the IDE, streamlining your workflow and ensuring your descriptions are clear and concise.\n\n\n\n\nSQL error handling by AI Assistant\nA couple of useful new actions for handling SQL query execution errors with AI Assistant are accessible in the error message area. Explain with AI opens the AI chat with a prompt automatically sent and AI Assistant’s response with an explanation of the error. The Fix with AI action generates a fix for the query execution error in the editor.\n\n\n\n\n\n\n\n\n\n\n\n\nRead about all the updates to JetBrains AI Assistant.\nTry AI Assistant\nDebugging\nxdebug_notify() support\nTo further enhance your PHP debugging experience, PhpStorm now provides a structured way to handle the output sent from the xdebug_notify() function. \n\n\n\n\nIntroduced in Xdebug 3.1, xdebug_notify() calls allow you to selectively output variables to the debugging console in PhpStorm.\nLaravel ecosystem\nLaravel Herd’s PHP interpreter in PhpStorm\nFor the Laravel developers using Laravel Herd, PhpStorm 2024.3 now automatically detects the path to the currently used Laravel Herd’s PHP executable on your machine. To use this interpreter in PhpStorm, go to the CLI interpreter settings (PHP | CLI interpreter  |  … ), and in the CLI Interpreters dialog that opens, select the PHP executable from the list of pre-configured options. \n\n\n\n\nPest framework enhancements\nPhpStorm 2024.3 significantly improves the Pest testing framework experience for Laravel developers. We’ve implemented full support for Pest 3.0 and the ability to run parallel and mutation tests using Pest right from your IDE.\nMutation testing with Pest 3.0\nThe recently released Pest 3.0 introduced mutation testing, which makes small changes to the code to track whether the tests can catch them. \nYou can trigger Pest’s Run Tests (Pest) with Mutation option in PhpStorm 2024.3 like any other test option – right from the editor, from the Project tool window, or via a run/debug configuration – and use the dedicated Pest Mutation tool window to inspect the test results. \nJust make sure that the PHP interpreter used in your IDE has Xdebug 3.0+ installed as well.\n\n\n\n\nFor details, refer to the PhpStorm documentation.\nParallel testing with Pest\nIn PhpStorm 2024.3, you no longer need to switch to the terminal to run Pest tests in parallel mode. Just navigate to the test file and select Run Tests (Pest) in Parallel from the in-editor gutter icon, from the context menu in the Project tool window, or via a run/debug configuration.\n\n\n\n\nVersion control systems\nResolution of import statement merge conflicts\nPhpStorm can now automatically resolve merge conflicts in import statements. To enable this feature, select the Resolve conflicts in import statements option in the merge dialog under the gear icon, or go to Settings | Tools | Diff & Merge and select Automatically resolve conflicts in import statements.\n\n\n\n\nUpdates to Find in Files\nThe Find in Files feature has been enhanced with a new search scope, Project Files Excluding Git-Ignored. This option excludes any files ignored in .gitignore files from your search results, helping you focus only on the relevant code when searching through your project.\n\n\n\n\nOption to disable background pre-commit checks\nYou can now manage background checks during the commit process with a new Run advanced checks after a commit is done option under Settings | Version Control | Commit. This setting lets you decide if tests and inspections should run after making a commit. If you want these checks to be completed before the commit happens, simply disable it.\n\n\n\n\nBranch name on the Welcome screen\nThe Welcome screen now shows the branch name for projects with the same name, helping you stay organized when handling multiple project versions and allowing you to easily switch between working directories.\n\n\n\n\nDatabase tools\nFragment introspection and smart refresh for MySQL and MariaDB\nPhpStorm now supports fragment introspection. Previously, the introspector could perform only a full introspection of schemas in the MySQL or MariaDB databases but not refresh the metadata of a single object. Every time a DDL statement was executed in the console and that execution could modify an object in the database schema, the IDE would start a full introspection of the entire schema. This was time-consuming and often disrupted the workflow.Now, PhpStorm can analyze a DDL statement, determine which objects could have been affected by it, and refresh only those objects. If you select a single item in Database Explorer and call the Refresh action, only one object will be refreshed, instead of the entire schema as it was before.\nInspection for an excessive number of JOIN clauses\nIn certain cases, running a query that contains an excessive number of JOIN clauses is not recommended due to performance degradation. The editor can now identify and highlight such queries. You can enable this inspection in the IDE settings. To do so, navigate to Editor | Inspections, expand the SQL section, and select Excessive JOIN count.\n\n\n\n\nFloating pagination toolbar\nTo make grid paging more noticeable in our data editor, we have moved the control for it from the toolbar to the bottom center of the data editor.\n\n\n\n\nFrontend\nCleaner search results for directories\nPhpStorm now excludes node_modules results by default when using Find in Files in project directories, reducing clutter from irrelevant files. You can restore the previous behavior by enabling the Search in library files when “Directory” is selected in Find in Files option under Settings | Advanced Settings.\n\nImproved framework component navigation and renaming\nWe’ve enhanced in-editor hints for Vue, Svelte, and Astro components. The Show component usages action now finds usages in both imports and markup templates. We’ve also added a Show Component Usages filter to exclude component usages when searching for regular file references. The Rename refactoring has also been updated with an option to include usages when renaming a component file.\n\n\n\n\nColor preview for Tailwind CSS classes\nThe color preview for Tailwind CSS classes is now shown inline in the editor, making it easier to tell the colors apart. We’ve added support for the textDocument/documentColor method from the Language Server Protocol (LSP), so all LSP-based plugins now offer this functionality out of the box.\n\n\n\n\nImprovements for Angular\nFor projects with Angular 19, PhpStorm now defaults to standalone mode for components, directives, and pipes. Quick-fixes have been added to help convert between standalone and non-standalone components. Unused standalone imports can be automatically removed during code reformatting or via a new inspection. Support for the @let syntax has also been improved.\n\n\n\n\nUI\nHighlighting for all occurrences of selected text \nBy default, PhpStorm will now automatically highlight all instances of the text you select within a file. This makes it easier to track where the selected text appears throughout your code. If you prefer the previous behavior, you can disable this feature in Settings | Editor | General | Appearance.\n\n\n\n\n\n\n\n\n\nYou can find the full list of changes included in PhpStorm 2024.3 on the release notes page.\nDownload PhpStorm 2024.3\nThat’s all for today. We hope you’ll enjoy the latest enhancement to PhpStorm!\nHere are some helpful quick links:\nDownload PhpStorm\nTweet us\nPlease report any bugs to our issue tracker. Your feedback is extremely valuable to us!",
        "dc:creator": "Hanna Yakush",
        "content": "This release is a major update that includes support for PHP 8.4, xdebug_notify(), Pest 3.0, and Pest parallel and mutation testing, and more. If you’re using PhpStorm together with JetBrains AI Assistant, it also got updated with the new AI code completion model, new inline AI prompting, and more. Download PhpStorm 2024.3 PHP 8.4 support [&#8230;]",
        "contentSnippet": "This release is a major update that includes support for PHP 8.4, xdebug_notify(), Pest 3.0, and Pest parallel and mutation testing, and more. If you’re using PhpStorm together with JetBrains AI Assistant, it also got updated with the new AI code completion model, new inline AI prompting, and more. Download PhpStorm 2024.3 PHP 8.4 support […]",
        "guid": "https://blog.jetbrains.com/?post_type=phpstorm&p=523929",
        "categories": [
          "releases",
          "2024-3",
          "release"
        ],
        "isoDate": "2024-11-14T11:26:48.000Z"
      },
      {
        "creator": "Ruslan Akhmetzianov",
        "title": "GoLand 2024.3 Is Out!",
        "link": "https://blog.jetbrains.com/go/2024/11/14/goland-2024-3-is-out/",
        "pubDate": "Thu, 14 Nov 2024 10:41:35 +0000",
        "content:encodedSnippet": "GoLand 2024.3 comes with a set of new features and inspections designed to streamline the developer workflow. For AI users, we’ve refined multiline code completion and added a brand-new inline prompts feature. Startup performance for large projects has also been significantly improved, and we’ve added support for some of the latest (and some upcoming) Go language features, too. Let’s dive right into all the new enhancements!\n      \n        Download GoLand 2024.3\n    \n\n\n\n\n\n\n\n\nNew inspection for cyclic imports: Circular imports can be quite confusing, especially in complex scenarios. And they lead to compilation errors! GoLand 2024.3 comes with an inspection that analyzes dependencies and informs you about cyclic imports before you run go build.\n\n\n\n\nManagement of multiple Go services and configurations in a single UI: To provide the best possible development experience, we’ve implemented a handy UI solution that allows you to run and manage multiple services and configurations in a single subwindow.\n\n\n\n\nFaster opening of larger projects: By migrating dependency data collection to parallel threads, we’ve significantly boosted indexing and project opening speeds. The exact speed gains will vary based on your individual hardware and project configuration, but they can reach 2x to 3x in optimal setups.\nString() object view in debugger: GoLand shows String representation and now renders specific types right in the debugger view.\nEmulate terminal in output console option: Now you can enable terminal emulation for your configurations directly from the Run/Debug tool window. This feature is perfect for CLI applications, as it allows you to view output in a real terminal built in the IDE, enhancing testing and debugging!\nData flow analysis in the Go plugin: Data flow analysis inspections are now available in the Go plugin for IntelliJ IDEA Ultimate.\nNew AI features\nMultiline cloud completion: JetBrains AI Assistant for GoLand 2024.3 introduces significant enhancements to cloud code completion, offering faster and more accurate suggestions. The UX has been reworked to better integrate AI code completion features into IDE workflows, with improvements like syntax highlighting in suggested code and incremental acceptance of code suggestions.\n\n\n\n\nInline AI prompts: In GoLand 2024.3, we’re introducing a new way to interact with AI Assistant – an inline input that detects and processes your requests as you type. This lets you express your intentions in English, which AI Assistant instantly interprets and converts into code changes without any extra steps.\n\n\n\n\nGoLand also inherits updates from IntelliJ IDEA, WebStorm, and DataGrip. Below, we share the most exciting updates:\nKubernetes\nNew resources in the Services view: GoLand 2024.3 brings enhanced control for even more Kubernetes resources in the Services view, including:\nEndpoints\nNetwork policies\nPort forwarding\nContainers in pods\nStreamline your workflow with expanded access to key resources, all from a single interface!\n\n\n\n\nPort forwarding: In GoLand 2024.3 you will be able to easily manage connections to services within your cluster directly from your local IDE. With new management tools for port forwarding, you can now:\nGet a quick overview of active port usage\nStop and reconnect with ease\nRelease ports effortlessly when you’re done using them\nYou no longer need to use ps aux | grep port-forward!\nTerraform and the HCL plugin\nSupport for OpenTofu: OpenTofu is an open-source, community-driven alternative to HashiCorp’s Terraform, which also provides support for .tofu files. This update includes autocompletion for encryption methods, key providers, and inspections for unknown references, making infrastructure-as-code development more efficient and secure.\n\n\n\n\nAdditionally, we’ve added support for modules initialized with OpenTofu, expanding the capabilities of this tool within the IDE.\nTerraform usage indicators: Check out the new quick navigation capabilities, which allow you to see where specific variables, resources, and modules are used. These indicators show the number of usages and their exact locations, enabling you to jump directly to them with a single click. This feature eliminates the need to manually search through files, making it especially useful for navigating large Terraform projects.\n\n\n\n\nThese are just the main highlights. For a complete rundown of the new features, visit our What’s New page.\nWe’d love to hear your feedback on these new features so that we can make them even better. Share your thoughts on X, leave your comments below, create an issue in our tracker, or drop us a message in the #goland-gophers Slack channel. \nHappy developing!",
        "dc:creator": "Ruslan Akhmetzianov",
        "content": "GoLand 2024.3 comes with a set of new features and inspections designed to streamline the developer workflow. For AI users, we’ve refined multiline code completion and added a brand-new inline prompts feature. Startup performance for large projects has also been significantly improved, and we’ve added support for some of the latest (and some upcoming) Go [&#8230;]",
        "contentSnippet": "GoLand 2024.3 comes with a set of new features and inspections designed to streamline the developer workflow. For AI users, we’ve refined multiline code completion and added a brand-new inline prompts feature. Startup performance for large projects has also been significantly improved, and we’ve added support for some of the latest (and some upcoming) Go […]",
        "guid": "https://blog.jetbrains.com/?post_type=go&p=526975",
        "categories": [
          "goland",
          "release"
        ],
        "isoDate": "2024-11-14T10:41:35.000Z"
      },
      {
        "creator": "Alena Guzharina",
        "title": "Datalore On-Premises or Cloud: Which Suits You Best?",
        "link": "https://blog.jetbrains.com/datalore/2024/11/13/datalore-on-premises-or-cloud/",
        "pubDate": "Wed, 13 Nov 2024 17:03:40 +0000",
        "content:encodedSnippet": "In an era where data is the new currency, the ability to quickly gain actionable insights can be a game-changer for businesses and research institutions alike. Shortening the feedback loop between data scientists, analysts, and business intelligence teams can lead to more agile and responsive strategies, ultimately speeding up innovation and optimizing operations. \nJetBrains has always been at the forefront of this challenge, delivering best-in-class tools, including Datalore – the collaborative data science platform for analysts, business teams, and anyone else who needs quicker insights from their data.\nOne of the advantages of Datalore is that it offers two different operational models: On-Premises and Cloud. In this post, we will consider a few advantages of each model and cover the most typical challenges organizations might face when adding a new tool to their daily portfolio.\n\n\n\n\nWhen is Datalore On-Premises preferable?\nDatalore On-Premises is a self-managed installation in the environment of your choice – a private cloud, a public cloud, or even your own bare-metal server.\nWorking with internally hosted data\nMany companies host their databases fully on-premises instead of migrating them offsite. The reasons vary, from compliance factors to cost savings. However, this can lead to a problem. If the data is hosted locally, but the service that needs this data is located somewhere outside of the corporate perimeter, then the data becomes inaccessible to the service. \nThat said, on-premises deployments of data-consuming or processing services are the best solution in cases where you’re working with internally hosted data, as you have full control over the networking and security aspects. This allows you to customize your configuration without jeopardizing any security measures your organization has in place.\nExtended compliance requirements\nConsidering the nature of your data is important when choosing the right tool for processing it, as specific industries may impose additional requirements for data handling systems. \nFor example, if a US-based organization wants to process health-related data, compliance with HIPAA (the Health Insurance Portability and Accountability Act) is required, while compliance with PCI DSS is necessary in the global financial sector. These requirements are often eventually mandated by law or industry standards to apply to both the product and the organization as a whole.\nIn certain cases, as long as the data doesn’t leave the organizational perimeter, the product itself doesn’t have to undergo the whole process of vetting, testing, and certification by an independent third-party authority, like the Office for Civil Rights or the National Institute of Standards and Technology. \nIf you work in a context with extensive compliance standards, on-premises deployment is preferable. Otherwise, your choice of tool vendor becomes significantly limited, as both the tool and the vendor need to be in compliance and hold the necessary certifications, which are expensive and difficult to obtain.\nJetBrains is committed to maintaining the highest level of security when it comes to our data. An annual review by our external auditors recently confirmed our SOC 2 Type II compliance status.\nSpecific environment requirements\nAnother case where on-premises installations are particularly suitable is when there’s a high demand for customization, which is often something that SaaS platforms either can’t provide or can only provide in a limited capacity.\nHere’s a story from one Datalore customer who decided to go with an on-premises deployment:\n\nBy using Datalore On-Premises, we can customize the environment using Linux shell scripts built into the agent image used by Datalore. We can also install our own packages using pip, Poetry, dependency files, and more without any restrictions. This reduces the environment bootstrapping time, which is essential for us as a fast-paced team.\n      \n      Get Datalore On-Premises demo\n    \n\n\n\n\nWhen is Datalore Cloud preferable?\nDatalore Cloud is our software-as-a-service offering, managed and operated by JetBrains.\nNo-ops strategy\nDepending on your organizational goals and priorities, it may make more sense to completely avoid having anything on-premises, including servers and data storage. Instead, you can use managed services by various cloud providers, allowing you to focus on your daily tasks rather than worrying about infrastructure management.\nDatalore Cloud is particularly advantageous for organizations following a no-ops strategy because it eliminates the need for dedicated IT staff to manage hardware or software updates. Additionally, its extensive list of machines provides workload scaling capabilities, ensuring optimal performance as data workloads grow and reducing your organization’s operational burden.\nStarting your data journey\nWhen a team begins a project, they usually need to choose their infrastructure and tooling, a process that can be lengthy enough to have a visible impact on their timeline.\nDatalore Cloud speeds this process along because the only thing you need to start using it for data exploration is your browser. It also comes with a no-commitment 14-day free trial, allowing you to easily determine whether it meets your needs.\nOnce you’ve signed up for Datalore Cloud, you’re ready to explore your data immediately. With any of the paid Datalore Cloud tiers, you get 750 hours of computation time using 4 vCPUs and 16 GB of RAM (2 vCPUs and 4 GB of RAM for free tier users). We’ve found that these resources are sufficient in about 90% of cases, but if you need more, you can scale up with just a single click. Datalore Cloud has an extensive list of machine options that will suit even the most demanding users.\nFlexibility\nYour company’s tooling landscape can change rapidly, as your business requirements evolve together with your team. Because of this, it may not be wise to commit to the fixed, long-term seat capacity offered by Datalore On-Premises. \nFor Datalore Cloud, you have more flexibility in terms of seat capacity adjustments, with an option to scale your team’s capacity based on demand and your current requirements. Additionally, having the flexibility to choose between monthly and discounted annual commitments is a plus.\nAnother important aspect in choosing between the deployment models is the pricing structure. On-premises solutions typically carry an infrastructure setup burden, both on hardware and people, that increases its total cost of ownership.\nGiven the above, Datalore Cloud might be more beneficial if you have a demand for computation-intensive tasks but you either don’t have the expensive hardware required or don’t want to invest heavily into it. In that case, Datalore Cloud offers state-of-the-art environments prepared with all of the necessary resources at a fraction of what the hardware would cost.\n      \n      Try Datalore Cloud 14 days for free\n    \n\n\n\n\nI hope this article helped you get a better idea of which key factors to consider when deciding between on-premises and cloud computing for your business needs. \nIf you have any remaining questions, do not hesitate to schedule a call. We’d be happy to discuss your specific requirements in more detail.",
        "dc:creator": "Alena Guzharina",
        "content": "In an era where data is the new currency, the ability to quickly gain actionable insights can be a game-changer for businesses and research institutions alike. Shortening the feedback loop between data scientists, analysts, and business intelligence teams can lead to more agile and responsive strategies, ultimately speeding up innovation and optimizing operations.&#160; JetBrains has [&#8230;]",
        "contentSnippet": "In an era where data is the new currency, the ability to quickly gain actionable insights can be a game-changer for businesses and research institutions alike. Shortening the feedback loop between data scientists, analysts, and business intelligence teams can lead to more agile and responsive strategies, ultimately speeding up innovation and optimizing operations.  JetBrains has […]",
        "guid": "https://blog.jetbrains.com/?post_type=datalore&p=526021",
        "isoDate": "2024-11-13T17:03:40.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": [
      {
        "creator": "Pei Xiong",
        "title": "Airbnb’s AI-powered photo tour using Vision Transformer",
        "link": "https://medium.com/airbnb-engineering/airbnbs-ai-powered-photo-tour-using-vision-transformer-e470535f76d4?source=rss----53c7c27702d5---4",
        "pubDate": "Wed, 13 Nov 2024 17:39:08 GMT",
        "content:encodedSnippet": "Boosting computer vision accuracy and performance at Airbnb\n\nBy: Pei Xiong, Aaron Yin, Jian Zhang, Lifan Yang, Lu Zhang, Dean Chen\nIntroduction\nIn recent years, the integration of artificial intelligence with travel platforms has transformed how people search for and book accommodations. As a leading global marketplace for unique travel experiences and accommodations, Airbnb constantly strives to enhance the guest experience by providing informative content about the variety of homes shared by our hosts. One of the ways we help guests better understand what a listing offers before they book is through our AI-powered photo tour feature.\nThe AI-powered photo tour in the Listings tab, which helps hosts better organize their listing photos, leverages vision transformers’ fine-tuned feature to assess a diverse set of listing images and accurately identify and classify photos based into specific rooms and spaces. In this blog post, we will dive into the inner workings of the photo tour including model selection, pretraining, fine-tuning techniques, and the trade-offs between computational costs and scalability. We will also specifically discuss how we enhanced model accuracy despite having limited training data.\nFigure 1: Photo Tour product powered by ML\nMethodology\nRoom Classification\nRoom-type classification is the first aspect of the photo tour, The goal of room classification is to accurately categorize images into 16 different room types designed in the Airbnb product such as ‘Bedroom’, ‘Full bathroom’, ‘Half bathroom’, ‘Living room’, and ‘Kitchen’, providing users with a comprehensive understanding of the available spaces. The challenge lies in the diversity of room layouts, lighting conditions, and the need for models that can generalize well across various environments.\nWe conducted experiments using several state-of-the-art models, including Vision Transformer (ViT) variants — ViT-base, ViT-large and different resolutions. Additionally, we explored the performance of ConvNext2, a recently proposed convolutional neural network with comparable performance to ViT, and MaxVit, a variant combining the strengths of both Vision Transformers and CNNs. At the beginning of this project, we tested these approaches on an image classification task with Airbnb’s host-provided data, and found that ViT outperforms the other approaches. Thus we chose ViT in our following studies.\nImage Similarity\nAnother key component of photo tour is image clustering, which groups the images of the same room into a cluster. A prerequisite of that is the ability to measure the similarity between two images, which indicates the probability that the two images belong to the same room. This is a supervised classification problem, with the input being two images, and the output being a binary label of 0 or 1. As shown in Figure 2, We employed a Siamese network that simultaneously processes two images, by applying the same image embedding model to each image, and subsequently computing the cosine similarity of the resulting embeddings.\nFigure 2: An illustration of Siamese network for image similarity\nAccuracy Improvement\nOur analysis found that the volume of training data is key to higher prediction accuracy. Doubling the training data volume typically leads to a reduction of error rate of ≈5% on average, with the effect being more significant in the earlier stages.\nFigure 3: correlation between data volume and accuracy\nUnfortunately, it is very expensive to acquire high-quality training data as it requires human labeling. Therefore, we needed to find other ways to improve model accuracy with a limited amount of training data. We followed these steps to improve model accuracy:\nStep 1 — Pre-training: We started from a pre-trained model on ImageNet. We took that model and trained it with a large amount of host-provided data, which has lower accuracy and only covers some of our class labels. This provided a baseline model for transfer learning in the following steps.\nStep 2 — Multi-task training: We fine-tuned the model from the previous step using both higher-accuracy training data for the target task (e.g., room-type classification), and an additional type of training data that has been labeled for another related task (e.g., object detection). This provided additional training data and created multiple different models for future steps.\nStep 3 — Ensemble learning: We created an ensemble from multiple models in Step 2, which was achieved through training with different auxiliary tasks, and by using different versions of ViTs (e.g., ViT-base vs. ViT-large, and/or those consuming images of size 224 vs 384). This approach allowed us to generate a diverse set of models, from which we selected the best performers to construct the final ensemble model.\nStep 4 — Distillation: Although the ensemble model has higher accuracy than any individual model, it requires more computational resources and thus increases the latency and cost of our product. We trained a distilled model to imitate the behavior of the ensemble model, which has similar accuracy but reduced computational cost by several folds.\nPre-training and Traditional Fine-tuning\nOur pretraining process involved harnessing the vast repository of Airbnb listing photos, comprising of millions of images, to train a Vision Transformer (ViT) model. While leveraging the Airbnb listing photos for pretraining provides a substantial advantage, there are also limitations in the dataset. There were inaccuracies or mislabels in the human-labeled dataset and they materially impacted the model’s ability to discern patterns effectively. Another notable limitation is the coverage of only four out of the total 16 room classifications within the pre-training dataset.\nTherefore, expanding the coverage of fine-tuning to include additional classes is imperative. We developed a detailed and updated guideline and generated a human-label dataset with the entirety of 16 room classifications. Iterative fine-tuning processes gradually encompassed the entirety of the 16 room types, contributing to a more comprehensive and versatile model.\nMulti-task Learning\nAcquiring high-quality human-labeled training data is a challenge due to the costly and time-consuming labeling process. Despite this, we had already accumulated a large repository of labeled data across other various tasks, including room-type classification, image quality prediction, same-room classification, category classification, and object detection. By fully utilizing this extensive and diversely labeled dataset, we significantly improved the prediction accuracy in our tasks. To achieve this, we implemented multi-task training that incorporates additional label classes from existing tasks, as demonstrated in Figure 4. Each learner is a vision transformer, and in addition to predicting a single set of labels, we allowed different learners to learn other label types, such as amenities and ImageNet21k labels, which further boosts overall performance as shown in Table 1.\nFigure 4: Multi-task learning illustration\nEnsemble Learning\nEnsemble learning is a powerful technique in machine learning that leverages diverse models with similar accuracies to achieve better accuracy and generalization.\nWe applied ensemble learning on diverse models with different architectures, model sizes, and auxiliary tasks such as amenities and ImageNet21k class predictions. Upon aggregating the predictions of the individual models, we observed a notable increase in the overall accuracy compared to any single model. The observed improvement is credited to the ensemble’s capability to address and reduce both misclassifications and inaccuracies of individual models, leading to more accurate predictions, despite the limited human-labeled training data.\n\nKnowledge Distillation\nWhile ensemble learning offers substantial gains in accuracy, it requires heightened computational resources as multiple large models are involved in each inference task. To prioritize model efficiency without compromising performance, we turned to knowledge distillation, a technique centered around transferring knowledge from a sophisticated ensemble of models to a more compact single model.\nOur distillation process transfers the knowledge encoded in both hard targets and the soft targets of a complex ensemble to a smaller and simpler model. Hard targets are ground-truth labels while the soft targets are the ensemble’s probabilistic predictions, enabling the smaller model to capture the nuanced decision boundaries learned by the ensemble. The overall training objective is a weighted combination of the two losses:\n\nwhere the first loss is the cross-entropy loss based on hard targets, the second loss is Kullback-Leibler divergence to evaluate the cross entropy between soft targets from the ensemble and the predictions of the student model, and the distillation coefficient determines the weight assigned to the distillation loss.\nRemarkably, our distilled model achieved performance metrics on par with the ensemble models, despite its significantly reduced inference time and resource requirements. This outcome demonstrates the efficacy of knowledge distillation in preserving the ensemble’s collective intelligence within a more streamlined model.\n\nGolden Evaluation\nAs part of the preparations for the launch of our end-to-end Photo Tour, we employed a rigorous evaluation process called “Golden Evaluation”, which mimics the actual user experience by calculating the minimum number of changes required to make the Photo Tour generated by our model identical to the human-labeled ground truth (i.e., the Golden Evaluation). In contrast to training data that is evenly distributed across classes, the golden evaluation processes at the Airbnb listing level, aiming to replicate the user’s perspective. We sampled listings, each containing an average of 25–30 photos, and defined accuracy as the minimum number of corrections required to make assignments consistent with human labels. These corrections refer to changes in room assignment, where a photo’s initial room prediction is modified to match the consensus room label provided by multiple human labels. For example, if a photo of bedroom 1 is falsely assigned to the living room, one correction is required to move it from the living room to bedroom 1.\n\nThere are photos that cannot be properly assigned to a named space. We classified miscellaneous photos, including close-up shots, images containing humans or animals, as well as nearby photos of shopping areas, restaurants, and parks, into the category labeled as “Others”. Furthermore, if a photo is of an empty space in a room such that we cannot judge its room location, we are allowed to designate some photos as “Unassigned”, which do not count in the accuracy calculation. This scenario occurs infrequently (as shown in Table 3), and is primarily used to let users decide in the most ambiguous cases. This evaluation served as the final launch criteria. Ultimately, we successfully reduced the error rate to 5.28%, passing the internal evaluation standard at Airbnb and Photo Tour was launched as a showcase feature in the November 2023 product launch.\n\nConclusion\nOur exploration of using Vision Transformers to improve our photo tour product has been successful and rewarding. By incorporating pretraining, multi-task learning, ensemble learning, and knowledge distillation, we’ve significantly enhanced model accuracy. Pretraining provided a strong foundation, while multi-task learning enriched the model’s ability to interpret diverse visuals. Ensemble learning combined model strengths for robust predictions, and knowledge distillation enabled efficient deployment without sacrificing accuracy.\nThe AI-powered photo tour was launched as part of Airbnb’s 2023 Winter Release. Since then, we have been diligently monitoring the performance of this product and continue to refine our models further for an even more seamless user experience.\nAcknowledgments\nWe would like to thank everyone involved in the project. A special thanks to the entire Airbnb user, listing, and platform team for their relentless efforts in developing and launching the product, ensuring its continued excellence. Additionally, we extend our gratitude to the Airbnb Machine Learning Infra team for their crucial support in building a robust infrastructure that photo tour relies upon.\nIf this type of work interests you, check out some of our related roles!\n\nAirbnb’s AI-powered photo tour using Vision Transformer was originally published in The Airbnb Tech Blog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Pei Xiong",
        "guid": "https://medium.com/p/e470535f76d4",
        "categories": [
          "engineering",
          "technology",
          "computer-vision",
          "machine-learning",
          "ai"
        ],
        "isoDate": "2024-11-13T17:39:08.000Z"
      },
      {
        "creator": "Sharmila Jesupaul",
        "title": "Adopting Bazel for Web at Scale",
        "link": "https://medium.com/airbnb-engineering/adopting-bazel-for-web-at-scale-a784b2dbe325?source=rss----53c7c27702d5---4",
        "pubDate": "Tue, 12 Nov 2024 18:22:17 GMT",
        "content:encodedSnippet": "How and Why We Migrated Airbnb’s Large-Scale Web Monorepo to Bazel\nBy: Brie Bunge and Sharmila Jesupaul\nIntroduction\nAt Airbnb, we’ve recently adopted Bazel — Google’s open source build tool–as our universal build system across backend, web, and iOS platforms. This post will cover our experience adopting Bazel for Airbnb’s large-scale (over 11 million lines of code) web monorepo. We’ll share how we prepared the code base, the principles that guided the migration, and the process of migrating selected CI jobs. Our goal is to share information that would have been valuable to us when we embarked on this journey and to contribute to the growing discussion around Bazel for web development.\nWhy did we do this?\nHistorically, we wrote bespoke build scripts and caching logic for various continuous integration (CI) jobs that proved challenging to maintain and consistently reached scaling limits as the repo grew. For example, our linter, ESLint, and TypeScript’s type checking did not support multi-threaded concurrency out-of-the-box. We extended our unit testing tool, Jest, to be the runner for these tools because it had an API to leverage multiple workers.\nIt was not sustainable to continually create workarounds to overcome the inefficiencies of our tooling which did not support concurrency and we were incurring a long-run maintenance cost. To tackle these challenges and to best support our growing codebase, we found that Bazel’s sophistication, parallelism, caching, and performance fulfilled our needs.\nAdditionally, Bazel is language agnostic. This facilitated consolidation onto a single, universal build system across Airbnb and allowed us to share common infrastructure and expertise. Now, an engineer who works on our backend monorepo can switch to the web monorepo and know how to build and test things.\nWhy was this hard?\nWhen we began the migration in 2021, there was no publicized industry precedent for integrating Bazel with web at scale outside of Google. Open source tooling didn’t work out-of-the-box, and leveraging remote build execution (RBE) introduced additional challenges. Our web codebase is large and contains many loose files, which led to performance issues when transmitting them to the remote environment. Additionally, we established migration principles that included improving or maintaining overall performance and reducing the impact on developers contributing to the monorepo during the transition. We effectively achieved both of these goals. Read on for more details.\nReadying the Repository\nWe did some work up front to make the repository Bazel-ready–namely, cycle breaking and automated BUILD.bazel file generation.\nCycle Breaking\nOur monorepo is laid out with projects under a top-level frontend/ directory. To start, we wanted to add BUILD.bazel files to each of the ~1000 top-level frontend directories. However, doing so created cycles in the dependency graph. This is not allowed in Bazel because there needs to be a DAG of build targets. Breaking these often felt like battling a hydra, as removing one cycle spawns more in its place. To accelerate the process, we modeled the problem as finding the minimum feedback arc set (MFAS)¹ to identify the minimal set of edges to remove leaving a DAG. This set presented the least disruption, level of effort, and surfaced pathological edges.\nAutomated BUILD.bazel Generation\nWe automatically generate BUILD.bazel files for the following reasons:\n\nMost contents are knowable from statically analyzable import / require statements.\nAutomation allowed us to quickly iterate on BUILD.bazel changes as we refined our rule definitions.\nIt would take time for the migration to complete and we didn’t want to ask users to keep these files up-to-date when they weren’t yet gaining value from them.\nManually keeping these files up-to-date would constitute an additional Bazel tax, regressing the developer experience.\n\nWe have a CLI tool called sync-configs that generates dependency-based configurations in the monorepo (e.g., tsconfig.json, project configuration, now BUILD.bazel). It uses jest-haste-map and watchman with a custom version of the dependencyExtractor to determine the file-level dependency graph and part of Gazelle to emit BUILD.bazel files. This CLI tool is similar to Gazelle but also generates additional web specific configuration files such as tsconfig.json files used in TypeScript compilation.\nCI Migration\nWith preparation work complete, we proceeded to migrate CI jobs to Bazel. This was a massive undertaking, so we divided the work into incremental milestones. We audited our CI jobs and chose to migrate the ones that would benefit the most: type checking, linting, and unit testing². To reduce the burden on our developers, we assigned the central Web Platform team the responsibility for porting CI jobs to Bazel. We proceeded one job at a time to deliver incremental value to developers sooner, gain confidence in our approach, focus our efforts, and build momentum. With each job, we ensured that the developer experience was high-quality, that performance improved, CI failures were reproducible locally, and that the tooling Bazel replaced was fully deprecated and removed.\nEnabling TypeScript\nWe started with the TypeScript (TS) CI job. We first tried the open source ts_project rule³. However, it didn’t work well with RBE due to the sheer number of inputs, so we wrote a custom rule to reduce the number and size of the inputs.\nThe biggest source of inputs came from node_modules. Prior to this, the files for each npm package were being uploaded individually. Since Bazel works well with Java, we packaged up a full tar and a TS-specific tar (only containing the *.ts and package.json) for each npm package along the lines of Java JAR files (essentially zips).\nAnother source of inputs came through transitive dependencies. Transitive node_modules and d.ts files in the sandbox were being included because technically they can be needed for subsequent project compilations. For example, suppose project foo depends on bar, and types from bar are exposed in foo’s emit. As a result, project baz which depends on foo would also need bar’s outputs in the sandbox. For long chains of dependencies, this can bloat the inputs significantly with files that aren’t actually needed. TypeScript has a — listFiles flag that tells us which files are part of the compilation. We can package up this limited set of files along with the emitted d.ts files into an output tsc.tar.gz file⁴. With this, targets need only include direct dependencies, rather than all transitive dependencies⁵.\nDiagram showing how we use tars and the — listFiles flag to prune inputs/outputs of :types targets\nThis custom rule unblocked switching to Bazel for TypeScript, as the job was now well under our CI runtime budget.\nBar chart showing the speed up from switching to using our custom genrule\nEnabling ESLint\nWe migrated the ESLint job next. Bazel works best with actions that are independent and have a narrow set of inputs. Some of our lint rules (e.g., special internal rules, import/export, import/extensions) inspected files outside of the linted file. We restricted our lint rules to those that could operate in isolation as a way of reducing input size and having only to lint directly affected files. This meant moving or deleting lint rules (e.g., those that were made redundant with TypeScript). As a result, we reduced CI times by over 70%.\nTime series graph showing the runtime speed-up in early May from only running ESLint on directly affected targets\nEnabling Jest\nOur next challenge was enabling Jest. This presented unique challenges, as we needed to bring along a much larger set of first and third-party dependencies, and there were more Bazel-specific failures to fix.\nWorker and Docker Cache\nWe tarred up dependencies to reduce input size, but extraction was still slow. To address this, we introduced caching. One layer of cache is on the remote worker and another is on the worker’s Docker container, baked into the image at build time. The Docker layer exists to avoid losing our cache when remote workers are auto-scaled. We run a cron job once a week to update the Docker image with the newest set of cached dependencies, striking a balance of keeping them fresh while avoiding image thrashing. For more details, check out this Bazel Community Day talk.\nDiagram showing symlinked npm dependencies to a Docker cache and worker cache\nThis added caching provided us with a ~25% speed up of our Jest unit testing CI job overall and reduced the time to extract our dependencies from 1–3 minutes to 3–7 seconds per target. This implementation required us to enable the NodeJS preserve-symlinks option and patch some of our tools that followed symlinks to their real paths. We extended this caching strategy to our Babel transformation cache, another source of poor performance.\nImplicit Dependencies\nNext, we needed to fix Bazel-specific test failures. Most of these were due to missing files. For any inputs not statically analyzable (e.g., referenced as a string without an import, babel plugin string referenced in .babelrc), we added support for a Bazel keep comment (e.g., // bazelKeep: path/to/file) which acts as though the file were imported. The advantages of this approach are:\n1. It is colocated with the code that uses the dependency,\n2. BUILD.bazel files don’t need to be manually edited to add/move # keep comments,\n3. There is no effect on runtime.\nA small number of tests were unsuitable for Bazel because they required a large view of the repository or a dynamic and implicit set of dependencies. We moved these tests out of our unit testing job to separate CI checks.\nPreventing Backsliding\nWith over 20,000 test files and hundreds of people actively working in the same repository, we needed to pursue test fixes such that they would not be undone as product development progressed.\nOur CI has three types of build queues:\n1. “Required”, which blocks changes,\n2. “Optional”, which is non-blocking,\n3. “Hidden”, which is non-blocking and not shown on PRs.\nAs we fixed tests, we moved them from “hidden” to “required” via a rule attribute. To ensure a single source of truth, tests run in “required” under Bazel were not run under the Jest setup being replaced.\n# frontend/app/script/__tests__/BUILD.bazel\njest_test(\n    name = \"jest_test\",\n    is_required = True, # makes this target a required check on pull requests \n    deps = [\n        \":source_library\",\n    ],\n)\nExample jest_test rule. This signifies that this target will run on the “required” build queue.\nWe wrote a script comparing before and after Bazel to determine migration-readiness, using the metrics of test runtime, code coverage stats, and failure rate. Fortunately, the bulk of tests could be enabled without additional changes, so we enabled these in batches. We divided and conquered the remaining burndown list of failures with the central team, Web Platform, fixing and updating tests in Bazel to avoid putting this burden on our developers. After a grace period, we fully disabled and deleted the non-Bazel Jest infrastructure and removed the is_required param.\nLocal Bazel Experience\nIn tandem with our CI migration, we ensured that developers can run Bazel locally to reproduce and iterate on CI failures. Our migration principles included delivering only what was on par with or superior to the existing developer experience and performance. JavaScript tools have developer-friendly CLI experiences (e.g., watch mode, targeting select files, rich interactivity) and IDE integrations that we wanted to retain. By default, frontend developers can continue using the tools they know and love, and in cases where it is beneficial they can opt into Bazel. Discrepancies between Bazel and non-Bazel are rare and when they do occur, developers have a means of resolving the issue. For example, developers can run a single script, failed-on-pr which will re-run any targets failing CI locally to easily reproduce issues.\nAnnotations on a failing build with scripts to recreate the failures, e.g. yak script jest:failed-on-pr\nWe also do some normalization of platform specific binaries so that we can reuse the cache between Linux and MacOS builds. This speeds up local development and CI jobs by sharing cache between a local developer’s macbook and linux machines in CI. For native npm packages (node-gyp dependencies) we exclude platform-specific files and build the package on the execution machine. The execution machine will be the machine executing the test or build process. We also use “universal binaries” (e.g., for node and zstd), where all platform binaries are included as inputs (so that inputs are consistent no matter which platform the action is run from) and the proper binary is chosen at runtime.\nConclusion\nAdopting Bazel for our core CI jobs yielded significant performance improvements for TypeScript type checking (34% faster), ESLint linting (35% faster), and Jest unit tests (42% faster incremental runs, 29% overall). Moreover, our CI can now better scale as the repo grows.\nNext, to further improve Bazel performance, we will be focusing on persisting a warm Bazel host across CI runs, taming our build graph, powering CI jobs that do not use Bazel with the Bazel build graph, and potentially exploring SquashFS to further compress and optimize our Bazel sandboxes.\nWe hope that sharing our journey has provided insights for organizations considering a Bazel migration for web.\nAcknowledgments\nThank you Madison Capps, Meghan Dow, Matt Insler, Janusz Kudelka, Joe Lencioni, Rae Liu, James Robinson, Joel Snyder, Elliott Sprehn, Fanying Ye, and various other internal and external partners who helped bring Bazel to Airbnb.\nWe are also grateful to the broader Bazel community for being welcoming and sharing ideas.\n****************\n[1]: This problem is NP-complete, though approximation algorithms have been devised that still guarantee no cycles; we chose the implementation outlined in “Breaking Cycles in Noisy Hierarchies”.\n[2]: After initial evaluation, we considered migrating web asset bundling as out of scope (though we may revisit this in the future) due to high level of effort, unknowns in the bundler landscape, and neutral return on investment given our recent adoption of Metro, as Metro’s architecture already factors in scalability features (e.g. parallelism, local and remote caching, and incremental builds).\n[3]: There are newer TS rules that may work well for you here.\n[4]: We later switched to using zstd instead of gzip because it produces archives that are better compressed and more deterministic, keeping tarballs consistent across different platforms.\n[5]: While unnecessary files may still be included, it’s a much narrower set (and could be pruned as a further optimization).\nAll product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.\n\nAdopting Bazel for Web at Scale was originally published in The Airbnb Tech Blog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Sharmila Jesupaul",
        "guid": "https://medium.com/p/a784b2dbe325",
        "categories": [
          "bazel",
          "migration",
          "web",
          "typescript",
          "engineering"
        ],
        "isoDate": "2024-11-12T18:22:17.000Z"
      }
    ]
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Jessie Houghton",
        "title": "Git tooling updates in Visual Studio 17.12",
        "link": "https://devblogs.microsoft.com/visualstudio/git-tooling-updates-in-visual-studio-17-12/",
        "pubDate": "Mon, 18 Nov 2024 15:37:56 +0000",
        "content:encodedSnippet": "We are thrilled to announce the latest updates to Git tooling in Visual Studio, designed to enhance your development experience and streamline your workflow. These new features are in direct response to user feedback, ensuring that you have the tools you need to be more productive and efficient. For the full list, check out the release notes.\nPull request drafts and templates\nYou can now create pull request drafts and start your descriptions with GitHub templates in Visual Studio. These were the two top requests for the create a pull request experience.\nDraft PRs\nUse the drop-down menu on the Create button to Create as Draft.\n\nPR Templates\nYour default PR template will be used when creating a new PR for both GitHub and Azure DevOps. Learn more about how to add a PR template to your repository in the GitHub documentation and Azure DevOps documentation.\nCreate internal GitHub repos\nVisual Studio now supports internal repos for your GitHub organizations. We also included guidance for each type of repository to give you more clarity on the visibility of the new project depending on which account you’re using.\n\nCopy Git link\nWhenever you share a few lines of code with a colleague, it can often be useful for them to get extra context from your repository. However, if they’re working on something else it can take too long and disrupt their work to checkout your branch.\nNow, you can highlight the code you want to share in your editor, open the context menu with a right click, and under the Git submenu get a shareable link to your code in GitHub or Azure DevOps. This makes it simple and easy to collaborate, and it smooths the flow between the IDE and your remote repos on the web.\n\nYou can also get shareable links directly from commit history. This allows for code not currently checked out or code that exists in previous iterations to be referenced just as effortlessly.\n\nCustomize AI Git commit message\nNow you can add additional instructions to the prompt for generating your Git commit message with GitHub Copilot. This allows you to customize the commit message to better fit your workflow and team’s standards. You can specify the number of lines to generate, the length of the lines, and even provide a sample commit style. Edit the message in the Tools > Options > Copilot > Source Control > Commit message additional instructions: prompt field.\n\nGit multi-repo support\nYou can now create pull requests and link work items in multi-repo scenarios. For both GitHub and Azure DevOps, we support your integrations when you use the repository picker to focus on a particular repository in your multi-repo scenarios.\n\nKeep sharing your feedback!\nWe are continuously striving to improve and adapt to your needs, and your feedback is invaluable in this process. Thank you for your continued feedback and support. Your insights help us shape the tools and features that make your development experience more efficient and enjoyable.\nThe post Git tooling updates in Visual Studio 17.12 appeared first on Visual Studio Blog.",
        "dc:creator": "Jessie Houghton",
        "content": "<p>We are thrilled to announce the latest updates to Git tooling in Visual Studio, designed to enhance your development experience and streamline your workflow. These new features are in direct response to user feedback, ensuring that you have the tools you need to be more productive and efficient. For the full list, check out the [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/git-tooling-updates-in-visual-studio-17-12/\">Git tooling updates in Visual Studio 17.12</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "We are thrilled to announce the latest updates to Git tooling in Visual Studio, designed to enhance your development experience and streamline your workflow. These new features are in direct response to user feedback, ensuring that you have the tools you need to be more productive and efficient. For the full list, check out the […]\nThe post Git tooling updates in Visual Studio 17.12 appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251381",
        "categories": [
          "Git",
          "Team and Development",
          "Visual Studio",
          "Git Integration",
          "Multi-repo"
        ],
        "isoDate": "2024-11-18T15:37:56.000Z"
      },
      {
        "creator": "Amy Nguyen",
        "title": "Join Us at Microsoft Ignite: Unlock GitHub Copilot’s New Potential in Visual Studio",
        "link": "https://devblogs.microsoft.com/visualstudio/join-us-at-microsoft-ignite-unlock-github-copilots-new-potential-in-visual-studio/",
        "pubDate": "Fri, 15 Nov 2024 16:00:54 +0000",
        "content:encodedSnippet": "Get ready for an exciting Microsoft Ignite breakout session where we’re unveiling the latest advancements in GitHub Copilot in Visual Studio! Join Dalia Abo Sheasha, Jessie Houghton, and Scott Hanselman as they dive into how GitHub Copilot is evolving to help developers work smarter, collaborate better, and achieve more.\nRegister for Ignite now!\n\nHere’s a little preview of what we’ll be discussing:\nEnhanced AI-Powered Coding Experience\nWe’ll be sharing some powerful new tools that make prompt crafting and code completion smoother than ever. Discover how GitHub Copilot’s conversational abilities are growing to bring even more clarity and productivity to your coding sessions.\nCustomization and Collaboration\nOur team is pushing the boundaries on how GitHub Copilot can be tailored to meet your unique workflow and team needs. Learn about new options for customizing Copilot’s responses, from individual preferences to organization-level customizations that make collaboration easier.\nAdvanced Search and Navigation\nImagine navigating your codebase faster, with GitHub Copilot offering deeper insights right when you need them. We’ll highlight some exciting features designed to make finding, referencing, and editing code even more seamless.\nIntelligent Assistance for Debugging and Review\nEver wish your AI assistant could help you pinpoint issues or suggest improvements? We’re teasing features that aim to do just that — turning GitHub Copilot into a smarter, more interactive debugging and review partner.\nThe Future of GitHub Copilot\nFinally, Scott will wrap up with a look at what’s next for GitHub Copilot, including some steps toward a more integrated, intelligent development experience.\nDon’t Miss Out!\n Session Details\nDate: Wednesday, November 20\nTime: 1:45 PM – 2:30 PM Pacific Standard Time\n Watch the breakout session here to see how GitHub Copilot is transforming from an assistive tool into an essential, dynamic coding companion. We can’t wait to share these updates with you!\nThe post Join Us at Microsoft Ignite: Unlock GitHub Copilot’s New Potential in Visual Studio appeared first on Visual Studio Blog.",
        "dc:creator": "Amy Nguyen",
        "content": "<p>Get ready for an exciting Microsoft Ignite breakout session where we’re unveiling the latest advancements in GitHub Copilot in Visual Studio! Join Dalia Abo Sheasha, Jessie Houghton, and Scott Hanselman as they dive into how GitHub Copilot is evolving to help developers work smarter, collaborate better, and achieve more. Here’s a little preview of what [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/join-us-at-microsoft-ignite-unlock-github-copilots-new-potential-in-visual-studio/\">Join Us at Microsoft Ignite: Unlock GitHub Copilot’s New Potential in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Get ready for an exciting Microsoft Ignite breakout session where we’re unveiling the latest advancements in GitHub Copilot in Visual Studio! Join Dalia Abo Sheasha, Jessie Houghton, and Scott Hanselman as they dive into how GitHub Copilot is evolving to help developers work smarter, collaborate better, and achieve more. Here’s a little preview of what […]\nThe post Join Us at Microsoft Ignite: Unlock GitHub Copilot’s New Potential in Visual Studio appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251336",
        "categories": [
          "GitHub Copilot",
          "Visual Studio",
          "Ignite",
          "Visual Studio 2022"
        ],
        "isoDate": "2024-11-15T16:00:54.000Z"
      },
      {
        "creator": "Mika Dumont",
        "title": "Fix Code with GitHub Copilot",
        "link": "https://devblogs.microsoft.com/visualstudio/fix-code-with-github-copilot/",
        "pubDate": "Thu, 14 Nov 2024 11:00:55 +0000",
        "content:encodedSnippet": "Looking to resolve code issues quickly? The new GitHub Copilot feature integrated into the lightbulb and error list in Visual Studio 2022 offers a valuable solution for developers. Whether you’re working in C# or C++, this feature will help you understand and address problems in your codebase more efficiently.\nThe integration of GitHub Copilot into Visual Studio 2022 provides quick fixes and insightful explanations right at your fingertips. Say goodbye to sifting through documentation or conducting endless online searches to debug your code. The lightbulb and error list now offers direct access to GitHub Copilot’s AI capabilities, streamlining your development process.\nQuick Fixes at Your Fingertips\nTo get started, simply invoke the lightbulb and select Fix with Copilot. This launches an inline chat with GitHub Copilot, offering you an available fix. This seamless interaction allows you to address issues at once, keeping your workflow uninterrupted.\n\nInsightful Explanations for Code Issues\nUnderstanding errors in your code can be challenging, but with GitHub Copilot, clarity is just a click away. Select the GitHub Copilot icon from the error list to open the chat panel, where you’ll find detailed explanations and solutions for the error at hand.\n\nElevate Your Coding Experience\nBy integrating GitHub Copilot, Visual Studio 2022 enhances your coding experience, making it easier to tackle complex problems and improve code quality. We encourage you to explore this feature and see how GitHub Copilot can transform your coding experience.\nWe deeply appreciate the continuous feedback from our users, which drives us to improve and innovate. Your input is invaluable in making Visual Studio better with each update. Happy coding!\nThe post Fix Code with GitHub Copilot appeared first on Visual Studio Blog.",
        "dc:creator": "Mika Dumont",
        "content": "<p>Looking to resolve code issues quickly? The new GitHub Copilot feature integrated into the lightbulb and error list in Visual Studio 2022 offers a valuable solution for developers. Whether you&#8217;re working in C# or C++, this feature will help you understand and address problems in your codebase more efficiently. The integration of GitHub Copilot into [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/fix-code-with-github-copilot/\">Fix Code with GitHub Copilot</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Looking to resolve code issues quickly? The new GitHub Copilot feature integrated into the lightbulb and error list in Visual Studio 2022 offers a valuable solution for developers. Whether you’re working in C# or C++, this feature will help you understand and address problems in your codebase more efficiently. The integration of GitHub Copilot into […]\nThe post Fix Code with GitHub Copilot appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251319",
        "categories": [
          "Artificial Intelligence",
          "Copilot",
          "Cross-Platform",
          "GitHub Copilot",
          "Lightbulb Improvements"
        ],
        "isoDate": "2024-11-14T11:00:55.000Z"
      },
      {
        "creator": "Mads Kristensen",
        "title": "First preview of Visual Studio 2022 v17.13  ",
        "link": "https://devblogs.microsoft.com/visualstudio/first-preview-of-visual-studio-2022-v17-13/",
        "pubDate": "Wed, 13 Nov 2024 15:14:05 +0000",
        "content:encodedSnippet": "We’re excited to announce the availability of Visual Studio 2022 v17.13 Preview 1 – the first preview of our next update to Visual Studio. This update focuses on providing fantastic developer experiences across the board, with a focus on stability & security, and AI & productivity. Download the preview and see the full list of enhancements in the release notes.  \n\nQuality & security \nEnsuring the highest standards of quality and security is paramount. Visual Studio 2022 v17.13 incorporates robust quality and security enhancements designed to provide a seamless and secure development environment. With improved diagnostics and debugging tools, developers can now identify and resolve issues more efficiently, leading to more reliable and stable applications. Furthermore, enhanced security features offer protection against potential threats, safeguarding your code and data. These improvements not only streamline your workflow but also bolster your confidence in delivering high-quality, secure software solutions. \nAI & productivity \nVisual Studio 2022 v17.13 integrates advanced AI to boost developer productivity by automating routine tasks, offering intelligent code suggestions, and enhancing coding efficiency. With AI-assisted code completion, refactoring tools, and personalized insights, developers can write cleaner, more efficient code and focus on complex, creative aspects of their projects, ultimately accelerating development cycles. This new release also brings general productivity improvements across the IDE, making it a robust tool for developers at every level. \n \nDownload Visual Studio Preview\n\nWe hope you enjoy this preview of Visual Studio, and we look forward to hearing what you think. You can share feedback with us via Developer Community, by reporting issues via report a problem and share your suggestions for new features or improvements to existing ones. \nYou can download the preview from our website or update it from within the IDE. Please note that you should not use this preview in production environments, and some extensions or workloads may not be compatible with it. \nThank you for using Visual Studio and happy coding! \nThe post First preview of Visual Studio 2022 v17.13   appeared first on Visual Studio Blog.",
        "dc:creator": "Mads Kristensen",
        "content": "<p>We’re excited to announce the availability of Visual Studio 2022 v17.13 Preview 1 – the first preview of our next update to Visual Studio. This update focuses on providing fantastic developer experiences across the board, with a focus on stability &#38; security, and AI &#38; productivity. Download the preview and see the full list of [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/first-preview-of-visual-studio-2022-v17-13/\">First preview of Visual Studio 2022 v17.13  </a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "We’re excited to announce the availability of Visual Studio 2022 v17.13 Preview 1 – the first preview of our next update to Visual Studio. This update focuses on providing fantastic developer experiences across the board, with a focus on stability & security, and AI & productivity. Download the preview and see the full list of […]\nThe post First preview of Visual Studio 2022 v17.13   appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251307",
        "categories": [
          "Visual Studio",
          "Preview Release"
        ],
        "isoDate": "2024-11-13T15:14:05.000Z"
      },
      {
        "creator": "Mads Kristensen",
        "title": "Visual Studio 2022 v17.12 with .NET 9",
        "link": "https://devblogs.microsoft.com/visualstudio/visual-studio-2022-v17-12-with-dotnet-9/",
        "pubDate": "Tue, 12 Nov 2024 18:12:48 +0000",
        "content:encodedSnippet": "We are thrilled to announce the General Availability (GA) of Visual Studio 2022 version 17.12. This update focuses on providing fantastic developer experiences for working with .NET 9 projects and new AI productivity features, along with continuous improvements for all developers.\n\nThanks to your continuous feature requests, we’ve incorporated many of them in this release. There’s something new for every developer. We have added several new tools and enhancements that simplify your workflow and improve productivity. Whether you’re looking for advanced debugging capabilities, more efficient code management, or enhanced security features, this update has it all.\n\nDownload Visual Studio 2022 v17.12\n\nFor detailed information on each new feature, check out the release notes. If you’re pressed for time, here are the key highlights.\nProductivity\nCopy from the Error List: Copying an error from the Error List now copies just the description instead of the entire row to the clipboard.\nGo to line anywhere in Code Search: In Code Search, you can now navigate to a specific line in the current document or other specified document.\nDock the Code Search window: You can now freely position the Code Search window with capabilities like docking and auto-hiding.\nCustomize collapsed text indicator: Set custom colors for the collapsed text indicator in the Visual Studio editor.\nRefresh your Find results: You can now refresh the results to a previous Find to get up-to-date search matches.\nMore space for horizontal scrollbar: You can now control the visibility of the file level indicators in CodeLens.\nNon-blocking Code Cleanup on save: When Code Cleanup is run on Save, it now operates in a non-blocking manner, for a smoother coding experience.\nGitHub Copilot\nAI smart variable inspection: Optimize your debugging workflow with Integrated AI variable inspection.\nAI-powered IEnumerable visualizer: AI-powered LINQ Editable Expressions in the IEnumerable visualizer.\nFix code with GitHub Copilot: GitHub Copilot assists you in resolving code issues.\nBetter AI completions for C#: GitHub Copilot brings in additional context from relevant source files to improve completions for C#.\nDebug tests with GitHub Copilot: Get help with debugging failed tests by using Debug Tests with GitHub Copilot.\nDebugging & diagnostics\nShows method return values when debugging: The debugger now displays inline return values for enhanced debugging efficiency.\nExport breakpoint groups with ease: Effortless import and export of breakpoint groups.\nBlazor WebAssembly debugging: An improved debugging experience for Blazor WebAssembly apps targeting .NET 9 or later.\nMeter Histogram in Profiler Counter Tool: Enhanced performance insights using Meter Histogram in Profiler Counter Tool.\nAnalyze memory use over time: Select and compare multiple memory snapshots using the Diagnostics Tool window.\nGit tooling\nManage file renaming with Git: Get peace of mind when renaming files with a new notification.\nPull requests using drafts and templates: Create pull request drafts and start your descriptions with templates in Visual Studio.\nCreate internal GitHub repos: Visual Studio now supports creating internal repos and includes guidance for each type of repository to give you more confidence when starting a new project.\nCopy Git link: You can get a GitHub or Azure DevOps link to a specific line of code to make it easy to share with your colleagues.\nCustomize your AI Git commit message: You can add additional instructions to the prompt for generating your Git commit message with GitHub Copilot.\nMulti-repo for GitHub and Azure DevOps: You can now create pull requests and link work items in multi-repo scenarios.\nIDE\nPreserve font across theme changes: Changing themes will now remember your font and font size preferences.\nMulti-Project Launch Configuration: Streamline debugging by setting up and saving launch profiles for specific projects within multi-project solutions. Share configurations effortlessly with your team.\nCopy files between instances: You can now copy files and folders from Solution Explorer in one instance of Visual Studio to another.\nMultiple GitHub accounts: You can now add multiple GitHub accounts and set an active account to drive GitHub features like GitHub Copilot and Version Control.\nCertificate Revocation Checks: Visual Studio now alerts you if it detects digital certificate problems during network calls.\nMotW security warnings: Mark of the web (MotW) security warnings are now integrated into the overall trust functionality.\nTeams Toolkit new AI templates: The Teams Toolkit onboards new AI Teams app templates.\nCloud\nAzure App Service publish security updates: Publishing to Azure App Service securely using integrated security updates.\nAzure WebJobs Linux support: Publishing to Azure WebJobs on Linux is now supported by right-click publish in Visual Studio.\nAzure Functions Flex Consumption: Publish to Azure Flex Consumption hosting plan, currently in Preview.\nConnected Services security update: Making your apps and development experienced more secure.\nDesktop\nEnhanced WinUI components search: Enhance WinUI project setup with improved Visual Studio Installer search, simplifying component location for developers.\nWeb\nRequest variables in HTTP files: HTTP files now support request variables. That is where you can send a request and then use data from the response, or request, in future requests.\nHTTP files shared environment: In HTTP environment files we have added support to share variables across environments.\nVitest support in JavaScript and TypeScript: When using JavaScript and TypeScript projects you can now author test cases with Vitest.\nInlay Hints support for more languages: Inlay Hint support has been added to JavaScript, TypeScript, Python and Razor as well as a setting to control its behavior.\nData\nSDK-style SQL projects in SSDT: You can now use the SDK-style project file format in your SQL Server Data Tools projects.\n.NET\nAchieve more with .NET 9: .NET 9 elevates cloud-native and intelligent app development, focusing on productivity enhancements, streamlined deployments, and accelerated AI integration.\nNuGet audits transitive packages: NuGet is changing default audit settings to include transitive packages.\nC++\nSet C++ Command Line Arguments: A new way to set your command line arguments right from the toolbar.\nBuild Insights view explanations: Learn how to use each tab of Build Insights via a newly added link to documentation.\nBuild Insights path adjustments: Get a clearer view of your file in Build Insights, see full path on hover.\nOpen Folder for Unreal Engine uproject: A new way of opening your uproject.\nChange signature improved: You can now effectively change signatures with our improved feature for C++.\nSHARE YOUR FEEDBACK AND STAY CONNECTED\nAs you use Visual Studio, let us know what you love, what you like, and where you’d like us to improve. You can share feedback with us via Developer Community: report any bugs or issues via report a problem and share your suggestions for new features or improvements to existing ones.\nStay connected with the Visual Studio team by following us on YouTube, Twitter, LinkedIn, Twitch and on Microsoft Learn.\nAs always, we appreciate the time you’ve spent reporting issues and hope you continue to give us feedback on how we’re doing and what we can improve.\nThe post Visual Studio 2022 v17.12 with .NET 9 appeared first on Visual Studio Blog.",
        "dc:creator": "Mads Kristensen",
        "content": "<p>We are thrilled to announce the General Availability (GA) of Visual Studio 2022 version 17.12. This update focuses on providing fantastic developer experiences for working with .NET 9 projects and new AI productivity features, along with continuous improvements for all developers. Thanks to your continuous feature requests, we&#8217;ve incorporated many of them in this release. [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/visual-studio-2022-v17-12-with-dotnet-9/\">Visual Studio 2022 v17.12 with .NET 9</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "We are thrilled to announce the General Availability (GA) of Visual Studio 2022 version 17.12. This update focuses on providing fantastic developer experiences for working with .NET 9 projects and new AI productivity features, along with continuous improvements for all developers. Thanks to your continuous feature requests, we’ve incorporated many of them in this release. […]\nThe post Visual Studio 2022 v17.12 with .NET 9 appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251184",
        "categories": [
          "Visual Studio",
          "Release"
        ],
        "isoDate": "2024-11-12T18:12:48.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": [
      {
        "title": "Hikari와 비교하며 알아보는 Redis Lettuce 커넥션 풀의 특징",
        "link": "https://cheese10yun.github.io/redis-lettuce-connection/",
        "pubDate": "2024-11-17T07:13:12.000Z",
        "content": "<p>Redis는 싱글 스레드로 동작하는 인메모리 데이터베이스로, 모든 요청을 순차적으로 처리합니다. 이러한 특성 때문에 많은 개발자들은 Redis 클라이언트인 Lettuce에서 제공하는 <strong>커넥션 풀의 필요성과 이점</strong>에 대해 의문을 가질 수 있습니다. 특히, &quot;<strong>Redis는 싱글 스레드로 동작하기 때문에 여러 개의 커넥션을 사용해도 동시성을 처리할 수 없을 텐데, 이런 커넥션 풀이 무슨 의미가 있을까?</strong>&quot;라는 생각을 할 수 있습니다.</p><p>Redis 클라이언트에서 커넥션 풀을 사용하는 이유는 서버의 동작 방식과 클라이언트 애플리케이션에서의 요구사항이 다르기 때문입니다. Redis는 서버 레벨에서 요청을 순차적으로 처리하지만, 클라이언트 애플리케이션은 <strong>동시성과 성능을 최적화하기 위해 비동기 및 넌블로킹 I/O를 지원하는 Lettuce</strong>와 같은 클라이언트를 통해 여러 요청을 효과적으로 관리합니다. Lettuce는 이러한 특성을 활용해 적은 수의 커넥션으로도 높은 효율을 발휘할 수 있도록 설계되었습니다.</p><p>이번 글에서는 Hikari Connection Pool과 비교하며 Lettuce 커넥션 풀이 애플리케이션 성능에 미치는 영향을 실제 사례를 통해 구체적으로 살펴보겠습니다.</p><h2><span id=\"jdbc-hikari-connection-pool의-동작-방식\">JDBC Hikari Connection Pool의 동작 방식</span></h2><p>Redis Lettuce 커넥션 풀의 역할을 이해하기 위해, 먼저 전통적인 데이터베이스 커넥션 풀의 대표적인 예인 <strong>JDBC Hikari Connection Pool</strong>을 살펴보겠습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/lettuce-000.png\" alt=\"\"></p><p>전통적인 Hikari Connection Pool에서는 애플리케이션이 주문 정보를 조회하기 위해 커넥션 풀에서 하나의 커넥션을 가져옵니다. 아래 그림에서 볼 수 있듯이, <strong>idleConnections</strong>가 10개라면, 그 중 하나의 커넥션을 가져와 <strong>activeConnections</strong>로 전환하게 됩니다. 이 경우 <strong>idleConnections</strong>는 9개로 줄고, <strong>activeConnections</strong>는 1개가 됩니다. 전체 <strong>totalConnections</strong>는 변하지 않고 유지됩니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/connection-pool-001.png\" alt=\"Hikari Connection Pool - Idle to Active\"></p><p>만약 요청이 많이 들어와 응답이 지연되고 있는 경우를 생각해 봅시다. 아래 그림처럼 <strong>maximum-pool-size</strong>가 10개인 상황에서, 모든 10개의 커넥션이 <strong>activeConnections</strong>로 전환되어 사용 중이라면, 추가적인 요청은 <strong>threadsAwaitingConnection</strong>으로 들어가 대기하게 됩니다. 즉, 사용 가능한 커넥션이 없기 때문에 요청 스레드는 커넥션이 반환될 때까지 기다려야 합니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/connection-pool-002.png\" alt=\"Hikari Connection Pool - Threads Awaiting Connection\"></p><p>이와 같이 전통적인 커넥션 풀의 개념에서는, <strong>요청 스레드마다 활성화된 커넥션을 사용</strong>하며, 해당 스레드가 작업을 끝내기 전까지는 <strong>커넥션을 점유</strong>하게 됩니다. 이는 데이터베이스의 동시 연결 수와 처리 능력을 효과적으로 관리할 수 있는 방법이지만, 커넥션이 사용 중일 때 대기하는 요청들이 발생할 수 있다는 단점이 있습니다.</p><p>이제 이러한 전통적인 커넥션 풀과 비교하여, <strong>Redis Lettuce Connection Pool</strong>이 어떻게 다른 방식으로 동작하는지에 대해 알아보겠습니다.</p><h2><span id=\"redis-lettuce-connection-pool의-동작-방식\">Redis Lettuce Connection Pool의 동작 방식</span></h2><p>Redis Lettuce Connection Pool의 동작 방식을 이해하기 위해, <strong>Redis 조회와 MySQL 조회가 함께 사용되는 시나리오</strong>를 살펴보겠습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/lettuce-001.png\" alt=\"\"></p><p>위의 시나리오에서 애플리케이션은 먼저 Redis에서 쿠폰 정보를 조회한 후, MySQL에서 주문 정보를 조회합니다. Redis 쿠폰 조회는 10ms 만에 응답이 오지만, 이후 이어지는 MySQL 조회는 2,500ms가 걸립니다. 이 상황에서 Redis Lettuce 커넥션 풀이 어떻게 동작하는지를 이해하는 것이 중요합니다.</p><p>Redis에 쿠폰 조회 요청을 보내면, 10ms 내에 쿠폰 정보가 응답됩니다. 여기서 Lettuce 커넥션 풀이 1개만 있다고 가정해 보겠습니다. 만약 이 상황이 전통적인 커넥션 풀 구조였다면, MySQL 데이터 조회(2,500ms)가 완료되기 전까지 하나뿐인 Redis 커넥션이 블록되어 Redis에 대한 추가적인 요청을 처리할 수 없었을 것입니다. 이는 Redis 서버가 이미 응답을 완료했음에도 불구하고, 애플리케이션 측에서 더 이상 Redis에 대한 요청을 처리할 수 없게 된다는 문제를 야기합니다.</p><p>그러나 Redis Lettuce의 경우 비동기적으로 동작할 수 있습니다. Redis 서버에서 응답을 내린 후 해당 커넥션이 즉시 반환된다면, MySQL 조회가 진행 중이더라도 Redis에 대한 새로운 요청을 처리할 수 있게 됩니다. 이는 Redis 서버가 싱글 스레드로 동작하더라도 Lettuce 클라이언트 측에서는 추가적인 요청을 계속해서 보낼 수 있는 가능성을 열어줍니다. 그렇다면 실제로 Redis Lettuce가 이러한 방식으로 동작하는지, 아니면 다른 방식으로 동작하는지 <strong>코드를 통해 더 자세히 살펴보겠습니다</strong>.</p><h2><span id=\"redis-lettuce와-hikari-동작-비교를-위한-코드\">Redis Lettuce와 Hikari 동작 비교를 위한 코드</span></h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MemberController</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> redisConnectionPoolSample: RedisConnectionPoolSample,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">\"/api/redis\"</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRedis</span><span class=\"params\">(<span class=\"meta\">@RequestParam(<span class=\"meta-string\">\"id\"</span>)</span> id: <span class=\"type\">String</span>)</span></span> = redisConnectionPoolSample.getRedis(id)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">\"/api/mysql\"</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMySql</span><span class=\"params\">(<span class=\"meta\">@RequestParam(<span class=\"meta-string\">\"id\"</span>)</span> id: <span class=\"type\">Long</span>)</span></span> = redisConnectionPoolSample.getMySql(id)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(<span class=\"meta-string\">\"/api/composite\"</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRedis2</span><span class=\"params\">(<span class=\"meta\">@RequestParam(<span class=\"meta-string\">\"id\"</span>)</span> id: <span class=\"type\">String</span>)</span></span> = redisConnectionPoolSample.getComposite(id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RedisConnectionPoolSample</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> couponRepository: CouponRepository,</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> orderRepository: OrderRepository</span><br><span class=\"line\"></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRedis</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: Coupon? &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> couponRepository.findByIdOrNull(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMySql</span><span class=\"params\">(id: <span class=\"type\">Long</span>)</span></span>: Order? &#123;</span><br><span class=\"line\">        printHikariConnection()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> orderRepository.findByIdOrNull(id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getComposite</span><span class=\"params\">(id: <span class=\"type\">String</span>)</span></span>: Pair&lt;Coupon?, Order?&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> coupon = couponRepository.findByIdOrNull(id)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> order = orderRepository.findByIdOrNull(id.toLong())</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2500</span>) <span class=\"comment\">// 2.5초 대기</span></span><br><span class=\"line\">        printHikariConnection()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Pair(coupon, order)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printHikariConnection</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> targetDataSource = dataSource.unwrap(HikariDataSource::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> hikariDataSource = targetDataSource <span class=\"keyword\">as</span> HikariDataSource</span><br><span class=\"line\">        <span class=\"keyword\">val</span> hikariPoolMXBean = hikariDataSource.hikariPoolMXBean</span><br><span class=\"line\">        <span class=\"keyword\">val</span> hikariConfigMXBean = hikariDataSource.hikariConfigMXBean</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> log = buildString &#123;</span><br><span class=\"line\">            append(<span class=\"string\">\"totalConnections: <span class=\"subst\">$&#123;hikariPoolMXBean.totalConnections&#125;</span>, \"</span>)</span><br><span class=\"line\">            append(<span class=\"string\">\"activeConnections: <span class=\"subst\">$&#123;hikariPoolMXBean.activeConnections&#125;</span>, \"</span>)</span><br><span class=\"line\">            append(<span class=\"string\">\"idleConnections: <span class=\"subst\">$&#123;hikariPoolMXBean.idleConnections&#125;</span>, \"</span>)</span><br><span class=\"line\">            append(<span class=\"string\">\"threadsAwaitingConnection: <span class=\"subst\">$&#123;hikariPoolMXBean.threadsAwaitingConnection&#125;</span>\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        println(log)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드에서 <code>/api/redis</code>는 단순히 Redis에서 쿠폰 정보를 조회하는 API입니다. <code>/api/mysql</code>은 MySQL에서 주문 정보를 조회하는 API이며, <code>/api/composite</code>는 Redis 조회 후 MySQL 조회를 수행하고 2.5초 동안 대기한 후 응답을 반환하는 API입니다.</p><p>특히 <code>/api/composite</code>는 Redis에서 쿠폰을 조회한 후 MySQL 조회를 수행하며, 이때 <code>Thread.sleep(2500)</code>으로 인해 2.5초 동안 대기하게 됩니다. 이 상황에서 Lettuce의 커넥션 풀이 어떻게 동작하는지 살펴볼 수 있습니다.</p><h2><span id=\"시나리오별-hikari와-lettuce의-차이점\">시나리오별 Hikari와 Lettuce의 차이점</span></h2><p>이 섹션에서는 Hikari와 Lettuce의 동작 방식을 서로 비교하면서 각 시나리오에서 어떤 차이점이 발생하는지에 대해 구체적으로 살펴보겠습니다. 이를 통해 각 커넥션 풀이 어떤 차이점을 갖고 있는지 명확히 이해할 수 있습니다.</p><h3><span id=\"시나리오-getcomposite-호출-이후-getmysql-호출\">시나리오: getComposite 호출 이후 getMySql 호출</span></h3><p>Hikari 설정은 <code>maximum-pool-size=1</code>, <code>minimum-idle=1</code>로 구성되어 있으며, <code>getComposite</code> 호출 시 사용 가능한 단 하나의 커넥션을 사용하여 작업이 진행됩니다. 이번 테스트의 목적은 <strong><code>/api/composite</code> 호출 이후 <code>getMySql</code> 호출의 응답 속도를 확인</strong>하는 것입니다. 만약 Hikari Connection Pool이 블로킹 방식으로 동작한다면 <code>getComposite</code> 호출 중 MySQL 조회 요청으로 점유된 커넥션이 반환되지 않아 <code>getMySql</code> 요청은 대기 상태에 놓이고 응답 시간이 지연될 것입니다. 반대로 MySQL 조회 요청이 빠르게 완료되거나, 추가적인 idle 커넥션이 있다면 <code>getMySql</code> 요청은 지연 없이 처리될 수 있습니다.</p><p>이 상태에서 <code>getMySql</code> 호출을 시도하면, 사용 가능한 <strong>idle 커넥션</strong>이 없기 때문에 <code>getComposite</code> 호출이 끝난 후 반환된 커넥션을 사용해야 합니다. 이로 인해 <strong>threadsAwaitingConnection</strong> 상태에서 대기하게 되고, 지연이 발생합니다. 이후 <strong>threadsAwaitingConnection</strong>에서 대기하던 요청이 <strong>activeConnections</strong>로 전환되면, <code>getMySql</code> 호출에서 해당 커넥션을 사용할 수 있게 됩니다.</p><h4><span id=\"테스트-결과\">테스트 결과</span></h4><ol><li><p><code>/api/mysql</code> 단독 호출 시:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Connection totalConnections: 1, activeConnections: 1, idleConnections: 0, threadsAwaitingConnection: 0</span><br><span class=\"line\"># HTTP 응답 Response code: 200; Time: 24ms (24 ms); Content length: 64 bytes (64 B)</span><br></pre></td></tr></table></figure></li><li><p><code>/api/composite</code> 호출 이후 바로 <code>/api/mysql</code>를 호출한 경우:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Connection totalConnections: 1, activeConnections: 1, idleConnections: 0, threadsAwaitingConnection: 1</span><br><span class=\"line\"># HTTP 응답 Response code: 200; Time: 1112ms (1 s 112 ms); Content length: 64 bytes (64 B)</span><br></pre></td></tr></table></figure></li></ol><p>테스트 결과, <code>/api/composite</code> 호출 이후 <code>getMySql</code> 요청은 대기 상태에 놓이며, MySQL 조회 작업이 완료되어 커넥션이 반환된 이후에 처리되는 것을 확인할 수 있었습니다. 이는 Hikari Connection Pool이 동기적이며, 사용 중인 커넥션이 반환될 때까지 대기 상태에 놓이는 블로킹 방식으로 동작하기 때문입니다.</p><h4><span id=\"동작-흐름\">동작 흐름</span></h4><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/lettuce-002.png\" alt=\"\"></p><p>Hikari Connection Pool의 동작 방식은 아래와 같습니다.</p><ol><li><strong><code>getComposite</code> 호출</strong>: <code>Service</code>는 MySQL A 조회를 요청하고, 사용 가능한 idle 커넥션을 가져옵니다. 이 요청은 2,500ms가 소요되며, 해당 커넥션은 점유된 상태로 유지됩니다.</li><li><strong><code>getMySql</code> 호출</strong>: <code>Controller</code>는 <code>Service</code>로 <code>getMySql</code> 호출을 보냅니다. 그러나 MySQL A 조회 요청이 아직 진행 중이므로 사용 가능한 커넥션이 없습니다. 이에 따라 요청은 <strong>threadsAwaitingConnection</strong> 상태로 대기하게 됩니다.</li><li><strong>MySQL A 응답 반환</strong>: MySQL A 조회 요청이 완료되면서 커넥션이 반환됩니다. 반환된 커넥션은 대기 중이던 <code>getMySql</code>의 MySQL B 조회 요청에서 다시 사용됩니다.</li><li><strong>MySQL B 조회 요청 및 응답</strong>: 반환된 커넥션을 사용해 MySQL B 조회 요청이 처리됩니다. B 조회는 지연 없이 완료되며, 응답이 반환됩니다.</li><li><strong>최종 응답 반환</strong>: <code>getComposite</code>와 <code>getMySql</code> 요청이 순차적으로 완료되며, 최종적으로 각각의 결과가 <code>Controller</code>로 반환됩니다.</li></ol><h4><span id=\"블로킹-방식의-한계\">블로킹 방식의 한계</span></h4><p>이 시나리오에서 Hikari Connection Pool의 블로킹 특성으로 인해 다음과 같은 한계가 발생합니다. MySQL A 조회 요청이 완료되기 전까지 커넥션이 반환되지 않아 <code>getMySql</code> 호출이 대기 상태에 놓이고, 동시 요청 수가 증가하면 <strong>threadsAwaitingConnection</strong> 상태가 늘어나면서 대기 시간이 길어질 가능성이 있습니다. 반면, Redis Lettuce 커넥션 풀은 이러한 상황에서 다르게 동작할 수 있습니다. Lettuce가 스레드를 블록시키는 방식으로 작동한다면 비슷한 지연 문제가 발생하지만, 논블로킹 방식이라면 MySQL의 지연과 관계없이 추가적인 Redis 요청에 빠르게 응답할 수 있습니다.</p><h3><span id=\"시나리오-getcomposite-호출-이후-getredis-호출\">시나리오: getComposite 호출 이후 getRedis 호출</span></h3><p>Lettuce 설정은 <code>max-active=1</code>, <code>max-idle=1</code>, <code>min-idle=1</code>로 구성되어 있으며, <code>getComposite</code> 호출 시 사용 가능한 단 하나의 커넥션을 사용하여 작업이 진행됩니다. 이번 테스트의 목적은 <strong><code>/api/composite</code> 호출 이후 <code>getRedis</code> 호출의 응답 속도를 확인</strong>하는 것입니다. 만약 Lettuce가 블록되는 방식으로 동작한다면 <code>getComposite</code> 호출 중 Redis 조회 요청으로 점유된 커넥션이 MySQL 작업이 끝날 때까지 반환되지 않아 <code>getRedis</code> 요청은 대기 상태에 놓이고 응답 시간이 지연될 것입니다. 반대로 Lettuce가 비동기적이며 블로킹되지 않는 방식으로 동작한다면 <code>getComposite</code> 호출 중에도 커넥션이 Redis 요청 응답 후 즉시 반환되므로, <code>getRedis</code> 요청이 지연 없이 처리될 것입니다.</p><h4><span id=\"테스트-결과\">테스트 결과</span></h4><ol><li><p><code>/api/composite</code> 호출 이후 바로 <code>/api/redis</code>를 호출한 경우:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response code: 200; Time: 8ms (8 ms); Content length: 56 bytes (56 B)</span><br></pre></td></tr></table></figure></li><li><p><code>/api/redis</code> 단독 호출 시:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response code: 200; Time: 6ms (6 ms); Content length: 56 bytes (56 B)</span><br></pre></td></tr></table></figure></li></ol><p>테스트 결과, <code>/api/composite</code> 호출 중에도 <code>/api/redis</code> 요청은 지연 없이 빠르게 응답하는 것을 확인할 수 있었습니다. 이는 Lettuce가 비동기적으로 동작하며, 스레드를 블록하지 않음을 시사합니다.</p><h4><span id=\"동작-흐름\">동작 흐름</span></h4><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/lettuce-003.png\" alt=\"\"></p><ol><li><strong><code>getComposite</code> 호출</strong>: <code>Controller</code>가 <code>getComposite</code> 요청을 보냅니다. <code>Service</code>는 먼저 Redis 조회를 수행하며, 이 작업은 10ms 만에 완료되고 커넥션은 즉시 반환됩니다. 이후 MySQL 조회를 시작하며, MySQL 조회 작업은 2,500ms가 소요됩니다.</li><li><strong><code>getRedis</code> 호출</strong>: MySQL 조회가 진행 중인 상태에서 <code>Controller</code>가 <code>getRedis</code> 요청을 보냅니다. Redis는 MySQL 작업과는 독립적으로 동작하므로, Redis 조회 요청은 지연 없이 처리됩니다. 반환된 Redis 커넥션이 즉시 재사용되어 <code>getRedis</code> 요청이 빠르게 완료됩니다.</li><li><strong><code>getComposite</code> 응답 반환</strong>: MySQL 작업이 완료되면 <code>getComposite</code> 응답이 반환됩니다.</li><li><strong><code>getRedis</code> 응답 반환</strong>: hRedis 조회 요청이 완료된 후 응답이 반환됩니다. Redis 작업이 MySQL 작업의 지연과 상관없이 즉시 처리되었기 때문에 빠른 응답 시간을 유지합니다.</li></ol><h4><span id=\"논블로킹의-장점\">논블로킹의 장점</span></h4><p>테스트 결과를 통해 Lettuce가 비동기적이고 논블로킹 방식으로 동작한다는 것을 확인할 수 있었습니다. Redis 조회는 10ms 만에 응답을 완료하고 커넥션을 즉시 반환하므로, MySQL 작업이 진행 중이라도 Redis 커넥션이 점유된 상태로 남아있지 않습니다. 결과적으로, 추가적인 Redis 요청(<code>getRedis</code>)은 MySQL의 작업 지연과 관계없이 빠르게 처리됩니다.</p><p>이는 MySQL의 Hikari Connection Pool이 스레드를 블록하여 대기 시간을 유발하는 방식과 대비됩니다. Hikari에서는 커넥션이 반환될 때까지 다른 요청이 대기 상태에 놓이지만, Lettuce는 커넥션 반환이 즉시 이루어져 이러한 지연 없이 요청을 처리할 수 있습니다.</p><p>Redis의 비동기 I/O와 Lettuce의 설계가 결합되어 높은 동시성 환경에서도 안정적인 성능을 유지할 수 있음을 보여주는 사례라 할 수 있습니다. 이러한 특성은 Redis와 같이 빠른 응답성을 요구하는 환경에서 Lettuce가 얼마나 효율적인지를 잘 보여줍니다.</p><h3><span id=\"hikari와-lettuce의-차이점-정리\">Hikari와 Lettuce의 차이점 정리</span></h3><ol><li><strong>동작 방식의 차이</strong>:<ul><li>Hikari Connection Pool은 <strong>전통적인 동기식 동작</strong>을 기반으로 하며, 스레드 블로킹이 발생합니다. MySQL 같은 관계형 데이터베이스와 함께 사용하는 경우, 데이터 조회 시 커넥션이 점유된 상태로 유지되므로 다른 요청들은 사용 가능한 커넥션이 없어 대기하게 됩니다.</li><li>Redis Lettuce Connection Pool은 <strong>비동기 및 넌블로킹 I/O</strong>를 지원하여, Redis 서버에서 응답을 받은 후에도 바로 커넥션을 반환할 수 있습니다. 이를 통해 <strong>커넥션 점유 시간이 짧아져</strong> Redis에 대한 다른 요청들도 빠르게 처리될 수 있습니다.</li></ul></li><li><strong>커넥션 풀의 활용도</strong>:<ul><li>Hikari Connection Pool은 <strong>threadsAwaitingConnection</strong>을 관리하며, 커넥션 풀이 모두 사용 중일 경우 새 요청들은 대기하게 됩니다. 따라서 <strong>커넥션 풀 크기 설정</strong>이 성능에 큰 영향을 미칩니다.</li><li>Redis Lettuce Connection Pool은 커넥션을 빠르게 반환하기 때문에, <strong>커넥션 풀 크기를 크게 설정하지 않아도 효율적으로 동작</strong>할 수 있습니다. Redis의 비동기 처리 덕분에 서버의 응답이 빠르다면, 적은 수의 커넥션으로도 많은 요청을 처리할 수 있습니다.</li></ul></li><li><strong>특정 상황에서의 블로킹 차이</strong>:<ul><li>Hikari Connection Pool은 요청이 지연되면, 다른 커넥션이 점유되지 않는 한 <strong>대기 스레드</strong>가 계속 늘어날 수 있습니다. 이는 높은 동시성에서 성능 저하를 야기할 수 있습니다.</li><li>Redis Lettuce는 비동기적이며, Redis 서버로부터 응답을 받은 후에는 <strong>커넥션을 빠르게 반환</strong>하므로, <strong>서버 응답 시간</strong>이 Lettuce의 성능에 직접적인 영향을 미칩니다. 즉, Redis 명령어가 복잡하고 시간이 오래 걸리면(예: <code>keys *</code> 사용), 그 시간 동안 다른 요청들이 블록될 수 있습니다.</li></ul></li><li><strong>블로킹/넌블로킹의 영향</strong>:<ul><li>Hikari의 경우 <strong>스레드 블로킹</strong>이 빈번히 발생하는 반면, Lettuce는 넌블로킹으로 <strong>추가적인 스레드 리소스를 사용하지 않고도</strong> 더 많은 요청을 처리할 수 있는 장점이 있습니다.</li><li>이는 특히 <strong>IO 작업이 많은 환경</strong>에서 Lettuce가 더 효율적으로 동작하도록 만듭니다. 반면, Hikari는 <strong>동기적 처리</strong>로 인해 CPU 자원을 더 많이 사용하게 되며, 이는 고비용의 대기 시간이 발생할 가능성을 증가시킵니다.</li></ul></li></ol><h2><span id=\"lettuce-connection-pool-설정과-의미\">Lettuce Connection Pool 설정과 의미</span></h2><h3><span id=\"lettuce-connection-pool-properties\">Lettuce Connection Pool Properties</span></h3><p>Spring Data Redis에서는 <code>application.yml</code> 파일을 통해 Lettuce Connection Pool의 설정을 손쉽게 구성할 수 있습니다. 아래는 주요 프로퍼티와 그 설명입니다:</p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\"><span class=\"attr\">    redis:</span></span><br><span class=\"line\"><span class=\"attr\">        lettuce:</span></span><br><span class=\"line\"><span class=\"attr\">            pool:</span></span><br><span class=\"line\"><span class=\"attr\">                max-active:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">                max-idle:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">                min-idle:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">                enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">                max-wait:</span> <span class=\"number\">1000</span><span class=\"string\">ms</span></span><br><span class=\"line\"><span class=\"attr\">                time-between-eviction-runs:</span> <span class=\"number\">1000</span><span class=\"string\">ms</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>설정 항목</th><th>설명</th><th>기본 값</th></tr></thead><tbody><tr><td><code>max-active</code></td><td>Connection Pool에서 사용할 수 있는 최대 커넥션 수로, 동시 연결 수를 제한합니다.</td><td>8</td></tr><tr><td><code>max-idle</code></td><td>Connection Pool에서 유지할 수 있는 최대 유휴 커넥션 수입니다. 이 값을 초과하는 유휴 커넥션은 폐기됩니다.</td><td>8</td></tr><tr><td><code>min-idle</code></td><td>Connection Pool에서 유지할 최소 유휴 커넥션 수입니다. 유휴 커넥션이 부족하면 새 커넥션을 생성합니다.</td><td>0</td></tr><tr><td><code>enabled</code></td><td>Lettuce Connection Pool 사용 여부를 설정합니다. <code>true</code>로 설정 시 Pool이 활성화됩니다.</td><td><code>false</code></td></tr><tr><td><code>max-wait</code></td><td>커넥션이 사용 중일 때 새로운 요청이 대기할 수 있는 최대 시간입니다. 설정된 시간이 초과되면 예외가 발생합니다.</td><td>-1 (무제한 대기)</td></tr><tr><td><code>time-between-eviction-runs</code></td><td>유휴 커넥션 검사 및 제거 작업의 주기를 설정합니다. (단위: 밀리초)</td><td>-1 (검사하지 않음)</td></tr></tbody></table><p>이러한 설정은 Lettuce Connection Pool의 동작을 세부적으로 제어하며, 애플리케이션의 요구 사항에 맞게 성능과 리소스 사용량을 조정할 수 있습니다. 특히, <code>max-active</code>, <code>min-idle</code>, <code>max-wait</code>와 같은 설정은 TPS가 높은 환경이나 트래픽 변동이 큰 상황에서 애플리케이션의 안정성을 보장하는 데 중요한 역할을 합니다.</p><h3><span id=\"lettuce-connection-pool의-개수가-갖는-의미\">Lettuce Connection Pool의 개수가 갖는 의미</span></h3><p>Redis Lettuce Connection은 비동기 방식으로 동작하며, 요청을 처리한 후 커넥션을 즉시 반환하는 구조를 가지고 있습니다. 이는 적은 수의 커넥션으로도 높은 효율을 발휘할 수 있다는 점에서 큰 장점입니다. 하지만, Hikari와 같은 전통적인 동기 커넥션 풀처럼 미리 커넥션을 확보하여 동시성을 처리하는 방식은 아니기 때문에, &quot;Lettuce Connection Pool의 개수가 많다고 해서 이점이 있을까?&quot;라는 의문을 가질 수 있습니다.</p><p>사실, Lettuce Connection Pool의 개수는 TPS가 높아지고 Redis 서버의 응답이 느려질 때 중요한 의미를 가집니다. 다음은 Lettuce Connection Pool의 개수가 많을 때 가지는 이점을 설명합니다.</p><ol><li><p><strong>Redis 응답 지연 시 동시 요청 처리 가능</strong>:<br>Redis 서버가 응답을 지연하는 경우, 요청이 커넥션을 점유하는 시간이 길어집니다. 이때 Connection Pool의 크기가 작다면 모든 커넥션이 점유된 상태에서 새로운 요청이 대기 상태로 전환될 가능성이 높습니다. 하지만 Connection Pool 크기가 충분히 크다면, 지연된 요청과 별개로 다른 요청을 처리할 여유를 확보할 수 있습니다. 이는 TPS가 몰리는 상황에서도 전체 시스템의 성능 저하를 방지합니다.</p></li><li><p><strong>Burst 트래픽에서의 안정성 확보</strong>:<br>트래픽이 순간적으로 폭증하는 경우, Pool 크기가 충분히 크면 새로운 요청을 대기시키지 않고 처리할 수 있습니다. 이는 특히 Redis 응답 시간이 일관되지 않은 상황에서 더욱 중요한데, Pool 크기가 충분하지 않으면 요청 처리 시간이 예측 불가능하게 증가할 수 있습니다.</p></li><li><p><strong>멀티 인스턴스 활용 가능성</strong>:<br>Redis는 싱글 스레드로 동작하지만, 애플리케이션 인스턴스가 여러 개일 경우 각 인스턴스에서 동시에 Redis에 접근합니다. Pool 크기가 충분히 크다면, 여러 인스턴스가 Redis와 병렬로 통신하면서도 효율적으로 커넥션을 재사용할 수 있습니다.</p></li><li><p><strong>비동기 요청 처리 속도 향상</strong>:<br>Lettuce는 비동기적으로 여러 요청을 처리할 수 있지만, Pool 크기가 제한적이라면 커넥션 재사용의 병목이 발생할 수 있습니다. Pool 크기를 늘리면 이러한 병목을 완화하고, Redis 서버의 응답 속도에 따라 더 많은 요청을 처리할 수 있습니다.</p></li><li><p><strong>장시간 실행되는 명령어의 영향 완화</strong>:<br>일부 Redis 명령어(예: <code>zrange</code>, <code>keys</code>)는 실행 시간이 길어질 수 있습니다. Pool 크기가 작다면 이런 명령이 다른 요청 처리에 직접적인 영향을 미치지만, 충분한 Pool 크기는 이런 상황에서도 다른 요청을 지연 없이 처리할 수 있도록 합니다.</p></li></ol><p>Lettuce Connection Pool의 개수는 TPS와 Redis 서버의 응답 지연이 증가하는 상황에서 중요한 역할을 합니다. 비록 Lettuce가 비동기적이고 효율적인 구조를 가졌더라도, Pool 크기를 적절히 설정하지 않으면 요청 대기가 발생할 수 있습니다.</p><p>따라서 Lettuce Connection Pool의 개수는 단순히 많은 요청을 처리하기 위한 것이 아니라, Redis 서버 응답 시간의 변동성, Burst 트래픽, 그리고 장시간 실행되는 명령어 처리와 같은 다양한 상황에 대비하기 위한 안정성을 제공한다고 볼 수 있습니다. Connection Pool 크기를 TPS와 트래픽 패턴에 맞게 조정하는 것이 Lettuce의 효율성을 극대화하는 핵심 전략입니다.</p><h2><span id=\"결론\">결론</span></h2><p>논블로킹 방식이 항상 절대적으로 좋은 것은 아닙니다. Redis Lettuce와 Hikari Connection Pool은 서로 다른 특성과 장점을 가지고 있으며, 각 환경에 따라 적절히 선택해야 합니다.</p><p>Lettuce의 경우, Redis 서버로부터 응답을 받으면 커넥션을 즉시 반환하고 다음 요청을 처리할 준비를 합니다. 이는 커넥션 점유 시간이 짧아져 더 작은 풀 크기로 효율적인 요청 처리가 가능하다는 큰 장점이 있습니다. 하지만 Redis 서버 자체가 응답을 지연한다면, 다른 요청이 대기 상태에 놓이게 되어 성능 저하로 이어질 수 있습니다. 이러한 상황에서는 Lettuce의 비동기적 특성이 한계를 보일 수 있습니다.</p><p>반면, Hikari Connection Pool은 유휴 커넥션이 있는 경우 한 요청이 오래 걸리더라도 다른 커넥션을 사용하여 추가적인 요청을 처리할 수 있습니다. 이는 Redis와 같은 싱글 스레드 구조가 아닌, 다중 커넥션을 사용하는 데이터베이스 환경에 잘 맞는 전략입니다. 그러나 Hikari는 요청 중 커넥션이 블록되는 방식으로 동작하기 때문에, 풀 크기가 제한적이거나 동시 요청이 많아지면 대기 시간이 길어질 가능성이 있습니다.</p><p>이러한 차이는 Redis가 싱글 스레드로 모든 요청을 처리하도록 설계된 서버라는 점에서 기인합니다. Lettuce는 Redis 서버의 메커니즘과 잘 맞는 전략을 선택하여 구현되었으며, 비동기와 논블로킹을 통해 Redis의 성능 특성을 최대한 활용합니다. 이는 Hikari Connection Pool과는 다른 접근 방식으로, Redis 서버와의 높은 호환성을 유지하며 효율적인 자원 관리를 가능하게 합니다.</p><p>소프트웨어 개발에서는 항상 트레이드오프가 존재합니다. 특정 기술이 모든 상황에서 우월하다고 말할 수는 없습니다. Lettuce와 Hikari의 차이는 각기 다른 환경에 적합한 도구를 제공하며, 사용자는 자신의 애플리케이션 요구사항에 따라 적합한 전략을 선택해야 합니다. 결국, 어떤 도구가 &quot;좋다&quot;라고 단정짓기보다는, 각 기술의 장단점을 이해하고 상황에 맞게 활용하는 것이 중요합니다.</p>",
        "contentSnippet": "Redis는 싱글 스레드로 동작하는 인메모리 데이터베이스로, 모든 요청을 순차적으로 처리합니다. 이러한 특성 때문에 많은 개발자들은 Redis 클라이언트인 Lettuce에서 제공하는 커넥션 풀의 필요성과 이점에 대해 의문을 가질 수 있습니다. 특히, \"Redis는 싱글 스레드로 동작하기 때문에 여러 개의 커넥션을 사용해도 동시성을 처리할 수 없을 텐데, 이런 커넥션 풀이 무슨 의미가 있을까?\"라는 생각을 할 수 있습니다.\nRedis 클라이언트에서 커넥션 풀을 사용하는 이유는 서버의 동작 방식과 클라이언트 애플리케이션에서의 요구사항이 다르기 때문입니다. Redis는 서버 레벨에서 요청을 순차적으로 처리하지만, 클라이언트 애플리케이션은 동시성과 성능을 최적화하기 위해 비동기 및 넌블로킹 I/O를 지원하는 Lettuce와 같은 클라이언트를 통해 여러 요청을 효과적으로 관리합니다. Lettuce는 이러한 특성을 활용해 적은 수의 커넥션으로도 높은 효율을 발휘할 수 있도록 설계되었습니다.\n이번 글에서는 Hikari Connection Pool과 비교하며 Lettuce 커넥션 풀이 애플리케이션 성능에 미치는 영향을 실제 사례를 통해 구체적으로 살펴보겠습니다.\nJDBC Hikari Connection Pool의 동작 방식\nRedis Lettuce 커넥션 풀의 역할을 이해하기 위해, 먼저 전통적인 데이터베이스 커넥션 풀의 대표적인 예인 JDBC Hikari Connection Pool을 살펴보겠습니다.\n\n전통적인 Hikari Connection Pool에서는 애플리케이션이 주문 정보를 조회하기 위해 커넥션 풀에서 하나의 커넥션을 가져옵니다. 아래 그림에서 볼 수 있듯이, idleConnections가 10개라면, 그 중 하나의 커넥션을 가져와 activeConnections로 전환하게 됩니다. 이 경우 idleConnections는 9개로 줄고, activeConnections는 1개가 됩니다. 전체 totalConnections는 변하지 않고 유지됩니다.\n\n만약 요청이 많이 들어와 응답이 지연되고 있는 경우를 생각해 봅시다. 아래 그림처럼 maximum-pool-size가 10개인 상황에서, 모든 10개의 커넥션이 activeConnections로 전환되어 사용 중이라면, 추가적인 요청은 threadsAwaitingConnection으로 들어가 대기하게 됩니다. 즉, 사용 가능한 커넥션이 없기 때문에 요청 스레드는 커넥션이 반환될 때까지 기다려야 합니다.\n\n이와 같이 전통적인 커넥션 풀의 개념에서는, 요청 스레드마다 활성화된 커넥션을 사용하며, 해당 스레드가 작업을 끝내기 전까지는 커넥션을 점유하게 됩니다. 이는 데이터베이스의 동시 연결 수와 처리 능력을 효과적으로 관리할 수 있는 방법이지만, 커넥션이 사용 중일 때 대기하는 요청들이 발생할 수 있다는 단점이 있습니다.\n이제 이러한 전통적인 커넥션 풀과 비교하여, Redis Lettuce Connection Pool이 어떻게 다른 방식으로 동작하는지에 대해 알아보겠습니다.\nRedis Lettuce Connection Pool의 동작 방식\nRedis Lettuce Connection Pool의 동작 방식을 이해하기 위해, Redis 조회와 MySQL 조회가 함께 사용되는 시나리오를 살펴보겠습니다.\n\n위의 시나리오에서 애플리케이션은 먼저 Redis에서 쿠폰 정보를 조회한 후, MySQL에서 주문 정보를 조회합니다. Redis 쿠폰 조회는 10ms 만에 응답이 오지만, 이후 이어지는 MySQL 조회는 2,500ms가 걸립니다. 이 상황에서 Redis Lettuce 커넥션 풀이 어떻게 동작하는지를 이해하는 것이 중요합니다.\nRedis에 쿠폰 조회 요청을 보내면, 10ms 내에 쿠폰 정보가 응답됩니다. 여기서 Lettuce 커넥션 풀이 1개만 있다고 가정해 보겠습니다. 만약 이 상황이 전통적인 커넥션 풀 구조였다면, MySQL 데이터 조회(2,500ms)가 완료되기 전까지 하나뿐인 Redis 커넥션이 블록되어 Redis에 대한 추가적인 요청을 처리할 수 없었을 것입니다. 이는 Redis 서버가 이미 응답을 완료했음에도 불구하고, 애플리케이션 측에서 더 이상 Redis에 대한 요청을 처리할 수 없게 된다는 문제를 야기합니다.\n그러나 Redis Lettuce의 경우 비동기적으로 동작할 수 있습니다. Redis 서버에서 응답을 내린 후 해당 커넥션이 즉시 반환된다면, MySQL 조회가 진행 중이더라도 Redis에 대한 새로운 요청을 처리할 수 있게 됩니다. 이는 Redis 서버가 싱글 스레드로 동작하더라도 Lettuce 클라이언트 측에서는 추가적인 요청을 계속해서 보낼 수 있는 가능성을 열어줍니다. 그렇다면 실제로 Redis Lettuce가 이러한 방식으로 동작하는지, 아니면 다른 방식으로 동작하는지 코드를 통해 더 자세히 살펴보겠습니다.\nRedis Lettuce와 Hikari 동작 비교를 위한 코드\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\n@RestController\n@RequestMapping\nclass MemberController(\n    private val redisConnectionPoolSample: RedisConnectionPoolSample,\n) {\n\n    @GetMapping(\"/api/redis\")\n    fun getRedis(@RequestParam(\"id\") id: String) = redisConnectionPoolSample.getRedis(id)\n\n    @GetMapping(\"/api/mysql\")\n    fun getMySql(@RequestParam(\"id\") id: Long) = redisConnectionPoolSample.getMySql(id)\n\n    @GetMapping(\"/api/composite\")\n    fun getRedis2(@RequestParam(\"id\") id: String) = redisConnectionPoolSample.getComposite(id)\n}\n\n@Service\nclass RedisConnectionPoolSample(\n    private val couponRepository: CouponRepository,\n    private val orderRepository: OrderRepository\n\n) {\n\n    fun getRedis(id: String): Coupon? {\n        return couponRepository.findByIdOrNull(id)\n    }\n\n\n    fun getMySql(id: Long): Order? {\n        printHikariConnection()\n        return orderRepository.findByIdOrNull(id)\n    }\n\n    fun getComposite(id: String): Pair<Coupon?, Order?> {\n        val coupon = couponRepository.findByIdOrNull(id)\n        val order = orderRepository.findByIdOrNull(id.toLong())\n        Thread.sleep(2500) // 2.5초 대기\n        printHikariConnection()\n        return Pair(coupon, order)\n    }\n\n    private fun printHikariConnection() {\n        val targetDataSource = dataSource.unwrap(HikariDataSource::class.java)\n        val hikariDataSource = targetDataSource as HikariDataSource\n        val hikariPoolMXBean = hikariDataSource.hikariPoolMXBean\n        val hikariConfigMXBean = hikariDataSource.hikariConfigMXBean\n\n        val log = buildString {\n            append(\"totalConnections: ${hikariPoolMXBean.totalConnections}, \")\n            append(\"activeConnections: ${hikariPoolMXBean.activeConnections}, \")\n            append(\"idleConnections: ${hikariPoolMXBean.idleConnections}, \")\n            append(\"threadsAwaitingConnection: ${hikariPoolMXBean.threadsAwaitingConnection}\")\n        }\n        println(log)\n    }\n}\n\n\n위의 코드에서 /api/redis는 단순히 Redis에서 쿠폰 정보를 조회하는 API입니다. /api/mysql은 MySQL에서 주문 정보를 조회하는 API이며, /api/composite는 Redis 조회 후 MySQL 조회를 수행하고 2.5초 동안 대기한 후 응답을 반환하는 API입니다.\n특히 /api/composite는 Redis에서 쿠폰을 조회한 후 MySQL 조회를 수행하며, 이때 Thread.sleep(2500)으로 인해 2.5초 동안 대기하게 됩니다. 이 상황에서 Lettuce의 커넥션 풀이 어떻게 동작하는지 살펴볼 수 있습니다.\n시나리오별 Hikari와 Lettuce의 차이점\n이 섹션에서는 Hikari와 Lettuce의 동작 방식을 서로 비교하면서 각 시나리오에서 어떤 차이점이 발생하는지에 대해 구체적으로 살펴보겠습니다. 이를 통해 각 커넥션 풀이 어떤 차이점을 갖고 있는지 명확히 이해할 수 있습니다.\n시나리오: getComposite 호출 이후 getMySql 호출\nHikari 설정은 maximum-pool-size=1, minimum-idle=1로 구성되어 있으며, getComposite 호출 시 사용 가능한 단 하나의 커넥션을 사용하여 작업이 진행됩니다. 이번 테스트의 목적은 /api/composite 호출 이후 getMySql 호출의 응답 속도를 확인하는 것입니다. 만약 Hikari Connection Pool이 블로킹 방식으로 동작한다면 getComposite 호출 중 MySQL 조회 요청으로 점유된 커넥션이 반환되지 않아 getMySql 요청은 대기 상태에 놓이고 응답 시간이 지연될 것입니다. 반대로 MySQL 조회 요청이 빠르게 완료되거나, 추가적인 idle 커넥션이 있다면 getMySql 요청은 지연 없이 처리될 수 있습니다.\n이 상태에서 getMySql 호출을 시도하면, 사용 가능한 idle 커넥션이 없기 때문에 getComposite 호출이 끝난 후 반환된 커넥션을 사용해야 합니다. 이로 인해 threadsAwaitingConnection 상태에서 대기하게 되고, 지연이 발생합니다. 이후 threadsAwaitingConnection에서 대기하던 요청이 activeConnections로 전환되면, getMySql 호출에서 해당 커넥션을 사용할 수 있게 됩니다.\n테스트 결과\n\n/api/mysql 단독 호출 시:\n\n\n1\n2\n\n# Connection totalConnections: 1, activeConnections: 1, idleConnections: 0, threadsAwaitingConnection: 0\n# HTTP 응답 Response code: 200; Time: 24ms (24 ms); Content length: 64 bytes (64 B)\n\n\n\n/api/composite 호출 이후 바로 /api/mysql를 호출한 경우:\n\n\n1\n2\n\n# Connection totalConnections: 1, activeConnections: 1, idleConnections: 0, threadsAwaitingConnection: 1\n# HTTP 응답 Response code: 200; Time: 1112ms (1 s 112 ms); Content length: 64 bytes (64 B)\n\n\n\n테스트 결과, /api/composite 호출 이후 getMySql 요청은 대기 상태에 놓이며, MySQL 조회 작업이 완료되어 커넥션이 반환된 이후에 처리되는 것을 확인할 수 있었습니다. 이는 Hikari Connection Pool이 동기적이며, 사용 중인 커넥션이 반환될 때까지 대기 상태에 놓이는 블로킹 방식으로 동작하기 때문입니다.\n동작 흐름\n\nHikari Connection Pool의 동작 방식은 아래와 같습니다.\n\ngetComposite 호출: Service는 MySQL A 조회를 요청하고, 사용 가능한 idle 커넥션을 가져옵니다. 이 요청은 2,500ms가 소요되며, 해당 커넥션은 점유된 상태로 유지됩니다.\ngetMySql 호출: Controller는 Service로 getMySql 호출을 보냅니다. 그러나 MySQL A 조회 요청이 아직 진행 중이므로 사용 가능한 커넥션이 없습니다. 이에 따라 요청은 threadsAwaitingConnection 상태로 대기하게 됩니다.\nMySQL A 응답 반환: MySQL A 조회 요청이 완료되면서 커넥션이 반환됩니다. 반환된 커넥션은 대기 중이던 getMySql의 MySQL B 조회 요청에서 다시 사용됩니다.\nMySQL B 조회 요청 및 응답: 반환된 커넥션을 사용해 MySQL B 조회 요청이 처리됩니다. B 조회는 지연 없이 완료되며, 응답이 반환됩니다.\n최종 응답 반환: getComposite와 getMySql 요청이 순차적으로 완료되며, 최종적으로 각각의 결과가 Controller로 반환됩니다.\n\n블로킹 방식의 한계\n이 시나리오에서 Hikari Connection Pool의 블로킹 특성으로 인해 다음과 같은 한계가 발생합니다. MySQL A 조회 요청이 완료되기 전까지 커넥션이 반환되지 않아 getMySql 호출이 대기 상태에 놓이고, 동시 요청 수가 증가하면 threadsAwaitingConnection 상태가 늘어나면서 대기 시간이 길어질 가능성이 있습니다. 반면, Redis Lettuce 커넥션 풀은 이러한 상황에서 다르게 동작할 수 있습니다. Lettuce가 스레드를 블록시키는 방식으로 작동한다면 비슷한 지연 문제가 발생하지만, 논블로킹 방식이라면 MySQL의 지연과 관계없이 추가적인 Redis 요청에 빠르게 응답할 수 있습니다.\n시나리오: getComposite 호출 이후 getRedis 호출\nLettuce 설정은 max-active=1, max-idle=1, min-idle=1로 구성되어 있으며, getComposite 호출 시 사용 가능한 단 하나의 커넥션을 사용하여 작업이 진행됩니다. 이번 테스트의 목적은 /api/composite 호출 이후 getRedis 호출의 응답 속도를 확인하는 것입니다. 만약 Lettuce가 블록되는 방식으로 동작한다면 getComposite 호출 중 Redis 조회 요청으로 점유된 커넥션이 MySQL 작업이 끝날 때까지 반환되지 않아 getRedis 요청은 대기 상태에 놓이고 응답 시간이 지연될 것입니다. 반대로 Lettuce가 비동기적이며 블로킹되지 않는 방식으로 동작한다면 getComposite 호출 중에도 커넥션이 Redis 요청 응답 후 즉시 반환되므로, getRedis 요청이 지연 없이 처리될 것입니다.\n테스트 결과\n\n/api/composite 호출 이후 바로 /api/redis를 호출한 경우:\n\n\n1\n\nResponse code: 200; Time: 8ms (8 ms); Content length: 56 bytes (56 B)\n\n\n\n/api/redis 단독 호출 시:\n\n\n1\n\nResponse code: 200; Time: 6ms (6 ms); Content length: 56 bytes (56 B)\n\n\n\n테스트 결과, /api/composite 호출 중에도 /api/redis 요청은 지연 없이 빠르게 응답하는 것을 확인할 수 있었습니다. 이는 Lettuce가 비동기적으로 동작하며, 스레드를 블록하지 않음을 시사합니다.\n동작 흐름\n\n\ngetComposite 호출: Controller가 getComposite 요청을 보냅니다. Service는 먼저 Redis 조회를 수행하며, 이 작업은 10ms 만에 완료되고 커넥션은 즉시 반환됩니다. 이후 MySQL 조회를 시작하며, MySQL 조회 작업은 2,500ms가 소요됩니다.\ngetRedis 호출: MySQL 조회가 진행 중인 상태에서 Controller가 getRedis 요청을 보냅니다. Redis는 MySQL 작업과는 독립적으로 동작하므로, Redis 조회 요청은 지연 없이 처리됩니다. 반환된 Redis 커넥션이 즉시 재사용되어 getRedis 요청이 빠르게 완료됩니다.\ngetComposite 응답 반환: MySQL 작업이 완료되면 getComposite 응답이 반환됩니다.\ngetRedis 응답 반환: hRedis 조회 요청이 완료된 후 응답이 반환됩니다. Redis 작업이 MySQL 작업의 지연과 상관없이 즉시 처리되었기 때문에 빠른 응답 시간을 유지합니다.\n\n논블로킹의 장점\n테스트 결과를 통해 Lettuce가 비동기적이고 논블로킹 방식으로 동작한다는 것을 확인할 수 있었습니다. Redis 조회는 10ms 만에 응답을 완료하고 커넥션을 즉시 반환하므로, MySQL 작업이 진행 중이라도 Redis 커넥션이 점유된 상태로 남아있지 않습니다. 결과적으로, 추가적인 Redis 요청(getRedis)은 MySQL의 작업 지연과 관계없이 빠르게 처리됩니다.\n이는 MySQL의 Hikari Connection Pool이 스레드를 블록하여 대기 시간을 유발하는 방식과 대비됩니다. Hikari에서는 커넥션이 반환될 때까지 다른 요청이 대기 상태에 놓이지만, Lettuce는 커넥션 반환이 즉시 이루어져 이러한 지연 없이 요청을 처리할 수 있습니다.\nRedis의 비동기 I/O와 Lettuce의 설계가 결합되어 높은 동시성 환경에서도 안정적인 성능을 유지할 수 있음을 보여주는 사례라 할 수 있습니다. 이러한 특성은 Redis와 같이 빠른 응답성을 요구하는 환경에서 Lettuce가 얼마나 효율적인지를 잘 보여줍니다.\nHikari와 Lettuce의 차이점 정리\n\n동작 방식의 차이:\nHikari Connection Pool은 전통적인 동기식 동작을 기반으로 하며, 스레드 블로킹이 발생합니다. MySQL 같은 관계형 데이터베이스와 함께 사용하는 경우, 데이터 조회 시 커넥션이 점유된 상태로 유지되므로 다른 요청들은 사용 가능한 커넥션이 없어 대기하게 됩니다.\nRedis Lettuce Connection Pool은 비동기 및 넌블로킹 I/O를 지원하여, Redis 서버에서 응답을 받은 후에도 바로 커넥션을 반환할 수 있습니다. 이를 통해 커넥션 점유 시간이 짧아져 Redis에 대한 다른 요청들도 빠르게 처리될 수 있습니다.\n\n커넥션 풀의 활용도:\nHikari Connection Pool은 threadsAwaitingConnection을 관리하며, 커넥션 풀이 모두 사용 중일 경우 새 요청들은 대기하게 됩니다. 따라서 커넥션 풀 크기 설정이 성능에 큰 영향을 미칩니다.\nRedis Lettuce Connection Pool은 커넥션을 빠르게 반환하기 때문에, 커넥션 풀 크기를 크게 설정하지 않아도 효율적으로 동작할 수 있습니다. Redis의 비동기 처리 덕분에 서버의 응답이 빠르다면, 적은 수의 커넥션으로도 많은 요청을 처리할 수 있습니다.\n\n특정 상황에서의 블로킹 차이:\nHikari Connection Pool은 요청이 지연되면, 다른 커넥션이 점유되지 않는 한 대기 스레드가 계속 늘어날 수 있습니다. 이는 높은 동시성에서 성능 저하를 야기할 수 있습니다.\nRedis Lettuce는 비동기적이며, Redis 서버로부터 응답을 받은 후에는 커넥션을 빠르게 반환하므로, 서버 응답 시간이 Lettuce의 성능에 직접적인 영향을 미칩니다. 즉, Redis 명령어가 복잡하고 시간이 오래 걸리면(예: keys * 사용), 그 시간 동안 다른 요청들이 블록될 수 있습니다.\n\n블로킹/넌블로킹의 영향:\nHikari의 경우 스레드 블로킹이 빈번히 발생하는 반면, Lettuce는 넌블로킹으로 추가적인 스레드 리소스를 사용하지 않고도 더 많은 요청을 처리할 수 있는 장점이 있습니다.\n이는 특히 IO 작업이 많은 환경에서 Lettuce가 더 효율적으로 동작하도록 만듭니다. 반면, Hikari는 동기적 처리로 인해 CPU 자원을 더 많이 사용하게 되며, 이는 고비용의 대기 시간이 발생할 가능성을 증가시킵니다.\n\n\nLettuce Connection Pool 설정과 의미\nLettuce Connection Pool Properties\nSpring Data Redis에서는 application.yml 파일을 통해 Lettuce Connection Pool의 설정을 손쉽게 구성할 수 있습니다. 아래는 주요 프로퍼티와 그 설명입니다:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\nspring:\n    redis:\n        lettuce:\n            pool:\n                max-active: 1\n                max-idle: 1\n                min-idle: 1\n                enabled: true\n                max-wait: 1000ms\n                time-between-eviction-runs: 1000ms\n\n\n\n설정 항목설명기본 값\n\nmax-activeConnection Pool에서 사용할 수 있는 최대 커넥션 수로, 동시 연결 수를 제한합니다.8\nmax-idleConnection Pool에서 유지할 수 있는 최대 유휴 커넥션 수입니다. 이 값을 초과하는 유휴 커넥션은 폐기됩니다.8\nmin-idleConnection Pool에서 유지할 최소 유휴 커넥션 수입니다. 유휴 커넥션이 부족하면 새 커넥션을 생성합니다.0\nenabledLettuce Connection Pool 사용 여부를 설정합니다. true로 설정 시 Pool이 활성화됩니다.false\nmax-wait커넥션이 사용 중일 때 새로운 요청이 대기할 수 있는 최대 시간입니다. 설정된 시간이 초과되면 예외가 발생합니다.-1 (무제한 대기)\ntime-between-eviction-runs유휴 커넥션 검사 및 제거 작업의 주기를 설정합니다. (단위: 밀리초)-1 (검사하지 않음)\n\n이러한 설정은 Lettuce Connection Pool의 동작을 세부적으로 제어하며, 애플리케이션의 요구 사항에 맞게 성능과 리소스 사용량을 조정할 수 있습니다. 특히, max-active, min-idle, max-wait와 같은 설정은 TPS가 높은 환경이나 트래픽 변동이 큰 상황에서 애플리케이션의 안정성을 보장하는 데 중요한 역할을 합니다.\nLettuce Connection Pool의 개수가 갖는 의미\nRedis Lettuce Connection은 비동기 방식으로 동작하며, 요청을 처리한 후 커넥션을 즉시 반환하는 구조를 가지고 있습니다. 이는 적은 수의 커넥션으로도 높은 효율을 발휘할 수 있다는 점에서 큰 장점입니다. 하지만, Hikari와 같은 전통적인 동기 커넥션 풀처럼 미리 커넥션을 확보하여 동시성을 처리하는 방식은 아니기 때문에, \"Lettuce Connection Pool의 개수가 많다고 해서 이점이 있을까?\"라는 의문을 가질 수 있습니다.\n사실, Lettuce Connection Pool의 개수는 TPS가 높아지고 Redis 서버의 응답이 느려질 때 중요한 의미를 가집니다. 다음은 Lettuce Connection Pool의 개수가 많을 때 가지는 이점을 설명합니다.\n\nRedis 응답 지연 시 동시 요청 처리 가능:\nRedis 서버가 응답을 지연하는 경우, 요청이 커넥션을 점유하는 시간이 길어집니다. 이때 Connection Pool의 크기가 작다면 모든 커넥션이 점유된 상태에서 새로운 요청이 대기 상태로 전환될 가능성이 높습니다. 하지만 Connection Pool 크기가 충분히 크다면, 지연된 요청과 별개로 다른 요청을 처리할 여유를 확보할 수 있습니다. 이는 TPS가 몰리는 상황에서도 전체 시스템의 성능 저하를 방지합니다.\n\nBurst 트래픽에서의 안정성 확보:\n트래픽이 순간적으로 폭증하는 경우, Pool 크기가 충분히 크면 새로운 요청을 대기시키지 않고 처리할 수 있습니다. 이는 특히 Redis 응답 시간이 일관되지 않은 상황에서 더욱 중요한데, Pool 크기가 충분하지 않으면 요청 처리 시간이 예측 불가능하게 증가할 수 있습니다.\n\n멀티 인스턴스 활용 가능성:\nRedis는 싱글 스레드로 동작하지만, 애플리케이션 인스턴스가 여러 개일 경우 각 인스턴스에서 동시에 Redis에 접근합니다. Pool 크기가 충분히 크다면, 여러 인스턴스가 Redis와 병렬로 통신하면서도 효율적으로 커넥션을 재사용할 수 있습니다.\n\n비동기 요청 처리 속도 향상:\nLettuce는 비동기적으로 여러 요청을 처리할 수 있지만, Pool 크기가 제한적이라면 커넥션 재사용의 병목이 발생할 수 있습니다. Pool 크기를 늘리면 이러한 병목을 완화하고, Redis 서버의 응답 속도에 따라 더 많은 요청을 처리할 수 있습니다.\n\n장시간 실행되는 명령어의 영향 완화:\n일부 Redis 명령어(예: zrange, keys)는 실행 시간이 길어질 수 있습니다. Pool 크기가 작다면 이런 명령이 다른 요청 처리에 직접적인 영향을 미치지만, 충분한 Pool 크기는 이런 상황에서도 다른 요청을 지연 없이 처리할 수 있도록 합니다.\n\nLettuce Connection Pool의 개수는 TPS와 Redis 서버의 응답 지연이 증가하는 상황에서 중요한 역할을 합니다. 비록 Lettuce가 비동기적이고 효율적인 구조를 가졌더라도, Pool 크기를 적절히 설정하지 않으면 요청 대기가 발생할 수 있습니다.\n따라서 Lettuce Connection Pool의 개수는 단순히 많은 요청을 처리하기 위한 것이 아니라, Redis 서버 응답 시간의 변동성, Burst 트래픽, 그리고 장시간 실행되는 명령어 처리와 같은 다양한 상황에 대비하기 위한 안정성을 제공한다고 볼 수 있습니다. Connection Pool 크기를 TPS와 트래픽 패턴에 맞게 조정하는 것이 Lettuce의 효율성을 극대화하는 핵심 전략입니다.\n결론\n논블로킹 방식이 항상 절대적으로 좋은 것은 아닙니다. Redis Lettuce와 Hikari Connection Pool은 서로 다른 특성과 장점을 가지고 있으며, 각 환경에 따라 적절히 선택해야 합니다.\nLettuce의 경우, Redis 서버로부터 응답을 받으면 커넥션을 즉시 반환하고 다음 요청을 처리할 준비를 합니다. 이는 커넥션 점유 시간이 짧아져 더 작은 풀 크기로 효율적인 요청 처리가 가능하다는 큰 장점이 있습니다. 하지만 Redis 서버 자체가 응답을 지연한다면, 다른 요청이 대기 상태에 놓이게 되어 성능 저하로 이어질 수 있습니다. 이러한 상황에서는 Lettuce의 비동기적 특성이 한계를 보일 수 있습니다.\n반면, Hikari Connection Pool은 유휴 커넥션이 있는 경우 한 요청이 오래 걸리더라도 다른 커넥션을 사용하여 추가적인 요청을 처리할 수 있습니다. 이는 Redis와 같은 싱글 스레드 구조가 아닌, 다중 커넥션을 사용하는 데이터베이스 환경에 잘 맞는 전략입니다. 그러나 Hikari는 요청 중 커넥션이 블록되는 방식으로 동작하기 때문에, 풀 크기가 제한적이거나 동시 요청이 많아지면 대기 시간이 길어질 가능성이 있습니다.\n이러한 차이는 Redis가 싱글 스레드로 모든 요청을 처리하도록 설계된 서버라는 점에서 기인합니다. Lettuce는 Redis 서버의 메커니즘과 잘 맞는 전략을 선택하여 구현되었으며, 비동기와 논블로킹을 통해 Redis의 성능 특성을 최대한 활용합니다. 이는 Hikari Connection Pool과는 다른 접근 방식으로, Redis 서버와의 높은 호환성을 유지하며 효율적인 자원 관리를 가능하게 합니다.\n소프트웨어 개발에서는 항상 트레이드오프가 존재합니다. 특정 기술이 모든 상황에서 우월하다고 말할 수는 없습니다. Lettuce와 Hikari의 차이는 각기 다른 환경에 적합한 도구를 제공하며, 사용자는 자신의 애플리케이션 요구사항에 따라 적합한 전략을 선택해야 합니다. 결국, 어떤 도구가 \"좋다\"라고 단정짓기보다는, 각 기술의 장단점을 이해하고 상황에 맞게 활용하는 것이 중요합니다.",
        "summary": "\n    \n      \n      \n        <p>Redis는 싱글 스레드로 동작하는 인메모리 데이터베이스로, 모든 요청을 순차적으로 처리합니다. 이러한 특성 때문에 많은 개발자들은 Redis 클라이언트인 Lettuce에서 제공하는 <strong>커넥션 풀의 필요성과 이점</strong>에 대해\n      \n    \n    ",
        "id": "https://cheese10yun.github.io/redis-lettuce-connection/",
        "isoDate": "2024-11-17T07:13:12.000Z"
      },
      {
        "title": "Mermaid 코드로 그리는 다이어그램",
        "link": "https://cheese10yun.github.io/mermaid/",
        "pubDate": "2024-11-16T06:17:10.000Z",
        "content": "<p>Mermaid는 간단한 텍스트 형식의 코드를 통해 다양한 다이어그램을 생성할 수 있는 강력한 도구입니다. 특히, 개발자들에게 큰 이점을 제공하며, 프로젝트 문서화 작업에서 필수적인 역할을 할 수 있습니다. 이번 글에서는 Mermaid가 어떤 이점을 가지고 있는지, 그리고 이를 활용하여 프로젝트 문서화를 어떻게 개선할 수 있는지에 대해 설명드리겠습니다.</p><h2><span id=\"코드-베이스-관리의-큰-이점\">코드 베이스 관리의 큰 이점</span></h2><p>Mermaid의 가장 큰 이점 중 하나는 <strong>코드 베이스 관리의 용이성</strong>입니다. 다이어그램을 코드로 관리하면 다음과 같은 장점이 있습니다:</p><ul><li><strong>유지보수성</strong>: 다이어그램이 코드로 작성되어 있기 때문에, 코드와 함께 버전 관리 시스템에서 추적할 수 있어 변경 이력을 쉽게 관리할 수 있습니다. 새로운 기능 추가나 수정이 있을 때 다이어그램을 업데이트하는 것도 매우 간단합니다.</li><li><strong>수정의 용이성</strong>: GUI로 그려진 다이어그램은 수정이 어렵고 시간이 많이 걸리지만, Mermaid는 텍스트 기반이므로 코드를 수정하는 것만으로 빠르게 다이어그램을 변경할 수 있습니다.</li><li><strong>검색의 용이성</strong>: 코드로 작성된 다이어그램은 텍스트 파일이기 때문에 프로젝트 내에서 검색이 가능하여, 유지보수 작업을 더 쉽게 할 수 있습니다.</li></ul><h2><span id=\"markdown에서-직접-사용-가능\">Markdown에서 직접 사용 가능</span></h2><p>Mermaid는 <strong>Markdown 프리뷰 플러그인</strong>을 제공하기 때문에, Markdown 문서 내에서 다이어그램을 바로 작성하고 확인할 수 있습니다. 이는 프로젝트의 <strong>README 파일</strong>에 다이어그램을 포함시켜 팀원들이 쉽게 접근할 수 있도록 만들어줍니다. 문서화를 프로젝트의 중심에서 관리할 수 있어 <strong>프로젝트의 가독성과 접근성을 크게 향상</strong>시킬 수 있습니다.</p><h2><span id=\"다양한-다이어그램-형식-제공\">다양한 다이어그램 형식 제공</span></h2><p>Mermaid는 다양한 다이어그램 형식을 제공합니다. 몇 가지 주요 다이어그램 유형은 다음과 같습니다:</p><h3><span id=\"flowchart\">Flowchart</span></h3><p>프로세스 흐름을 나타내는 데 적합합니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/Flowchart.png\" alt=\"\"></p><p>Mermaid 코드 (Flowchart):</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flowchart TD</span><br><span class=\"line\">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class=\"line\">    B --&gt; C&#123;Let me think&#125;</span><br><span class=\"line\">    C --&gt;|One| D[Laptop]</span><br><span class=\"line\">    C --&gt;|Two| E[iPhone]</span><br><span class=\"line\">    C --&gt;|Three| F[fa:fa-car Car]</span><br></pre></td></tr></table></figure><h3><span id=\"class-diagram\">Class Diagram</span></h3><p>객체지향 프로그램의 클래스 구조를 표현할 수 있습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/diagram.png\" alt=\"\"></p><p>Mermaid 코드 (Class Diagram):</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classDiagram</span><br><span class=\"line\">    Animal &lt;|-- Duck</span><br><span class=\"line\">    Animal &lt;|-- Fish</span><br><span class=\"line\">    Animal &lt;|-- Zebra</span><br><span class=\"line\">    Animal : +int age</span><br><span class=\"line\">    Animal : +String gender</span><br><span class=\"line\">    Animal: +isMammal()</span><br><span class=\"line\">    Animal: +mate()</span><br><span class=\"line\">    class Duck&#123;</span><br><span class=\"line\">      +String beakColor</span><br><span class=\"line\">      +swim()</span><br><span class=\"line\">      +quack()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class Fish&#123;</span><br><span class=\"line\">      -int sizeInFeet</span><br><span class=\"line\">      -canEat()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class Zebra&#123;</span><br><span class=\"line\">      +bool is_wild</span><br><span class=\"line\">      +run()</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><h3><span id=\"sequence-diagram-zenuml\">Sequence Diagram (Zenuml)</span></h3><p>Zenuml을 사용하여 시퀀스 다이어그램을 쉽게 표현할 수 있습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/zenuml.png\" alt=\"\"></p><p>Zenuml 코드 (Sequence Diagram):</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title Order Service</span><br><span class=\"line\">@Actor Client #FFEBE6</span><br><span class=\"line\">@Boundary OrderController #0747A6</span><br><span class=\"line\">@EC2 &lt;&lt;BFF&gt;&gt; OrderService #E3FCEF</span><br><span class=\"line\">group BusinessService &#123;</span><br><span class=\"line\">  @Lambda PurchaseService</span><br><span class=\"line\">  @AzureFunction InvoiceService</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Starter(Client)</span><br><span class=\"line\">// `POST /orders`</span><br><span class=\"line\">OrderController.post(payload) &#123;</span><br><span class=\"line\">  OrderService.create(payload) &#123;</span><br><span class=\"line\">    order = new Order(payload)</span><br><span class=\"line\">    if(order != null) &#123;</span><br><span class=\"line\">      par &#123;</span><br><span class=\"line\">        PurchaseService.createPO(order)</span><br><span class=\"line\">        InvoiceService.createInvoice(order)      </span><br><span class=\"line\">      &#125;      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3><span id=\"xychart\">XYChart</span></h3><p>XYChart를 사용하여 매출 데이터를 시각화할 수 있습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/XYChart.png\" alt=\"\"></p><p>XYChart 코드:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xychart-beta</span><br><span class=\"line\">title &quot;Sales Revenue&quot;</span><br><span class=\"line\">x-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]</span><br><span class=\"line\">y-axis &quot;Revenue (in $)&quot; 4000 --&gt; 11000</span><br><span class=\"line\">bar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</span><br><span class=\"line\">line [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]</span><br></pre></td></tr></table></figure><h3><span id=\"block-diagram\">Block Diagram</span></h3><p>여러 블록을 사용하여 시스템의 구성 요소를 표현할 수 있습니다.</p><p><img src=\"https://raw.githubusercontent.com/cheese10yun/blog-sample/refs/heads/master/redis/docs/Block%20Diagram.png\" alt=\"\"></p><p>Block Diagram 코드:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block-beta</span><br><span class=\"line\">    columns 3</span><br><span class=\"line\">    doc&gt;&quot;Document&quot;]:3</span><br><span class=\"line\">    space down1&lt;[&quot; &quot;](down) space</span><br><span class=\"line\">    </span><br><span class=\"line\">    block:e:3</span><br><span class=\"line\">          l[&quot;left&quot;]</span><br><span class=\"line\">          m(&quot;A wide one in the middle&quot;)</span><br><span class=\"line\">          r[&quot;right&quot;]</span><br><span class=\"line\">    end</span><br><span class=\"line\">    space down2&lt;[&quot; &quot;](down) space</span><br><span class=\"line\">    db[(&quot;DB&quot;)]:3</span><br><span class=\"line\">    space:3</span><br><span class=\"line\">    D space C</span><br><span class=\"line\">    db --&gt; D</span><br><span class=\"line\">    C --&gt; db</span><br><span class=\"line\">    D --&gt; C</span><br><span class=\"line\">    style m fill:#d6d,stroke:#333,stroke-width:4px</span><br></pre></td></tr></table></figure><p>이 외에도 <strong>시퀀스 다이어그램</strong>, <strong>상태도</strong>, <strong>피에조 차트</strong> 등 다양한 다이어그램을 제공하여 개발뿐 아니라 프로젝트 관리, 사용자 경험 디자인까지 다양한 분야에서 활용할 수 있습니다.</p><h2><span id=\"mermaid-live-실시간-다이어그램-작성\">Mermaid Live: 실시간 다이어그램 작성</span></h2><p>Mermaid는 <a href=\"https://mermaid.live/edit\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\"><strong>Mermaid Live Editor</strong></a>라는 웹 기반 도구를 제공하여 실시간으로 다이어그램을 작성하고 미리 볼 수 있습니다. 이 도구를 사용하면 빠르게 다이어그램을 시각화할 수 있으며, 다양한 <strong>템플릿</strong>도 제공되어 누구나 쉽게 시작할 수 있습니다. 복잡한 다이어그램도 빠르게 그릴 수 있기 때문에 협업 시에 유용하게 활용될 수 있습니다.</p><h2><span id=\"마무리\">마무리</span></h2><p>Mermaid는 코드 기반의 다이어그램 도구로서, 유지보수성, 수정의 용이성, 그리고 프로젝트 문서화의 접근성을 크게 향상시킵니다. Markdown과 통합하여 프로젝트 문서에 쉽게 다이어그램을 포함시킬 수 있으며, 다양한 다이어그램 형식을 통해 개발 과정에서 발생하는 다양한 시각적 요구를 충족시킬 수 있습니다. Mermaid Live를 통해 실시간으로 다이어그램을 작성하고 협업할 수 있는 기능도 매우 유용합니다.</p><p>프로젝트 문서화 작업에서 Mermaid를 활용해 보세요. 코드와 문서의 통합을 통해 더 나은 협업과 유지보수를 경험할 수 있을 것입니다.</p><h2><span id=\"출처\">출처</span></h2><ul><li><a href=\"https://mermaid.live/\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">Mermaid Live Editor</a></li></ul>",
        "contentSnippet": "Mermaid는 간단한 텍스트 형식의 코드를 통해 다양한 다이어그램을 생성할 수 있는 강력한 도구입니다. 특히, 개발자들에게 큰 이점을 제공하며, 프로젝트 문서화 작업에서 필수적인 역할을 할 수 있습니다. 이번 글에서는 Mermaid가 어떤 이점을 가지고 있는지, 그리고 이를 활용하여 프로젝트 문서화를 어떻게 개선할 수 있는지에 대해 설명드리겠습니다.\n코드 베이스 관리의 큰 이점\nMermaid의 가장 큰 이점 중 하나는 코드 베이스 관리의 용이성입니다. 다이어그램을 코드로 관리하면 다음과 같은 장점이 있습니다:\n\n유지보수성: 다이어그램이 코드로 작성되어 있기 때문에, 코드와 함께 버전 관리 시스템에서 추적할 수 있어 변경 이력을 쉽게 관리할 수 있습니다. 새로운 기능 추가나 수정이 있을 때 다이어그램을 업데이트하는 것도 매우 간단합니다.\n수정의 용이성: GUI로 그려진 다이어그램은 수정이 어렵고 시간이 많이 걸리지만, Mermaid는 텍스트 기반이므로 코드를 수정하는 것만으로 빠르게 다이어그램을 변경할 수 있습니다.\n검색의 용이성: 코드로 작성된 다이어그램은 텍스트 파일이기 때문에 프로젝트 내에서 검색이 가능하여, 유지보수 작업을 더 쉽게 할 수 있습니다.\n\nMarkdown에서 직접 사용 가능\nMermaid는 Markdown 프리뷰 플러그인을 제공하기 때문에, Markdown 문서 내에서 다이어그램을 바로 작성하고 확인할 수 있습니다. 이는 프로젝트의 README 파일에 다이어그램을 포함시켜 팀원들이 쉽게 접근할 수 있도록 만들어줍니다. 문서화를 프로젝트의 중심에서 관리할 수 있어 프로젝트의 가독성과 접근성을 크게 향상시킬 수 있습니다.\n다양한 다이어그램 형식 제공\nMermaid는 다양한 다이어그램 형식을 제공합니다. 몇 가지 주요 다이어그램 유형은 다음과 같습니다:\nFlowchart\n프로세스 흐름을 나타내는 데 적합합니다.\n\nMermaid 코드 (Flowchart):\n\n\n1\n2\n3\n4\n5\n6\n\nflowchart TD\n    A[Christmas] -->|Get money| B(Go shopping)\n    B --> C{Let me think}\n    C -->|One| D[Laptop]\n    C -->|Two| E[iPhone]\n    C -->|Three| F[fa:fa-car Car]\n\n\nClass Diagram\n객체지향 프로그램의 클래스 구조를 표현할 수 있습니다.\n\nMermaid 코드 (Class Diagram):\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\nclassDiagram\n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n      +String beakColor\n      +swim()\n      +quack()\n    }\n    class Fish{\n      -int sizeInFeet\n      -canEat()\n    }\n    class Zebra{\n      +bool is_wild\n      +run()\n    }\n\n\nSequence Diagram (Zenuml)\nZenuml을 사용하여 시퀀스 다이어그램을 쉽게 표현할 수 있습니다.\n\nZenuml 코드 (Sequence Diagram):\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\ntitle Order Service\n@Actor Client #FFEBE6\n@Boundary OrderController #0747A6\n@EC2 <<BFF>> OrderService #E3FCEF\ngroup BusinessService {\n  @Lambda PurchaseService\n  @AzureFunction InvoiceService\n}\n\n@Starter(Client)\n// `POST /orders`\nOrderController.post(payload) {\n  OrderService.create(payload) {\n    order = new Order(payload)\n    if(order != null) {\n      par {\n        PurchaseService.createPO(order)\n        InvoiceService.createInvoice(order)      \n      }      \n    }\n  }\n}\n\n\nXYChart\nXYChart를 사용하여 매출 데이터를 시각화할 수 있습니다.\n\nXYChart 코드:\n\n\n1\n2\n3\n4\n5\n6\n\nxychart-beta\ntitle \"Sales Revenue\"\nx-axis [jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec]\ny-axis \"Revenue (in $)\" 4000 --> 11000\nbar [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\nline [5000, 6000, 7500, 8200, 9500, 10500, 11000, 10200, 9200, 8500, 7000, 6000]\n\n\nBlock Diagram\n여러 블록을 사용하여 시스템의 구성 요소를 표현할 수 있습니다.\n\nBlock Diagram 코드:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\nblock-beta\n    columns 3\n    doc>\"Document\"]:3\n    space down1<[\" \"](down) space\n    \n    block:e:3\n          l[\"left\"]\n          m(\"A wide one in the middle\")\n          r[\"right\"]\n    end\n    space down2<[\" \"](down) space\n    db[(\"DB\")]:3\n    space:3\n    D space C\n    db --> D\n    C --> db\n    D --> C\n    style m fill:#d6d,stroke:#333,stroke-width:4px\n\n\n이 외에도 시퀀스 다이어그램, 상태도, 피에조 차트 등 다양한 다이어그램을 제공하여 개발뿐 아니라 프로젝트 관리, 사용자 경험 디자인까지 다양한 분야에서 활용할 수 있습니다.\nMermaid Live: 실시간 다이어그램 작성\nMermaid는 Mermaid Live Editor라는 웹 기반 도구를 제공하여 실시간으로 다이어그램을 작성하고 미리 볼 수 있습니다. 이 도구를 사용하면 빠르게 다이어그램을 시각화할 수 있으며, 다양한 템플릿도 제공되어 누구나 쉽게 시작할 수 있습니다. 복잡한 다이어그램도 빠르게 그릴 수 있기 때문에 협업 시에 유용하게 활용될 수 있습니다.\n마무리\nMermaid는 코드 기반의 다이어그램 도구로서, 유지보수성, 수정의 용이성, 그리고 프로젝트 문서화의 접근성을 크게 향상시킵니다. Markdown과 통합하여 프로젝트 문서에 쉽게 다이어그램을 포함시킬 수 있으며, 다양한 다이어그램 형식을 통해 개발 과정에서 발생하는 다양한 시각적 요구를 충족시킬 수 있습니다. Mermaid Live를 통해 실시간으로 다이어그램을 작성하고 협업할 수 있는 기능도 매우 유용합니다.\n프로젝트 문서화 작업에서 Mermaid를 활용해 보세요. 코드와 문서의 통합을 통해 더 나은 협업과 유지보수를 경험할 수 있을 것입니다.\n출처\n\nMermaid Live Editor",
        "summary": "\n    \n      \n      \n        <p>Mermaid는 간단한 텍스트 형식의 코드를 통해 다양한 다이어그램을 생성할 수 있는 강력한 도구입니다. 특히, 개발자들에게 큰 이점을 제공하며, 프로젝트 문서화 작업에서 필수적인 역할을 할 수 있습니다. 이번 글에서는 Mermaid가 어떤 이점\n      \n    \n    ",
        "id": "https://cheese10yun.github.io/mermaid/",
        "isoDate": "2024-11-16T06:17:10.000Z"
      }
    ]
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "구글 북 계정 중지",
        "link": "https://kangmyounghun.blogspot.com/2024/11/blog-post.html",
        "pubDate": "2024-11-16T11:30:00.006Z",
        "author": "강명훈",
        "content": "<div>구글 <a href=\"https://support.google.com/books/partner/answer/1067634?hl=ko&amp;sjid=16608453939260722826-AP\" target=\"_blank\">콘텐츠 정책</a> 위반으로 북 파트너 계정이 중지됐다.&nbsp;</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsbfvnnl34xWjndzKrTYJxLlF81FrvJ4X4Ceu1zaojmxBS6BtcdOnHRbrZKpJe7eHcTAAsutrPceEOEGCpZDYL4IUka4Ou_P2Mb0dqz5mXcsK4kGorN1EqS3bHwnw0zcAeO2rej0i7IH9kQJf7PN6vsrdsCOJT0TrVbTnjWCyE7dqyvoecR_uq_FEE29bG/s1550/disapprove.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1550\" data-original-width=\"1535\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgsbfvnnl34xWjndzKrTYJxLlF81FrvJ4X4Ceu1zaojmxBS6BtcdOnHRbrZKpJe7eHcTAAsutrPceEOEGCpZDYL4IUka4Ou_P2Mb0dqz5mXcsK4kGorN1EqS3bHwnw0zcAeO2rej0i7IH9kQJf7PN6vsrdsCOJT0TrVbTnjWCyE7dqyvoecR_uq_FEE29bG/s16000/disapprove.png\" /></a></div><br /><div><span><a name='more'></a></span>내용을 보면 알 수 있지만 중지된 원인이 명확하지 않다. 납작 업드려 담당자<span style=\"font-size: x-small;\">(인지 봇인지)</span>에게 제발 이유를 알려달라 읍소 중이지만 돌아오는 건 정책 위반이라는 답변뿐.&nbsp;</div><div><br /></div><div>좀 찾아보니 봇 크롤링으로 위반&nbsp;사항이 탐지되면 계정을 중지하는데, 위반 사유를 알려주는 경우는 없다고 한다. 결국 계정 소유자가 알아서 콘텐츠 수정 후 복구 요청을 해야 하는데, 복구될 수도 있지만 안 될 때가 더 많다고<span style=\"font-size: x-small;\">(..)</span>&nbsp;</div><div><br /></div><div>전자책 제목을 모두 '엘라스틱<span style=\"font-size: x-small;\">(스플렁크)</span>으로 알아보는 이상징후 분석'으로 통일하고 부제로 구분하는 구성을 5년째 유지 중인데, 이런 구성이 '기존 도서와 유사하여 혼동을 일으킬 수 있는 메타데이터' 정책을 위반했을까?</div><div><br /></div><div>북 계정이 개인 계정과 연동되어 있어서 전자책 게시 중단만으로 끝나지 않고, 이러다가 블로그고 이메일이고 다 날아가는 거 아닌가 싶으니 죽을 맛. 제목 바꾸고 다시 복구 요청 해봐야겠다.</div>",
        "contentSnippet": "구글 콘텐츠 정책 위반으로 북 파트너 계정이 중지됐다. \n\n\n\n\n내용을 보면 알 수 있지만 중지된 원인이 명확하지 않다. 납작 업드려 담당자(인지 봇인지)에게 제발 이유를 알려달라 읍소 중이지만 돌아오는 건 정책 위반이라는 답변뿐. \n\n\n좀 찾아보니 봇 크롤링으로 위반 사항이 탐지되면 계정을 중지하는데, 위반 사유를 알려주는 경우는 없다고 한다. 결국 계정 소유자가 알아서 콘텐츠 수정 후 복구 요청을 해야 하는데, 복구될 수도 있지만 안 될 때가 더 많다고(..) \n\n\n전자책 제목을 모두 '엘라스틱(스플렁크)으로 알아보는 이상징후 분석'으로 통일하고 부제로 구분하는 구성을 5년째 유지 중인데, 이런 구성이 '기존 도서와 유사하여 혼동을 일으킬 수 있는 메타데이터' 정책을 위반했을까?\n\n\n북 계정이 개인 계정과 연동되어 있어서 전자책 게시 중단만으로 끝나지 않고, 이러다가 블로그고 이메일이고 다 날아가는 거 아닌가 싶으니 죽을 맛. 제목 바꾸고 다시 복구 요청 해봐야겠다.",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-5557629977479011658",
        "isoDate": "2024-11-16T11:30:00.006Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "윈도우용 추천 프리웨어 (2024.11.18) SSD 진단, 시스템 안정성 테스트, 초고속 복사 프로그램, 파일명 변경, 폴더명 변경, 슬라이드쇼 만들기)",
        "link": "http://muzbox.tistory.com/483500",
        "pubDate": "Mon, 18 Nov 2024 08:46:52 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483500#entry483500comment",
        "content": "<p style=\"text-align: left;\" data-ke-size=\"size18\"><span style=\"background-color: #ffffff; color: #0d0d0d; text-align: start;\">&nbsp;네이버 소프트웨어와 같은 프로그램 소개 사이트가 종료된 후, 윈도우 운영체제를 사용하는 이용자들을 위해 공개 프리웨어 및 오픈소스 프로그램을 소개합니다. 유용한 무료 소프트웨어를 찾고자 하는 사용자들에게 정기적으로 알찬 정보를 제공합니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"추천프리웨어241118.png\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/TI4no/btsKLpBnbWe/rZm04JDeKJgZ4JcQkFDpkk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/TI4no/btsKLpBnbWe/rZm04JDeKJgZ4JcQkFDpkk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/TI4no/btsKLpBnbWe/rZm04JDeKJgZ4JcQkFDpkk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTI4no%2FbtsKLpBnbWe%2FrZm04JDeKJgZ4JcQkFDpkk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"추천프리웨어241118.png\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\"><span style=\"color: #333333; text-align: left;\">&nbsp;윈도우용 응용프로그램 (Application)은 수없이 많은 종류가 많은 개발자들에 의해 하루에도 수백,수천개가 새로 출시되고 그보다 더 많은 수의 프로그램들이 업데이트 됩니다. 이들 응용프로그램 (Application)은 비율을 지불해야하는<span>&nbsp;</span></span><b><span style=\"color: #009a87;\">상용프로그램</span></b><span style=\"color: #333333; text-align: left;\">과 정품 구매를 확대하기 위해 공급하는 일종의 샘플 개념의<span>&nbsp;</span></span><span style=\"color: #ee2323;\"><b>쉐어웨어</b></span><span style=\"color: #333333; text-align: left;\">, 무료로 사용할 수 있는<span>&nbsp;</span></span><b><span style=\"color: #ef6f53;\">프리웨어</span></b>등으로 크게 3가지로 나뉘게 되는데요.</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\"><br />&nbsp;물론 프리웨어에도 개인만 사용할 있다던가, 기업이나 관공서에서도 사용이 가능하다던가, 소스까지 같이 공개하여 맘대로 수정과 배포가 가능한 완전 무료등의 추가 분류가 필요합니다. 하지만, 개발자가 공개하는 무료배포의 의미가 정확하지 않는 프로그램도 많고, 저작권의 정의도 각양각색이라 본 블로그에서 소개하는 프리웨어도<span>&nbsp;</span><span style=\"color: #006dd7;\"><b>최대한 확인이 가능한 범위에서 개인 또는 기업에서 사용가능한지를 구분하여 소개</b></span>하고 있습니다.</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: center;\" data-ke-size=\"size18\">'어떤오후의 프리웨어 이야기'에서 추천하는<br /><span style=\"color: #409d00;\">&nbsp;<b>2024년 11월 18일자 공개자료실 윈도우용 추천 프리웨어</b></span>입니다.</p>\n<p id=\"no_1\" data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000;\" data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>1. ADATA&nbsp;SSD&nbsp;Toolbox&nbsp;(ADATA&nbsp;SSD&nbsp;진단/최적화/정보확인)<br /></b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; 사용자가&nbsp;SSD&nbsp;디스크&nbsp;정보를&nbsp;확인하고&nbsp;설정을&nbsp;쉽게&nbsp;변경할&nbsp;수&nbsp;있도록&nbsp;다양한&nbsp;기능을&nbsp;제공하는&nbsp;프로그램입니다.&nbsp;이&nbsp;도구는&nbsp;SSD의&nbsp;속도&nbsp;향상과&nbsp;내구성&nbsp;유지를&nbsp;지원하며,&nbsp;다음과&nbsp;같은&nbsp;주요&nbsp;기능을&nbsp;포함합니다. <br /><br />1.&nbsp;드라이브&nbsp;정보&nbsp;확인:&nbsp;드라이브의&nbsp;용량,&nbsp;사용&nbsp;공간,&nbsp;온도,&nbsp;상태,&nbsp;수명&nbsp;등을&nbsp;상세히&nbsp;조회할&nbsp;수&nbsp;있습니다. <br />2.&nbsp;진단&nbsp;기능:&nbsp;빠른&nbsp;진단을&nbsp;통해&nbsp;선택된&nbsp;드라이브의&nbsp;사용&nbsp;가능한&nbsp;공간을&nbsp;간단히&nbsp;테스트하고,&nbsp;정밀&nbsp;진단을&nbsp;통해&nbsp;사용된&nbsp;모든&nbsp;공간에&nbsp;대한&nbsp;읽기&nbsp;테스트를&nbsp;수행합니다. <br />3.&nbsp;유틸리티&nbsp;제공:&nbsp;보안&nbsp;삭제(Security&nbsp;Erase),&nbsp;펌웨어&nbsp;업데이트,&nbsp;SSD&nbsp;Toolbox&nbsp;업그레이드,&nbsp;로그&nbsp;내보내기&nbsp;등의&nbsp;기능을&nbsp;제공합니다. <br />4.&nbsp;시스템&nbsp;최적화:&nbsp;TRIM&nbsp;서비스와&nbsp;간단한&nbsp;설정을&nbsp;통해&nbsp;SSD와&nbsp;운영&nbsp;체제를&nbsp;최적화합니다. <br />5.&nbsp;시스템&nbsp;정보&nbsp;표시:&nbsp;현재&nbsp;시스템의&nbsp;하드웨어&nbsp;정보를&nbsp;제공합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ADATA SSD Toolbox.png\" data-origin-width=\"1161\" data-origin-height=\"699\"><span data-url=\"https://blog.kakaocdn.net/dn/bACOI8/btsKMYJgvRQ/8S8ZkeZhmKLe657aqD1uB0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bACOI8/btsKMYJgvRQ/8S8ZkeZhmKLe657aqD1uB0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bACOI8/btsKMYJgvRQ/8S8ZkeZhmKLe657aqD1uB0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbACOI8%2FbtsKMYJgvRQ%2F8S8ZkeZhmKLe657aqD1uB0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"ADATA SSD Toolbox.png\" data-origin-width=\"1161\" data-origin-height=\"699\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶ 프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶ Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드◀</p>\n<figure id=\"og_1731886982402\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"다운로드 | ADATA (Korea)\" data-og-description=\"\" data-og-host=\"www.adata.com\" data-og-source-url=\"https://www.adata.com/kr/support/downloads/\" data-og-url=\"https://www.adata.com/kr/support/downloads/\" data-og-image=\"\"><a href=\"https://www.adata.com/kr/support/downloads/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://www.adata.com/kr/support/downloads/\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">다운로드 | ADATA (Korea)</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">&nbsp;</p>\n<p class=\"og-host\" data-ke-size=\"size16\">www.adata.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_2\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000;\" data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>2. OCCT&nbsp;(시스템&nbsp;안정성&nbsp;테스트)</b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; 개인&nbsp;사용자에게&nbsp;무료로&nbsp;제공되는&nbsp;강력한&nbsp;PC&nbsp;모니터링&nbsp;및&nbsp;안정성&nbsp;점검&nbsp;도구입니다.&nbsp;프로그램을&nbsp;실행하면&nbsp;PC와&nbsp;GPU&nbsp;관련&nbsp;시스템&nbsp;정보를&nbsp;즉시&nbsp;확인할&nbsp;수&nbsp;있으며,&nbsp;시스템&nbsp;온도,&nbsp;CPU&nbsp;전압,&nbsp;RAM&nbsp;사용량&nbsp;등의&nbsp;변화를&nbsp;시간에&nbsp;따라&nbsp;그래프로&nbsp;표시합니다. <br /><br />이&nbsp;도구는&nbsp;단순한&nbsp;모니터링에&nbsp;그치지&nbsp;않고,&nbsp;CPU,&nbsp;GPU,&nbsp;전원&nbsp;공급&nbsp;장치를&nbsp;테스트하여&nbsp;시스템의&nbsp;온도와&nbsp;전압&nbsp;변화&nbsp;등을&nbsp;자세히&nbsp;분석할&nbsp;수&nbsp;있습니다.&nbsp;특히,&nbsp;시스템을&nbsp;오버클럭한&nbsp;후에는&nbsp;PC의&nbsp;안정성을&nbsp;확인하는&nbsp;데&nbsp;유용합니다. <br /><br />다만,&nbsp;이처럼&nbsp;컴퓨터를&nbsp;스트레스&nbsp;테스트하면&nbsp;과열로&nbsp;인해&nbsp;손상이&nbsp;발생할&nbsp;수도&nbsp;있습니다.&nbsp;그러나&nbsp;테스트&nbsp;중에&nbsp;발생하는&nbsp;변화를&nbsp;주의&nbsp;깊게&nbsp;관찰하면&nbsp;문제를&nbsp;방지할&nbsp;수&nbsp;있으며,&nbsp;OCCT는&nbsp;특정&nbsp;값이&nbsp;과도하게&nbsp;높아지면&nbsp;자동으로&nbsp;테스트를&nbsp;중단하도록&nbsp;설정할&nbsp;수도&nbsp;있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"occt.png\" data-origin-width=\"768\" data-origin-height=\"545\"><span data-url=\"https://blog.kakaocdn.net/dn/dbcW6S/btsKNeLRD1W/iV5Ca9l3k5NxDh8ZUM8oxK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dbcW6S/btsKNeLRD1W/iV5Ca9l3k5NxDh8ZUM8oxK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dbcW6S/btsKNeLRD1W/iV5Ca9l3k5NxDh8ZUM8oxK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbcW6S%2FbtsKNeLRD1W%2FiV5Ca9l3k5NxDh8ZUM8oxK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"occt.png\" data-origin-width=\"768\" data-origin-height=\"545\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드</p>\n<figure id=\"og_1731887000912\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"OCBASE/OCCT : Free, all-in-one stability, stress test, benchmark and monitoring tool for your PC\" data-og-description=\"What's in the box OCCT will analyze every major components of your systems with complete portability. Its modern and ergonomic interface provides a smooth and efficient user experience. In close collaboration with manufacturers, OCCT remains at the forefro\" data-og-host=\"www.ocbase.com\" data-og-source-url=\"https://www.ocbase.com/\" data-og-url=\"https://www.ocbase.com/\" data-og-image=\"https://scrap.kakaocdn.net/dn/bpLDq6/hyXzU8v9Sa/Q6Q7pG8YFksS3yGilEK5Lk/img.jpg?width=1920&amp;height=1280&amp;face=0_0_1920_1280,https://scrap.kakaocdn.net/dn/b1LlzJ/hyXzQZmFcK/JlCkp6GraPDe9bXDqs8lT0/img.jpg?width=1624&amp;height=1080&amp;face=0_0_1624_1080,https://scrap.kakaocdn.net/dn/dtTMQr/hyXzINL8rn/DHswKbZ4pC17PNiURlpa4K/img.png?width=1287&amp;height=757&amp;face=0_0_1287_757\"><a href=\"https://www.ocbase.com/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://www.ocbase.com/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bpLDq6/hyXzU8v9Sa/Q6Q7pG8YFksS3yGilEK5Lk/img.jpg?width=1920&amp;height=1280&amp;face=0_0_1920_1280,https://scrap.kakaocdn.net/dn/b1LlzJ/hyXzQZmFcK/JlCkp6GraPDe9bXDqs8lT0/img.jpg?width=1624&amp;height=1080&amp;face=0_0_1624_1080,https://scrap.kakaocdn.net/dn/dtTMQr/hyXzINL8rn/DHswKbZ4pC17PNiURlpa4K/img.png?width=1287&amp;height=757&amp;face=0_0_1287_757');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">OCBASE/OCCT : Free, all-in-one stability, stress test, benchmark and monitoring tool for your PC</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">What's in the box OCCT will analyze every major components of your systems with complete portability. Its modern and ergonomic interface provides a smooth and efficient user experience. In close collaboration with manufacturers, OCCT remains at the forefro</p>\n<p class=\"og-host\" data-ke-size=\"size16\">www.ocbase.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_3\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000;\" data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>3. Ultracopier&nbsp;(빠르고&nbsp;안정적인&nbsp;초고속&nbsp;복사&nbsp;프로그램) <br /></b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp;Windows 운영체제에서 파일 복사, 이동, 전송 작업을 더욱 빠르고 안전하게 수행하기 위한 고급 소프트웨어입니다. 내장된 파일 복사 대화 상자를 대체하여, 사용자에게 다양한 설정 옵션과 도구를 제공하여 파일 관리 과정을 향상시킵니다. 특히 대용량 파일을 다루거나 중요한 프로젝트 파일을 안전하게 관리해야 하는 전문 사용자에게 유용합니다. <br /><br />이&nbsp;소프트웨어는&nbsp;일시&nbsp;정지&nbsp;및&nbsp;재개&nbsp;기능,&nbsp;동적&nbsp;속도&nbsp;제한,&nbsp;오류&nbsp;감지&nbsp;후&nbsp;전송&nbsp;재개,&nbsp;파일&nbsp;충돌&nbsp;관리&nbsp;등&nbsp;다양한&nbsp;고급&nbsp;기능을&nbsp;지원합니다.&nbsp;사용자는&nbsp;전송&nbsp;규칙을&nbsp;설정하거나&nbsp;여러&nbsp;복사&nbsp;작업을&nbsp;대기열에&nbsp;추가해&nbsp;시스템&nbsp;리소스를&nbsp;효율적으로&nbsp;관리할&nbsp;수&nbsp;있습니다.&nbsp;또한,&nbsp;플러그인&nbsp;지원을&nbsp;통해&nbsp;기능을&nbsp;확장할&nbsp;수&nbsp;있고,&nbsp;포터블&nbsp;버전을&nbsp;제공하여&nbsp;설치&nbsp;없이&nbsp;외부&nbsp;장치에서도&nbsp;사용할&nbsp;수&nbsp;있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"Ultracopier.png\" data-origin-width=\"1157\" data-origin-height=\"605\"><span data-url=\"https://blog.kakaocdn.net/dn/PHk2n/btsKL2TqqrF/KDpRRF4wrIdHCWrYzVyJlk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PHk2n/btsKL2TqqrF/KDpRRF4wrIdHCWrYzVyJlk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PHk2n/btsKL2TqqrF/KDpRRF4wrIdHCWrYzVyJlk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPHk2n%2FbtsKL2TqqrF%2FKDpRRF4wrIdHCWrYzVyJlk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"Ultracopier.png\" data-origin-width=\"1157\" data-origin-height=\"605\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶ 프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶Windows 10/11&nbsp;</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1731887032451\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"Ultracopier, best tools for copying files\" data-og-description=\"Ultracopier your file copy software Ultracopier acts as a replacement for files copy dialogs. Help you into daily file management as professional or advanced user Trusty software used by millions around the world Control you data Save time by reduce mistak\" data-og-host=\"ultracopier.herman-brule.com\" data-og-source-url=\"https://ultracopier.herman-brule.com/\" data-og-url=\"https://ultracopier.herman-brule.com/\" data-og-image=\"https://scrap.kakaocdn.net/dn/d8VeuE/hyXzINL8S7/qABxqaqwlLSMR5sd4uYDjK/img.png?width=1&amp;height=1&amp;face=0_0_1_1,https://scrap.kakaocdn.net/dn/bG81jW/hyXzImH8bK/0hYh1Qk3rGsxtexBllzfsk/img.png?width=1&amp;height=1&amp;face=0_0_1_1,https://scrap.kakaocdn.net/dn/bJuunh/hyXzKx25X5/1TPRsyZaQ1CCgszT514PV1/img.png?width=856&amp;height=659&amp;face=0_0_856_659\"><a href=\"https://ultracopier.herman-brule.com/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://ultracopier.herman-brule.com/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/d8VeuE/hyXzINL8S7/qABxqaqwlLSMR5sd4uYDjK/img.png?width=1&amp;height=1&amp;face=0_0_1_1,https://scrap.kakaocdn.net/dn/bG81jW/hyXzImH8bK/0hYh1Qk3rGsxtexBllzfsk/img.png?width=1&amp;height=1&amp;face=0_0_1_1,https://scrap.kakaocdn.net/dn/bJuunh/hyXzKx25X5/1TPRsyZaQ1CCgszT514PV1/img.png?width=856&amp;height=659&amp;face=0_0_856_659');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Ultracopier, best tools for copying files</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Ultracopier your file copy software Ultracopier acts as a replacement for files copy dialogs. Help you into daily file management as professional or advanced user Trusty software used by millions around the world Control you data Save time by reduce mistak</p>\n<p class=\"og-host\" data-ke-size=\"size16\">ultracopier.herman-brule.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_4\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000;\" data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>4. Advanced&nbsp;Renamer&nbsp;(강력한&nbsp;파일,폴더&nbsp;이름&nbsp;변경)<br /></b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp;여러 파일과 폴더를 한 번에 이름을 변경할 수 있는 무료 프로그램으로, 다양한 방식으로 파일 이름을 조작할 수 있도록 14가지의 리네이밍 방법을 제공합니다. 이 도구를 사용하면 파일의 이름, 속성, 타임스탬프를 한꺼번에 변경할 수 있으며, 파일 정보를 바탕으로 파일을 새로운 위치로 복사하거나 이동할 수도 있습니다. 복잡한 일괄 작업을 설정한 후에는 변경 결과를 미리 확인할 수 있고, 잘못된 경우 언제든지 전체 작업을 되돌릴 수 있습니다. <br /><br />특히&nbsp;이미지&nbsp;파일&nbsp;관리에&nbsp;유용하여,&nbsp;썸네일&nbsp;모드로&nbsp;파일&nbsp;목록을&nbsp;시각적으로&nbsp;확인하면서&nbsp;사진을&nbsp;손쉽게&nbsp;정리할&nbsp;수&nbsp;있습니다.&nbsp;GPS&nbsp;데이터가&nbsp;포함된&nbsp;사진의&nbsp;경우,&nbsp;파일명에&nbsp;촬영된&nbsp;도시와&nbsp;국가&nbsp;이름을&nbsp;자동으로&nbsp;추가할&nbsp;수&nbsp;있습니다.&nbsp;또한,&nbsp;음악&nbsp;파일의&nbsp;경우&nbsp;내장된&nbsp;ID3&nbsp;기능을&nbsp;통해&nbsp;복잡한&nbsp;파일명을&nbsp;깔끔하게&nbsp;정리할&nbsp;수&nbsp;있고,&nbsp;비디오&nbsp;파일에는&nbsp;코덱&nbsp;정보나&nbsp;해상도를&nbsp;파일명에&nbsp;추가할&nbsp;수&nbsp;있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"Advanced Renamer.jpg\" data-origin-width=\"1728\" data-origin-height=\"1077\"><span data-url=\"https://blog.kakaocdn.net/dn/dsC5pV/btsKK3yNalp/jinBOdiKg7nkYBuRcwgF8k/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/dsC5pV/btsKK3yNalp/jinBOdiKg7nkYBuRcwgF8k/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/dsC5pV/btsKK3yNalp/jinBOdiKg7nkYBuRcwgF8k/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdsC5pV%2FbtsKK3yNalp%2FjinBOdiKg7nkYBuRcwgF8k%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"Advanced Renamer.jpg\" data-origin-width=\"1728\" data-origin-height=\"1077\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1731887054448\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"Advanced Renamer - Batch file renaming for Windows and macOS\" data-og-description=\"Image file formats .jpg, .jpeg, .jif, .jfif, .jfi, .jps, .mpo, .png, .apng, .gif, .bmp, .tiff, .tif, .dng, .cr2, .3fr, .arw, .srf, .sr2, .pef, .dcr, .kdc, .erf, .nrw, .nef, .orf, .rw2, .webp, .heic, .cr3, .heif, .hif, .avci, .ico, .cur, .psd, .xcf, .svg Vi\" data-og-host=\"www.advancedrenamer.com\" data-og-source-url=\"https://www.advancedrenamer.com/\" data-og-url=\"https://www.advancedrenamer.com/\" data-og-image=\"https://scrap.kakaocdn.net/dn/TYitK/hyXzOHeHYm/xS5KHKWhQbTJ82gmtHcpkk/img.png?width=1726&amp;height=1075&amp;face=0_0_1726_1075\"><a href=\"https://www.advancedrenamer.com/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://www.advancedrenamer.com/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/TYitK/hyXzOHeHYm/xS5KHKWhQbTJ82gmtHcpkk/img.png?width=1726&amp;height=1075&amp;face=0_0_1726_1075');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Advanced Renamer - Batch file renaming for Windows and macOS</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Image file formats .jpg, .jpeg, .jif, .jfif, .jfi, .jps, .mpo, .png, .apng, .gif, .bmp, .tiff, .tif, .dng, .cr2, .3fr, .arw, .srf, .sr2, .pef, .dcr, .kdc, .erf, .nrw, .nef, .orf, .rw2, .webp, .heic, .cr3, .heif, .hif, .avci, .ico, .cur, .psd, .xcf, .svg Vi</p>\n<p class=\"og-host\" data-ke-size=\"size16\">www.advancedrenamer.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_5\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000;\" data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>5. Icecream Slideshow Maker (슬라이드쇼 만들기)</b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; 사진과&nbsp;음악을&nbsp;사용해&nbsp;고품질&nbsp;슬라이드쇼를&nbsp;손쉽게&nbsp;제작할&nbsp;수&nbsp;있는&nbsp;강력한&nbsp;프로그램입니다.&nbsp;사용자는&nbsp;직관적인&nbsp;인터페이스와&nbsp;간단한&nbsp;조작으로&nbsp;슬라이드쇼를&nbsp;구성할&nbsp;수&nbsp;있으며,&nbsp;JPG,&nbsp;PNG,&nbsp;TIFF&nbsp;등&nbsp;다양한&nbsp;이미지&nbsp;형식과&nbsp;MP3,&nbsp;WAV&nbsp;등&nbsp;오디오&nbsp;파일을&nbsp;지원합니다.&nbsp;각&nbsp;사진의&nbsp;표시&nbsp;시간과&nbsp;전환&nbsp;효과를&nbsp;조정할&nbsp;수&nbsp;있으며,&nbsp;26가지&nbsp;전환&nbsp;효과를&nbsp;선택할&nbsp;수&nbsp;있습니다. <br /><br />이&nbsp;프로그램은&nbsp;내장된&nbsp;미디어&nbsp;플레이어를&nbsp;통해&nbsp;슬라이드쇼를&nbsp;미리보기할&nbsp;수&nbsp;있으며,&nbsp;효과를&nbsp;적용하기&nbsp;전에&nbsp;확인할&nbsp;수&nbsp;있습니다.&nbsp;또한,&nbsp;YouTube&nbsp;업로드&nbsp;버튼을&nbsp;제공하여&nbsp;슬라이드쇼를&nbsp;즉시&nbsp;YouTube&nbsp;채널에&nbsp;게시할&nbsp;수&nbsp;있습니다.&nbsp;이러한&nbsp;기능&nbsp;덕분에&nbsp;초보자와&nbsp;고급&nbsp;사용자&nbsp;모두&nbsp;손쉽게&nbsp;활용할&nbsp;수&nbsp;있는&nbsp;유용한&nbsp;도구입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"Icecream Slideshow Maker.png\" data-origin-width=\"908\" data-origin-height=\"511\"><span data-url=\"https://blog.kakaocdn.net/dn/QGl9u/btsKMJldtil/HnSuT1V8WedKuvcUxSfJU1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/QGl9u/btsKMJldtil/HnSuT1V8WedKuvcUxSfJU1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/QGl9u/btsKMJldtil/HnSuT1V8WedKuvcUxSfJU1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQGl9u%2FbtsKMJldtil%2FHnSuT1V8WedKuvcUxSfJU1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"Icecream Slideshow Maker.png\" data-origin-width=\"908\" data-origin-height=\"511\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1731887088855\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"Free Slideshow Maker for Windows - Icecream Apps\" data-og-description=\"Make a beautiful photo slideshow with music with our Slideshow Maker. Free version for Windows. Create slideshows for weddings, birthdays, travel, etc.\" data-og-host=\"icecreamapps.com\" data-og-source-url=\"https://icecreamapps.com/Slideshow-Maker/\" data-og-url=\"https://icecreamapps.com/Slideshow-Maker/\" data-og-image=\"https://scrap.kakaocdn.net/dn/ezUbfJ/hyXzV0EzoL/aPJ8QsrOcaChKCbrub6NAk/img.png?width=1024&amp;height=512&amp;face=0_0_1024_512\"><a href=\"https://icecreamapps.com/Slideshow-Maker/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://icecreamapps.com/Slideshow-Maker/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/ezUbfJ/hyXzV0EzoL/aPJ8QsrOcaChKCbrub6NAk/img.png?width=1024&amp;height=512&amp;face=0_0_1024_512');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Free Slideshow Maker for Windows - Icecream Apps</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Make a beautiful photo slideshow with music with our Slideshow Maker. Free version for Windows. Create slideshows for weddings, birthdays, travel, etc.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">icecreamapps.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "네이버 소프트웨어와 같은 프로그램 소개 사이트가 종료된 후, 윈도우 운영체제를 사용하는 이용자들을 위해 공개 프리웨어 및 오픈소스 프로그램을 소개합니다. 유용한 무료 소프트웨어를 찾고자 하는 사용자들에게 정기적으로 알찬 정보를 제공합니다.\n\n\n 윈도우용 응용프로그램 (Application)은 수없이 많은 종류가 많은 개발자들에 의해 하루에도 수백,수천개가 새로 출시되고 그보다 더 많은 수의 프로그램들이 업데이트 됩니다. 이들 응용프로그램 (Application)은 비율을 지불해야하는 상용프로그램과 정품 구매를 확대하기 위해 공급하는 일종의 샘플 개념의 쉐어웨어, 무료로 사용할 수 있는 프리웨어등으로 크게 3가지로 나뉘게 되는데요.\n 물론 프리웨어에도 개인만 사용할 있다던가, 기업이나 관공서에서도 사용이 가능하다던가, 소스까지 같이 공개하여 맘대로 수정과 배포가 가능한 완전 무료등의 추가 분류가 필요합니다. 하지만, 개발자가 공개하는 무료배포의 의미가 정확하지 않는 프로그램도 많고, 저작권의 정의도 각양각색이라 본 블로그에서 소개하는 프리웨어도 최대한 확인이 가능한 범위에서 개인 또는 기업에서 사용가능한지를 구분하여 소개하고 있습니다.\n \n \n'어떤오후의 프리웨어 이야기'에서 추천하는\n 2024년 11월 18일자 공개자료실 윈도우용 추천 프리웨어입니다.\n \n \n1. ADATA SSD Toolbox (ADATA SSD 진단/최적화/정보확인)\n\n  사용자가 SSD 디스크 정보를 확인하고 설정을 쉽게 변경할 수 있도록 다양한 기능을 제공하는 프로그램입니다. 이 도구는 SSD의 속도 향상과 내구성 유지를 지원하며, 다음과 같은 주요 기능을 포함합니다. \n1. 드라이브 정보 확인: 드라이브의 용량, 사용 공간, 온도, 상태, 수명 등을 상세히 조회할 수 있습니다. \n2. 진단 기능: 빠른 진단을 통해 선택된 드라이브의 사용 가능한 공간을 간단히 테스트하고, 정밀 진단을 통해 사용된 모든 공간에 대한 읽기 테스트를 수행합니다. \n3. 유틸리티 제공: 보안 삭제(Security Erase), 펌웨어 업데이트, SSD Toolbox 업그레이드, 로그 내보내기 등의 기능을 제공합니다. \n4. 시스템 최적화: TRIM 서비스와 간단한 설정을 통해 SSD와 운영 체제를 최적화합니다. \n5. 시스템 정보 표시: 현재 시스템의 하드웨어 정보를 제공합니다.\n\n\n▶ 프리웨어 - 개인\n▶ Windows 10/11\n▶무료 다운로드◀\n\n \n다운로드 | ADATA (Korea)\n \nwww.adata.com\n\n \n \n \n \n \n2. OCCT (시스템 안정성 테스트)\n  개인 사용자에게 무료로 제공되는 강력한 PC 모니터링 및 안정성 점검 도구입니다. 프로그램을 실행하면 PC와 GPU 관련 시스템 정보를 즉시 확인할 수 있으며, 시스템 온도, CPU 전압, RAM 사용량 등의 변화를 시간에 따라 그래프로 표시합니다. \n이 도구는 단순한 모니터링에 그치지 않고, CPU, GPU, 전원 공급 장치를 테스트하여 시스템의 온도와 전압 변화 등을 자세히 분석할 수 있습니다. 특히, 시스템을 오버클럭한 후에는 PC의 안정성을 확인하는 데 유용합니다. \n다만, 이처럼 컴퓨터를 스트레스 테스트하면 과열로 인해 손상이 발생할 수도 있습니다. 그러나 테스트 중에 발생하는 변화를 주의 깊게 관찰하면 문제를 방지할 수 있으며, OCCT는 특정 값이 과도하게 높아지면 자동으로 테스트를 중단하도록 설정할 수도 있습니다.\n\n\n▶프리웨어 - 개인\n▶Windows 10/11\n▶무료 다운로드\n\n \nOCBASE/OCCT : Free, all-in-one stability, stress test, benchmark and monitoring tool for your PC\nWhat's in the box OCCT will analyze every major components of your systems with complete portability. Its modern and ergonomic interface provides a smooth and efficient user experience. In close collaboration with manufacturers, OCCT remains at the forefro\nwww.ocbase.com\n\n \n \n \n \n \n3. Ultracopier (빠르고 안정적인 초고속 복사 프로그램) \n\n Windows 운영체제에서 파일 복사, 이동, 전송 작업을 더욱 빠르고 안전하게 수행하기 위한 고급 소프트웨어입니다. 내장된 파일 복사 대화 상자를 대체하여, 사용자에게 다양한 설정 옵션과 도구를 제공하여 파일 관리 과정을 향상시킵니다. 특히 대용량 파일을 다루거나 중요한 프로젝트 파일을 안전하게 관리해야 하는 전문 사용자에게 유용합니다. \n이 소프트웨어는 일시 정지 및 재개 기능, 동적 속도 제한, 오류 감지 후 전송 재개, 파일 충돌 관리 등 다양한 고급 기능을 지원합니다. 사용자는 전송 규칙을 설정하거나 여러 복사 작업을 대기열에 추가해 시스템 리소스를 효율적으로 관리할 수 있습니다. 또한, 플러그인 지원을 통해 기능을 확장할 수 있고, 포터블 버전을 제공하여 설치 없이 외부 장치에서도 사용할 수 있습니다.\n\n\n▶ 프리웨어 - 개인\n▶Windows 10/11 \n▶무료 다운로드 ◀\n\n \nUltracopier, best tools for copying files\nUltracopier your file copy software Ultracopier acts as a replacement for files copy dialogs. Help you into daily file management as professional or advanced user Trusty software used by millions around the world Control you data Save time by reduce mistak\nultracopier.herman-brule.com\n\n \n \n \n \n \n4. Advanced Renamer (강력한 파일,폴더 이름 변경)\n\n 여러 파일과 폴더를 한 번에 이름을 변경할 수 있는 무료 프로그램으로, 다양한 방식으로 파일 이름을 조작할 수 있도록 14가지의 리네이밍 방법을 제공합니다. 이 도구를 사용하면 파일의 이름, 속성, 타임스탬프를 한꺼번에 변경할 수 있으며, 파일 정보를 바탕으로 파일을 새로운 위치로 복사하거나 이동할 수도 있습니다. 복잡한 일괄 작업을 설정한 후에는 변경 결과를 미리 확인할 수 있고, 잘못된 경우 언제든지 전체 작업을 되돌릴 수 있습니다. \n특히 이미지 파일 관리에 유용하여, 썸네일 모드로 파일 목록을 시각적으로 확인하면서 사진을 손쉽게 정리할 수 있습니다. GPS 데이터가 포함된 사진의 경우, 파일명에 촬영된 도시와 국가 이름을 자동으로 추가할 수 있습니다. 또한, 음악 파일의 경우 내장된 ID3 기능을 통해 복잡한 파일명을 깔끔하게 정리할 수 있고, 비디오 파일에는 코덱 정보나 해상도를 파일명에 추가할 수 있습니다.\n\n\n▶프리웨어 - 개인\n▶Windows 10/11\n▶무료 다운로드 ◀\n\n \nAdvanced Renamer - Batch file renaming for Windows and macOS\nImage file formats .jpg, .jpeg, .jif, .jfif, .jfi, .jps, .mpo, .png, .apng, .gif, .bmp, .tiff, .tif, .dng, .cr2, .3fr, .arw, .srf, .sr2, .pef, .dcr, .kdc, .erf, .nrw, .nef, .orf, .rw2, .webp, .heic, .cr3, .heif, .hif, .avci, .ico, .cur, .psd, .xcf, .svg Vi\nwww.advancedrenamer.com\n\n \n \n \n \n \n5. Icecream Slideshow Maker (슬라이드쇼 만들기)\n  사진과 음악을 사용해 고품질 슬라이드쇼를 손쉽게 제작할 수 있는 강력한 프로그램입니다. 사용자는 직관적인 인터페이스와 간단한 조작으로 슬라이드쇼를 구성할 수 있으며, JPG, PNG, TIFF 등 다양한 이미지 형식과 MP3, WAV 등 오디오 파일을 지원합니다. 각 사진의 표시 시간과 전환 효과를 조정할 수 있으며, 26가지 전환 효과를 선택할 수 있습니다. \n이 프로그램은 내장된 미디어 플레이어를 통해 슬라이드쇼를 미리보기할 수 있으며, 효과를 적용하기 전에 확인할 수 있습니다. 또한, YouTube 업로드 버튼을 제공하여 슬라이드쇼를 즉시 YouTube 채널에 게시할 수 있습니다. 이러한 기능 덕분에 초보자와 고급 사용자 모두 손쉽게 활용할 수 있는 유용한 도구입니다.\n\n\n▶프리웨어 - 개인\n▶Windows 10/11\n▶무료 다운로드 ◀\n\n \nFree Slideshow Maker for Windows - Icecream Apps\nMake a beautiful photo slideshow with music with our Slideshow Maker. Free version for Windows. Create slideshows for weddings, birthdays, travel, etc.\nicecreamapps.com",
        "guid": "http://muzbox.tistory.com/483500",
        "categories": [
          "NEWS/프리웨어 뉴스",
          "sd 진단",
          "공개자료실",
          "무료프로그램",
          "슬라이드쇼 만들기",
          "시스템 안정성 테스트",
          "초고속 복사 프로그램",
          "추천프로그램",
          "파일명 변경",
          "폴더명 변경",
          "프리웨어"
        ],
        "isoDate": "2024-11-17T23:46:52.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "WinMerge로 파일,폴더 비교 및 병합하는 방법",
        "link": "http://muzbox.tistory.com/483498",
        "pubDate": "Fri, 15 Nov 2024 14:21:34 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483498#entry483498comment",
        "content": "<p data-ke-size=\"size16\">WinMerge는 무료 오픈 소스 파일 비교 및 병합 도구입니다. 코드 리뷰, 파일 동기화, 데이터 백업 등 다양한 작업에 최적화된 WinMerge의 설치 및 사용법을 소개합니다</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<table style=\"border-collapse: collapse; width: 95.6979%; height: 248px;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>분류</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">시스템/파일관리</td>\n<td style=\"width: 64.3682%; height: 248px; text-align: center;\" rowspan=\"4\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge.png\" data-origin-width=\"1280\" data-origin-height=\"720\"><span data-url=\"https://blog.kakaocdn.net/dn/brG2Pu/btsKJmSyOhE/ynKaEtYlNh1kkt89viJZiK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/brG2Pu/btsKJmSyOhE/ynKaEtYlNh1kkt89viJZiK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/brG2Pu/btsKJmSyOhE/ynKaEtYlNh1kkt89viJZiK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbrG2Pu%2FbtsKJmSyOhE%2FynKaEtYlNh1kkt89viJZiK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge.png\" data-origin-width=\"1280\" data-origin-height=\"720\"/></span></figure>\n</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>사용범위</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">무료(오픈소스)</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>사용환경</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">Windows</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>제작사</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\"><a href=\"https://winmerge.org/?lang=kr\" target=\"_blank\" rel=\"noopener\">WinMerge</a></td>\n</tr>\n</tbody>\n</table>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;프로그래머나 데이터 분석가, 혹은 파일 관리를 자주 하는 사용자라면 파일 간의 차이점을 비교하거나 병합해야 하는 상황을 자주 겪게 됩니다. 특히, 다양한 버전의 코드나 문서를 비교할 때는 이 작업이 복잡하고 번거로울 수 있습니다. 이때 유용하게 사용할 수 있는 무료 오픈 소스 도구가 바로 <b>WinMerge</b>입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">WinMerge는 파일 및 폴더 간의 차이점을 시각적으로 비교하고 병합할 수 있는 강력한 도구로, 사용자가 파일을 쉽게 동기화하고 코드의 변경 사항을 분석할 수 있도록 돕습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge 사용법.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/dnYtwO/btsKKhbQ0rt/iCgQP1JB2CVJYFItkRr9t1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/dnYtwO/btsKKhbQ0rt/iCgQP1JB2CVJYFItkRr9t1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/dnYtwO/btsKKhbQ0rt/iCgQP1JB2CVJYFItkRr9t1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdnYtwO%2FbtsKKhbQ0rt%2FiCgQP1JB2CVJYFItkRr9t1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"WinMerge로 파일,폴더 비교 및 병합하는 방법\" data-filename=\"win merge 사용법.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이번 포스팅에서는 WinMerge의 설치 방법부터 주요 기능, 그리고 실무에서 효과적으로 활용하는 방법까지 자세히 알아보겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>1. WinMerge 소개 및 주요 기능</b></span></h2>\n<p data-ke-size=\"size16\">&nbsp;WinMerge는 오픈 소스 파일 비교 및 병합 도구로, 파일 간의 차이점을 직관적으로 비교하고 관리할 수 있도록 도와줍니다. 이 프로그램은 특히 소프트웨어 개발자, 시스템 관리자, 문서 편집자 등 다양한 직군에서 유용하게 사용됩니다. WinMerge는 Windows 운영 체제에서 작동하며, 무료로 제공되는 동시에 오픈 소스이기 때문에 누구나 자유롭게 다운로드하여 사용할 수 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1280\" data-origin-height=\"720\"><span data-url=\"https://blog.kakaocdn.net/dn/bnbIOr/btsKKELb62o/BSJHVnkRkXhXs3KBuNEke1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bnbIOr/btsKKELb62o/BSJHVnkRkXhXs3KBuNEke1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bnbIOr/btsKKELb62o/BSJHVnkRkXhXs3KBuNEke1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbnbIOr%2FbtsKKELb62o%2FBSJHVnkRkXhXs3KBuNEke1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"700\" height=\"394\" data-origin-width=\"1280\" data-origin-height=\"720\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><b><span style=\"color: #ee2323;\"><i>주요 기능</i></span></b></h3>\n<p data-ke-size=\"size16\"><b>1) 파일 및 폴더 비교</b><br />WinMerge의 핵심 기능은 <b>파일과 폴더 간의 차이점을 비교</b>하는 것입니다. 사용자는 두 개의 파일 또는 폴더를 선택해 비교할 수 있으며, 프로그램이 각 줄의 변경 사항을 시각적으로 표시해줍니다. 이 기능은 버전 관리나 코드 리뷰 시 매우 유용합니다.</p>\n<p data-ke-size=\"size16\"><b>2) 병합 기능</b><br />단순히 비교하는 것뿐만 아니라, WinMerge는 파일을 <b>병합하는 기능</b>도 제공합니다. 사용자는 비교 결과를 바탕으로 변경된 내용을 선택적으로 병합할 수 있으며, 이를 통해 최신 버전의 파일을 손쉽게 생성할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>3) 시각적 차이 강조 표시</b><br />WinMerge는 변경된 줄을 색상으로 표시하여 <b>시각적인 이해도를 높여줍니다</b>. 예를 들어, 추가된 내용, 삭제된 내용, 수정된 부분을 각각 다른 색상으로 구분하여 표시하므로, 사용자가 빠르게 차이점을 파악할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>4) 플러그인 및 확장 기능 지원</b><br />WinMerge는 다양한 플러그인과 확장 기능을 지원하여 <b>기능을 확장</b>할 수 있습니다. 기본 제공되는 기능 외에도 추가 플러그인을 설치해 사용자 맞춤형 도구로 활용할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>5) 유니코드 지원 및 다양한 파일 형식 비교</b><br />WinMerge는 <b>유니코드 파일</b>을 지원하며, 텍스트 파일뿐만 아니라 <b>이진 파일도 비교</b>할 수 있습니다. 이를 통해 다양한 형식의 파일을 분석하고 차이점을 확인할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>프로그램 특징 요약</b></i></span></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>오픈 소스 및 무료 배포</li>\n<li>Windows 운영 체제 지원</li>\n<li>직관적인 GUI와 시각적 비교 도구</li>\n<li>폴더 및 파일 비교, 병합 기능</li>\n<li>유니코드 및 이진 파일 지원</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>2. WinMerge의 장점과 단점</b></span></h2>\n<p data-ke-size=\"size16\">WinMerge는 파일 및 폴더 비교 툴로 많은 사용자들에게 사랑받고 있지만, 특정한 상황에서는 한계가 있을 수 있습니다. 아래에서는 WinMerge의 <b>장점</b>과 <b>단점</b>을 상세하게 분석하여 프로그램의 특성과 활용도를 더 깊이 이해해 보겠습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>장점</b></i></span></h3>\n<p data-ke-size=\"size16\"><b>1) 무료 및 오픈 소스</b><br />WinMerge는 무료로 제공되며, 오픈 소스 프로젝트로 누구나 소스 코드를 열람하고 수정할 수 있습니다. 이를 통해 커뮤니티에서 지속적인 업데이트와 개선이 이루어지고 있습니다.</p>\n<p data-ke-size=\"size16\"><b>2) 직관적인 사용자 인터페이스</b><br />WinMerge는 간결하고 사용하기 쉬운 <b>GUI(그래픽 사용자 인터페이스)</b>를 제공하여 초보자도 쉽게 접근할 수 있습니다. 시각적으로 비교 결과를 확인할 수 있어, 수정이 필요한 부분을 빠르게 파악할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>3) 고속 파일 비교 및 병합</b><br />WinMerge는 파일 비교 및 병합 과정에서 <b>빠른 성능</b>을 자랑합니다. 특히, 대용량 파일이나 복잡한 폴더 구조에서도 효율적으로 작동하여 시간과 노력을 절약할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>4) 다양한 파일 형식 지원</b><br />텍스트 파일뿐만 아니라 유니코드 및 이진 파일도 지원하여, <b>코드 파일 비교</b>뿐만 아니라 데이터 파일 분석에도 유용하게 활용할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>5) 플러그인 지원으로 확장성</b><br />WinMerge는 다양한 플러그인을 지원하여, <b>기능을 확장</b>할 수 있습니다. 이를 통해 사용자 맞춤형 설정이 가능해 다양한 작업 환경에 최적화할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b><i>단점</i></b></span></h3>\n<p data-ke-size=\"size16\"><b>1) Windows 전용 지원</b><br />WinMerge는 현재 Windows 운영 체제에서만 사용 가능합니다. <b>macOS나 Linux 환경</b>에서는 기본적으로 사용할 수 없으며, 대안 프로그램을 찾아야 합니다.</p>\n<p data-ke-size=\"size16\"><b>2) 복잡한 병합 기능 한계</b><br />단순한 파일 병합에는 유용하지만, <b>복잡한 병합 작업</b>에서는 다소 제한적일 수 있습니다. 예를 들어, 3-way 병합 기능이 기본적으로 지원되지 않아, 보다 고급 병합 기능이 필요한 사용자는 다른 도구를 선택해야 할 수도 있습니다.</p>\n<p data-ke-size=\"size16\"><b>3) 대용량 폴더 비교 시 성능 저하</b><br />일반적으로 빠른 성능을 자랑하지만, <b>매우 큰 폴더</b>를 비교할 경우 속도 저하가 발생할 수 있습니다. 특히, 수천 개 이상의 파일을 포함한 폴더를 비교할 때는 처리 속도가 느려질 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>4) 자동화 기능 부족</b><br />WinMerge는 GUI 중심의 도구로, <b>자동화 스크립트나 명령줄 옵션</b>을 활용한 비교 작업이 제한적입니다. 자동화된 대량 비교 작업이 필요한 경우에는 다른 전문 도구가 더 적합할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>요약</b></i></span></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>장점</b>: 무료 및 오픈 소스, 직관적 인터페이스, 빠른 성능, 다양한 파일 형식 지원, 플러그인 확장성</li>\n<li><b>단점</b>: Windows 전용, 복잡한 병합 한계, 대용량 비교 시 성능 저하, 자동화 기능 부족</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>3. WinMerge 사용법 가이드</b></span></h2>\n<p data-ke-size=\"size16\">이제 WinMerge를 활용하여 파일과 폴더를 비교하고 병합하는 방법을 단계별로 설명하겠습니다. 이 가이드는 WinMerge를 처음 사용하는 분들도 쉽게 따라 할 수 있도록 구성하였습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>WinMerge 설치하기</b></i></span></h3>\n<p data-ke-size=\"size16\"><b>Step 1</b>: WinMerge 공식 웹사이트(<a href=\"https://winmerge.org\">https://winmerge.org</a>)에 접속하여 <b>최신 버전</b>의 설치 파일을 다운로드합니다.</p>\n<p data-ke-size=\"size16\"><b>Step 2</b>: 다운로드한 설치 파일(<code>WinMerge-x.x.x-Setup.exe</code>)을 실행하여, 화면의 안내에 따라 설치를 진행합니다. 기본 설정으로 설치하면 무난하게 사용할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Step 3</b>: 설치가 완료되면 WinMerge를 실행합니다. 첫 화면에서 간단한 인터페이스를 확인할 수 있습니다.</p>\n<figure id=\"og_1731647815192\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"WinMerge - 차이를 알게 될 것입니다&hellip;\" data-og-description=\"WinMerge가 무엇인가요? WinMerge는 Windows용 오픈 소스 차이점 분석 및 병합 도구입니다. WinMerge는 폴더와 파일을 모두 비교하여 시각적 텍스트 형식의 차이를 쉽게 이해하고 처리할 수 있습니다. 스\" data-og-host=\"winmerge.org\" data-og-source-url=\"https://winmerge.org/?lang=ko\" data-og-url=\"https://winmerge.org/?lang=ko\" data-og-image=\"\"><a href=\"https://winmerge.org/?lang=ko\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://winmerge.org/?lang=ko\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">WinMerge - 차이를 알게 될 것입니다&hellip;</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">WinMerge가 무엇인가요? WinMerge는 Windows용 오픈 소스 차이점 분석 및 병합 도구입니다. WinMerge는 폴더와 파일을 모두 비교하여 시각적 텍스트 형식의 차이를 쉽게 이해하고 처리할 수 있습니다. 스</p>\n<p class=\"og-host\" data-ke-size=\"size16\">winmerge.org</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>파일 비교하기</b></i></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge1.png\" data-origin-width=\"1141\" data-origin-height=\"746\"><span data-url=\"https://blog.kakaocdn.net/dn/ck4n3U/btsKLed7X52/dKJoIK68ZSVykgDhCY0kOK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/ck4n3U/btsKLed7X52/dKJoIK68ZSVykgDhCY0kOK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/ck4n3U/btsKLed7X52/dKJoIK68ZSVykgDhCY0kOK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fck4n3U%2FbtsKLed7X52%2FdKJoIK68ZSVykgDhCY0kOK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge1.png\" data-origin-width=\"1141\" data-origin-height=\"746\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><b>Step 1</b>: 프로그램을 실행한 후, <b>[File] 메뉴</b>에서 <b>[Open...]</b>을 클릭합니다. 또는 툴바에서 폴더 모양 아이콘을 클릭해도 됩니다.</p>\n<p data-ke-size=\"size16\"><b>Step 2</b>: 비교할 <b>두 개의 파일</b>을 선택합니다. 왼쪽 파일과 오른쪽 파일을 각각 지정한 후, <b>[OK]</b> 버튼을 클릭합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge2.png\" data-origin-width=\"1141\" data-origin-height=\"723\"><span data-url=\"https://blog.kakaocdn.net/dn/tJDnI/btsKKHulQFI/K9MJT7QkRKEByhUNwiuEJk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/tJDnI/btsKKHulQFI/K9MJT7QkRKEByhUNwiuEJk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/tJDnI/btsKKHulQFI/K9MJT7QkRKEByhUNwiuEJk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtJDnI%2FbtsKKHulQFI%2FK9MJT7QkRKEByhUNwiuEJk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge2.png\" data-origin-width=\"1141\" data-origin-height=\"723\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><b>Step 3</b>: 파일이 열리면, 변경된 부분이 <b>하이라이트</b>되어 표시됩니다. 추가된 부분은 초록색, 삭제된 부분은 빨간색으로 표시되며, 수정된 줄은 노란색으로 나타납니다.</p>\n<p data-ke-size=\"size16\"><b>Step 4</b>: 만약 특정 부분을 병합하고 싶다면, 변경된 줄을 선택한 후 <b>[Merge]</b> 옵션을 사용해 한쪽 파일의 내용을 다른 쪽으로 병합할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>폴더 비교하기</b></i></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge4.png\" data-origin-width=\"1141\" data-origin-height=\"723\"><span data-url=\"https://blog.kakaocdn.net/dn/baUhN7/btsKJQZVIRz/Js9qCEedaKRS8cxEKrzNx1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/baUhN7/btsKJQZVIRz/Js9qCEedaKRS8cxEKrzNx1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/baUhN7/btsKJQZVIRz/Js9qCEedaKRS8cxEKrzNx1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbaUhN7%2FbtsKJQZVIRz%2FJs9qCEedaKRS8cxEKrzNx1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge4.png\" data-origin-width=\"1141\" data-origin-height=\"723\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><b>Step 1</b>: <b>[File] 메뉴</b>에서 <b>[Open...]</b>을 선택한 후, 비교할 두 개의 폴더 경로를 각각 지정합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge5.png\" data-origin-width=\"1141\" data-origin-height=\"699\"><span data-url=\"https://blog.kakaocdn.net/dn/bkgLFS/btsKLrR5fR0/Pzp9QVLk0fTLVV9TKkxkwK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bkgLFS/btsKLrR5fR0/Pzp9QVLk0fTLVV9TKkxkwK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bkgLFS/btsKLrR5fR0/Pzp9QVLk0fTLVV9TKkxkwK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbkgLFS%2FbtsKLrR5fR0%2FPzp9QVLk0fTLVV9TKkxkwK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge5.png\" data-origin-width=\"1141\" data-origin-height=\"699\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><b>Step 2</b>: 폴더 비교를 시작하면, WinMerge는 폴더 내 모든 파일을 스캔하여 <b>변경된 파일 목록</b>을 표시합니다. 변경된 파일, 추가된 파일, 삭제된 파일이 각각 다른 아이콘으로 구분됩니다.</p>\n<p data-ke-size=\"size16\"><b>Step 3</b>: 파일을 더블 클릭하면 해당 파일의 비교 화면으로 전환되며, 차이점을 확인할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>병합 작업하기</b></i></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge3.png\" data-origin-width=\"1129\" data-origin-height=\"656\"><span data-url=\"https://blog.kakaocdn.net/dn/Vl6CJ/btsKLiHz4fL/Y4w5oF4thX0yI3h8Pe1cSK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Vl6CJ/btsKLiHz4fL/Y4w5oF4thX0yI3h8Pe1cSK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Vl6CJ/btsKLiHz4fL/Y4w5oF4thX0yI3h8Pe1cSK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FVl6CJ%2FbtsKLiHz4fL%2FY4w5oF4thX0yI3h8Pe1cSK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge3.png\" data-origin-width=\"1129\" data-origin-height=\"656\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><b>Step 1</b>: 두 개의 파일을 비교한 후, 병합할 내용이 있는 줄을 선택합니다.</p>\n<p data-ke-size=\"size16\"><b>Step 2</b>: 상단 툴바의 <b>[Copy Left]</b> 또는 <b>[Copy Right]</b> 버튼을 사용해 원하는 내용을 한쪽 파일로 복사할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Step 3</b>: 병합이 완료되면 <b>[Save]</b> 버튼을 눌러 파일을 저장합니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>설정 및 추가 기능 활용</b></i></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"win merge6.png\" data-origin-width=\"1127\" data-origin-height=\"651\"><span data-url=\"https://blog.kakaocdn.net/dn/6FYY1/btsKJ3kxZuP/vwccVTC3WybivDFcpKTsW1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/6FYY1/btsKJ3kxZuP/vwccVTC3WybivDFcpKTsW1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/6FYY1/btsKJ3kxZuP/vwccVTC3WybivDFcpKTsW1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F6FYY1%2FbtsKJ3kxZuP%2FvwccVTC3WybivDFcpKTsW1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"win merge6.png\" data-origin-width=\"1127\" data-origin-height=\"651\"/></span></figure>\n</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>플러그인 설정</b>: WinMerge에서는 추가 기능을 제공하는 플러그인을 사용할 수 있습니다. [Plugins] 메뉴에서 활성화하거나 설치할 수 있습니다.</li>\n<li><b>파일 필터링</b>: 특정 파일 형식만 비교하고 싶다면, [Filters] 메뉴를 통해 <b>확장자 필터</b>를 설정할 수 있습니다.</li>\n<li><b>명령줄 도구</b>: 기본적으로 GUI 기반으로 사용되지만, <b>명령줄 옵션</b>을 통해 자동화된 비교 작업도 일부 가능합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>4. WinMerge 라이선스 정책</b></span></h2>\n<p data-ke-size=\"size16\">WinMerge는 <b>GPL(GNU General Public License) 버전 2</b>에 따라 배포되는 <b>오픈 소스 소프트웨어</b>입니다. 이 라이선스는 사용자에게 자유롭게 소프트웨어를 사용할 수 있는 권리를 부여하면서도, 소스 코드를 공유하고 수정할 수 있도록 허용합니다. 다음은 WinMerge의 라이선스와 관련된 주요 사항을 설명합니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>WinMerge 라이선스의 특징</b></i></span></h3>\n<p data-ke-size=\"size16\"><b>1) 무료 사용</b><br />WinMerge는 개인 사용자뿐만 아니라 기업 사용자도 <b>무료로 사용할 수 있습니다</b>. 상업적 목적으로 사용하더라도 추가적인 비용 없이 소프트웨어를 활용할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>2) 소스 코드 수정 및 배포</b><br />GPL-2.0 라이선스에 따라 WinMerge의 소스 코드를 <b>수정 및 배포</b>할 수 있습니다. 다만, 수정된 버전을 배포할 때는 원래 라이선스 조건을 그대로 유지해야 하며, 수정된 소스 코드 역시 공개해야 합니다.</p>\n<p data-ke-size=\"size16\"><b>3) 저작권 고지 의무</b><br />소프트웨어를 재배포하거나 수정할 경우, 원 저작자의 <b>저작권 고지</b>를 반드시 포함해야 합니다. 이를 통해 WinMerge 프로젝트의 기여자들이 인정을 받을 수 있도록 보장합니다.</p>\n<p data-ke-size=\"size16\"><b>4) 오픈 소스 커뮤니티 기여</b><br />WinMerge는 오픈 소스 커뮤니티의 적극적인 참여로 발전해 온 프로젝트입니다. 따라서 누구나 GitHub 저장소를 통해 소스 코드에 접근하고, <b>기여(Pull Request)</b>를 통해 개선에 참여할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><i><b>라이선스 관련 주의 사항</b></i></span></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>상업용 소프트웨어와의 통합</b>: WinMerge를 상업용 소프트웨어에 통합하려면, <b>GPL-2.0 호환성</b>을 고려해야 합니다. 상업용 소프트웨어에 통합 시 라이선스 조건을 준수하지 않을 경우 법적 문제가 발생할 수 있습니다.</li>\n<li><b>배포 시 책임 한계</b>: WinMerge는 \"있는 그대로(as is)\" 제공되며, 소프트웨어 사용으로 발생할 수 있는 문제에 대해 <b>어떠한 보증도 제공하지 않습니다</b>. 사용자는 이를 인지하고 프로그램을 활용해야 합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>5. WinMerge의 효과적인 활용 방법</b></span></h2>\n<p data-ke-size=\"size16\">WinMerge는 다양한 상황에서 파일 및 폴더 비교 작업을 간편하게 수행할 수 있는 유용한 도구입니다. 특히, 소프트웨어 개발자, 시스템 관리자, 문서 편집자 등이 업무 효율성을 높이기 위해 WinMerge를 활용할 수 있습니다. 아래에서는 WinMerge를 실무에서 효과적으로 활용할 수 있는 몇 가지 방법을 소개합니다.</p>\n<h3 data-ke-size=\"size23\"><b>1) 코드 리뷰 및 버전 관리에 활용</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>코드 변경 사항 분석</b>: WinMerge를 사용하면 두 버전의 소스 코드를 비교하여 <b>변경된 부분을 시각적으로 확인</b>할 수 있습니다. 이를 통해 코드 리뷰 과정에서 수정된 코드를 쉽게 추적하고, 버그나 문제를 빠르게 발견할 수 있습니다.</li>\n<li><b>버전 간 파일 병합</b>: 개발 프로젝트에서 여러 개발자가 동시에 작업하는 경우, 변경된 코드 파일을 병합할 때 WinMerge를 사용하면 충돌을 해결하고 최신 상태로 통합하는 데 유리합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>2) 폴더 동기화 및 데이터 백업</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>폴더 동기화</b>: 대규모 폴더 구조를 비교하여 변경된 파일만 업데이트하거나 백업할 때 유용합니다. 특히, 서버나 클라우드 저장소에서 데이터를 동기화할 때 <b>불필요한 중복 파일을 줄이고 최신 파일만 유지</b>할 수 있습니다.</li>\n<li><b>백업 파일 비교</b>: 백업된 폴더와 원본 폴더를 비교하여 손실된 데이터나 변경된 파일을 확인하고, 필요 시 빠르게 복구할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>3) 문서 비교 및 수정 내역 관리</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>문서 변경 사항 추적</b>: 보고서, 계약서, 논문 등 <b>문서 파일의 변경 내역을 비교</b>하여 수정된 부분을 빠르게 파악할 수 있습니다. 이 기능은 팀 프로젝트나 협업 시 각기 다른 버전의 문서를 관리하는 데 도움이 됩니다.</li>\n<li><b>이진 파일 비교</b>: 텍스트 문서뿐만 아니라, WinMerge는 <b>이진 파일(Binaries)</b>도 비교할 수 있어, 프로그램 실행 파일이나 이미지 파일의 차이도 분석할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>4) 서버 및 시스템 관리</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>설정 파일 비교</b>: 서버의 구성 파일이나 시스템 설정 파일을 WinMerge를 사용해 비교하면, 설정 변경 내역을 쉽게 파악할 수 있습니다. 이를 통해 문제를 진단하고 빠르게 해결할 수 있습니다.</li>\n<li><b>로그 파일 분석</b>: 로그 파일의 변화 내역을 추적하여 시스템 오류나 보안 문제를 발견할 수 있습니다. 변경된 부분만 하이라이트되므로 분석 속도가 향상됩니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>5) 번역 및 다국어 파일 관리</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>다국어 지원 파일 비교</b>: 소프트웨어 번역 작업에서 WinMerge를 사용하여 <b>다양한 언어 파일 간의 차이점을 비교</b>하고, 일관된 번역이 이루어졌는지 확인할 수 있습니다.</li>\n<li><b>CSV 파일 비교</b>: 대규모 데이터가 포함된 CSV 파일을 비교하여, 데이터 수정 내역을 확인하고 누락된 항목을 빠르게 식별할 수 있습니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>6. 결론</b></span></h2>\n<p data-ke-size=\"size16\">WinMerge는 오픈 소스 무료 도구로, 파일 및 폴더 간의 차이점을 시각적으로 비교하고 병합하는 데 탁월한 성능을 발휘합니다. 소프트웨어 개발자부터 시스템 관리자, 문서 작업자에 이르기까지 다양한 분야에서 유용하게 활용될 수 있으며, 특히 코드 리뷰, 데이터 백업, 파일 동기화 작업에서 큰 효율성을 제공합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">Windows 환경에서 작동하기 때문에 대부분의 사용자에게 접근성이 높으며, 플러그인과 확장 기능을 통해 추가적인 기능을 더할 수도 있습니다. 무엇보다 WinMerge의 직관적인 인터페이스와 빠른 비교 성능 덕분에 초보자부터 숙련된 사용자까지 폭넓게 사용할 수 있다는 것이 큰 장점입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">만약 파일 비교 및 병합 도구가 필요하다면, WinMerge를 통해 작업 속도를 개선하고 효율성을 높여보세요. 오픈 소스이기 때문에 부담 없이 다운로드하여 활용할 수 있으며, 지속적인 업데이트와 커뮤니티의 지원 덕분에 안정적으로 사용할 수 있습니다.</p>",
        "contentSnippet": "WinMerge는 무료 오픈 소스 파일 비교 및 병합 도구입니다. 코드 리뷰, 파일 동기화, 데이터 백업 등 다양한 작업에 최적화된 WinMerge의 설치 및 사용법을 소개합니다\n \n\n분류\n시스템/파일관리\n\n\n\n\n사용범위\n무료(오픈소스)\n\n\n사용환경\nWindows\n\n\n제작사\nWinMerge\n\n\n\n \n 프로그래머나 데이터 분석가, 혹은 파일 관리를 자주 하는 사용자라면 파일 간의 차이점을 비교하거나 병합해야 하는 상황을 자주 겪게 됩니다. 특히, 다양한 버전의 코드나 문서를 비교할 때는 이 작업이 복잡하고 번거로울 수 있습니다. 이때 유용하게 사용할 수 있는 무료 오픈 소스 도구가 바로 WinMerge입니다.\n \nWinMerge는 파일 및 폴더 간의 차이점을 시각적으로 비교하고 병합할 수 있는 강력한 도구로, 사용자가 파일을 쉽게 동기화하고 코드의 변경 사항을 분석할 수 있도록 돕습니다.\n \n\n\n \n이번 포스팅에서는 WinMerge의 설치 방법부터 주요 기능, 그리고 실무에서 효과적으로 활용하는 방법까지 자세히 알아보겠습니다.\n \n \n1. WinMerge 소개 및 주요 기능\n WinMerge는 오픈 소스 파일 비교 및 병합 도구로, 파일 간의 차이점을 직관적으로 비교하고 관리할 수 있도록 도와줍니다. 이 프로그램은 특히 소프트웨어 개발자, 시스템 관리자, 문서 편집자 등 다양한 직군에서 유용하게 사용됩니다. WinMerge는 Windows 운영 체제에서 작동하며, 무료로 제공되는 동시에 오픈 소스이기 때문에 누구나 자유롭게 다운로드하여 사용할 수 있습니다.\n\n\n주요 기능\n1) 파일 및 폴더 비교\nWinMerge의 핵심 기능은 파일과 폴더 간의 차이점을 비교하는 것입니다. 사용자는 두 개의 파일 또는 폴더를 선택해 비교할 수 있으며, 프로그램이 각 줄의 변경 사항을 시각적으로 표시해줍니다. 이 기능은 버전 관리나 코드 리뷰 시 매우 유용합니다.\n2) 병합 기능\n단순히 비교하는 것뿐만 아니라, WinMerge는 파일을 병합하는 기능도 제공합니다. 사용자는 비교 결과를 바탕으로 변경된 내용을 선택적으로 병합할 수 있으며, 이를 통해 최신 버전의 파일을 손쉽게 생성할 수 있습니다.\n3) 시각적 차이 강조 표시\nWinMerge는 변경된 줄을 색상으로 표시하여 시각적인 이해도를 높여줍니다. 예를 들어, 추가된 내용, 삭제된 내용, 수정된 부분을 각각 다른 색상으로 구분하여 표시하므로, 사용자가 빠르게 차이점을 파악할 수 있습니다.\n4) 플러그인 및 확장 기능 지원\nWinMerge는 다양한 플러그인과 확장 기능을 지원하여 기능을 확장할 수 있습니다. 기본 제공되는 기능 외에도 추가 플러그인을 설치해 사용자 맞춤형 도구로 활용할 수 있습니다.\n5) 유니코드 지원 및 다양한 파일 형식 비교\nWinMerge는 유니코드 파일을 지원하며, 텍스트 파일뿐만 아니라 이진 파일도 비교할 수 있습니다. 이를 통해 다양한 형식의 파일을 분석하고 차이점을 확인할 수 있습니다.\n프로그램 특징 요약\n오픈 소스 및 무료 배포\nWindows 운영 체제 지원\n직관적인 GUI와 시각적 비교 도구\n폴더 및 파일 비교, 병합 기능\n유니코드 및 이진 파일 지원\n \n2. WinMerge의 장점과 단점\nWinMerge는 파일 및 폴더 비교 툴로 많은 사용자들에게 사랑받고 있지만, 특정한 상황에서는 한계가 있을 수 있습니다. 아래에서는 WinMerge의 장점과 단점을 상세하게 분석하여 프로그램의 특성과 활용도를 더 깊이 이해해 보겠습니다.\n장점\n1) 무료 및 오픈 소스\nWinMerge는 무료로 제공되며, 오픈 소스 프로젝트로 누구나 소스 코드를 열람하고 수정할 수 있습니다. 이를 통해 커뮤니티에서 지속적인 업데이트와 개선이 이루어지고 있습니다.\n2) 직관적인 사용자 인터페이스\nWinMerge는 간결하고 사용하기 쉬운 GUI(그래픽 사용자 인터페이스)를 제공하여 초보자도 쉽게 접근할 수 있습니다. 시각적으로 비교 결과를 확인할 수 있어, 수정이 필요한 부분을 빠르게 파악할 수 있습니다.\n3) 고속 파일 비교 및 병합\nWinMerge는 파일 비교 및 병합 과정에서 빠른 성능을 자랑합니다. 특히, 대용량 파일이나 복잡한 폴더 구조에서도 효율적으로 작동하여 시간과 노력을 절약할 수 있습니다.\n4) 다양한 파일 형식 지원\n텍스트 파일뿐만 아니라 유니코드 및 이진 파일도 지원하여, 코드 파일 비교뿐만 아니라 데이터 파일 분석에도 유용하게 활용할 수 있습니다.\n5) 플러그인 지원으로 확장성\nWinMerge는 다양한 플러그인을 지원하여, 기능을 확장할 수 있습니다. 이를 통해 사용자 맞춤형 설정이 가능해 다양한 작업 환경에 최적화할 수 있습니다.\n단점\n1) Windows 전용 지원\nWinMerge는 현재 Windows 운영 체제에서만 사용 가능합니다. macOS나 Linux 환경에서는 기본적으로 사용할 수 없으며, 대안 프로그램을 찾아야 합니다.\n2) 복잡한 병합 기능 한계\n단순한 파일 병합에는 유용하지만, 복잡한 병합 작업에서는 다소 제한적일 수 있습니다. 예를 들어, 3-way 병합 기능이 기본적으로 지원되지 않아, 보다 고급 병합 기능이 필요한 사용자는 다른 도구를 선택해야 할 수도 있습니다.\n3) 대용량 폴더 비교 시 성능 저하\n일반적으로 빠른 성능을 자랑하지만, 매우 큰 폴더를 비교할 경우 속도 저하가 발생할 수 있습니다. 특히, 수천 개 이상의 파일을 포함한 폴더를 비교할 때는 처리 속도가 느려질 수 있습니다.\n4) 자동화 기능 부족\nWinMerge는 GUI 중심의 도구로, 자동화 스크립트나 명령줄 옵션을 활용한 비교 작업이 제한적입니다. 자동화된 대량 비교 작업이 필요한 경우에는 다른 전문 도구가 더 적합할 수 있습니다.\n요약\n장점: 무료 및 오픈 소스, 직관적 인터페이스, 빠른 성능, 다양한 파일 형식 지원, 플러그인 확장성\n단점: Windows 전용, 복잡한 병합 한계, 대용량 비교 시 성능 저하, 자동화 기능 부족\n \n3. WinMerge 사용법 가이드\n이제 WinMerge를 활용하여 파일과 폴더를 비교하고 병합하는 방법을 단계별로 설명하겠습니다. 이 가이드는 WinMerge를 처음 사용하는 분들도 쉽게 따라 할 수 있도록 구성하였습니다.\nWinMerge 설치하기\nStep 1: WinMerge 공식 웹사이트(https://winmerge.org)에 접속하여 최신 버전의 설치 파일을 다운로드합니다.\nStep 2: 다운로드한 설치 파일(WinMerge-x.x.x-Setup.exe)을 실행하여, 화면의 안내에 따라 설치를 진행합니다. 기본 설정으로 설치하면 무난하게 사용할 수 있습니다.\nStep 3: 설치가 완료되면 WinMerge를 실행합니다. 첫 화면에서 간단한 인터페이스를 확인할 수 있습니다.\n\n \nWinMerge - 차이를 알게 될 것입니다…\nWinMerge가 무엇인가요? WinMerge는 Windows용 오픈 소스 차이점 분석 및 병합 도구입니다. WinMerge는 폴더와 파일을 모두 비교하여 시각적 텍스트 형식의 차이를 쉽게 이해하고 처리할 수 있습니다. 스\nwinmerge.org\n\n \n파일 비교하기\n\n\nStep 1: 프로그램을 실행한 후, [File] 메뉴에서 [Open...]을 클릭합니다. 또는 툴바에서 폴더 모양 아이콘을 클릭해도 됩니다.\nStep 2: 비교할 두 개의 파일을 선택합니다. 왼쪽 파일과 오른쪽 파일을 각각 지정한 후, [OK] 버튼을 클릭합니다.\n\n\nStep 3: 파일이 열리면, 변경된 부분이 하이라이트되어 표시됩니다. 추가된 부분은 초록색, 삭제된 부분은 빨간색으로 표시되며, 수정된 줄은 노란색으로 나타납니다.\nStep 4: 만약 특정 부분을 병합하고 싶다면, 변경된 줄을 선택한 후 [Merge] 옵션을 사용해 한쪽 파일의 내용을 다른 쪽으로 병합할 수 있습니다.\n폴더 비교하기\n\n\nStep 1: [File] 메뉴에서 [Open...]을 선택한 후, 비교할 두 개의 폴더 경로를 각각 지정합니다.\n\n\nStep 2: 폴더 비교를 시작하면, WinMerge는 폴더 내 모든 파일을 스캔하여 변경된 파일 목록을 표시합니다. 변경된 파일, 추가된 파일, 삭제된 파일이 각각 다른 아이콘으로 구분됩니다.\nStep 3: 파일을 더블 클릭하면 해당 파일의 비교 화면으로 전환되며, 차이점을 확인할 수 있습니다.\n병합 작업하기\n\n\nStep 1: 두 개의 파일을 비교한 후, 병합할 내용이 있는 줄을 선택합니다.\nStep 2: 상단 툴바의 [Copy Left] 또는 [Copy Right] 버튼을 사용해 원하는 내용을 한쪽 파일로 복사할 수 있습니다.\nStep 3: 병합이 완료되면 [Save] 버튼을 눌러 파일을 저장합니다.\n설정 및 추가 기능 활용\n\n\n\n플러그인 설정: WinMerge에서는 추가 기능을 제공하는 플러그인을 사용할 수 있습니다. [Plugins] 메뉴에서 활성화하거나 설치할 수 있습니다.\n파일 필터링: 특정 파일 형식만 비교하고 싶다면, [Filters] 메뉴를 통해 확장자 필터를 설정할 수 있습니다.\n명령줄 도구: 기본적으로 GUI 기반으로 사용되지만, 명령줄 옵션을 통해 자동화된 비교 작업도 일부 가능합니다.\n \n4. WinMerge 라이선스 정책\nWinMerge는 GPL(GNU General Public License) 버전 2에 따라 배포되는 오픈 소스 소프트웨어입니다. 이 라이선스는 사용자에게 자유롭게 소프트웨어를 사용할 수 있는 권리를 부여하면서도, 소스 코드를 공유하고 수정할 수 있도록 허용합니다. 다음은 WinMerge의 라이선스와 관련된 주요 사항을 설명합니다.\nWinMerge 라이선스의 특징\n1) 무료 사용\nWinMerge는 개인 사용자뿐만 아니라 기업 사용자도 무료로 사용할 수 있습니다. 상업적 목적으로 사용하더라도 추가적인 비용 없이 소프트웨어를 활용할 수 있습니다.\n2) 소스 코드 수정 및 배포\nGPL-2.0 라이선스에 따라 WinMerge의 소스 코드를 수정 및 배포할 수 있습니다. 다만, 수정된 버전을 배포할 때는 원래 라이선스 조건을 그대로 유지해야 하며, 수정된 소스 코드 역시 공개해야 합니다.\n3) 저작권 고지 의무\n소프트웨어를 재배포하거나 수정할 경우, 원 저작자의 저작권 고지를 반드시 포함해야 합니다. 이를 통해 WinMerge 프로젝트의 기여자들이 인정을 받을 수 있도록 보장합니다.\n4) 오픈 소스 커뮤니티 기여\nWinMerge는 오픈 소스 커뮤니티의 적극적인 참여로 발전해 온 프로젝트입니다. 따라서 누구나 GitHub 저장소를 통해 소스 코드에 접근하고, 기여(Pull Request)를 통해 개선에 참여할 수 있습니다.\n라이선스 관련 주의 사항\n상업용 소프트웨어와의 통합: WinMerge를 상업용 소프트웨어에 통합하려면, GPL-2.0 호환성을 고려해야 합니다. 상업용 소프트웨어에 통합 시 라이선스 조건을 준수하지 않을 경우 법적 문제가 발생할 수 있습니다.\n배포 시 책임 한계: WinMerge는 \"있는 그대로(as is)\" 제공되며, 소프트웨어 사용으로 발생할 수 있는 문제에 대해 어떠한 보증도 제공하지 않습니다. 사용자는 이를 인지하고 프로그램을 활용해야 합니다.\n \n5. WinMerge의 효과적인 활용 방법\nWinMerge는 다양한 상황에서 파일 및 폴더 비교 작업을 간편하게 수행할 수 있는 유용한 도구입니다. 특히, 소프트웨어 개발자, 시스템 관리자, 문서 편집자 등이 업무 효율성을 높이기 위해 WinMerge를 활용할 수 있습니다. 아래에서는 WinMerge를 실무에서 효과적으로 활용할 수 있는 몇 가지 방법을 소개합니다.\n1) 코드 리뷰 및 버전 관리에 활용\n코드 변경 사항 분석: WinMerge를 사용하면 두 버전의 소스 코드를 비교하여 변경된 부분을 시각적으로 확인할 수 있습니다. 이를 통해 코드 리뷰 과정에서 수정된 코드를 쉽게 추적하고, 버그나 문제를 빠르게 발견할 수 있습니다.\n버전 간 파일 병합: 개발 프로젝트에서 여러 개발자가 동시에 작업하는 경우, 변경된 코드 파일을 병합할 때 WinMerge를 사용하면 충돌을 해결하고 최신 상태로 통합하는 데 유리합니다.\n2) 폴더 동기화 및 데이터 백업\n폴더 동기화: 대규모 폴더 구조를 비교하여 변경된 파일만 업데이트하거나 백업할 때 유용합니다. 특히, 서버나 클라우드 저장소에서 데이터를 동기화할 때 불필요한 중복 파일을 줄이고 최신 파일만 유지할 수 있습니다.\n백업 파일 비교: 백업된 폴더와 원본 폴더를 비교하여 손실된 데이터나 변경된 파일을 확인하고, 필요 시 빠르게 복구할 수 있습니다.\n3) 문서 비교 및 수정 내역 관리\n문서 변경 사항 추적: 보고서, 계약서, 논문 등 문서 파일의 변경 내역을 비교하여 수정된 부분을 빠르게 파악할 수 있습니다. 이 기능은 팀 프로젝트나 협업 시 각기 다른 버전의 문서를 관리하는 데 도움이 됩니다.\n이진 파일 비교: 텍스트 문서뿐만 아니라, WinMerge는 이진 파일(Binaries)도 비교할 수 있어, 프로그램 실행 파일이나 이미지 파일의 차이도 분석할 수 있습니다.\n4) 서버 및 시스템 관리\n설정 파일 비교: 서버의 구성 파일이나 시스템 설정 파일을 WinMerge를 사용해 비교하면, 설정 변경 내역을 쉽게 파악할 수 있습니다. 이를 통해 문제를 진단하고 빠르게 해결할 수 있습니다.\n로그 파일 분석: 로그 파일의 변화 내역을 추적하여 시스템 오류나 보안 문제를 발견할 수 있습니다. 변경된 부분만 하이라이트되므로 분석 속도가 향상됩니다.\n5) 번역 및 다국어 파일 관리\n다국어 지원 파일 비교: 소프트웨어 번역 작업에서 WinMerge를 사용하여 다양한 언어 파일 간의 차이점을 비교하고, 일관된 번역이 이루어졌는지 확인할 수 있습니다.\nCSV 파일 비교: 대규모 데이터가 포함된 CSV 파일을 비교하여, 데이터 수정 내역을 확인하고 누락된 항목을 빠르게 식별할 수 있습니다.\n \n6. 결론\nWinMerge는 오픈 소스 무료 도구로, 파일 및 폴더 간의 차이점을 시각적으로 비교하고 병합하는 데 탁월한 성능을 발휘합니다. 소프트웨어 개발자부터 시스템 관리자, 문서 작업자에 이르기까지 다양한 분야에서 유용하게 활용될 수 있으며, 특히 코드 리뷰, 데이터 백업, 파일 동기화 작업에서 큰 효율성을 제공합니다.\n \nWindows 환경에서 작동하기 때문에 대부분의 사용자에게 접근성이 높으며, 플러그인과 확장 기능을 통해 추가적인 기능을 더할 수도 있습니다. 무엇보다 WinMerge의 직관적인 인터페이스와 빠른 비교 성능 덕분에 초보자부터 숙련된 사용자까지 폭넓게 사용할 수 있다는 것이 큰 장점입니다.\n \n만약 파일 비교 및 병합 도구가 필요하다면, WinMerge를 통해 작업 속도를 개선하고 효율성을 높여보세요. 오픈 소스이기 때문에 부담 없이 다운로드하여 활용할 수 있으며, 지속적인 업데이트와 커뮤니티의 지원 덕분에 안정적으로 사용할 수 있습니다.",
        "guid": "http://muzbox.tistory.com/483498",
        "categories": [
          "추천 프리웨어/시스템관리,보안",
          "windows 파일 비교 툴",
          "winmerge 다운로드",
          "winmerge 사용법",
          "무료프로그램",
          "코드 리뷰 프로그램",
          "파일 비교 도구 무료",
          "파일비교",
          "폴더 동기화 소프트웨어",
          "폴더비교",
          "프리웨어"
        ],
        "isoDate": "2024-11-15T05:21:34.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "AI 최신 자료 검색 최강자, 퍼플렉시티(Perplexity) 활용법",
        "link": "http://muzbox.tistory.com/483497",
        "pubDate": "Wed, 13 Nov 2024 10:52:30 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483497#entry483497comment",
        "content": "<p data-ke-size=\"size16\">퍼플렉시티(Perplexity AI) 의 독보적인 기능과 활용 방법을 통해 정보 탐색, 연구 분석, 생산성 향상에 도움을 받을 수 있습니다. Copilot 기능과 실시간 업데이트로 업무 효율을 극대화하세요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법.jpg\" data-origin-width=\"700\" data-origin-height=\"368\"><span data-url=\"https://blog.kakaocdn.net/dn/bWlh8Y/btsKFLYLP34/GoTpVX4zm3YQlFFj840VZK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bWlh8Y/btsKFLYLP34/GoTpVX4zm3YQlFFj840VZK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bWlh8Y/btsKFLYLP34/GoTpVX4zm3YQlFFj840VZK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbWlh8Y%2FbtsKFLYLP34%2FGoTpVX4zm3YQlFFj840VZK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"퍼플렉시티 활용법\" data-filename=\"퍼플렉시티 사용법.jpg\" data-origin-width=\"700\" data-origin-height=\"368\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;최근 몇 년간 인공지능(AI) 기술은 빠르게 발전하며 일상 생활과 업무 환경에 큰 변화를 가져왔습니다. 많은 사람들이 AI 도구에 대해 관심을 갖고 있지만, 여전히 AI 활용에 대한 부정적인 시각도 존재합니다. 저 역시 한때는 AI에 대해 회의적이었으나, <b>Perplexity AI</b>라는 새로운 도구를 사용하면서 생각이 완전히 바뀌었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이 글에서는 Perplexity AI가 어떻게 생산성을 높이고 일상적인 작업에 도움을 주는지, 특히 정보 탐색과 분석에서 어떤 혁신적인 기능을 제공하는지 알아보겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Perplexity AI란 무엇인가?</b></span></h2>\n<p data-ke-size=\"size16\">Perplexity AI는 \"정보 탐색과 호기심을 위한 스위스 군용 칼\"로 불리며, 사용자의 질문에 대해 방대한 데이터베이스를 통해 실시간으로 답변을 제공합니다. 그 과정에서 정확한 출처를 제시하며, 최신 정보를 반영해 사용자에게 신뢰도 높은 결과를 제공합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>Perplexity AI의 주요 기능</b></span></h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>정보 검색 및 분석</b>: 사용자가 질문을 입력하면 AI가 신속하게 관련 데이터를 분석하여 정확한 답변을 제시합니다. 단순한 질문 답변을 넘어 복잡한 데이터 분석까지 가능해, 특히 연구와 학습에 유용합니다.</li>\n<li><b>다양한 AI 모델 지원</b>: 무료 버전과 유료 Pro 버전으로 나뉘어져 있으며, 유료 사용자는 Claude 3.5 Sonnet, GPT-4, Grok-2와 같은 다양한 모델을 선택할 수 있습니다. 이를 통해 특정 작업에 맞는 AI를 활용할 수 있습니다.</li>\n<li><b>문서 업로드 및 분석</b>: Pro 버전에서는 사용자가 문서를 업로드하면 해당 문서의 주요 내용을 요약하고 분석하는 기능도 제공합니다. 이로 인해 대량의 텍스트 데이터를 효율적으로 관리할 수 있습니다.</li>\n</ol>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Perplexity AI의 차별화된 기능</b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>1. 실시간 정보 업데이트와 정확한 출처 제공</b></span></h3>\n<p data-ke-size=\"size16\">많은 AI 도구들이 존재하지만 Perplexity AI는 특히 <b>실시간 정보 업데이트</b> 기능으로 차별화됩니다. 예를 들어, 특정 뉴스나 트렌드에 대해 질문하면 가장 최신의 정보가 반영된 답변을 제공합니다. 또한, 모든 답변에 <b>출처를 명확히 제시</b>하므로 사용자는 제시된 정보를 신뢰하고 참고할 수 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>실시간 업데이트</b>: 검색할 때마다 최신 정보가 반영되어 더 정확한 답변을 제공합니다.</li>\n<li><b>출처 확인 기능</b>: 답변과 함께 관련된 출처를 명시하여 정보의 신뢰도를 높입니다. 특히 연구 논문 작성이나 학술 자료 수집에 유용합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>2. Copilot 기능을 통한 맞춤형 검색 경험 제공</b></span></h3>\n<p data-ke-size=\"size16\">Perplexity AI의 <b>Copilot 기능</b>은 사용자의 질문에 대해 추가적인 질문을 던져 보다 정교하고 맞춤형 답변을 도출합니다. 이 기능은 사용자가 모호한 질문을 했을 때 추가적인 정보를 요구하여, 사용자가 원래 찾고자 했던 정보를 정확하게 찾아줍니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>개인화된 검색 지원</b>: Copilot이 사용자의 의도를 파악해 구체적인 정보를 제공합니다.</li>\n<li><b>대화형 인터페이스</b>: 질문에 대한 추가 질문을 통해 사용자 맞춤형 검색 결과를 제공합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>3. 다양한 활용 사례</b></span></h3>\n<p data-ke-size=\"size16\">Perplexity AI는 단순한 검색 도구 이상의 가치를 제공합니다. 특히 다양한 분야에서 유용하게 활용될 수 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>제품 조사</b>: 쇼핑할 때 여러 사이트를 비교하는 대신, Perplexity AI를 사용해 추천 제품을 찾을 수 있습니다. 예를 들어, 반려견 하네스를 찾는 데 사용했을 때, 다양한 리뷰와 평점을 기반으로 최적의 선택을 도와줍니다.</li>\n<li><b>과학적 자료 조사</b>: 운동 프로그램 설계 시, 근거 기반의 자료를 빠르게 수집하고 정리할 수 있습니다. 이를 통해 효과적인 운동 계획을 세우는 데 도움을 받았습니다.</li>\n<li><b>SEO 최적화</b>: 블로그나 웹사이트 콘텐츠 작성 시, 키워드 연구를 통해 더 나은 SEO 성과를 거둘 수 있도록 지원합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Perplexity AI 기본 사용법</b></span></h2>\n<p data-ke-size=\"size16\">퍼플렉시티 초기화면은 챗GPT와 비슷합니다. 퍼플렉시티의 기본 옵션은 '웹'검색이나, 모드 선택에서 다양한 옵션으로 사용자 응답 효율을 극대화 할 수 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법 2.jpg\" data-origin-width=\"823\" data-origin-height=\"443\"><span data-url=\"https://blog.kakaocdn.net/dn/nMTH2/btsKHtWCxh1/5GIOu7R84SrDceDoKkpUek/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/nMTH2/btsKHtWCxh1/5GIOu7R84SrDceDoKkpUek/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/nMTH2/btsKHtWCxh1/5GIOu7R84SrDceDoKkpUek/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FnMTH2%2FbtsKHtWCxh1%2F5GIOu7R84SrDceDoKkpUek%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"퍼플렉시티 사용법 2.jpg\" data-origin-width=\"823\" data-origin-height=\"443\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Perplexity AI 활용 팁</b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>1. 키워드 연구 및 SEO 최적화</b></span></h3>\n<p data-ke-size=\"size16\">Perplexity AI는 단순한 검색 도구를 넘어 <b>SEO 최적화 도구</b>로도 활용될 수 있습니다. 주제에 맞는 핵심 키워드를 찾아내어 콘텐츠의 가독성과 검색 순위를 높이는 데 도움을 줍니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>키워드 분석</b>: 특정 주제와 관련된 트렌드 키워드를 찾아 SEO 전략에 반영할 수 있습니다.</li>\n<li><b>SEO 성과 향상</b>: 블로그 포스팅이나 제품 페이지 최적화에 활용하여 검색 노출을 극대화할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>2. 학술 자료 정리 및 요약</b></span></h3>\n<p data-ke-size=\"size16\">Perplexity AI는 학술 논문이나 연구 자료를 <b>신속하게 분석하고 요약</b>하는 데 탁월합니다. 복잡한 논문을 빠르게 읽고 이해할 수 있어 연구자나 학생들에게 유용한 도구입니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>논문 요약</b>: 방대한 학술 자료를 요약하여 핵심 내용을 빠르게 파악할 수 있습니다.</li>\n<li><b>자료 검증</b>: AI가 제시한 출처를 통해 자료의 신뢰성을 직접 확인할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>3. 소비자 제품 리뷰 분석</b></span></h3>\n<p data-ke-size=\"size16\">Perplexity AI를 사용하면 다양한 리뷰와 평점을 분석하여 <b>소비자 제품 선택</b>에 도움을 받을 수 있습니다. 단순한 평점 비교를 넘어, 사용자 리뷰를 분석해 제품의 강점과 약점을 파악할 수 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>구매 결정 지원</b>: 제품의 장단점을 한눈에 파악하여 현명한 소비 결정을 내릴 수 있습니다.</li>\n<li><b>제품 리뷰 요약</b>: 여러 리뷰를 요약해 시간 절약이 가능합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Perplexity AI 프롬프트 예시 모음</b></span></h2>\n<p data-ke-size=\"size16\">Perplexity AI를 최대한 효과적으로 활용하기 위해서는 <b>질문 방식과 프롬프트 설정</b>이 매우 중요합니다. 아래는 다양한 상황에서 활용할 수 있는 <b>프롬프트 예시</b>들을 제시합니다. 이를 통해 더 정확하고 유용한 정보를 빠르게 얻을 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>1. 일반 정보 탐색</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법 1.jpg\" data-origin-width=\"1134\" data-origin-height=\"635\"><span data-url=\"https://blog.kakaocdn.net/dn/lRBQ5/btsKHaCZstF/hY2Z8A59kcmNLMgXul22O1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/lRBQ5/btsKHaCZstF/hY2Z8A59kcmNLMgXul22O1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/lRBQ5/btsKHaCZstF/hY2Z8A59kcmNLMgXul22O1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlRBQ5%2FbtsKHaCZstF%2FhY2Z8A59kcmNLMgXul22O1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"700\" height=\"392\" data-filename=\"퍼플렉시티 사용법 1.jpg\" data-origin-width=\"1134\" data-origin-height=\"635\"/></span></figure>\n</p>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"2024년 웹 디자인 트렌드에 대해 알려줘.\"</li>\n<li>\"최신 스마트폰 모델 비교 분석 부탁해.\"</li>\n<li>\"AI 기반 마케팅 전략의 성공 사례를 설명해줘.\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>구체적인 연도나 키워드</b>를 포함해 최신 정보를 요청합니다.</li>\n<li>검색할 분야를 명확히 지정하여 결과의 정확도를 높입니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>2. 제품 리뷰 및 비교 분석</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법 3.jpg\" data-origin-width=\"1121\" data-origin-height=\"592\"><span data-url=\"https://blog.kakaocdn.net/dn/bZzdOu/btsKFC17fgJ/GMeriPAoXk4llV8AykWLgK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bZzdOu/btsKFC17fgJ/GMeriPAoXk4llV8AykWLgK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bZzdOu/btsKFC17fgJ/GMeriPAoXk4llV8AykWLgK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbZzdOu%2FbtsKFC17fgJ%2FGMeriPAoXk4llV8AykWLgK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"퍼플렉시티 사용법 3.jpg\" data-origin-width=\"1121\" data-origin-height=\"592\"/></span></figure>\n</p>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"현재 최고의 게이밍 노트북 추천해줘.\"</li>\n<li>\"무선 이어폰 중 가성비 좋은 제품 목록을 알려줘.\"</li>\n<li>\"반려견용 하네스 중 가장 인기 있는 제품은 무엇이야?\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>특정 요구 조건</b>(예: 예산, 기능, 브랜드)을 추가하여 결과를 세분화합니다.</li>\n<li><b>\"가장 평점이 높은\"</b>, <b>\"가성비 좋은\"</b>과 같은 수식어를 활용해 더욱 맞춤형 정보를 얻습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>3. 학술 자료 분석 및 요약 (학문 모드 설정)</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법 5.jpg\" data-origin-width=\"905\" data-origin-height=\"552\"><span data-url=\"https://blog.kakaocdn.net/dn/JU7vA/btsKGU1s2Vg/RTLV2CBfiVeFLrFaqTmbKk/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/JU7vA/btsKGU1s2Vg/RTLV2CBfiVeFLrFaqTmbKk/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/JU7vA/btsKGU1s2Vg/RTLV2CBfiVeFLrFaqTmbKk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FJU7vA%2FbtsKGU1s2Vg%2FRTLV2CBfiVeFLrFaqTmbKk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"퍼플렉시티 사용법 5.jpg\" data-origin-width=\"905\" data-origin-height=\"552\"/></span></figure>\n</p>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"최신 비만 치료 방법에 대한 논문 요약해줘.\"</li>\n<li>\"전기 자동차 배터리 기술의 최신 연구 동향을 분석해줘.\"</li>\n<li>\"지속 가능한 에너지의 경제적 영향에 대한 학술 자료 추천해줘.\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>\"논문 요약\"</b>, <b>\"학술 자료\"</b> 등의 키워드를 추가해 전문 자료를 빠르게 찾아냅니다.</li>\n<li>특정 주제나 <b>\"연구 결과\"</b>, <b>\"메타 분석\"</b> 등과 같은 구체적인 용어를 사용해 더욱 깊이 있는 정보를 요청합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>4. SEO 키워드 분석 및 콘텐츠 최적화</b></span></h3>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"IT 블로그를 위한 2024년 SEO 키워드 추천해줘.\"</li>\n<li>\"마케팅 관련 블로그 포스팅에 효과적인 키워드 분석 부탁해.\"</li>\n<li>\"한국어 콘텐츠의 SEO 전략을 제시해줘.\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>\"블로그 주제\"</b>, <b>\"타겟 시장\"</b> 등을 명확히 하여 관련성 높은 키워드를 제안받습니다.</li>\n<li><b>\"검색 순위 향상\"</b>, <b>\"구글 SEO 최적화\"</b>와 같은 수식어를 추가해 SEO에 특화된 조언을 받습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>5. 건강 및 웰니스 조언</b></span></h3>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"근거 기반으로 다이어트 식단 계획 세워줘.\"</li>\n<li>\"중년 남성을 위한 근력 운동 프로그램 추천해.\"</li>\n<li>\"면역력을 높이는 자연적인 방법을 알려줘.\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>\"과학적 근거\"</b>, <b>\"증명된 연구\"</b> 등의 키워드를 사용하여 신뢰할 수 있는 정보를 얻습니다.</li>\n<li>특정 건강 상태나 목표(예: 체중 감량, 근력 향상)에 맞춘 프롬프트를 사용합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>6. Copilot 기능 활용 예시</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"퍼플렉시티 사용법 6.jpg\" data-origin-width=\"964\" data-origin-height=\"445\"><span data-url=\"https://blog.kakaocdn.net/dn/PD3Vg/btsKGNagfBk/6yETkLKvE0j0NA9GZXLBNK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/PD3Vg/btsKGNagfBk/6yETkLKvE0j0NA9GZXLBNK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/PD3Vg/btsKGNagfBk/6yETkLKvE0j0NA9GZXLBNK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPD3Vg%2FbtsKGNagfBk%2F6yETkLKvE0j0NA9GZXLBNK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"퍼플렉시티 사용법 6.jpg\" data-origin-width=\"964\" data-origin-height=\"445\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Copilot 기능을 활용하면 <b>추가적인 질문을 통해 검색 결과를 세분화</b>할 수 있습니다.</p>\n<h4 data-ke-size=\"size20\">예시 프롬프트 시나리오:</h4>\n<p data-ke-size=\"size16\"><b>사용자 질문</b>: \"2024년 마케팅 트렌드에 대해 알려줘.\"</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>Copilot 추가 질문: \"B2B 마케팅과 B2C 마케팅 중 어느 분야에 관심이 있나요?\"</li>\n<li><b>답변 후</b>: \"B2B 마케팅 전략에 대해 더 자세히 알려줘.\"</li>\n</ul>\n<p data-ke-size=\"size16\"><b>사용자 질문</b>: \"가장 효과적인 운동 루틴을 추천해줘.\"</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>Copilot 추가 질문: \"체중 감량을 목표로 하나요, 아니면 근력 강화를 목표로 하나요?\"</li>\n<li><b>답변 후</b>: \"근력 강화 운동에 집중하고 싶어.\"</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>7. 비즈니스 전략 및 분석</b></span></h3>\n<h4 data-ke-size=\"size20\">질문 예시:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"2024년 스타트업을 위한 효과적인 마케팅 전략 제안해줘.\"</li>\n<li>\"소매업에서 성공적인 고객 유지 전략을 분석해줘.\"</li>\n<li>\"B2B 세일즈를 위한 최신 트렌드를 알려줘.\"</li>\n</ul>\n<h4 data-ke-size=\"size20\">프롬프트 팁:</h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>산업 분야</b>(예: IT, 헬스케어, 패션)와 <b>구체적인 전략</b>(예: 마케팅, 세일즈)을 명확히 지정하여 맞춤형 정보를 얻습니다.</li>\n<li><b>\"성공 사례\"</b>, <b>\"최신 트렌드\"</b> 등을 추가하여 깊이 있는 분석을 요청합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">이러한 프롬프트 예시를 참고하여 <b>Perplexity AI</b>를 보다 효과적으로 활용해 보세요. 사용자의 질문 방식에 따라 <b>더 정밀하고 유용한 결과</b>를 얻을 수 있습니다.  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>마치며</b></span></h2>\n<p data-ke-size=\"size16\">&nbsp;Perplexity AI를 사용하기 전에는 AI 도구들이 단순한 자동화 도구에 불과하다고 생각했지만, 실제로 사용해 보니 업무 효율을 크게 높일 수 있다는 점을 깨달았습니다. 특히 실시간 정보 업데이트와 Copilot 기능은 정보를 보다 정확하고 빠르게 얻을 수 있도록 도와줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;AI 도구를 활용해 일상 업무에서 더 많은 가치를 창출하고 싶다면, Perplexity AI를 직접 사용해 보시길 권장합니다. 여러분도 이 도구를 사용하여 새로운 차원의 생산성을 경험해 보세요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>Q&amp;A</b></span></h2>\n<h3 data-ke-size=\"size23\">1. Perplexity AI는 무료로 사용할 수 있나요?</h3>\n<p data-ke-size=\"size16\">네, Perplexity AI는 무료로 기본 기능을 제공하며, 유료 Pro 버전을 통해 더 많은 고급 기능을 사용할 수 있습니다. Pro 버전에서는 다양한 AI 모델 선택과 무제한 문서 업로드 분석 기능을 추가로 이용할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\">2. Copilot 기능은 어떻게 활용하나요?</h3>\n<p data-ke-size=\"size16\">Copilot 기능은 사용자의 질문에 대한 추가적인 질문을 통해 보다 정확한 답변을 제공합니다. 이를 통해 보다 맞춤형 검색 결과를 얻을 수 있으며, 특히 모호한 질문에 대해 유용합니다.</p>\n<h3 data-ke-size=\"size23\">3. Perplexity AI는 어떤 상황에서 가장 유용한가요?</h3>\n<p data-ke-size=\"size16\">Perplexity AI는 제품 조사, 학술 자료 분석, SEO 최적화, 소비자 리뷰 분석 등 다양한 상황에서 유용하게 활용할 수 있습니다. 특히 빠르고 정확한 정보 탐색이 필요한 경우에 큰 도움을 줍니다.</p>",
        "contentSnippet": "퍼플렉시티(Perplexity AI) 의 독보적인 기능과 활용 방법을 통해 정보 탐색, 연구 분석, 생산성 향상에 도움을 받을 수 있습니다. Copilot 기능과 실시간 업데이트로 업무 효율을 극대화하세요.\n\n\n \n 최근 몇 년간 인공지능(AI) 기술은 빠르게 발전하며 일상 생활과 업무 환경에 큰 변화를 가져왔습니다. 많은 사람들이 AI 도구에 대해 관심을 갖고 있지만, 여전히 AI 활용에 대한 부정적인 시각도 존재합니다. 저 역시 한때는 AI에 대해 회의적이었으나, Perplexity AI라는 새로운 도구를 사용하면서 생각이 완전히 바뀌었습니다.\n \n이 글에서는 Perplexity AI가 어떻게 생산성을 높이고 일상적인 작업에 도움을 주는지, 특히 정보 탐색과 분석에서 어떤 혁신적인 기능을 제공하는지 알아보겠습니다.\n \nPerplexity AI란 무엇인가?\nPerplexity AI는 \"정보 탐색과 호기심을 위한 스위스 군용 칼\"로 불리며, 사용자의 질문에 대해 방대한 데이터베이스를 통해 실시간으로 답변을 제공합니다. 그 과정에서 정확한 출처를 제시하며, 최신 정보를 반영해 사용자에게 신뢰도 높은 결과를 제공합니다.\n \nPerplexity AI의 주요 기능\n정보 검색 및 분석: 사용자가 질문을 입력하면 AI가 신속하게 관련 데이터를 분석하여 정확한 답변을 제시합니다. 단순한 질문 답변을 넘어 복잡한 데이터 분석까지 가능해, 특히 연구와 학습에 유용합니다.\n다양한 AI 모델 지원: 무료 버전과 유료 Pro 버전으로 나뉘어져 있으며, 유료 사용자는 Claude 3.5 Sonnet, GPT-4, Grok-2와 같은 다양한 모델을 선택할 수 있습니다. 이를 통해 특정 작업에 맞는 AI를 활용할 수 있습니다.\n문서 업로드 및 분석: Pro 버전에서는 사용자가 문서를 업로드하면 해당 문서의 주요 내용을 요약하고 분석하는 기능도 제공합니다. 이로 인해 대량의 텍스트 데이터를 효율적으로 관리할 수 있습니다.\n \nPerplexity AI의 차별화된 기능\n1. 실시간 정보 업데이트와 정확한 출처 제공\n많은 AI 도구들이 존재하지만 Perplexity AI는 특히 실시간 정보 업데이트 기능으로 차별화됩니다. 예를 들어, 특정 뉴스나 트렌드에 대해 질문하면 가장 최신의 정보가 반영된 답변을 제공합니다. 또한, 모든 답변에 출처를 명확히 제시하므로 사용자는 제시된 정보를 신뢰하고 참고할 수 있습니다.\n실시간 업데이트: 검색할 때마다 최신 정보가 반영되어 더 정확한 답변을 제공합니다.\n출처 확인 기능: 답변과 함께 관련된 출처를 명시하여 정보의 신뢰도를 높입니다. 특히 연구 논문 작성이나 학술 자료 수집에 유용합니다.\n2. Copilot 기능을 통한 맞춤형 검색 경험 제공\nPerplexity AI의 Copilot 기능은 사용자의 질문에 대해 추가적인 질문을 던져 보다 정교하고 맞춤형 답변을 도출합니다. 이 기능은 사용자가 모호한 질문을 했을 때 추가적인 정보를 요구하여, 사용자가 원래 찾고자 했던 정보를 정확하게 찾아줍니다.\n개인화된 검색 지원: Copilot이 사용자의 의도를 파악해 구체적인 정보를 제공합니다.\n대화형 인터페이스: 질문에 대한 추가 질문을 통해 사용자 맞춤형 검색 결과를 제공합니다.\n3. 다양한 활용 사례\nPerplexity AI는 단순한 검색 도구 이상의 가치를 제공합니다. 특히 다양한 분야에서 유용하게 활용될 수 있습니다.\n제품 조사: 쇼핑할 때 여러 사이트를 비교하는 대신, Perplexity AI를 사용해 추천 제품을 찾을 수 있습니다. 예를 들어, 반려견 하네스를 찾는 데 사용했을 때, 다양한 리뷰와 평점을 기반으로 최적의 선택을 도와줍니다.\n과학적 자료 조사: 운동 프로그램 설계 시, 근거 기반의 자료를 빠르게 수집하고 정리할 수 있습니다. 이를 통해 효과적인 운동 계획을 세우는 데 도움을 받았습니다.\nSEO 최적화: 블로그나 웹사이트 콘텐츠 작성 시, 키워드 연구를 통해 더 나은 SEO 성과를 거둘 수 있도록 지원합니다.\n \nPerplexity AI 기본 사용법\n퍼플렉시티 초기화면은 챗GPT와 비슷합니다. 퍼플렉시티의 기본 옵션은 '웹'검색이나, 모드 선택에서 다양한 옵션으로 사용자 응답 효율을 극대화 할 수 있습니다.\n\n\n \n \nPerplexity AI 활용 팁\n1. 키워드 연구 및 SEO 최적화\nPerplexity AI는 단순한 검색 도구를 넘어 SEO 최적화 도구로도 활용될 수 있습니다. 주제에 맞는 핵심 키워드를 찾아내어 콘텐츠의 가독성과 검색 순위를 높이는 데 도움을 줍니다.\n키워드 분석: 특정 주제와 관련된 트렌드 키워드를 찾아 SEO 전략에 반영할 수 있습니다.\nSEO 성과 향상: 블로그 포스팅이나 제품 페이지 최적화에 활용하여 검색 노출을 극대화할 수 있습니다.\n2. 학술 자료 정리 및 요약\nPerplexity AI는 학술 논문이나 연구 자료를 신속하게 분석하고 요약하는 데 탁월합니다. 복잡한 논문을 빠르게 읽고 이해할 수 있어 연구자나 학생들에게 유용한 도구입니다.\n논문 요약: 방대한 학술 자료를 요약하여 핵심 내용을 빠르게 파악할 수 있습니다.\n자료 검증: AI가 제시한 출처를 통해 자료의 신뢰성을 직접 확인할 수 있습니다.\n3. 소비자 제품 리뷰 분석\nPerplexity AI를 사용하면 다양한 리뷰와 평점을 분석하여 소비자 제품 선택에 도움을 받을 수 있습니다. 단순한 평점 비교를 넘어, 사용자 리뷰를 분석해 제품의 강점과 약점을 파악할 수 있습니다.\n구매 결정 지원: 제품의 장단점을 한눈에 파악하여 현명한 소비 결정을 내릴 수 있습니다.\n제품 리뷰 요약: 여러 리뷰를 요약해 시간 절약이 가능합니다.\n \nPerplexity AI 프롬프트 예시 모음\nPerplexity AI를 최대한 효과적으로 활용하기 위해서는 질문 방식과 프롬프트 설정이 매우 중요합니다. 아래는 다양한 상황에서 활용할 수 있는 프롬프트 예시들을 제시합니다. 이를 통해 더 정확하고 유용한 정보를 빠르게 얻을 수 있습니다.\n1. 일반 정보 탐색\n\n\n질문 예시:\n\"2024년 웹 디자인 트렌드에 대해 알려줘.\"\n\"최신 스마트폰 모델 비교 분석 부탁해.\"\n\"AI 기반 마케팅 전략의 성공 사례를 설명해줘.\"\n프롬프트 팁:\n구체적인 연도나 키워드를 포함해 최신 정보를 요청합니다.\n검색할 분야를 명확히 지정하여 결과의 정확도를 높입니다.\n2. 제품 리뷰 및 비교 분석\n\n\n질문 예시:\n\"현재 최고의 게이밍 노트북 추천해줘.\"\n\"무선 이어폰 중 가성비 좋은 제품 목록을 알려줘.\"\n\"반려견용 하네스 중 가장 인기 있는 제품은 무엇이야?\"\n프롬프트 팁:\n특정 요구 조건(예: 예산, 기능, 브랜드)을 추가하여 결과를 세분화합니다.\n\"가장 평점이 높은\", \"가성비 좋은\"과 같은 수식어를 활용해 더욱 맞춤형 정보를 얻습니다.\n3. 학술 자료 분석 및 요약 (학문 모드 설정)\n\n\n질문 예시:\n\"최신 비만 치료 방법에 대한 논문 요약해줘.\"\n\"전기 자동차 배터리 기술의 최신 연구 동향을 분석해줘.\"\n\"지속 가능한 에너지의 경제적 영향에 대한 학술 자료 추천해줘.\"\n프롬프트 팁:\n\"논문 요약\", \"학술 자료\" 등의 키워드를 추가해 전문 자료를 빠르게 찾아냅니다.\n특정 주제나 \"연구 결과\", \"메타 분석\" 등과 같은 구체적인 용어를 사용해 더욱 깊이 있는 정보를 요청합니다.\n4. SEO 키워드 분석 및 콘텐츠 최적화\n질문 예시:\n\"IT 블로그를 위한 2024년 SEO 키워드 추천해줘.\"\n\"마케팅 관련 블로그 포스팅에 효과적인 키워드 분석 부탁해.\"\n\"한국어 콘텐츠의 SEO 전략을 제시해줘.\"\n프롬프트 팁:\n\"블로그 주제\", \"타겟 시장\" 등을 명확히 하여 관련성 높은 키워드를 제안받습니다.\n\"검색 순위 향상\", \"구글 SEO 최적화\"와 같은 수식어를 추가해 SEO에 특화된 조언을 받습니다.\n5. 건강 및 웰니스 조언\n질문 예시:\n\"근거 기반으로 다이어트 식단 계획 세워줘.\"\n\"중년 남성을 위한 근력 운동 프로그램 추천해.\"\n\"면역력을 높이는 자연적인 방법을 알려줘.\"\n프롬프트 팁:\n\"과학적 근거\", \"증명된 연구\" 등의 키워드를 사용하여 신뢰할 수 있는 정보를 얻습니다.\n특정 건강 상태나 목표(예: 체중 감량, 근력 향상)에 맞춘 프롬프트를 사용합니다.\n6. Copilot 기능 활용 예시\n\n\nCopilot 기능을 활용하면 추가적인 질문을 통해 검색 결과를 세분화할 수 있습니다.\n예시 프롬프트 시나리오:\n사용자 질문: \"2024년 마케팅 트렌드에 대해 알려줘.\"\nCopilot 추가 질문: \"B2B 마케팅과 B2C 마케팅 중 어느 분야에 관심이 있나요?\"\n답변 후: \"B2B 마케팅 전략에 대해 더 자세히 알려줘.\"\n사용자 질문: \"가장 효과적인 운동 루틴을 추천해줘.\"\nCopilot 추가 질문: \"체중 감량을 목표로 하나요, 아니면 근력 강화를 목표로 하나요?\"\n답변 후: \"근력 강화 운동에 집중하고 싶어.\"\n7. 비즈니스 전략 및 분석\n질문 예시:\n\"2024년 스타트업을 위한 효과적인 마케팅 전략 제안해줘.\"\n\"소매업에서 성공적인 고객 유지 전략을 분석해줘.\"\n\"B2B 세일즈를 위한 최신 트렌드를 알려줘.\"\n프롬프트 팁:\n산업 분야(예: IT, 헬스케어, 패션)와 구체적인 전략(예: 마케팅, 세일즈)을 명확히 지정하여 맞춤형 정보를 얻습니다.\n\"성공 사례\", \"최신 트렌드\" 등을 추가하여 깊이 있는 분석을 요청합니다.\n이러한 프롬프트 예시를 참고하여 Perplexity AI를 보다 효과적으로 활용해 보세요. 사용자의 질문 방식에 따라 더 정밀하고 유용한 결과를 얻을 수 있습니다.  \n \n \n마치며\n Perplexity AI를 사용하기 전에는 AI 도구들이 단순한 자동화 도구에 불과하다고 생각했지만, 실제로 사용해 보니 업무 효율을 크게 높일 수 있다는 점을 깨달았습니다. 특히 실시간 정보 업데이트와 Copilot 기능은 정보를 보다 정확하고 빠르게 얻을 수 있도록 도와줍니다.\n \n AI 도구를 활용해 일상 업무에서 더 많은 가치를 창출하고 싶다면, Perplexity AI를 직접 사용해 보시길 권장합니다. 여러분도 이 도구를 사용하여 새로운 차원의 생산성을 경험해 보세요!\n \nQ&A\n1. Perplexity AI는 무료로 사용할 수 있나요?\n네, Perplexity AI는 무료로 기본 기능을 제공하며, 유료 Pro 버전을 통해 더 많은 고급 기능을 사용할 수 있습니다. Pro 버전에서는 다양한 AI 모델 선택과 무제한 문서 업로드 분석 기능을 추가로 이용할 수 있습니다.\n2. Copilot 기능은 어떻게 활용하나요?\nCopilot 기능은 사용자의 질문에 대한 추가적인 질문을 통해 보다 정확한 답변을 제공합니다. 이를 통해 보다 맞춤형 검색 결과를 얻을 수 있으며, 특히 모호한 질문에 대해 유용합니다.\n3. Perplexity AI는 어떤 상황에서 가장 유용한가요?\nPerplexity AI는 제품 조사, 학술 자료 분석, SEO 최적화, 소비자 리뷰 분석 등 다양한 상황에서 유용하게 활용할 수 있습니다. 특히 빠르고 정확한 정보 탐색이 필요한 경우에 큰 도움을 줍니다.",
        "guid": "http://muzbox.tistory.com/483497",
        "categories": [
          "AI, 미래기술",
          "AI 도구",
          "ai 활용 사례",
          "copilot 기능",
          "perplexity ai",
          "생산성 향상",
          "실시간 업데이트",
          "정보 탐색",
          "퍼플렉시티",
          "퍼플렉시티 사용법",
          "학술 자료 분석"
        ],
        "isoDate": "2024-11-13T01:52:30.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "샤말란의눈",
        "title": "[MULTI] 지스타 2024, 취재·컨퍼런스 등 관련 기사 종합",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2267",
        "pubDate": "Mon, 18 Nov 2024 00:01:48 +0900",
        "author": "샤말란의눈",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/24/10/25/192c1c605f513b2a1.jpg\">",
        "contentSnippet": "",
        "categories": [
          "특집"
        ],
        "isoDate": "2024-11-17T15:01:48.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "GitHub Copilot의 기능을 보다 편리하게 활용하는 방법. 조작 방법이나 프로그래밍 등의 활용 예",
        "link": "https://jacking75.github.io/tech-ai_20241114/",
        "pubDate": "Thu, 14 Nov 2024 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vTjzldVtjcXWo5Yfnos16w51P5zTYKD8Xr4E6l6ii4MH2QCmcDcoS0sH2Bl3PFzb0EclNLEdrasuKBh/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/tech-ai_20241114/",
        "isoDate": "2024-11-13T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "11월 내년까지 투자가이드 영상",
        "link": "http://serverdown.tistory.com/982",
        "pubDate": "Mon, 18 Nov 2024 17:55:08 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/982#entry982comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=IIy3mvx44og\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=IIy3mvx44og</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=IIy3mvx44og\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/du3a8U/hyXzQyrwb7/kkhQObN32y3YNwoegsY1F1/img.jpg?width=1280&amp;height=720&amp;face=226_72_1098_390,https://scrap.kakaocdn.net/dn/nNMtq/hyXzNobYW0/zwGVvr7rXsmKa2wTTKZD81/img.jpg?width=1280&amp;height=720&amp;face=226_72_1098_390\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"트럼프는 왜 비트코인을 좋아할까 (이효석) | 인포맥스라이브 20241114\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/IIy3mvx44og\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">1. 비트코인 달러 수요 청출로 미국이 밀것이다. 동감</p>\n<p data-ke-size=\"size16\">2. 미국 - 빅배스 해야한다. 취임 초기에 이전 정권에서 쌓아둔 문제 다 털고 갈 수 있다.</p>\n<p data-ke-size=\"size16\">2. 중국 - 싸다 좋다. 털꺼 거의다 턴거 같다.</p>\n<p data-ke-size=\"size16\">주식은 미국 이랑 중국만 보면된다.<br />간단하게 정리 되었군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=IIy3mvx44og\n\n\n\n1. 비트코인 달러 수요 청출로 미국이 밀것이다. 동감\n2. 미국 - 빅배스 해야한다. 취임 초기에 이전 정권에서 쌓아둔 문제 다 털고 갈 수 있다.\n2. 중국 - 싸다 좋다. 털꺼 거의다 턴거 같다.\n주식은 미국 이랑 중국만 보면된다.\n간단하게 정리 되었군요",
        "guid": "http://serverdown.tistory.com/982",
        "categories": [
          "투자"
        ],
        "isoDate": "2024-11-18T08:55:08.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "iOS 16 노안 을 위한 기능 모음 / 확대 축소 / 색 반전 / 뒷면 탭 / 측면 버튼",
        "link": "http://serverdown.tistory.com/981",
        "pubDate": "Mon, 18 Nov 2024 13:18:16 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/981#entry981comment",
        "content": "<p data-ke-size=\"size16\">버전업 할때 마다 메뉴가 조금씩 변하네요 .</p>\n<p data-ke-size=\"size16\">저는 시각문제가 심각한 상태라거의 모든 옵션을 고려했습니다.<br />본인 환경에 맞게 적당히 설정하세요.</p>\n<h2 data-ke-size=\"size26\">볼드체 텍스트 (글씨 두껍게)</h2>\n<p data-ke-size=\"size16\">옛날에 가늘 글씨가 이쁘게 보였는데 이젠 아예 선이 안보입니다.<br />그래서 두껍게 사용합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"480\" data-origin-height=\"343\"><span data-url=\"https://blog.kakaocdn.net/dn/sI4Hg/btsKNT9bBeL/S5bQx5g5VdscNQhwOfCgdk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/sI4Hg/btsKNT9bBeL/S5bQx5g5VdscNQhwOfCgdk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/sI4Hg/btsKNT9bBeL/S5bQx5g5VdscNQhwOfCgdk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FsI4Hg%2FbtsKNT9bBeL%2FS5bQx5g5VdscNQhwOfCgdk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"480\" data-origin-height=\"343\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">메뉴 위치는</span><br /><span style=\"text-align: start;\">설정 -&gt; 손쉬운 사용 -&gt; 디스플레이 및 텍스트 크기</span><br /><span style=\"text-align: start;\">입니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">첫번째로 [볼드체 텍스트] 가 있습니다. 이것을 켭니다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">더 큰 텍스트</h2>\n<p data-ke-size=\"size16\">안드로이드에 있던데 iOS 는 꽁꽁 숨어있군요</p>\n<p data-ke-size=\"size16\">볼드체 바로 밑에 있네요</p>\n<p data-ke-size=\"size16\">메뉴 위치는<br />설정 -&gt; 손쉬운 사용 -&gt; 디스플레이 및 텍스트 크기 -&gt; 더 큰 텍스트<br />입니다.</p>\n<p data-ke-size=\"size16\">눌러서 들어가시면&nbsp;위에는 on /off 버튼이 있고 <br />아래에는 슬라이드로 크기를 조절 할 수 있습니다.</p>\n<p data-ke-size=\"size16\">저는 기본값인 중간 크기로 했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">확대 축소 제어기</h2>\n<p data-ke-size=\"size16\">돋보기 같이 카메라로 사물을 확대하는게 아니고<br />화면을 확대 축소 할 수 있는 기능입니다. <br />글씨가 작아서 안보이면 확대해서 봅니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"480\" data-origin-height=\"423\"><span data-url=\"https://blog.kakaocdn.net/dn/bjaKbk/btsKMK6gUhD/0vPw1FAESeXh5BQACCssrK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bjaKbk/btsKMK6gUhD/0vPw1FAESeXh5BQACCssrK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bjaKbk/btsKMK6gUhD/0vPw1FAESeXh5BQACCssrK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbjaKbk%2FbtsKMK6gUhD%2F0vPw1FAESeXh5BQACCssrK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"480\" data-origin-height=\"423\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">화살표에 보이는 동그란게 확대/축소 제어기 입니다.</p>\n<p data-ke-size=\"size16\">저기에 손을 데면 여러가지를 할 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">메뉴는<br />설정 -&gt; 손쉬운 사용 -&gt; 확대축소<br />여기에 있구요</p>\n<p data-ke-size=\"size16\">확대/축소 영역: 전체화면<br />최대 확대축소 단계: 10.0x</p>\n<p data-ke-size=\"size16\">이걸 켜면 화면에 동그란 제어기가 나옵니다.</p>\n<p data-ke-size=\"size16\">꾹 누르면 확대 되고 손떼면 축소 되구요<br />두번 터치하면 손 떼도 확대 된 상태로 고정 됩니다. 다시 두번 터치하면 원래대로 돌아옵니다.<br />세번 터치하면 여러가지 메뉴가 표시됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">튓면 탭으로 기능 동작 / 후면 터치</h2>\n<p data-ke-size=\"size16\">맛폰 뒷면을 두두려 빠르게 실행 시킬 수 있는 기능을 선택할 수 있습니다.</p>\n<p data-ke-size=\"size16\">메뉴위치는<br />설정 -&gt; 손쉬운 사용 -&gt; 터치<br />제일 아래에 [뒷면 탭]<br />여기에 있구요</p>\n<p data-ke-size=\"size16\">이중 탭: 클래식 반전<br />삼중 탭: 확대 / 축소</p>\n<p data-ke-size=\"size16\">로 설정 중입니다.</p>\n<p data-ke-size=\"size16\">흰바탕에 글씨가 잘 안보여서 색 반전 쓰구요<br />스마트 색 반전은 복잡한 상황에서 제대로 색이 안바뀌더군요<br />클래식 색 반전이 문제 없었습니다.</p>\n<p data-ke-size=\"size16\">확대 / 축소 은 [확대 축소 제어기]가 나왔다 사라졌다 합니다.<br />가끔 쓰다보면 제어기가 사라지는 경우가 있어서 해두었습니다.<br />이걸로도 제어기가 살아나지 않으면 기기를 껏다 켜야합니다.</p>\n<p data-ke-size=\"size16\">물리 버튼 누르는거보다 편리하네요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">측면버튼 세번 눌러 동작</h2>\n<p data-ke-size=\"size16\">측면버튼 (화면 껏다 켰다 하는 버튼) 도 여러가지 기능으로 활용할 수 있습니다.</p>\n<p data-ke-size=\"size16\">메뉴위치는 <br />설정 -&gt; 손쉬운 사용 -&gt; 손쉬운 사용 단축키 (제일 밑에)<br />여기에 있구요</p>\n<p data-ke-size=\"size16\">쓰다보니 버튼이 빨리 고장날까바 후면 터치로 바꿔서 사용중입니다.</p>\n<p data-ke-size=\"size16\">여기서는 여러개 선택 가능합니다.<br />측면 버튼을 누르면 동작시킬 기능들을 골라주면 그것들을 사용할 수 있게 단출 메뉴가 표시된다.</p>\n<p data-ke-size=\"size16\">제가 고른건</p>\n<p data-ke-size=\"size16\">확대/ 축소<br />확대기<br />스마트 반전<br />Assitative Touch</p>\n<p data-ke-size=\"size16\">이렇게구요 하나만 고르면 즉시 동작하고 여러개를 고르면 고른거 리스트가 뜹니다. <br />리스트 중에 터치로 고르시면 됩니다.</p>",
        "contentSnippet": "버전업 할때 마다 메뉴가 조금씩 변하네요 .\n저는 시각문제가 심각한 상태라거의 모든 옵션을 고려했습니다.\n본인 환경에 맞게 적당히 설정하세요.\n볼드체 텍스트 (글씨 두껍게)\n옛날에 가늘 글씨가 이쁘게 보였는데 이젠 아예 선이 안보입니다.\n그래서 두껍게 사용합니다.\n\n\n메뉴 위치는\n설정 -> 손쉬운 사용 -> 디스플레이 및 텍스트 크기\n입니다.\n첫번째로 [볼드체 텍스트] 가 있습니다. 이것을 켭니다.\n \n더 큰 텍스트\n안드로이드에 있던데 iOS 는 꽁꽁 숨어있군요\n볼드체 바로 밑에 있네요\n메뉴 위치는\n설정 -> 손쉬운 사용 -> 디스플레이 및 텍스트 크기 -> 더 큰 텍스트\n입니다.\n눌러서 들어가시면 위에는 on /off 버튼이 있고 \n아래에는 슬라이드로 크기를 조절 할 수 있습니다.\n저는 기본값인 중간 크기로 했습니다.\n \n확대 축소 제어기\n돋보기 같이 카메라로 사물을 확대하는게 아니고\n화면을 확대 축소 할 수 있는 기능입니다. \n글씨가 작아서 안보이면 확대해서 봅니다.\n\n\n화살표에 보이는 동그란게 확대/축소 제어기 입니다.\n저기에 손을 데면 여러가지를 할 수 있습니다.\n \n메뉴는\n설정 -> 손쉬운 사용 -> 확대축소\n여기에 있구요\n확대/축소 영역: 전체화면\n최대 확대축소 단계: 10.0x\n이걸 켜면 화면에 동그란 제어기가 나옵니다.\n꾹 누르면 확대 되고 손떼면 축소 되구요\n두번 터치하면 손 떼도 확대 된 상태로 고정 됩니다. 다시 두번 터치하면 원래대로 돌아옵니다.\n세번 터치하면 여러가지 메뉴가 표시됩니다.\n \n튓면 탭으로 기능 동작 / 후면 터치\n맛폰 뒷면을 두두려 빠르게 실행 시킬 수 있는 기능을 선택할 수 있습니다.\n메뉴위치는\n설정 -> 손쉬운 사용 -> 터치\n제일 아래에 [뒷면 탭]\n여기에 있구요\n이중 탭: 클래식 반전\n삼중 탭: 확대 / 축소\n로 설정 중입니다.\n흰바탕에 글씨가 잘 안보여서 색 반전 쓰구요\n스마트 색 반전은 복잡한 상황에서 제대로 색이 안바뀌더군요\n클래식 색 반전이 문제 없었습니다.\n확대 / 축소 은 [확대 축소 제어기]가 나왔다 사라졌다 합니다.\n가끔 쓰다보면 제어기가 사라지는 경우가 있어서 해두었습니다.\n이걸로도 제어기가 살아나지 않으면 기기를 껏다 켜야합니다.\n물리 버튼 누르는거보다 편리하네요.\n \n측면버튼 세번 눌러 동작\n측면버튼 (화면 껏다 켰다 하는 버튼) 도 여러가지 기능으로 활용할 수 있습니다.\n메뉴위치는 \n설정 -> 손쉬운 사용 -> 손쉬운 사용 단축키 (제일 밑에)\n여기에 있구요\n쓰다보니 버튼이 빨리 고장날까바 후면 터치로 바꿔서 사용중입니다.\n여기서는 여러개 선택 가능합니다.\n측면 버튼을 누르면 동작시킬 기능들을 골라주면 그것들을 사용할 수 있게 단출 메뉴가 표시된다.\n제가 고른건\n확대/ 축소\n확대기\n스마트 반전\nAssitative Touch\n이렇게구요 하나만 고르면 즉시 동작하고 여러개를 고르면 고른거 리스트가 뜹니다. \n리스트 중에 터치로 고르시면 됩니다.",
        "guid": "http://serverdown.tistory.com/981",
        "categories": [
          "프로그래밍/강좌",
          "IOS",
          "노안",
          "애플"
        ],
        "isoDate": "2024-11-18T04:18:16.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "양자컴퓨터 종류 및 회사",
        "link": "http://serverdown.tistory.com/980",
        "pubDate": "Mon, 18 Nov 2024 12:21:07 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/980#entry980comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/Gem0N1JEm9k?t=2064\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/Gem0N1JEm9k?t=2064</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Gem0N1JEm9k\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/fBXZB/hyXzS3ZTxt/9GDrvftj4tyPfjQ9pQ48w0/img.jpg?width=1280&amp;height=720&amp;face=632_158_1088_312,https://scrap.kakaocdn.net/dn/bBRJjJ/hyXzLw2ps5/sxAMXZkiHSyrqN29Ur0Vwk/img.jpg?width=1280&amp;height=720&amp;face=632_158_1088_312\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"그래, 양자컴퓨터 완벽하게 이해했어! (사실 이해 못함) (고려대학교 물리학과 채은미 교수)\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Gem0N1JEm9k\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">34분 부터 나옵니다.</p>\n<h2 data-ke-size=\"size26\">초전도 큐비트</h2>\n<p data-ke-size=\"size16\">낸각하는데 많은 에너지가 필요하다.</p>\n<p data-ke-size=\"size16\">냉각기 크기 때문에 확장이 어렵다.</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">IBM</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">원자이온</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"547\" data-origin-height=\"429\"><span data-url=\"https://blog.kakaocdn.net/dn/CLkYK/btsKLj2mt8O/6TlJnvlv4ngKVUToG7XqJk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/CLkYK/btsKLj2mt8O/6TlJnvlv4ngKVUToG7XqJk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/CLkYK/btsKLj2mt8O/6TlJnvlv4ngKVUToG7XqJk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FCLkYK%2FbtsKLj2mt8O%2F6TlJnvlv4ngKVUToG7XqJk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"547\" data-origin-height=\"429\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">사진에 녹색 점이 큐비트 1개라고함</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">사진은 수백 마이크로미터 크기임</span></p>\n<p data-ke-size=\"size16\">레이저로 부분만 냉각이 가능하다. (작은 냉각기)</p>\n<p data-ke-size=\"size16\">크게 만들기 어렵다.</p>\n<p data-ke-size=\"size16\">IONQ 허니웰</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">중성원자</h2>\n<p data-ke-size=\"size16\">레이저 핀셋 로 원자 하나를 잡는다고함</p>\n<p data-ke-size=\"size16\">늘리기 쉽다. <br />나온지 얼마 안된 기술<br />지금은 에러가 잘남</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">광자</h2>\n<p data-ke-size=\"size16\">상온에서 가능</p>\n<p data-ke-size=\"size16\">날아다니기 때문에 잃어버리기 쉬움</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">IONQ 차트</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"815\" data-origin-height=\"265\"><span data-url=\"https://blog.kakaocdn.net/dn/cygJ7d/btsKL1f1aWr/NXCgvtzKzfOI0TnfLfHqnK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cygJ7d/btsKL1f1aWr/NXCgvtzKzfOI0TnfLfHqnK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cygJ7d/btsKL1f1aWr/NXCgvtzKzfOI0TnfLfHqnK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcygJ7d%2FbtsKL1f1aWr%2FNXCgvtzKzfOI0TnfLfHqnK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"815\" data-origin-height=\"265\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">영상이 10개월전이군요 그때 샀어도</p>\n<p data-ke-size=\"size16\">아깝넹... 날아가버렸군요</p>\n<p data-ke-size=\"size16\">이런거 보면 언제갈지는 몰라도 갈회사는 간다는걸 알 수 있군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://youtu.be/Gem0N1JEm9k?t=2064\n\n\n\n34분 부터 나옵니다.\n초전도 큐비트\n낸각하는데 많은 에너지가 필요하다.\n냉각기 크기 때문에 확장이 어렵다.\nIBM\n \n원자이온\n\n\n사진에 녹색 점이 큐비트 1개라고함\n사진은 수백 마이크로미터 크기임\n레이저로 부분만 냉각이 가능하다. (작은 냉각기)\n크게 만들기 어렵다.\nIONQ 허니웰\n \n중성원자\n레이저 핀셋 로 원자 하나를 잡는다고함\n늘리기 쉽다. \n나온지 얼마 안된 기술\n지금은 에러가 잘남\n \n광자\n상온에서 가능\n날아다니기 때문에 잃어버리기 쉬움\n \nIONQ 차트\n\n\n영상이 10개월전이군요 그때 샀어도\n아깝넹... 날아가버렸군요\n이런거 보면 언제갈지는 몰라도 갈회사는 간다는걸 알 수 있군요",
        "guid": "http://serverdown.tistory.com/980",
        "categories": [
          "투자"
        ],
        "isoDate": "2024-11-18T03:21:07.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "UAM 주목할 기업 아처 Archer Aviation Inc / ACHR",
        "link": "http://serverdown.tistory.com/979",
        "pubDate": "Mon, 18 Nov 2024 10:56:14 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/979#entry979comment",
        "content": "<p data-ke-size=\"size16\">회사가 설명하는 영상: <a href=\"https://www.youtube.com/watch?v=h95jtCArSyA\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=h95jtCArSyA</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=h95jtCArSyA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bFYb9s/hyXzMvVy9q/kHNAlHRchYPdKw930XJN6k/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/ccoIsx/hyXzJMJs9F/8ViScjjQC4xVNq5nZp7mgk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"United Airlines First Air Taxi Revealed: Archer Midnight eVTOL\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/h95jtCArSyA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">중간에 보면 뉴 베터리 이야기가 잠깐 나오네요.<br />석유로 UAM 시장 도전하는 회사들을 좀 혼내주길</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=0nIpcXfOlWs&amp;list=LL\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=0nIpcXfOlWs&amp;list=LL</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=0nIpcXfOlWs\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/lgT2C/hyXzOHgSUL/1dFLDvj693XE8GAzKv1Pw1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bM6JnV/hyXzJTvH69/zPfhQrhBXrkRkkiGk05D0K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"아처항공 3분기 실적에 나타난 UAM 판세의 변화?!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/0nIpcXfOlWs\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"832\" data-origin-height=\"230\"><span data-url=\"https://blog.kakaocdn.net/dn/mb5q5/btsKL4Re7yJ/UxbhkMpBp5mxBEkFpHV8a0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/mb5q5/btsKL4Re7yJ/UxbhkMpBp5mxBEkFpHV8a0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/mb5q5/btsKL4Re7yJ/UxbhkMpBp5mxBEkFpHV8a0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fmb5q5%2FbtsKL4Re7yJ%2FUxbhkMpBp5mxBEkFpHV8a0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"832\" data-origin-height=\"230\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">5년치 차트입니다.</p>\n<p data-ke-size=\"size16\">아직은 투자 가능한 수준은 아니지만 계속 해서 지켜봐야합니다.</p>\n<p data-ke-size=\"size16\">조비 JOBY 와 합께 레이센스 발급등 점점 진행이 되고 있습니다.</p>\n<p data-ke-size=\"size16\">이항 EA 처럼 아무말도 없진 않군요</p>\n<p data-ke-size=\"size16\">마음에 드는 점은 다른애들은 석유 연료를 쓰는 반면 아처는 전기 베터리로 구동한다고 합니다.</p>\n<p data-ke-size=\"size16\">한편에서는 베터리로는 무거워서 못한다고 하는데&nbsp;</p>\n<p data-ke-size=\"size16\">미래 느김이 나려면 이부분을 극복해야합니다.</p>\n<p data-ke-size=\"size16\">석유태워서 날아봐야 기존 핼리콥터랑 별 다를바 없지요</p>\n<p data-ke-size=\"size16\">미래는 반드시 베터리 혁명과 함께 가야합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">투자전략</h2>\n<p data-ke-size=\"size16\">이런 회사는 언제든지 망할 수 있습니다.<br />리비안 RIVN 주가 보시면 살아나는 과정에서도 반토막과 두배가 마구나옵니다.<br />바닥잡는 과정은 진짜 힙듭니다.</p>\n<h3 data-ke-size=\"size23\">1번전략 - 단순 투자</h3>\n<p data-ke-size=\"size16\">전략은 지금 사고 5년정도 안쳐다본다.<br />전 자산의 2~5%는 넘지 않게 투자하세요.<br />못살아나면 회사가 어디론가 인수될 수 있습니다. 그때는 도망칠 타이밍</p>\n<h3 data-ke-size=\"size23\">2번전략 - 이평선 매매</h3>\n<p data-ke-size=\"size16\">주가가 200일 50일 이평선이 모두 위일때만 삽니다. 주가가 200일선 밑으로가면 던집니다.<br />살아날 회사라는 가정하에 이 방법 을 반복하다보면 최저점에서 사게 됩니다.에서 잡을 수 있게 됩니다.<br />망할 회사라면 보통 200일선 밑에서 놓다 맛이가는 각이 나옵니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "회사가 설명하는 영상: https://www.youtube.com/watch?v=h95jtCArSyA\n\n\n\n \n중간에 보면 뉴 베터리 이야기가 잠깐 나오네요.\n석유로 UAM 시장 도전하는 회사들을 좀 혼내주길\n \n영상: https://www.youtube.com/watch?v=0nIpcXfOlWs&list=LL\n\n\n\n \n\n\n5년치 차트입니다.\n아직은 투자 가능한 수준은 아니지만 계속 해서 지켜봐야합니다.\n조비 JOBY 와 합께 레이센스 발급등 점점 진행이 되고 있습니다.\n이항 EA 처럼 아무말도 없진 않군요\n마음에 드는 점은 다른애들은 석유 연료를 쓰는 반면 아처는 전기 베터리로 구동한다고 합니다.\n한편에서는 베터리로는 무거워서 못한다고 하는데 \n미래 느김이 나려면 이부분을 극복해야합니다.\n석유태워서 날아봐야 기존 핼리콥터랑 별 다를바 없지요\n미래는 반드시 베터리 혁명과 함께 가야합니다.\n \n투자전략\n이런 회사는 언제든지 망할 수 있습니다.\n리비안 RIVN 주가 보시면 살아나는 과정에서도 반토막과 두배가 마구나옵니다.\n바닥잡는 과정은 진짜 힙듭니다.\n1번전략 - 단순 투자\n전략은 지금 사고 5년정도 안쳐다본다.\n전 자산의 2~5%는 넘지 않게 투자하세요.\n못살아나면 회사가 어디론가 인수될 수 있습니다. 그때는 도망칠 타이밍\n2번전략 - 이평선 매매\n주가가 200일 50일 이평선이 모두 위일때만 삽니다. 주가가 200일선 밑으로가면 던집니다.\n살아날 회사라는 가정하에 이 방법 을 반복하다보면 최저점에서 사게 됩니다.에서 잡을 수 있게 됩니다.\n망할 회사라면 보통 200일선 밑에서 놓다 맛이가는 각이 나옵니다.",
        "guid": "http://serverdown.tistory.com/979",
        "categories": [
          "ACHR",
          "미국주식",
          "아처",
          "오블완",
          "티스토리챌린지"
        ],
        "isoDate": "2024-11-18T01:56:14.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "Brains Pool 사용법 / 비트코인 공동 채굴 장소 / 앱 알림 가능 / FPPS",
        "link": "http://serverdown.tistory.com/978",
        "pubDate": "Sun, 17 Nov 2024 22:17:57 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/978#entry978comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1200\" data-origin-height=\"630\"><span data-url=\"https://blog.kakaocdn.net/dn/3GTQA/btsKMezdZsy/Ic8fzwivpyrdZXo8SwjP1k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/3GTQA/btsKMezdZsy/Ic8fzwivpyrdZXo8SwjP1k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/3GTQA/btsKMezdZsy/Ic8fzwivpyrdZXo8SwjP1k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F3GTQA%2FbtsKMezdZsy%2FIc8fzwivpyrdZXo8SwjP1k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1200\" data-origin-height=\"630\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">설명</h2>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">FPPS 채굴 방식을 이용합니다.</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">FPPS&nbsp;-&nbsp;Full&nbsp;Pay&nbsp;Per&nbsp;Share</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">실제로 캐내지 못해도 기여한 만큼&nbsp; 보상을 나누는 방식입니다.<br />고른 보상을 받을 수 있는 것이 장점입니다.</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">가입하면 접속 주소와 아이디 암호를 받을 수 있습니다.</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">브레인스 풀은 ios android 으로 알림을 받을 수 있습니다.</p>\n<h2 style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size26\">가입하기</h2>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">가입은 여기<span>&nbsp;</span><a href=\"https://pool.braiins.com/mining/overview\">https://pool.braiins.com/mining/overview</a></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"342\" data-origin-height=\"223\"><span data-url=\"https://blog.kakaocdn.net/dn/b644E9/btsKDd1xSvx/vffthWWPLKCo5UEarEqhKk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b644E9/btsKDd1xSvx/vffthWWPLKCo5UEarEqhKk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b644E9/btsKDd1xSvx/vffthWWPLKCo5UEarEqhKk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb644E9%2FbtsKDd1xSvx%2FvffthWWPLKCo5UEarEqhKk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"342\" data-origin-height=\"223\"/></span></figure>\n</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">가입하시고 workers 로 이동 합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"275\"><span data-url=\"https://blog.kakaocdn.net/dn/BDTt8/btsKDqsN7BK/hhQAvmBhsAdpCFOvmo7KFk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/BDTt8/btsKDqsN7BK/hhQAvmBhsAdpCFOvmo7KFk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/BDTt8/btsKDqsN7BK/hhQAvmBhsAdpCFOvmo7KFk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBDTt8%2FbtsKDqsN7BK%2FhhQAvmBhsAdpCFOvmo7KFk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"512\" data-origin-height=\"275\"/></span></figure>\n</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">제일 하단에 [Connect Workers +] 누르시면 접속 주소를 알려줍니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"786\" data-origin-height=\"333\"><span data-url=\"https://blog.kakaocdn.net/dn/RwxkI/btsKDiBvsTn/6Sm7CmeSoIvCxx1Z79NP21/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/RwxkI/btsKDiBvsTn/6Sm7CmeSoIvCxx1Z79NP21/img.png\"><img src=\"https://blog.kakaocdn.net/dn/RwxkI/btsKDiBvsTn/6Sm7CmeSoIvCxx1Z79NP21/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FRwxkI%2FbtsKDiBvsTn%2F6Sm7CmeSoIvCxx1Z79NP21%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"786\" data-origin-height=\"333\"/></span></figure>\n</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">입력은 아래와 같이 합니다.</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">Stratum URL:<span>&nbsp;</span><span style=\"text-align: start;\">stratum.braiins.com</span><br />Stratum&nbsp;Port:&nbsp;3333<br />Stratum User: 내이름.작업자기기이름<br />Stratum Password: ??????? &lt;- 알려준 암호를 넣어줍니다.</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">Bixaxe Gamma (1.2TH/s) 로 하루에 80 사토시 정도 기대할 수 있다는군요<br />(제가 해보고 다시 업데이트 하겠습니다..)</p>\n<h2 style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size26\">&nbsp;</h2>\n<h2 style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size26\">모바일 앱 연동하기 / 알림 받기</h2>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">앱 내 안내에 오류가 있군요&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"369\" data-origin-height=\"462\"><span data-url=\"https://blog.kakaocdn.net/dn/baDuuI/btsKLktfdkl/CVLS0hJJoQZnwkCYqwU71k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/baDuuI/btsKLktfdkl/CVLS0hJJoQZnwkCYqwU71k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/baDuuI/btsKLktfdkl/CVLS0hJJoQZnwkCYqwU71k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbaDuuI%2FbtsKLktfdkl%2FCVLS0hJJoQZnwkCYqwU71k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"369\" data-origin-height=\"462\"/></span></figure>\n</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">여기로 가시면&nbsp;</p>\n<p style=\"background-color: #000000; color: #000000;\" data-ke-size=\"size16\">안드로이드앱: <a href=\"https://play.google.com/store/apps/details?id=com.slushpool.app\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://play.google.com/store/apps/details?id=com.slushpool.app</a></p>\n<p data-ke-size=\"size16\">iOS 앱: <a href=\"https://apps.apple.com/us/app/braiins-pool/id1210273919\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://apps.apple.com/us/app/braiins-pool/id1210273919</a></p>\n<p data-ke-size=\"size16\">앱 링크 알려주구요</p>\n<p data-ke-size=\"size16\">아래쪽에 모바일 기기를 등록하는 버튼이 있습니다.</p>\n<p data-ke-size=\"size16\">[Add new device] 에 가셔서 모바일 기기 이름 쓰시고 [Connect] 누르시면 QR Code 랑 글씨가 나옵니다.</p>\n<p data-ke-size=\"size16\">모바일엡에서 카메라로 QR Code 찍을 수 있습니다.</p>\n<p data-ke-size=\"size16\">카메라 업는 기기라면 글씨를 직접 넣어야겟습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"434\" data-origin-height=\"532\"><span data-url=\"https://blog.kakaocdn.net/dn/crWzVx/btsKLjnBtez/eq071zuTjdhBn5JJcPQ7w0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/crWzVx/btsKLjnBtez/eq071zuTjdhBn5JJcPQ7w0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/crWzVx/btsKLjnBtez/eq071zuTjdhBn5JJcPQ7w0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcrWzVx%2FbtsKLjnBtez%2Feq071zuTjdhBn5JJcPQ7w0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"434\" data-origin-height=\"532\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">요러케 캐고있는 속도랑 현재 쌓인게 나옵니다.</p>\n<p data-ke-size=\"size16\">언제 알람이 오는지는 잘 모르겠네요</p>",
        "contentSnippet": "설명\nFPPS 채굴 방식을 이용합니다.\nFPPS - Full Pay Per Share\n실제로 캐내지 못해도 기여한 만큼  보상을 나누는 방식입니다.\n고른 보상을 받을 수 있는 것이 장점입니다.\n가입하면 접속 주소와 아이디 암호를 받을 수 있습니다.\n브레인스 풀은 ios android 으로 알림을 받을 수 있습니다.\n가입하기\n가입은 여기 https://pool.braiins.com/mining/overview\n\n\n가입하시고 workers 로 이동 합니다.\n\n\n제일 하단에 [Connect Workers +] 누르시면 접속 주소를 알려줍니다.\n\n\n \n입력은 아래와 같이 합니다.\nStratum URL: stratum.braiins.com\nStratum Port: 3333\nStratum User: 내이름.작업자기기이름\nStratum Password: ??????? <- 알려준 암호를 넣어줍니다.\nBixaxe Gamma (1.2TH/s) 로 하루에 80 사토시 정도 기대할 수 있다는군요\n(제가 해보고 다시 업데이트 하겠습니다..)\n \n모바일 앱 연동하기 / 알림 받기\n앱 내 안내에 오류가 있군요 \n\n\n여기로 가시면 \n안드로이드앱: https://play.google.com/store/apps/details?id=com.slushpool.app\niOS 앱: https://apps.apple.com/us/app/braiins-pool/id1210273919\n앱 링크 알려주구요\n아래쪽에 모바일 기기를 등록하는 버튼이 있습니다.\n[Add new device] 에 가셔서 모바일 기기 이름 쓰시고 [Connect] 누르시면 QR Code 랑 글씨가 나옵니다.\n모바일엡에서 카메라로 QR Code 찍을 수 있습니다.\n카메라 업는 기기라면 글씨를 직접 넣어야겟습니다.\n\n\n요러케 캐고있는 속도랑 현재 쌓인게 나옵니다.\n언제 알람이 오는지는 잘 모르겠네요",
        "guid": "http://serverdown.tistory.com/978",
        "categories": [
          "코인",
          "비느코인",
          "채굴"
        ],
        "isoDate": "2024-11-17T13:17:57.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "중국의 일상 ... 은 아니고 마우스 파이터들의 싸움",
        "link": "http://serverdown.tistory.com/977",
        "pubDate": "Sun, 17 Nov 2024 20:02:12 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/977#entry977comment",
        "content": "<p data-ke-size=\"size16\">충격 적이며 여성 비하 의도는 없습니다.</p>\n<p data-ke-size=\"size16\">단순한 입 파이터의 영상입니다.</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=fgduPoLAG7Y&amp;list=WL\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=fgduPoLAG7Y&amp;list=WL</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=fgduPoLAG7Y\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/b1anEu/hyXzP0hLyq/kgEUzKA0kvcPMc4QffMBd1/img.jpg?width=1280&amp;height=720&amp;face=158_78_242_170,https://scrap.kakaocdn.net/dn/nckjj/hyXzPeVFpd/eEXGNeAIlN6LnqykS19Vb0/img.jpg?width=1280&amp;height=720&amp;face=158_78_242_170\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"중국의 미친 일상들... 어떻게 자랐으면 이런 발상을 할까?\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/fgduPoLAG7Y\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">충격 조심</p>\n<p data-ke-size=\"size16\">분노 조심</p>",
        "contentSnippet": "충격 적이며 여성 비하 의도는 없습니다.\n단순한 입 파이터의 영상입니다.\n영상: https://www.youtube.com/watch?v=fgduPoLAG7Y&list=WL\n\n\n\n충격 조심\n분노 조심",
        "guid": "http://serverdown.tistory.com/977",
        "categories": [
          "유튜브",
          "오블완",
          "일상",
          "중국",
          "티스토리챌린지"
        ],
        "isoDate": "2024-11-17T11:02:12.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "사면가 선생님의 리플 의견 / 2024-11-16 / XRP",
        "link": "http://serverdown.tistory.com/976",
        "pubDate": "Sat, 16 Nov 2024 19:43:34 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/976#entry976comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=QbqOMe86AEU\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=QbqOMe86AEU</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=QbqOMe86AEU\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/JRoAJ/hyXzTalWEj/uL7uUOruTBWFIJg90hk0G1/img.jpg?width=1280&amp;height=720&amp;face=272_140_412_292,https://scrap.kakaocdn.net/dn/LDdeu/hyXzPZ4NY6/L4bK7eAMt0T9Eczz8p0yw1/img.jpg?width=1280&amp;height=720&amp;face=272_140_412_292\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"리플.. 20배 가는데 걸리는 시간\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/QbqOMe86AEU\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">5분에 나옵니다.&nbsp;</p>\n<p data-ke-size=\"size16\">전설의 삼각수렴입니다.</p>\n<p data-ke-size=\"size16\">700 원의 20배 14,000 원 제시하셨습니다.</p>\n<p data-ke-size=\"size16\">타이밍을 봐선 트럼프 취임 이후니까 3월말 정도가 아닐까 생각합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">더중요한건 이분이 한달전에 베이비도지코인 천배간다고 하셨습니다.</p>\n<p data-ke-size=\"size16\">놓치지마세요 다시 제자리로 왔어요 ㅎ</p>\n<p data-ke-size=\"size16\">옛날 제글: <a href=\"https://serverdown.tistory.com/858\">베이비도지코인을 추천합니다. / BABYDOGE</a></p>\n<figure id=\"og_1731753776972\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"베이비도지코인을 추천합니다. / BABYDOGE\" data-og-description=\"사면가 채널은 리플과 베이비도지코인을 꾸준히 추천하였습니다.영상: https://www.youtube.com/watch?v=cVVJHhb98L0베이비도지코인의 미래를 빨리 캐치하시고 꾸준히 밀고 개신 사면가 라는 채널입니다.장\" data-og-host=\"serverdown.tistory.com\" data-og-source-url=\"https://serverdown.tistory.com/858\" data-og-url=\"https://serverdown.tistory.com/858\" data-og-image=\"https://scrap.kakaocdn.net/dn/boLmap/hyXwlTUpYj/GGjYC2ziFOUCmrhKTx3rGK/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/e7tul/hyXwpvd413/Ic3uBH85qTwLTGyBQhIvl0/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/tWa5q/hyXzLXF4NJ/hT8w6TgXPGtl73tJEJptK0/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250\"><a href=\"https://serverdown.tistory.com/858\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://serverdown.tistory.com/858\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/boLmap/hyXwlTUpYj/GGjYC2ziFOUCmrhKTx3rGK/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/e7tul/hyXwpvd413/Ic3uBH85qTwLTGyBQhIvl0/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250,https://scrap.kakaocdn.net/dn/tWa5q/hyXzLXF4NJ/hT8w6TgXPGtl73tJEJptK0/img.jpg?width=250&amp;height=250&amp;face=0_0_250_250');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">베이비도지코인을 추천합니다. / BABYDOGE</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">사면가 채널은 리플과 베이비도지코인을 꾸준히 추천하였습니다.영상: https://www.youtube.com/watch?v=cVVJHhb98L0베이비도지코인의 미래를 빨리 캐치하시고 꾸준히 밀고 개신 사면가 라는 채널입니다.장</p>\n<p class=\"og-host\" data-ke-size=\"size16\">serverdown.tistory.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=QbqOMe86AEU\n\n\n\n5분에 나옵니다. \n전설의 삼각수렴입니다.\n700 원의 20배 14,000 원 제시하셨습니다.\n타이밍을 봐선 트럼프 취임 이후니까 3월말 정도가 아닐까 생각합니다.\n \n더중요한건 이분이 한달전에 베이비도지코인 천배간다고 하셨습니다.\n놓치지마세요 다시 제자리로 왔어요 ㅎ\n옛날 제글: 베이비도지코인을 추천합니다. / BABYDOGE\n\n \n베이비도지코인을 추천합니다. / BABYDOGE\n사면가 채널은 리플과 베이비도지코인을 꾸준히 추천하였습니다.영상: https://www.youtube.com/watch?v=cVVJHhb98L0베이비도지코인의 미래를 빨리 캐치하시고 꾸준히 밀고 개신 사면가 라는 채널입니다.장\nserverdown.tistory.com",
        "guid": "http://serverdown.tistory.com/976",
        "categories": [
          "코인",
          "리플",
          "베이비도지",
          "코인"
        ],
        "isoDate": "2024-11-16T10:43:34.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "PENTON TSX 블루투스 헤드셋 공장 초기화 방법 / 좌우 페어링 문제 해결법",
        "link": "http://serverdown.tistory.com/975",
        "pubDate": "Sat, 16 Nov 2024 15:52:12 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/975#entry975comment",
        "content": "<p data-ke-size=\"size16\">설명서: <a href=\"https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual</a></p>\n<figure id=\"og_1731738703610\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"PENTON TSXDIAPOT 블루투스 헤드셋 사용 설명서\" data-og-description=\"이 사용 설명서와 함께 TSXDIAPOT Bluetooth 헤드셋을 사용하는 방법을 알아보세요. 터치 컨트롤로 이어버드를 페어링, 재설정 및 제어하는 ​​방법을 알아보세요. 충전, 전원 켜기/끄기 및 문제 해\" data-og-host=\"manuals.plus\" data-og-source-url=\"https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\" data-og-url=\"https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\" data-og-image=\"https://scrap.kakaocdn.net/dn/sPGAm/hyXwmkYDv9/8eriTKWyZDxhE8ayfXsKo0/img.jpg?width=1591&amp;height=901&amp;face=0_0_1591_901,https://scrap.kakaocdn.net/dn/bqnqXN/hyXwtdjZzG/rKCZWDnHZrKWyHJyeJ8Ao1/img.jpg?width=260&amp;height=300&amp;face=0_0_260_300,https://scrap.kakaocdn.net/dn/bfNXmP/hyXwjV3lEf/zt5kX3ou9Dsg7BznLyEplK/img.jpg?width=300&amp;height=240&amp;face=0_0_300_240\"><a href=\"https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/sPGAm/hyXwmkYDv9/8eriTKWyZDxhE8ayfXsKo0/img.jpg?width=1591&amp;height=901&amp;face=0_0_1591_901,https://scrap.kakaocdn.net/dn/bqnqXN/hyXwtdjZzG/rKCZWDnHZrKWyHJyeJ8Ao1/img.jpg?width=260&amp;height=300&amp;face=0_0_260_300,https://scrap.kakaocdn.net/dn/bfNXmP/hyXwjV3lEf/zt5kX3ou9Dsg7BznLyEplK/img.jpg?width=300&amp;height=240&amp;face=0_0_300_240');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">PENTON TSXDIAPOT 블루투스 헤드셋 사용 설명서</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">이 사용 설명서와 함께 TSXDIAPOT Bluetooth 헤드셋을 사용하는 방법을 알아보세요. 터치 컨트롤로 이어버드를 페어링, 재설정 및 제어하는 ​​방법을 알아보세요. 충전, 전원 켜기/끄기 및 문제 해</p>\n<p class=\"og-host\" data-ke-size=\"size16\">manuals.plus</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">리뷰 영상: <a href=\"https://www.youtube.com/watch?v=vqYjHXQU_9E\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=vqYjHXQU_9E</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=vqYjHXQU_9E\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cBjrgK/hyXzSCsTow/0MNFiNhh9DvVba04KFaXfk/img.jpg?width=1280&amp;height=720&amp;face=612_198_810_414,https://scrap.kakaocdn.net/dn/cw7xeB/hyXzWZa4BN/KFxrCGprTZUbLyrGxJbzUk/img.jpg?width=1280&amp;height=720&amp;face=612_198_810_414\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"가성비 무선이어폰 추천!! 펜톤 TSX 후기가 좋길래 구매해버렸습니다. penton TSX Review\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/vqYjHXQU_9E\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">이쁜 누나 놔어서 영상 가져왔구요.<br />내용은 제대로 안봤습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">일단 이제품 방수 잘된다소 삿습니다.<br />욕조에 들어갈때 쓰려구요&nbsp;</p>\n<p data-ke-size=\"size16\">에어팟 쓰다 물에 빠져 날려 먹어서 방수에 신경썻습니다.</p>\n<p data-ke-size=\"size16\">음질은 에어팟 떨어집니다.</p>\n<p data-ke-size=\"size16\">보통의 블루트스 해드셋이랑 별차이 없습니다.<br />음질 칭찬하는 사람 혼나야 됩니다. <br />음질 좋다고하면 다 과장 광고 입니다.</p>\n<p data-ke-size=\"size16\">방수는 잘되지만 물에 넣진 마세요 부식으로 인해 충전이 잘안된다고 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">조작법</p>\n<p data-ke-size=\"size16\">몇가지를 익히셔야합니다.</p>\n<p data-ke-size=\"size16\">꺼내면 바로 켜집니다.</p>\n<p data-ke-size=\"size16\">5초 정도 누르면 꺼집니다.<br />다시 5초 정도 누르면 켜집니다.</p>\n<p data-ke-size=\"size16\">공장 초기화 하려면 일단 5초동안 눌러 끄구요<br />다시 10초를 누르고 있어야합니다. <br />누르는동안 기기가 켜지는데 손때면 안되구요 계속 누르고 게세요<br />그러면 뿌부부 하면서 둔탁한 소리가 나면서 꺼집니다. 이게 공장 초기화 입니다.<br />양쪽다 따로 해주시구요</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<h2 data-ke-size=\"size26\">문제와 문제해결</h2>\n<p data-ke-size=\"size16\">이 기기는 양쪽이 각각 동작하기 때문에 쓰다보면 한쪽만 페어링 되고 나머지 하나는 연결이 안되는 문제가 생깁니다.</p>\n<p data-ke-size=\"size16\">이러면 다시 연결하면 연결되던게 끊기고 연결 안되던게 열결되는 식으로 좌우가 각자 놀게되니 공장초기화하고 다시 연결해야합니다. 연결할때는 둘다 손에 들다 쉬에 꽂은채로 하시구요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">단점</h2>\n<p data-ke-size=\"size16\">1. 노이즈 캔슬링 기능이 있긴한데 <br />없는게 나을 정도로 성능은 쓰레기 이며 조작에 방해가 됩니다. 잘못 누르면 갑자기 켜지는데 다시 끄기가 어렵습니다.</p>\n<p data-ke-size=\"size16\">2. 제대로 케이스에 안넣으면 캐진채로 들어가 있습니다.<br />이때에는 충전도 안되고 혼자 켜져있는 겁니다. 스맛폰도 블루투스 켜진줄 알고 소리를 내고 있습니다.<br />제대로 넣어야하는데 움직이다보면 엉망진창입니다.</p>\n<p data-ke-size=\"size16\">3. 음질은 별로 입니다. 기대하지마시구요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">장점</h2>\n<p data-ke-size=\"size16\">방수입니다.<br />그렇다고 꽂은채로 머리감거나 잠수 하진 마시구요.<br />잠수 해봤는데 그뒤로 충전이 잘안되는 현상이 생겼습니다.<br />케이스에 넣어서 빨간불 들어오는지 확인될때까지 잘 움직여서 놓아주는 불편함이 생겼습니다.</p>\n<p data-ke-size=\"size16\">욕조에 들어갈때 쓸 수 있는 아주 특수한 제품이라고 보시면 되겠습니다.명이 깎인다고 판단됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\">음질 좋다는 유튜버 진짜 신고 먹이고 싶네요</h3>",
        "contentSnippet": "설명서: https://manuals.plus/ko/penton/tsxdiapot-bluetooth-headset-manual\n\n \nPENTON TSXDIAPOT 블루투스 헤드셋 사용 설명서\n이 사용 설명서와 함께 TSXDIAPOT Bluetooth 헤드셋을 사용하는 방법을 알아보세요. 터치 컨트롤로 이어버드를 페어링, 재설정 및 제어하는 ​​방법을 알아보세요. 충전, 전원 켜기/끄기 및 문제 해\nmanuals.plus\n\n \n리뷰 영상: https://www.youtube.com/watch?v=vqYjHXQU_9E\n\n\n\n이쁜 누나 놔어서 영상 가져왔구요.\n내용은 제대로 안봤습니다.\n \n일단 이제품 방수 잘된다소 삿습니다.\n욕조에 들어갈때 쓰려구요 \n에어팟 쓰다 물에 빠져 날려 먹어서 방수에 신경썻습니다.\n음질은 에어팟 떨어집니다.\n보통의 블루트스 해드셋이랑 별차이 없습니다.\n음질 칭찬하는 사람 혼나야 됩니다. \n음질 좋다고하면 다 과장 광고 입니다.\n방수는 잘되지만 물에 넣진 마세요 부식으로 인해 충전이 잘안된다고 합니다.\n \n \n조작법\n몇가지를 익히셔야합니다.\n꺼내면 바로 켜집니다.\n5초 정도 누르면 꺼집니다.\n다시 5초 정도 누르면 켜집니다.\n공장 초기화 하려면 일단 5초동안 눌러 끄구요\n다시 10초를 누르고 있어야합니다. \n누르는동안 기기가 켜지는데 손때면 안되구요 계속 누르고 게세요\n그러면 뿌부부 하면서 둔탁한 소리가 나면서 꺼집니다. 이게 공장 초기화 입니다.\n양쪽다 따로 해주시구요\n \n문제와 문제해결\n이 기기는 양쪽이 각각 동작하기 때문에 쓰다보면 한쪽만 페어링 되고 나머지 하나는 연결이 안되는 문제가 생깁니다.\n이러면 다시 연결하면 연결되던게 끊기고 연결 안되던게 열결되는 식으로 좌우가 각자 놀게되니 공장초기화하고 다시 연결해야합니다. 연결할때는 둘다 손에 들다 쉬에 꽂은채로 하시구요.\n \n단점\n1. 노이즈 캔슬링 기능이 있긴한데 \n없는게 나을 정도로 성능은 쓰레기 이며 조작에 방해가 됩니다. 잘못 누르면 갑자기 켜지는데 다시 끄기가 어렵습니다.\n2. 제대로 케이스에 안넣으면 캐진채로 들어가 있습니다.\n이때에는 충전도 안되고 혼자 켜져있는 겁니다. 스맛폰도 블루투스 켜진줄 알고 소리를 내고 있습니다.\n제대로 넣어야하는데 움직이다보면 엉망진창입니다.\n3. 음질은 별로 입니다. 기대하지마시구요\n \n장점\n방수입니다.\n그렇다고 꽂은채로 머리감거나 잠수 하진 마시구요.\n잠수 해봤는데 그뒤로 충전이 잘안되는 현상이 생겼습니다.\n케이스에 넣어서 빨간불 들어오는지 확인될때까지 잘 움직여서 놓아주는 불편함이 생겼습니다.\n욕조에 들어갈때 쓸 수 있는 아주 특수한 제품이라고 보시면 되겠습니다.명이 깎인다고 판단됩니다.\n \n \n음질 좋다는 유튜버 진짜 신고 먹이고 싶네요",
        "guid": "http://serverdown.tistory.com/975",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2024-11-16T06:52:12.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "테슬라 모델 Y 비상탈출 방법 / 차주 말고 탈 사람도 방법은 좀 익혀두세요 쉽지 않습니다.",
        "link": "http://serverdown.tistory.com/974",
        "pubDate": "Sat, 16 Nov 2024 15:28:49 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/974#entry974comment",
        "content": "<p data-ke-size=\"size16\">캐나다 사고 뉴스: <a href=\"https://www.youtube.com/watch?v=q2KT5wCbpGU&amp;t=5s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=q2KT5wCbpGU&amp;t=5s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=q2KT5wCbpGU\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/3VQRS/hyXzTg3QmK/9xbtgUqWHmudpuQLVuHooK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/4mLM5/hyXws6xEMN/kBZK5aJONg8xT6xLRk5Lx0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"&quot;차문만 열렸어도&quot; 불타는 테슬라 속 4명 사망｜지금 이 뉴스\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/q2KT5wCbpGU\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">한국 사고 뉴스: <a href=\"https://www.youtube.com/watch?v=LGJULkrDqmo\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=LGJULkrDqmo</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=LGJULkrDqmo\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/QlGWc/hyXzNnBTJI/lZhujdaVEbCSjTA0kFVxU1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bGsqe6/hyXzKRYulo/MNeDPSHCUZUWToGkZpTh00/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"불탄 테슬라 뒷좌석서 숨진 채 발견된 운전자&hellip;\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/LGJULkrDqmo\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">지난 10월 한국과 캐나다에서 탈출 실패로 사망하는 사고 가 있었습니다.</span></p>\n<p data-ke-size=\"size16\">탈출 방법을 익히시기 바라며 차주가 아니라도 타는 사람도 방법을 익혀야 할 것 같습니다.</p>\n<p data-ke-size=\"size16\">방법이 너무 어렵습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/fsyvgwRLaL4?si=wSaVaglCq2gmakH-\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/fsyvgwRLaL4?si=wSaVaglCq2gmakH-</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=fsyvgwRLaL4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/b9qGKn/hyXzRcvqxp/cM5Lesi6QCMIMIYXNr4JNK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/cuUjCL/hyXwuQNgTf/DgLf6OimqlPfqAvEPfJkl1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"테슬라 \" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/fsyvgwRLaL4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">운전석은 좀 쉽게 되어있는데 전면 충격으로 파손될 경우 물리적으로 찌그러져서 열수 없을 수도 있습니다.</p>\n<p data-ke-size=\"size16\">이거는 다른 차들도 마찮가지 인데 전기차는 화재의 위험이 있어 빨리 탈출해야합니다.</p>\n<p data-ke-size=\"size16\">뒷자석으로가면 난감한 상황이 찾아옵니다. 비상 탈출 손잡이가 바닥에 잇습니다.</p>\n<p data-ke-size=\"size16\">베터리 화자라면 바닥이 뜨거워질껀데 바닥에 있군요&nbsp;<br />이런게 설계 실수죠</p>\n<p data-ke-size=\"size16\">망치로 차문을 부수는 방법도 있긴한데 실제로 해볼 사람은 없을꺼 같고</p>\n<p data-ke-size=\"size16\">차문 깨는 요령을 익혀야합니다. 창문 중앙은 때려봐야 못깹니다.</p>\n<p data-ke-size=\"size16\">연기 올라고 하면 안보이거나 호흡이 떨어져서 힘 없어서 못열게 됩니다.</p>\n<p data-ke-size=\"size16\">거의 최후의 수단이라고 보시면 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">유리창 깨는 방법 : <a href=\"https://www.youtube.com/watch?v=1zLr4uw4mrQ\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=1zLr4uw4mrQ</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=1zLr4uw4mrQ\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/c33DzF/hyXwsZJrQt/GXVwDGMO4DHT7dNksBXPu1/img.jpg?width=1280&amp;height=720&amp;face=1062_180_1194_324,https://scrap.kakaocdn.net/dn/b6fI6z/hyXwsyG5IZ/1hGWWo4ZlP7wvLlBfdac50/img.jpg?width=1280&amp;height=720&amp;face=1062_180_1194_324\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"차 안에 갇혔을 때 탈출하는 법, 1초만에 안전벨트 절단 후 자동차 유리 깨기 | 레스큐미 #션킴모\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/1zLr4uw4mrQ\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">전용 공구가 필요합니다.</p>\n<p data-ke-size=\"size16\">쿠팡 링크: <a href=\"https://www.coupang.com/vp/products/7475758137?itemId=14121362527&amp;vendorItemId=82389099167&amp;pickType=COU_PICK&amp;q=%EC%B0%A8+%EC%9C%A0%EB%A6%AC%EC%B0%BD+%EB%A7%9D%EC%B9%98&amp;itemsCount=36&amp;searchId=53541f3a884e49348f89f1160bcd9b62&amp;rank=1&amp;searchRank=1\">아이엠듀 자동차 비상 탈출용 망치 벨트 절단기 아이로켓, 레드, 1개 - 비상/탈출용품 | 쿠팡</a></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"318\" data-origin-height=\"553\"><span data-url=\"https://blog.kakaocdn.net/dn/EtZH3/btsKLskbqhC/4GIGKL9LNlYwlq8MU6KGH1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/EtZH3/btsKLskbqhC/4GIGKL9LNlYwlq8MU6KGH1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/EtZH3/btsKLskbqhC/4GIGKL9LNlYwlq8MU6KGH1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FEtZH3%2FbtsKLskbqhC%2F4GIGKL9LNlYwlq8MU6KGH1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"318\" data-origin-height=\"553\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">벨트도 연열려서 잘라야할 수도 있습니다.</p>\n<p data-ke-size=\"size16\">사장님 잘 파시구</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">생존이 쉽지 않은 시기입니다.</p>",
        "contentSnippet": "캐나다 사고 뉴스: https://www.youtube.com/watch?v=q2KT5wCbpGU&t=5s\n\n\n\n한국 사고 뉴스: https://www.youtube.com/watch?v=LGJULkrDqmo\n\n\n\n \n지난 10월 한국과 캐나다에서 탈출 실패로 사망하는 사고 가 있었습니다.\n탈출 방법을 익히시기 바라며 차주가 아니라도 타는 사람도 방법을 익혀야 할 것 같습니다.\n방법이 너무 어렵습니다.\n \n영상: https://youtu.be/fsyvgwRLaL4?si=wSaVaglCq2gmakH-\n\n\n\n \n \n운전석은 좀 쉽게 되어있는데 전면 충격으로 파손될 경우 물리적으로 찌그러져서 열수 없을 수도 있습니다.\n이거는 다른 차들도 마찮가지 인데 전기차는 화재의 위험이 있어 빨리 탈출해야합니다.\n뒷자석으로가면 난감한 상황이 찾아옵니다. 비상 탈출 손잡이가 바닥에 잇습니다.\n베터리 화자라면 바닥이 뜨거워질껀데 바닥에 있군요 \n이런게 설계 실수죠\n망치로 차문을 부수는 방법도 있긴한데 실제로 해볼 사람은 없을꺼 같고\n차문 깨는 요령을 익혀야합니다. 창문 중앙은 때려봐야 못깹니다.\n연기 올라고 하면 안보이거나 호흡이 떨어져서 힘 없어서 못열게 됩니다.\n거의 최후의 수단이라고 보시면 됩니다.\n \n유리창 깨는 방법 : https://www.youtube.com/watch?v=1zLr4uw4mrQ\n\n\n\n전용 공구가 필요합니다.\n쿠팡 링크: 아이엠듀 자동차 비상 탈출용 망치 벨트 절단기 아이로켓, 레드, 1개 - 비상/탈출용품 | 쿠팡\n\n\n벨트도 연열려서 잘라야할 수도 있습니다.\n사장님 잘 파시구\n \n생존이 쉽지 않은 시기입니다.",
        "guid": "http://serverdown.tistory.com/974",
        "categories": [
          "유튜브",
          "비상탈출",
          "오블완",
          "자동차",
          "테슬라",
          "티스토리챌린지"
        ],
        "isoDate": "2024-11-16T06:28:49.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "2024-11-15 이번주 우공이산 / 2차전지 싸다",
        "link": "http://serverdown.tistory.com/973",
        "pubDate": "Fri, 15 Nov 2024 23:18:49 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/973#entry973comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=bflqfVFIcq8\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=bflqfVFIcq8</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=bflqfVFIcq8\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/b0X8CG/hyXzI0QOCc/ZdfKb0jHP16YKQKsV63ltk/img.jpg?width=1280&amp;height=720&amp;face=894_130_1074_326,https://scrap.kakaocdn.net/dn/w1ipw/hyXzMIVaDm/Yy1kCNuYVWFTfXAxcrsOd1/img.jpg?width=1280&amp;height=720&amp;face=894_130_1074_326\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"[오마하의 현인 워렌 버핏의 가르침] 11월 15일 우공이산TV LIVE \" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/bflqfVFIcq8\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">앞 부분은 정치 이야기구요</p>\n<p data-ke-size=\"size16\">힌극 주식 뿐만아니라 산업이 가려면 여러가지 조치가 필요하며 윤석열 정부는 큰그림을 따라 가고 있다.</p>\n<p data-ke-size=\"size16\">민주당 방식으론 국가가 위대해질 수 없다.</p>\n<p data-ke-size=\"size16\">래퍼 곡선 이야기와 세율을 낮추는게 세입이 늘어난다는 이야기 부분 잘들었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">중간에 워렌버핏 이야기</p>\n<p data-ke-size=\"size16\">군중과 반대로 가는 방법은 쉽지 않다. 하지만 본인이 공부하고 난 결과가 반대로 가는 방향이라면 실천하라.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">후반 3시간 10분 정도 부터 2차전지 썰인데</p>\n<p data-ke-size=\"size16\">대박입니다. 유료 정보도 막나오구요<span style=\"background-color: #000000; color: #000000; text-align: left;\"><span></span></span></p>\n<p data-ke-size=\"size16\">기아차 EV3 잘팔린다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1174\" data-origin-height=\"362\"><span data-url=\"https://blog.kakaocdn.net/dn/d8tfUD/btsKMoOD7on/LHrBoxcvtFDeK52DMIjVZK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/d8tfUD/btsKMoOD7on/LHrBoxcvtFDeK52DMIjVZK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/d8tfUD/btsKMoOD7on/LHrBoxcvtFDeK52DMIjVZK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd8tfUD%2FbtsKMoOD7on%2FLHrBoxcvtFDeK52DMIjVZK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1174\" data-origin-height=\"362\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">포스코 리튬 버내고 있다.</p>\n<p data-ke-size=\"size16\">트럼프는 IRA 막을 순 없고 표결에 맡길 수는 있다. <br />그것도 내년에 가능하다.</p>\n<p data-ke-size=\"size16\">목적은 보조금을 줄여 법인세 감면을 하려는 의도이다.</p>\n<p data-ke-size=\"size16\">통과 안되겠지만 설사 통과 된다면&nbsp;<br />내년에 보조금을 받기위해 수요가 몰린다.<br />이에 따라 자동차회사들은 빨리 전기차를 팔아야한다.</p>\n<p data-ke-size=\"size16\">더 뒤에는 여러가지 차트 리튬가격 등이 있고&nbsp;</p>\n<p data-ke-size=\"size16\">가장 흥미로운건 너무 오래 눌렸다는 것 월봉이 6개월 연속 하락이면 반드시 반등이 일어난다.<br />(그런데 이러면 한달짜리 반등아닌가...)</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">제 생각</h2>\n<p data-ke-size=\"size16\">주가가 나락 가는건 언제나 있을 수 있습니다.<br />잘 견뎌내야합니다.</p>\n<p data-ke-size=\"size16\">상승의 트리거는 금투세 폐지가 될 것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=bflqfVFIcq8\n\n\n\n앞 부분은 정치 이야기구요\n힌극 주식 뿐만아니라 산업이 가려면 여러가지 조치가 필요하며 윤석열 정부는 큰그림을 따라 가고 있다.\n민주당 방식으론 국가가 위대해질 수 없다.\n래퍼 곡선 이야기와 세율을 낮추는게 세입이 늘어난다는 이야기 부분 잘들었습니다.\n \n중간에 워렌버핏 이야기\n군중과 반대로 가는 방법은 쉽지 않다. 하지만 본인이 공부하고 난 결과가 반대로 가는 방향이라면 실천하라.\n \n후반 3시간 10분 정도 부터 2차전지 썰인데\n대박입니다. 유료 정보도 막나오구요\n기아차 EV3 잘팔린다.\n\n\n포스코 리튬 버내고 있다.\n트럼프는 IRA 막을 순 없고 표결에 맡길 수는 있다. \n그것도 내년에 가능하다.\n목적은 보조금을 줄여 법인세 감면을 하려는 의도이다.\n통과 안되겠지만 설사 통과 된다면 \n내년에 보조금을 받기위해 수요가 몰린다.\n이에 따라 자동차회사들은 빨리 전기차를 팔아야한다.\n더 뒤에는 여러가지 차트 리튬가격 등이 있고 \n가장 흥미로운건 너무 오래 눌렸다는 것 월봉이 6개월 연속 하락이면 반드시 반등이 일어난다.\n(그런데 이러면 한달짜리 반등아닌가...)\n \n제 생각\n주가가 나락 가는건 언제나 있을 수 있습니다.\n잘 견뎌내야합니다.\n상승의 트리거는 금투세 폐지가 될 것 같습니다.",
        "guid": "http://serverdown.tistory.com/973",
        "categories": [
          "투자",
          "2차전지",
          "우공이산"
        ],
        "isoDate": "2024-11-15T14:18:49.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": [
      {
        "creator": "ZeroCho",
        "title": "여러 커밋 합치기 - git squash",
        "link": "https://www.zerocho.com/category/Git/post/6735635ff3923a320c714a92",
        "pubDate": "Thu, 14 Nov 2024 02:41:35 GMT",
        "dc:creator": "ZeroCho",
        "content": "정신없이 깃 커밋을 하다보면 하나의 기능이 너무 여러 개의 커밋으로 쪼개져 있는 상황이 발생합니다. 다음과 같이 README.md를 수정하는 6개의 커밋이 있다고 칩시다.\nUpdate README.mdUpdate README.md Update README.md Update README.md Update README.md Create README.md\n커밋 기록에 이렇게 나와있으면 지저분하기 때문에 커밋을 하나로 합치면 좋을 것 같습니다.\n마지막으로부터 6개의 커밋을 합칠 것이므로 git reset --soft HEAD~개수 명령어를 사용합니다. 그러면 커밋들이 합쳐지는데 최종적으로 git commit으로 커밋하면 됩니다.\ngit reset --soft HEAD~6git commit -m \"커밋메시지\"\ngit rebase를 사용하는 방법도 있습니다. 저희가 마지막 6개 커밋을 합치길 원하므로 다음과 같이 입력합니다.\ngit rebase -i HEAD~6\n그러면 vim 에디터로 연결되는데 합칠 커밋들 앞에 붙은 pick을 두 번째 것부터 전부 squash로 바꾸면 됩니다. 예를 들어 다음과 같이 6개 의 커밋이 있다면\npick ccfbab3 Create README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.md\n두 번째 것부터 전부 squash로 바꿉니다. 첫 번째 것은 pick이어야 합니다(합칠 대상 커밋입니다)\npick ccfbab3 Create README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.md \n그러고나서 :wq를 눌러 저장하고, 다시 커밋메시지를 수정한 후 :wq로 저장을 하면 됩니다.\n",
        "contentSnippet": "정신없이 깃 커밋을 하다보면 하나의 기능이 너무 여러 개의 커밋으로 쪼개져 있는 상황이 발생합니다. 다음과 같이 README.md를 수정하는 6개의 커밋이 있다고 칩시다.\nUpdate README.mdUpdate README.md Update README.md Update README.md Update README.md Create README.md\n커밋 기록에 이렇게 나와있으면 지저분하기 때문에 커밋을 하나로 합치면 좋을 것 같습니다.\n마지막으로부터 6개의 커밋을 합칠 것이므로 git reset --soft HEAD~개수 명령어를 사용합니다. 그러면 커밋들이 합쳐지는데 최종적으로 git commit으로 커밋하면 됩니다.\ngit reset --soft HEAD~6git commit -m \"커밋메시지\"\ngit rebase를 사용하는 방법도 있습니다. 저희가 마지막 6개 커밋을 합치길 원하므로 다음과 같이 입력합니다.\ngit rebase -i HEAD~6\n그러면 vim 에디터로 연결되는데 합칠 커밋들 앞에 붙은 pick을 두 번째 것부터 전부 squash로 바꾸면 됩니다. 예를 들어 다음과 같이 6개 의 커밋이 있다면\npick ccfbab3 Create README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.mdpick ccfbab3 Update README.md\n두 번째 것부터 전부 squash로 바꿉니다. 첫 번째 것은 pick이어야 합니다(합칠 대상 커밋입니다)\npick ccfbab3 Create README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.mdsquash ccfbab3 Update README.md \n그러고나서 :wq를 눌러 저장하고, 다시 커밋메시지를 수정한 후 :wq로 저장을 하면 됩니다.",
        "guid": "https://www.zerocho.com/category/Git/post/6735635ff3923a320c714a92",
        "categories": [
          "Git"
        ],
        "isoDate": "2024-11-14T02:41:35.000Z"
      },
      {
        "creator": "ZeroCho",
        "title": "중간 커밋 수정하기 - git rebase -i",
        "link": "https://www.zerocho.com/category/Git/post/67356085f3923a320c7145f9",
        "pubDate": "Thu, 14 Nov 2024 02:29:25 GMT",
        "dc:creator": "ZeroCho",
        "content": "가끔씩 git commit 중에 중간에 낀 커밋 내용을 수정해야 하는 경우가 있습니다. 다만 위 아래로 커밋들이 쌓여있어 어떻게 해야 할지 난감한 경우가 많았죠. 다행히도 중간 커밋을 바꿀 수 있는 방법이 있습니다. 해당 git 커밋의 아이디를 안다면 git rebase -i 명령어를 사용하면 됩니다. 제가 바꾸고 싶은 커밋 아이디가 b08c300이라면 git rebase -i b08c300^을 입력합니다.\ngit rebase -i 아이디^  // 예시 git rebase -i b08c300^\n아이디 뒤에 ^가 포인트입니다. ^를 붙이지 않으면 해당 아이디의 커밋이 포함되지 않습니다.\n그러면 터미널이 에디터 모드로 전환되는데 내용 중에 제일 위에 pick 아이디라는 글자가 보일겁니다. 여기서 pick을 edit으로 바꾸고 저장하면 됩니다. 저장하는 방법이 처음 하는 사람에게는 조금 어려울 수 있습니다.\npick b08c300 add: builder  &lt;--------------- 내가 바꾸고 싶은 커밋이 이거라고 칩시다pick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024)                                             1,1 꼭대기\"~/WebstormProjects/grimpan/.git/rebase-merge/git-rebase-todo\" [유닉스] 54L, 2149B\n터미널에 vim 에디터가 보통 뜰텐데 a를 눌러서 입력모드(제일 하단에 -- 끼워넣기 --나 -- insert --가 보입니다)로 간 뒤 pick을 edit으로 변경합니다.\nedit b08c300 add: builder  &lt;--------------- pick을 edit으로 변경pick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024)-- 끼워넣기 --\nesc 키를 눌러 명령어모드로 되돌아가 :wq 입력 후 엔터 키를 눌러 저장할 수 있습니다.\nedit b08c300 add: builderpick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024):wq   &lt;------------------ esc를 누른 후 :wq입력하면 글자가 여기에 입력됩니다.\n그러면 소스 코드가 해당 커밋으로 되돌아갑니다. 여기서 여러분이 원하는 수정을 한 뒤 다음 명령어를 입력합니다\ngit add .git rebase --continue \n그러면 다시 에디터 모드가 되면서 커밋 메시지를 수정하는 부분이 나오는데, 커밋 메시지를 변경할 게 없다면 :wq를 입력하고 엔터를 눌러 저장하면 중간 커밋이 변경된 모습을 확인할 수 있습니다.\n",
        "contentSnippet": "가끔씩 git commit 중에 중간에 낀 커밋 내용을 수정해야 하는 경우가 있습니다. 다만 위 아래로 커밋들이 쌓여있어 어떻게 해야 할지 난감한 경우가 많았죠. 다행히도 중간 커밋을 바꿀 수 있는 방법이 있습니다. 해당 git 커밋의 아이디를 안다면 git rebase -i 명령어를 사용하면 됩니다. 제가 바꾸고 싶은 커밋 아이디가 b08c300이라면 git rebase -i b08c300^을 입력합니다.\ngit rebase -i 아이디^  // 예시 git rebase -i b08c300^\n아이디 뒤에 ^가 포인트입니다. ^를 붙이지 않으면 해당 아이디의 커밋이 포함되지 않습니다.\n그러면 터미널이 에디터 모드로 전환되는데 내용 중에 제일 위에 pick 아이디라는 글자가 보일겁니다. 여기서 pick을 edit으로 바꾸고 저장하면 됩니다. 저장하는 방법이 처음 하는 사람에게는 조금 어려울 수 있습니다.\npick b08c300 add: builder  <--------------- 내가 바꾸고 싶은 커밋이 이거라고 칩시다pick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024)                                             1,1 꼭대기\"~/WebstormProjects/grimpan/.git/rebase-merge/git-rebase-todo\" [유닉스] 54L, 2149B\n터미널에 vim 에디터가 보통 뜰텐데 a를 눌러서 입력모드(제일 하단에 -- 끼워넣기 --나 -- insert --가 보입니다)로 간 뒤 pick을 edit으로 변경합니다.\nedit b08c300 add: builder  <--------------- pick을 edit으로 변경pick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024)-- 끼워넣기 --\nesc 키를 눌러 명령어모드로 되돌아가 :wq 입력 후 엔터 키를 눌러 저장할 수 있습니다.\nedit b08c300 add: builderpick 7f6287f add: prototypepick cc8382d add: commandpick 6d486a8 add: command2pick 4b153de add: statepick d418140 add: strategypick d7ea826 add: template methodpick 573aff2 add: chain of responsibilitypick b6633fd add: observer pattern.git/rebase-merge/git-rebase-todo [unix] (11:29 14/11/2024):wq   <------------------ esc를 누른 후 :wq입력하면 글자가 여기에 입력됩니다.\n그러면 소스 코드가 해당 커밋으로 되돌아갑니다. 여기서 여러분이 원하는 수정을 한 뒤 다음 명령어를 입력합니다\ngit add .git rebase --continue \n그러면 다시 에디터 모드가 되면서 커밋 메시지를 수정하는 부분이 나오는데, 커밋 메시지를 변경할 게 없다면 :wq를 입력하고 엔터를 눌러 저장하면 중간 커밋이 변경된 모습을 확인할 수 있습니다.",
        "guid": "https://www.zerocho.com/category/Git/post/67356085f3923a320c7145f9",
        "categories": [
          "Git"
        ],
        "isoDate": "2024-11-14T02:29:25.000Z"
      }
    ]
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "Harness를 이용해 LLM 애플리케이션 평가 자동화하기",
        "link": "https://techblog.lycorp.co.jp/ko/automating-llm-application-evaluation-with-harness",
        "pubDate": "Fri, 15 Nov 2024 17:30:00 GMT",
        "content": "LLM 애플리케이션 테스트의 어려움\nGPT-4와 같은 대규모 언어 모델(large language model, 이하 LLM)이 대중화되고 이를 활용한 LLM 애플리케이션 역시 다양...",
        "contentSnippet": "LLM 애플리케이션 테스트의 어려움\nGPT-4와 같은 대규모 언어 모델(large language model, 이하 LLM)이 대중화되고 이를 활용한 LLM 애플리케이션 역시 다양...",
        "guid": "https://techblog.lycorp.co.jp/ko/automating-llm-application-evaluation-with-harness",
        "isoDate": "2024-11-15T17:30:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": [
      {
        "title": "뱅크샐러드에서 테스트 데이터를 생성하는 방법 (feat. LLM)",
        "link": "https://blog.banksalad.com/tech/how-banksalad-testdata/",
        "pubDate": "Mon, 18 Nov 2024 00:00:00 GMT",
        "content": "안녕하세요. 뱅크샐러드 QA팀 Tech Lead Manager…",
        "contentSnippet": "안녕하세요. 뱅크샐러드 QA팀 Tech Lead Manager…",
        "guid": "https://blog.banksalad.com/tech/how-banksalad-testdata/",
        "isoDate": "2024-11-18T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": [
      {
        "title": "스포카의 백엔드팀에서 코딩 컨벤션을 관리하는 방법",
        "link": "https://spoqa.github.io/2024/11/18/coding-convention-story.html",
        "pubDate": "2024-11-18T00:00:00.000Z",
        "author": "남경호",
        "content": "<p>안녕하세요, 스포카 백엔드팀 프로그래머 남경호입니다.</p>\n\n<p>개발자라면 누구나 한 번쯤 더 나은 코드를 작성하고, 팀의 생산성과 유지보수성을 높이기 위해 고민해 보셨을 겁니다. 중복된 코드를 줄이고, 가독성을 높이며, 테스트 코드를 꼼꼼히 작성하거나, 알맞은 변수명을 고심하는 과정은 모두 그런 노력의 일환이죠. 하지만 이런 개선 작업이 효과적으로 이루어지려면, 팀 전체가 공통된 코딩 기준을 공유하고 지키는 것이 무엇보다 중요합니다.</p>\n\n<p>일관된 코딩 컨벤션은 단순한 규칙 이상의 역할을 합니다. 특히 여러 명의 개발자로 이루어진 팀에서는 코드의 가독성과 유지보수성을 높이고, 불필요한 논쟁을 줄이며, 협업의 효율성을 극대화하는 강력한 도구가 됩니다. 하지만 이러한 컨벤션을 설정하고, 이를 꾸준히 유지하는 과정은 절대 간단하지 않습니다. 문서로 정리한 규칙이 팀 내에서 제대로 적용되지 않거나, 시간이 지나며 점차 구식이 되는 문제를 겪어보신 분들도 많을 겁니다.</p>\n\n<p>우리 스포카 백엔드팀 역시 비슷한 과정을 겪었습니다. 코딩 컨벤션을 관리하기 위해 문서, 코드 리뷰, 그리고 자동화 도구를 활용하며, 더 나아가 Konsist라는 새로운 도구까지 도입하게 된 여정을 통해 다양한 시행착오를 경험했죠. 이 글에서는 단순한 도구 사용법을 넘어, 우리가 직면했던 문제들과 이를 어떻게 극복했는지에 대해 이야기해 보려 합니다.</p>\n\n<p>코딩 컨벤션 관리라는 쉽지 않은 도전이 어떻게 우리 팀의 개발 문화를 변화시켰는지, 그리고 여러분의 팀에도 어떤 인사이트를 줄 수 있을지 함께 살펴보시죠.</p>\n\n<h1 id=\"코딩-컨벤션-관리의-시작-문서-작성\">코딩 컨벤션 관리의 시작: 문서 작성</h1>\n\n<p>모든 시작은 단순합니다. 우리 팀 역시 처음에는 README.md 파일을 통해 코딩 컨벤션을 관리하기 시작했습니다. 사내 문서 관리 도구인 Confluence를 사용하지 않은 이유는 간단했는데요. 코딩 컨벤션은 코드와 가장 밀접하게 연관되어 있기 때문에, 코드와 가장 가까운 곳에서 관리할 필요가 있다고 판단했기 때문입니다.</p>\n\n<p>README.md에는 서버 실행을 위한 준비 작업, IDEA 환경 설정, GIT 브랜치 전략, 그리고 코딩 컨벤션 등 백엔드 개발자가 우리 팀에서 알아야 할 모든 내용이 기재되어 있었습니다. 초기에는, 이 접근법이 꽤 효과적이었습니다. 새로운 팀원이 들어오더라도 문서를 참고해 작업 환경을 설정하거나 코드를 작성할 때 기준을 따를 수 있었으니까요.</p>\n\n<p>아래는 저희가 README.md에 작성했던 문서의 일부분입니다.</p>\n\n<h4 id=\"일관된-eofend-of-file-설정을-위한-가이드\">일관된 EOF(End of File) 설정을 위한 가이드</h4>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">#### EOF 설정</span>\n\n파일의 마지막 라인에 자동으로 개행이 되도록 하기 위한 설정입니다.\n<span class=\"p\">\n1.</span> <span class=\"sb\">`Editor`</span> -&gt; <span class=\"sb\">`General`</span>로 이동합니다.\n<span class=\"p\">2.</span> <span class=\"sb\">`On Save`</span> 색션에서 <span class=\"sb\">`Ensure every saved file ends with a line break`</span>를 체크합니다.\n</code></pre></div></div>\n\n<h4 id=\"ktlint-플러그인-설정-가이드\">Ktlint 플러그인 설정 가이드</h4>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">## Ktlint Settings</span>\n\n<span class=\"gu\">### ktlint pre-commit 설정</span>\n\n아래 명령어를 실행하여 pre-commit hook을 등록합니다.\n\n\"\"\"\n./gradlew addKtlintCheckGitPreCommitHook\n\"\"\"<span class=\"sb\">\n\n\n</span><span class=\"gu\">### Formatting</span>\n\n만약 lint 위반 오류가 발생하는 경우 아래 명령어를 실행하여 자동으로 포메팅을 수행합니다.\n\n\"\"\"\n./gradlew ktlintFormat\n\"\"\"\n</code></pre></div></div>\n\n<p>이처럼 문서는 개발자가 코드 작성 시 참고할 수 있는 명확한 기준을 제시해 주었고, 코드 리뷰 과정에서도 사소한 논쟁을 줄이는 데 기여했습니다. 하지만 시간이 지나면서 문제점이 하나둘씩 드러나기 시작했습니다.</p>\n\n<h3 id=\"문서-관리의-한계\">문서 관리의 한계</h3>\n\n<p>코딩 컨벤션은 한 번 정하고 끝나는 작업이 아닙니다. 시간이 흐르고 조직의 요구사항이나 기술 스택이 변화함에 따라 컨벤션도 업데이트되어야 합니다. 하지만 문서로 관리할 경우, 이를 지속적으로 유지하는 책임자가 없다면 문서가 점차 구식이 되는 문제가 발생합니다.</p>\n\n<p>예를 들어, 문서에 설명된 규칙이 실제 코드와 일치하지 않을 때, 팀원들 사이에서 혼란이 발생하곤 했습니다. 이에 따라 코딩 컨벤션의 신뢰성이 떨어지고, “문서에 적혀 있는 내용은 무시해도 되는 것”이라는 인식이 퍼지기도 했죠.</p>\n\n<p>이러한 한계를 극복하기 위해 우리 팀은 문서만으로 코딩 컨벤션을 관리하는 데서 벗어나기 시작했습니다. 코딩 컨벤션을 더 효과적으로 지키기 위해 Lint와 같은 자동화된 도구, 그리고 코드 리뷰와 같은 방식을 도입했고, 이는 더 나은 방향으로의 첫걸음이 되었습니다.</p>\n\n<h1 id=\"자동화의-첫걸음-ktlint의-도입\">자동화의 첫걸음: ktlint의 도입</h1>\n\n<p>문서로 코딩 컨벤션을 관리하는 데 한계를 느낀 우리 팀은 Lint라는 자동화 도구를 도입했습니다. Lint는 코드의 오류, 버그, 스타일 문제를 찾아주는 정적 코드 분석 도구로, 간단한 설정만으로도 코드 스타일을 일관성 있게 유지할 수 있게 해줍니다. 특히, Kotlin 언어에서는 ktlint가 대표적인 Lint 도구로 자리 잡고 있습니다.</p>\n\n<h3 id=\"lint-도구의-효과\">Lint 도구의 효과</h3>\n<p>Lint 도구를 활용하면서 코드 스타일 문제를 해결하는 과정이 크게 간소화되었습니다. 이전에는 코드 리뷰 과정에서 개행, Trailing commas, 공백 처리 같은 사소한 스타일 문제로 많은 시간을 할애해야 했습니다. 하지만 Lint를 도입한 이후, 이런 문제들은 더 이상 개발자들이 신경 써야 할 부분이 아니게 되었죠. CI/CD 파이프라인에 통합하면, 코드가 규칙을 위반할 경우 자동으로 알려주기 때문에 문제를 사전에 방지할 수 있었습니다.</p>\n\n<h4 id=\"gradle에서-ktlint-설정하기\">Gradle에서 ktlint 설정하기</h4>\n\n<p>Gradle에서 ktlint를 설정하는 방법은 간단합니다. 먼저, Gradle 빌드 스크립트에 ktlint 플러그인을 추가합니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">plugins</span> <span class=\"p\">{</span>\n    <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"s\">\"org.jlleitschuh.gradle.ktlint\"</span><span class=\"p\">)</span> <span class=\"n\">version</span> <span class=\"s\">\"{version}\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>그 후, 특정 파일이나 디렉터리를 제외하고 싶은 경우, 다음과 같이 필터를 설정할 수 있습니다. 아래 예시는 다른 프레임워크에서 자동으로 생성된 코드들은 Lint의 검증 대상에서 제외하도록 하는 설정을 나타냅니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">ktlint</span> <span class=\"p\">{</span>\n    <span class=\"nf\">filter</span> <span class=\"p\">{</span>\n        <span class=\"nf\">exclude</span><span class=\"p\">(</span><span class=\"s\">\"**/generated/**\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>마지막으로, 테스트 실행 전 lint 검사를 자동으로 수행하도록 구성할 수 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"n\">withType</span><span class=\"p\">&lt;</span><span class=\"nc\">Test</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nf\">dependsOn</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"n\">withType</span><span class=\"p\">&lt;</span><span class=\"nc\">KtLintCheckTask</span><span class=\"p\">&gt;())</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>만약 ktlint에서 제공해 주는 Hook 기능을 사용한다면 Git에서 Commit 시 매번 스타일 오류를 수작업으로 수정하지 않아도, 코드를 저장하거나 테스트를 실행하는 과정에서 자동으로 스타일이 교정되거나 문제를 알려주도록 만들 수 있었습니다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Git Commit 전 ktlint check를 통해 스타일 위반 사항이 있는지 확인\n./graldew addKtlintCheckGitPreCommitHook\n\n# Git Commit 전 kotlin format을 통해 스타일을 자동으로 보정\n./graldew addKtlintFormatGitPreCommitHook\n</code></pre></div></div>\n\n<h3 id=\"lint-도구의-한계\">Lint 도구의 한계</h3>\n\n<p>Lint는 코드 스타일을 유지하고 간단한 문제를 잡아내는 데 매우 유용하지만, 모든 문제를 해결해 주는 도구는 아닙니다. 개행이나 공백 처리 같은 기본적인 규칙을 강제할 수는 있지만, 코드의 중복 문제나 보안상의 허점, 복잡한 구조적 컨벤션은 감지하지 못합니다.</p>\n\n<p>Lint 도구를 사용하면서 우리는 “자동화로 해결할 수 있는 범위는 어디까지일까?”라는 고민을 하게 되었고, 이 고민은 더 정교한 도구와 방법을 찾는 과정으로 이어졌으며, 그 여정은 곧 SonarQube와 Konsist 같은 도구의 도입으로 확장되었습니다.</p>\n\n<h1 id=\"코드-리뷰-사람의-눈은-여전히-중요하다\">코드 리뷰: 사람의 눈은 여전히 중요하다</h1>\n\n<p>자동화 도구를 더 이야기하기 전에, Lint와 같은 자동화 도구를 도입했음에도, 코드 리뷰는 여전히 코딩 컨벤션을 지키고 코드 품질을 높이는 데 필수적인 과정으로 남아 있습니다. 자동화 도구가 사소한 스타일 문제를 처리해 준다면, 코드 리뷰는 도메인 요구사항을 잘 충족하였는지, 자동화된 도구 잡아내기 힘든 컨벤션 위반을 발견해 주는 등의 더 깊이 있는 검토를 통해 팀의 코드 베이스를 개선하는 데 집중할 수 있습니다.</p>\n\n<p>아래 이미지는 Lint로는 잡아내기 힘든 컨벤션 위반을 코드리뷰를 통해 개선할 수 있었던 사례입니다. 우리 팀은 테스팅 라이브러리로 Kotest를 사용 중이며 테스트 코드 작성 시 아래와 같은 컨벤션을 지키도록 약속되어 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 테스트 코드 컨벤션</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">SalesOrderFacadeTest</span> <span class=\"p\">:</span> <span class=\"nc\">UnitTestBase</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ... 생략</span>\n    \n    <span class=\"nf\">init</span> <span class=\"p\">{</span>\n        <span class=\"nf\">context</span><span class=\"p\">(</span><span class=\"s\">\"getSalesOrderById\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"s\">\"아이디로 매출 전표를 조회한다\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// ... 생략</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        \n        <span class=\"c1\">// ... 생략</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/images/coding-convention-story/code-review.png\" alt=\"code-review\" /></p>\n\n<h3 id=\"코드-리뷰의-한계\">코드 리뷰의 한계</h3>\n\n<p>코드 리뷰는 수많은 회사에서 도입하고 있는 코드 품질을 높일 수 있는 수단임에도 불구하고 아래와 같이 몇 가지 한계가 있습니다.</p>\n\n<p>첫 번째로, 사람이 직접 코드를 검토하기 때문에 시간이 많이 소요된다는 점입니다. 특히, 개행, 공백, Trailing commas 같은 사소한 스타일 문제를 반복적으로 지적해야 한다면, 리뷰어와 작성자 모두에게 소모적인 작업이 될 수 있습니다. 이러한 한계는 앞서 소개한 Lint를 통해 해결할 수 있습니다.</p>\n\n<p>두 번째로, 리뷰 품질이 리뷰어에 따라 다를 수 있다는 문제도 있습니다. 어떤 리뷰어는 코드 설계나 성능 최적화에 집중할 수 있지만, 다른 리뷰어는 스타일 문제에 더 많은 시간을 할애할 수 있습니다. 이에 따라 팀 내에서 일관성이 떨어질 가능성이 있습니다.</p>\n\n<p>마지막으로, 코드 리뷰 과정에서 부정적인 피드백이 적절히 전달되지 않으면 팀원 간의 긴장감이 생길 수 있습니다. 이는 팀워크에 부정적인 영향을 미칠 수 있고, 오히려 협업의 효율성을 저해하는 결과를 초래할 수 있습니다.</p>\n\n<p>이러한 한계를 극복하기 위해 자동화 도구를 활용해 사소한 문제를 미리 해결하거나, 팀의 리뷰 가이드라인을 문서화하여 일관성을 유지하는 등의 보완책이 필요합니다. 코드 리뷰는 팀의 코드 품질과 협업 문화를 개선하는 중요한 과정인 만큼, 이러한 한계를 인지하고 효과적으로 관리하는 것이 중요합니다.</p>\n\n<p>“자동화된 도구가 더 많은 것을 해결해 줄 순 없을까?”라는 고민은 여기서 더욱 깊어졌습니다.</p>\n\n<h1 id=\"sonarqube의-도입-더-넓은-관점에서의-코드-품질-관리\">SonarQube의 도입: 더 넓은 관점에서의 코드 품질 관리</h1>\n\n<p>Lint와 코드 리뷰를 통해 팀의 코딩 컨벤션을 어느 정도 유지할 수 있었지만, 여전히 놓치고 있는 문제들이 있었습니다. 스타일 문제나 사소한 규칙 위반은 Lint로 충분히 해결할 수 있었지만, 코드의 중복, 복잡성, 보안 취약점, 그리고 더 넓은 관점에서의 코드 품질 관리는 다른 도구가 필요했습니다. 이에 우리 팀은 SonarQube를 도입하게 되었습니다.</p>\n\n<h3 id=\"sonarqube의-기능과-장점\">SonarQube의 기능과 장점</h3>\n\n<p>SonarQube는 코드 품질을 유지하고 개선하는 데 있어 매우 강력한 도구입니다. 가장 큰 장점은 코드의 다양한 품질 요소를 종합적으로 분석할 수 있다는 점입니다. 예를 들어, 코드에서 중복된 부분을 찾아내거나 복잡도가 높은 영역을 감지하며, 테스트 커버리지를 평가하고 버그나 보안 취약점을 자동으로 탐지할 수 있습니다. 이를 통해 개발자는 단순한 스타일 문제를 넘어서, 코드의 구조적 결함이나 유지보수성을 저해할 수 있는 장기적인 문제들을 사전에 파악할 수 있습니다.</p>\n\n<p>아래 사례는 Kotlin의 Data Class에서 Array 프로퍼티를 사용하는 경우 equals, hashCode, toString을 재정의해 주지 않아 발생한 SonarQube의 이슈 목록을 보여줍니다.</p>\n\n<p><img src=\"/images/coding-convention-story/sonarqube-issues.png\" alt=\"sonarqube-issues\" /></p>\n\n<p>또한, SonarQube는 오픈소스로 제공되기 때문에 로컬 환경이나 사내 서버에 설치해서 사용할 수 있습니다. 이 외에도 클라우드 기반으로도 운영이 가능하여 팀의 필요에 맞는 다양한 방식으로 유연하게 활용할 수 있습니다. 기본 제공되는 검사 규칙뿐만 아니라, 프로젝트의 특성에 따라 다양한 플러그인과 설정을 통해 맞춤형 규칙을 추가할 수도 있어 확장성도 뛰어납니다.</p>\n\n<h3 id=\"운영-과정에서-마주한-도전-과제\">운영 과정에서 마주한 도전 과제</h3>\n\n<p>SonarQube의 강력함에도 불구하고, 실제 운영 과정에서는 몇 가지 불편한 점들이 존재했습니다.</p>\n\n<p>첫 번째로는 서버 관리와 관련된 문제입니다. SonarQube를 사용하려면 자체 서버를 설치하고 운영해야 하는데, 이 과정에서 추가적인 설정과 유지보수가 필요했습니다. 특히, 코드 분석 과정에서 소스코드를 서버에 업로드하고 검증하는 데 시간이 소요되었는데, 이는 Pull Request 단계에서 실시간 검증을 수행하기에는 부담으로 작용했습니다.</p>\n\n<p>두 번째 도전 과제는 사전 검증과 사후 검증 간의 균형을 맞추는 일이었습니다. 초기에는 코드 변경 사항이 병합되기 전에 Pull Request 단계에서 SonarQube를 통해 코드를 검증하려 했습니다. 그러나 검증 과정이 느리고 시간이 오래 걸리는 탓에, 개발 속도를 저하하는 문제가 있었습니다. 이에 따라 우리는 코드가 병합된 후에 Code Smell이나 품질 문제를 감지하는 방식으로 운영 방식을 조정했습니다. 이 방식은 코드 품질 문제를 감지하는 데 유연함을 제공했지만, 문제를 사전에 완전히 방지할 수는 없다는 한계도 있었습니다.</p>\n\n<p>SonarQube는 단순히 스타일을 검사하는 도구에서 벗어나, 팀이 더 넓은 관점에서 코드 품질을 관리할 수 있도록 도와주는 강력한 도구입니다. 비록 작업코드가 병합되기 전에 품질관리를 하기 어렵다는 불편함은 있지만 사후 검증을 통해서도 Lint와 코드 리뷰가 해결하지 못했던 복잡한 문제를 감지하고, 코드베이스의 장기적인 건강 상태를 유지하는 데 중요한 역할을 하고 있다는 점은 코드 컨벤션 관리를 통해 우리 팀이 더 나은 코드 품질을 유지하기 위한 노력에 잘 부합한다고 할 수 있습니다.</p>\n\n<p>다만, SonarQube를 도입한 이후에도 우리는 더 세부적인 규칙 검증과 구조적인 코딩 컨벤션 관리를 필요로 했고, 이 과정은 결국 Konsist와 같은 도구를 찾게 되는 계기가 되었습니다.</p>\n\n<h1 id=\"konsist-코딩-컨벤션-관리의-새로운-도약\">Konsist: 코딩 컨벤션 관리의 새로운 도약</h1>\n\n<p>앞서 소개한 도구들(문서, Lint, SonarQube, 코드 리뷰)은 코딩 컨벤션을 유지하고 코드 품질을 관리하는 데 큰 도움이 되었지만, 여전히 해결되지 않는 문제들이 있었습니다. 예를 들어, 프로젝트의 구조적 규칙을 정의하거나, 클래스 네이밍 규칙, 의존성 방향과 같은 팀 고유의 복잡한 코딩 컨벤션을 자동으로 검증하는 것은 기존 도구로는 쉽지 않았습니다. 바로 이 지점에서 Konsist라는 새로운 도구가 빛을 발했습니다.</p>\n\n<h3 id=\"konsist란-무엇인가\">Konsist란 무엇인가?</h3>\n\n<p>Konsist는 Kotlin 언어를 위해 설계된 정적 코드 분석 도구로, 기존의 Lint나 SonarQube가 다루기 어려운 구조적 규칙과 세세한 컨벤션을 검증할 수 있도록 설계되었습니다. Konsist의 가장 큰 특징은 API를 활용한 단위 테스트를 통해, 팀에서 정의한 코딩 규칙을 명확히 표현하고 자동화된 방식으로 검증할 수 있다는 점입니다.</p>\n\n<p>예를 들어, “Domain 레이어는 Application 레이어를 의존하지 않는다”와 같은 복잡한 구조적 규칙을 코드로 표현하고, 이를 테스트를 통해 검증할 수 있습니다. 이 도구는 기존 도구들의 한계를 보완하며, 코딩 컨벤션 관리의 새로운 가능성을 열어주었습니다.</p>\n\n<h3 id=\"konsist의-주요-특징\">Konsist의 주요 특징</h3>\n\n<h4 id=\"간단한-설정\">간단한 설정</h4>\n\n<p>Konsist는 Gradle이나 Maven에 의존성을 추가하고, JUnit이나 Kotest와 같은 테스트 프레임워크와 연동하면 바로 사용할 수 있습니다. 복잡한 설정 과정 없이 빠르게 적용할 수 있기 때문에 새로운 도구를 도입할 때 진입 장벽이 낮습니다. 우리 팀도 Konsist를 처음 접한 날 바로 프로젝트에 적용 테스트를 진행할 수 있을 만큼 사용이 간단했습니다.</p>\n\n<h4 id=\"구조적-규칙-검증\">구조적 규칙 검증</h4>\n\n<p>Konsist는 기존 도구들이 다루기 어려운 프로젝트의 구조적 규칙을 검증할 수 있는 강력한 기능을 제공합니다. 예를 들어, 특정 레이어가 다른 레이어를 의존하지 않도록 규칙을 정의하거나, 클래스와 속성의 네이밍 규칙을 설정하고 이를 자동으로 검증할 수 있습니다. 이러한 기능은 프로젝트 구조와 일관성을 유지하는 데 큰 도움이 됩니다.</p>\n\n<h4 id=\"효율성-향상\">효율성 향상</h4>\n\n<p>Konsist를 활용하면 코드 리뷰 과정에서 반복적으로 지적해야 했던 많은 규칙 위반을 자동화할 수 있습니다. 이는 코드 리뷰의 품질을 높이는 동시에, 리뷰어가 더 중요한 논의나 설계 검토에 집중할 수 있도록 해줍니다. 덕분에 팀의 생산성과 효율성이 크게 향상되었습니다.</p>\n\n<h4 id=\"단순하면서도-강력한-구조\">단순하면서도 강력한 구조</h4>\n\n<p>Konsist는 복잡한 학습 없이 바로 사용할 수 있는 단순한 구조로 되어 있습니다. 개발자는 검증해야 할 코딩 규칙을 정의하는 데만 집중하면 되며, 불필요한 설정이나 복잡한 사용법으로 인해 시간을 낭비하지 않아도 됩니다. 이는 도구를 처음 접하는 개발자들에게도 사용이 용이하다는 점에서 큰 장점으로 작용합니다.</p>\n\n<h3 id=\"konsist-활용-사례\">Konsist 활용 사례</h3>\n\n<p>이 글의 목적은 Konsist를 자세히 소개하는 데 있지 않습니다. Konsist를 시작하는 방법이나 설치 가이드는 <a href=\"https://docs.konsist.lemonappdev.com/\" target=\"\\_blank\">공식 홈페이지</a> 에서 확인하실 수 있습니다. 대신, 이 글에서는 우리 팀이 Konsist를 활용하고 있는 몇 가지 사례를 통해, 이 도구를 어떻게 효과적으로 사용할 수 있을지 감을 잡을 수 있도록 도와드리고자 합니다.</p>\n\n<h4 id=\"구조-컨벤션\">구조 컨벤션</h4>\n\n<p>우리 팀은 명확하고 이해하기 쉬우며 유지보수성을 높일 수 있도록 아래처럼 단순한 프로젝트 구조를 사용하고 있습니다.</p>\n\n<p><img src=\"/images/coding-convention-story/architecture.png\" alt=\"architecture\" /></p>\n\n<p>Domain 레이어는 데이터 및 비즈니스 로직과 같은 도메인 로직을 처리하는 코드들이 위치하며,\nApplication 레이어는 표현 계층, Facade, 그리고 외부 리소스와의 연동을 담당하는 기반 코드들이 포함되어 있습니다.</p>\n\n<p>의존성 방향에 대한 규칙도 명확히 정의했습니다. Application 레이어는 Domain 레이어를 의존할 수 있지만, 반대로 Domain 레이어는 Application 레이어를 의존하지 않도록 컨벤션을 정했습니다.</p>\n\n<p>이러한 규칙을 코드로 표현하면 아래와 같습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"s\">\"application 레이어는 domain 레이어를 의존한다.\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">Konsist</span>\n        <span class=\"p\">.</span><span class=\"nf\">scopeFromProduction</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">assertArchitecture</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">application</span> <span class=\"p\">=</span> <span class=\"nc\">Layer</span><span class=\"p\">(</span><span class=\"s\">\"Application\"</span><span class=\"p\">,</span> <span class=\"s\">\"com.spoqa.cart.application..\"</span><span class=\"p\">)</span>\n            <span class=\"kd\">val</span> <span class=\"py\">domain</span> <span class=\"p\">=</span> <span class=\"nc\">Layer</span><span class=\"p\">(</span><span class=\"s\">\"Domain\"</span><span class=\"p\">,</span> <span class=\"s\">\"com.spoqa.cart.domain..\"</span><span class=\"p\">)</span>\n\n            <span class=\"n\">application</span><span class=\"p\">.</span><span class=\"nf\">dependsOn</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n            <span class=\"n\">domain</span><span class=\"p\">.</span><span class=\"nf\">dependsOnNothing</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>여담으로, 처음 구조 테스트를 실행했을 때 나름 코드 리뷰에서 꼼꼼하게 의존성 위반 여부를 점검했다고 생각했지만, 예상외로 다수의 의존성 위반 코드가 발견되었습니다. 이를 통해 코드 리뷰가 사람이 수행하는 작업인 만큼, 놓치는 부분이 생길 수밖에 없다는 점을 다시 한번 실감했습니다. 동시에, Konsist가 이런 문제를 효과적으로 해결할 수 있다는 점도 확실히 체감할 수 있었습니다.</p>\n\n<p><img src=\"/images/coding-convention-story/architectural-test-result.png\" alt=\"architectural-test-result\" /></p>\n\n<h4 id=\"class-컨벤션\">Class 컨벤션</h4>\n\n<p>또한 우리 팀에서는 Entity 클래스나 테스트 클래스들은 여러 이유로 인해 특정 클래스를 필수적으로 상속받도록 강제하고 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Entity</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Bill</span><span class=\"p\">(</span>\n    <span class=\"n\">orderableVendor</span><span class=\"p\">:</span> <span class=\"nc\">OrderableVendor</span><span class=\"p\">,</span>\n    <span class=\"n\">store</span><span class=\"p\">:</span> <span class=\"nc\">Store</span><span class=\"p\">,</span>\n    <span class=\"n\">amount</span><span class=\"p\">:</span> <span class=\"nc\">BigDecimal</span><span class=\"p\">,</span>\n    <span class=\"n\">type</span><span class=\"p\">:</span> <span class=\"nc\">BillType</span><span class=\"p\">,</span>\n    <span class=\"n\">attachements</span><span class=\"p\">:</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">BaseEntity</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@Entity</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Role</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">permissions</span><span class=\"p\">:</span> <span class=\"nc\">Array</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">BaseEntity</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// ... 생략</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">OrderSheetFacadeTest</span> <span class=\"p\">:</span> <span class=\"nc\">UnitTestBase</span><span class=\"p\">()</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">AdminMutationTest</span> <span class=\"p\">:</span> <span class=\"nc\">FunctionalTestBase</span><span class=\"p\">()</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">CartRepositoryTest</span><span class=\"p\">(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">cartRepository</span><span class=\"p\">:</span> <span class=\"nc\">CartRepository</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">testEntityManager</span><span class=\"p\">:</span> <span class=\"nc\">TestEntityManager</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">RepositoryTestBase</span><span class=\"p\">()</span>\n\n<span class=\"c1\">// ... 생략</span>\n</code></pre></div></div>\n\n<p>위와 같은 컨벤션을 테스트하는 코드는 아래와 같습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"s\">\"Entity 클래스는 BaseEntity 클래스를 필수로 상속한다\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">Konsist</span><span class=\"p\">.</span><span class=\"nf\">scopeFromProduction</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">classes</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasAnnotationOf</span><span class=\"p\">(</span><span class=\"nc\">Entity</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">testName</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">testCase</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">testName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasParentClassOf</span><span class=\"p\">(</span><span class=\"nc\">BaseEntity</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"s\">\"test 클래스는 Base 클래스 중 하나를 필수로 상속한다\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">Konsist</span><span class=\"p\">.</span><span class=\"nf\">scopeFromTest</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">classes</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"nf\">endsWith</span><span class=\"p\">(</span><span class=\"s\">\"Test\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">assertTrue</span><span class=\"p\">(</span><span class=\"n\">testName</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">testCase</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">testName</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasParentClassOf</span><span class=\"p\">(</span><span class=\"nc\">FunctionalTestBase</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">||</span>\n                <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasParentClassOf</span><span class=\"p\">(</span><span class=\"nc\">UnitTestBase</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">||</span>\n                <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasParentClassOf</span><span class=\"p\">(</span><span class=\"nc\">RepositoryTestBase</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">||</span>\n                <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasParentClassOf</span><span class=\"p\">(</span><span class=\"nc\">IndexRepositoryTestBase</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"entity-property-컨벤션\">Entity Property 컨벤션</h4>\n\n<p>Kotlin으로 JPA를 사용하다 보면 종종 실수하기 쉬운 부분이 있습니다. 바로 JPA의 <code class=\"language-plaintext highlighter-rouge\">@Column</code> 어노테이션에서 <code class=\"language-plaintext highlighter-rouge\">nullable</code> 속성과 Entity 프로퍼티의 타입을 다르게 정의하는 경우입니다. 우리 팀은 이러한 실수를 방지하기 위해 아래와 같이 Declarations Test를 정의해 두었습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"s\">\"Entity 클래스의 Column 프로퍼티가 non-nullable 타입이라면 '@Column(nullable=false)'가 선언되어야 한다\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">Konsist</span><span class=\"p\">.</span><span class=\"nf\">scopeFromProject</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">classes</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">withAllAnnotationsOf</span><span class=\"p\">(</span><span class=\"nc\">Entity</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nf\">properties</span><span class=\"p\">()</span>\n        <span class=\"p\">.</span><span class=\"nf\">withAllAnnotationsOf</span><span class=\"p\">(</span><span class=\"nc\">Column</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">type</span><span class=\"o\">?.</span><span class=\"n\">isNullable</span> <span class=\"p\">==</span> <span class=\"k\">false</span> <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">assertTrue</span> <span class=\"p\">{</span>\n            <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"nf\">hasAnnotation</span> <span class=\"p\">{</span> <span class=\"k\">annotation</span> <span class=\"p\">-&gt;</span>\n                <span class=\"k\">annotation</span><span class=\"p\">.</span><span class=\"nf\">hasArgument</span> <span class=\"p\">{</span> <span class=\"n\">arg</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">==</span> <span class=\"s\">\"nullable\"</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">arg</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"p\">==</span> <span class=\"s\">\"false\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이와 같이 테스트 코드를 작성하면 아래와 같이 어노테이션과 컬럼의 타입이 불일치하게 작성하는 경우를 효율적으로 방지할 수 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Entity</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Admin</span><span class=\"p\">(</span>\n    <span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">role</span><span class=\"p\">:</span> <span class=\"nc\">Role</span><span class=\"p\">?,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">BaseEntity</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nd\">@Column</span>\n    <span class=\"kd\">val</span> <span class=\"py\">email</span><span class=\"p\">:</span> <span class=\"nc\">String</span> <span class=\"p\">=</span> <span class=\"n\">email</span>\n    \n    <span class=\"c1\">// ... 생략</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/images/coding-convention-story/property-test-result.png\" alt=\"property-test-result\" /></p>\n\n<h1 id=\"마무리하며\">마무리하며</h1>\n\n<p>Konsist와 같은 도구는 팀이 코딩 컨벤션을 잘 지키도록 돕는 강력한 도구지만, 모든 문제를 해결할 수 있는 만능 솔루션은 아닙니다. 지나치게 세부적인 규칙은 생산성을 떨어뜨릴 수 있으며, 도구가 잡아내지 못하는 부분은 결국 사람이 검토해야 합니다.</p>\n\n<p>저희 백엔드팀은 Konsist, ktlint, SonarQube와 같은 도구를 적절히 조합하고, 코드 리뷰를 통해 이를 보완하면서 코딩 컨벤션을 지속적으로 발전시키고 있습니다. 이러한 과정은 단순히 코딩 규칙을 준수하는 것을 넘어, 팀의 협업 문화를 개선하고 더 나은 코드를 만드는 데 기여하고 있습니다.</p>\n\n<p>여러분의 팀은 코딩 컨벤션을 어떻게 관리하고 계신가요? 기회가 된다면 각자의 경험과 노하우를 공유하며 서로 배울 수 있는 시간이 있기를 기대합니다.</p>\n\n<p>긴 글 읽어주셔서 감사합니다.</p>\n",
        "contentSnippet": "안녕하세요, 스포카 백엔드팀 프로그래머 남경호입니다.\n개발자라면 누구나 한 번쯤 더 나은 코드를 작성하고, 팀의 생산성과 유지보수성을 높이기 위해 고민해 보셨을 겁니다. 중복된 코드를 줄이고, 가독성을 높이며, 테스트 코드를 꼼꼼히 작성하거나, 알맞은 변수명을 고심하는 과정은 모두 그런 노력의 일환이죠. 하지만 이런 개선 작업이 효과적으로 이루어지려면, 팀 전체가 공통된 코딩 기준을 공유하고 지키는 것이 무엇보다 중요합니다.\n일관된 코딩 컨벤션은 단순한 규칙 이상의 역할을 합니다. 특히 여러 명의 개발자로 이루어진 팀에서는 코드의 가독성과 유지보수성을 높이고, 불필요한 논쟁을 줄이며, 협업의 효율성을 극대화하는 강력한 도구가 됩니다. 하지만 이러한 컨벤션을 설정하고, 이를 꾸준히 유지하는 과정은 절대 간단하지 않습니다. 문서로 정리한 규칙이 팀 내에서 제대로 적용되지 않거나, 시간이 지나며 점차 구식이 되는 문제를 겪어보신 분들도 많을 겁니다.\n우리 스포카 백엔드팀 역시 비슷한 과정을 겪었습니다. 코딩 컨벤션을 관리하기 위해 문서, 코드 리뷰, 그리고 자동화 도구를 활용하며, 더 나아가 Konsist라는 새로운 도구까지 도입하게 된 여정을 통해 다양한 시행착오를 경험했죠. 이 글에서는 단순한 도구 사용법을 넘어, 우리가 직면했던 문제들과 이를 어떻게 극복했는지에 대해 이야기해 보려 합니다.\n코딩 컨벤션 관리라는 쉽지 않은 도전이 어떻게 우리 팀의 개발 문화를 변화시켰는지, 그리고 여러분의 팀에도 어떤 인사이트를 줄 수 있을지 함께 살펴보시죠.\n코딩 컨벤션 관리의 시작: 문서 작성\n모든 시작은 단순합니다. 우리 팀 역시 처음에는 README.md 파일을 통해 코딩 컨벤션을 관리하기 시작했습니다. 사내 문서 관리 도구인 Confluence를 사용하지 않은 이유는 간단했는데요. 코딩 컨벤션은 코드와 가장 밀접하게 연관되어 있기 때문에, 코드와 가장 가까운 곳에서 관리할 필요가 있다고 판단했기 때문입니다.\nREADME.md에는 서버 실행을 위한 준비 작업, IDEA 환경 설정, GIT 브랜치 전략, 그리고 코딩 컨벤션 등 백엔드 개발자가 우리 팀에서 알아야 할 모든 내용이 기재되어 있었습니다. 초기에는, 이 접근법이 꽤 효과적이었습니다. 새로운 팀원이 들어오더라도 문서를 참고해 작업 환경을 설정하거나 코드를 작성할 때 기준을 따를 수 있었으니까요.\n아래는 저희가 README.md에 작성했던 문서의 일부분입니다.\n일관된 EOF(End of File) 설정을 위한 가이드\n\n#### EOF 설정\n\n파일의 마지막 라인에 자동으로 개행이 되도록 하기 위한 설정입니다.\n\n1. `Editor` -> `General`로 이동합니다.\n2. `On Save` 색션에서 `Ensure every saved file ends with a line break`를 체크합니다.\n\n\nKtlint 플러그인 설정 가이드\n\n## Ktlint Settings\n\n### ktlint pre-commit 설정\n\n아래 명령어를 실행하여 pre-commit hook을 등록합니다.\n\n\"\"\"\n./gradlew addKtlintCheckGitPreCommitHook\n\"\"\"\n\n\n### Formatting\n\n만약 lint 위반 오류가 발생하는 경우 아래 명령어를 실행하여 자동으로 포메팅을 수행합니다.\n\n\"\"\"\n./gradlew ktlintFormat\n\"\"\"\n\n\n이처럼 문서는 개발자가 코드 작성 시 참고할 수 있는 명확한 기준을 제시해 주었고, 코드 리뷰 과정에서도 사소한 논쟁을 줄이는 데 기여했습니다. 하지만 시간이 지나면서 문제점이 하나둘씩 드러나기 시작했습니다.\n문서 관리의 한계\n코딩 컨벤션은 한 번 정하고 끝나는 작업이 아닙니다. 시간이 흐르고 조직의 요구사항이나 기술 스택이 변화함에 따라 컨벤션도 업데이트되어야 합니다. 하지만 문서로 관리할 경우, 이를 지속적으로 유지하는 책임자가 없다면 문서가 점차 구식이 되는 문제가 발생합니다.\n예를 들어, 문서에 설명된 규칙이 실제 코드와 일치하지 않을 때, 팀원들 사이에서 혼란이 발생하곤 했습니다. 이에 따라 코딩 컨벤션의 신뢰성이 떨어지고, “문서에 적혀 있는 내용은 무시해도 되는 것”이라는 인식이 퍼지기도 했죠.\n이러한 한계를 극복하기 위해 우리 팀은 문서만으로 코딩 컨벤션을 관리하는 데서 벗어나기 시작했습니다. 코딩 컨벤션을 더 효과적으로 지키기 위해 Lint와 같은 자동화된 도구, 그리고 코드 리뷰와 같은 방식을 도입했고, 이는 더 나은 방향으로의 첫걸음이 되었습니다.\n자동화의 첫걸음: ktlint의 도입\n문서로 코딩 컨벤션을 관리하는 데 한계를 느낀 우리 팀은 Lint라는 자동화 도구를 도입했습니다. Lint는 코드의 오류, 버그, 스타일 문제를 찾아주는 정적 코드 분석 도구로, 간단한 설정만으로도 코드 스타일을 일관성 있게 유지할 수 있게 해줍니다. 특히, Kotlin 언어에서는 ktlint가 대표적인 Lint 도구로 자리 잡고 있습니다.\nLint 도구의 효과\nLint 도구를 활용하면서 코드 스타일 문제를 해결하는 과정이 크게 간소화되었습니다. 이전에는 코드 리뷰 과정에서 개행, Trailing commas, 공백 처리 같은 사소한 스타일 문제로 많은 시간을 할애해야 했습니다. 하지만 Lint를 도입한 이후, 이런 문제들은 더 이상 개발자들이 신경 써야 할 부분이 아니게 되었죠. CI/CD 파이프라인에 통합하면, 코드가 규칙을 위반할 경우 자동으로 알려주기 때문에 문제를 사전에 방지할 수 있었습니다.\nGradle에서 ktlint 설정하기\nGradle에서 ktlint를 설정하는 방법은 간단합니다. 먼저, Gradle 빌드 스크립트에 ktlint 플러그인을 추가합니다.\n\nplugins {\n    id(\"org.jlleitschuh.gradle.ktlint\") version \"{version}\"\n}\n\n\n그 후, 특정 파일이나 디렉터리를 제외하고 싶은 경우, 다음과 같이 필터를 설정할 수 있습니다. 아래 예시는 다른 프레임워크에서 자동으로 생성된 코드들은 Lint의 검증 대상에서 제외하도록 하는 설정을 나타냅니다.\n\nktlint {\n    filter {\n        exclude(\"**/generated/**\")\n    }\n}\n\n\n마지막으로, 테스트 실행 전 lint 검사를 자동으로 수행하도록 구성할 수 있습니다.\n\ntasks.withType<Test> {\n    dependsOn(tasks.withType<KtLintCheckTask>())\n}\n\n\n만약 ktlint에서 제공해 주는 Hook 기능을 사용한다면 Git에서 Commit 시 매번 스타일 오류를 수작업으로 수정하지 않아도, 코드를 저장하거나 테스트를 실행하는 과정에서 자동으로 스타일이 교정되거나 문제를 알려주도록 만들 수 있었습니다.\n\n# Git Commit 전 ktlint check를 통해 스타일 위반 사항이 있는지 확인\n./graldew addKtlintCheckGitPreCommitHook\n\n# Git Commit 전 kotlin format을 통해 스타일을 자동으로 보정\n./graldew addKtlintFormatGitPreCommitHook\n\n\nLint 도구의 한계\nLint는 코드 스타일을 유지하고 간단한 문제를 잡아내는 데 매우 유용하지만, 모든 문제를 해결해 주는 도구는 아닙니다. 개행이나 공백 처리 같은 기본적인 규칙을 강제할 수는 있지만, 코드의 중복 문제나 보안상의 허점, 복잡한 구조적 컨벤션은 감지하지 못합니다.\nLint 도구를 사용하면서 우리는 “자동화로 해결할 수 있는 범위는 어디까지일까?”라는 고민을 하게 되었고, 이 고민은 더 정교한 도구와 방법을 찾는 과정으로 이어졌으며, 그 여정은 곧 SonarQube와 Konsist 같은 도구의 도입으로 확장되었습니다.\n코드 리뷰: 사람의 눈은 여전히 중요하다\n자동화 도구를 더 이야기하기 전에, Lint와 같은 자동화 도구를 도입했음에도, 코드 리뷰는 여전히 코딩 컨벤션을 지키고 코드 품질을 높이는 데 필수적인 과정으로 남아 있습니다. 자동화 도구가 사소한 스타일 문제를 처리해 준다면, 코드 리뷰는 도메인 요구사항을 잘 충족하였는지, 자동화된 도구 잡아내기 힘든 컨벤션 위반을 발견해 주는 등의 더 깊이 있는 검토를 통해 팀의 코드 베이스를 개선하는 데 집중할 수 있습니다.\n아래 이미지는 Lint로는 잡아내기 힘든 컨벤션 위반을 코드리뷰를 통해 개선할 수 있었던 사례입니다. 우리 팀은 테스팅 라이브러리로 Kotest를 사용 중이며 테스트 코드 작성 시 아래와 같은 컨벤션을 지키도록 약속되어 있습니다.\n\n// 테스트 코드 컨벤션\n\nclass SalesOrderFacadeTest : UnitTestBase() {\n    // ... 생략\n    \n    init {\n        context(\"getSalesOrderById\") {\n            test(\"아이디로 매출 전표를 조회한다\") {\n                // ... 생략\n            }\n        }\n        \n        // ... 생략\n    }\n}\n\n\n\n코드 리뷰의 한계\n코드 리뷰는 수많은 회사에서 도입하고 있는 코드 품질을 높일 수 있는 수단임에도 불구하고 아래와 같이 몇 가지 한계가 있습니다.\n첫 번째로, 사람이 직접 코드를 검토하기 때문에 시간이 많이 소요된다는 점입니다. 특히, 개행, 공백, Trailing commas 같은 사소한 스타일 문제를 반복적으로 지적해야 한다면, 리뷰어와 작성자 모두에게 소모적인 작업이 될 수 있습니다. 이러한 한계는 앞서 소개한 Lint를 통해 해결할 수 있습니다.\n두 번째로, 리뷰 품질이 리뷰어에 따라 다를 수 있다는 문제도 있습니다. 어떤 리뷰어는 코드 설계나 성능 최적화에 집중할 수 있지만, 다른 리뷰어는 스타일 문제에 더 많은 시간을 할애할 수 있습니다. 이에 따라 팀 내에서 일관성이 떨어질 가능성이 있습니다.\n마지막으로, 코드 리뷰 과정에서 부정적인 피드백이 적절히 전달되지 않으면 팀원 간의 긴장감이 생길 수 있습니다. 이는 팀워크에 부정적인 영향을 미칠 수 있고, 오히려 협업의 효율성을 저해하는 결과를 초래할 수 있습니다.\n이러한 한계를 극복하기 위해 자동화 도구를 활용해 사소한 문제를 미리 해결하거나, 팀의 리뷰 가이드라인을 문서화하여 일관성을 유지하는 등의 보완책이 필요합니다. 코드 리뷰는 팀의 코드 품질과 협업 문화를 개선하는 중요한 과정인 만큼, 이러한 한계를 인지하고 효과적으로 관리하는 것이 중요합니다.\n“자동화된 도구가 더 많은 것을 해결해 줄 순 없을까?”라는 고민은 여기서 더욱 깊어졌습니다.\nSonarQube의 도입: 더 넓은 관점에서의 코드 품질 관리\nLint와 코드 리뷰를 통해 팀의 코딩 컨벤션을 어느 정도 유지할 수 있었지만, 여전히 놓치고 있는 문제들이 있었습니다. 스타일 문제나 사소한 규칙 위반은 Lint로 충분히 해결할 수 있었지만, 코드의 중복, 복잡성, 보안 취약점, 그리고 더 넓은 관점에서의 코드 품질 관리는 다른 도구가 필요했습니다. 이에 우리 팀은 SonarQube를 도입하게 되었습니다.\nSonarQube의 기능과 장점\nSonarQube는 코드 품질을 유지하고 개선하는 데 있어 매우 강력한 도구입니다. 가장 큰 장점은 코드의 다양한 품질 요소를 종합적으로 분석할 수 있다는 점입니다. 예를 들어, 코드에서 중복된 부분을 찾아내거나 복잡도가 높은 영역을 감지하며, 테스트 커버리지를 평가하고 버그나 보안 취약점을 자동으로 탐지할 수 있습니다. 이를 통해 개발자는 단순한 스타일 문제를 넘어서, 코드의 구조적 결함이나 유지보수성을 저해할 수 있는 장기적인 문제들을 사전에 파악할 수 있습니다.\n아래 사례는 Kotlin의 Data Class에서 Array 프로퍼티를 사용하는 경우 equals, hashCode, toString을 재정의해 주지 않아 발생한 SonarQube의 이슈 목록을 보여줍니다.\n\n또한, SonarQube는 오픈소스로 제공되기 때문에 로컬 환경이나 사내 서버에 설치해서 사용할 수 있습니다. 이 외에도 클라우드 기반으로도 운영이 가능하여 팀의 필요에 맞는 다양한 방식으로 유연하게 활용할 수 있습니다. 기본 제공되는 검사 규칙뿐만 아니라, 프로젝트의 특성에 따라 다양한 플러그인과 설정을 통해 맞춤형 규칙을 추가할 수도 있어 확장성도 뛰어납니다.\n운영 과정에서 마주한 도전 과제\nSonarQube의 강력함에도 불구하고, 실제 운영 과정에서는 몇 가지 불편한 점들이 존재했습니다.\n첫 번째로는 서버 관리와 관련된 문제입니다. SonarQube를 사용하려면 자체 서버를 설치하고 운영해야 하는데, 이 과정에서 추가적인 설정과 유지보수가 필요했습니다. 특히, 코드 분석 과정에서 소스코드를 서버에 업로드하고 검증하는 데 시간이 소요되었는데, 이는 Pull Request 단계에서 실시간 검증을 수행하기에는 부담으로 작용했습니다.\n두 번째 도전 과제는 사전 검증과 사후 검증 간의 균형을 맞추는 일이었습니다. 초기에는 코드 변경 사항이 병합되기 전에 Pull Request 단계에서 SonarQube를 통해 코드를 검증하려 했습니다. 그러나 검증 과정이 느리고 시간이 오래 걸리는 탓에, 개발 속도를 저하하는 문제가 있었습니다. 이에 따라 우리는 코드가 병합된 후에 Code Smell이나 품질 문제를 감지하는 방식으로 운영 방식을 조정했습니다. 이 방식은 코드 품질 문제를 감지하는 데 유연함을 제공했지만, 문제를 사전에 완전히 방지할 수는 없다는 한계도 있었습니다.\nSonarQube는 단순히 스타일을 검사하는 도구에서 벗어나, 팀이 더 넓은 관점에서 코드 품질을 관리할 수 있도록 도와주는 강력한 도구입니다. 비록 작업코드가 병합되기 전에 품질관리를 하기 어렵다는 불편함은 있지만 사후 검증을 통해서도 Lint와 코드 리뷰가 해결하지 못했던 복잡한 문제를 감지하고, 코드베이스의 장기적인 건강 상태를 유지하는 데 중요한 역할을 하고 있다는 점은 코드 컨벤션 관리를 통해 우리 팀이 더 나은 코드 품질을 유지하기 위한 노력에 잘 부합한다고 할 수 있습니다.\n다만, SonarQube를 도입한 이후에도 우리는 더 세부적인 규칙 검증과 구조적인 코딩 컨벤션 관리를 필요로 했고, 이 과정은 결국 Konsist와 같은 도구를 찾게 되는 계기가 되었습니다.\nKonsist: 코딩 컨벤션 관리의 새로운 도약\n앞서 소개한 도구들(문서, Lint, SonarQube, 코드 리뷰)은 코딩 컨벤션을 유지하고 코드 품질을 관리하는 데 큰 도움이 되었지만, 여전히 해결되지 않는 문제들이 있었습니다. 예를 들어, 프로젝트의 구조적 규칙을 정의하거나, 클래스 네이밍 규칙, 의존성 방향과 같은 팀 고유의 복잡한 코딩 컨벤션을 자동으로 검증하는 것은 기존 도구로는 쉽지 않았습니다. 바로 이 지점에서 Konsist라는 새로운 도구가 빛을 발했습니다.\nKonsist란 무엇인가?\nKonsist는 Kotlin 언어를 위해 설계된 정적 코드 분석 도구로, 기존의 Lint나 SonarQube가 다루기 어려운 구조적 규칙과 세세한 컨벤션을 검증할 수 있도록 설계되었습니다. Konsist의 가장 큰 특징은 API를 활용한 단위 테스트를 통해, 팀에서 정의한 코딩 규칙을 명확히 표현하고 자동화된 방식으로 검증할 수 있다는 점입니다.\n예를 들어, “Domain 레이어는 Application 레이어를 의존하지 않는다”와 같은 복잡한 구조적 규칙을 코드로 표현하고, 이를 테스트를 통해 검증할 수 있습니다. 이 도구는 기존 도구들의 한계를 보완하며, 코딩 컨벤션 관리의 새로운 가능성을 열어주었습니다.\nKonsist의 주요 특징\n간단한 설정\nKonsist는 Gradle이나 Maven에 의존성을 추가하고, JUnit이나 Kotest와 같은 테스트 프레임워크와 연동하면 바로 사용할 수 있습니다. 복잡한 설정 과정 없이 빠르게 적용할 수 있기 때문에 새로운 도구를 도입할 때 진입 장벽이 낮습니다. 우리 팀도 Konsist를 처음 접한 날 바로 프로젝트에 적용 테스트를 진행할 수 있을 만큼 사용이 간단했습니다.\n구조적 규칙 검증\nKonsist는 기존 도구들이 다루기 어려운 프로젝트의 구조적 규칙을 검증할 수 있는 강력한 기능을 제공합니다. 예를 들어, 특정 레이어가 다른 레이어를 의존하지 않도록 규칙을 정의하거나, 클래스와 속성의 네이밍 규칙을 설정하고 이를 자동으로 검증할 수 있습니다. 이러한 기능은 프로젝트 구조와 일관성을 유지하는 데 큰 도움이 됩니다.\n효율성 향상\nKonsist를 활용하면 코드 리뷰 과정에서 반복적으로 지적해야 했던 많은 규칙 위반을 자동화할 수 있습니다. 이는 코드 리뷰의 품질을 높이는 동시에, 리뷰어가 더 중요한 논의나 설계 검토에 집중할 수 있도록 해줍니다. 덕분에 팀의 생산성과 효율성이 크게 향상되었습니다.\n단순하면서도 강력한 구조\nKonsist는 복잡한 학습 없이 바로 사용할 수 있는 단순한 구조로 되어 있습니다. 개발자는 검증해야 할 코딩 규칙을 정의하는 데만 집중하면 되며, 불필요한 설정이나 복잡한 사용법으로 인해 시간을 낭비하지 않아도 됩니다. 이는 도구를 처음 접하는 개발자들에게도 사용이 용이하다는 점에서 큰 장점으로 작용합니다.\nKonsist 활용 사례\n이 글의 목적은 Konsist를 자세히 소개하는 데 있지 않습니다. Konsist를 시작하는 방법이나 설치 가이드는 공식 홈페이지 에서 확인하실 수 있습니다. 대신, 이 글에서는 우리 팀이 Konsist를 활용하고 있는 몇 가지 사례를 통해, 이 도구를 어떻게 효과적으로 사용할 수 있을지 감을 잡을 수 있도록 도와드리고자 합니다.\n구조 컨벤션\n우리 팀은 명확하고 이해하기 쉬우며 유지보수성을 높일 수 있도록 아래처럼 단순한 프로젝트 구조를 사용하고 있습니다.\n\nDomain 레이어는 데이터 및 비즈니스 로직과 같은 도메인 로직을 처리하는 코드들이 위치하며,\nApplication 레이어는 표현 계층, Facade, 그리고 외부 리소스와의 연동을 담당하는 기반 코드들이 포함되어 있습니다.\n의존성 방향에 대한 규칙도 명확히 정의했습니다. Application 레이어는 Domain 레이어를 의존할 수 있지만, 반대로 Domain 레이어는 Application 레이어를 의존하지 않도록 컨벤션을 정했습니다.\n이러한 규칙을 코드로 표현하면 아래와 같습니다.\n\ntest(\"application 레이어는 domain 레이어를 의존한다.\") {\n    Konsist\n        .scopeFromProduction()\n        .assertArchitecture {\n            val application = Layer(\"Application\", \"com.spoqa.cart.application..\")\n            val domain = Layer(\"Domain\", \"com.spoqa.cart.domain..\")\n\n            application.dependsOn(domain)\n            domain.dependsOnNothing()\n        }\n}\n\n\n여담으로, 처음 구조 테스트를 실행했을 때 나름 코드 리뷰에서 꼼꼼하게 의존성 위반 여부를 점검했다고 생각했지만, 예상외로 다수의 의존성 위반 코드가 발견되었습니다. 이를 통해 코드 리뷰가 사람이 수행하는 작업인 만큼, 놓치는 부분이 생길 수밖에 없다는 점을 다시 한번 실감했습니다. 동시에, Konsist가 이런 문제를 효과적으로 해결할 수 있다는 점도 확실히 체감할 수 있었습니다.\n\nClass 컨벤션\n또한 우리 팀에서는 Entity 클래스나 테스트 클래스들은 여러 이유로 인해 특정 클래스를 필수적으로 상속받도록 강제하고 있습니다.\n\n@Entity\nclass Bill(\n    orderableVendor: OrderableVendor,\n    store: Store,\n    amount: BigDecimal,\n    type: BillType,\n    attachements: List<String>,\n) : BaseEntity()\n\n@Entity\nclass Role(\n    name: String,\n    permissions: Array<String>,\n) : BaseEntity()\n\n// ... 생략\n\nclass OrderSheetFacadeTest : UnitTestBase()\n\nclass AdminMutationTest : FunctionalTestBase()\n\nclass CartRepositoryTest(\n    private val cartRepository: CartRepository,\n    private val testEntityManager: TestEntityManager,\n) : RepositoryTestBase()\n\n// ... 생략\n\n\n위와 같은 컨벤션을 테스트하는 코드는 아래와 같습니다.\n\ntest(\"Entity 클래스는 BaseEntity 클래스를 필수로 상속한다\") {\n    Konsist.scopeFromProduction()\n        .classes()\n        .filter { it.hasAnnotationOf(Entity::class) }\n        .assertTrue(testName = this.testCase.name.testName) {\n            it.hasParentClassOf(BaseEntity::class)\n        }\n}\n\ntest(\"test 클래스는 Base 클래스 중 하나를 필수로 상속한다\") {\n    Konsist.scopeFromTest()\n        .classes()\n        .filter { it.name.endsWith(\"Test\") }\n        .assertTrue(testName = this.testCase.name.testName) {\n            it.hasParentClassOf(FunctionalTestBase::class) ||\n                it.hasParentClassOf(UnitTestBase::class) ||\n                it.hasParentClassOf(RepositoryTestBase::class) ||\n                it.hasParentClassOf(IndexRepositoryTestBase::class)\n        }\n}\n\n\nEntity Property 컨벤션\nKotlin으로 JPA를 사용하다 보면 종종 실수하기 쉬운 부분이 있습니다. 바로 JPA의 @Column 어노테이션에서 nullable 속성과 Entity 프로퍼티의 타입을 다르게 정의하는 경우입니다. 우리 팀은 이러한 실수를 방지하기 위해 아래와 같이 Declarations Test를 정의해 두었습니다.\n\ntest(\"Entity 클래스의 Column 프로퍼티가 non-nullable 타입이라면 '@Column(nullable=false)'가 선언되어야 한다\") {\n    Konsist.scopeFromProject()\n        .classes()\n        .withAllAnnotationsOf(Entity::class)\n        .properties()\n        .withAllAnnotationsOf(Column::class)\n        .filter { it.type?.isNullable == false }\n        .assertTrue {\n            it.hasAnnotation { annotation ->\n                annotation.hasArgument { arg ->\n                    arg.name == \"nullable\" && arg.value == \"false\"\n                }\n            }\n        }\n}\n\n\n이와 같이 테스트 코드를 작성하면 아래와 같이 어노테이션과 컬럼의 타입이 불일치하게 작성하는 경우를 효율적으로 방지할 수 있습니다.\n\n@Entity\nclass Admin(\n    email: String,\n    name: String,\n    role: Role?,\n) : BaseEntity() {\n    @Column\n    val email: String = email\n    \n    // ... 생략\n}\n\n\n\n마무리하며\nKonsist와 같은 도구는 팀이 코딩 컨벤션을 잘 지키도록 돕는 강력한 도구지만, 모든 문제를 해결할 수 있는 만능 솔루션은 아닙니다. 지나치게 세부적인 규칙은 생산성을 떨어뜨릴 수 있으며, 도구가 잡아내지 못하는 부분은 결국 사람이 검토해야 합니다.\n저희 백엔드팀은 Konsist, ktlint, SonarQube와 같은 도구를 적절히 조합하고, 코드 리뷰를 통해 이를 보완하면서 코딩 컨벤션을 지속적으로 발전시키고 있습니다. 이러한 과정은 단순히 코딩 규칙을 준수하는 것을 넘어, 팀의 협업 문화를 개선하고 더 나은 코드를 만드는 데 기여하고 있습니다.\n여러분의 팀은 코딩 컨벤션을 어떻게 관리하고 계신가요? 기회가 된다면 각자의 경험과 노하우를 공유하며 서로 배울 수 있는 시간이 있기를 기대합니다.\n긴 글 읽어주셔서 감사합니다.",
        "id": "https://spoqa.github.io/2024/11/18/coding-convention-story.html",
        "isoDate": "2024-11-18T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": []
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "부자는 반드시 사회에 환원해야 할까?",
        "link": "https://blog.toss.im/article/everyday-economics-20-noblesse-oblige",
        "pubDate": "Mon, 18 Nov 2024 01:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}이 글에서 알 수 있는 것들\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}연말에 자주 들리는 부자들의 기부 소식, 세금 회피가 목적이라 봐야 할까?\n부자들에게 사회적 환원을 강제하는 것, 이중 과세라 봐야 할까?\n부자가 된 개인, 기업이 사회에 기여하는 방법엔 어떤 것들이 있을까?\n\n\n.css-94on8q{white-space:pre-wrap;color:#c770e4;font-weight:bold;}에디터 G (이하 G): 교수님, ‘전 세계에서 가장 부자인 사람’이라는 말을 들으면, 누가 가장 먼저 떠오르시나요?\n.css-12p6bv8{white-space:pre-wrap;color:#15c47e;font-weight:bold;}교수 K (이하 K): 실제 부자 순위는 매년 달라지지만, 세계 최고의 부자라고 하면 역시나 ‘빌 게이츠’의 이름이 가장 먼저 생각나지 않을까 싶습니다.\n다들 잘 알고 있는 것처럼, 빌 게이츠는 마이크로소프트를 창업해 막대한 부를 쌓았는데요. 2024년 기준으로 그의 재산은 약 1,056억 달러로, 원화로는 무려 145조 원에 이른답니다.\nG: 정말 어마어마한 부를 창출해낸 부자네요. 세계 최고의 부자들로 이름이 알려진 사람들 중에서도 빌 게이츠가 특별한 이유가 있을까요? 교수님은 어떻게 생각하세요?\nK: 여러가지 이유가 있겠지만, 빌 게이츠가 특별하게 거론되는 이유는 다양한 기부 활동을 해왔기 때문인 것 같습니다. 빌 게이츠와 전 부인인 멀린다 게이츠는 빌 & 멀린다 게이츠 재단(Bill & Melinda Gates Foundation)을 설립하여, 전 세계의 질병 퇴치, 빈곤 문제 해결, 교육 기회 확대 등을 위해 수백억 달러를 기부해 왔어요. \n워런 버핏도 빌 게이츠와 손을 잡고 ‘더 기빙 플레지(the giving pledge)’ 캠페인을 통해 자신의 재산을 사회에 환원하기로 약속했으며, 이후에 많은 부자들이 동참하게 됩니다.\nG: 많은 부를 쌓은 사람들이 자신들의 재산을 자발적으로 사회에 환원하는 것은 멋진 일인 것 같아요. 사회에 긍정적인 영향을 가져다 주니까요.\nK: 맞아요. 하지만 한편으로는 부유층의 기부를 바라보는 부정적인 시각도 일부 존재합니다. 예를 들면, 부유층의 자선 활동이 세금 감면 등 경제적 혜택을 가져다 주기 때문에 이뤄진다는 거예요. 기부가 공익보다는 부유층의 개인적 선호와 영향력 확대에 사용될 가능성이 있다는 점에서, ‘진정한 의미의 사회적 환원인지’를 묻는 것이죠.\nG: 아하, 기부나 자선 사업의 근본적인 이유에 의문을 제기하는 입장이겠군요. 실제로 연예인이나 공인이 기부를 했다는 기사가 뜨면 “세금 회피가 목적이겠네”는 댓글이 종종 보이더라고요.\nK: 에디터 님은 어떻게 생각하세요? 많은 부를 축적한 개인이나 기업이 반드시 사회에 환원해야 할까요? 이 질문에 대해 찬성과 반대의 두 입장으로 나누어서 한번 살펴보도록 할게요.\n\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n1. 찬성 입장: \n부유한 개인이나 기업은 반드시 사회에 환원해야 한다.\nK: 가장 먼저 생각해 볼 수 있는 것은 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}‘공공재의 이용에 따른 사회적 책임’입니다. 현재의 경제 체제 하에서는 어떤 개인이나 기업도 온전히 자신의 힘만으로 부를 쌓았다고 주장할 수 없습니다. 어떤 식으로든 우리 사회가 무상으로 제공하는 공공 인프라를 이용해서 부를 축적했기 때문에, 자신의 재산 일부를 환원함으로써 사회적 책임을 다할 의무가 있다는 것이죠.\nG: 그렇겠네요. 개인이든 기업이든 사회를 함께 살아가는 구성원들이 힘을 합쳐 만든 인프라의 덕을 보는 것이니까요.\nK: 이 논리의 핵심은 바로 공공재입니다. 경제학에서는 재화를 경합성(rivalry)과 배제성(excludability)이라는 두 가지 기준을 사용해 분류하곤 하는데요. 여기서 ‘경합성’은 특정 재화에 대한 나의 소비가 다른 소비자의 사용에 영향을 미치는지를 의미하고요. ‘배제성’은 특정 개인이나 집단이 그 재화를 사용하지 못하도록 배제할 수 있는지를 의미합니다.\n이 두 가지 기준을 이용하면, 아래 그림과 같이 재화를 네 가지 유형으로 나눌 수 있어요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\nG: 들어본 것도 있고 처음 접하는 것도 있네요. 각 재화에 대해 좀더 자세히 설명해주실 수 있을까요?\nK: 그럼요. 먼저, 사유재(private goods)는 개인이 소유하고 사용하는 상품, 서비스를 말해요. 내가 돈을 주고 사면 다른 사람은 못 쓰는 물건이라 생각하면 됩니다. 우리가 시장에서 일반적으로 사고 파는 상품들이 대부분 여기에 속해요.\n사유재는 개인이 완전히 소유하고 관리할 수 있는 재화라서, 한 사람이 사용하면 다른 사람의 사용이 제한되는 등 경합성이 강한 편입니다. 그리고 가격을 지불해야만 소비할 수 있기 때문에 배제성도 강해요.\n두번째로 공공재(public goods)는 사유재와 완전히 반대예요. 누구나 자유롭게 이용할 수 있는 상품, 서비스죠. 아무나 이용할 수 있고, 그 누가 사용하더라도 다른 사람에게 큰 영향을 미치지 않습니다. 우리가 길에서 흔히 볼 수 있는 가로등, 누구나 들어갈 수 있는 공원, 정부가 국민을 위해 제공하는 국방 등이 공공재에 해당하죠.\n공공재는 누군가 소비하더라도 다른 사람이 동일한 재화를 소비하는 데에 제한이 없습니다. 경합성이 약해요. 또한 대가를 지불하지 않은 사람도 자유롭게 사용할 수 있기 때문에 배제성 또한 약합니다. 시장에서는 공급이 이루어지지 않기 때문에 주로 정부가 제공하게 돼요.\nG: 사유재, 공공재는 일상에서 늘 사용하고 있는 재화네요. 이해가 쉬워졌어요. 클럽재, 공유자원은 어떤건가요?\nK: 그 둘도 설명을 들어보시면 익숙한 개념일 거예요. 클럽재(club goods)는 제한된 일부 사람들만 이용할 수 있는 상품이나 서비스를 말해요. 클럽에 속한 ‘회원’들만 이용할 수 있는 시설이나 서비스 같은 건데요. 티빙이나 넷플릭스 같은 유료 OTT 서비스, 헬스클럽이나 골프장 등이 여기에 속합니다.\n클럽재는 경합성이 약하기 때문에, 특정 시점에 모든 사람들이 꽉 채워 사용하지 않는 이상 회원들이 다같이 이용할 수 있습니다. 즉, 여러 사람이 동시에 이용해도 서비스나 재화의 질이 크게 저하되지 않아요. 그러나 일정 비용을 내야만 사용할 수 있기 때문에 이용 권한이 제한되어 있어요. 누구나 사용할 수는 없다는 측면에서 배제성은 강합니다. 공공재와 사유재의 중간쯤 되는 재화라 보시면 돼요.\n마지막으로 공유자원(common resources)은 모두가 이용할 수 있지만, 사용할수록 줄어드는 재화를 말해요. 누구나 자유롭게 이용할 수 있지만, 덮어놓고 사용하면 부족해질 수 있는 자원이에요. 어업 자원(물고기)나 공공 목초지나 숲, 바다, 강물 등이 여기에 속합니다.\n공유자원은 경합성이 강하기 때문에, 한 사람이 소비하면 양이 줄어들어요. 다른 사람의 소비에 영향을 미치는 것이죠. 그리고 배제성은 약해서 누구나 자유롭게 돈을 내지 않고도 사용할 수 있습니다. 이런 재화는 ‘공유지의 비극(tragedy of commons)’이라 불리는 과잉 소비 문제가 발생할 수 있기 때문에, 이를 관리하기 위해 정부 개입이나 규제가 필요할 때가 많아요.\nG: 우리 사회를 이루고 있는 재화를 크게 네 가지로 나눠볼 수 있겠군요. 이번 아티클에서는 특히 ‘공공재’를 주목할 필요가 있을 것 같아요.\nK: 맞습니다. 부자들이 부를 축적하는 과정에서 무상으로 사용할 수 있는 것이 바로 공공재이기 때문인데요. 공공재의 주요 예시로는 교통 인프라, 법과 치안 시스템, 공교육 제도 등이 있습니다. 이러한 공공재는 개인이나 기업이 별도의 비용을 부담할 필요가 없기 때문에, 경제적 성공을 이루는 중요한 기반이 될 수 있습니다.\n실제로 많은 기업이 부를 축적하는 과정에서 이러한 공공재를 활용했습니다. 예를 들어, 대형 전자상거래 기업은 물류의 신속성과 효율성을 극대화하기 위해 도로와 공항 등의 교통 인프라를 필수적으로 사용합니다.\n이러한 인프라는 정부가 유지하고 관리하는데요. 기업은 이 공공재를 통해 물류 비용을 절감하고 빠른 배송 서비스를 제공할 수 있습니다. 이러한 교통망이 없었다면 물류 비용은 크게 증가했을테고, 소비자와의 접근성이 떨어지니 경쟁력 또한 낮아졌을 것입니다.\nG: 그렇겠네요. 이미 정부가 깔아둔 도로나 교통 인프라 덕분에 기업의 물류 시스템이 작동할 수 있는 것이니까요.\nK: 또한 많은 기업들이 법적 시스템을 통해 지적 재산권을 보호받고 있습니다. 막대한 비용을 쏟아 부은 연구 개발의 성과를 특허로 보호받음으로써, 경쟁력 있는 기술을 유지할 수 있는 것이죠. 기업의 혁신과 기술 보호에 꼭 필요한 안정적인 법과 치안 시스템은 세금으로 운영되는 대표적인 공공재입니다.\n공교육 제도 또한 넓게 보면 기업들이 이용할 수 있는 공공재라 할 수 있습니다. 기업이 지속적으로 성장하고 기술 혁신을 이루어내기 위해서는 우수한 인적 자원이 필수적인데요. 한 명의 우수한 인적 자원을 양성하기 위해서는 초등학교부터 대학교까지 오랜 시간이 소요됩니다. 이 과정에서 공적 재원이 투입된 공교육 제도가 중요한 역할을 하고 있죠.\nG: 공공재 관점에서 보면, 부자가 된 개인이나 기업은 무상으로 제공된 교통 인프라, 법과 치안 시스템, 교육 제도 등을 활용하여 부를 축적해 왔다고 할 수 있겠군요.\nK: 이러한 공공재는 단순히 개인의 성공을 위해 존재하는 것이 아닙니다. 사회 전체를 위해 제공되는 자원이죠. 따라서 부유층이 자신의 부를 사회에 환원함으로써, 자신들이 얻은 이익을 다시 사회에 투자하는 것은 공공재 활용에 상응하는 사회적 책임으로 볼 수 있는 것입니다.\n한편, ‘경제적 안정성과 소득 불평등 관점’에서 부의 환원에 대해 생각해 볼 수도 있습니다. 소득 불평등이 심화되면 경제 성장이 둔화될 수 있습니다.\n이 때 부유한 개인이나 기업이 자신들의 부를 사회에 환원하면, 단기적으로는 자산이 줄어들 수 있지만 장기적으로는 소득의 재분배를 통해 중산층의 소비 능력을 강화시킴으로써 경제적 불안정성을 줄이고 경제 성장에도 기여할 수 있습니다.\n결국 부의 사회적 환원을 통해 경제 전체의 파이를 키우게 되면, 나중에는 부자들에게 긍정적인 부메랑이 되어 돌아온다는 입장인 것이죠.\n\n2. 반대 입장: \n부유한 개인이나 기업이 사회에 환원할 필요는 없다.\nG:.css-1mgq6qf{white-space:pre-wrap;color:#c770e4;} 찬성 입장에 대해 충분히 이해가 됐어요. 반대 입장은 어떤 관점에서 살펴보면 될까요?\nK: 부유한 개인이나 기업에게 사회적 환원을 강제하는 것은 자유 시장 경제 원칙을 훼손할 수 있다는 관점입니다.\n자본주의 시스템에서는 개인과 기업이 자신의 노력과 창의성을 통해 부를 축적하는 것이 장려됩니다. 강제적 환원은 경제적인 동기 부여를 약화시키고, 기업가 정신(entrepreneurship)을 저해할 수 있다는 것이죠.\n또한 예전에 ‘.css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}왜 세금은 소득에 따라 달라질까?’ 아티클에서 살펴본 것처럼, 부자들은 이미 상당한 수준의 소득세와 법인세 등을 납부하고 있습니다. 그리고 이들이 납부한 세금은 공공재 투자를 비롯하여 다양한 방식으로 사회에 기여하고 있죠.\nG: 아하, 이러한 상황에서 이들에게 사회적 환원을 강제하는 것은 일종의 이중 과세가 될 수 있다는 것이겠네요.\nK: 그렇습니다. 그리고 이러한 시각에서는 부의 사회적 환원이 도덕적·윤리적 의무로 간주될 수는 있지만, 법적·경제적 의무로 강제되어서는 안된다고 말합니다. 누구나 자신의 자산을 어떻게 사용할지에 대한 선택권을 갖고 있을 뿐만 아니라, 자신에게 맞는 방법으로 사회에 기여하는 것이 더 효율적이기 때문이죠.\n예를 들면, 스티브 잡스는 다른 세계적인 부자들과 비교했을 때 공개적인 방식을 통한 자선 활동에는 크게 관여하지 않은 것으로 알려져 있습니다. 그러나 그는 애플을 통해 혁신적인 제품을 개발하고 사람들에게 많은 영감을 주었으며, 경제 성장에 기여하기도 했습니다. 스티브 잡스의 사례는 굳이 개인적인 기부가 아니더라도 기업 활동을 통해 얼마든지 사회에 더 큰 기여를 할 수 있음을 보여줍니다.\n지금까지 많은 부를 축적한 사람이나 기업이 사회에 반드시 환원을 해야하는지에 대한 찬성과 반대의 논리를 살펴봤는데요.\n정리해보면 찬성 입장은 (1) 부유층의 사회적 책임과 (2) 불평등 완화 등을 강조하며 환원의 필요성을 주장합니다. 반면, 반대 입장은 (1) 자유 시장 원칙과 이중 과세, (2) 자발적 기부의 중요성 등의 이유로 사회적 환원을 강요하는 것에 반대합니다.\n결론적으로, 부의 사회적 환원 문제는 단순히 \"해야 한다\" 혹은 \"하지 말아야 한다\"로 나뉠 수 없는 까다로운 경제적·윤리적 논쟁이라고 할 수 있겠습니다. 여러분의 생각은 어떤가요?\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고자료\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이제현",
        "content": "찬성과 반대 입장에서 각각 어떤 논리를 펼치는지 살펴볼게요.",
        "contentSnippet": "찬성과 반대 입장에서 각각 어떤 논리를 펼치는지 살펴볼게요.",
        "guid": "https://blog.toss.im/article/everyday-economics-20-noblesse-oblige",
        "isoDate": "2024-11-18T01:00:00.000Z"
      },
      {
        "title": "토스씨엑스-SH, 자립준비청년 위한 금융교육 진행",
        "link": "https://blog.toss.im/article/tosscx-csr",
        "pubDate": "Sun, 17 Nov 2024 01:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}경제적 자립 돕기 위해 재무설계, 자산관리, 금융사기 예방법 등 교육\n토스씨엑스, “금융 사각지대에 놓인 이들을 위한 실질적 지원 꾸준히 이어갈 것”\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n비바리퍼블리카(토스)의 비대면 금융 상담 전문 계열사 토스씨엑스(대표 강희진)가 서울주택도시공사(이하 SH)와 손잡고 자립준비청년을 위한 금융교육을 두 차례 진행했다고 17일 밝혔다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n자립준비청년은 만 18세가 돼 아동양육시설 등 보호시설을 퇴소하고 독립해야 하는 이들을 말한다. 보호기간 종료 후 자립 과정에서 금융 및 주거 사각지대에 놓이게 되는 경우가 많다. 토스씨엑스와 SH는 이들의 안정적인 경제적 자립을 돕는 취지에서 이번 금융교육을 진행했다. 서울특별시와 SH가 추진하는 주거안심동행 민관협력사업의 일환이기도 하다.\n지난달 25일과 이달 15일 두 차례에 걸쳐 진행한 금융교육엔 토스씨엑스 직원들이 강사로 나섰다. 이들은 자립준비청년의 재무설계와 자산관리, 현명한 소비관리와 신용관리를 도와주고 전세보증금 사기 등 각종 금융사기 예방법 및 대처방법을 구체적으로 교육했다.\n교육에 참가한 한 자립준비청년은 “이번 금융교육은 앞으로 금융 생활을 하는데 실질적인 도움이 될 내용이 많아 좋았다”며 “특히 어려운 용어는 쉽게 풀어 설명해주고 이해하기 쉽게 사례 중심으로 알려줘 지루할 틈이 없었다”고 말했다.\n김진원 토스씨엑스 소비자보호 총괄은 “기초 금융 지식을 비롯해 폭넓은 유형의 금융 사고를 최전선에서 대응하며 익힌 노하우로 자립준비청년의 금융 이해도를 높이고 경제적 자립 역량을 키워나갈 수 있도록 도울 것”이라며 “앞으로도 금융 사각지대에 놓인 이들을 위한 실질적인 지원 방안을 고민하고 실행해 나갈 계획”이라고 말했다.",
        "content": "주거안심동행 민관협력사업의 일환",
        "contentSnippet": "주거안심동행 민관협력사업의 일환",
        "guid": "https://blog.toss.im/article/tosscx-csr",
        "isoDate": "2024-11-17T01:00:00.000Z"
      },
      {
        "title": "금테크의 모든 것: 왜 지금 금값이 오르고 있을까?",
        "link": "https://blog.toss.im/article/economic-terms-36-gold-investing",
        "pubDate": "Thu, 14 Nov 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-p4abj2{display:contents;line-height:1.55;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}🔖 이번 주 경제 용어\n금테크\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}이번 주 경제 용어는 글로벌 경제를 파악하기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n금을 활용한 재테크를 의미해요.\n\n\n최근 초대받은 돌잔치에 돌반지를 선물할까 말까 고민해보셨나요? 올해 금값이 계속 오르더니 1분기에는 한 돈짜리 돌반지가 40만 원을 기록했고, 10월 말 기준으로는 60만 원까지 치솟았습니다.\n금값이 부담스러워 돌반지도 이제는 가족이나 가까운 친구에게조차 쉽게 선물할 수 있는 선택지가 아니게 된 것 같아요.\n최근 금 가격은 역대 최고 시세를 경신했습니다. 한국금거래소에 따르면 금 1돈당 가격이 10월 30일 기준 약 52만 원에 거래되었어요. (매수 기준) 11월 중순 기준 가격이 조금 내려와서 40만 원 중반대이고요.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}* 금을 매수할 때 부가적으로 붙는 돈이 조금씩 달라요. 현물 금은 부가세 10%, 반지나 목걸이 같은 장신구는 세공비가 붙습니다.\n금값의 상승세에는 여러 요인이 있습니다. 그중 하나는 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}미국 연준의 금리 인하입니다. 미 연방준비제도(Fed)가 기준금리를 0.5%p 내리면서 달러 가치가 약세를 보였죠. 달러 약세는 안전 자산인 금의 수요를 증가시키며 금값을 끌어올렸습니다.\n또한 미국 대선의 불안정과 이스라엘-이란 간의 갈등이 추가되며 사람들의 불안감이 점점 커지고 있습니다. 역사가 증명하듯, 불안정한 국제 정세는 금값을 끌어올리는 핵심 요소입니다. 몇 가지 주요 사건을 살펴볼까요.\n1970년대 중동 지역의 지정학적 불안정성으로 유가가 급등하면서, 오일 쇼크가 두 차례(1973년, 1979년) 발생했는데요. 물가가 치솟자 안전자산인 금에 대한 수요가 급증하면서 금값이 크게 상승했습니다.\n2008년 글로벌 금융 위기 때도 마찬가지로, 전통 금융 시스템에 대한 신뢰가 흔들리면서 금에 대한 수요가 크게 증가했어요. 장기적으로 금 가격이 상승세를 보였었죠.\n2020년 코로나19 때도 팬데믹이 길어지면서 경제 침체기가 이어졌습니다. 경제 불확실성이 높아지면서 시장에 돈이 돌지 않자 당시 각국 중앙은행 및 정부는 막대한 규모의 유동성을 시장에 푸는 정책을 펼쳤어요. 경제를 안정시키기 위함이었죠. 금리를 사상 최저 수준으로 낮추고, 대규모 자산 매입 프로그램으로 시장에 돈을 풀었습니다. 이러한 경제 흐름은 인플레이션을 불러올 수 있다는 우려를 동반합니다. 통화 가치가 떨어지고, 물가가 상승할 가능성이 높아지죠. 이에 대비해 일부 투자자들은 안전자산 금에 대한 투자를 늘리기 시작했어요.\n결론적으로 올해 가파른 금값 상승 배경에는 ‘글로벌 경제의 불확실성’이 자리하고 있는 것으로 보입니다. 불확실성이 커질수록 금은 안전자산으로서의 가치를 발휘하며 수요가 늘어날 수밖에 없기 때문이에요.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n🏅 금테크 기본 상식\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n금 1돈의 중량은 3.75g입니다.\n국제 금 거래는 온스(oz)로 31.11g입니다.\n국내 금 시세는 환율과 국내 수급에 따라 차이가 있을 수 있습니다.\n금은 배당과 이자가 없고 다른 자산 대비 수익률이 낮은 편이므로, 장기적으로는 실물 금 외의 다양한 금 투자 방식도 고려해볼 필요가 있습니다.\n\n\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}\"테슬라 뺨치는 투자\"…함평 '황금박쥐상' 몸값 27억→231억 '훌쩍'\n(서울경제 2024.10.28)\n전남 함평에서 대표 상징물로 꼽히는 '황금박쥐상'이 금값 상승으로 몸값이 10배 가까이 뛰었다.\n28일 한국표준금거래소에 따르면 26일 구매기준 순금은 1g당 13만9733원으로 1년전(9만7866원)보다 42% 올랐다. 은도 같은 기간 53% 오르며 1g당 1741원에 거래됐다.\n이에 따라 2008년 제작한 전남 함평의 황금박쥐상 가격은 231억원으로 뛰어올랐다.\n황금박쥐상은 천연기념물이자 멸종위기 1급인 황금박쥐 162마리가 1999년 함평에서 발견된 것으로 기념해 제작됐다.\n높이 2.18m, 폭 1.5m의 황금박쥐상은 제작하는 데 순금 162kg, 은 281kg이 사용됐다. 당시 27억원의 세금이 투입돼 '혈세 낭비'란 지적이 잇따랐으나 이젠 10배 가까운 수익을 눈앞에 두면서 '테슬라·엔비디아'에 비견되는 성공적인 투자란 평가가 나오고 있다.\n아울러 황금박쥐상을 만들고 남은 금 19.31kg, 은 8.94kg, 보석 0.19kg 등을 활용해 2010년 제작한 조형물 '오복포란'의 가격도 26억 9824만원으로 부쩍 뛰었다. (중략)\n\n\n2008년, 함평군에서 황금박쥐상을 만들 때 과도한 예산 낭비라고 논란이 일었습니다. 그런데 금값이 상승하며 의도치 않게 ‘지자체 금테크’ 사례로 이목이 집중되고 있어요.\n재밌게도 황금의 기운을 받으려는 관광객들이 황금박쥐상을 보러 오면서 함평군의 다른 관광지까지 둘러보게 되고, 이제 황금박쥐상이 지역 경제에 크게 기여하고 있다고 합니다.\n여기서 하나 배울 수 있는 건, ‘금은 생각보다 훨씬 쏠쏠한 투자 대상이 될 수 있다’는 겁니다. 어쩌면 우리도 이미 알게 모르게 금테크를 시작했을지도 모릅니다. 바로 첫돌에 받았던 돌반지가 실물 금 투자의 시작이었던 셈이지요.\n돌반지로 시작된 금테크, 이제는 좀 더 다양한 방법으로 확장해 볼까요? 금은방 거래에서부터 골드뱅킹, 금 펀드·ETF, 그리고 KRX 금시장에 이르기까지 금 투자 방법은 여러 가지가 있습니다. \n금테크에 관심을 가지고 투자를 시작해보고 싶은 분들을 위해, 추천 목록을 정리해봤어요. 꼼꼼히 살펴보시고 내게 맞는 방법을 선택하시길 바랍니다.\n\n🏅 금테크 추천 목록\n\n실물 금을 보유하고 싶고, 실용적으로 투자하고 싶다면 👉 금은방\n복잡한건 싫고, 금테크 투자에 있어 편의성을 최우선으로 생각한다면 👉 골드뱅킹\n증권 거래가 익숙하고, 환금성(자산의 현금화)을 중요하게 여긴다면 👉 금 펀드·ETF\n금 시세 변동에 익숙하고 유연하게 투자할 준비가 되어 있으며, 수익률이 최우선이라면 👉 KRX 금 시장\n\n\n금은방 거래: 실물 금을 직접 구매하는 가장 일반적인 방법입니다. 골드바나 금반지·금목걸이 같은 장신구 형태로도 구입할 수 있습니다.\n골드바의 경우 실물 금이기 때문에, 구입할 때 부가가치세 10%가 붙고 수수료도 발생합니다. 투자로서는 수익률이 떨어질 수 있습니다. 장신구는 세금이나 수수료는 없지만, 세공비가 추가됩니다. 구입할 때 같은 무게의 순금보다 비쌀 수 있어요.\n골드뱅킹: 은행에서 금을 0.01g 단위로 저축할 수 있는 방식입니다. 실물 금을 직접 보유하지 않고, 예금 통장에 금액을 입력해 주식처럼 관리할 수 있는 것이 특징입니다.\n다만, 투자 수익에는 배당소득세 15.4%와 수수료가 부과됩니다. 실물 금으로 인출 시 부가가치세 10%가 추가되고요.\n금 펀드·ETF: 실물 금 대신, 금 관련 펀드나 ETF 상품을 통해 투자하는 방법입니다.\n금 펀드는 전문 자산운용사가 금에 투자해 수익을 배분합니다. 투자 수익률에 따른 운용 보수와 수수료가 부과되고, 팔 때 배당소득세 15.4%가 발생해요.\n금 ETF는 주식처럼 증권사에서 거래할 수 있습니다. 1주 단위로 거래할 수 있어요. 국내 주식 수수료와 운용 보수가 발생하고, 금 펀드와 마찬가지로 팔 때 배당소득세 15.4%가 매겨져요.\n유의해야 할 점은 금 펀드·ETF는 증권 거래를 통해 투자하는 형태라, 실물 금으로 인출할 수가 없다는 것입니다. 실물 금을 금고 등에 직접 보관해야 하는 수고로움은 덜 수 있지만, 투자한 금액을 실물 금으로 바꿀 수는 없기 때문에 이런 특징을 미리 알아두고 투자 결정을 하는 것이 좋겠습니다.\n한국거래소(KRX) 금 시장: 한국거래소의 금을 주식처럼 증권앱에서 1g 단위로 매매할 수 있는 시장입니다.\n비교적 낮은 거래 수수료와 비과세 혜택이 있어, 수익률 측면에서 가장 효과적인 금 투자 방식으로 꼽힙니다. 실물 금으로도 인출할 수 있고요. 다만, 실물 금으로 인출할 때에는 부가가치세 10%가 부과됩니다.\n거래소 금시장은 금 시세 변동에 따라 유연하게 투자할 수 있기 때문에, 많은 금테크 투자자들에게 인기를 얻고 있습니다.\n\n\n\n순금: 24K 금으로 순도 99.9% 이상의 순수한 금을 말해요. 금의 순도는 'K' (Karat) 단위이며, 순도가 높을수록 금의 함량이 높아요. 장신구에서 많이 볼 수 있는 18K는 순도 75%의 금, 14K는 순도 58.5%의 금을 말한답니다.\n골드바: 금을 덩어리 형태로 가공한 투자용 금이에요. 세공비가 붙지 않아 상대적으로 저렴하게 순금에 투자할 수 있는 방식입니다. 100g (약 1,400만원),1kg(약 1억 4,000만원) 골드바가 가장 많이 거래되는 단위예요\n귀금속: 금, 은, 백금 등 희소성과 가치가 높은 금속들이에요. 주로 투자와 장신구로 사용되며, 금과 은은 안전자산으로 투자자들에게 인기가 높은 편입니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "순금에서 금 ETF까지, 다양한 금테크 투자 방식과 장단점도 알려드릴게요.",
        "contentSnippet": "순금에서 금 ETF까지, 다양한 금테크 투자 방식과 장단점도 알려드릴게요.",
        "guid": "https://blog.toss.im/article/economic-terms-36-gold-investing",
        "isoDate": "2024-11-14T02:00:00.000Z"
      },
      {
        "title": "토스, 3분기 연결 영업수익 5,021억 원",
        "link": "https://blog.toss.im/article/2024-3Q",
        "pubDate": "Thu, 14 Nov 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}토스 서비스 전반에 걸쳐 고른 성장… 3분기 연결 누적 영업수익 1조4천억 원 돌파\n3분기 연결 영업이익 109억 원, 연결 당기순이익 39억 원 넘어서며 흑자 전환\n\n\n모바일 금융 서비스 토스를 운영하는 비바리퍼블리카(이하 토스)가 3분기 연결 영업수익 5,021억 원을 기록, 전년 동기 대비 47.5% 성장하며 분기 최대 실적을 달성했다고 14일 밝혔다.\n연결 누적 영업수익은 1조4,163억 원을 기록했다. 이는 2023년 연결 누적 영업수익 1조3,707억 원을 상회하는 수치다. 토스의 광고, 간편결제(토스페이), 대출중개 등 컨슈머 서비스 전반이 고르게 성장한 결과다. 특히 1,910만 월간 활성 이용자 수(Monthly Active Users, MAU)를 바탕으로 한 광고 서비스의 빠른 성장세가 주효했다.\n3분기 연결 영업이익은 109억 원, 연결 당기순이익은 39억 원으로 분기 기준 흑자 전환에도 성공했다. 이는 토스증권 등 계열사의 실적 호조가 일조했다. 토스증권은 해외 주식 위탁매매 부문 성장이 전체 실적 개선을 견인하며 같은 기간 296억 원의 영업이익을 기록했다.\n토스 이승건 대표는 “토스 서비스의 고른 성장 및 계열사 및 관계사들의 실적 호조로 분기 최대 매출 달성과 더불어 분기 영업이익 및 당기순이익 흑자를 기록했다”라며 “매출과 수익성을 모두 확보하는 플랫폼 본연의 건강한 성장을 이어갈 수 있도록 노력하겠다”라고 전했다.",
        "content": "분기 최대 실적 기록",
        "contentSnippet": "분기 최대 실적 기록",
        "guid": "https://blog.toss.im/article/2024-3Q",
        "isoDate": "2024-11-14T00:00:00.000Z"
      },
      {
        "title": "토스, 학생 대상 Apple 프로모션",
        "link": "https://blog.toss.im/article/APPLE-",
        "pubDate": "Thu, 14 Nov 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}1995년~2010년생 대상 Apple 주요 제품 5종 할인 행사\n11월 14일부터 12월 28일까지 최대 17% 할인 혜택 제공\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n모바일 금융 서비스 ‘토스'를 운영하는 비바리퍼블리카(이하 ‘토스’)가 학생을 대상으로 Apple 제품 할인 프로모션을 진행한다고 14일 밝혔다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n1995년생~2010년생을 대상으로 하는 이번 프로모션에서는 △iPad 10세대 △iPad Air 11” M2 △Apple Pencil Pro △Magic Keyboard 등 Apple 인기 제품을 선보인다. MacBook Air(13 M2 모델)도 11월 중 할인 품목에 추가될 예정이다.\n행사 제품은 최대 17% 할인된 가격으로 토스 앱 및 오프라인 매장에서 구매할 수 있다. 토스 앱에서는 Apple 학생 전용관을 통해 토스페이로 결제하면 자동으로 할인이 적용된다. 프리스비, 이마트(일렉트로마트), 하이마트 등 오프라인 매장에서는 토스 앱 내 Apple 학생 전용관에서 다운로드한 바코드를 제시하면 된다.\n중고등학생은 별도 인증없이 할인 적용 가능하고 대학생(만 20세~29세)은 이메일로 학생 인증 후 프로모션 혜택을 받을 수 있다. 행사 첫날인 11월 14일 18시부터 상품 구매 가능하며, 12월 28일까지 프로모션이 진행된다.",
        "content": "최대 17% 제품 할인",
        "contentSnippet": "최대 17% 제품 할인",
        "guid": "https://blog.toss.im/article/APPLE-",
        "isoDate": "2024-11-14T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]