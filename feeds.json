[
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Irina Mariasova",
        "title": "Java Annotated Monthly – June 2025",
        "link": "https://blog.jetbrains.com/idea/2025/06/java-annotated-monthly-june-2025/",
        "pubDate": "Fri, 06 Jun 2025 14:07:43 +0000",
        "content:encodedSnippet": "Hi there, Java fans! It’s a new month, which means we’ve got a new batch of hot news, deep dives, and tasty tidbits from the Java world for you to enjoy. In this edition, Piotr Przybył joins us in the Featured Content section to share his cultivated list of content finds. We’re also testing a new, more concise format that is faster to read but still packed with value. Let us know if you like it or miss the old style. \nReady? Let’s go!\nFeatured Content\nPiotr Przybył\nPiotr Przybył – Notorious engineer at work and after hours, tracing the meanders of the art of software engineering. Remote Software Gardener, mostly working in web-oriented Java gardens. Java Champion. Testcontainers Champion. Programming usually in Java (since 1.3), Scala, and Go, but in other languages too. A fan of agility, seen mostly as choosing the right tools and approaches after asking the right questions. Developer, trainer, and conference speaker, currently working for Elastic as a Senior Developer Advocate.\nGreetings, fellow Java developers! It’s a pleasure to be here. It’s exciting to be in the Java community, for a language that celebrated its 30th anniversary, which has been proclaimed to be dead so many times, and it’s still doing surprisingly well. We can see that with all the exciting stuff happening around Java 25, and changes in the ecosystem at large.\nI’m humbled and honoured to be here. It’s great to see the community and the ecosystem evolve, especially given that I’ve been a part of it since (checks notes…) 2003 ;-)\nI was first exposed to Java at my alma mater, Wrocław University of Science and Technology. Recently, there’s been one more reason to be a proud alumnus: “Odra 5”!\n“Odra 5” is the name of Poland’s first quantum computer, recently launched at the Wrocław University of Science and Technology. It’s a five-qubit machine, developed by Finnish company IQM Quantum Computers, that represents a significant milestone in the advancement of quantum computing in Central and Eastern Europe. I find the name cute and not without meaning for local IT history fans. You can read more about it here at the University’s official page. Also, “Odra” is the Polish name for the Oder river, and… computers manufactured in Wrocław in the 1960s.\nLet’s get back from general Computer Science to Java. Unless you have been living in total wilderness, I think you might have heard a thing or two about the AI (r)evolution happening recently. ;-) Contrary to some rumours, Java is a very decent language that benefits from improvements in this area, and with the release of Spring AI 1.0, things will get even easier! The article by Josh Long, Philipp Krenn, and Laura Trotta (I know, and have lots of respect for all of them) will let you understand how to start with your own RAG quickly, benefiting from features of Spring AI, Elasticsearch, and more. Oh, and if you’d like to learn more about stuff like vector search or searching in general, AI, and so on, Elasticsearch Labs might be a good place to start.\nSpeaking about Java itself, there’s of course the 30th anniversary of Java! It’s a big thing, although it might be disturbing to some that the language that keeps dying is still pretty much alive and actively developed. Right now, there are 17 active Java Enhancement Proposals targeting Java 25, which in my opinion proves that despite its size and legacy, the Java ecosystem is still evolving fast. I couldn’t resist, and wrote about Java’s Structured Concurrency, Elasticsearch Java client, DevEx, and a Developer Advocate’s job on my personal page, touching on all of this.\nI think that some reasons why our ecosystem is still robust are that we can learn from our past mistakes. While some of them are irreversible, many of them can shape how we think and evolve our systems and our daily jobs. A great example is the Allegro folks sharing how to avoid mistakes in Gradle, because with flexibility comes responsibility. And also, our tech stack and our jobs are not only the language, the SDK, the frameworks, and build/CI/CD tools, but predominantly our mindset. That’s something we shall all keep improving!\nJava News\nCheck out the most recent news from the Java world: \nJava News Roundup 1, 2, 3, 4\nJava at 30: A Retrospective on a Language That Has Made a Big Impact \nFoojay Podcast #71: Celebrating 30 Years of Java with James Gosling\nJava 30 by JetBrains\nHappy 30th Birthday, Java!\nJava’s 30th Birthday\nJava at 30: The Genius Behind the Code That Changed Tech\nStrings Just Got Faster\nJEP targeted to JDK 25: 511: Module Import Declarations\nJEP targeted to JDK 25: 512: Compact Source Files and Instance Main Methods\nJEP targeted to JDK 25: 505: Structured Concurrency (5th Preview)\nJEP targeted to JDK 25: 513: Flexible Constructor Bodies\nJava 25 Introduces Stable Values API for Deferred Immutability and Improved Application Startup \nInstance Main Methods Move from Preview to Final in JDK 25\nJEP 510: Key Derivation Function API\nStructured Concurrency Revamp in Java 25 – Inside Java Newscast #91\nJava Tutorials and Tips\nLearn new things and enjoy unique insights from industry experts: \nEpisode 35 “Stream Gatherers” with Viktor Klang\nOracle’s new certification exam engine\nAdoption of the Model Context Protocol Within the Java Ecosystem\nPresentation: Stream All the Things — Patterns of Effective Data Stream Processing\nJavaFX 24 and Beyond\nGarbage Collection in Java: The Performance Benefits of Upgrading\nMastering JVM Memory Troubleshooting – From OutOfMemoryErrors to Leaks\nEpisode 36 “Ahead of Time Computation” with Dan Heidinga\nJava 24, Faster Than Ever\nStructured Concurrency in Action\nPattern Matching in Java: Better Code, Better APIs\nTowards a JSON API for the JDK\nKotlin Corner\nEverything you might have missed about Kotlin in May:\nKotlinConf 2025 Unpacked: Upcoming Language Features, AI-Powered Development, and Kotlin Multiplatform Upgrades\nMeet Koog: Empowering Kotlin Developers to Build AI Agents \nStrengthening Kotlin for Backend Development: A Strategic Partnership With Spring Present and Future of Kotlin for Web \nAmper Update, May’25 \nHow to Use Kotlin Notebooks for Productive Development \nStructuring Ktor Projects Using Domain-Driven Design (DDD) Concepts \nKotlin LSP – The launch of the pre-Alpha Kotlin LSP and VS Code plugin. \nAI\nLearn more about the most recent AI news, innovations, problems, and predictions:\nA Practical Guide on Effective AI Use – AI as Your Peer Programmer\nWorking with Junie in legacy code\nHelp Predict the Future of AI in Software Development!\nVibe coding an MCP server with Micronaut, LangChain4j, and Gemini\nJava for AI\nBuild AI Apps and Agents in Java: Hands-On with LangChain4j\nFrom Architecture to Deployment: How AI-Powered Toolkits Are Unifying Developer Workflows\nPodcast: How To Improve the Quality of the Gen AI-Generated Code And Your Team’s Dynamics\nGenAI blood, sweat, and tears: Loading data to Pinecone\nMeet Koog: Empowering Kotlin Developers to Build AI Agents\nJetBrains AI Assistant – Now in Visual Studio Code\nWrite AI agents in Java — Agent Development Kit getting started guide\nHow to send prompts in bulk with Spring AI and Java Virtual Threads\nBeyond the chatbot or AI sparkle: a seamless AI integration\nAI Test Generation: A Dev’s Guide Without Shooting Yourself in the Foot\nThings you never dared to ask about LLMs — Take 2\nEthics in AI’s Wild West: Biases & Responsibilities\nContext Collection Competition by JetBrains and Mistral AI\nBrokk: AI for Large (Java) Codebases \nLanguages, Frameworks, Libraries, and Technologies\nGet to know programming technologies and frameworks better:\nThis Week in Spring 1, 2, 3, 4\nHow to send prompts in bulk with Spring AI and Java Virtual Threads\nDynamic Tool Updates in Spring AI’s Model Context Protocol\nGradle Best Practices – A Path to Build Happiness\nSemantic Search with Spring Boot & Redis\nLocal AI with Spring: Building Privacy-First Agents Using Ollama\nA Bootiful Podcast: V Körbes on security from the platform on up\nWhat is RAG, and How to Secure It\nConferences and Events\nHere are some of the must-attend online and offline events in June:\nIntelliJ IDEA Conf – Online, June 3–4\nJ-Spring – Utrecht, Netherlands, June 5; Anton Arhipov is a speaker. \nLe Paris JUG Java Day – Paris, France, June 5\nJConf Méx – Nuevo México, Mexico, June 7\nDevoxx Poland – Krakow, Poland, June 11–13; Anton Arhipov and Marit van Dijk are the speakers. \nDevConf – Brno, Czechia, June 12–14\nJSail Unconference – Hemelum, Netherlands, June 23–27\nVoxxed Days Luxembourg – Mondorf-les-Bains, Luxembourg, June 19–20\nCulture and Community\nTake some time to think about the non-tech topics that are of significance to tech people at the moment:\nImposter Syndrome in Tech\nAchieving Sustainable Mental Peace in Software Engineering with Help from Generative AI\nBe a Distinguished Java Engineer in the Age of Vibe Coding\nBuilt to Outlast: Cultivating a Culture of Resilience\nBook Review: Raising Young Coders\nFrom Code to Charisma: Emotional Mastery for Tech Leaders\n97 Jokes Every Programmer Should Know\nConversations I’ve had with Code\nWhat Can AI Do to Improve Diversity in the Tech Community?\nAnd Finally…\nDon’t miss the latest updates from the IntelliJ IDEA team: \nSources, Bytecode, Debugging\nDo You Really Know Java?\nCoding Guidelines for Your AI Agents\nFinding Your Tribe – JUGs Unveiled \nThe IntelliJ IDEA 2025.2 Early Access Program Is Open!\nTry Declarative Gradle EAP3 in IntelliJ IDEA\nBuilding Cloud-Ready Apps Locally: Spring Boot, AWS, and LocalStack in Action\nThat’s it for today! We’re always collecting ideas for the next Java Annotated Monthly – send us your suggestions via email or X by June 20. Don’t forget to check out our archive of past JAM issues for any articles you might have missed!",
        "dc:creator": "Irina Mariasova",
        "content": "Hi there, Java fans! It’s a new month, which means we’ve got a new batch of hot news, deep dives, and tasty tidbits from the Java world for you to enjoy. In this edition, Piotr Przybył joins us in the Featured Content section to share his cultivated list of content finds. We’re also testing a [&#8230;]",
        "contentSnippet": "Hi there, Java fans! It’s a new month, which means we’ve got a new batch of hot news, deep dives, and tasty tidbits from the Java world for you to enjoy. In this edition, Piotr Przybył joins us in the Featured Content section to share his cultivated list of content finds. We’re also testing a […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=573599",
        "categories": [
          "news",
          "ai",
          "java",
          "java-annotated-monthly"
        ],
        "isoDate": "2025-06-06T14:07:43.000Z"
      },
      {
        "creator": "Maria Kosukhina",
        "title": "IntelliJ IDEA 2025.1.2 Is Out!",
        "link": "https://blog.jetbrains.com/idea/2025/06/intellij-idea-2025-1-2/",
        "pubDate": "Wed, 04 Jun 2025 14:08:58 +0000",
        "content:encodedSnippet": "IntelliJ IDEA 2025.1.2 has arrived with several valuable fixes.\nYou can update to this version from inside the IDE, using the Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our website.\nHere are the most notable updates included in this version:\nThe IDE no longer fails to start if a plugin defines an action with unresolved message bundle keys, and it now provides a report identifying the problematic plugin. [IJPL-185981]\nThe IDE no longer produces the false positive “Package is declared in module which is not in the module graph” warning. [IDEA-371051]\nThe IDE once again correctly takes compilerArgs from pom.xml into account when building Maven projects. [IDEA-371747]\nThe GitLab code review mode now functions as expected, correctly displaying changes with proper highlighting. [IJPL-186195]\nWorking directories are once again preserved upon restart when working with the new terminal. [IJPL-163552]\nInspections in Terraform can now be suppressed again. [IJPL-149116]\nFont size rescaling for the Quick Documentation popup works as expected. [IJPL-184559]\nThe Git option now appears correctly in the context menu when right-clicking a file or folder in a project located on a path that includes a symbolic link. [IJPL-181017]\n\n\n\n\nTo find out more details about the issues resolved, please refer to the release notes.\nIf you encounter any bugs, please report them to our issue tracker.\nHappy developing!",
        "dc:creator": "Maria Kosukhina",
        "content": "IntelliJ IDEA 2025.1.2 has arrived with several valuable fixes. You can update to this version from inside the IDE, using the&#160;Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our&#160;website. Here are the most notable updates included in this version: To find out more details about the [&#8230;]",
        "contentSnippet": "IntelliJ IDEA 2025.1.2 has arrived with several valuable fixes. You can update to this version from inside the IDE, using the Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our website. Here are the most notable updates included in this version: To find out more details about the […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=572979",
        "categories": [
          "releases",
          "bug-fix-update",
          "intellij-idea-2025-1",
          "intellij-idea-2025-1-2-2"
        ],
        "isoDate": "2025-06-04T14:08:58.000Z"
      },
      {
        "creator": "Yanina Ledovaya",
        "title": "Hidden Truths About Developer Experience: Three Key Insights From Our Research",
        "link": "https://blog.jetbrains.com/research/2025/06/hidden-truths-about-developer-experience-three-key-insights-from-our-research/",
        "pubDate": "Wed, 04 Jun 2025 13:04:55 +0000",
        "content:encodedSnippet": "Developer experience (DevEx) and developer productivity (DP) are hot topics. Many companies are already working actively to measure and improve them, while others, if not already doing this, are at least aware of them. However, what we’re interested in is what’s really happening inside companies when it comes to DevEx and DP.\nTo get a clearer picture, we incorporated a range of questions on DevEx and DP into our annual Developer Ecosystem Survey (about 20,000 developers all over the world have submitted responses to this survey). The results are rather revealing. While there’s growing awareness of these topics, especially within larger companies, our research uncovered some gaps and blind spots. We believe that understanding what these are and how to overcome them will prove useful for our users and customers.\nHere are three key insights from our research:\nHow developers really feel about being measured? Most developers are generally okay with their productivity assessments as long as they are done transparently and fairly.\nDeveloper satisfaction with tools: desired but not measured. 55% of developers either don’t have their satisfaction with tools measured, or don’t know if it’s being measured.\nTeam leads are carrying the burden of DevEx and DP, but should they? 51% of developers and 67% of tech leads agree that team leads are the primary drivers of DevEx and DP measurement.\nHow developers really feel about being measured\nIt’s easy to assume that developers might feel uncomfortable about the fact that their productivity and developer experience are being measured. After all, who enjoys being evaluated? But here’s the good news: most developers are generally okay with these assessments as long as they are done transparently and fairly.\nOur research shows that 42% of developers feel comfortable with productivity assessments, while 40% report neutral feelings on the subject. That means only a small percentage actively dislike being assessed. And even then, the real problem isn’t measurement itself, it’s how it’s done.\n\n\n\n\nThe most common frustration? A lack of transparency.\nDevelopers want to know how their work is being evaluated, why and what decision will be made based on it. Yet our data suggests that nearly half of developers (46%) don’t fully understand how their productivity data is used in decision-making. Without this clarity, these efforts risk being perceived as arbitrary or unfair.\nAmong other issues are a lack of constructive feedback following assessments and the use of methods and metrics that are sub-optimal from developers’ perspective.\nDevelopers want actionable insights based on the results of evaluations so they can grow and improve. And many companies still solely rely on activity-based measurements like counting commits or code changes, that provide a limited overview of productivity and offer little value for meaningful feedback.\n\n\n\n\nDeveloper satisfaction with tools: desired but not measured\nWhat’s one of the biggest contributors to a great developer experience? Good tools. When tools are smooth, functionable, and reliable, developer frictions are minimized. When tools are slow, hard to use and unstable, developer frictions (long feedback loops, high cognitive load, inability to get into the flow state) flourish.\nYet, our research shows that 55% of developers either don’t have their satisfaction with tools measured, or don’t know if it’s being measured. This is upsetting. If companies aren’t paying attention to satisfaction with tools, how can they improve developer experience?\n\n\n\n\nWhy is this a problem?\nDevelopers spend hours every day working with their tools. Small inefficiencies add up quickly. And frustration with tools potentially leads to lower productivity and even attrition. If a developer struggles with inefficient workflows for too long, feeling unproductive and not cared about, they may eventually just leave for a company that prioritizes developer experience and cares about developers.\nTeam leads are carrying the burden of DevEx and DP, but should they?\nWhen it comes to developer productivity and developer experience, who is actually responsible? In most companies, regardless of size, team leads take (or are expected to take) ownership of these efforts. Our data shows that 51% of developers and 67% of tech leads agree that team leads are the primary drivers of DevEx and DP measurement.\nThis looks as a logical choice, team leads work closely with developers and understand their challenges. But there’s a question: are team leads actually ready to take on this responsibility? How well-equipped and trained are they for this task, do they have real authority to influence company-wide decisions regarding tools, DP, and DevEx? Or has this responsibility been pushed onto them without real sufficient support?\nIn large companies, dedicated specialists (30%) and platform engineering teams (28%) are becoming important players in measuring and improving DevEx and DP, according to tech leads. In smaller companies, these roles are less common, with only 16% and 17% of tech leads respectively naming them as responsible.\n\n\n\n\n\n\n\n\nFinal thoughts\nOur research shows that while developer experience and productivity are in the focus for many companies, some of them still face challenges in measuring, understanding, and improving them.\nTransparency and clarity in DevEx and DP assessment matters\nDevelopers aren’t against being measured, but they need to understand the “how” and “why” behind the process and get constructive, useful feedback based on it.\nThe right tools make all the difference, but how can you be sure a tool is right for your developers if you don’t ask them?\nPoor and unsuitable tooling creates friction, yet many companies fail to track developer satisfaction with their tools.\nDeveloper experience isn’t just the responsibility of team leads\nWhile team leads currently play an essential role in measuring DevEx and DP, over-relying on them without support from dedicated teams and a broader, structured approach can lead to inconsistent efforts across teams within the company and team lead burnout.\nOur series exploring how market and user research is done at JetBrains continues. Want to learn more about research insights and take part in future JetBrains studies? Join our JetBrains Tech Insights Lab!",
        "dc:creator": "Yanina Ledovaya",
        "content": "Developer experience (DevEx) and developer productivity (DP) are hot topics. Many companies are already working actively to measure and improve them, while others, if not already doing this, are at least aware of them. However, what we’re interested in is what’s really happening inside companies when it comes to DevEx and DP. To get a [&#8230;]",
        "contentSnippet": "Developer experience (DevEx) and developer productivity (DP) are hot topics. Many companies are already working actively to measure and improve them, while others, if not already doing this, are at least aware of them. However, what we’re interested in is what’s really happening inside companies when it comes to DevEx and DP. To get a […]",
        "guid": "https://blog.jetbrains.com/?post_type=research&p=573039",
        "categories": [
          "research",
          "developer-experience",
          "jetbrains-deveco"
        ],
        "isoDate": "2025-06-04T13:04:55.000Z"
      },
      {
        "creator": "Rachel Appel",
        "title": "dotInsights | June 2025",
        "link": "https://blog.jetbrains.com/dotnet/2025/06/03/dotinsights-june-2025/",
        "pubDate": "Tue, 03 Jun 2025 13:31:32 +0000",
        "content:encodedSnippet": "Did you know? The Original Name of .NET Was “Next Generation Windows Services (NGWS)“. Before Microsoft officially named it “.NET,” the platform was internally referred to as NGWS: Next Generation Windows Services. The name “.NET” was adopted in the late 1990s to emphasize the platform’s focus on web-based development and interoperability, as opposed to being tightly coupled to Windows-specific services.\nWelcome to dotInsights by JetBrains! This newsletter is the home for recent .NET and software development related information.\n\n\n\n\n🔗 Links\nHere’s the latest from the developer community.\nDouble Dispatch in DDD: When Injecting Dependencies Makes Sense – Derek Comartin\nHow to Become a Technical Coach And Carry On Coding in your Developer Career – Emily Bache\nCheck Out the DrawingView in .NET MAUI – Leomaris Reyes\nAvoiding reflection in C# in way unsafer ways! – Steven Giesel\n4 Ways to Culture-Proof Your C# xUnit Tests | Never Break Your Pipeline Again! – Gui Ferreira\nDuende IdentityServer and OTel Metrics, Traces, and Logs in the .NET Aspire Dashboard – Khalid Abuhakmeh\nUsing the new AI template to create a chatbot about a website – Andrew Lock\nEvolve your C# Code with AI: A 5 Week Genetic Algorithms Bootcamp for Developers – Chris Woodruff\nMaster NoSQL: Scalable Databases for Modern Applications – Frank LaVigne\nUse C# 14 extensions to simplify enum Parsing – Gérald Barré\nCreate a Beautiful Photo Gallery Using .NET MAUI Tab View and ListView – Naveenkumar Sanjeevirayan\nThe Model Context Protocol: Getting beneath the hype – Karrtik Iyer\nAdding a Blazor Pager to Your Data Display – Héctor Pérez\nASP.NET Core Pitfalls – Action Constraint Order – Ricardo Peres\nAsynchronous and Parallel Programming in C# – David Ramel\n“ZLinq”, a Zero-Allocation LINQ Library for .NET – Yoshifumi Kawai\nHow to Import and Read Form Fields from DOCX Documents in .NET on Linux – Bjoern Meyer\nHow to Migrate Users to Auth0: A Technical Guide – David Bolton\nTaming Manifest Sprawl with Aspire – David Fowler\nSong recommendations as an F# Impureim Sandwich – Mark Seemann\nNullable bool and if statement – Jiří Činčura\nVibe coding: Your roadmap to becoming an AI developer – Gwen Davis\n🔦 From our .NET Guide\nEach month we feature tutorials or tips from our .NET Guide.\nRefactor expressions to use pattern matching\nUse pattern matching on properties in Boolean logic for more readable and efficient code.\nSee more\n                                                    \nC# Experimental Attribute\nMark a block of code as experimental so other developers are aware of its status.\nSee More\n                                                    \n☕ Coffee Break\nTake a break to catch some fun social posts.\n\n\n\n\n\n\n\n\n\n\n\n\n🗞️ JetBrains News\nWhat’s going on at JetBrains? Check it out here:\nReSharper Comes to Microsoft Visual Studio Code: Public Preview Now Open\nJetBrains AI Assistant – Now in Visual Studio Code\nReSharper 2025.2 EAP 2: First Public Build with Out-of-Process Mode Support\nRider 2025.2 Early Access Program Is Live!\nReSharper and Rider 2025.1.2 – Bug Fixes Have Landed!\n\n\n\n\n✉️ Comments? Questions? Send us an  email. \nSubscribe to dotInsights",
        "dc:creator": "Rachel Appel",
        "content": "Did you know? The Original Name of .NET Was &#8220;Next Generation Windows Services (NGWS)&#8220;. Before Microsoft officially named it “.NET,” the platform was internally referred to as NGWS: Next Generation Windows Services. The name &#8220;.NET&#8221; was adopted in the late 1990s to emphasize the platform&#8217;s focus on web-based development and interoperability, as opposed to being [&#8230;]",
        "contentSnippet": "Did you know? The Original Name of .NET Was “Next Generation Windows Services (NGWS)“. Before Microsoft officially named it “.NET,” the platform was internally referred to as NGWS: Next Generation Windows Services. The name “.NET” was adopted in the late 1990s to emphasize the platform’s focus on web-based development and interoperability, as opposed to being […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=572538",
        "categories": [
          "net-tools",
          "dotinsights"
        ],
        "isoDate": "2025-06-03T13:31:32.000Z"
      },
      {
        "creator": "Olga Bedrina",
        "title": "Case Study: How Junie Uses TeamCity to Evaluate Coding Agents",
        "link": "https://blog.jetbrains.com/teamcity/2025/06/how-junie-uses-teamcity/",
        "pubDate": "Tue, 03 Jun 2025 07:57:45 +0000",
        "content:encodedSnippet": "Introduction\nJunie is an intelligent coding agent developed by JetBrains. It automates the full development loop: reading project files, editing code, running tests, and applying fixes, going far beyond simple code generation.\nSimilar to how developers use tools like ChatGPT to solve coding problems, Junie takes it a step further by automating the entire process.\nAs the agent’s architecture evolved, the team needed a secure, robust way to measure progress. They wanted to build a scalable, reproducible evaluation pipeline that would be able to track changes across hundreds of tasks.\nThat’s where TeamCity came in. Junie’s development team uses TeamCity to orchestrate large-scale evaluations, coordinate Dockerized environments, and track important metrics that guide Junie’s improvements.\nThe challenge\nValidating agent improvements at scale\nAs Junie’s agents became more capable, with new commands and smarter decision-making, every change needed to be tested for real impact. Evaluation had to be systematic, repeatable, and grounded in data.\n“Did it get better or not?’ is a very poor way to evaluate. If I just try three examples from memory and see if it got better, that leads nowhere. That’s not how you achieve stable, consistent improvements. You need a benchmark with a large and diverse enough set of tasks to actually measure anything.”\n\n            \nDanila Savenkov, Team Lead, JetBrains Junie\n                                                        \nThe team identified five core requirements for this process:\nScale: Evaluations had to cover at least 100 tasks per run to minimize statistical noise. Running fewer tasks made it hard to draw meaningful conclusions​.\nParallel execution: Tasks needed to be evaluated in parallel, as running them sequentially would take over 24 hours and delay feedback loops​.\nReproducibility: It had to be possible to trace every evaluation back to the exact version of the agent, datasets, and environment used. Local experiments or inconsistent setups were not acceptable​.\nCost control: Each evaluation involved significant LLM API usage, typically costing USD 100+ per run. Tracking and managing these costs was essential​.\nData preservation: Results, logs, and artifacts needed to be stored reliably for analysis, debugging, and long-term tracking​.\nBenchmarking with SWE-bench\nFor a reliable signal, Junie adopted SWE-bench, a benchmark built from real GitHub issues and PRs. They also used SWE-bench Verified, a curated 500-task subset validated by OpenAI for clarity and feasibility.\nIn parallel, Junie created in-house benchmarks for their internal monorepo (Java/Kotlin), Web stack, and Go codebases, continuously covering more languages and technologies by the benchmarks.\nThe operational challenge\nRunning these large-scale evaluations posed operational challenges:\nSpinning up consistent, isolated environments for each task.\nManaging dependencies and project setups.\nApplying patches generated by agents and running validations automatically.\nCollecting structured logs and metrics for deep analysis.\nManual workflows wouldn’t scale. Junie needed automation that was fast, repeatable, and deeply integrated into their engineering stack.\nTeamCity enabled that orchestration. With it, the Junie team built an evaluation pipeline that is scalable, traceable, and deeply integrated into their development loop.\nThe solution\nTo support reliable, large-scale evaluation of its coding agents, Junie implemented an evaluation pipeline powered by TeamCity, a CI/CD solution developed by JetBrains.\nTeamCity orchestrates the execution of hundreds of tasks in parallel, manages isolated environments for each benchmark case, and coordinates patch validation and result collection.\n“If we tried running this locally, it just wouldn’t be realistic. A single evaluation would take a full day. That’s why we use TeamCity: to do everything in parallel, isolated environments, and to ensure the results are reproducible.”\n\n            \nDanila Savenkov, Team Lead, JetBrains Junie\n                                                        \nThe setup enables the team to trace outcomes to specific agent versions, gather detailed logs for analysis, and run evaluations efficiently, while keeping infrastructure complexity and LLM usage costs under control.\nExecution pipeline design\nAt the heart of the system is a composite build configuration defined using Kotlin DSL, which gives Junie full control over task orchestration. Each top-level evaluation run includes multiple build steps.\nExample of a build chain in TeamCity\n\n\n\nEnvironment setup\nEach coding task is paired with a dedicated environment, typically a pre-built Docker container with the necessary dependencies already installed. This guarantees consistency across runs and eliminates local setup variability​.\nAgent execution\nJunie’s agent is launched against the task. It receives a full prompt, including the issue description, code structure, system commands, and guidelines. It then autonomously works through the problem, issuing actions such as file edits, replacements, and test runs​. \nThe final output is a code patch meant to resolve the issue.\nPatch evaluation\nThe generated patch is passed to the next build step, where TeamCity applies it to the project and runs the validation suite. This mimics the GitHub pull request flow – if the original tests were failing and now pass, the task is marked as successfully completed​.\nMetric logging\nExecution metadata, including logs, command traces, and success/failure flags, is exported to an open-source distributed storage and processing system. Junie uses it to store evaluation artifacts and perform large-scale analysis. \nWith the solution’s support for SQL-like querying and scalable data processing, the team can efficiently aggregate insights across hundreds of tasks and track agent performance over time.\nDevelopers rely on this data to:\nTrack the percentage of solved tasks (their “North Star” metric).\nAnalyze the average cost per task for LLM API usage.\nBreak down agent behavior ( like the most frequent commands or typical failure points).\nCompare performance between agent versions​.\nScalability through automation\nBy using Kotlin DSL and TeamCity’s composable build model, Junie scales evaluations to hundreds of tasks per session – far beyond what could be managed manually. For larger datasets (typically 300-2000 tasks), each execution is spun up in parallel, minimizing runtime and allowing the team to test changes frequently.\n“We use Kotlin DSL to configure everything. When you have 13 builds, you can still manage them manually, but when it’s 399, or 500, or 280, it starts getting tricky.”\n\n            \nDanila Savenkov, Team Lead, JetBrains Junie\n                                                        \nResults: reproducible, scalable, insight-driven agent development\nTeamCity has enabled Junie to measure agent performance efficiently and at scale, making their development process faster, more reliable, and data-driven.\nKey outcomes\n\nChallengeResult with TeamCity\nValidate agent changes at scale100+ tasks per run, reducing statistical noise\nLong evaluation cycles (24+ hrs)Tasks run in parallel – now completed in a manageable window\nInconsistent local testingEvery run is reproducible and traceable to the exact agent and dataset\nExpensive LLM usagePer-task usage is tracked, helping optimize development and costs\nFragile logging and data lossLogs and outcomes are automatically stored for later debugging and review\n\n\n\n\n\nNeed to scale your AI workflows?\nTeamCity gives you the infrastructure to evaluate and iterate with confidence. Start your free trial or request a demo.",
        "dc:creator": "Olga Bedrina",
        "content": "Introduction Junie is an intelligent coding agent developed by JetBrains. It automates the full development loop: reading project files, editing code, running tests, and applying fixes, going far beyond simple code generation. Similar to how developers use tools like ChatGPT to solve coding problems, Junie takes it a step further by automating the entire process. [&#8230;]",
        "contentSnippet": "Introduction Junie is an intelligent coding agent developed by JetBrains. It automates the full development loop: reading project files, editing code, running tests, and applying fixes, going far beyond simple code generation. Similar to how developers use tools like ChatGPT to solve coding problems, Junie takes it a step further by automating the entire process. […]",
        "guid": "https://blog.jetbrains.com/?post_type=teamcity&p=572452",
        "categories": [
          "how-tos",
          "jetbrains-ai",
          "news",
          "teamcity-2",
          "ai",
          "junie"
        ],
        "isoDate": "2025-06-03T07:57:45.000Z"
      },
      {
        "creator": "Alexey Varfolomeev",
        "title": "What’s Next for RubyMine",
        "link": "https://blog.jetbrains.com/ruby/2025/06/what-s-next-for-rubymine/",
        "pubDate": "Tue, 03 Jun 2025 07:55:54 +0000",
        "content:encodedSnippet": "Hello everyone!\nThe RubyMine 2025.2 Early Access Program is already available! In this blog post, we’ll share the upcoming features and updates planned for this release cycle.\n\n\n\n\nWhat’s coming in RubyMine 2025.2?\nDebugger improvements\nWe’re introducing a number of changes aimed at enhancing the debugger installation experience. The entire process will now take less time, and the associated notifications will be less distracting and more informative. Finally, the RubyMine debugger will be updated to support newly released Ruby versions sooner than it previously did. \nBetter multi-module support\nA priority of the upcoming RubyMine release is the provision of support for multi-module projects. This will include bundler improvements, faster startup for multi-module projects, smoother switching between interpreters, and more.\nAutomatic management of RBS Collection\nWe made this feature a default setting, which requires RBS 3.2. Ruby 3.4 comes with a compatible RBS version bundled. This is beneficial for all features related to code insight.\nBetter remote development experience\nWe are continuing to enhance RubyMine remote development as an alternative to using just remote Ruby interpreters. In 2025.2, you will enjoy an even better overall performance and several improvements to split mode.\nAI Assistant improvements\nIn the new release, you can expect AI Assistant to generate more code suggestions across your projects. The quality of multi-line suggestions will also improve now that the formatting of outputs has been fixed. \nWhat’s more, in line with our efforts to expand AI Assistant’s functionality, we have improved code completion for ERB in RubyMine 2025.2. \nJoin the Early Access Program\nYou can download the latest EAP build from our website or via the Toolbox App. The full list of tickets addressed by this EAP build is available in the release notes.\nStay connected through our official RubyMine X channel. We encourage you to share your thoughts in the comments below and to create and vote for new feature requests in our issue tracker.\nHappy developing!\nThe RubyMine team",
        "dc:creator": "Alexey Varfolomeev",
        "content": "Hello everyone! The RubyMine 2025.2 Early Access Program is already available! In this blog post, we’ll share the upcoming features and updates planned for this release cycle. What’s coming in RubyMine 2025.2? Debugger improvements We&#8217;re introducing a number of changes aimed at enhancing the debugger installation experience. The entire process will now take less time, [&#8230;]",
        "contentSnippet": "Hello everyone! The RubyMine 2025.2 Early Access Program is already available! In this blog post, we’ll share the upcoming features and updates planned for this release cycle. What’s coming in RubyMine 2025.2? Debugger improvements We’re introducing a number of changes aimed at enhancing the debugger installation experience. The entire process will now take less time, […]",
        "guid": "https://blog.jetbrains.com/?post_type=ruby&p=571724",
        "categories": [
          "eap",
          "rubymine",
          "new-features"
        ],
        "isoDate": "2025-06-03T07:55:54.000Z"
      },
      {
        "creator": "Alexey Varfolomeev",
        "title": "Junie and RubyMine: Your Winning Combo",
        "link": "https://blog.jetbrains.com/ruby/2025/06/junie-and-rubymine-your-winning-combo/",
        "pubDate": "Tue, 03 Jun 2025 07:55:50 +0000",
        "content:encodedSnippet": "Junie, a powerful AI coding agent from JetBrains, is available in RubyMine! Install the plugin and try it out now!\nWhy Junie is a game-changer\nUnlike other AI coding agents, Junie leverages the robust power of JetBrains IDEs and reliable large language models (LLMs) to deliver exceptional results with high precision.\n\n\n\n\n\n\nAccording to SWE-bench Verified, a curated benchmark of 500 real-world developer tasks, Junie successfully solves 60.8% of tasks on a single run. This impressive success rate demonstrates Junie’s ability to tackle coding challenges that would normally require hours to complete. This is more than AI – it’s the latest evolution in developer productivity.\n\n\n\n\nYour most trusted AI partner\nJunie isn’t just an assistant – it’s your creative and strategic partner. Here’s what Junie can do for you in RubyMine:\nBuild entire Ruby apps, not just snippets\nNeed more than individual code fragments? Junie can write entire applications, handling complex structures with ease and precision.\nAutomate inspections and testing\nPairing Junie with RubyMine’s powerful code insight tools means inspections and automated tests (RSpec, minitest) are no longer a chore. Let Junie ensure your code works – and works well.\nSuggest features and code improvements\nStuck? Junie brings fresh ideas to the table, pointing out areas for improvement, suggesting optimizations, or brainstorming entirely new features for your project.\nClean and align code with your style\nJunie doesn’t just write code – it ensures everything aligns with your coding style and guidelines, leaving your code polished, structured, and ready to deploy.\n\n\n\n\nWith most of the heavy lifting off your plate, Junie saves you time and mental energy. Instead of getting bogged down in the mundane, you’re free to focus on strategy, innovation, and big-picture ideas.\nYou define the process, Junie elevates it\nWhile Junie is indeed powerful and capable, it’s designed to enhance your coding experience, not take control of it. You remain the decision-maker at every step – from delegating tasks to reviewing Junie’s code suggestions. \nYou control how and when AI contributes to your workflow. No matter what you entrust to Junie, it will adapt to your style and always give you the final say, ensuring that your code remains truly yours.\nTry Junie in RubyMine today\nNow is the perfect time to try Junie in RubyMine and experience firsthand how AI can boost your productivity, simplify your workflow, and enhance your coding experience.\nTo install Junie in RubyMine, visit this page. \nFollow us for updates and tips\nFind more about Junie and the project’s further development in this article.\nStay connected through our official RubyMine X channel. Don’t forget to share your thoughts in the comments below and to suggest and vote for new features in our issue tracker.\nHappy developing!\nThe RubyMine team",
        "dc:creator": "Alexey Varfolomeev",
        "content": "Junie, a powerful AI coding agent from JetBrains, is available in RubyMine! Install the plugin and try it out now! Why Junie is a game-changer Unlike other AI coding agents, Junie leverages the robust power of JetBrains IDEs and reliable large language models (LLMs) to deliver exceptional results with high precision. According to SWE-bench Verified, [&#8230;]",
        "contentSnippet": "Junie, a powerful AI coding agent from JetBrains, is available in RubyMine! Install the plugin and try it out now! Why Junie is a game-changer Unlike other AI coding agents, Junie leverages the robust power of JetBrains IDEs and reliable large language models (LLMs) to deliver exceptional results with high precision. According to SWE-bench Verified, […]",
        "guid": "https://blog.jetbrains.com/?post_type=ruby&p=571765",
        "categories": [
          "jetbrains-ai",
          "rubymine",
          "ai",
          "ai-agent",
          "junie"
        ],
        "isoDate": "2025-06-03T07:55:50.000Z"
      },
      {
        "creator": "Dmitry Ustalov",
        "title": "Context Collection Competition by JetBrains and Mistral AI",
        "link": "https://blog.jetbrains.com/ai/2025/06/context-collection-competition/",
        "pubDate": "Mon, 02 Jun 2025 12:13:43 +0000",
        "content:encodedSnippet": "Build smarter code completions and compete for a share of USD 12,000!\nIn AI-enabled IDEs, code completion quality heavily depends on how well the IDE understands the surrounding code – the context. That context is everything, and we want your help to find the best way to collect it.\nJoin JetBrains and Mistral AI at the Context Collection Competition. Show us your best strategy for gathering code context, and compete for your share of USD 12,000 in prizes and a chance to present it at the workshop at ASE 2025.\nWhy context matters\nCode completion predicts what a developer will write next based on the current code. Our experiments at JetBrains Research show that context plays an important role in the quality of code completion. This is a hot topic in software engineering research, and we believe it’s a great time to push the boundaries even further.\nGoal and tracks\nThe goal of our competition is to create a context collection strategy that supplements the given completion points with useful information from across the whole repository. The strategy should maximize the chrF score averaged between three strong code models: Mellum by JetBrains, Codestral by Mistral AI, and Qwen2.5-Coder by Alibaba Cloud.\nThe competition includes two tracks with the same problem, but in different programming languages:\nPython: A popular target for many novel AI-based programming assistance techniques due to its very wide user base.\nKotlin: A modern statically-typed language with historically good support in JetBrains products, but with less interest in the research community.\nWe’re especially excited about universal solutions that work across both dynamic (Python) and static (Kotlin) typing systems.\nPrizes\nEach track awards prizes to the top three teams:\n🥇 1st place: USD 3,000\n🥈 2nd place: USD 2,000\n🥉 3rd place: USD 1,000\nThat’s a USD 12,000 prize pool, plus free ASE 2025 workshop registration for a representative from each top team.\nTop teams will also receive:\n🎁 A one-year JetBrains All Products Pack license for every team member (12 IDEs, 3 extensions, 2 profilers; worth USD 289 for individual use).\n🔑 USD 2,000 granted on La Plateforme, for you to use however you like.\nJoin the competition\nThe competition is hosted on Eval.AI. Get started here: https://jb.gg/co4.\nWe have also released a starter kit to help you hit the ground running: https://github.com/JetBrains-Research/ase2025-starter-kit.\nKey dates are:\nJune 2, 2025: competition opens\nJune 9, 2025: public phase begins\nJuly 25, 2025: public phase ends\nJuly 25, 2025: private phase begins\nJuly 25, 2025: solution paper submission opens\nAugust 18, 2025: private phase ends\nAugust 18, 2025: final results announced\nAugust 26, 2025: solution paper submission closes\nNovember 2025: solutions presented at the workshop\nBy participating in the competition, you indicate your agreement to its terms and conditions.",
        "dc:creator": "Dmitry Ustalov",
        "content": "Build smarter code completions and compete for a share of USD 12,000! In AI-enabled IDEs, code completion quality heavily depends on how well the IDE understands the surrounding code – the context. That context is everything, and we want your help to find the best way to collect it. Join JetBrains and Mistral AI at [&#8230;]",
        "contentSnippet": "Build smarter code completions and compete for a share of USD 12,000! In AI-enabled IDEs, code completion quality heavily depends on how well the IDE understands the surrounding code – the context. That context is everything, and we want your help to find the best way to collect it. Join JetBrains and Mistral AI at […]",
        "guid": "https://blog.jetbrains.com/?post_type=ai&p=572325",
        "categories": [
          "jetbrains-ai",
          "research",
          "news"
        ],
        "isoDate": "2025-06-02T12:13:43.000Z"
      },
      {
        "creator": "Katie Fraser",
        "title": "Help Predict the Future of AI in Software Development!",
        "link": "https://blog.jetbrains.com/research/2025/06/predict-the-future-of-ai-in-software-development/",
        "pubDate": "Mon, 02 Jun 2025 11:45:27 +0000",
        "content:encodedSnippet": "Ever wanted to share your ideas about AI and have a chance at winning prizes at the same time? As a company dedicated to creating the best possible solutions for software development, we at JetBrains want to know what you think about AI in software development. \nParticipate in our tournament!\n                                    \nIn this post, we tell you more about the tournament and offer tips for making accurate predictions. And in case you’re new to forecasting platforms, we’ve included an overview below.\nLet’s get started so that you can add your voice to community-sourced forecasting!\nJetBrains Research’s AI in Software Development 2025 tournament\nTo participate in the tournament, all you have to do is register on Metaculus and complete this  short survey  .\nMake sure to input your predictions before the resolution on December 1, 2025!\nTournament specs\nWith this forecasting challenge, we are primarily interested in seeing how accurately participants can predict emerging AI features in software development. \nWe also want to understand:\nDevelopers’ attitudes about AI and how they are evolving\nIndividual features of the best forecasters\nHow people estimate the future of various benchmarks\nCurrently, the tournament includes 13 questions. To keep everything fair, we have invited independent experts to review the questions and to evaluate the end resolutions. These experts are:\nOlga Megorskaya, Chief Executive Officer at Toloka\nGrigory Sapunov, Co-Founder and CTO at Intento\nIftekhar Ahmed, Associate Professor at the University of California, Irvine \nHussein Mozannar, Senior Researcher at Microsoft Research AI Frontiers\nDmitiry Novakovskiy, Head of Customer Engineering at Google Cloud\nRankings and the prize pool\nIn this tournament, your ranking will be calculated based on your peer score. \nGenerally speaking, a positive score indicates higher accuracy, and a negative score lower (how exactly Metaculus calculates the peer score). A bit more specifically, the ranking is calculated from the sum of your peer scores over all the questions, which are individually weighted. That is, if you do not forecast a specific question, you score zero on that question. \nFor the AI in Software Development 2025 Tournament, we have a USD 3,000 prize pool, which will be distributed across the first three leaderboard medals as follows (all prizes in USD): \nFirst place: $1,500\nSecond place: $1,000\nThird place: $500\nNote that in order to be eligible for the prize pool, you must fill out the quick research survey!\nTips for making accurate predictions on forecasting platforms\nHere are some tips to get you on the path to positive peer scores and higher rankings:\nConsider alternative scenarios before placing your forecast. This is generally a good idea, but also very useful if the event concerns something novel or very uncertain.\nOngoing news can inform the probabilities of different outcomes, so stay informed!\nBe careful of being overconfident. Besides considering alternatives, it is useful to list offline the reasons why your forecast could be wrong.\nAs with many skills, practicing helps. Especially on a platform like Metaculus, when practicing forecasting, you can improve by posting your reasoning in the discussion section and reading about other participants’ reasoning.\nIf you have forecasted a few questions as practice, compare your track record with the community track record. (But don’t only predict based on the community median. Your insights and evidence are valuable, too!)\nFor more resources, check out Metaculus’ collection of analysis tools, tutorials, research literature, and tips, as well as their forecasting guide for each type of question.\nOnline forecasting tools: a primer\n​What are online forecasting tools? Via a combination of user inputs and sophisticated statistical modelling, these tools enable the prediction of future events. \nIf you’ve never heard of forecasting platforms before, you might guess that they are like gambling sites. While there are some similarities with betting, online forecasting tools are not strictly synonymous with gambling, whether online or at the tracks. A crucial difference is that forecasting tools are used by people interested in gathering information about future events, not necessarily (or solely) to gain a profit based on the outcome of a future event. In particular, our forecasting tournament focuses on evaluating the prediction skills of participants; the prizes are merely perks for the top-ranked forecasters and an exception to most queries on the hosting platform Metaculus.\nAnother type of information-gathering tool is a poll or a survey. While similar in empirical intent, the questions in polls often ask about participants’ (a) experiences, (b) ideas, or (c) preferences and not about tangible, objective facts that can be unambiguously resolved. Here are some real-world examples from YouGov (UK): (a)  whether the participants have watched political content on TikTok, (b) participants’ views on banning phones in schools, and (c)  which Doctor Who version the participant prefers.\nWhile there might be a clear winner among the respondents, the results will reflect people’s preferences and thoughts, sometimes about facts, but the results are not facts themselves. Likewise, any survey results are subject to differences among varying demographics. \nFor the survey question (b), there is a clear winner in the results below, but this is only the opinion of the people in the UK who were asked. And while the respondent may be interested in the results (e.g. they really want schools to ban phones), there is no direct gain for having given a more popular or more accurate response. \n\nSource: YouGov plc, 2025, © All rights reserved. [Last access: May 22, 2025]\nIn contrast, a forecasting query’s responses are evaluated for accuracy against facts at the time of resolution. Those participating are actively interested in the resolution, as it affects leaderboard prestige and/or financial reward, depending on the type of forecasting platform. This also means that participants are more motivated to give what they think are accurate predictions, even if it does not 100% align with their personal preferences at the time. \nOften forecasting platforms involve binary questions, like in Will DeepSeek be banned in the US this year?. The queries can also be about uncertain events with multiple possible outcomes, e.g. for the winner of Eurovision 2025, where until the finals, many countries have a chance. Similarly, queries with numerical ranges, such as in the prediction of the Rotten Tomatoes score of Mission: Impossible – The Final Reckoning, can consider the weight of different ranges. Even if different platforms’ architectures handle the calculations slightly differently, the main takeaway is that there are resolution deadlines and that the event in question can be unambiguously resolved on forecasting platforms. See the figure below for a snapshot of the rules summary for the Mission: Impossible question on Kalshi.\n\n\n\n\nSource: Kalshi.    [Last access: May 22, 2025]\nThe following subsections present the history of forecasting tools, including the most common kinds and which one is relevant for this forecasting challenge.\nA history of prediction\nForecasting mechanisms have existed informally for centuries, where people could predict outcomes like papal or presidential election results. More formal forecasting tools were established at the end of the 20th century, starting with a similar focus, and have since gained currency while expanding their application. \nWell-known examples of formal forecasting mechanisms include the Iowa Electronic Market, created as an experimental tool in 1988 for the US presidential election’s popular vote, still in use today; Robin Hanson’s paper-based market, created in 1990 for Project Xanadu employees to make predictions on both the company’s product and scientific controversies; and the online Hollywood Stock Exchange, established in 1996 as a way for participants to bet on outcomes in the entertainment industry. \nThese forecasting tools demonstrated how much more accurate aggregated predictions can be than individual ones (see for example The Wisdom of Crowds or Anatomy of an Experimental Political Stock Market), motivating economists to take their insights seriously. Around the same time, big companies such as Google, Microsoft, and Eli Lily began establishing company-internal prediction markets. These days, many companies have their internal prediction tools; for example, we at JetBrains recently launched our own platform, called JetPredict.\nFor example, Google’s internal product, Prophit, was launched in 2005 and offered financial incentives, plus leaderboard prestige, to employees best at predicting. Although an internal product, Prophit was known outside of Google as a prediction platform demonstrating relatively high accuracy. It eventually had to shut down in the late 2000s, due to federal regulations (and the 2008 financial crisis did not help either). Many publications covered this topic at the time, for example this 2005 NYTimes article At Google, the Workers are Placing their Bets, this 2007 Harvard Business Case Study Prediction Markets at Google, and the 2008 article Using Prediction Markets to Track Information Flows: Evidence from Google. More recently, there was an article about Prophit and a second internal market, Gleangen: The Death and Life of Prediction Markets at Google. \nBeyond big corporations, researchers have started using formal prediction tools to predict things like study replicability, a crucial scientific tenet. In a comparison of forecasting tools and survey beliefs predicting this, the former were much more accurate than the latter. If you are interested, The Science Prediction Market Project provides a collection of papers on the topic.\n Applying forecasting tools to research is still less widespread than forecasting in the business world, but it’s an exciting space to watch!\nDifferent forecasting tools today\nNot all forecasting platforms are prediction markets, even if the terms are sometimes used interchangeably. Here we only look at overall differences without going into detail of, say, kinds of prediction markets or the math behind the models. If you are interested, here are further resources on these differences provided by WIFPR, Investopedia, and the Corporate Finance Institute.\nThe hallmark of a prediction market is that participants are offered financial incentives by way of event contracts, sometimes also called ‘shares’. Key concepts include:\nThe event contracts can be sold or bought depending on the participant’s belief in the outcome.\nThe current price reflects what the broader community expects of the outcome.\n\nAs the nominal contract values are typically USD 1, the sum of the share prices is USD 1 as well. So, for a market’s implied probability of about 60%, the average share price to buy will be around 60 cents. \nPrices change in real-time as new information emerges.\nIf the participant bought contract shares for the correct prediction, they earn money (USD 1 typically) for each share purchased. Incorrect predictions mean no money is earned.\nTranslating those concepts into an example: A question on the prediction market Kalshi asks whether Anthropic will release Claude 4 before June 1, 2025. At the time of writing this post, the likelihood of Claude 4’s release was at 34% according to the community, as shown in the figure below. \n\n\n\n\nSource:  Kalshi.  [Last access: May 16, 2025, 17:25 CEST]\nIf you wanted to participate in the above market on May 16, the following scenarios could have occurred. If you believed the release would have happened before June 1, you could have bought shares for about 35 cents each. Say you bought 100 shares for USD 35 and, come June 1, Anthropic did indeed release Claude 4. You would then have won USD 100 (USD 1 multiplied by 100 shares), and your profit would be USD 65 (USD 100 win minus your USD 35 investment). If Anthropic did not release Claude 4 by June 1, you would then have lost your initial USD 35 investment.\nThe figure above additionally shows that earlier in the year, the community thought that Claude 4 was more likely to be released by the resolution date. As more evidence rolls in, the outcome’s likelihood can change.\nAggregating community forecasts is also possible without share-buying and profit-seeking. Other forecasting platforms, such as Good Judgement or Metaculus, use a broader toolset for their prediction architecture, focusing primarily on leveraging collective intelligence and transparent scoring. By eliminating profit as the primary incentive and instead rewarding forecasters for their prediction accuracy over time, extreme predictions are discouraged.\nIn particular, Metaculus is building a forecasting ecosystem with a strong empirical infrastructure, using techniques such as Bayesian statistics and machine learning. This creates a platform that is overall more cooperative and has a shared scientific intent. The platform encourages participants to publish the reasoning behind their picks, which fosters community discussions. \nAccuracy and the broader impact of community-sourced forecasting\nAs forecasting tools become more sophisticated, they are also getting more accurate in their predictions. In its current state, Metaculus already outperforms notoriously robust statistical models, as was recorded in Forecasting skill of a crowd-prediction platform: A comparison of exchange rate forecasts. The platform additionally keeps an ongoing record of all resolved questions with performance statistics. \nMetaculus is a platform that not only benefits from community inputs, but also provides vital information to the community. Take the COVID-19 pandemic for example: predictors on Metaculus accurately anticipated the impact of the virus before it was globally recognized as a pandemic. In turn, the insights on specific events within such a pandemic can be valuable to policymakers, like in this case study on an Omicron wave in the US.\nResearchers are continuously investigating various public health threats. An open question at the time of writing, on the possibility of the avian influenza virus becoming a public health emergency, is shown in the figure below. What would be your prediction?\n\nSource: Metaculus.  [Last access: May 16, 2025]\nAt JetBrains, our commitment goes beyond delivering top-tier software development solutions and innovative AI tools: We are passionate about nurturing a vibrant, engaged community and creating meaningful opportunities for learning and collaboration. We believe that open dialogue about the future of AI in software development is essential to advancing the field.\nWith these shared values, we are proud to partner with Metaculus as the host for our forecasting challenge. Together, we look forward to inspiring thoughtful discussion, driving progress, and shaping the future of AI in software development.",
        "dc:creator": "Katie Fraser",
        "content": "Ever wanted to share your ideas about AI and have a chance at winning prizes at the same time? As a company dedicated to creating the best possible solutions for software development, we at JetBrains want to know what you think about AI in software development.&#160; In this post, we tell you more about the [&#8230;]",
        "contentSnippet": "Ever wanted to share your ideas about AI and have a chance at winning prizes at the same time? As a company dedicated to creating the best possible solutions for software development, we at JetBrains want to know what you think about AI in software development.  In this post, we tell you more about the […]",
        "guid": "https://blog.jetbrains.com/?post_type=research&p=570919",
        "categories": [
          "research",
          "ai-in-software-development",
          "forecasting-platform",
          "jetbrains-research",
          "prediction-market",
          "tournament"
        ],
        "isoDate": "2025-06-02T11:45:27.000Z"
      },
      {
        "creator": "Julia Amatuni",
        "title": "AI-Powered Learning, Part 2: Get Unstuck With AI Hints in Python and Kotlin Tasks",
        "link": "https://blog.jetbrains.com/education/2025/06/02/ai-hints-plugin/",
        "pubDate": "Mon, 02 Jun 2025 08:32:54 +0000",
        "content:encodedSnippet": "In our previous post, we introduced AI-powered machine translation and inline theory definitions to help make learning smoother and more accessible. Today, we’re excited to share the next big step in bringing intelligent assistance to your programming journey: AI hints.\nThis feature is designed especially for beginners who may get stuck while solving coding tasks – unsure how to move forward, fix a failing test, or resolve a compilation error. With AI hints, the JetBrains Academy plugin is here to guide you, one step at a time.To explore the latest improvements, install the JetBrains Academy plugin or update to the latest version from Settings/Preferences | Plugins in your JetBrains ID.\nINSTALL FREE PLUGIN\n                                                    \nHow AI hints work\nWhen you’re solving a programming task in Python or Kotlin, you’ll now see a new option to request an AI hint. The hint is delivered in two parts:\nA text explanation describing what you could do next.\nA code diff preview showing the suggested change right inside your IDE.\nThis way, you not only get the answer – you also learn how to arrive at it.\nAn example of an AI-generated next step hint in a Kotlin task\n\n\n\nWhat can AI hints help with?\nThe current version of AI hints supports:\nSuggestions for the next logical step if you’re stuck solving a task.\nFixes for compilation errors.\nHints to help pass failing tests.\nThese hints combine static code analysis from your IDE with the power of large language models (LLMs), bringing together the best of both worlds – deep context awareness and intelligent language understanding.\nA note on accuracy\nAI-generated hints are still evolving. They may occasionally be incomplete or inaccurate, especially in more complex scenarios. But we’ve built in an easy way to help us improve: just use the Feedback button after seeing a hint. Your input directly contributes to making the system smarter and more helpful over time.\nWhere to find it\nAI hints are currently available for programming tasks in Python and Kotlin in all IDE-based Marketplaces courses. \nTo try out AI hints:\nOpen a Python or Kotlin course.\nStart solving a programming task.\nIf you’re stuck, click the Get Hint button.\nSee what to do next – and how to do it.\n\n\n\n\n\nWe hope AI hints make learning to code feel more approachable and less frustrating. \nHave any feedback or questions? Drop us a comment below or submit feedback right from the plugin.\n\n\n\n\nHappy learning!\nThe JetBrains Academy team",
        "dc:creator": "Julia Amatuni",
        "content": "In our previous post, we introduced AI-powered machine translation and inline theory definitions to help make learning smoother and more accessible. Today, we’re excited to share the next big step in bringing intelligent assistance to your programming journey: AI hints. This feature is designed especially for beginners who may get stuck while solving coding tasks [&#8230;]",
        "contentSnippet": "In our previous post, we introduced AI-powered machine translation and inline theory definitions to help make learning smoother and more accessible. Today, we’re excited to share the next big step in bringing intelligent assistance to your programming journey: AI hints. This feature is designed especially for beginners who may get stuck while solving coding tasks […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=571423",
        "categories": [
          "ai-assistant",
          "jetbrains-academy",
          "jetbrains-academy-plugin",
          "jetbrains-ai",
          "kotlin",
          "learning-courses",
          "jetbrainsacademy",
          "ai-assistance",
          "ide-plugin",
          "learning",
          "news",
          "release"
        ],
        "isoDate": "2025-06-02T08:32:54.000Z"
      },
      {
        "creator": "Anton Makeev",
        "title": "Get Answers to Your KMP Questions",
        "link": "https://blog.jetbrains.com/kotlin/2025/06/get-answers-to-your-kmp-questions/",
        "pubDate": "Mon, 02 Jun 2025 06:37:10 +0000",
        "content:encodedSnippet": "During the Closing Panel at KotlinConf 2025, we received many questions about Kotlin Multiplatform (KMP), but unfortunately didn’t have time to address them all live. So we’ve decided to answer the most popular ones in a follow-up blog post.\nWill IntelliJ IDEA and Android Studio support full Swift navigation, completion, etc., for iOS code, or is that not feasible because of Apple restrictions?\nThe KMP plugin for IntelliJ IDEA and Android Studio already supports Swift and cross-language Kotlin/Swift features such as navigation, and we plan to add more! Check out this blog post to learn more.\nWhat’s the Kotlin team’s plan to improve the native compilation speed (desktop targets) for multiplatform projects? Waiting 10 minutes to compile a small CLI app is not acceptable for many teams.\nWe are currently looking into native build performance. First, please check our recommendations on improving native compilation speed. If they don’t help, we would highly appreciate it if you could file a bug report and provide more details about the project. It would give us valuable insights on how to address the performance issues.\nHow do you see KMP evolving over the next year?\nWe are driving Kotlin Multiplatform towards a complete and mature solution! We have big plans for Compose Multiplatform and are working on the Beta of Compose Multiplatform for web. In addition to UI sharing, we’ll be improving business logic sharing scenarios, focusing on Kotlin/JS with @JsExport and Kotlin/Native Swift export. Check out our plans for the web platform in general. As we have just released the first version of the KMP plugin for IntelliJ IDEA and Android Studio, we plan to work on its stability and bring more productivity features, which you can find details about in this blog post.\nCheck out the KMP roadmap to learn more.\nCan you please elaborate on the work being done to improve web support for Compose/KMP?\nWe are working on the Beta of Compose Multiplatform for web. We have already provided more APIs to ensure parity with other platforms, such as clipboard and drag’n’drop, collaborated with browser vendors to improve the performance of web apps, and improved the pointer and text input behavior.\nFor the Beta of Compose Multiplatform for web, we plan to add interop with HTML elements, compatibility mode for older browsers with automatic fallback to JS, a prototype for accessibility support, and multiple improvements to key UI components.\nAre there any plans to support accessibility and SEO in Compose Multiplatform for Web, when everything renders to pixels in a canvas?\nWe plan to implement basic accessibility support by mapping Compose semantics nodes to DOM elements later this year. Having the backing DOM hierarchy on a page would allow for some SEO support too. SEO can be further improved by pre-rendering the content as DOM on the server side, but we haven’t investigated this yet.\nWhy does Compose Multiplatform have scrollbars, while Android Jetpack Compose does not?\nScrollbars were first implemented for the desktop target, but we are exploring how to bring them to other platforms.\nAre we getting Navigation 3 for KMP?\nNavigation 3 has been built with Kotlin Multiplatform in mind. So, the answer is yes, there will be multiplatform support for Navigation 3. However, we don’t know when, as it depends on other ongoing work. Please follow the corresponding YouTrack ticket for further updates.",
        "dc:creator": "Anton Makeev",
        "content": "During the Closing Panel at KotlinConf 2025, we received many questions about Kotlin Multiplatform (KMP), but unfortunately didn’t have time to address them all live. So we’ve decided to answer the most popular ones in a follow-up blog post. Will IntelliJ IDEA and Android Studio support full Swift navigation, completion, etc., for iOS code, or [&#8230;]",
        "contentSnippet": "During the Closing Panel at KotlinConf 2025, we received many questions about Kotlin Multiplatform (KMP), but unfortunately didn’t have time to address them all live. So we’ve decided to answer the most popular ones in a follow-up blog post. Will IntelliJ IDEA and Android Studio support full Swift navigation, completion, etc., for iOS code, or […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=571659",
        "categories": [
          "multiplatform"
        ],
        "isoDate": "2025-06-02T06:37:10.000Z"
      }
    ]
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "David Li, Moyo Okeremi",
        "title": "How to filter C++ Build Insights by project",
        "link": "https://devblogs.microsoft.com/visualstudio/how-to-filter-c-build-insights-by-project/",
        "pubDate": "Thu, 05 Jun 2025 15:37:33 +0000",
        "content:encodedSnippet": "Visual Studio 2022 version 17.14 comes with quality-of-life improvements to its C++ Build Insights integration that will make it easier for you to navigate large multi-project traces and handle long file names for your build inputs and artifacts.\n\nWhat is C++ Build Insights?\nC++ Build Insights is a powerful tool that lets you visualize and optimize the build process of your C++ projects. It leverage MSVC’s trace capture technology and uses the Windows ETW framework to collect detailed information about every build event, such as compilation, linking, code analysis, and more. You can then view and analyze this data in many ways, such as a timeline, a flame graph, or a tree map. As of Visual Studio 2022 version 17.7, C++ Build Insights is integrated into Visual Studio.\nC++ Build Insights can help you identify and fix bottlenecks, dependencies, and inefficiencies in your build system, resulting in faster and more reliable builds. You can also compare different builds and see how your changes affect the build performance over time. To learn more, read how Activision used Build Insights to cut Call of Duty’s Build Time by 50% on the Microsoft Game Dev Blog.\nHow to Filter C++ Build Insights by Project\nOne of the new features in Visual Studio 2022 is the ability to filter your C++ Build Insights results for Visual Studio solutions by project. This can be particularly useful if you have a large solution with multiple projects and you want to focus on one of them. To do this, simply run Build Insights on your solution by selecting Build > Run Build Insights on Solution and then either Build or Rebuild, depending on whether you want to measure the build from scratch. This will generate an ETL (event trace log) trace, which Visual Studio will automatically open to visualize the data collected. Select the project that you want to filter by selecting the funnel next to the Project column and narrowing down the set of projects for which you want to view the data.\nHow to Filter C++ Build Insights by File Paths\nIn addition to project filtering, Build Insights now also supports file path filtering, which gives you fine-grained control over which files are included in your analysis. This is especially helpful in large codebases where build data from third-party libraries or generated code can clutter your view. With the File Path Filter, you can use glob patterns to focus on specific directories or file types—helping you isolate and investigate the build performance of just the parts you care about. Whether you’re narrowing your focus during a regression investigation or simply trying to understand the build cost of a particular code change, file path filtering helps you get answers faster.\nTo do this, simply run Build Insights on your solution by selecting Build > Run Build Insights on Solution and then either Build or Rebuild, depending on whether you want to measure the build from scratch. This will generate an ETL (event trace log) trace, which Visual Studio will automatically open to visualize the data collected. Select the project that you want to filter by selecting the funnel next to the File Path column and typing in the glob pattern you want to focus on or ignore.\nHow to see the file names and paths of build inputs and artifacts\nAnother improvement in Visual Studio is the way Build Insights displays the file names and paths of your build inputs and artifacts, such as source files, object files, libraries, and executables. Instead of showing the full path, which can be quite long and hard to read, Build Insights now shows the relative path and the file name, separated by a backslash. This makes it easier to find your build artifacts, especially if you have a complex folder structure.\nYou can see the file names and paths of your build inputs and artifacts in any view that shows them, such as the Included Files view, which shows the files that are included by each source file during compilation. You can also hover over any build event to see more details, including the file name and path.\nWe hope you find these quality-of-life improvements useful and that they help you optimize your C++ build process. We are always working on making Visual Studio better for developers, and we appreciate your continuous feedback and suggestions. Please tell us what you think of these features and what else you want in Build Insights.\nThe post How to filter C++ Build Insights by project appeared first on Visual Studio Blog.",
        "dc:creator": "David Li, Moyo Okeremi",
        "comments": "https://devblogs.microsoft.com/visualstudio/how-to-filter-c-build-insights-by-project/#respond",
        "content": "<p>Visual Studio 2022 version 17.14 comes with quality-of-life improvements to its C++ Build Insights integration that will make it easier for you to navigate large multi-project traces and handle long file names for your build inputs and artifacts. What is C++ Build Insights? C++ Build Insights is a powerful tool that lets you visualize and [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/how-to-filter-c-build-insights-by-project/\">How to filter C++ Build Insights by project</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Visual Studio 2022 version 17.14 comes with quality-of-life improvements to its C++ Build Insights integration that will make it easier for you to navigate large multi-project traces and handle long file names for your build inputs and artifacts. What is C++ Build Insights? C++ Build Insights is a powerful tool that lets you visualize and […]\nThe post How to filter C++ Build Insights by project appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=253442",
        "categories": [
          "Debug",
          "Performance",
          "Visual Studio",
          "C++"
        ],
        "isoDate": "2025-06-05T15:37:33.000Z"
      },
      {
        "creator": "Jim Harrer",
        "title": "Cloud Academy: Unlock Your Azure Skills and Accelerate Your Career",
        "link": "https://devblogs.microsoft.com/visualstudio/cloud-academy-benefit-for-visual-studio-subscribers/",
        "pubDate": "Tue, 03 Jun 2025 14:00:08 +0000",
        "content:encodedSnippet": "When we launched the Cloud Academy benefit for Visual Studio Professional and Enterprise subscribers back in March 2025, our goal was simple: give you the hands-on, practical learning experience you need to confidently master Azure and cloud technologies — without spending a dime beyond your subscription.\nWhy? Because in today’s fast-changing tech world, knowing theory isn’t enough. You need to do — to experiment, build, troubleshoot, and grow your skills in a real environment. That’s exactly what Cloud Academy delivers.\n\nFrom Frustration to Confidence: Learning That Fits Your Style\nIf you’re like many developers I’ve talked to, finding time to build new skills feels like a constant struggle. Between deadlines, meetings, and firefighting production issues, carving out space to learn something new is tough.\nCloud Academy understands that. Whether you’re the type who likes step-by-step guided labs, jumping straight into hands-on challenges, or tinkering freely in a safe sandbox, this platform adapts to how you learn best.\nThe result? Visual Studio subscribers are completing labs at a rate 10% higher than other learners on Cloud Academy. That means you’re not just skimming content — you’re gaining meaningful, practical skills that stick.\nWhat’s New? Fresh Content Tailored for Today’s Cloud Challenges\nCloud technology evolves rapidly, and staying ahead means keeping your skills sharp. We’ve added new lessons and labs to make sure you’re ready to tackle the latest Azure capabilities and security challenges, including:\nAutomate document processing with Azure AI Document Intelligence Studio — no coding needed, just real impact.\nStrengthen endpoint security with Microsoft Entra ID’s automated password management — because security can’t be an afterthought.\nStreamline device management with Intune device naming templates — save time and reduce errors.\nDive into Azure OpenAI Service’s prompt engineering — build AI apps that behave reliably.\n…and much more that matches what companies are demanding now.\nHands-On Labs: Where Real Learning Happens\nReading about cloud services is one thing. Building and deploying containerized apps, automating workflows, or managing state in Azure Container Apps — that’s where the real transformation happens.\nCloud Academy’s labs let you roll up your sleeves in real Azure environments, so you:\nPush container images and manage registries.\nAutomate file processing with Azure Functions.\nExplore state management with Dapr in container apps.\nThis kind of hands-on experience turns concepts into capabilities, making you more valuable to your team and your company.\nCertification Prep That Works\nMany subscribers are also using Cloud Academy to prep for Microsoft certifications, which are a powerful way to validate your skills and open doors in your career. The top courses are aligned to:\nAZ-900: Azure Fundamentals — perfect for getting started.\nAZ-204: Developing Azure Solutions — for building real cloud apps.\nAI-900 and AI-102 — tapping into the future of AI on Azure.\nAZ-400: Azure DevOps Solutions — mastering modern cloud development workflows.\nWith lessons, labs, quizzes, and exams, Cloud Academy makes certification prep practical and effective — no more cramming or rote memorization.\nMeet Ela: Your Personal AI-Powered Learning Coach\nLearning alone can be challenging. That’s why Cloud Academy includes Ela, an AI-powered Expert Learning Assistant who’s like having a tutor at your side 24/7.\nEla helps you by:\nSummarizing complex lessons into bite-sized insights.\nTesting your knowledge so you focus on what matters.\nExplaining tricky concepts clearly.\nGuiding you during hands-on labs to troubleshoot and stay on track.\nWith Ela’s support, you can accelerate your learning, overcome roadblocks, and gain confidence faster than ever before.\nHow to Activate Your Cloud Academy Access Today\nGetting started is fast and easy:\nLog in to visualstudio.com with your Visual Studio subscription.\nNavigate to the Benefits section.\nActivate your Cloud Academy access — no credit card, no trials, just instant access.\nThis exclusive benefit is available at no extra cost with select Visual Studio subscription levels.\nTo see if you’re Professional or Enterprise subscription is eligible, check out this document on MS Learn.\nYour Next Step Toward Cloud Mastery\nAt Microsoft, we’re committed to empowering you with tools, training, and resources that truly move the needle. Based on the incredible feedback we’ve received, Cloud Academy is proving to be more than just another training platform — it’s a catalyst for career growth, innovation, and real-world impact.\nWhether you want to build apps that scale, improve your security posture, or prepare for certification, Cloud Academy is here to help you every step of the way. Take advantage of this special benefit today and watch how your Azure skills—and your confidence—soar.\nStay Connected with Visual Studio\nDon’t forget to visit the Visual Studio Hub for the latest updates, videos, and community discussions to keep your developer journey vibrant.\nGot thoughts on Visual Studio benefits or Cloud Academy? I’d love to hear from you! Connect with me on LinkedIn.\n \n \nThe post Cloud Academy: Unlock Your Azure Skills and Accelerate Your Career appeared first on Visual Studio Blog.",
        "dc:creator": "Jim Harrer",
        "comments": "https://devblogs.microsoft.com/visualstudio/cloud-academy-benefit-for-visual-studio-subscribers/#comments",
        "content": "<p>When we launched the Cloud Academy benefit for Visual Studio Professional and Enterprise subscribers back in March 2025, our goal was simple: give you the hands-on, practical learning experience you need to confidently master Azure and cloud technologies — without spending a dime beyond your subscription. Why? Because in today’s fast-changing tech world, knowing theory [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/cloud-academy-benefit-for-visual-studio-subscribers/\">Cloud Academy: Unlock Your Azure Skills and Accelerate Your Career</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "When we launched the Cloud Academy benefit for Visual Studio Professional and Enterprise subscribers back in March 2025, our goal was simple: give you the hands-on, practical learning experience you need to confidently master Azure and cloud technologies — without spending a dime beyond your subscription. Why? Because in today’s fast-changing tech world, knowing theory […]\nThe post Cloud Academy: Unlock Your Azure Skills and Accelerate Your Career appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=253411",
        "categories": [
          "Visual Studio"
        ],
        "isoDate": "2025-06-03T14:00:08.000Z"
      },
      {
        "creator": "Javier De la Garza",
        "title": "Extension Manager updates in Visual Studio",
        "link": "https://devblogs.microsoft.com/visualstudio/extension-manager-updates-in-visual-studio/",
        "pubDate": "Mon, 02 Jun 2025 18:13:24 +0000",
        "content:encodedSnippet": "The latest updates in Visual Studio 2022 introduced features specifically designed to improve how you manage extensions. These updates offer tools that help you automate processes, provide detailed controls for configuration, and enhance the user interface to streamline your development workflows.\nSeamless auto updates\nVisual Studio now automatically triggers updates whenever you open the Extension Manager window. This ensures you are consistently working with the latest features and fixes without needing to manually initiate updates.\n\nInfobar notifications for applied updates\nAn Infobar will now appear when updates are applied, reminding you to restart Visual Studio. This ensures the updates take effect without requiring additional steps on your part.\nAuto update settings on the extension page\nSettings for auto updates have been integrated directly into the extension page, making it easier to access and configure them. You can quickly adjust preferences without navigating through multiple menus.\n\nFilter by pending changes\nA new “Pending” category has been added to highlight pending updates or modifications. This feature helps developers like you stay informed about changes that require attention..\n\nAdditional auto update settings in Tools > Options\nFor better accessibility, auto update settings are also available under **Tools > Options**. This provides an alternative way to manage your preferences in a centralized location.\n\nSimplified settings interface\nThe user interface for managing settings has been redesigned to reduce complexity. With fewer clicks and clearer options, configuring your environment is now more intuitive.\nExcluded extensions list\nAn excluded extensions list is now available, automatically populating with extensions you choose to exclude from automatic updates. This feature is especially useful for extensions critical to your workflow, where manual update control is preferred.\nConclusion\nThese enhancements in Visual Studio 2022 aim to make extension management more user-friendly and efficient. By automating frequent tasks and providing more granular control, these updates contribute to a streamlined development experience that increase your productivity!\nWe appreciate the feedback from our developer community, which plays a vital role in shaping these updates. Please continue to share your insights to help us improve Visual Studio with every release.\nThe post Extension Manager updates in Visual Studio appeared first on Visual Studio Blog.",
        "dc:creator": "Javier De la Garza",
        "comments": "https://devblogs.microsoft.com/visualstudio/extension-manager-updates-in-visual-studio/#comments",
        "content": "<p>The latest updates in Visual Studio 2022 introduced features specifically designed to improve how you manage extensions. These updates offer tools that help you automate processes, provide detailed controls for configuration, and enhance the user interface to streamline your development workflows. Seamless auto updates Visual Studio now automatically triggers updates whenever you open the Extension [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/extension-manager-updates-in-visual-studio/\">Extension Manager updates in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "The latest updates in Visual Studio 2022 introduced features specifically designed to improve how you manage extensions. These updates offer tools that help you automate processes, provide detailed controls for configuration, and enhance the user interface to streamline your development workflows. Seamless auto updates Visual Studio now automatically triggers updates whenever you open the Extension […]\nThe post Extension Manager updates in Visual Studio appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=253400",
        "categories": [
          "Extensibility",
          "Visual Studio",
          "Extensions",
          "Updates",
          "visualstudio.extensibility"
        ],
        "isoDate": "2025-06-02T18:13:24.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": [
      {
        "title": "높은 성능의 AI 에이전트 구현을 위한 Gemma3 Function call 파인튜닝",
        "link": "http://daddynkidsmakers.blogspot.com/2025/06/ai-gemma3-function-call.html",
        "pubDate": "2025-06-06T10:33:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은&nbsp;높은 성능의 AI 에이전트 구현을 위한 Gemma3 Function call 파인튜닝 방법을 설명한다.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjAmUYxlpxmCzXUtSnR5zlSouTuYUC8BsO7MJKdZC54cxj1vVFR1BGoZmySiw5MJLXTim-E9qsKse6SEu8k5FiPu4qZPMICMpLceAADnSrgc5FVr2-zzAoJ_39a-sFm6SdQGdKWyPtCil4y14tWxsdGgCvnejYvdmyZAJM1XVvZTM2dhge0TLg14d-rl0qn\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"1231\" data-original-width=\"2000\" height=\"246\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjAmUYxlpxmCzXUtSnR5zlSouTuYUC8BsO7MJKdZC54cxj1vVFR1BGoZmySiw5MJLXTim-E9qsKse6SEu8k5FiPu4qZPMICMpLceAADnSrgc5FVr2-zzAoJ_39a-sFm6SdQGdKWyPtCil4y14tWxsdGgCvnejYvdmyZAJM1XVvZTM2dhge0TLg14d-rl0qn=w400-h246\" width=\"400\" /></a></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>펑션콜 데이터셋 구조</b></div><div style=\"text-align: left;\">다음은 펑션콜 CoT 구조 데이터셋 예시이다.</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEiCQRtkW_JIycDIHWdGMEaF3ycYmUBjZP96n_puZgYSRHxy3FTYSF17n5WRgeJvhElUjagnYNyqdSPTigfUsv2BIV5rzZWEl7KGn_iA5T7sE5kYIz7TD4bdUnsXgdtkz8ZGhWyM89LTohSem-Zk0QOzisu0UAbFKRVKB0R0pBIKyz7cJajLOSJ4spgVFRSn\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"547\" data-original-width=\"976\" height=\"287\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEiCQRtkW_JIycDIHWdGMEaF3ycYmUBjZP96n_puZgYSRHxy3FTYSF17n5WRgeJvhElUjagnYNyqdSPTigfUsv2BIV5rzZWEl7KGn_iA5T7sE5kYIz7TD4bdUnsXgdtkz8ZGhWyM89LTohSem-Zk0QOzisu0UAbFKRVKB0R0pBIKyz7cJajLOSJ4spgVFRSn=w513-h287\" width=\"513\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://huggingface.co/datasets/AymanTarig/function-calling-v0.2-with-r1-cot\">AymanTarig/function-calling-v0.2-with-r1-cot · Datasets at Hugging Face</a></div><br /></div><b>레퍼런스</b></div><ul><li><a href=\"https://medium.com/@akriti.upadhyay/enhancing-gemma-3s-capabilities-with-fine-tuning-for-function-calling-f1bc74051abe\">Enhancing Gemma 3’s Capabilities with Fine-Tuning for Function Calling | by Akriti Upadhyay | May, 2025 | Medium</a></li><li><a href=\"https://pdf.elspublishing.com/paper/journal/open/SC/earlyOnline/2025/SC-20250004.pdf\">General AI agent framework for smart buildings based on large language models and ReAct strategy</a></li><li><a href=\"https://medium.com/data-science-collective/the-open-source-stack-for-ai-agents-8ab900e33676\">Open-Source Tools for Agents | Data Science Collective</a></li><li><a href=\"https://levelup.gitconnected.com/the-era-of-high-paying-tech-jobs-is-over-572e4e577758\">The Era of High-Paying Tech Jobs is Over | by Somnath Singh | Level Up Coding</a></li><li><a href=\"https://github.com/AGI-Edgerunners/LLM-Agents-Papers\">AGI-Edgerunners/LLM-Agents-Papers: A repo lists papers related to LLM based agent</a></li><li><a href=\"https://distilabel.argilla.io/dev/sections/pipeline_samples/papers/apigen/#script-and-final-dataset\">APIGen - Distilabel Docs</a></li><li><a href=\"https://huggingface.co/datasets/AymanTarig/function-calling-v0.2-with-r1-cot\">AymanTarig/function-calling-v0.2-with-r1-cot · Datasets at Hugging Face</a></li><li><a href=\"https://blog.langchain.dev/benchmarking-agent-tool-use/\">Benchmarking Agent Tool Use</a></li></ul>",
        "contentSnippet": "이 글은 높은 성능의 AI 에이전트 구현을 위한 Gemma3 Function call 파인튜닝 방법을 설명한다.\n\n\n\n\n\n펑션콜 데이터셋 구조\n다음은 펑션콜 CoT 구조 데이터셋 예시이다.\n\n\nAymanTarig/function-calling-v0.2-with-r1-cot · Datasets at Hugging Face\n\n레퍼런스\n\nEnhancing Gemma 3’s Capabilities with Fine-Tuning for Function Calling | by Akriti Upadhyay | May, 2025 | Medium\nGeneral AI agent framework for smart buildings based on large language models and ReAct strategy\nOpen-Source Tools for Agents | Data Science Collective\nThe Era of High-Paying Tech Jobs is Over | by Somnath Singh | Level Up Coding\nAGI-Edgerunners/LLM-Agents-Papers: A repo lists papers related to LLM based agent\nAPIGen - Distilabel Docs\nAymanTarig/function-calling-v0.2-with-r1-cot · Datasets at Hugging Face\nBenchmarking Agent Tool Use",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-1817605231868260949",
        "isoDate": "2025-06-06T10:33:00.000Z"
      },
      {
        "title": "Gemma3 기반 Ollama 활용 AI 에이전트 개발 핵심 Function Call 구현해보기",
        "link": "http://daddynkidsmakers.blogspot.com/2025/06/gemma3-ollama-function-call.html",
        "pubDate": "2025-06-04T06:56:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은 AI 에이전트(Agent) 개발 시 필수적인 함수호출 방법을 오픈소스를 이용해 구현해 본다. 이를 위해, Gemma3(젬마) LLM(Large Language Model) 기반 Ollama 활용 Function Call(펑션콜) 실습 내용을 소개하고 실행 결과를 확인한다. 아울러, 이런 함수호출 방식의 한계점을 개선하기 위한 솔류션을 나눔한다. 이 실습의 결과는 다음과 같다.&nbsp;</div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgC43jML8O5ZD9gE0UBiPfEDwi1HzgyjmgHhe-L2h1Npxx1IdDAvhjEk2UBC_Ca3NUzr7WcKf9YdHx7oRfOKEQ3gxVWT8C3mbevsEMQiFif23p_BnCRz67cKLh35LPGT7Uwj5IjwUaUChbJm1Cu9dpjVGDdZqIJqQA97Xnjr-HnpwN_TdR9yTwXW0bRdO4M/s923/gemma3.gif\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"923\" data-original-width=\"766\" height=\"296\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgC43jML8O5ZD9gE0UBiPfEDwi1HzgyjmgHhe-L2h1Npxx1IdDAvhjEk2UBC_Ca3NUzr7WcKf9YdHx7oRfOKEQ3gxVWT8C3mbevsEMQiFif23p_BnCRz67cKLh35LPGT7Uwj5IjwUaUChbJm1Cu9dpjVGDdZqIJqQA97Xnjr-HnpwN_TdR9yTwXW0bRdO4M/w246-h296/gemma3.gif\" width=\"246\" /></a><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJp5nOW2mGnTP3fmGJKyDr4mWaSxy-520mFRak2qwYX6mleo9QHErXM0ur6uI_AC4M17kU0vSEFhobzX7zhoc84vL5PTg5Zv6lkTYzMoPx23aVtlkxW9qqAKL6r0O9ykI1wTKkmA01cAvndzbQnvjfj00D_7oDd6xQ5oSvTn_2NM2NhZ1cp6-Uw2VDEGLh/s885/f1.jpg\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"885\" data-original-width=\"760\" height=\"298\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgJp5nOW2mGnTP3fmGJKyDr4mWaSxy-520mFRak2qwYX6mleo9QHErXM0ur6uI_AC4M17kU0vSEFhobzX7zhoc84vL5PTg5Zv6lkTYzMoPx23aVtlkxW9qqAKL6r0O9ykI1wTKkmA01cAvndzbQnvjfj00D_7oDd6xQ5oSvTn_2NM2NhZ1cp6-Uw2VDEGLh/w256-h298/f1.jpg\" width=\"256\" /></a><br /><br /></div><div style=\"text-align: left;\">이 글은 다음 내용을 포함한다.</div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li>AI 에이전트 구현을 위한 함수 호출 방법</li><li>Ollama 를 통한 Gemma3 사용법</li><li>채팅 형식 프롬프트 및 메모리 사용법</li><li>Gradio 기반 웹 앱 개발</li><li>Function call 의 한계와 솔류션</li></ul><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgPZ4tbKonsWRUbKbnU-0gj0LzofIZaKWCY3U0ppscTZvA_bvBSvpNWfnEeVly61F4XKvMwsQFs67OstafT06qJPd6EkgV3L1CbaIDqinxztPgE5ze-dYD0fNc986bPFDXBrOm7fC15kWeAivVgRAX9P8gM0HxSLLoFaxhR7Wy1QfAqAIX2rvrokFxU4A0u\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"696\" data-original-width=\"1400\" height=\"275\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgPZ4tbKonsWRUbKbnU-0gj0LzofIZaKWCY3U0ppscTZvA_bvBSvpNWfnEeVly61F4XKvMwsQFs67OstafT06qJPd6EkgV3L1CbaIDqinxztPgE5ze-dYD0fNc986bPFDXBrOm7fC15kWeAivVgRAX9P8gM0HxSLLoFaxhR7Wy1QfAqAIX2rvrokFxU4A0u=w553-h275\" width=\"553\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\">AI 에이전트 내부 Function call 메커니즘(Akriti, 2025)</div></div><div><br /></div><div>이 글의 구현 코드는 다음 링크에서 확인할 수 있다.</div><div><ul style=\"text-align: left;\"><li><a href=\"https://github.com/mac999/AI_agent_simple_function_call\">mac999/AI_agent_simple_function_call</a></li></ul><div><b>Gemma3 모델 특징</b></div></div><div><p>Gemma 3는 구글이 개발해&nbsp; 2025년 3월 10일에 출시한 LLM으로, 차세대 경량 오픈 멀티모달 AI 모델로, 텍스트와 이미지를 동시에 처리할 수 있는 기능을 갖추고 있다. 이 모델은 다양한 크기와 사양으로 제공되어 단일 GPU 또는 TPU 환경에서도 실행 가능하다.</p>\n<p>Gemma 3는 1B, 4B, 12B, 27B의 네 가지 모델 크기로 제공되며, 각각 10억, 40억, 120억, 270억 개의 파라미터를 갖추고 있다. 1B 모델은 텍스트 전용으로 32K 토큰의 입력 컨텍스트를 지원하고, 4B, 12B, 27B 모델은 멀티모달 기능을 지원하며 128K 토큰의 입력 컨텍스트를 처리할 수 있다. 이는 이전 Gemma 모델보다 16배 확장된 크기로, 훨씬 더 많은 양의 정보를 한 번에 처리할 수 있게 해준다.</p>\n<p>이 모델은 텍스트와 이미지 데이터를 동시에 처리하고 이해하는 멀티모달 기능을 제공한다. 이미지 해석, 객체 인식, 시각적 질의응답 등 다양한 작업을 수행할 수 있으며, 텍스트 기반 작업에 시각적 정보를 효과적으로 활용할 수 있도록 지원한다.&nbsp;</p><p></p><div class=\"separator\" style=\"clear: both; text-align: center;\"><span style=\"margin-left: 1em; margin-right: 1em;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgpavqfnSFTPAQ5GU0lEkSPTmGgO6U223hAyKiUwyHt8Ey37f2eMpnH8BIGqhhuSp-41iUf_Pjeb4direJ1szDwKnTQNCFH8VnN1_wlybckGiWosHfATHL-B9k9Sl_N66pv6X40GIehgODBXU6NQ7W1RstzULPXpgGEeLJUxnO_p3BHJc5v9JdtW4tVpn-9\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"896\" data-original-width=\"672\" height=\"240\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgpavqfnSFTPAQ5GU0lEkSPTmGgO6U223hAyKiUwyHt8Ey37f2eMpnH8BIGqhhuSp-41iUf_Pjeb4direJ1szDwKnTQNCFH8VnN1_wlybckGiWosHfATHL-B9k9Sl_N66pv6X40GIehgODBXU6NQ7W1RstzULPXpgGEeLJUxnO_p3BHJc5v9JdtW4tVpn-9\" width=\"180\" /></a></span><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEiT6X0A64dHwKjG6_9nAlQiLFc6v6bJ_qEXToGgyJP4_bGd2GO93MYRBxe3ZzeVZWjQZ9voGWU62WaWQSXGMdwwXomb89qdqgeTmNdNluzqmz-9P1aOP8Uu5zJsxaOvEv4Fm1UryGmLr2LB8JmMivxecSAhoxenPn5fhI6-o-QPt8-ebGBId-fe-cc0JkDM\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"4032\" data-original-width=\"3024\" height=\"240\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEiT6X0A64dHwKjG6_9nAlQiLFc6v6bJ_qEXToGgyJP4_bGd2GO93MYRBxe3ZzeVZWjQZ9voGWU62WaWQSXGMdwwXomb89qdqgeTmNdNluzqmz-9P1aOP8Uu5zJsxaOvEv4Fm1UryGmLr2LB8JmMivxecSAhoxenPn5fhI6-o-QPt8-ebGBId-fe-cc0JkDM\" width=\"180\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\">&nbsp;&nbsp;<a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjLkalqmbDqdomwyJQf8uI9A318iI9i26mzGQoJ_K5pAeOUyYIfzvZzD5DF8VDwDO5dwdgtzthgr7bGGGi02qIEk06vnKlOve0Hmq-wZPar_r7-O6U12tQciCOi0raSH6YyiwVZBJ-7KHDBnKmXg-o05dRyWF4yV2nFQ-FgMYvmAV68wE_qpuZpq7F9CyPz\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"69\" data-original-width=\"478\" height=\"52\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjLkalqmbDqdomwyJQf8uI9A318iI9i26mzGQoJ_K5pAeOUyYIfzvZzD5DF8VDwDO5dwdgtzthgr7bGGGi02qIEk06vnKlOve0Hmq-wZPar_r7-O6U12tQciCOi0raSH6YyiwVZBJ-7KHDBnKmXg-o05dRyWF4yV2nFQ-FgMYvmAV68wE_qpuZpq7F9CyPz=w366-h52\" width=\"366\" /></a></div></div><a href=\"https://huggingface.co/blog/gemma3\">Welcome Gemma 3: Google's all new multimodal, multilingual, long context open LLM</a><br /><p></p>\n<p>Gemma 3는 140개 이상의 언어를 지원하여 전 세계 다양한 언어 사용자를 대상으로 하는 AI 애플리케이션 개발에 매우 유리하다. 사용자는 자신의 모국어로 Gemma 3와 상호작용할 수 있으며, 다국어 기반의 텍스트 분석 및 생성 작업도 효율적으로 수행할 수 있다.</p>\n<p>이 모델은 다양한 작업 수행 능력을 갖추고 있다. 질문 답변, 텍스트 요약, 논리적 추론, 창의적인 텍스트 형식 생성(시, 스크립트, 코드, 마케팅 문구, 이메일 초안 등), 이미지 데이터 분석 및 추출 등 광범위한 자연어 처리 및 컴퓨터 비전 관련 작업을 수행할 수 있다. 또한, 함수 호출 및 구조화된 출력을 지원하여 개발자들이 특정 작업을 자동화하고 에이전트 기반의 경험을 구축하는 데 도움을 준다.</p>\n<p>Gemma 3는 다양한 도구 및 프레임워크와 원활하게 통합된다. Hugging Face Transformers, Ollama, JAX, Keras, PyTorch, Google AI Edge, UnSloth, vLLM, Gemma.cpp 등 다양한 개발 도구 및 프레임워크와 호환되어 개발자들이 자신이 익숙한 환경에서 Gemma 3를 쉽게 활용하고 실험할 수 있다.</p>\n<p>이 모델은 다양한 벤치마크 테스트에서 동급 모델 대비 최첨단 성능을 입증했다. 특히, Chatbot Arena Elo Score에서 1338점을 기록하며, 여러 오픈 소스 및 상용 모델보다 높은 성능을 보였다.&nbsp;</p>\n<p>Gemma 3는 오픈 모델로, 개방형 가중치를 제공하여 사용자가 자유롭게 조정하고 배포할 수 있다. Kaggle과 Hugging Face에서 다운로드 가능하며, Creative Commons 및 Apache 2.0 라이선스를 따름으로써, 개발자와 연구자에게 VLM 기술에 대한 접근성을 높여준다.</p></div></div><div style=\"text-align: left;\"><b>개발 환경</b></div><div style=\"text-align: left;\">개발 환경은 다음과 같다. 미리 설치, 가입한다.</div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li>ollama:&nbsp;&nbsp;<a href=\"https://ollama.com/download/windows\">https://ollama.com/download/windows</a></li><li>gemma3:&nbsp;<a href=\"https://ollama.com/search\">https://ollama.com/search</a></li><li>serper 서비스: 가입.&nbsp;<a href=\"https://serper.dev/dashboard\">https://serper.dev/dashboard</a>&nbsp;</li></ul><div>설치되어 있다면, 다음 명령을 터미널에서 실행한다.</div><div>ollama pull gemma3:4b</div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJWYeEDOBMGd2ouDsvdKZbcIk9QLtE1JSQkxw3HrENY7bnIlryDZF9qzmydQGPnSdrwkidraUDWQgVHChYg_JpjTamA5nwb5GBkN-PL-HHM4SEAHOUuCdLvFjwvsNdGEXC3GCmgbRjaOqa35TKcJR96vIQXndCqxH1Sl82v2tEBl7MZE37pN1LzX3IeLzl\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"492\" data-original-width=\"1033\" height=\"202\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJWYeEDOBMGd2ouDsvdKZbcIk9QLtE1JSQkxw3HrENY7bnIlryDZF9qzmydQGPnSdrwkidraUDWQgVHChYg_JpjTamA5nwb5GBkN-PL-HHM4SEAHOUuCdLvFjwvsNdGEXC3GCmgbRjaOqa35TKcJR96vIQXndCqxH1Sl82v2tEBl7MZE37pN1LzX3IeLzl=w426-h202\" width=\"426\" /></a></div></div></div><div class=\"separator\" style=\"clear: both; text-align: center;\">gemma3:4b GPU VRAM 소모량</div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div>이제 다음과 같이 모델을 실행해 볼 수 있다.&nbsp;</div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEg6oGTJTrEQBonIcLw6f6ZTXaeXWwkChJQS5GETDQnknW2wjm4nNd7UmQd-sVUeFWWv3wEtWmf4xRJ8GiqsTjh1f3CpUBnMQASKMTH8tXSg7IBO3hA5Ae4COdAcFwNDphahO6XYRMliU5PX-HwPJX6oVv013KUtEhd63OuLyO5vQ73ofikeSIYvLQpeM3u0\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"283\" data-original-width=\"985\" height=\"144\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEg6oGTJTrEQBonIcLw6f6ZTXaeXWwkChJQS5GETDQnknW2wjm4nNd7UmQd-sVUeFWWv3wEtWmf4xRJ8GiqsTjh1f3CpUBnMQASKMTH8tXSg7IBO3hA5Ae4COdAcFwNDphahO6XYRMliU5PX-HwPJX6oVv013KUtEhd63OuLyO5vQ73ofikeSIYvLQpeM3u0=w502-h144\" width=\"502\" /></a></div><br /></div></div><div style=\"text-align: left;\">참고로, GPU VRAM 등을 고려해 더 성능이 좋은 파라메터수 많은 대형 모델을 사용할 수도 있다.</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhk2dkbUiDZaUpH_6UhADSOesbuit96fmH_k5aERSusYLvXFmMh2yzGhGqsl7myn6hP-0ImfrIHyyJ5uecoxN-5jlD0sm56__QQ6QBjouR_xyzeqBihDN36HAECepK0jkhcZFCisBG9UK7_VdzjlymXUOtzm42PmwcXcFOM1FXw45Cj0xyJZaQaRPFeesvd\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"639\" data-original-width=\"921\" height=\"222\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhk2dkbUiDZaUpH_6UhADSOesbuit96fmH_k5aERSusYLvXFmMh2yzGhGqsl7myn6hP-0ImfrIHyyJ5uecoxN-5jlD0sm56__QQ6QBjouR_xyzeqBihDN36HAECepK0jkhcZFCisBG9UK7_VdzjlymXUOtzm42PmwcXcFOM1FXw45Cj0xyJZaQaRPFeesvd\" width=\"320\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\">gemma3 지원 모델들</div><br /></div><div style=\"text-align: left;\"><b>처리 프로세스</b></div><div style=\"text-align: left;\">이 실습 프로그램의 프로세스는 다음과 같다.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><div>Gradio 앱이 시작되면, 사용자의 입력이 발생하고 이 입력은 process_message 함수에 전달된다. 이 함수는 사용자의 메시지를 chat_history에 추가하여 대화 기록을 저장한다. 이후 모델에게 전달할 대화 문맥을 구성하기 위해 messages 리스트가 생성된다.</div><div><br /></div><div>그 다음 단계에서는 ollama.chat 함수를 통해 언어 모델에게 응답을 요청하게 되며, 이 응답 내에 함수 호출이 포함되어 있는지를 확인한다. 만약 응답에 함수 호출이 포함되어 있다면, 이를 parse_function_call 함수를 통해 파싱한다.</div><div><br /></div><div>파싱된 함수가 google_search라면, 모델이 검색을 원한다고 판단하여 검색 쿼리를 추출하고 검색 수행 예정임을 사용자에게 안내하는 메시지를 추가한다. 이후 실제로 google_search 함수를 실행하여 외부 검색을 수행한다.</div><div><br /></div><div>검색 결과는 다시 chat_history에 저장되며, 이 결과를 바탕으로 언어 모델에게 재질문을 하여 더 정확하고 완성된 응답을 유도한다. 모델이 생성한 최종 응답은 chat_history에 마지막으로 추가되고, 이 전체 대화 기록이 사용자에게 반환된다.</div><div><br /></div><div>이 구조는 사용자의 질의에 따라 외부 정보까지 능동적으로 검색하고 반영할 수 있는 LLM 기반 AI 에이전트의 대표적인 흐름을 보여준다.</div><div><br /></div><div>다음은 이 순서도를 보여준다.</div></div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjw1M9HD8VrRqiAjyw8oBYJqP3MmQ4fO1BCVhj2VSNV4ZTdPrTxGxzSEga0DIfJlOPGI88Uqyt-DFIg5509brIjXLFLgfGGeYGxoOo4vpUaQsspTm1E8BgdE3t7l5oMtQ6-b2hhqQSYy1ql4qyp7JtgT_12EEM-1sF-PcD1lPOCLs3d3x0r_8O3_K0gFRjW\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"862\" data-original-width=\"310\" height=\"640\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjw1M9HD8VrRqiAjyw8oBYJqP3MmQ4fO1BCVhj2VSNV4ZTdPrTxGxzSEga0DIfJlOPGI88Uqyt-DFIg5509brIjXLFLgfGGeYGxoOo4vpUaQsspTm1E8BgdE3t7l5oMtQ6-b2hhqQSYy1ql4qyp7JtgT_12EEM-1sF-PcD1lPOCLs3d3x0r_8O3_K0gFRjW=w229-h640\" width=\"229\" /></a></div><br /></div><div style=\"text-align: left;\"><b>구현하기</b></div><div style=\"text-align: left;\">터미널에서 다음 라이브러리를 설치한다.</div><div style=\"text-align: left;\">pip install langchain-core langchain-openai gradio ollama requests python-dotenv pydantic</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">새로운 파이썬 파일(<a href=\"https://github.com/mac999/AI_agent_simple_function_call/blob/main/ai_agent_func_call_gemma3.py\">코드 참고</a>)을 생성한 후, 우선, 필요한 라이브러리를 임포트한다.&nbsp;</div><div style=\"text-align: left;\"><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #c586c0;\">import</span> gradio <span style=\"color: #c586c0;\">as</span> gr</div><div><span style=\"color: #c586c0;\">import</span> ollama</div><div><span style=\"color: #c586c0;\">import</span> requests, json, os</div><div><span style=\"color: #c586c0;\">from</span> dotenv <span style=\"color: #c586c0;\">import</span> load_dotenv</div><div><span style=\"color: #c586c0;\">from</span> pydantic <span style=\"color: #c586c0;\">import</span> BaseModel, Field</div><div><span style=\"color: #c586c0;\">from</span> typing <span style=\"color: #c586c0;\">import</span> Optional, Dict, Any, List</div><br /><div>load_dotenv()</div><div>SERPER_API_KEY <span style=\"color: #d4d4d4;\">=</span> os.getenv(<span style=\"color: #ce9178;\">'SERPER_API_KEY'</span>)</div></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">그리고, 사용하는 API 키를 가져온다. 이를 위해, 미리 .env 파일을 다음과 같이 만들어 놓고, 해당 API를 입력해 놓야야 한다.</div><div style=\"text-align: left;\"><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #6a9955;\"># .env</span></div><div><span style=\"color: #569cd6;\">SERPER_API_KEY</span>=&lt;YOUR API KEY&gt;</div><br /></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">파라메터에서 검색 질의문, 함수호출명과 파라메터를 정의한다. 아울러, 질의 결과를 명확히 데이터항목으로 추출하기 위해서 검색 결과가 될 데이타항목(타이틀, 링크, 스닙펫) 형식을 pydantic의 basemodel을 이용해 명확히 정의한다. 그리고, LLM 호출 결과를 펑션콜이 가능한 형식으로 변환하기 위한 파싱 함수인 parse_function_call 을 정의한다.</div><div style=\"text-align: left;\"><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">SearchParameters</span>(<span style=\"color: #4ec9b0;\">BaseModel</span>):</div><div>&nbsp; &nbsp; query: <span style=\"color: #4ec9b0;\">str</span> <span style=\"color: #d4d4d4;\">=</span> Field(..., <span style=\"color: #9cdcfe;\">description</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"Search term to look up\"</span>)</div><br /><div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">FunctionCall</span>(<span style=\"color: #4ec9b0;\">BaseModel</span>):</div><div>&nbsp; &nbsp; name: <span style=\"color: #4ec9b0;\">str</span></div><div>&nbsp; &nbsp; parameters: Dict[<span style=\"color: #4ec9b0;\">str</span>, Any]</div><br /><div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">SearchResult</span>(<span style=\"color: #4ec9b0;\">BaseModel</span>):</div><div>&nbsp; &nbsp; title: <span style=\"color: #4ec9b0;\">str</span></div><div>&nbsp; &nbsp; link: <span style=\"color: #4ec9b0;\">str</span></div><div>&nbsp; &nbsp; snippet: <span style=\"color: #4ec9b0;\">str</span></div><br /><div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">to_string</span>(<span style=\"color: #9cdcfe;\">self</span>) -&gt; <span style=\"color: #4ec9b0;\">str</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Title: </span><span style=\"color: #569cd6;\">{self</span>.title<span style=\"color: #569cd6;\">}</span><span style=\"color: #d7ba7d;\">\\n</span><span style=\"color: #ce9178;\">Link: </span><span style=\"color: #569cd6;\">{self</span>.link<span style=\"color: #569cd6;\">}</span><span style=\"color: #d7ba7d;\">\\n</span><span style=\"color: #ce9178;\">Snippet: </span><span style=\"color: #569cd6;\">{self</span>.snippet<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span></div><br /><div><span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">google_search</span>(<span style=\"color: #9cdcfe;\">query</span>: <span style=\"color: #4ec9b0;\">str</span>) -&gt; SearchResult:</div><div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">\"\"\"Perform a Google search using Serper.dev API\"\"\"</span></div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">try</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; url <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #ce9178;\">\"https://google.serper.dev/search\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; payload <span style=\"color: #d4d4d4;\">=</span> json.dumps({<span style=\"color: #ce9178;\">\"q\"</span>: query})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; headers <span style=\"color: #d4d4d4;\">=</span> {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'X-API-KEY'</span>: SERPER_API_KEY,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'Content-Type'</span>: <span style=\"color: #ce9178;\">'application/json'</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; response <span style=\"color: #d4d4d4;\">=</span> requests.post(url, <span style=\"color: #9cdcfe;\">headers</span><span style=\"color: #d4d4d4;\">=</span>headers, <span style=\"color: #9cdcfe;\">data</span><span style=\"color: #d4d4d4;\">=</span>payload)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; response.raise_for_status() &nbsp;<span style=\"color: #6a9955;\"># 잘못된 상태 코드에 대해 예외 발생</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; results <span style=\"color: #d4d4d4;\">=</span> response.json()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> <span style=\"color: #569cd6;\">not</span> results.get(<span style=\"color: #ce9178;\">'organic'</span>):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">raise</span> <span style=\"color: #4ec9b0;\">ValueError</span>(<span style=\"color: #ce9178;\">\"No search results found.\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; first_result <span style=\"color: #d4d4d4;\">=</span> results[<span style=\"color: #ce9178;\">'organic'</span>][<span style=\"color: #b5cea8;\">0</span>]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> SearchResult(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span><span style=\"color: #d4d4d4;\">=</span>first_result.get(<span style=\"color: #ce9178;\">'title'</span>, <span style=\"color: #ce9178;\">'No title'</span>),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">link</span><span style=\"color: #d4d4d4;\">=</span>first_result.get(<span style=\"color: #ce9178;\">'link'</span>, <span style=\"color: #ce9178;\">'No link'</span>),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">snippet</span><span style=\"color: #d4d4d4;\">=</span>first_result.get(<span style=\"color: #ce9178;\">'snippet'</span>, <span style=\"color: #ce9178;\">'No snippet available.'</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">except</span> <span style=\"color: #4ec9b0;\">Exception</span> <span style=\"color: #c586c0;\">as</span> e:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Search error: </span><span style=\"color: #569cd6;\">{</span><span style=\"color: #4ec9b0;\">str</span>(e)<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">raise</span></div><br /><div><span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">parse_function_call</span>(<span style=\"color: #9cdcfe;\">response</span>: <span style=\"color: #4ec9b0;\">str</span>) -&gt; Optional[FunctionCall]:</div><div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">\"\"\"Parse the model's response to extract function calls\"\"\"</span></div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">try</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># Clean the response and find JSON structure</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; response <span style=\"color: #d4d4d4;\">=</span> response.strip()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; start_idx <span style=\"color: #d4d4d4;\">=</span> response.find(<span style=\"color: #ce9178;\">'{'</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; end_idx <span style=\"color: #d4d4d4;\">=</span> response.rfind(<span style=\"color: #ce9178;\">'}'</span>) <span style=\"color: #d4d4d4;\">+</span> <span style=\"color: #b5cea8;\">1</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> start_idx <span style=\"color: #d4d4d4;\">==</span> <span style=\"color: #d4d4d4;\">-</span><span style=\"color: #b5cea8;\">1</span> <span style=\"color: #569cd6;\">or</span> end_idx <span style=\"color: #d4d4d4;\">==</span> <span style=\"color: #b5cea8;\">0</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">None</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; json_str <span style=\"color: #d4d4d4;\">=</span> response[start_idx:end_idx]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; data <span style=\"color: #d4d4d4;\">=</span> json.loads(json_str)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> FunctionCall(<span style=\"color: #d4d4d4;\">**</span>data)</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">except</span> <span style=\"color: #4ec9b0;\">Exception</span> <span style=\"color: #c586c0;\">as</span> e:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Error parsing function call: </span><span style=\"color: #569cd6;\">{</span><span style=\"color: #4ec9b0;\">str</span>(e)<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">None</span></div><br /></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">gemma에 지시할 시스템 프롬프트 명령을 정의한다. prompt_system_message는 이 챗봇이 어떻게 동작해야 하는지, 그리고 어떤 기준으로 답변을 해야 하는지에 대한 지침을 제공하는 역할을 한다. 이 메시지는 챗봇이 2024년까지의 정보를 학습한 AI 어시스턴트임을 명확히 하고, 사용자의 질문에 대해 가능한 경우에는 바로 답변을 하되, 최신 정보나 불확실한 내용, 시의성이 있는 질문에 대해서는 반드시 펑션콜을 통해 검색 기능을 활용해야 함을 명시한다. 이전 대화 내용이 함께 입력으로 주어지기 때문에, 챗봇은 이 대화 맥락을 참고하여 일관성 있고 상황에 맞는 답변을 해야 한다고 안내한다. 참고로, 준수해야 할 gemma3의 function call 형식은 다음과 같다.&nbsp;</div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://github.com/philschmid/gemini-samples/blob/main/examples/gemma-function-calling.ipynb\">gemini-samples/examples/gemma-function-calling.ipynb at main · philschmid/gemini-samples</a></li></ul></div><div>검색이 필요한 상황과 그렇지 않은 상황을 구체적으로 구분하여, 챗봇이 임의로 정보를 추정하거나 추가하지 않고, 검색 결과에 기반한 사실만을 간결하게 전달하도록 유도한다. 검색이 필요한 경우에는 정해진 JSON 형식으로만 응답하도록 하여, 시스템이 함수 호출 방식으로 검색을 처리할 수 있게 한다.</div><div><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #6a9955;\"># 프롬프트 시스템 메세지 정의</span></div><div>prompt_system_message <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #ce9178;\">\"\"\"You are an AI assistant with training data up to 2024. Answer questions directly when possible, and use search when necessary.</span></div><br /><div><span style=\"color: #ce9178;\">You will receive previous conversation messages as part of the input. Use these prior messages to maintain context and provide coherent, context-aware answers.</span></div><br /><div><span style=\"color: #ce9178;\">DECISION PROCESS:</span></div><div><span style=\"color: #ce9178;\">1. For historical events before 2024:</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp;- Answer directly from your training data.</span></div><div><span style=\"color: #ce9178;\">2. For events in 2024:</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp;- If you are certain, answer directly.</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp;- If you are unsure, use search.</span></div><div><span style=\"color: #ce9178;\">3. For events after 2024 or current/recent information:</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp;- Always use search.</span></div><div><span style=\"color: #ce9178;\">4. For timeless information (scientific facts, concepts, etc.):</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp;- Answer directly from your training data.</span></div><br /><div><span style=\"color: #ce9178;\">ALWAYS USE SEARCH if the question:</span></div><div><span style=\"color: #ce9178;\">- Contains words like \"current\", \"latest\", \"now\", \"present\", \"today\", \"recent\"</span></div><div><span style=\"color: #ce9178;\">- Asks about someone in a changing position (champion, president, CEO, etc.)</span></div><div><span style=\"color: #ce9178;\">- Requests information that might have changed since 2024</span></div><div><span style=\"color: #ce9178;\">- Is time-sensitive and does not specify a time period</span></div><br /><div><span style=\"color: #ce9178;\">FUNCTION CALL FORMAT:</span></div><div><span style=\"color: #ce9178;\">When you need to search, respond WITH ONLY THE JSON OBJECT, no other text, no backticks:</span></div><div><span style=\"color: #ce9178;\">{</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"name\": \"google_search\",</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"parameters\": {</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; \"query\": \"your search query\"</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; }</span></div><div><span style=\"color: #ce9178;\">}</span></div><br /><div><span style=\"color: #ce9178;\">SEARCH FUNCTION:</span></div><div><span style=\"color: #ce9178;\">{</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"name\": \"google_search\",</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"description\": \"Search for real-time information\",</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"parameters\": {</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"object\",</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; \"properties\": {</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"query\": {</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"string\",</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"description\": \"Search term\"</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; },</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; &nbsp; &nbsp; \"required\": [\"query\"]</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; }</span></div><div><span style=\"color: #ce9178;\">}</span></div><br /><div><span style=\"color: #ce9178;\">WHEN ANSWERING BASED ON SEARCH RESULTS:</span></div><div><span style=\"color: #ce9178;\">- Use ONLY facts found in the search results below.</span></div><div><span style=\"color: #ce9178;\">- Do NOT add any dates or information not present in the search results.</span></div><div><span style=\"color: #ce9178;\">- Do NOT make assumptions about timing or events.</span></div><div><span style=\"color: #ce9178;\">- Quote dates exactly as they appear in the results.</span></div><div><span style=\"color: #ce9178;\">- Keep your answer concise and factual.</span></div><div><span style=\"color: #ce9178;\">\"\"\"</span></div><br /></div></div><div><br /></div><div>gemma에 전달할 메시지는 프롬프트 지시문, 사용자 질문을 포함한 이전 채팅 이력 메시지 등을 모두 포함한다. 이를 ollama LLM 에 전달할 수 있는 형식으로 변환하는 함수를 다음과 같이 준비한다.&nbsp;</div><div><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #6a9955;\"># 메시지 리스트를 생성하는 함수</span></div><div><span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">filter_memory</span>(<span style=\"color: #9cdcfe;\">memory</span>):</div><div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">\"\"\"assistant의 검색 안내 메시지를 memory에서 제외\"\"\"</span></div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg <span style=\"color: #c586c0;\">for</span> msg <span style=\"color: #c586c0;\">in</span> memory</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> <span style=\"color: #569cd6;\">not</span> (</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; msg[<span style=\"color: #ce9178;\">\"role\"</span>] <span style=\"color: #d4d4d4;\">==</span> <span style=\"color: #ce9178;\">\"assistant\"</span> <span style=\"color: #569cd6;\">and</span> (</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; msg[<span style=\"color: #ce9178;\">\"content\"</span>].startswith(<span style=\"color: #ce9178;\">\"Searching for:\"</span>) <span style=\"color: #569cd6;\">or</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; msg[<span style=\"color: #ce9178;\">\"content\"</span>].startswith(<span style=\"color: #ce9178;\">\"Searched for:\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; ]</div><br /><div><span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">build_messages</span>(<span style=\"color: #9cdcfe;\">chat_history</span>, <span style=\"color: #9cdcfe;\">user_input</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">None</span>, <span style=\"color: #9cdcfe;\">prompt_system_message</span><span style=\"color: #d4d4d4;\">=</span>prompt_system_message, <span style=\"color: #9cdcfe;\">N</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">6</span>, <span style=\"color: #9cdcfe;\">search_result</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">None</span>):</div><div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">\"\"\"</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; 최근 N개 메시지와 system 메시지를 합쳐 messages 리스트를 만듭니다.</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; search_result가 있으면, user_input 대신 검색 결과 기반 프롬프트를 추가합니다.</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"\"\"</span></div><div>&nbsp; &nbsp; memory <span style=\"color: #d4d4d4;\">=</span> chat_history[<span style=\"color: #d4d4d4;\">-</span>N:] <span style=\"color: #c586c0;\">if</span> <span style=\"color: #dcdcaa;\">len</span>(chat_history) <span style=\"color: #d4d4d4;\">&gt;</span> N <span style=\"color: #c586c0;\">else</span> chat_history[:<span style=\"color: #d4d4d4;\">-</span><span style=\"color: #b5cea8;\">1</span>]</div><div>&nbsp; &nbsp; filtered_memory <span style=\"color: #d4d4d4;\">=</span> filter_memory(memory)</div><div>&nbsp; &nbsp; messages <span style=\"color: #d4d4d4;\">=</span> [{<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"system\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: prompt_system_message}] <span style=\"color: #d4d4d4;\">+</span> filtered_memory</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> search_result <span style=\"color: #569cd6;\">is</span> <span style=\"color: #569cd6;\">not</span> <span style=\"color: #569cd6;\">None</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; messages.append({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"user\"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"content\"</span>: (</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"Refer to the following search result and provide a concise, factual answer based only on this information:</span><span style=\"color: #d7ba7d;\">\\n</span><span style=\"color: #ce9178;\">\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"</span><span style=\"color: #569cd6;\">{</span>search_result.to_string()<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">elif</span> user_input <span style=\"color: #569cd6;\">is</span> <span style=\"color: #569cd6;\">not</span> <span style=\"color: #569cd6;\">None</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; messages.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"user\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: user_input})</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> messages</div><br /></div></div><div><br /></div><div style=\"text-align: left;\"><div>이제 process_message 함수를 구현한다. 이 함수는 사용자의 입력과 기존 채팅 기록을 받아 AI 모델과의 대화 흐름을 관리하는 역할을 한다.</div><div><br /></div><div>먼저 사용자의 메시지를 채팅 기록에 추가하고, 이전 대화 내용(메모리)을 추출하여 시스템 메시지와 함께 모델에 전달할 메시지 목록을 구성한다. 이 메시지 목록을 Ollama 모델에 전달하여 응답을 받는다. 모델의 응답이 함수 호출(JSON) 형태라면, 그 내용을 파싱하여 검색이 필요한 경우 검색 쿼리를 추출한다.</div><div><br /></div><div>검색이 필요하다고 판단되면, 검색 중임을 알리는 메시지를 채팅 기록에 추가하고, 실제로 검색을 수행한다. 검색 결과를 다시 채팅 기록에 반영한 뒤, 이 결과를 포함한 새로운 메시지 목록을 만들어 모델에 전달하여 최종 답변을 받는다. 최종적으로 받은 답변 역시 채팅 기록에 추가한다.</div><div><br /></div><div>검색이 필요하지 않은 경우에는 모델의 응답을 바로 채팅 기록에 추가한다. 이 과정에서 각 단계별로 최신 채팅 기록을 반환하여, 사용자 인터페이스가 실시간으로 대화 상태를 갱신할 수 있도록 한다.</div><div>함수 실행 중 오류가 발생하면, 오류 메시지를 채팅 기록에 추가하여 사용자에게 알린다.</div><div><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #6a9955;\"># Model name</span></div><div>MODEL_NAME <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #ce9178;\">\"gemma3\"</span></div><br /><div><span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">process_message</span>(<span style=\"color: #9cdcfe;\">user_input</span>, <span style=\"color: #9cdcfe;\">chat_history</span>):</div><div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">\"\"\"Process user message and update chat history\"\"\"</span></div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">try</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 사용자 메시지를 기록에 추가</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; chat_history.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"user\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: user_input})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; search_info <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #569cd6;\">None</span></div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 최근 N개 메시지만 memory에 포함 (예: 최근 6개)</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; N <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #b5cea8;\">6</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; messages <span style=\"color: #d4d4d4;\">=</span> build_messages(chat_history, <span style=\"color: #9cdcfe;\">user_input</span><span style=\"color: #d4d4d4;\">=</span>user_input, <span style=\"color: #9cdcfe;\">N</span><span style=\"color: #d4d4d4;\">=</span>N)</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 모델로부터 응답 받기</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; response <span style=\"color: #d4d4d4;\">=</span> ollama.chat(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">model</span><span style=\"color: #d4d4d4;\">=</span>MODEL_NAME,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">messages</span><span style=\"color: #d4d4d4;\">=</span>messages &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; model_response <span style=\"color: #d4d4d4;\">=</span> response[<span style=\"color: #ce9178;\">'message'</span>][<span style=\"color: #ce9178;\">'content'</span>]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 함수 호출로 응답을 파싱 시도</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; function_call <span style=\"color: #d4d4d4;\">=</span> parse_function_call(model_response)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> function_call <span style=\"color: #569cd6;\">and</span> function_call.name <span style=\"color: #d4d4d4;\">==</span> <span style=\"color: #ce9178;\">\"google_search\"</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 파라미터 검증</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; search_params <span style=\"color: #d4d4d4;\">=</span> SearchParameters(<span style=\"color: #d4d4d4;\">**</span>function_call.parameters)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; search_query <span style=\"color: #d4d4d4;\">=</span> search_params.query</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 정보 기록에 추가</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; search_info <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Searching for: </span><span style=\"color: #569cd6;\">{</span>search_query<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chat_history.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"assistant\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: search_info})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">yield</span> chat_history</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 실행</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; search_result <span style=\"color: #d4d4d4;\">=</span> google_search(search_query)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 결과로 정보 업데이트</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; search_info <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Searched for: </span><span style=\"color: #569cd6;\">{</span>search_query<span style=\"color: #569cd6;\">}</span><span style=\"color: #d7ba7d;\">\\n\\n</span><span style=\"color: #ce9178;\">Result:</span><span style=\"color: #d7ba7d;\">\\n</span><span style=\"color: #569cd6;\">{</span>search_result.to_string()<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chat_history[<span style=\"color: #d4d4d4;\">-</span><span style=\"color: #b5cea8;\">1</span>] <span style=\"color: #d4d4d4;\">=</span> {<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"assistant\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: search_info}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">yield</span> chat_history</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 결과 기반 메시지 생성</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; messages <span style=\"color: #d4d4d4;\">=</span> build_messages(chat_history, <span style=\"color: #9cdcfe;\">N</span><span style=\"color: #d4d4d4;\">=</span>N, <span style=\"color: #9cdcfe;\">search_result</span><span style=\"color: #d4d4d4;\">=</span>search_result)</div><div>&nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 검색 결과를 포함해 모델로부터 최종 응답 받기</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; final_response <span style=\"color: #d4d4d4;\">=</span> ollama.chat(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">model</span><span style=\"color: #d4d4d4;\">=</span>MODEL_NAME,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">messages</span><span style=\"color: #d4d4d4;\">=</span>messages</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assistant_response <span style=\"color: #d4d4d4;\">=</span> final_response[<span style=\"color: #ce9178;\">'message'</span>][<span style=\"color: #ce9178;\">'content'</span>]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">else</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 함수 호출이 없으면 직접 응답 반환</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; assistant_response <span style=\"color: #d4d4d4;\">=</span> model_response</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #6a9955;\"># 최종 응답을 기록에 업데이트</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> search_info:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chat_history.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"assistant\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\" Response:</span><span style=\"color: #d7ba7d;\">\\n</span><span style=\"color: #569cd6;\">{</span>assistant_response<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span>})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">else</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; chat_history.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"assistant\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: assistant_response})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">yield</span> chat_history</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">except</span> <span style=\"color: #4ec9b0;\">Exception</span> <span style=\"color: #c586c0;\">as</span> e:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; error_msg <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"An error occurred: </span><span style=\"color: #569cd6;\">{</span><span style=\"color: #4ec9b0;\">str</span>(e)<span style=\"color: #569cd6;\">}</span><span style=\"color: #ce9178;\">\"</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; chat_history.append({<span style=\"color: #ce9178;\">\"role\"</span>: <span style=\"color: #ce9178;\">\"assistant\"</span>, <span style=\"color: #ce9178;\">\"content\"</span>: error_msg})</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">yield</span> chat_history</div><br /></div></div><div><br /></div></div><div style=\"text-align: left;\">이제 Gradio UI 를 정의하고, 메인 엔트리에서 이 앱을 실행한다.</div><div style=\"text-align: left;\"><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><br /><div><span style=\"color: #6a9955;\"># Gradio 인터페이스 생성</span></div><div><span style=\"color: #c586c0;\">with</span> gr.Blocks(<span style=\"color: #9cdcfe;\">css</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"footer </span><span style=\"color: #569cd6;\">{visibility: hidden}</span><span style=\"color: #ce9178;\">\"</span>) <span style=\"color: #c586c0;\">as</span> demo:</div><div>&nbsp; &nbsp; gr.Markdown(<span style=\"color: #ce9178;\">\"\"\"</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; # Agent based on Gemma3 using Function Call</span></div><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; </span></div><br /><div><span style=\"color: #ce9178;\">&nbsp; &nbsp; \"\"\"</span>)</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; chatbot <span style=\"color: #d4d4d4;\">=</span> gr.Chatbot(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">height</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">500</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">show_label</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">False</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">avatar_images</span><span style=\"color: #d4d4d4;\">=</span>(<span style=\"color: #569cd6;\">None</span>, <span style=\"color: #ce9178;\">\"https://api.dicebear.com/9.x/identicon/svg?seed=Mason\"</span>),</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">type</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"messages\"</span></div><div>&nbsp; &nbsp; )</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">with</span> gr.Row():</div><div>&nbsp; &nbsp; &nbsp; &nbsp; msg <span style=\"color: #d4d4d4;\">=</span> gr.Textbox(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">5</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">show_label</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">False</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">placeholder</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"Ask me anything...\"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">container</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">False</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; submit_btn <span style=\"color: #d4d4d4;\">=</span> gr.Button(<span style=\"color: #ce9178;\">\"Send\"</span>, <span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">1</span>)</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">with</span> gr.Row():</div><div>&nbsp; &nbsp; &nbsp; &nbsp; clear_btn <span style=\"color: #d4d4d4;\">=</span> gr.Button(<span style=\"color: #ce9178;\">\"Clear Chat\"</span>)</div><div>&nbsp; &nbsp; </div><br /><div>&nbsp; &nbsp; <span style=\"color: #6a9955;\"># 이벤트 핸들러 설정</span></div><div>&nbsp; &nbsp; msg.submit(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; process_message,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; [msg, chatbot],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; [chatbot],</div><div>&nbsp; &nbsp; )</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; submit_btn.click(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; process_message,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; [msg, chatbot],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; [chatbot],</div><div>&nbsp; &nbsp; )</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; clear_btn.click(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">lambda</span>: [],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">None</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; chatbot,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">queue</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">False</span></div><div>&nbsp; &nbsp; )</div><div>&nbsp; &nbsp; </div><div>&nbsp; &nbsp; <span style=\"color: #6a9955;\"># 메시지 전송 후 텍스트박스 비우기</span></div><div>&nbsp; &nbsp; msg.submit(<span style=\"color: #569cd6;\">lambda</span>: <span style=\"color: #ce9178;\">\"\"</span>, <span style=\"color: #569cd6;\">None</span>, msg)</div><div>&nbsp; &nbsp; submit_btn.click(<span style=\"color: #569cd6;\">lambda</span>: <span style=\"color: #ce9178;\">\"\"</span>, <span style=\"color: #569cd6;\">None</span>, msg)</div><br /><div><span style=\"color: #c586c0;\">if</span> <span style=\"color: #9cdcfe;\">__name__</span> <span style=\"color: #d4d4d4;\">==</span> <span style=\"color: #ce9178;\">\"__main__\"</span>:</div><div>&nbsp; &nbsp; demo.launch(<span style=\"color: #9cdcfe;\">inbrowser</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">True</span>, <span style=\"color: #9cdcfe;\">share</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #569cd6;\">True</span>) </div></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>실행</b></div><div style=\"text-align: left;\">앞에 구현된 앱을 실행한다. 그리고, 적절한 질문을 입력해 본다. 다음과 같이 실행되면 성공한 것이다.</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjl3Y9-wumZOUm7Fpqpq8Rc7Czbh8NcdLfNnPMyhiOUJbCbLw8QWfElpEUt0DnXxE7KIhZJIEGBxg_illf2ucCPZ6gNgPrgKmFkPtGe_huVjpzrgB0qPBlWMfPOdVXmd2aptxlyiytwLaUZB8K9Ga9HNwqRlMg41qbri996i46SBOO557jgAroyRWR0XqCp\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"730\" data-original-width=\"787\" height=\"371\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjl3Y9-wumZOUm7Fpqpq8Rc7Czbh8NcdLfNnPMyhiOUJbCbLw8QWfElpEUt0DnXxE7KIhZJIEGBxg_illf2ucCPZ6gNgPrgKmFkPtGe_huVjpzrgB0qPBlWMfPOdVXmd2aptxlyiytwLaUZB8K9Ga9HNwqRlMg41qbri996i46SBOO557jgAroyRWR0XqCp=w400-h371\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhIw5Zcuqc-XrrCmMX6wjT7Blh1PRVQPkqlHy9dQ-dXrraDJBk2lHa7pSgEVQeg1H-RPWRWf1oPj2g2rCBBneteGxnZuQo8Do7NSjYlgjOicdcNqf-jqyleVY8068fyJLyT52Xfl_AxrZwrnMFjYXvXYhunmeWMIMHX51RuPVx5jMh2VffbReXaIir5TSCL\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"379\" data-original-width=\"745\" height=\"204\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhIw5Zcuqc-XrrCmMX6wjT7Blh1PRVQPkqlHy9dQ-dXrraDJBk2lHa7pSgEVQeg1H-RPWRWf1oPj2g2rCBBneteGxnZuQo8Do7NSjYlgjOicdcNqf-jqyleVY8068fyJLyT52Xfl_AxrZwrnMFjYXvXYhunmeWMIMHX51RuPVx5jMh2VffbReXaIir5TSCL=w400-h204\" width=\"400\" /></a></div><br /></div><div style=\"text-align: left;\"><b>펑션콜 문제 개선 방법</b></div><div style=\"text-align: left;\">실제로 질의해보면 불명확한 프롬프트 입력 등에서 부적절한 함수 호출이 수행되는 것을 알 수 있다. 이를 개선하기 위해 다음 사항을 고려한다.</div><ul style=\"text-align: left;\"><li>프롬프트 설계의 명확성</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">함수 호출이 필요한 상황, 호출 방식(JSON 포맷 등), 호출 예시를 SYSTEM_MESSAGE에 명확하게 안내해야 한다. 함수 호출이 아닌 일반 답변을 하면 안 된다는 점을 반복적으로 강조한다.<br />예시 프롬프트:<br />\"질문에 답변하기 위해 함수 호출이 필요하다고 판단되면 반드시 아래 JSON 형식으로만 응답하라. 다른 텍스트나 설명은 절대 포함하지 마라.\"</blockquote><ul style=\"text-align: left;\"><li>함수 정의의 구체성</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">함수의 목적, 파라미터, 반환값, 사용 예시를 상세하게 기술한다. 각 파라미터의 타입, 필수 여부, 설명을 명확히 한다. 함수가 처리할 수 없는 입력(예: 빈 문자열, 잘못된 타입 등)에 대한 예외 상황도 명시한다.</blockquote><ul style=\"text-align: left;\"><li>예시 기반 Few-shot Prompting</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">SYSTEM_MESSAGE 또는 user message에 함수 호출이 필요한 질문과 그에 대한 올바른 함수 호출 예시를 여러 개 포함시킨다. 예시가 많을수록 모델이 패턴을 더 잘 학습한다.</blockquote><ul style=\"text-align: left;\"><li>함수 호출 실패 시 재시도 로직</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">모델이 함수 호출을 하지 않거나 잘못된 형식으로 응답하면, 내부적으로 \"함수 호출이 필요합니다. 반드시 JSON 형식으로만 응답하세요.\"와 같은 추가 프롬프트로 재요청한다.</blockquote><ul style=\"text-align: left;\"><li>출력&nbsp;파싱의 견고성</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">모델이 JSON 외의 텍스트를 섞어서 반환할 수 있으므로, 파싱 로직에서 JSON 부분만 추출하거나, 불완전한 JSON도 최대한 보완해서 파싱하도록 한다.</blockquote><ul style=\"text-align: left;\"><li>함수 호출 의도&nbsp;강화 프롬프트</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">SYSTEM_MESSAGE에 \"함수 호출이 필요한 상황에서는 반드시 함수 호출을 우선적으로 고려하라\"는 문구를 추가한다. \"만약 함수 호출이 필요하지 않다고 판단되면, 그 이유를 설명하지 말고 바로 답변만 하라.\" 등 불필요한 설명을 억제한다.</blockquote><ul style=\"text-align: left;\"><li>모델 버전 및 파라미터 최적화</li></ul><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px; text-align: left;\">최신 GPT-4 Turbo 등 함수 호출에 최적화된 모델을 사용한다. temperature, top_p 등 파라미터를 낮춰 일관된 응답을 유도한다.&nbsp;</blockquote><div><ul style=\"text-align: left;\"><li>함수 호출 실패 케이스 수집 및 개선&nbsp;</li></ul></div><blockquote style=\"border: none; margin: 0px 0px 0px 40px; padding: 0px;\"><div><div style=\"text-align: left;\">실제 사용자 입력 중 함수 호출이 누락된 사례를 수집하여, SYSTEM_MESSAGE나 예시 프롬프트를 지속적으로 개선한다.</div></div></blockquote><p>이외에 잘 활용되는 함수에 대한 파인튜닝을 수행해 본다.&nbsp;</p><div><div style=\"text-align: left;\"><b>마무리</b></div><div style=\"text-align: left;\">본 글은 ollama 를 이용한 gemma3 모델을 로딩해 Agent 개발 시 핵심이 되는 function call을 구현해 보았다. 실행해 보면 알겠지만, 펑션콜은 프롬프트 입력에 따라 민감하게 동작한다는 것을 알 수 있다. 그러므로, 함수 호출 방식은 적절히&nbsp;LLM 오케스트레이션 및 튜닝되어야 한다는 것을 알 수 있다.&nbsp;</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>레퍼런스</b></div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://huggingface.co/blog/gemma3\">Welcome Gemma 3: Google's all new multimodal, multilingual, long context open LLM</a></li><li><a href=\"https://github.com/philschmid/gemini-samples/blob/main/examples/gemma-function-calling.ipynb\">gemini-samples/examples/gemma-function-calling.ipynb at main · philschmid/gemini-samples</a></li><li><a href=\"https://medium.com/google-cloud/function-calling-with-gemma3-using-ollama-120194577fa6\">Function calling with Gemma3 using Ollama | by Arjun Prabhulal | Google Cloud - Community | Mar, 2025 | Medium | Google Cloud - Community</a></li><li><a href=\"https://medium.com/@akriti.upadhyay/enhancing-gemma-3s-capabilities-with-fine-tuning-for-function-calling-f1bc74051abe\">Enhancing Gemma 3’s Capabilities with Fine-Tuning for Function Calling | by Akriti Upadhyay | May, 2025 | Medium</a></li><li><a href=\"https://pdf.elspublishing.com/paper/journal/open/SC/earlyOnline/2025/SC-20250004.pdf\">General AI agent framework for smart buildings based on  large language models and ReAct strategy</a></li><li><a href=\"https://medium.com/data-science-collective/the-open-source-stack-for-ai-agents-8ab900e33676\">Open-Source Tools for Agents | Data Science Collective</a></li><li><a href=\"https://levelup.gitconnected.com/the-era-of-high-paying-tech-jobs-is-over-572e4e577758\">The Era of High-Paying Tech Jobs is Over | by Somnath Singh | Level Up Coding</a></li><li><a href=\"https://github.com/AGI-Edgerunners/LLM-Agents-Papers\">AGI-Edgerunners/LLM-Agents-Papers: A repo lists papers related to LLM based agent</a></li><li><a href=\"https://medium.com/crayon-ai/llm-for-optimisation-in-3-d-space-a-comparison-with-deterministic-optimisation-methods-04fd93c35263\">LLM for Optimisation in 3-D Space: A comparison with Deterministic optimisation methods | by Peter Eze | Crayon Data &amp; AI | Medium</a></li><li><a href=\"https://medium.com/google-cloud/demystifying-generative-ai-agents-cf5ad36322bd\">Demystifying Generative AI Agents | by Dr Sokratis Kartakis | Google Cloud - Community | Medium</a></li><li><a href=\"https://github.com/google-gemini/cookbook/blob/main/quickstarts/Function_calling.ipynb\">cookbook/quickstarts/Function_calling.ipynb at main · google-gemini/cookbook</a></li></ul></div></div>",
        "contentSnippet": "이 글은 AI 에이전트(Agent) 개발 시 필수적인 함수호출 방법을 오픈소스를 이용해 구현해 본다. 이를 위해, Gemma3(젬마) LLM(Large Language Model) 기반 Ollama 활용 Function Call(펑션콜) 실습 내용을 소개하고 실행 결과를 확인한다. 아울러, 이런 함수호출 방식의 한계점을 개선하기 위한 솔류션을 나눔한다. 이 실습의 결과는 다음과 같다. \n\n\n이 글은 다음 내용을 포함한다.\n\nAI 에이전트 구현을 위한 함수 호출 방법\nOllama 를 통한 Gemma3 사용법\n채팅 형식 프롬프트 및 메모리 사용법\nGradio 기반 웹 앱 개발\nFunction call 의 한계와 솔류션\n\n\nAI 에이전트 내부 Function call 메커니즘(Akriti, 2025)\n\n\n이 글의 구현 코드는 다음 링크에서 확인할 수 있다.\n\nmac999/AI_agent_simple_function_call\n\nGemma3 모델 특징\n\nGemma 3는 구글이 개발해  2025년 3월 10일에 출시한 LLM으로, 차세대 경량 오픈 멀티모달 AI 모델로, 텍스트와 이미지를 동시에 처리할 수 있는 기능을 갖추고 있다. 이 모델은 다양한 크기와 사양으로 제공되어 단일 GPU 또는 TPU 환경에서도 실행 가능하다.\nGemma 3는 1B, 4B, 12B, 27B의 네 가지 모델 크기로 제공되며, 각각 10억, 40억, 120억, 270억 개의 파라미터를 갖추고 있다. 1B 모델은 텍스트 전용으로 32K 토큰의 입력 컨텍스트를 지원하고, 4B, 12B, 27B 모델은 멀티모달 기능을 지원하며 128K 토큰의 입력 컨텍스트를 처리할 수 있다. 이는 이전 Gemma 모델보다 16배 확장된 크기로, 훨씬 더 많은 양의 정보를 한 번에 처리할 수 있게 해준다.\n이 모델은 텍스트와 이미지 데이터를 동시에 처리하고 이해하는 멀티모달 기능을 제공한다. 이미지 해석, 객체 인식, 시각적 질의응답 등 다양한 작업을 수행할 수 있으며, 텍스트 기반 작업에 시각적 정보를 효과적으로 활용할 수 있도록 지원한다. \n\n\n\n\n  \nWelcome Gemma 3: Google's all new multimodal, multilingual, long context open LLM\n\nGemma 3는 140개 이상의 언어를 지원하여 전 세계 다양한 언어 사용자를 대상으로 하는 AI 애플리케이션 개발에 매우 유리하다. 사용자는 자신의 모국어로 Gemma 3와 상호작용할 수 있으며, 다국어 기반의 텍스트 분석 및 생성 작업도 효율적으로 수행할 수 있다.\n이 모델은 다양한 작업 수행 능력을 갖추고 있다. 질문 답변, 텍스트 요약, 논리적 추론, 창의적인 텍스트 형식 생성(시, 스크립트, 코드, 마케팅 문구, 이메일 초안 등), 이미지 데이터 분석 및 추출 등 광범위한 자연어 처리 및 컴퓨터 비전 관련 작업을 수행할 수 있다. 또한, 함수 호출 및 구조화된 출력을 지원하여 개발자들이 특정 작업을 자동화하고 에이전트 기반의 경험을 구축하는 데 도움을 준다.\nGemma 3는 다양한 도구 및 프레임워크와 원활하게 통합된다. Hugging Face Transformers, Ollama, JAX, Keras, PyTorch, Google AI Edge, UnSloth, vLLM, Gemma.cpp 등 다양한 개발 도구 및 프레임워크와 호환되어 개발자들이 자신이 익숙한 환경에서 Gemma 3를 쉽게 활용하고 실험할 수 있다.\n이 모델은 다양한 벤치마크 테스트에서 동급 모델 대비 최첨단 성능을 입증했다. 특히, Chatbot Arena Elo Score에서 1338점을 기록하며, 여러 오픈 소스 및 상용 모델보다 높은 성능을 보였다. \nGemma 3는 오픈 모델로, 개방형 가중치를 제공하여 사용자가 자유롭게 조정하고 배포할 수 있다. Kaggle과 Hugging Face에서 다운로드 가능하며, Creative Commons 및 Apache 2.0 라이선스를 따름으로써, 개발자와 연구자에게 VLM 기술에 대한 접근성을 높여준다.\n\n개발 환경\n개발 환경은 다음과 같다. 미리 설치, 가입한다.\n\nollama:  https://ollama.com/download/windows\ngemma3: https://ollama.com/search\nserper 서비스: 가입. https://serper.dev/dashboard \n\n설치되어 있다면, 다음 명령을 터미널에서 실행한다.\nollama pull gemma3:4b\n\n\n\ngemma3:4b GPU VRAM 소모량\n\n\n이제 다음과 같이 모델을 실행해 볼 수 있다. \n\n\n\n\n참고로, GPU VRAM 등을 고려해 더 성능이 좋은 파라메터수 많은 대형 모델을 사용할 수도 있다.\n\n\ngemma3 지원 모델들\n\n처리 프로세스\n이 실습 프로그램의 프로세스는 다음과 같다.\n\n\nGradio 앱이 시작되면, 사용자의 입력이 발생하고 이 입력은 process_message 함수에 전달된다. 이 함수는 사용자의 메시지를 chat_history에 추가하여 대화 기록을 저장한다. 이후 모델에게 전달할 대화 문맥을 구성하기 위해 messages 리스트가 생성된다.\n\n\n그 다음 단계에서는 ollama.chat 함수를 통해 언어 모델에게 응답을 요청하게 되며, 이 응답 내에 함수 호출이 포함되어 있는지를 확인한다. 만약 응답에 함수 호출이 포함되어 있다면, 이를 parse_function_call 함수를 통해 파싱한다.\n\n\n파싱된 함수가 google_search라면, 모델이 검색을 원한다고 판단하여 검색 쿼리를 추출하고 검색 수행 예정임을 사용자에게 안내하는 메시지를 추가한다. 이후 실제로 google_search 함수를 실행하여 외부 검색을 수행한다.\n\n\n검색 결과는 다시 chat_history에 저장되며, 이 결과를 바탕으로 언어 모델에게 재질문을 하여 더 정확하고 완성된 응답을 유도한다. 모델이 생성한 최종 응답은 chat_history에 마지막으로 추가되고, 이 전체 대화 기록이 사용자에게 반환된다.\n\n\n이 구조는 사용자의 질의에 따라 외부 정보까지 능동적으로 검색하고 반영할 수 있는 LLM 기반 AI 에이전트의 대표적인 흐름을 보여준다.\n\n\n다음은 이 순서도를 보여준다.\n\n\n\n구현하기\n터미널에서 다음 라이브러리를 설치한다.\npip install langchain-core langchain-openai gradio ollama requests python-dotenv pydantic\n\n\n새로운 파이썬 파일(코드 참고)을 생성한 후, 우선, 필요한 라이브러리를 임포트한다. \n\nimport gradio as gr\nimport ollama\nimport requests, json, os\nfrom dotenv import load_dotenv\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, Dict, Any, List\n\nload_dotenv()\nSERPER_API_KEY = os.getenv('SERPER_API_KEY')\n\n\n\n그리고, 사용하는 API 키를 가져온다. 이를 위해, 미리 .env 파일을 다음과 같이 만들어 놓고, 해당 API를 입력해 놓야야 한다.\n\n# .env\nSERPER_API_KEY=<YOUR API KEY>\n\n\n\n파라메터에서 검색 질의문, 함수호출명과 파라메터를 정의한다. 아울러, 질의 결과를 명확히 데이터항목으로 추출하기 위해서 검색 결과가 될 데이타항목(타이틀, 링크, 스닙펫) 형식을 pydantic의 basemodel을 이용해 명확히 정의한다. 그리고, LLM 호출 결과를 펑션콜이 가능한 형식으로 변환하기 위한 파싱 함수인 parse_function_call 을 정의한다.\n\nclass SearchParameters(BaseModel):\n    query: str = Field(..., description=\"Search term to look up\")\n\nclass FunctionCall(BaseModel):\n    name: str\n    parameters: Dict[str, Any]\n\nclass SearchResult(BaseModel):\n    title: str\n    link: str\n    snippet: str\n\n    def to_string(self) -> str:\n        return f\"Title: {self.title}\\nLink: {self.link}\\nSnippet: {self.snippet}\"\n\ndef google_search(query: str) -> SearchResult:\n    \"\"\"Perform a Google search using Serper.dev API\"\"\"\n    try:\n        url = \"https://google.serper.dev/search\"\n        payload = json.dumps({\"q\": query})\n        headers = {\n            'X-API-KEY': SERPER_API_KEY,\n            'Content-Type': 'application/json'\n        }\n        \n        response = requests.post(url, headers=headers, data=payload)\n        response.raise_for_status()  # 잘못된 상태 코드에 대해 예외 발생\n        \n        results = response.json()\n        \n        if not results.get('organic'):\n            raise ValueError(\"No search results found.\")\n            \n        first_result = results['organic'][0]\n        return SearchResult(\n            title=first_result.get('title', 'No title'),\n            link=first_result.get('link', 'No link'),\n            snippet=first_result.get('snippet', 'No snippet available.')\n        )\n    except Exception as e:\n        print(f\"Search error: {str(e)}\")\n        raise\n\ndef parse_function_call(response: str) -> Optional[FunctionCall]:\n    \"\"\"Parse the model's response to extract function calls\"\"\"\n    try:\n        # Clean the response and find JSON structure\n        response = response.strip()\n        start_idx = response.find('{')\n        end_idx = response.rfind('}') + 1\n        \n        if start_idx == -1 or end_idx == 0:\n            return None\n            \n        json_str = response[start_idx:end_idx]\n        data = json.loads(json_str)\n        return FunctionCall(**data)\n    except Exception as e:\n        print(f\"Error parsing function call: {str(e)}\")\n        return None\n\n\n\ngemma에 지시할 시스템 프롬프트 명령을 정의한다. prompt_system_message는 이 챗봇이 어떻게 동작해야 하는지, 그리고 어떤 기준으로 답변을 해야 하는지에 대한 지침을 제공하는 역할을 한다. 이 메시지는 챗봇이 2024년까지의 정보를 학습한 AI 어시스턴트임을 명확히 하고, 사용자의 질문에 대해 가능한 경우에는 바로 답변을 하되, 최신 정보나 불확실한 내용, 시의성이 있는 질문에 대해서는 반드시 펑션콜을 통해 검색 기능을 활용해야 함을 명시한다. 이전 대화 내용이 함께 입력으로 주어지기 때문에, 챗봇은 이 대화 맥락을 참고하여 일관성 있고 상황에 맞는 답변을 해야 한다고 안내한다. 참고로, 준수해야 할 gemma3의 function call 형식은 다음과 같다. \n\ngemini-samples/examples/gemma-function-calling.ipynb at main · philschmid/gemini-samples\n\n검색이 필요한 상황과 그렇지 않은 상황을 구체적으로 구분하여, 챗봇이 임의로 정보를 추정하거나 추가하지 않고, 검색 결과에 기반한 사실만을 간결하게 전달하도록 유도한다. 검색이 필요한 경우에는 정해진 JSON 형식으로만 응답하도록 하여, 시스템이 함수 호출 방식으로 검색을 처리할 수 있게 한다.\n\n# 프롬프트 시스템 메세지 정의\nprompt_system_message = \"\"\"You are an AI assistant with training data up to 2024. Answer questions directly when possible, and use search when necessary.\n\nYou will receive previous conversation messages as part of the input. Use these prior messages to maintain context and provide coherent, context-aware answers.\n\nDECISION PROCESS:\n1. For historical events before 2024:\n   - Answer directly from your training data.\n2. For events in 2024:\n   - If you are certain, answer directly.\n   - If you are unsure, use search.\n3. For events after 2024 or current/recent information:\n   - Always use search.\n4. For timeless information (scientific facts, concepts, etc.):\n   - Answer directly from your training data.\n\nALWAYS USE SEARCH if the question:\n- Contains words like \"current\", \"latest\", \"now\", \"present\", \"today\", \"recent\"\n- Asks about someone in a changing position (champion, president, CEO, etc.)\n- Requests information that might have changed since 2024\n- Is time-sensitive and does not specify a time period\n\nFUNCTION CALL FORMAT:\nWhen you need to search, respond WITH ONLY THE JSON OBJECT, no other text, no backticks:\n{\n    \"name\": \"google_search\",\n    \"parameters\": {\n        \"query\": \"your search query\"\n    }\n}\n\nSEARCH FUNCTION:\n{\n    \"name\": \"google_search\",\n    \"description\": \"Search for real-time information\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"query\": {\n                \"type\": \"string\",\n                \"description\": \"Search term\"\n            }\n        },\n        \"required\": [\"query\"]\n    }\n}\n\nWHEN ANSWERING BASED ON SEARCH RESULTS:\n- Use ONLY facts found in the search results below.\n- Do NOT add any dates or information not present in the search results.\n- Do NOT make assumptions about timing or events.\n- Quote dates exactly as they appear in the results.\n- Keep your answer concise and factual.\n\"\"\"\n\n\n\ngemma에 전달할 메시지는 프롬프트 지시문, 사용자 질문을 포함한 이전 채팅 이력 메시지 등을 모두 포함한다. 이를 ollama LLM 에 전달할 수 있는 형식으로 변환하는 함수를 다음과 같이 준비한다. \n\n# 메시지 리스트를 생성하는 함수\ndef filter_memory(memory):\n    \"\"\"assistant의 검색 안내 메시지를 memory에서 제외\"\"\"\n    return [\n        msg for msg in memory\n        if not (\n            msg[\"role\"] == \"assistant\" and (\n                msg[\"content\"].startswith(\"Searching for:\") or\n                msg[\"content\"].startswith(\"Searched for:\")\n            )\n        )\n    ]\n\ndef build_messages(chat_history, user_input=None, prompt_system_message=prompt_system_message, N=6, search_result=None):\n    \"\"\"\n    최근 N개 메시지와 system 메시지를 합쳐 messages 리스트를 만듭니다.\n    search_result가 있으면, user_input 대신 검색 결과 기반 프롬프트를 추가합니다.\n    \"\"\"\n    memory = chat_history[-N:] if len(chat_history) > N else chat_history[:-1]\n    filtered_memory = filter_memory(memory)\n    messages = [{\"role\": \"system\", \"content\": prompt_system_message}] + filtered_memory\n    if search_result is not None:\n        messages.append({\n            \"role\": \"user\",\n            \"content\": (\n                \"Refer to the following search result and provide a concise, factual answer based only on this information:\\n\"\n                f\"{search_result.to_string()}\"\n            )\n        })\n    elif user_input is not None:\n        messages.append({\"role\": \"user\", \"content\": user_input})\n    return messages\n\n\n\n\n이제 process_message 함수를 구현한다. 이 함수는 사용자의 입력과 기존 채팅 기록을 받아 AI 모델과의 대화 흐름을 관리하는 역할을 한다.\n\n\n먼저 사용자의 메시지를 채팅 기록에 추가하고, 이전 대화 내용(메모리)을 추출하여 시스템 메시지와 함께 모델에 전달할 메시지 목록을 구성한다. 이 메시지 목록을 Ollama 모델에 전달하여 응답을 받는다. 모델의 응답이 함수 호출(JSON) 형태라면, 그 내용을 파싱하여 검색이 필요한 경우 검색 쿼리를 추출한다.\n\n\n검색이 필요하다고 판단되면, 검색 중임을 알리는 메시지를 채팅 기록에 추가하고, 실제로 검색을 수행한다. 검색 결과를 다시 채팅 기록에 반영한 뒤, 이 결과를 포함한 새로운 메시지 목록을 만들어 모델에 전달하여 최종 답변을 받는다. 최종적으로 받은 답변 역시 채팅 기록에 추가한다.\n\n\n검색이 필요하지 않은 경우에는 모델의 응답을 바로 채팅 기록에 추가한다. 이 과정에서 각 단계별로 최신 채팅 기록을 반환하여, 사용자 인터페이스가 실시간으로 대화 상태를 갱신할 수 있도록 한다.\n함수 실행 중 오류가 발생하면, 오류 메시지를 채팅 기록에 추가하여 사용자에게 알린다.\n\n# Model name\nMODEL_NAME = \"gemma3\"\n\ndef process_message(user_input, chat_history):\n    \"\"\"Process user message and update chat history\"\"\"\n    try:\n        # 사용자 메시지를 기록에 추가\n        chat_history.append({\"role\": \"user\", \"content\": user_input})\n        search_info = None\n\n        # 최근 N개 메시지만 memory에 포함 (예: 최근 6개)\n        N = 6\n        messages = build_messages(chat_history, user_input=user_input, N=N)\n\n        # 모델로부터 응답 받기\n        response = ollama.chat(\n            model=MODEL_NAME,\n            messages=messages       \n        )\n        \n        model_response = response['message']['content']\n        \n        # 함수 호출로 응답을 파싱 시도\n        function_call = parse_function_call(model_response)\n        \n        if function_call and function_call.name == \"google_search\":\n            # 검색 파라미터 검증\n            search_params = SearchParameters(**function_call.parameters)\n            search_query = search_params.query\n            \n            # 검색 정보 기록에 추가\n            search_info = f\"Searching for: {search_query}\"\n            chat_history.append({\"role\": \"assistant\", \"content\": search_info})\n            yield chat_history\n            \n            # 검색 실행\n            search_result = google_search(search_query)\n            \n            # 검색 결과로 정보 업데이트\n            search_info = f\"Searched for: {search_query}\\n\\nResult:\\n{search_result.to_string()}\"\n            chat_history[-1] = {\"role\": \"assistant\", \"content\": search_info}\n            yield chat_history\n\n            # 검색 결과 기반 메시지 생성\n            messages = build_messages(chat_history, N=N, search_result=search_result)\n      \n            # 검색 결과를 포함해 모델로부터 최종 응답 받기\n            final_response = ollama.chat(\n                model=MODEL_NAME,\n                messages=messages\n            )\n            \n            assistant_response = final_response['message']['content']\n        else:\n            # 함수 호출이 없으면 직접 응답 반환\n            assistant_response = model_response\n        \n        # 최종 응답을 기록에 업데이트\n        if search_info:\n            chat_history.append({\"role\": \"assistant\", \"content\": f\" Response:\\n{assistant_response}\"})\n        else:\n            chat_history.append({\"role\": \"assistant\", \"content\": assistant_response})\n        \n        yield chat_history\n            \n    except Exception as e:\n        error_msg = f\"An error occurred: {str(e)}\"\n        chat_history.append({\"role\": \"assistant\", \"content\": error_msg})\n        yield chat_history\n\n\n\n\n이제 Gradio UI 를 정의하고, 메인 엔트리에서 이 앱을 실행한다.\n\n\n# Gradio 인터페이스 생성\nwith gr.Blocks(css=\"footer {visibility: hidden}\") as demo:\n    gr.Markdown(\"\"\"\n    # Agent based on Gemma3 using Function Call\n    \n\n    \"\"\")\n    \n    chatbot = gr.Chatbot(\n        height=500,\n        show_label=False,\n        avatar_images=(None, \"https://api.dicebear.com/9.x/identicon/svg?seed=Mason\"),\n        type=\"messages\"\n    )\n    \n    with gr.Row():\n        msg = gr.Textbox(\n            scale=5,\n            show_label=False,\n            placeholder=\"Ask me anything...\",\n            container=False\n        )\n        submit_btn = gr.Button(\"Send\", scale=1)\n    \n    with gr.Row():\n        clear_btn = gr.Button(\"Clear Chat\")\n    \n\n    # 이벤트 핸들러 설정\n    msg.submit(\n        process_message,\n        [msg, chatbot],\n        [chatbot],\n    )\n    \n    submit_btn.click(\n        process_message,\n        [msg, chatbot],\n        [chatbot],\n    )\n    \n    clear_btn.click(\n        lambda: [],\n        None,\n        chatbot,\n        queue=False\n    )\n    \n    # 메시지 전송 후 텍스트박스 비우기\n    msg.submit(lambda: \"\", None, msg)\n    submit_btn.click(lambda: \"\", None, msg)\n\nif __name__ == \"__main__\":\n    demo.launch(inbrowser=True, share=True) \n\n\n\n실행\n앞에 구현된 앱을 실행한다. 그리고, 적절한 질문을 입력해 본다. 다음과 같이 실행되면 성공한 것이다.\n\n\n\n\n펑션콜 문제 개선 방법\n실제로 질의해보면 불명확한 프롬프트 입력 등에서 부적절한 함수 호출이 수행되는 것을 알 수 있다. 이를 개선하기 위해 다음 사항을 고려한다.\n\n프롬프트 설계의 명확성\n\n함수 호출이 필요한 상황, 호출 방식(JSON 포맷 등), 호출 예시를 SYSTEM_MESSAGE에 명확하게 안내해야 한다. 함수 호출이 아닌 일반 답변을 하면 안 된다는 점을 반복적으로 강조한다.\n예시 프롬프트:\n\"질문에 답변하기 위해 함수 호출이 필요하다고 판단되면 반드시 아래 JSON 형식으로만 응답하라. 다른 텍스트나 설명은 절대 포함하지 마라.\"\n\n함수 정의의 구체성\n\n함수의 목적, 파라미터, 반환값, 사용 예시를 상세하게 기술한다. 각 파라미터의 타입, 필수 여부, 설명을 명확히 한다. 함수가 처리할 수 없는 입력(예: 빈 문자열, 잘못된 타입 등)에 대한 예외 상황도 명시한다.\n\n예시 기반 Few-shot Prompting\n\nSYSTEM_MESSAGE 또는 user message에 함수 호출이 필요한 질문과 그에 대한 올바른 함수 호출 예시를 여러 개 포함시킨다. 예시가 많을수록 모델이 패턴을 더 잘 학습한다.\n\n함수 호출 실패 시 재시도 로직\n\n모델이 함수 호출을 하지 않거나 잘못된 형식으로 응답하면, 내부적으로 \"함수 호출이 필요합니다. 반드시 JSON 형식으로만 응답하세요.\"와 같은 추가 프롬프트로 재요청한다.\n\n출력 파싱의 견고성\n\n모델이 JSON 외의 텍스트를 섞어서 반환할 수 있으므로, 파싱 로직에서 JSON 부분만 추출하거나, 불완전한 JSON도 최대한 보완해서 파싱하도록 한다.\n\n함수 호출 의도 강화 프롬프트\n\nSYSTEM_MESSAGE에 \"함수 호출이 필요한 상황에서는 반드시 함수 호출을 우선적으로 고려하라\"는 문구를 추가한다. \"만약 함수 호출이 필요하지 않다고 판단되면, 그 이유를 설명하지 말고 바로 답변만 하라.\" 등 불필요한 설명을 억제한다.\n\n모델 버전 및 파라미터 최적화\n\n최신 GPT-4 Turbo 등 함수 호출에 최적화된 모델을 사용한다. temperature, top_p 등 파라미터를 낮춰 일관된 응답을 유도한다. \n\n함수 호출 실패 케이스 수집 및 개선 \n\n\n실제 사용자 입력 중 함수 호출이 누락된 사례를 수집하여, SYSTEM_MESSAGE나 예시 프롬프트를 지속적으로 개선한다.\n\n이외에 잘 활용되는 함수에 대한 파인튜닝을 수행해 본다. \n\n마무리\n본 글은 ollama 를 이용한 gemma3 모델을 로딩해 Agent 개발 시 핵심이 되는 function call을 구현해 보았다. 실행해 보면 알겠지만, 펑션콜은 프롬프트 입력에 따라 민감하게 동작한다는 것을 알 수 있다. 그러므로, 함수 호출 방식은 적절히 LLM 오케스트레이션 및 튜닝되어야 한다는 것을 알 수 있다. \n\n\n레퍼런스\n\nWelcome Gemma 3: Google's all new multimodal, multilingual, long context open LLM\ngemini-samples/examples/gemma-function-calling.ipynb at main · philschmid/gemini-samples\nFunction calling with Gemma3 using Ollama | by Arjun Prabhulal | Google Cloud - Community | Mar, 2025 | Medium | Google Cloud - Community\nEnhancing Gemma 3’s Capabilities with Fine-Tuning for Function Calling | by Akriti Upadhyay | May, 2025 | Medium\nGeneral AI agent framework for smart buildings based on  large language models and ReAct strategy\nOpen-Source Tools for Agents | Data Science Collective\nThe Era of High-Paying Tech Jobs is Over | by Somnath Singh | Level Up Coding\nAGI-Edgerunners/LLM-Agents-Papers: A repo lists papers related to LLM based agent\nLLM for Optimisation in 3-D Space: A comparison with Deterministic optimisation methods | by Peter Eze | Crayon Data & AI | Medium\nDemystifying Generative AI Agents | by Dr Sokratis Kartakis | Google Cloud - Community | Medium\ncookbook/quickstarts/Function_calling.ipynb at main · google-gemini/cookbook",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-18075867409642887",
        "isoDate": "2025-06-04T06:56:00.000Z"
      }
    ]
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": [
      {
        "title": "다시 2부 - Composable Architecture - 라우터 소개",
        "link": "https://thdev.tech/architecture/2025/06/02/Android-Architecture-new-02/",
        "pubDate": "Mon, 02 Jun 2025 00:00:00 +0000",
        "content": "<p>원래는 Action 시스템을 활용해서 Router를 쓰려고 설계했지만, 필자가 기존에 사용하던 방식 중 하나로 돌아가 거기서부터 다시 설계되었다.</p>\n\n<p>이 라우터는 크게 두 가지 상황에 활용 가능하다.</p>\n\n<ul>\n  <li>Activity 간 화면 이동</li>\n  <li>Compose Navigation 간 화면 이동</li>\n</ul>\n\n<p>만약 싱글 액티비티(Single Activity) 구조를 쓴다면 Compose Navigation 부분만 적용하면 되니 더 쉽게 사용 가능하다.</p>\n\n<p>여기서는 어떻게 활용되었을까?</p>\n\n<ul>\n  <li>Activity는 Dagger의 <code class=\"language-plaintext highlighter-rouge\">IntoMap</code>을 활용해서 <code class=\"language-plaintext highlighter-rouge\">Key/Value</code> 매핑으로 <code class=\"language-plaintext highlighter-rouge\">ActivityRoute</code>를 상속받아 구현한 객체를 정의해서 사용한다.</li>\n  <li>Compose Navigation은 <code class=\"language-plaintext highlighter-rouge\">NavigationRoute</code>를 상속받아 구현한다.</li>\n</ul>\n\n<h3>이 글에서는</h3>\n<ul>\n  <li>새로운 Router의 설계 철학 및 동작 방식을 자세히 알아본다.</li>\n  <li>Activity 및 Compose Navigation에서 Router를 활용하는 구체적인 코드 예시를 살펴본다.</li>\n</ul>\n\n<!--more-->\n\n<h2>Route</h2>\n\n<p>NavigationRoute는 드로이드 나이츠(Droid Knights) 프로젝트에도 적용되었으며, 다음 링크를 통해 라우팅 방식을 확인해볼 수 있다.</p>\n\n<p><a href=\"https://github.com/droidknights/DroidKnightsApp/tree/2025/app/core/router\">droidknights 2025 - Router</a></p>\n\n<p>이 글에서는 <a href=\"https://github.com/taehwandev/TComposableArchitecture\">TComposableArchitecture - GitHub - link</a>에서 적용된 방법을 중심으로 설명한다.</p>\n\n<h3>사용법</h3>\n\n<p>사용법은 간단하다. <code class=\"language-plaintext highlighter-rouge\">Navigator</code>를 주입받아 활용하며, 이동할 Activity 또는 Navigation을 <code class=\"language-plaintext highlighter-rouge\">Navigator</code>에서 제공하는 <code class=\"language-plaintext highlighter-rouge\">navigate</code>만 호출하면 된다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@HiltViewModel</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">SearchViewModel</span> <span class=\"nd\">@Inject</span> <span class=\"k\">constructor</span><span class=\"p\">(</span>\n    <span class=\"n\">flowActionStream</span><span class=\"p\">:</span> <span class=\"nc\">FlowActionStream</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">navigator</span><span class=\"p\">:</span> <span class=\"nc\">Navigator</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ActionViewModel</span><span class=\"p\">&lt;</span><span class=\"nc\">SearchAction</span><span class=\"p\">&gt;(</span><span class=\"n\">flowActionStream</span><span class=\"p\">,</span> <span class=\"nc\">SearchAction</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">handleAction</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nc\">SearchAction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">is</span> <span class=\"nc\">SearchAction</span><span class=\"p\">.</span><span class=\"nc\">ShowDetail</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"c1\">// Activity 이동 시</span>\n                <span class=\"n\">navigator</span><span class=\"p\">.</span><span class=\"nf\">navigate</span><span class=\"p\">(</span>\n                    <span class=\"n\">activityRoute</span> <span class=\"p\">=</span> <span class=\"nc\">DetailActivityRouter</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span>\n                    <span class=\"n\">argumentMap</span> <span class=\"p\">=</span> <span class=\"nf\">mapOf</span><span class=\"p\">(</span>\n                        <span class=\"nc\">DetailActivityRouter</span><span class=\"p\">.</span><span class=\"nc\">PUT_DATA</span> <span class=\"n\">to</span> <span class=\"nc\">DetailData</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">),</span>\n                    <span class=\"p\">),</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">is</span> <span class=\"nc\">SearchAction</span><span class=\"p\">.</span><span class=\"nc\">SwitchNavigation</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"c1\">// Compose Navigation 이동 시</span>\n                <span class=\"n\">navigator</span><span class=\"p\">.</span><span class=\"nf\">navigate</span><span class=\"p\">(</span>\n                    <span class=\"n\">navigationRoute</span> <span class=\"p\">=</span> <span class=\"n\">action</span><span class=\"p\">.</span><span class=\"n\">navItem</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">,</span>\n                    <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2>여기서의 설계는?</h2>\n\n<p>먼저 Compose Navigation에 대한 시퀀스를 살펴보자.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">View</code> - <code class=\"language-plaintext highlighter-rouge\">Action</code> - <code class=\"language-plaintext highlighter-rouge\">ViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">Router</code> - <code class=\"language-plaintext highlighter-rouge\">RouterViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">RouterView</code>로 이어지는 흐름을 알 수 있다.</p>\n\n<p>이를 쉽게 이해하기 위해 Repository 패턴에 비유하면, 두 개의 View에서 데이터 통신하는 방법을 설명한 그림으로 생각하면 된다. <code class=\"language-plaintext highlighter-rouge\">Router</code> 부분이 <code class=\"language-plaintext highlighter-rouge\">Repository</code>로 볼 수 있다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">View</code> - <code class=\"language-plaintext highlighter-rouge\">Action</code> - <code class=\"language-plaintext highlighter-rouge\">ViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">Repository</code> - <code class=\"language-plaintext highlighter-rouge\">RouterViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">RouterView</code></p>\n\n<p>이를 도식화하면</p>\n\n<p><img src=\"/images/posts/2025/Android-Architecture-new-02/CA-Router.drawio.png\" alt=\"sample_01\" /></p>\n\n<p>이번에는 Activity를 이동한다면? 한단계가 더 추가됨을 알 수 있다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ActivityJourney</code>라는 개념을 활용해서 이동할 Activity가 포함되어 있는지 추가로 검증하고, Activity를 이동한다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">View</code> - <code class=\"language-plaintext highlighter-rouge\">Action</code> - <code class=\"language-plaintext highlighter-rouge\">ViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">Router</code> - <code class=\"language-plaintext highlighter-rouge\">(ActivityJourney)</code> - <code class=\"language-plaintext highlighter-rouge\">RouterViewModel</code> - <code class=\"language-plaintext highlighter-rouge\">RouterView</code></p>\n\n<p><img src=\"/images/posts/2025/Android-Architecture-new-02/CA-Router-activity.drawio.png\" alt=\"sample_02\" /></p>\n\n<p>이 코드를 이해하는 데 있어서 중요한 점은 두 개의 View가 어떻게 데이터를 통신하는가이다.</p>\n\n<p>가장 쉬운 방법은 싱글턴으로 처리된 Repository를 활용하는 것이거나, Activity 사이에 위치한 하나의 Repository를 활용하는 방법일 것이다. 보통은 Repository를 싱글턴으로 활용하니, 여기서도 동일하다고 이해하면 된다.</p>\n\n<h2>Router 코드</h2>\n\n<p>먼저 우리가 활용할 <code class=\"language-plaintext highlighter-rouge\">Navigator</code>는 인터페이스로 정의되어 있다. 구현체는 모두 숨겨져 있다.</p>\n\n<p>이때 구현체를 완전히 분리하고 싶다면, 인터페이스 모듈과 구현체 모듈을 두 개 만들어 활용하는 방식을 고려할 수 있다. 이 방식은 <a href=\"https://github.com/droidknights/DroidKnightsApp/tree/2025/app/core/router\">droidknights 2025 - Router</a>에 포함되어 있으니 참고하길 바란다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Navigator</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"p\">&lt;</span><span class=\"nc\">T</span> <span class=\"p\">:</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span>\n        <span class=\"n\">activityRoute</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;,</span>\n        <span class=\"n\">argumentMap</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Parcelable</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nf\">emptyMap</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span>\n        <span class=\"n\">navigationRoute</span><span class=\"p\">:</span> <span class=\"nc\">NavigationRoute</span><span class=\"p\">,</span>\n        <span class=\"n\">saveState</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">navigateBack</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>위 코드에 대한 구현체는 다음과 같다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">InternalNavigatorImpl</code>은 Router 모듈 내부에서만 활용하기 위한 것으로, <code class=\"language-plaintext highlighter-rouge\">val channel: Channel&lt;InternalRoute&gt;</code> 한 줄이 포함되어 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@ActivityRetainedScoped</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InternalNavigatorImpl</span> <span class=\"nd\">@Inject</span> <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"nc\">Navigator</span><span class=\"p\">,</span> <span class=\"nc\">InternalNavigator</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">val</span> <span class=\"py\">channel</span> <span class=\"p\">=</span> <span class=\"nc\">Channel</span><span class=\"p\">&lt;</span><span class=\"nc\">InternalRoute</span><span class=\"p\">&gt;(</span><span class=\"nc\">Channel</span><span class=\"p\">.</span><span class=\"nc\">BUFFERED</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// 아래에서 설명</span>\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"p\">&lt;</span><span class=\"nc\">T</span> <span class=\"p\">:</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"n\">activityRoute</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;,</span> <span class=\"n\">argumentMap</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Parcelable</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n        <span class=\"n\">channel</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span>\n            <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">Activity</span><span class=\"p\">(</span>\n                <span class=\"n\">activityRoute</span> <span class=\"p\">=</span> <span class=\"n\">activityRoute</span><span class=\"p\">,</span>\n                <span class=\"n\">argumentMap</span> <span class=\"p\">=</span> <span class=\"n\">argumentMap</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"n\">navigationRoute</span><span class=\"p\">:</span> <span class=\"nc\">NavigationRoute</span><span class=\"p\">,</span> <span class=\"n\">saveState</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">channel</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span>\n            <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">Navigation</span><span class=\"p\">(</span>\n                <span class=\"n\">navigationRoute</span> <span class=\"p\">=</span> <span class=\"n\">navigationRoute</span><span class=\"p\">,</span>\n                <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"n\">saveState</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">navigateBack</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">channel</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">NavigateBack</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>위 Router는 <code class=\"language-plaintext highlighter-rouge\">DI(Dependency Injection)</code>를 통해 싱글턴으로 구성되어 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Module</span>\n<span class=\"nd\">@InstallIn</span><span class=\"p\">(</span><span class=\"nc\">ActivityRetainedComponent</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n<span class=\"k\">internal</span> <span class=\"k\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">RouterModel</span> <span class=\"p\">{</span>\n\n    <span class=\"nd\">@Binds</span>\n    <span class=\"nd\">@ActivityRetainedScoped</span>\n    <span class=\"k\">abstract</span> <span class=\"k\">fun</span> <span class=\"nf\">provideNavigator</span><span class=\"p\">(</span>\n        <span class=\"n\">navigator</span><span class=\"p\">:</span> <span class=\"nc\">InternalNavigatorImpl</span>\n    <span class=\"p\">):</span> <span class=\"nc\">Navigator</span>\n\n    <span class=\"nd\">@Binds</span>\n    <span class=\"nd\">@ActivityRetainedScoped</span>\n    <span class=\"k\">abstract</span> <span class=\"k\">fun</span> <span class=\"nf\">provideInternalNavigator</span><span class=\"p\">(</span>\n        <span class=\"n\">navigator</span><span class=\"p\">:</span> <span class=\"nc\">InternalNavigatorImpl</span>\n    <span class=\"p\">):</span> <span class=\"nc\">InternalNavigator</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ViewModel</code>에서는 이를 활용해서, <code class=\"language-plaintext highlighter-rouge\">SideEffect</code>로 View에서 collect할 수 있도록 구성되었으니, 기존 코드와 크게 다른 부분은 없다고 생각한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@HiltViewModel</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InternalRouteViewModel</span> <span class=\"nd\">@Inject</span> <span class=\"k\">internal</span> <span class=\"k\">constructor</span><span class=\"p\">(</span>\n    <span class=\"n\">navigator</span><span class=\"p\">:</span> <span class=\"nc\">InternalNavigator</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">journeyMapper</span><span class=\"p\">:</span> <span class=\"nc\">InternalActivityRouteMapper</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">sideEffect</span> <span class=\"k\">by</span> <span class=\"nf\">lazy</span><span class=\"p\">(</span><span class=\"nc\">LazyThreadSafetyMode</span><span class=\"p\">.</span><span class=\"nc\">NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">navigator</span><span class=\"p\">.</span><span class=\"n\">channel</span><span class=\"p\">.</span><span class=\"nf\">receiveAsFlow</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">router</span> <span class=\"p\">-&gt;</span>\n                <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">Activity</span><span class=\"p\">&lt;</span><span class=\"err\">*</span><span class=\"p\">&gt;</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"n\">journeyMapper</span><span class=\"p\">.</span><span class=\"nf\">getJourneyOrNull</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">activityRoute</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">NavigateActivity</span><span class=\"p\">(</span>\n                                <span class=\"n\">activityRoute</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">,</span>\n                                <span class=\"n\">argumentMap</span> <span class=\"p\">=</span> <span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">argumentMap</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">Navigation</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">Navigate</span><span class=\"p\">(</span>\n                            <span class=\"n\">navigationRoute</span> <span class=\"p\">=</span> <span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">navigationRoute</span><span class=\"p\">,</span>\n                            <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">saveState</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">NavigateBack</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">NavigateBack</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"p\">.</span><span class=\"nf\">filterNotNull</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3>View에서는</h3>\n\n<p>View에서 <code class=\"language-plaintext highlighter-rouge\">SideEffect</code>를 받아 처리하는 코드이다. 주로 화면 이동과 뒤로가기 이벤트를 처리할 수 있다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">NavigateBack</code>은 Activity와 Navigation 둘 다를 혼용 처리하기 위해 마지막 Entry가 있는지 한 번 더 체크하고 처리하도록 작성되었다.</p>\n\n<p>첫 화면에서는 보통 <code class=\"language-plaintext highlighter-rouge\">&lt;</code>나 <code class=\"language-plaintext highlighter-rouge\">X</code> 버튼을 사용하지는 않지만, 적용은 해두었다.</p>\n\n<p>이 코드에서는 Navigation 처리에 대한 내용이므로 Activity 관련 코드는 제거되었다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">InternalLaunchedRouter</span><span class=\"p\">(</span>\n    <span class=\"n\">navHostController</span><span class=\"p\">:</span> <span class=\"nc\">NavHostController</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"n\">internalRouterViewModel</span><span class=\"p\">:</span> <span class=\"nc\">InternalRouteViewModel</span> <span class=\"p\">=</span> <span class=\"nf\">viewModel</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">activity</span> <span class=\"p\">=</span> <span class=\"nc\">LocalActivity</span><span class=\"p\">.</span><span class=\"n\">current</span>\n    <span class=\"kd\">val</span> <span class=\"py\">lifecycleOwner</span> <span class=\"p\">=</span> <span class=\"nc\">LocalLifecycleOwner</span><span class=\"p\">.</span><span class=\"n\">current</span>\n    <span class=\"nc\">LaunchedEffect</span><span class=\"p\">(</span><span class=\"n\">internalRouterViewModel</span><span class=\"p\">,</span> <span class=\"n\">lifecycleOwner</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">lifecycleOwner</span><span class=\"p\">.</span><span class=\"nf\">repeatOnLifecycle</span><span class=\"p\">(</span><span class=\"nc\">Lifecycle</span><span class=\"p\">.</span><span class=\"nc\">State</span><span class=\"p\">.</span><span class=\"nc\">STARTED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">internalRouterViewModel</span><span class=\"p\">.</span><span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"nf\">collectLatest</span> <span class=\"p\">{</span> <span class=\"n\">sideEffect</span> <span class=\"p\">-&gt;</span>\n                <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">sideEffect</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">NavigateBack</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">navHostController</span><span class=\"o\">?.</span><span class=\"n\">previousBackStackEntry</span> <span class=\"p\">!=</span> <span class=\"k\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"n\">navHostController</span><span class=\"p\">.</span><span class=\"nf\">popBackStack</span><span class=\"p\">()</span>\n                        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                            <span class=\"n\">activity</span><span class=\"o\">?.</span><span class=\"nf\">finish</span><span class=\"p\">()</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">Navigate</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"n\">navHostController</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"n\">navigation</span> <span class=\"p\">-&gt;</span>\n                            <span class=\"n\">navigation</span><span class=\"p\">.</span><span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"n\">navigationRoute</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"n\">navigation</span><span class=\"p\">.</span><span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">findStartDestination</span><span class=\"p\">().</span><span class=\"n\">route</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n                                    <span class=\"nf\">popUpTo</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                        <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"n\">saveState</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n                                <span class=\"n\">restoreState</span> <span class=\"p\">=</span> <span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"n\">saveState</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">NavigateActivity</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"n\">activity</span><span class=\"o\">?.</span><span class=\"nf\">startActivity</span><span class=\"p\">(</span>\n                            <span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"n\">activityRoute</span><span class=\"p\">.</span><span class=\"nf\">getActivity</span><span class=\"p\">(</span><span class=\"n\">activity</span><span class=\"p\">).</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                                <span class=\"n\">sideEffect</span><span class=\"p\">.</span><span class=\"n\">argumentMap</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">.</span><span class=\"nf\">forEach</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span>\n                                    <span class=\"nf\">putExtra</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                                <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드가 처음 소개된 Flow 다이어그램에 해당한다.</p>\n\n<p><img src=\"/images/posts/2025/Android-Architecture-new-02/CA-Router.drawio.png\" alt=\"sample_01\" /></p>\n\n<h2>정의는?</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">NavigationRoute</code>를 상속받아 Route를 구현하고, 이를 Navigation 화면에 적용해야 한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Serializable</span>\n<span class=\"kd\">object</span> <span class=\"nc\">SettingsRoute</span> <span class=\"p\">:</span> <span class=\"nc\">NavigationRoute</span>\n</code></pre></div></div>\n\n<p>그리고 연결할 지점에는 <code class=\"language-plaintext highlighter-rouge\">NavGraphBuilder</code>를 통해 네비게이션에서 활용할 <code class=\"language-plaintext highlighter-rouge\">composable</code>을 정의하면 된다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fun</span> <span class=\"nc\">NavGraphBuilder</span><span class=\"p\">.</span><span class=\"nf\">settingsNavGraph</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">composable</span><span class=\"p\">&lt;</span><span class=\"nc\">SettingsRoute</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nc\">InternalSettingsScreen</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>네비게이션을 활용하는 방법은 기존과 동일하므로, 여기서는 설명은 생략하고 일부 코드를 올려둔다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Scaffold</span><span class=\"p\">(</span>\n    <span class=\"n\">bottomBar</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n        <span class=\"nc\">NavigationBar</span> <span class=\"p\">{</span>\n            <span class=\"n\">navigationUiState</span><span class=\"p\">.</span><span class=\"n\">navigation</span><span class=\"p\">.</span><span class=\"nf\">forEach</span> <span class=\"p\">{</span> <span class=\"n\">navItem</span> <span class=\"p\">-&gt;</span>\n                <span class=\"nc\">NavigationBarItem</span><span class=\"p\">(</span>\n                    <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">navigationUiState</span><span class=\"p\">.</span><span class=\"n\">selectNav</span> <span class=\"p\">==</span> <span class=\"n\">navItem</span><span class=\"p\">,</span>\n                    <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                        <span class=\"nf\">onClick</span><span class=\"p\">(</span><span class=\"n\">navItem</span><span class=\"p\">)</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"c1\">// 생략</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">innerPadding</span> <span class=\"p\">-&gt;</span>\n    <span class=\"nc\">Box</span><span class=\"p\">(</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n            <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">innerPadding</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">NavHost</span><span class=\"p\">(</span> <span class=\"c1\">// 네비게이션</span>\n            <span class=\"n\">navController</span> <span class=\"p\">=</span> <span class=\"n\">navController</span><span class=\"p\">,</span>\n            <span class=\"n\">startDestination</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationUiState</span><span class=\"p\">.</span><span class=\"nc\">Default</span><span class=\"p\">.</span><span class=\"n\">selectNav</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nf\">searchNavGraph</span><span class=\"p\">()</span>\n            <span class=\"nf\">settingsNavGraph</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2>Activity</h2>\n\n<p>Activity 라우팅은 Compose Navigation보다 조금 더 복잡할 수 있다.</p>\n\n<p>우선 다시 Router 코드로 돌아가서 중요한 부분만 살펴보자. 여기서는 DI인 Dagger를 활용했으니 Dagger를 활용한 방법으로 접근한다.</p>\n\n<p>먼저 <code class=\"language-plaintext highlighter-rouge\">RouterKey</code>라는 <code class=\"language-plaintext highlighter-rouge\">MapKey</code>를 정의했다. 이를 활용해서 클래스 정보를 <code class=\"language-plaintext highlighter-rouge\">Key/Value</code>로 매핑할 수 있도록 한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@MapKey</span>\n<span class=\"k\">annotation</span> <span class=\"kd\">class</span> <span class=\"nc\">RouteKey</span><span class=\"p\">(</span>\n    <span class=\"kd\">val</span> <span class=\"py\">value</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"k\">out</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>그리고 <code class=\"language-plaintext highlighter-rouge\">SomeActivityRouter</code>를 정의하고, 이를 상속받아 구현한다. 여기서 <code class=\"language-plaintext highlighter-rouge\">getActivity()</code>를 구현해서 Intent 정보를 함께 전달하게 된다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">MainActivityRouteImpl</span> <span class=\"nd\">@Inject</span> <span class=\"k\">constructor</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"nc\">MainActivityRouter</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">getActivity</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nc\">Context</span><span class=\"p\">):</span> <span class=\"nc\">Intent</span> <span class=\"p\">=</span>\n        <span class=\"nc\">Intent</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"nc\">MainActivity</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>DI를 활용해 이 RouterImpl이 MainActivityRouter임을 알려주기 위해 <code class=\"language-plaintext highlighter-rouge\">@IntoMap</code>과 <code class=\"language-plaintext highlighter-rouge\">@RouteKey</code>를 활용해서 처리한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Module</span>\n<span class=\"nd\">@InstallIn</span><span class=\"p\">(</span><span class=\"nc\">SingletonComponent</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n<span class=\"k\">internal</span> <span class=\"k\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">MainModule</span> <span class=\"p\">{</span>\n\n    <span class=\"nd\">@Binds</span>\n    <span class=\"nd\">@IntoMap</span>\n    <span class=\"nd\">@RouteKey</span><span class=\"p\">(</span><span class=\"nc\">MainActivityRouter</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n    <span class=\"k\">abstract</span> <span class=\"k\">fun</span> <span class=\"nf\">bindMainActivityRoute</span><span class=\"p\">(</span>\n        <span class=\"n\">mainActivityRoute</span><span class=\"p\">:</span> <span class=\"nc\">MainActivityRouteImpl</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span> <span class=\"nc\">ActivityRoute</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>위 코드는 KSP(Kotlin Symbol Processing)를 활용하면 더 쉽게 자동화할 수 있다. 어차피 수동으로 만들더라도 같은 패턴만 나오도록 만들면 되기 때문이다. 특히 Activity를 찾는 것이 중요하며, Intent 객체를 처음부터 만드는 것도 아니기에 이러한 접근이 가능하다.</p>\n\n<h4>KSP 관련 글</h4>\n\n<p><a href=\"https://thdev.tech/android/2022/05/14/Kotlin-KSP/\">Android KSP(Kotlin Symbol Processing) 활용을 위한 준비단계! - link</a>\n<a href=\"https://thdev.tech/android/2022/05/16/Kotlin-KSP-SymbolProcessor/\">Android KSP(Kotlin Symbol Processing) 활용할 수 있는 샘플 코드 작업 - link</a></p>\n\n<p>코드를 실행하면 런타임에 아래의 <code class=\"language-plaintext highlighter-rouge\">map: Map&lt;Class&lt;out ActivityRoute&gt;, @JvmSuppressWildcards ActivityRoute&gt;</code> 부분에서 <code class=\"language-plaintext highlighter-rouge\">ActivityRoute</code>로 정의한 정보를 찾아 Map 형태로 전달하고 이를 활용할 수 있다.</p>\n\n<p>아쉽게도 KClass를 바로 활용하려고 했지만, 런타임에서 오류가 발생해서 Java Class를 활용하게 되었다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Module</span>\n<span class=\"nd\">@InstallIn</span><span class=\"p\">(</span><span class=\"nc\">SingletonComponent</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n<span class=\"k\">internal</span> <span class=\"kd\">object</span> <span class=\"nc\">JourneyRouterModule</span> <span class=\"p\">{</span>\n\n    <span class=\"nd\">@Provides</span>\n    <span class=\"nd\">@Singleton</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">providerInternalActivityRouteMapper</span><span class=\"p\">(</span>\n        <span class=\"n\">map</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">&lt;</span><span class=\"nc\">Class</span><span class=\"p\">&lt;</span><span class=\"k\">out</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;,</span> <span class=\"err\">@</span><span class=\"nc\">JvmSuppressWildcards</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;,</span>\n    <span class=\"p\">):</span> <span class=\"nc\">InternalActivityRouteMapper</span> <span class=\"p\">=</span>\n        <span class=\"nc\">InternalActivityRouteMapper</span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>마지막으로 접근해야 할 정보는 <code class=\"language-plaintext highlighter-rouge\">getJourneyOrNull</code>에서 찾아서 startActivity할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Singleton</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InternalActivityRouteMapper</span> <span class=\"nd\">@Inject</span> <span class=\"k\">constructor</span><span class=\"p\">(</span>\n    <span class=\"err\">@</span><span class=\"k\">get</span><span class=\"p\">:</span><span class=\"nc\">VisibleForTesting</span> <span class=\"kd\">val</span> <span class=\"py\">mapper</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">&lt;</span><span class=\"nc\">Class</span><span class=\"p\">&lt;</span><span class=\"k\">out</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;,</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"cm\">/**\n     * Find and return ActivityRoute from the data stored in Mapper.\n     */</span>\n    <span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">getJourneyOrNull</span><span class=\"p\">(</span><span class=\"n\">journeyKClass</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"err\">*</span><span class=\"p\">&gt;):</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">?</span> <span class=\"p\">=</span>\n        <span class=\"nf\">synchronized</span><span class=\"p\">(</span><span class=\"n\">mapper</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">mapper</span><span class=\"p\">[</span><span class=\"n\">journeyKClass</span><span class=\"p\">.</span><span class=\"n\">java</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3>Activity라서</h3>\n\n<p>Compose Navigation에서는 <code class=\"language-plaintext highlighter-rouge\">@Serializable object SettingsRoute : NavigationRoute</code>와 같이 <code class=\"language-plaintext highlighter-rouge\">@Serializable</code> 데이터 클래스만 정의하면 동작에 문제가 없고, 필요한 데이터도 간단하게 넘겨줄 수 있다.</p>\n\n<p>하지만 <code class=\"language-plaintext highlighter-rouge\">Activity</code>는 필요한 데이터를 넘기기 위해 별도의 <code class=\"language-plaintext highlighter-rouge\">arguments</code>를 사용해야 한다는 차이점이 있다.</p>\n\n<p>그래서 <code class=\"language-plaintext highlighter-rouge\">Navigator</code> 인터페이스에 아래와 같이 arguments를 받을 수 있도록 추가해두었다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">interface</span> <span class=\"nc\">Navigator</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"p\">&lt;</span><span class=\"nc\">T</span> <span class=\"p\">:</span> <span class=\"nc\">ActivityRoute</span><span class=\"p\">&gt;</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span>\n        <span class=\"n\">activityRoute</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;,</span>\n        <span class=\"n\">argumentMap</span><span class=\"p\">:</span> <span class=\"nc\">Map</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Parcelable</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nf\">emptyMap</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">navigate</span><span class=\"p\">(</span>\n        <span class=\"n\">navigationRoute</span><span class=\"p\">:</span> <span class=\"nc\">NavigationRoute</span><span class=\"p\">,</span>\n        <span class=\"n\">saveState</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>데이터 전달을 위함이니 <code class=\"language-plaintext highlighter-rouge\">Parcelable</code>로 제한해두었다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Navigator</code>를 활용하면 <code class=\"language-plaintext highlighter-rouge\">getJourneyOrNull</code> 부분을 ViewModel에서 처리하고있음을 아래와 같이 확인할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@HiltViewModel</span>\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">InternalRouteViewModel</span> <span class=\"nd\">@Inject</span> <span class=\"k\">internal</span> <span class=\"k\">constructor</span><span class=\"p\">(</span>\n    <span class=\"n\">navigator</span><span class=\"p\">:</span> <span class=\"nc\">InternalNavigator</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">journeyMapper</span><span class=\"p\">:</span> <span class=\"nc\">InternalActivityRouteMapper</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">sideEffect</span> <span class=\"k\">by</span> <span class=\"nf\">lazy</span><span class=\"p\">(</span><span class=\"nc\">LazyThreadSafetyMode</span><span class=\"p\">.</span><span class=\"nc\">NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">navigator</span><span class=\"p\">.</span><span class=\"n\">channel</span><span class=\"p\">.</span><span class=\"nf\">receiveAsFlow</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">router</span> <span class=\"p\">-&gt;</span>\n                <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">is</span> <span class=\"nc\">InternalRoute</span><span class=\"p\">.</span><span class=\"nc\">Activity</span><span class=\"p\">&lt;</span><span class=\"err\">*</span><span class=\"p\">&gt;</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                        <span class=\"n\">journeyMapper</span><span class=\"p\">.</span><span class=\"nf\">getJourneyOrNull</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">activityRoute</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">InternalRouteSideEffect</span><span class=\"p\">.</span><span class=\"nc\">NavigateActivity</span><span class=\"p\">(</span>\n                                <span class=\"n\">activityRoute</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">,</span>\n                                <span class=\"n\">argumentMap</span> <span class=\"p\">=</span> <span class=\"n\">router</span><span class=\"p\">.</span><span class=\"n\">argumentMap</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"p\">.</span><span class=\"nf\">filterNotNull</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드 부분을 도식화한 부분이 아래와 같다.</p>\n\n<p><img src=\"/images/posts/2025/Android-Architecture-new-02/CA-Router-activity.drawio.png\" alt=\"sample_02\" /></p>\n\n<h2>정리하면</h2>\n\n<ul>\n  <li>View에서 화면 이동 이벤트가 발생한다.</li>\n  <li>ViewModel에서 <code class=\"language-plaintext highlighter-rouge\">Navigator</code>를 통해 Activity/Compose Navigation으로 이벤트를 이동 요청한다.\n    <ul>\n      <li>Activity 이동: DI를 통해 주입받은 ActivityRoute 정보를 자동으로 매핑하여 <code class=\"language-plaintext highlighter-rouge\">InternalActivityRouteMapper</code>에 사전 보관된 정보와 매칭하여 <code class=\"language-plaintext highlighter-rouge\">startActivity</code>를 호출한다.</li>\n      <li>Navigation 이동: Compose Navigation을 통해 <code class=\"language-plaintext highlighter-rouge\">Map</code>에 포함되어있을 경우 이동한다.</li>\n    </ul>\n  </li>\n</ul>\n\n<p>남은 작업은 다음과 같다.</p>\n\n<ul>\n  <li>ActivityResult 처리</li>\n  <li>NavigationResult 처리</li>\n</ul>\n\n<h2>사용법</h2>\n\n<p>앞서 소개한 Action과 다르게 Router는 Activity를 기반하여 동작한다. A/B Activity가 있다고 하더라도, <code class=\"language-plaintext highlighter-rouge\">InternalActivityRouteMapper</code>는 싱글턴이지만 실제 동작은 서로 무관하게 동작한다.</p>\n\n<p>그래서 각 Activity마다 아래와 같은 코드를 선택적으로 주입해 주어야 한다. 싱글 액티비티 구조라면 당연히 하나면 충분하지만, 서브 네비게이션에 대한 구조를 적용하지 않아서 현재는 모든 경우에 대응되지는 않는다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">val</span> <span class=\"py\">navHostController</span> <span class=\"p\">=</span> <span class=\"nf\">rememberNavController</span><span class=\"p\">()</span>\n<span class=\"nc\">LaunchedRouter</span><span class=\"p\">(</span><span class=\"n\">navHostController</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// or</span>\n<span class=\"nc\">LaunchedRouter</span><span class=\"p\">()</span> <span class=\"c1\">// navHostController default null</span>\n</code></pre></div></div>\n\n<h2>Next</h2>\n\n<p>Action을 새로 짜면서 Router도 몇 번의 수정이 있었다.</p>\n\n<p>기존 Action 방식에서의 문제점은 다음과 같았다.</p>\n\n<p>A/B/C 화면 어디서든 동일한 이벤트인 뒤로가기(back) 이벤트를 받는다면, 모든 화면에서 action을 처리해버리고 원치 않는 종료가 일어날 수 있다는 점이었다. 사이드 이펙트를 통해 막을 수는 있었지만 근본적인 문제 해결도 아니고, 오히려 복잡성을 높이는 코드였기에 수정되면서 원래 사용하던 방식으로 되돌아갔다는 점이다.</p>\n\n<p>더 나아가 네비게이션에서만 Router를 활용하고 싶다면 드로이드 나이츠 코드를 참고해보면 좋을 것 같다.</p>\n\n<p><a href=\"https://github.com/droidknights/DroidKnightsApp/tree/2025/app/core/router\">droidknights 2025 - Router</a></p>\n\n<h2>작성 글 이어보기</h2>\n\n<ul>\n  <li><a href=\"https://thdev.tech/architecture/2025/02/02/Android-Architecture-01/\">1부 - 컴포즈에 사용할 Composable Architecture 설명(리엑트?)</a></li>\n  <li><a href=\"https://thdev.tech/architecture/2025/04/15/Android-Architecture-02/\">2부 - Composable Architecture는 만들었는데 문제가 있었네? 개선해보자.</a></li>\n  <li><a href=\"https://thdev.tech/architecture/2025/04/20/Android-Architecture-03/\">3부 - Composable Architecture에서는 Alert/Toast는 어떻게 사용할 수 있는가?</a></li>\n  <li><a href=\"https://thdev.tech/architecture/2025/06/01/Android-Architecture-new-01/\">다시 - Composable Architecture 설계 변경</a></li>\n</ul>\n\n",
        "contentSnippet": "원래는 Action 시스템을 활용해서 Router를 쓰려고 설계했지만, 필자가 기존에 사용하던 방식 중 하나로 돌아가 거기서부터 다시 설계되었다.\n이 라우터는 크게 두 가지 상황에 활용 가능하다.\nActivity 간 화면 이동\nCompose Navigation 간 화면 이동\n만약 싱글 액티비티(Single Activity) 구조를 쓴다면 Compose Navigation 부분만 적용하면 되니 더 쉽게 사용 가능하다.\n여기서는 어떻게 활용되었을까?\nActivity는 Dagger의 IntoMap을 활용해서 Key/Value 매핑으로 ActivityRoute를 상속받아 구현한 객체를 정의해서 사용한다.\nCompose Navigation은 NavigationRoute를 상속받아 구현한다.\n이 글에서는\n새로운 Router의 설계 철학 및 동작 방식을 자세히 알아본다.\nActivity 및 Compose Navigation에서 Router를 활용하는 구체적인 코드 예시를 살펴본다.\nRoute\nNavigationRoute는 드로이드 나이츠(Droid Knights) 프로젝트에도 적용되었으며, 다음 링크를 통해 라우팅 방식을 확인해볼 수 있다.\ndroidknights 2025 - Router\n이 글에서는 TComposableArchitecture - GitHub - link에서 적용된 방법을 중심으로 설명한다.\n사용법\n사용법은 간단하다. Navigator를 주입받아 활용하며, 이동할 Activity 또는 Navigation을 Navigator에서 제공하는 navigate만 호출하면 된다.\n\n@HiltViewModel\ninternal class SearchViewModel @Inject constructor(\n    flowActionStream: FlowActionStream,\n    private val navigator: Navigator,\n) : ActionViewModel<SearchAction>(flowActionStream, SearchAction::class) {\n\n    override suspend fun handleAction(action: SearchAction) {\n        when (action) {\n            is SearchAction.ShowDetail -> { // Activity 이동 시\n                navigator.navigate(\n                    activityRoute = DetailActivityRouter::class,\n                    argumentMap = mapOf(\n                        DetailActivityRouter.PUT_DATA to DetailData(text = action.message),\n                    ),\n                )\n            }\n\n            is SearchAction.SwitchNavigation -> { // Compose Navigation 이동 시\n                navigator.navigate(\n                    navigationRoute = action.navItem.route,\n                    saveState = true,\n                )\n            }\n        }\n    }\n}\n\n\n여기서의 설계는?\n먼저 Compose Navigation에 대한 시퀀스를 살펴보자.\nView - Action - ViewModel - Router - RouterViewModel - RouterView로 이어지는 흐름을 알 수 있다.\n이를 쉽게 이해하기 위해 Repository 패턴에 비유하면, 두 개의 View에서 데이터 통신하는 방법을 설명한 그림으로 생각하면 된다. Router 부분이 Repository로 볼 수 있다.\nView - Action - ViewModel - Repository - RouterViewModel - RouterView\n이를 도식화하면\n\n이번에는 Activity를 이동한다면? 한단계가 더 추가됨을 알 수 있다.\nActivityJourney라는 개념을 활용해서 이동할 Activity가 포함되어 있는지 추가로 검증하고, Activity를 이동한다.\nView - Action - ViewModel - Router - (ActivityJourney) - RouterViewModel - RouterView\n\n이 코드를 이해하는 데 있어서 중요한 점은 두 개의 View가 어떻게 데이터를 통신하는가이다.\n가장 쉬운 방법은 싱글턴으로 처리된 Repository를 활용하는 것이거나, Activity 사이에 위치한 하나의 Repository를 활용하는 방법일 것이다. 보통은 Repository를 싱글턴으로 활용하니, 여기서도 동일하다고 이해하면 된다.\nRouter 코드\n먼저 우리가 활용할 Navigator는 인터페이스로 정의되어 있다. 구현체는 모두 숨겨져 있다.\n이때 구현체를 완전히 분리하고 싶다면, 인터페이스 모듈과 구현체 모듈을 두 개 만들어 활용하는 방식을 고려할 수 있다. 이 방식은 droidknights 2025 - Router에 포함되어 있으니 참고하길 바란다.\n\ninterface Navigator {\n\n    suspend fun <T : ActivityRoute> navigate(\n        activityRoute: KClass<T>,\n        argumentMap: Map<String, Parcelable> = emptyMap(),\n    )\n\n    suspend fun navigate(\n        navigationRoute: NavigationRoute,\n        saveState: Boolean = false,\n    )\n\n    suspend fun navigateBack()\n}\n\n\n위 코드에 대한 구현체는 다음과 같다.\nInternalNavigatorImpl은 Router 모듈 내부에서만 활용하기 위한 것으로, val channel: Channel<InternalRoute> 한 줄이 포함되어 있다.\n\n@ActivityRetainedScoped\ninternal class InternalNavigatorImpl @Inject constructor() : Navigator, InternalNavigator {\n\n    override val channel = Channel<InternalRoute>(Channel.BUFFERED)\n\n    // 아래에서 설명\n    override suspend fun <T : ActivityRoute> navigate(activityRoute: KClass<T>, argumentMap: Map<String, Parcelable>) {\n        channel.send(\n            InternalRoute.Activity(\n                activityRoute = activityRoute,\n                argumentMap = argumentMap,\n            )\n        )\n    }\n\n    override suspend fun navigate(navigationRoute: NavigationRoute, saveState: Boolean) {\n        channel.send(\n            InternalRoute.Navigation(\n                navigationRoute = navigationRoute,\n                saveState = saveState,\n            )\n        )\n    }\n\n    override suspend fun navigateBack() {\n        channel.send(InternalRoute.NavigateBack)\n    }\n}\n\n\n위 Router는 DI(Dependency Injection)를 통해 싱글턴으로 구성되어 있다.\n\n@Module\n@InstallIn(ActivityRetainedComponent::class)\ninternal abstract class RouterModel {\n\n    @Binds\n    @ActivityRetainedScoped\n    abstract fun provideNavigator(\n        navigator: InternalNavigatorImpl\n    ): Navigator\n\n    @Binds\n    @ActivityRetainedScoped\n    abstract fun provideInternalNavigator(\n        navigator: InternalNavigatorImpl\n    ): InternalNavigator\n}\n\n\nViewModel에서는 이를 활용해서, SideEffect로 View에서 collect할 수 있도록 구성되었으니, 기존 코드와 크게 다른 부분은 없다고 생각한다.\n\n@HiltViewModel\ninternal class InternalRouteViewModel @Inject internal constructor(\n    navigator: InternalNavigator,\n    private val journeyMapper: InternalActivityRouteMapper,\n) : ViewModel() {\n\n    val sideEffect by lazy(LazyThreadSafetyMode.NONE) {\n        navigator.channel.receiveAsFlow()\n            .map { router ->\n                when (router) {\n                    is InternalRoute.Activity<*> -> {\n                        journeyMapper.getJourneyOrNull(router.activityRoute)?.let {\n                            InternalRouteSideEffect.NavigateActivity(\n                                activityRoute = it,\n                                argumentMap = router.argumentMap,\n                            )\n                        }\n                    }\n\n                    is InternalRoute.Navigation -> {\n                        InternalRouteSideEffect.Navigate(\n                            navigationRoute = router.navigationRoute,\n                            saveState = router.saveState,\n                        )\n                    }\n\n                    is InternalRoute.NavigateBack -> {\n                        InternalRouteSideEffect.NavigateBack\n                    }\n                }\n            }\n            .filterNotNull()\n    }\n}\n\n\nView에서는\nView에서 SideEffect를 받아 처리하는 코드이다. 주로 화면 이동과 뒤로가기 이벤트를 처리할 수 있다.\nNavigateBack은 Activity와 Navigation 둘 다를 혼용 처리하기 위해 마지막 Entry가 있는지 한 번 더 체크하고 처리하도록 작성되었다.\n첫 화면에서는 보통 <나 X 버튼을 사용하지는 않지만, 적용은 해두었다.\n이 코드에서는 Navigation 처리에 대한 내용이므로 Activity 관련 코드는 제거되었다.\n\n@Composable\nprivate fun InternalLaunchedRouter(\n    navHostController: NavHostController? = null,\n    internalRouterViewModel: InternalRouteViewModel = viewModel(),\n) {\n    val activity = LocalActivity.current\n    val lifecycleOwner = LocalLifecycleOwner.current\n    LaunchedEffect(internalRouterViewModel, lifecycleOwner) {\n        lifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\n            internalRouterViewModel.sideEffect.collectLatest { sideEffect ->\n                when (sideEffect) {\n                    is InternalRouteSideEffect.NavigateBack -> {\n                        if (navHostController?.previousBackStackEntry != null) {\n                            navHostController.popBackStack()\n                        } else {\n                            activity?.finish()\n                        }\n                    }\n\n                    is InternalRouteSideEffect.Navigate -> {\n                        navHostController?.let { navigation ->\n                            navigation.navigate(sideEffect.navigationRoute) {\n                                navigation.graph.findStartDestination().route?.let {\n                                    popUpTo(it) {\n                                        saveState = sideEffect.saveState\n                                    }\n                                }\n                                restoreState = sideEffect.saveState\n                            }\n                        }\n                    }\n\n                    is InternalRouteSideEffect.NavigateActivity -> {\n                        activity?.startActivity(\n                            sideEffect.activityRoute.getActivity(activity).apply {\n                                sideEffect.argumentMap.entries.forEach { (key, value) ->\n                                    putExtra(key, value)\n                                }\n                            }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n이 코드가 처음 소개된 Flow 다이어그램에 해당한다.\n\n정의는?\nNavigationRoute를 상속받아 Route를 구현하고, 이를 Navigation 화면에 적용해야 한다.\n\n@Serializable\nobject SettingsRoute : NavigationRoute\n\n\n그리고 연결할 지점에는 NavGraphBuilder를 통해 네비게이션에서 활용할 composable을 정의하면 된다.\n\nfun NavGraphBuilder.settingsNavGraph() {\n    composable<SettingsRoute> {\n        InternalSettingsScreen()\n    }\n}\n\n\n네비게이션을 활용하는 방법은 기존과 동일하므로, 여기서는 설명은 생략하고 일부 코드를 올려둔다.\n\nScaffold(\n    bottomBar = {\n        NavigationBar {\n            navigationUiState.navigation.forEach { navItem ->\n                NavigationBarItem(\n                    selected = navigationUiState.selectNav == navItem,\n                    onClick = {\n                        onClick(navItem)\n                    },\n                    // 생략\n                )\n            }\n        }\n    },\n    modifier = modifier\n) { innerPadding ->\n    Box(\n        modifier = Modifier\n            .padding(innerPadding)\n            .padding(horizontal = 10.dp)\n    ) {\n        NavHost( // 네비게이션\n            navController = navController,\n            startDestination = NavigationUiState.Default.selectNav.route,\n        ) {\n            searchNavGraph()\n            settingsNavGraph()\n        }\n    }\n}\n\n\nActivity\nActivity 라우팅은 Compose Navigation보다 조금 더 복잡할 수 있다.\n우선 다시 Router 코드로 돌아가서 중요한 부분만 살펴보자. 여기서는 DI인 Dagger를 활용했으니 Dagger를 활용한 방법으로 접근한다.\n먼저 RouterKey라는 MapKey를 정의했다. 이를 활용해서 클래스 정보를 Key/Value로 매핑할 수 있도록 한다.\n\n@MapKey\nannotation class RouteKey(\n    val value: KClass<out ActivityRoute>,\n)\n\n\n그리고 SomeActivityRouter를 정의하고, 이를 상속받아 구현한다. 여기서 getActivity()를 구현해서 Intent 정보를 함께 전달하게 된다.\n\ninternal class MainActivityRouteImpl @Inject constructor() : MainActivityRouter {\n\n    override fun getActivity(context: Context): Intent =\n        Intent(context, MainActivity::class.java)\n}\n\n\nDI를 활용해 이 RouterImpl이 MainActivityRouter임을 알려주기 위해 @IntoMap과 @RouteKey를 활용해서 처리한다.\n\n@Module\n@InstallIn(SingletonComponent::class)\ninternal abstract class MainModule {\n\n    @Binds\n    @IntoMap\n    @RouteKey(MainActivityRouter::class)\n    abstract fun bindMainActivityRoute(\n        mainActivityRoute: MainActivityRouteImpl,\n    ): ActivityRoute\n}\n\n\n위 코드는 KSP(Kotlin Symbol Processing)를 활용하면 더 쉽게 자동화할 수 있다. 어차피 수동으로 만들더라도 같은 패턴만 나오도록 만들면 되기 때문이다. 특히 Activity를 찾는 것이 중요하며, Intent 객체를 처음부터 만드는 것도 아니기에 이러한 접근이 가능하다.\nKSP 관련 글\nAndroid KSP(Kotlin Symbol Processing) 활용을 위한 준비단계! - link\nAndroid KSP(Kotlin Symbol Processing) 활용할 수 있는 샘플 코드 작업 - link\n코드를 실행하면 런타임에 아래의 map: Map<Class<out ActivityRoute>, @JvmSuppressWildcards ActivityRoute> 부분에서 ActivityRoute로 정의한 정보를 찾아 Map 형태로 전달하고 이를 활용할 수 있다.\n아쉽게도 KClass를 바로 활용하려고 했지만, 런타임에서 오류가 발생해서 Java Class를 활용하게 되었다.\n\n@Module\n@InstallIn(SingletonComponent::class)\ninternal object JourneyRouterModule {\n\n    @Provides\n    @Singleton\n    fun providerInternalActivityRouteMapper(\n        map: Map<Class<out ActivityRoute>, @JvmSuppressWildcards ActivityRoute>,\n    ): InternalActivityRouteMapper =\n        InternalActivityRouteMapper(map)\n}\n\n\n마지막으로 접근해야 할 정보는 getJourneyOrNull에서 찾아서 startActivity할 수 있다.\n\n@Singleton\ninternal class InternalActivityRouteMapper @Inject constructor(\n    @get:VisibleForTesting val mapper: Map<Class<out ActivityRoute>, ActivityRoute>,\n) {\n\n    /**\n     * Find and return ActivityRoute from the data stored in Mapper.\n     */\n    internal fun getJourneyOrNull(journeyKClass: KClass<*>): ActivityRoute? =\n        synchronized(mapper) {\n            mapper[journeyKClass.java]\n        }\n}\n\n\nActivity라서\nCompose Navigation에서는 @Serializable object SettingsRoute : NavigationRoute와 같이 @Serializable 데이터 클래스만 정의하면 동작에 문제가 없고, 필요한 데이터도 간단하게 넘겨줄 수 있다.\n하지만 Activity는 필요한 데이터를 넘기기 위해 별도의 arguments를 사용해야 한다는 차이점이 있다.\n그래서 Navigator 인터페이스에 아래와 같이 arguments를 받을 수 있도록 추가해두었다.\n\ninterface Navigator {\n\n    suspend fun <T : ActivityRoute> navigate(\n        activityRoute: KClass<T>,\n        argumentMap: Map<String, Parcelable> = emptyMap(),\n    )\n\n    suspend fun navigate(\n        navigationRoute: NavigationRoute,\n        saveState: Boolean = false,\n    )\n}\n\n\n데이터 전달을 위함이니 Parcelable로 제한해두었다.\nNavigator를 활용하면 getJourneyOrNull 부분을 ViewModel에서 처리하고있음을 아래와 같이 확인할 수 있다.\n\n@HiltViewModel\ninternal class InternalRouteViewModel @Inject internal constructor(\n    navigator: InternalNavigator,\n    private val journeyMapper: InternalActivityRouteMapper,\n) : ViewModel() {\n\n    val sideEffect by lazy(LazyThreadSafetyMode.NONE) {\n        navigator.channel.receiveAsFlow()\n            .map { router ->\n                when (router) {\n                    is InternalRoute.Activity<*> -> {\n                        journeyMapper.getJourneyOrNull(router.activityRoute)?.let {\n                            InternalRouteSideEffect.NavigateActivity(\n                                activityRoute = it,\n                                argumentMap = router.argumentMap,\n                            )\n                        }\n                    }\n                }\n            }\n            .filterNotNull()\n    }\n}\n\n\n이 코드 부분을 도식화한 부분이 아래와 같다.\n\n정리하면\nView에서 화면 이동 이벤트가 발생한다.\nViewModel에서 Navigator를 통해 Activity/Compose Navigation으로 이벤트를 이동 요청한다.\n    \nActivity 이동: DI를 통해 주입받은 ActivityRoute 정보를 자동으로 매핑하여 InternalActivityRouteMapper에 사전 보관된 정보와 매칭하여 startActivity를 호출한다.\nNavigation 이동: Compose Navigation을 통해 Map에 포함되어있을 경우 이동한다.\n남은 작업은 다음과 같다.\nActivityResult 처리\nNavigationResult 처리\n사용법\n앞서 소개한 Action과 다르게 Router는 Activity를 기반하여 동작한다. A/B Activity가 있다고 하더라도, InternalActivityRouteMapper는 싱글턴이지만 실제 동작은 서로 무관하게 동작한다.\n그래서 각 Activity마다 아래와 같은 코드를 선택적으로 주입해 주어야 한다. 싱글 액티비티 구조라면 당연히 하나면 충분하지만, 서브 네비게이션에 대한 구조를 적용하지 않아서 현재는 모든 경우에 대응되지는 않는다.\n\nval navHostController = rememberNavController()\nLaunchedRouter(navHostController)\n\n// or\nLaunchedRouter() // navHostController default null\n\n\nNext\nAction을 새로 짜면서 Router도 몇 번의 수정이 있었다.\n기존 Action 방식에서의 문제점은 다음과 같았다.\nA/B/C 화면 어디서든 동일한 이벤트인 뒤로가기(back) 이벤트를 받는다면, 모든 화면에서 action을 처리해버리고 원치 않는 종료가 일어날 수 있다는 점이었다. 사이드 이펙트를 통해 막을 수는 있었지만 근본적인 문제 해결도 아니고, 오히려 복잡성을 높이는 코드였기에 수정되면서 원래 사용하던 방식으로 되돌아갔다는 점이다.\n더 나아가 네비게이션에서만 Router를 활용하고 싶다면 드로이드 나이츠 코드를 참고해보면 좋을 것 같다.\ndroidknights 2025 - Router\n작성 글 이어보기\n1부 - 컴포즈에 사용할 Composable Architecture 설명(리엑트?)\n2부 - Composable Architecture는 만들었는데 문제가 있었네? 개선해보자.\n3부 - Composable Architecture에서는 Alert/Toast는 어떻게 사용할 수 있는가?\n다시 - Composable Architecture 설계 변경",
        "guid": "https://thdev.tech/architecture/2025/06/02/Android-Architecture-new-02/",
        "isoDate": "2025-06-02T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Lael's World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "AI 이미지 프롬프트 생성기 무료로 사용하세요",
        "link": "http://muzbox.tistory.com/483603",
        "pubDate": "Wed, 4 Jun 2025 07:19:12 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483603#entry483603comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;AI 이미지 프롬프트 생성기는 복잡한 프롬프트 작성 없이 간단한 옵션 선택만으로 전문적인 AI 이미지 생성 프롬프트를 만들어주는 도구입니다. 성별, 인종, 직업부터 표정, 동작, 의상, 배경까지 세밀한 옵션을 제공하며, 창작 아이디어가 막혔을 때는 랜덤 생성 기능으로 새로운 영감을 얻을 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;DALL&middot;E, Midjourney, Stable Diffusion, GPT-4o 등 각 AI 플랫폼에 최적화된 4가지 형태의 프롬프트를 동시에 생성해주어 어떤 도구든 바로 사용할 수 있습니다. 한국어-영어 병기로 제공되어 이해하기 쉽고, 웹브라우저에서 설치 없이 즉시 사용 가능합니다. AI 이미지 생성 초보자부터 전문가까지, 3분 만에 원하는 캐릭터와 장면을 만들어보세요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1024\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/dmZBWa/btsOmwYtV3Q/aMXyot1Zb1NmW5ZOVrODsK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dmZBWa/btsOmwYtV3Q/aMXyot1Zb1NmW5ZOVrODsK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dmZBWa/btsOmwYtV3Q/aMXyot1Zb1NmW5ZOVrODsK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdmZBWa%2FbtsOmwYtV3Q%2FaMXyot1Zb1NmW5ZOVrODsK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"AI 이미지 프롬프트 생성기\" loading=\"lazy\" width=\"500\" height=\"500\" data-origin-width=\"1024\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script>\n      tailwind.config = {\n        theme: {\n          extend: {\n            colors: {\n              'brand-primary': '#1e40af', // Deep blue\n              'brand-secondary': '#3b82f6', // Lighter blue\n              'brand-accent': '#fbbf24', // Amber accent\n              'neutral-dark': '#1f2937', // Dark gray\n              'neutral-medium': '#4b5563', // Medium gray\n              'neutral-light': '#d1d5db', // Light gray\n              'neutral-extralight': '#f3f4f6', // Extra light gray for backgrounds\n            },\n            fontFamily: {\n              sans: ['Inter', 'sans-serif'], // Using Inter as a modern sans-serif\n            },\n          }\n        }\n      }\n    </script>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+KR:wght@300;400;500;700&display=swap\" rel=\"stylesheet\">\n    <style>\n      body {\n        font-family: 'Noto Sans KR', 'Inter', sans-serif; /* Noto Sans KR for Korean, Inter as fallback/general */\n      }\n      .h-10 { /* Ensure labels have space for two lines with whitespace-pre-line */\n        height: 2.5rem; \n      }\n      .break-words {\n        word-break: break-word;\n      }\n      .whitespace-pre-line {\n        white-space: pre-line;\n      }\n\n/* 유튜브 링크 글씨 색상 강제 흰색 */\nfooter a[href*=\"youtube\"] {\n  color: white !important;\n}\n\n/* 또는 더 구체적으로 */\nfooter a[href*=\"@AIFACT-GPTPARK\"] {\n  color: #ffffff !important;\n}\n    </style>\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"react\": \"https://esm.sh/react@^19.1.0\",\n    \"react/\": \"https://esm.sh/react@^19.1.0/\"\n  }\n}\n</script>\n\n  <body class=\"bg-neutral-extralight text-neutral-dark antialiased\">\n    <div id=\"root\"></div>\n\n    <script>\n      // --- Constants and Types (from types.ts and constants.ts) ---\n      const Category = {\n        GENDER: \"성별\\n(Gender)\",\n        RACE: \"인종\\n(Race)\",\n        OCCUPATION: \"직업\\n(Occupation)\",\n        EXPRESSION: \"표정\\n(Facial Expression)\",\n        ACTION: \"동작\\n(Action/Pose)\",\n        CLOTHING: \"복장\\n(Clothing)\",\n        ACCESSORIES: \"액세서리\\n(Accessories)\",\n        BACKGROUND: \"배경\\n(Background)\",\n        STYLE: \"화풍\\n(Art Style)\",\n        ASPECT_RATIO: \"이미지 비율\\n(Image Aspect Ratio)\",\n        FRAMING: \"촬영 구도\\n(Shot Type/Framing)\"\n      };\n\n      const ExpressionSubCategory = {\n        HAPPY_JOYFUL: \"행복/기쁨\\n(Happy/Joyful)\",\n        SAD_SORROWFUL: \"슬픔/비통\\n(Sad/Sorrowful)\",\n        ANGRY_FURIOUS: \"분노/격노\\n(Angry/Furious)\",\n        SURPRISED_SHOCKED: \"놀람/충격\\n(Surprised/Shocked)\",\n        THOUGHTFUL_SERIOUS: \"생각/진지\\n(Thoughtful/Serious)\",\n        NEUTRAL: \"중립적\\n(Neutral)\",\n        FEARFUL_ANXIOUS: \"두려움/불안\\n(Fearful/Anxious)\",\n        PLAYFUL_MISCHIEVOUS: \"장난스러운/익살스러운\\n(Playful/Mischievous)\",\n        LOVE_AFFECTION: \"사랑/애정\\n(Love/Affection)\",\n        CONFIDENT_PROUD: \"자신감/자부심\\n(Confident/Proud)\",\n        DAILY_LIFE_EXPRESSIONS: \"일상 표정\\n(Daily Life Expressions)\"\n      };\n\n      const ActionSubCategory = {\n        STATIC_POSES: \"정적 자세\\n(Static Poses)\",\n        DYNAMIC_MOVEMENT: \"동적 움직임\\n(Dynamic Movement)\",\n        INTERACTION_OBJECT: \"사물과 상호작용\\n(Interaction with Object)\",\n        MAGICAL_FANTASY: \"마법/판타지 동작\\n(Magical/Fantasy Actions)\",\n        DAILY_LIFE: \"일상 활동\\n(Daily Life Activities)\",\n        COMBAT_POSES: \"전투 자세\\n(Combat Poses)\",\n        ARTISTIC_CREATIVE: \"예술/창작 활동\\n(Artistic/Creative)\",\n        SPORTS_ATHLETICS: \"스포츠/운동\\n(Sports/Athletics)\",\n        COMMUNICATION_GESTURES: \"소통/제스처\\n(Communication/Gestures)\",\n        HOUSEHOLD_CHORES: \"집안일\\n(Household Chores)\"\n      };\n\n      const ClothingSubCategory = {\n        MODERN_CASUAL: \"현대/캐주얼\\n(Modern/Casual)\",\n        FORMAL_ELEGANT: \"정장/우아함\\n(Formal/Elegant)\",\n        HISTORICAL_TRADITIONAL: \"역사적/전통적\\n(Historical/Traditional)\",\n        FANTASY_SCI_FI: \"판타지/SF\\n(Fantasy/Sci-Fi)\",\n        OCCUPATIONAL_UNIFORM: \"직업/유니폼\\n(Occupational/Uniform)\",\n        CULTURAL_ETHNIC: \"문화/민족 의상\\n(Cultural/Ethnic)\",\n        SLEEPWEAR_LOUNGEWEAR: \"잠옷/실내복\\n(Sleepwear/Loungewear)\",\n        PROTECTIVE_GEAR: \"보호 장비\\n(Protective Gear)\",\n        EVERYDAY_WEAR: \"일상복\\n(Everyday Wear)\"\n      };\n      \n      const AccessoriesSubCategory = {\n        MAIN_ACCESSORIES: \"주요 액세서리 타입\\n(Main Accessory Types)\"\n      };\n\n      const BackgroundSubCategory = {\n        NATURE_LANDSCAPE: \"자연/풍경\\n(Nature/Landscape)\",\n        URBAN_CITYSCAPE: \"도시/건축\\n(Urban/Cityscape)\",\n        INTERIOR_SPACES: \"실내 공간\\n(Interior Spaces)\",\n        FANTASY_SURREAL: \"판타지/초현실\\n(Fantasy/Surreal)\",\n        ABSTRACT_MINIMALIST: \"추상/미니멀\\n(Abstract/Minimalist)\",\n        HISTORICAL_RUINS: \"역사적 유적\\n(Historical/Ruins)\",\n        SPACE_COSMIC: \"우주/천체\\n(Space/Cosmic)\",\n        WEATHER_ATMOSPHERE: \"날씨/분위기\\n(Weather/Atmosphere)\",\n        PATTERNS_TEXTURES: \"패턴/질감\\n(Patterns/Textures)\",\n        EVERYDAY_LOCATIONS: \"일상 장소\\n(Everyday Locations)\"\n      };\n      \n      const NONE_OPTION_VALUE = \"none\";\n      const NONE_OPTION_LABEL = \"선택 안함\\n(None)\";\n      const NONE_OPTION = { value: NONE_OPTION_VALUE, label: NONE_OPTION_LABEL };\n\n      const GENDER_OPTIONS = [\n        { value: \"man\", label: \"남성\\n(Man)\" }, { value: \"woman\", label: \"여성\\n(Woman)\" }, { value: \"non-binary person\", label: \"논바이너리\\n(Non-binary Person)\" }, { value: \"androgynous person\", label: \"양성적인 사람\\n(Androgynous Person)\" }, { value: \"genderfluid person\", label: \"젠더플루이드\\n(Genderfluid Person)\" }, { value: \"agender person\", label: \"에이젠더\\n(Agender Person)\" }, { value: \"boy\", label: \"소년\\n(Boy)\" }, { value: \"girl\", label: \"소녀\\n(Girl)\" }, { value: \"young man\", label: \"청년\\n(Young Man)\" }, { value: \"young woman\", label: \"젊은 여성\\n(Young Woman)\" }, { value: \"middle-aged man\", label: \"중년 남성\\n(Middle-aged Man)\" }, { value: \"middle-aged woman\", label: \"중년 여성\\n(Middle-aged Woman)\" }, { value: \"elderly man\", label: \"노년 남성\\n(Elderly Man)\" }, { value: \"elderly woman\", label: \"노년 여성\\n(Elderly Woman)\" }, { value: \"transgender man\", label: \"트랜스젠더 남성\\n(Transgender Man)\" }, { value: \"transgender woman\", label: \"트랜스젠더 여성\\n(Transgender Woman)\" },\n      ];\n      const RACE_OPTIONS = [\n        { value: \"Korean\", label: \"한국인\\n(Korean)\" }, { value: \"Japanese\", label: \"일본인\\n(Japanese)\" }, { value: \"Chinese (Han, Uyghur, Tibetan, etc.)\", label: \"중국인 (한족, 위구르족 등)\\n(Chinese)\" }, { value: \"Caucasian (e.g., Northern European, Southern European, Slavic, American)\", label: \"백인 (북유럽, 남유럽, 미국 백인 등)\\n(Caucasian)\" }, { value: \"African descent (e.g., Nigerian, Ethiopian, Kenyan, Afro-Caribbean, African American)\", label: \"아프리카계 (나이지리아, 아프리카계 미국인 등)\\n(African descent)\" }, { value: \"Hispanic/Latinx (e.g., Mexican, Brazilian, Puerto Rican, Cuban, Colombian)\", label: \"히스패닉/라틴계 (멕시코, 브라질 등)\\n(Hispanic/Latinx)\" }, { value: \"Middle Eastern (e.g., Arab, Persian, Turkish, Israeli)\", label: \"중동인 (아랍, 페르시아 등)\\n(Middle Eastern)\" }, { value: \"South Asian (e.g., Indian, Pakistani, Bangladeshi, Sri Lankan)\", label: \"남아시아인 (인도 등)\\n(South Asian)\" }, { value: \"Southeast Asian (e.g., Vietnamese, Thai, Filipino, Malaysian, Indonesian)\", label: \"동남아시아인 (베트남 등)\\n(Southeast Asian)\" }, { value: \"Indigenous/Native American (e.g., Navajo, Inuit, Cherokee, Sioux)\", label: \"원주민/아메리카 원주민\\n(Indigenous/Native American)\" }, { value: \"Pacific Islander (e.g., Polynesian, Melanesian, Micronesian)\", label: \"태평양 섬 주민\\n(Pacific Islander)\" }, { value: \"Nordic (e.g. Swedish, Norwegian, Danish)\", label: \"북유럽인\\n(Nordic)\" }, { value: \"Eastern European (e.g., Russian, Polish, Ukrainian, Czech)\", label: \"동유럽인 (러시아, 폴란드 등)\\n(Eastern European)\" }, { value: \"Mediterranean (e.g., Greek, Italian, Spanish)\", label: \"지중해인 (그리스, 이탈리아 등)\\n(Mediterranean)\" }, { value: \"Celtic (e.g. Irish, Scottish, Welsh)\", label: \"켈트족\\n(Celtic)\" }, { value: \"Aboriginal Australian\", label: \"호주 원주민\\n(Aboriginal Australian)\" }, { value: \"Maori\", label: \"마오리족\\n(Maori)\" }, { value: \"mixed race/ethnicity\", label: \"혼혈/다민족\\n(Mixed Race/Ethnicity)\" }, { value: \"fantasy race (e.g., elf, orc, dwarf, fairy, gnome, troll)\", label: \"판타지 종족 (엘프, 오크 등)\\n(Fantasy Race)\" }, { value: \"extraterrestrial/alien species\", label: \"외계 종족\\n(Alien Species)\" }, { value: \"a person from a specific city (e.g., New Yorker, Parisian, Seoulite)\", label: \"특정 도시 사람 (뉴요커, 파리지앵 등)\\n(Person from a specific city)\"}, { value: \"a tourist\", label: \"관광객\\n(A tourist)\"},\n      ];\n      const OCCUPATION_OPTIONS = [\n        NONE_OPTION, { value: \"student\", label: \"학생\\n(Student)\" }, { value: \"office worker\", label: \"직장인\\n(Office worker)\" }, { value: \"homemaker\", label: \"주부\\n(Homemaker)\" }, { value: \"retiree\", label: \"은퇴자\\n(Retiree)\" }, { value: \"freelancer\", label: \"프리랜서\\n(Freelancer)\" }, { value: \"artist\", label: \"예술가\\n(Artist)\" }, { value: \"shop assistant\", label: \"점원\\n(Shop assistant)\"}, { value: \"teacher\", label: \"교사\\n(Teacher)\"}, { value: \"commuter\", label: \"통근자\\n(Commuter)\"}, { value: \"doctor\", label: \"의사\\n(Doctor)\" }, { value: \"nurse\", label: \"간호사\\n(Nurse)\" }, { value: \"engineer\", label: \"엔지니어\\n(Engineer)\" }, { value: \"scientist\", label: \"과학자\\n(Scientist)\" }, { value: \"chef\", label: \"요리사\\n(Chef)\" }, { value: \"police officer\", label: \"경찰관\\n(Police Officer)\" }, { value: \"firefighter\", label: \"소방관\\n(Firefighter)\" }, { value: \"musician\", label: \"음악가\\n(Musician)\" }, { value: \"writer\", label: \"작가\\n(Writer)\" }, { value: \"athlete\", label: \"운동선수\\n(Athlete)\" }, { value: \"farmer\", label: \"농부\\n(Farmer)\" }, { value: \"pilot\", label: \"조종사\\n(Pilot)\" }, { value: \"construction worker\", label: \"건설 노동자\\n(Construction Worker)\" }, { value: \"librarian\", label: \"사서\\n(Librarian)\" }, { value: \"barista\", label: \"바리스타\\n(Barista)\" }, { value: \"actor/actress\", label: \"배우\\n(Actor/Actress)\" }, { value: \"dancer\", label: \"댄서\\n(Dancer)\" }, { value: \"detective\", label: \"탐정\\n(Detective)\" }, { value: \"journalist\", label: \"기자\\n(Journalist)\" }, { value: \"photographer\", label: \"사진작가\\n(Photographer)\" }, { value: \"programmer/developer\", label: \"프로그래머/개발자\\n(Programmer/Developer)\" }, { value: \"researcher\", label: \"연구원\\n(Researcher)\" }, { value: \"singer\", label: \"가수\\n(Singer)\" }, { value: \"soldier\", label: \"군인\\n(Soldier)\" }, { value: \"translator\", label: \"번역가\\n(Translator)\" }, { value: \"waiter/waitress\", label: \"웨이터/웨이트리스\\n(Waiter/Waitress)\" }, { value: \"wizard/sorcerer/mage\", label: \"마법사\\n(Wizard/Sorcerer/Mage)\" }, { value: \"knight/warrior\", label: \"기사/전사\\n(Knight/Warrior)\" }, { value: \"king/queen/royalty\", label: \"왕/여왕/왕족\\n(King/Queen/Royalty)\" }, { value: \"adventurer/explorer\", label: \"모험가/탐험가\\n(Adventurer/Explorer)\" }, { value: \"spy/secret agent\", label: \"스파이/비밀 요원\\n(Spy/Secret Agent)\" }, { value: \"pirate\", label: \"해적\\n(Pirate)\" }, { value: \"astronaut\", label: \"우주비행사\\n(Astronaut)\" }, { value: \"cyborg\", label: \"사이보그\\n(Cyborg)\" }, { value: \"robot/android\", label: \"로봇/안드로이드\\n(Robot/Android)\" }, { value: \"alien\", label: \"외계인\\n(Alien)\" },\n      ];\n      const STYLE_OPTIONS = [\n        NONE_OPTION, { value: \"photorealistic\", label: \"사진 같은\\n(Photorealistic)\" }, { value: \"digital painting (e.g. detailed, painterly, speedpaint)\", label: \"디지털 페인팅\\n(Digital Painting)\" }, { value: \"anime style (e.g., Studio Ghibli, Shonen, Magical Girl, 90s retro, modern moe)\", label: \"애니메이션 스타일\\n(Anime Style)\" }, { value: \"fantasy art (e.g., D&D style, epic, high fantasy, dark fantasy, whimsical)\", label: \"판타지 아트\\n(Fantasy Art)\" }, { value: \"sci-fi concept art (e.g., futuristic, dystopian, utopian, cyberpunk, biopunk)\", label: \"SF 컨셉 아트\\n(Sci-fi Concept Art)\" }, { value: \"impressionistic painting (Monet, Renoir style)\", label: \"인상주의풍 회화\\n(Impressionistic Painting)\" }, { value: \"oil painting (classical, modern, abstract, impasto)\", label: \"유화\\n(Oil Painting)\" }, { value: \"watercolor art (delicate, vibrant, wet-on-wet, dry brush)\", label: \"수채화\\n(Watercolor Art)\" }, { value: \"pixel art (e.g., 8-bit, 16-bit, isometric, modern indie)\", label: \"픽셀 아트\\n(Pixel Art)\" }, { value: \"cartoon style (e.g., Disney, Looney Tunes, modern flat, CalArts, rubber hose)\", label: \"카툰 스타일\\n(Cartoon Style)\" }, { value: \"steampunk art (Victorian, mechanical, goggles, gears)\", label: \"스팀펑크 아트\\n(Steampunk Art)\" }, { value: \"gothic art (dark, ornate, moody, macabre)\", label: \"고딕 아트\\n(Gothic Art)\" }, { value: \"ink wash painting (Sumi-e, East Asian calligraphy, monochrome)\", label: \"수묵화\\n(Ink Wash Painting)\" }, { value: \"baroque style painting (dramatic, rich detail, chiaroscuro)\", label: \"바로크 양식 회화\\n(Baroque Style Painting)\" }, { value: \"art nouveau (elegant, decorative, flowing lines, Mucha style)\", label: \"아르누보\\n(Art Nouveau)\" }, { value: \"minimalist vector art (clean, geometric, flat colors)\", label: \"미니멀리스트 벡터 아트\\n(Minimalist Vector Art)\" }, { value: \"concept art sketch (rough, dynamic, exploratory)\", label: \"컨셉 아트 스케치\\n(Concept Art Sketch)\" }, { value: \"graphic novel style (bold lines, paneling effect, dynamic shading)\", label: \"그래픽 노블 스타일\\n(Graphic Novel Style)\" }, { value: \"surrealism (dreamlike, illogical, Dali, Magritte style)\", label: \"초현실주의\\n(Surrealism)\" }, { value: \"cyberpunk art (neon, futuristic, gritty, Blade Runner aesthetic)\", label: \"사이버펑크 아트\\n(Cyberpunk Art)\" }, { value: \"ukiyo-e (Japanese woodblock print, Hokusai style)\", label: \"우키요에\\n(Ukiyo-e)\" }, { value: \"art deco (geometric, luxurious, Roaring Twenties)\", label: \"아르데코\\n(Art Deco)\" }, { value: \"chalk art (pastel, textured, ephemeral)\", label: \"분필 아트\\n(Chalk Art)\" }, { value: \"stained glass window (vibrant colors, lead lines, gothic, tiffany)\", label: \"스테인드 글라스\\n(Stained Glass Window)\" }, { value: \"claymation style (Aardman, tactile, stop-motion look)\", label: \"클레이메이션 스타일\\n(Claymation Style)\" }, { value: \"vintage comic book art (dot shading, bold outlines, retro)\", label: \"빈티지 만화책 아트\\n(Vintage Comic Book Art)\" }, { value: \"children's book illustration (whimsical, colorful, charming)\", label: \"동화 삽화\\n(Children's Book Illustration)\" }, { value: \"sticker art (die-cut, glossy, pop art)\", label: \"스티커 아트\\n(Sticker Art)\" }, { value: \"tarot card art (symbolic, mystical, Rider-Waite style)\", label: \"타로 카드 아트\\n(Tarot Card Art)\" }, { value: \"low poly 3D render (geometric, stylized, retro game look)\", label: \"로우 폴리 3D 렌더\\n(Low Poly 3D Render)\" }, { value: \"vaporwave aesthetic (nostalgic, neon, retro-futuristic, glitch art)\", label: \"베이퍼웨이브 미학\\n(Vaporwave Aesthetic)\" }, { value: \"expressionism (emotional, distorted, bold colors, Munch style)\", label: \"표현주의\\n(Expressionism)\" }, { value: \"cubism (geometric forms, multiple perspectives, Picasso style)\", label: \"입체주의\\n(Cubism)\" }, { value: \"pointillism (Seurat style, dots of color)\", label: \"점묘법\\n(Pointillism)\" }, { value: \"tribal art (patterns, symbolic, indigenous motifs)\", label: \"부족 예술\\n(Tribal Art)\" }, { value: \"daily life snapshot style\", label: \"일상 스냅 사진 스타일\\n(Daily life snapshot style)\" }, { value: \"documentary style\", label: \"다큐멘터리 스타일\\n(Documentary style)\" }, { value: \"CCTV footage style\", label: \"CCTV 화면 스타일\\n(CCTV footage style)\" }, { value: \"blog photo style\", label: \"블로그 사진 스타일\\n(Blog photo style)\" }, { value: \"food photography style\", label: \"음식 사진 스타일\\n(Food photography style)\" }, { value: \"fashion editorial style\", label: \"패션 화보 스타일\\n(Fashion editorial style)\" }, { value: \"vintage film photography (e.g. 35mm, polaroid)\", label: \"빈티지 필름 사진 (35mm, 폴라로이드)\\n(Vintage film photography)\" },\n      ];\n      const ASPECT_RATIO_OPTIONS = [\n        NONE_OPTION, { value: \"1:1\", label: \"정사각형 (1:1)\\n(Square 1:1)\" }, { value: \"16:9\", label: \"가로형 HD (16:9)\\n(Landscape HD 16:9)\" }, { value: \"9:16\", label: \"세로형 스토리 (9:16)\\n(Portrait Story 9:16)\" }, { value: \"4:3\", label: \"클래식 TV (4:3)\\n(Classic TV 4:3)\" }, { value: \"3:2\", label: \"사진 DSLR (3:2)\\n(Photo DSLR 3:2)\" }, { value: \"21:9\", label: \"시네마스코프 (21:9)\\n(Cinemascope 21:9)\" }, { value: \"3:4\", label: \"세로형 사진 (3:4)\\n(Portrait Photo 3:4)\" }, { value: \"2:1\", label: \"파노라마 (2:1)\\n(Panorama 2:1)\" }, { value: \"5:4\", label: \"대형 사진 (5:4)\\n(Large Format Photo 5:4)\" }, { value: \"1.85:1\", label: \"와이드스크린 미국 (1.85:1)\\n(Widescreen US 1.85:1)\" }, { value: \"2.39:1\", label: \"아나모픽 시네마 (2.39:1)\\n(Anamorphic Cinema 2.39:1)\" }, { value: \"1.618:1\", label: \"황금 비율 (~1.618:1)\\n(Golden Ratio ~1.618:1)\" }, { value: \"1:1.414\", label: \"A4 용지 비율 (~1:1.414)\\n(A4 Paper ~1:1.414)\" }, { value: \"3:1\", label: \"초광각 파노라마 (예: 3:1)\\n(Ultra-wide Panoramic 3:1)\" },\n      ];\n      const FRAMING_OPTIONS = [\n        NONE_OPTION, { value: \"full body shot\", label: \"전신샷\\n(Full body shot)\"}, { value: \"medium shot (from waist up)\", label: \"미디엄 샷 (허리 위)\\n(Medium shot)\"}, { value: \"cowboy shot (mid-thigh up)\", label: \"카우보이 샷 (허벅지 중간 위)\\n(Cowboy shot)\"}, { value: \"upper body shot (chest up)\", label: \"상반신 샷 (가슴 위)\\n(Upper body shot)\"}, { value: \"close-up shot (face focused)\", label: \"클로즈업 샷 (얼굴 중심)\\n(Close-up shot)\"}, { value: \"extreme close-up (features like eyes or lips)\", label: \"익스트림 클로즈업 (눈, 입 등 특징)\\n(Extreme close-up)\"}, { value: \"portrait shot (head and shoulders)\", label: \"초상화 샷 (머리와 어깨)\\n(Portrait shot)\"}, { value: \"establishing shot (shows environment, character small)\", label: \"설정 샷 (환경 중심, 인물 작게)\\n(Establishing shot)\"}, { value: \"low angle shot (camera looks up)\", label: \"로우 앵글 샷 (아래에서 위로)\\n(Low angle shot)\"}, { value: \"high angle shot (camera looks down)\", label: \"하이 앵글 샷 (위에서 아래로)\\n(High angle shot)\"}, { value: \"dutch angle shot (tilted camera)\", label: \"더치 앵글 샷 (기울어진 카메라)\\n(Dutch angle shot)\"}, { value: \"over-the-shoulder shot\", label: \"어깨너머 샷\\n(Over-the-shoulder shot)\"}, { value: \"point-of-view shot (POV)\", label: \"1인칭 시점 샷 (POV)\\n(Point-of-view shot)\"}, { value: \"selfie angle\", label: \"셀카 구도\\n(Selfie angle)\"}, { value: \"vlog style shot\", label: \"브이로그 스타일 샷\\n(Vlog style shot)\"}, { value: \"eye-level shot\", label: \"눈높이 샷\\n(Eye-level shot)\"},\n      ];\n\n      const EXPRESSION_SUB_CATEGORY_LIST = Object.values(ExpressionSubCategory).map(val => ({value: val, label: val}));\n      const EXPRESSION_DETAIL_OPTIONS = {\n        [ExpressionSubCategory.HAPPY_JOYFUL]: [\n          NONE_OPTION, { value: \"smiling gently\", label: \"부드럽게 미소짓는\\n(Smiling gently)\" }, { value: \"laughing joyfully, eyes crinkled\", label: \"즐겁게 웃으며 눈가 주름진\\n(Laughing joyfully, eyes crinkled)\" }, { value: \"beaming with pure happiness\", label: \"순수한 행복감에 환하게 웃는\\n(Beaming with pure happiness)\" }, { value: \"grinning mischievously, a playful glint in the eyes\", label: \"장난스럽게 히죽이며 눈 반짝\\n(Grinning mischievously)\" }, { value: \"content and satisfied, a calm smile\", label: \"만족스럽고 흡족한, 차분한 미소\\n(Content and satisfied, calm smile)\" }, { value: \"radiant smile, full of warmth\", label: \"따뜻함 가득한 빛나는 미소\\n(Radiant smile, full of warmth)\" }, { value: \"eyes sparkling with delight\", label: \"기쁨으로 반짝이는 눈\\n(Eyes sparkling with delight)\" }, { value: \"a cheerful, open-mouthed laugh\", label: \"활기차고 입 벌리고 웃는\\n(Cheerful, open-mouthed laugh)\" }, { value: \"exuberant laughter, head thrown back\", label: \"열광적으로 웃으며 고개 젖힌\\n(Exuberant laughter, head thrown back)\" }, { value: \"a shy, sweet smile\", label: \"수줍은, 달콤한 미소\\n(A shy, sweet smile)\" }, { value: \"smirking confidently\", label: \"자신감 있게 히죽이는\\n(Smirking confidently)\" }, { value: \"a subtle, knowing smile\", label: \"미묘하고 안다는 듯한 미소\\n(Subtle, knowing smile)\" }, { value: \"overjoyed expression\", label: \"매우 기뻐하는 표정\\n(Overjoyed expression)\" }, { value: \"ecstatic with joy\", label: \"황홀경에 빠진 듯 기뻐하는\\n(Ecstatic with joy)\" }, { value: \"blissful smile\", label: \"더없이 행복한 미소\\n(Blissful smile)\" }, { value: \"chuckling softly\", label: \"부드럽게 킥킥거리는\\n(Chuckling softly)\" }, { value: \"gleeful expression\", label: \"아주 신난 표정\\n(Gleeful expression)\" }, { value: \"elated and jumping for joy\", label: \"기뻐서 펄쩍 뛰는\\n(Elated and jumping for joy)\" }, { value: \"heartfelt smile of gratitude\", label: \"진심 어린 감사의 미소\\n(Heartfelt smile of gratitude)\" }, { value: \"bright, sunny disposition\", label: \"밝고 명랑한 표정\\n(Bright, sunny disposition)\" }, { value: \"relaxed smile\", label: \"느긋하게 미소짓는\\n(Relaxed smile)\"}, { value: \"peaceful smile\", label: \"평화로운 미소\\n(Peaceful smile)\"},\n        ],\n        [ExpressionSubCategory.SAD_SORROWFUL]: [\n          NONE_OPTION, { value: \"looking melancholic, gazing into the distance\", label: \"우울하게 먼 곳 응시\\n(Looking melancholic, gazing)\" }, { value: \"shedding a single, glistening tear\", label: \"반짝이는 눈물 한 방울\\n(Shedding a single tear)\" }, { value: \"with a sorrowful, downturned mouth\", label: \"애처롭게 처진 입매\\n(Sorrowful, downturned mouth)\" }, { value: \"visibly heartbroken, eyes welling up\", label: \"상심하여 눈물 그렁그렁\\n(Visibly heartbroken, eyes welling)\" }, { value: \"a pained expression, enduring suffering\", label: \"고통을 견디는 표정\\n(A pained expression, enduring)\" }, { value: \"eyes filled with unshed tears\", label: \"눈물 가득 고인 눈\\n(Eyes filled with unshed tears)\" }, { value: \"gloomy and dejected\", label: \"침울하고 낙담한\\n(Gloomy and dejected)\" }, { value: \"quietly crying, shoulders shaking\", label: \"조용히 울며 어깨 들썩이는\\n(Quietly crying, shoulders shaking)\" }, { value: \"expression of deep grief\", label: \"깊은 슬픔의 표정\\n(Expression of deep grief)\" }, { value: \"forlorn look, feeling abandoned\", label: \"쓸쓸하고 버려진 듯한 표정\\n(Forlorn look, abandoned)\" }, { value: \"lips trembling with sadness\", label: \"슬픔으로 입술을 떠는\\n(Lips trembling with sadness)\" }, { value: \"despairing gaze, losing hope\", label: \"절망적인 시선, 희망 잃은\\n(Despairing gaze, losing hope)\" }, { value: \"somber and downcast\", label: \"침통하고 풀이 죽은\\n(Somber and downcast)\" }, { value: \"mournful expression\", label: \"애도하는 표정\\n(Mournful expression)\" }, { value: \"eyes reflecting deep sorrow\", label: \"깊은 슬픔이 비치는 눈\\n(Eyes reflecting deep sorrow)\" }, { value: \"heavy-hearted look\", label: \"무거운 마음의 표정\\n(Heavy-hearted look)\" }, { value: \"tears streaming down face\", label: \"얼굴에 눈물이 흐르는\\n(Tears streaming down face)\" }, { value: \"expression of regret\", label: \"후회하는 표정\\n(Expression of regret)\" }, { value: \"anguished cry\", label: \"고뇌에 찬 울부짖음\\n(Anguished cry)\" }, { value: \"slightly disappointed\", label: \"약간 실망한\\n(Slightly disappointed)\"}, { value: \"bored expression\", label: \"지루해하는 표정\\n(Bored expression)\"},\n        ],\n        [ExpressionSubCategory.ANGRY_FURIOUS]: [\n          NONE_OPTION, { value: \"frowning deeply, eyebrows knitted\", label: \"잔뜩 찡그린, 미간 찌푸린\\n(Frowning deeply, eyebrows knitted)\" }, { value: \"with a furious glare, eyes narrowed\", label: \"격노한 시선, 눈 가늘게 뜬\\n(Furious glare, eyes narrowed)\" }, { value: \"lips pressed tightly in anger\", label: \"분노로 입술 꽉 다문\\n(Lips pressed tightly in anger)\" }, { value: \"seething with suppressed rage, jaw clenched\", label: \"억눌린 분노, 턱 악문\\n(Seething with suppressed rage)\" }, { value: \"snarling in contempt\", label: \"경멸하며 으르렁거리는\\n(Snarling in contempt)\" }, { value: \"eyes burning with fury\", label: \"분노로 불타는 눈\\n(Eyes burning with fury)\" }, { value: \"face flushed with anger\", label: \"분노로 얼굴 붉어진\\n(Face flushed with anger)\" }, { value: \"a cold, hard stare of disapproval\", label: \"차갑고 단호한 불만의 시선\\n(Cold, hard stare of disapproval)\" }, { value: \"indignant expression, feeling wronged\", label: \"분개한 표정, 억울함\\n(Indignant expression, wronged)\" }, { value: \"about to shout in rage\", label: \"분노로 소리치기 직전\\n(About to shout in rage)\" }, { value: \"menacing look, threatening\", label: \"위협적인 표정, 협박하는 듯\\n(Menacing look, threatening)\" }, { value: \"irritated and scowling\", label: \"짜증나서 얼굴 찌푸린\\n(Irritated and scowling)\" }, { value: \"veins popping on forehead from anger\", label: \"분노로 이마에 핏대 선\\n(Veins popping from anger)\" }, { value: \"baring teeth in aggression\", label: \"공격적으로 이를 드러낸\\n(Baring teeth in aggression)\" }, { value: \"a look of utter outrage\", label: \"극도의 격분 표정\\n(Look of utter outrage)\" }, { value: \"stormy expression\", label: \"폭풍 같은 표정\\n(Stormy expression)\" }, { value: \"hostile glare\", label: \"적대적인 시선\\n(Hostile glare)\" }, { value: \"resentful look\", label: \"분개하는 표정\\n(Resentful look)\" }, { value: \"annoyed expression\", label: \"짜증난 표정\\n(Annoyed expression)\" },\n        ],\n        [ExpressionSubCategory.SURPRISED_SHOCKED]: [\n          NONE_OPTION, { value: \"eyes wide with surprise, mouth agape\", label: \"놀라서 눈 휘둥그레, 입 벌린\\n(Eyes wide with surprise, mouth agape)\" }, { value: \"jaw slightly dropped in disbelief\", label: \"믿기지 않아 입 살짝 벌린\\n(Jaw slightly dropped in disbelief)\" }, { value: \"looking utterly astonished\", label: \"완전히 경악한 표정\\n(Looking utterly astonished)\" }, { value: \"flabbergasted, hand covering mouth\", label: \"어안 벙벙, 손으로 입 가린\\n(Flabbergasted, hand covering mouth)\" }, { value: \"a sudden look of realization, eyes lighting up\", label: \"갑자기 깨달은 표정, 눈 반짝\\n(Sudden look of realization, eyes light up)\" }, { value: \"eyebrows raised high in shock\", label: \"충격으로 눈썹 치켜올린\\n(Eyebrows raised high in shock)\" }, { value: \"startled expression, jumping back slightly\", label: \"화들짝 놀란 표정, 살짝 뒷걸음질\\n(Startled expression, jumping back)\" }, { value: \"momentarily speechless from awe\", label: \"경외감에 순간 말을 잃은\\n(Momentarily speechless from awe)\" }, { value: \"wide-eyed wonder at a magical sight\", label: \"마법 같은 광경에 경이로운 눈빛\\n(Wide-eyed wonder at magical sight)\" }, { value: \"taken aback by an unexpected event\", label: \"예상치 못한 일에 깜짝 놀란\\n(Taken aback by unexpected event)\" }, { value: \"frozen in surprise\", label: \"놀라서 얼어붙은\\n(Frozen in surprise)\" }, { value: \"gasping in amazement\", label: \"경탄하며 숨을 헐떡이는\\n(Gasping in amazement)\" }, { value: \"eyes popping out (cartoonish)\", label: \"눈이 튀어나올 듯 (만화적)\\n(Eyes popping out (cartoonish))\" }, { value: \"a look of bewilderment\", label: \"어리둥절한 표정\\n(Look of bewilderment)\" }, { value: \"stunned silence\", label: \"충격으로 할 말을 잃은\\n(Stunned silence)\" }, { value: \"mildly surprised\", label: \"살짝 놀란\\n(Mildly surprised)\"},\n        ],\n        [ExpressionSubCategory.THOUGHTFUL_SERIOUS]: [\n          NONE_OPTION, { value: \"deep in thought, chin resting on hand\", label: \"생각 잠겨 손으로 턱 괸\\n(Deep in thought, chin on hand)\" }, { value: \"with a serious, focused gaze, lips pursed\", label: \"진지하고 집중된 시선, 입 오므린\\n(Serious, focused gaze, lips pursed)\" }, { value: \"pensive expression, looking downwards thoughtfully\", label: \"수심 잠겨 아래를 사려 깊게\\n(Pensive expression, looking downwards)\" }, { value: \"analytical look, scrutinizing something intently\", label: \"무언가를 꼼꼼히 살피는 분석적 표정\\n(Analytical look, scrutinizing)\" }, { value: \"contemplative and calm, reflecting deeply\", label: \"사색적이고 차분한, 깊이 성찰\\n(Contemplative and calm, reflecting)\" }, { value: \"determined expression, eyes set on a goal\", label: \"단호한 표정, 목표에 시선 고정\\n(Determined expression, eyes on goal)\" }, { value: \"concentrating intently on a complex task\", label: \"복잡한 작업에 열중하여 집중\\n(Concentrating intently on task)\" }, { value: \"a grave and solemn look, understanding the weight\", label: \"근엄하고 엄숙한 표정, 무게감 이해\\n(Grave and solemn look, understanding)\" }, { value: \"lost in thought, oblivious to surroundings\", label: \"생각에 빠져 주변을 의식 못함\\n(Lost in thought, oblivious)\" }, { value: \"resolute and unwavering, firm in conviction\", label: \"결연하고 흔들림 없는, 확고한 신념\\n(Resolute and unwavering, firm)\" }, { value: \"introspective gaze\", label: \"자기 성찰적인 시선\\n(Introspective gaze)\" }, { value: \"philosophical expression\", label: \"철학적인 표정\\n(Philosophical expression)\" }, { value: \"calculating and strategic look\", label: \"계산적이고 전략적인 표정\\n(Calculating and strategic look)\" }, { value: \"listening intently with a serious face\", label: \"진지한 얼굴로 열심히 듣는\\n(Listening intently, serious face)\" }, { value: \"pondering a difficult question\", label: \"어려운 질문을 숙고하는\\n(Pondering a difficult question)\" }, { value: \"deeply thinking about something\", label: \"무언가에 골똘히 생각하는\\n(Deeply thinking about something)\"}, { value: \"contemplating daily worries\", label: \"일상적인 고민을 하는\\n(Contemplating daily worries)\"},\n        ],\n        [ExpressionSubCategory.NEUTRAL]: [\n          NONE_OPTION, { value: \"neutral expression, looking directly ahead\", label: \"무표정, 정면 응시\\n(Neutral expression, looking ahead)\" }, { value: \"calm and composed, observing quietly\", label: \"차분하고 침착, 조용히 관찰\\n(Calm and composed, observing)\" }, { value: \"stoic, unreadable expression, betraying no emotion\", label: \"금욕적, 읽을 수 없는 표정\\n(Stoic, unreadable expression)\" }, { value: \"a blank, impassive face\", label: \"텅 빈, 아무 감정 없는 얼굴\\n(A blank, impassive face)\" }, { value: \"patiently waiting, expressionless\", label: \"끈기 있게 기다리는, 무표정\\n(Patiently waiting, expressionless)\" }, { value: \"serene and untroubled, at peace\", label: \"고요하고 평온한, 평화로운\\n(Serene and untroubled, at peace)\" }, { value: \"attentive but emotionless, focused\", label: \"주의 깊지만 감정 없는, 집중\\n(Attentive but emotionless, focused)\" }, { value: \"plain expression, simple and unadorned\", label: \"꾸밈없는 표정, 단순 소박\\n(Plain expression, simple)\" }, { value: \"dispassionate look\", label: \"냉정한 표정\\n(Dispassionate look)\" }, { value: \"objective and detached gaze\", label: \"객관적이고 초연한 시선\\n(Objective and detached gaze)\" }, { value: \"mildly curious but otherwise neutral\", label: \"약간 호기심 있지만 중립적\\n(Mildly curious but neutral)\" }, { value: \"resting face\", label: \"편안한 얼굴 (무표정)\\n(Resting face)\" }, { value: \"indifferent expression\", label: \"무심한 표정\\n(Indifferent expression)\"},\n        ],\n        [ExpressionSubCategory.FEARFUL_ANXIOUS]: [\n          NONE_OPTION, { value: \"eyes wide with fear, pupils dilated\", label: \"두려움에 눈 크게, 동공 확장\\n(Eyes wide with fear, pupils dilated)\" }, { value: \"trembling with anxiety, looking around nervously\", label: \"불안감에 떨며 초조하게 두리번\\n(Trembling with anxiety, looking around)\" }, { value: \"a look of sheer terror, face pale\", label: \"순전한 공포, 창백한 얼굴\\n(Look of sheer terror, face pale)\" }, { value: \"nervously biting lip, fidgeting\", label: \"초조하게 입술 깨물며 꼼지락\\n(Nervously biting lip, fidgeting)\" }, { value: \"sweating and pale with fright\", label: \"공포에 질려 땀, 창백\\n(Sweating and pale with fright)\" }, { value: \"worried and apprehensive, expecting something bad\", label: \"걱정하고 염려, 나쁜 일 예상\\n(Worried and apprehensive, expecting bad)\" }, { value: \"panicked expression, eyes darting\", label: \"공황 상태, 눈알 두리번\\n(Panicked expression, eyes darting)\" }, { value: \"hesitant and fearful, reluctant to proceed\", label: \"망설이며 두려워, 나아가길 주저\\n(Hesitant and fearful, reluctant)\" }, { value: \"cowering in fear\", label: \"두려움에 움츠린\\n(Cowering in fear)\" }, { value: \"a silent scream of terror\", label: \"공포의 소리 없는 비명\\n(Silent scream of terror)\" }, { value: \"chattering teeth from fear\", label: \"두려움으로 이가 딱딱거리는\\n(Chattering teeth from fear)\" }, { value: \"look of impending doom\", label: \"임박한 파멸의 표정\\n(Look of impending doom)\" }, { value: \"eyes showing deep unease\", label: \"깊은 불안감이 드러나는 눈\\n(Eyes showing deep unease)\" }, { value: \"slightly nervous\", label: \"약간 긴장한\\n(Slightly nervous)\"},\n        ],\n        [ExpressionSubCategory.PLAYFUL_MISCHIEVOUS]: [\n          NONE_OPTION, { value: \"winking slyly, a secret shared\", label: \"교활하게 윙크, 비밀 공유\\n(Winking slyly, secret shared)\" }, { value: \"sticking tongue out playfully\", label: \"장난스럽게 혀 내미는\\n(Sticking tongue out playfully)\" }, { value: \"a cheeky grin, up to no good\", label: \"까불거리는 미소, 못된 장난 궁리\\n(A cheeky grin, up to no good)\" }, { value: \"eyes dancing with amusement and mischief\", label: \"재미와 장난기로 눈 반짝\\n(Eyes dancing with amusement)\" }, { value: \"a teasing smile, inviting play\", label: \"놀리는 듯한 미소, 놀자고 유혹\\n(A teasing smile, inviting play)\" }, { value: \"poking fun with a lighthearted expression\", label: \"가벼운 표정으로 농담하는\\n(Poking fun, lighthearted)\" }, { value: \"ready for some fun, eager and impish expression\", label: \"즐길 준비, 열정적이고 장난기 어린\\n(Ready for fun, eager and impish)\" }, { value: \"uproarious laughter at a practical joke\", label: \"짓궂은 장난에 배꼽 빠지게 웃는\\n(Uproarious laughter at joke)\"}, { value: \"suppressing a giggle\", label: \"웃음을 참는\\n(Suppressing a giggle)\" }, { value: \"a playful pout\", label: \"장난스럽게 입을 삐죽 내민\\n(A playful pout)\" }, { value: \"eyes full of impish delight\", label: \"장난기 가득한 기쁨의 눈빛\\n(Eyes full of impish delight)\" }, { value: \"conspiratorial whisper and a grin\", label: \"음모를 꾸미는 듯한 속삭임과 미소\\n(Conspiratorial whisper and grin)\" }, { value: \"lightly joking expression\", label: \"가볍게 농담하는 표정\\n(Lightly joking expression)\"},\n        ],\n        [ExpressionSubCategory.LOVE_AFFECTION]: [\n          NONE_OPTION, { value: \"gazing lovingly with soft eyes\", label: \"부드러운 눈으로 사랑스럽게 응시\\n(Gazing lovingly, soft eyes)\" }, { value: \"a gentle, affectionate smile\", label: \"온화하고 애정 어린 미소\\n(Gentle, affectionate smile)\" }, { value: \"eyes full of adoration\", label: \"흠모로 가득 찬 눈\\n(Eyes full of adoration)\" }, { value: \"blowing a kiss\", label: \"키스를 날리는\\n(Blowing a kiss)\" }, { value: \"a warm, heartfelt expression of love\", label: \"따뜻하고 진심 어린 사랑의 표현\\n(Warm, heartfelt expression of love)\" }, { value: \"smiling tenderly\", label: \"부드럽게 미소짓는\\n(Smiling tenderly)\" }, { value: \"yearning look\", label: \"갈망하는 표정\\n(Yearning look)\" }, { value: \"blushing shyly with affection\", label: \"애정으로 수줍게 얼굴 붉히는\\n(Blushing shyly with affection)\" }, { value: \"coy smile\", label: \"수줍은 미소\\n(Coy smile)\" }, { value: \"eyes shining with romantic interest\", label: \"낭만적 관심으로 빛나는 눈\\n(Eyes shining with romantic interest)\" }, { value: \"caring look\", label: \"다정한 표정\\n(Caring look)\"},\n        ],\n        [ExpressionSubCategory.CONFIDENT_PROUD]: [\n          NONE_OPTION, { value: \"standing tall with a proud smile\", label: \"자랑스러운 미소로 당당히 선\\n(Standing tall, proud smile)\" }, { value: \"a confident smirk, self-assured\", label: \"자신감 넘치는 히죽임, 확신에 찬\\n(Confident smirk, self-assured)\" }, { value: \"eyes reflecting strong self-belief\", label: \"강한 자신감이 비치는 눈\\n(Eyes reflecting strong self-belief)\" }, { value: \"head held high with dignity\", label: \"위엄 있게 고개를 든\\n(Head held high with dignity)\" }, { value: \"a look of quiet accomplishment\", label: \"조용한 성취감의 표정\\n(Look of quiet accomplishment)\" }, { value: \"assertive gaze\", label: \"단호한 시선\\n(Assertive gaze)\" }, { value: \"smug expression\", label: \"우쭐대는 표정\\n(Smug expression)\" }, { value: \"radiating self-confidence\", label: \"자신감을 뿜어내는\\n(Radiating self-confidence)\" }, { value: \"a determined and bold look\", label: \"단호하고 대담한 표정\\n(Determined and bold look)\" }, { value: \"looking triumphant\", label: \"승리에 찬 표정\\n(Looking triumphant)\" }, { value: \"self-satisfied smile\", label: \"자기만족의 미소\\n(Self-satisfied smile)\"},\n        ],\n        [ExpressionSubCategory.DAILY_LIFE_EXPRESSIONS]: [\n          NONE_OPTION, { value: \"ordinary daily expression\", label: \"평범한 일상의 표정\\n(Ordinary daily expression)\"}, { value: \"spacing out while commuting\", label: \"출퇴근길 멍한 표정\\n(Spacing out while commuting)\"}, { value: \"slightly tired after work\", label: \"퇴근 후 약간 지친 표정\\n(Slightly tired after work)\"}, { value: \"focused while reading a book\", label: \"책 읽으며 집중한 표정\\n(Focused while reading a book)\"}, { value: \"relaxed while watching TV\", label: \"TV 보며 편안한 표정\\n(Relaxed while watching TV)\"}, { value: \"yawning in the morning\", label: \"아침에 하품하는 표정\\n(Yawning in the morning)\"}, { value: \"listening to music with enjoyment\", label: \"음악 감상하며 즐거운 표정\\n(Enjoying music)\"}, { value: \"contemplating what to eat\", label: \"무엇을 먹을지 고민하는 표정\\n(Contemplating what to eat)\"}, { value: \"browsing smartphone with interest\", label: \"스마트폰 흥미롭게 보는 표정\\n(Browsing smartphone with interest)\"}, { value: \"waiting for coffee, looking expectant\", label: \"커피 기다리며 기대하는 표정\\n(Waiting for coffee, expectant)\"},\n        ],\n      };\n      const ACTION_SUB_CATEGORY_LIST = Object.values(ActionSubCategory).map(val => ({value: val, label: val}));\n      const ACTION_DETAIL_OPTIONS = {\n        [ActionSubCategory.STATIC_POSES]: [\n          NONE_OPTION, { value: \"standing confidently, hands on hips\", label: \"자신감 있게 서서 허리 손\\n(Standing confidently, hands on hips)\" }, { value: \"sitting gracefully on a throne, regal posture\", label: \"왕좌에 우아하게, 위엄 있는 자세\\n(Sitting gracefully on throne, regal)\" }, { value: \"leaning casually against a weathered brick wall\", label: \"낡은 벽돌 벽에 무심하게 기댄\\n(Leaning casually on brick wall)\" }, { value: \"arms crossed, looking contemplative and serious\", label: \"팔짱 끼고 생각 잠긴 듯 진지\\n(Arms crossed, contemplative serious)\" }, { value: \"kneeling respectfully, head bowed slightly\", label: \"공손하게 무릎 꿇고 고개 살짝\\n(Kneeling respectfully, head bowed)\" }, { value: \"reclining elegantly on a chaise lounge, relaxed\", label: \"긴 의자에 우아하게, 편안한\\n(Reclining elegantly on chaise lounge)\" }, { value: \"posing dramatically with one hand outstretched, palm up\", label: \"한 손 뻗고 극적 포즈, 손바닥 위로\\n(Posing dramatically, hand outstretched)\" }, { value: \"standing with feet shoulder-width apart, alert and ready\", label: \"발 어깨 너비, 경계하며 준비된\\n(Standing alert, feet shoulder-width)\" }, { value: \"meditating in a lotus position, serene expression\", label: \"연꽃 자세로 명상, 고요한 표정\\n(Meditating in lotus position, serene)\" }, { value: \"profile view, gazing into the horizon with hope\", label: \"옆모습, 희망 안고 수평선 응시\\n(Profile view, gazing into horizon)\" }, { value: \"silhouetted against a bright sunset or moon\", label: \"밝은 석양/달 등지고 실루엣\\n(Silhouetted against sunset/moon)\" }, { value: \"heroic stance, chest out, looking upwards\", label: \"영웅적 자세, 가슴 펴고 위를 봄\\n(Heroic stance, chest out, upwards)\" }, { value: \"lounging casually on a sofa\", label: \"소파에 편안하게 기대앉은\\n(Lounging casually on sofa)\" }, { value: \"power pose, feet planted firmly, looking determined\", label: \"파워 포즈, 발 굳건히, 단호한\\n(Power pose, feet firm, determined)\" }, { value: \"contrapposto pose, weight shifted to one leg\", label: \"콘트라포스토 자세, 한쪽 다리에 체중\\n(Contrapposto pose, weight shifted)\" }, { value: \"crouching low to the ground, observant\", label: \"땅에 낮게 웅크린, 관찰하는\\n(Crouching low, observant)\" }, { value: \"hands clasped behind back, thoughtful\", label: \"손 등 뒤로 깍지, 생각에 잠긴\\n(Hands clasped behind back)\" }, { value: \"one hand resting on chin, pondering\", label: \"한 손 턱에, 숙고하는\\n(One hand on chin, pondering)\" }, { value: \"standing still looking out window\", label: \"가만히 서서 창밖을 보는\\n(Standing still looking out window)\"}, { value: \"sitting at a table\", label: \"테이블에 앉아있는\\n(Sitting at a table)\"}, { value: \"lying in bed looking at ceiling\", label: \"침대에 누워 천장 보는\\n(Lying in bed looking at ceiling)\"},\n        ],\n        [ActionSubCategory.DYNAMIC_MOVEMENT]: [\n          NONE_OPTION, { value: \"walking purposefully through a crowded street, focused\", label: \"붐비는 거리, 목표 향해 집중\\n(Walking purposefully, crowded street)\" }, { value: \"running swiftly through a sun-dappled forest, agile\", label: \"햇살 비치는 숲, 민첩하게 달리는\\n(Running swiftly, sun-dappled forest)\" }, { value: \"jumping gracefully in mid-air, like a ballet dancer\", label: \"발레리나처럼 공중 우아하게 점프\\n(Jumping gracefully, ballet dancer)\" }, { value: \"dancing energetically to a vibrant rhythm, joyful\", label: \"활기찬 리듬에 힘차게 춤, 즐거운\\n(Dancing energetically, vibrant rhythm)\" }, { value: \"sprinting at full speed, determined to win\", label: \"전속력 질주, 이기려는 의지\\n(Sprinting full speed, determined)\" }, { value: \"leaping over an obstacle with ease\", label: \"장애물을 가뿐히 뛰어넘는\\n(Leaping over obstacle with ease)\" }, { value: \"twirling in a flowing gown, creating motion blur\", label: \"흐르는 드레스 입고 회전, 모션 블러\\n(Twirling in flowing gown, motion blur)\" }, { value: \"swimming powerfully in clear turquoise water\", label: \"맑은 청록색 물, 힘차게 수영\\n(Swimming powerfully, clear water)\" }, { value: \"falling through the air, arms outstretched\", label: \"공중에서 떨어지는, 팔 벌린\\n(Falling through air, arms outstretched)\" }, { value: \"riding a galloping horse across a field\", label: \"질주하는 말 타고 들판 가로지르는\\n(Riding galloping horse across field)\" }, { value: \"skateboarding down a ramp, performing a trick\", label: \"경사로 스케이트보드, 묘기\\n(Skateboarding down ramp, trick)\" }, { value: \"flying through the sky with wings or powers\", label: \"날개/능력으로 하늘 나는\\n(Flying through sky, wings/powers)\" }, { value: \"sliding down a snowy hill on a sled\", label: \"눈 덮인 언덕 썰매 타고 내려오는\\n(Sliding down snowy hill on sled)\" }, { value: \"surfing a large ocean wave\", label: \"큰 파도를 서핑하는\\n(Surfing a large ocean wave)\" }, { value: \"climbing a steep rock face\", label: \"가파른 암벽 등반하는\\n(Climbing steep rock face)\" }, { value: \"somersaulting in mid-air\", label: \"공중제비 도는\\n(Somersaulting in mid-air)\" }, { value: \"spinning rapidly, creating a blur\", label: \"빠르게 회전하며 잔상 만드는\\n(Spinning rapidly, creating blur)\" }, { value: \"walking quickly\", label: \"빠르게 걷는\\n(Walking quickly)\"}, { value: \"going up/down stairs\", label: \"계단을 오르내리는\\n(Going up/down stairs)\"}, { value: \"light jogging\", label: \"가볍게 조깅하는\\n(Light jogging)\"},\n        ],\n        [ActionSubCategory.INTERACTION_OBJECT]: [\n          NONE_OPTION, { value: \"reading an ancient, leather-bound book by candlelight\", label: \"촛불 아래 고대 가죽 책 읽는\\n(Reading ancient book by candlelight)\" }, { value: \"holding a mysterious, glowing orb that pulses with light\", label: \"빛나는 신비로운 구체 들고 있는\\n(Holding mysterious glowing orb)\" }, { value: \"writing intently with a feathered quill on parchment\", label: \"양피지에 깃펜으로 열심히 글 쓰는\\n(Writing with quill on parchment)\" }, { value: \"playing a haunting melody on a violin in a dark room\", label: \"어두운 방, 바이올린 연주\\n(Playing haunting melody on violin)\" }, { value: \"examining a delicate flower with a magnifying glass\", label: \"돋보기로 섬세한 꽃 살펴보는\\n(Examining flower with magnifying glass)\" }, { value: \"drinking from a rustic wooden cup, thoughtful\", label: \"소박한 나무 잔, 생각에 잠겨\\n(Drinking from rustic wooden cup)\" }, { value: \"painting on a canvas with focused expression, art studio\", label: \"캔버스에 그림, 집중된 표정, 화실\\n(Painting on canvas, focused, studio)\" }, { value: \"sculpting clay into a lifelike figure\", label: \"점토로 실물 같은 형상 빚는\\n(Sculpting clay into lifelike figure)\" }, { value: \"using a futuristic holographic interface with glowing hands\", label: \"미래형 홀로그램 인터페이스 사용\\n(Using futuristic holographic interface)\" }, { value: \"sharpening a gleaming sword with a whetstone\", label: \"빛나는 검을 숫돌로 가는\\n(Sharpening gleaming sword)\" }, { value: \"unlocking an ornate, ancient chest with a key\", label: \"화려한 고대 상자 열쇠로 여는\\n(Unlocking ornate ancient chest)\" }, { value: \"sipping tea from a delicate porcelain cup\", label: \"섬세한 도자기 컵으로 차 마시는\\n(Sipping tea from porcelain cup)\" }, { value: \"typing furiously on a glowing keyboard\", label: \"빛나는 키보드 맹렬히 타이핑\\n(Typing furiously on glowing keyboard)\" }, { value: \"adjusting spectacles while reading a scroll\", label: \"두루마리 읽으며 안경 고쳐 쓰는\\n(Adjusting spectacles, reading scroll)\" }, { value: \"holding a lantern aloft in a dark cave\", label: \"어두운 동굴 속 랜턴 높이 든\\n(Holding lantern in dark cave)\" }, { value: \"stirring a bubbling cauldron with a wooden spoon\", label: \"나무 숟가락으로 끓는 솥 젓는\\n(Stirring bubbling cauldron)\" }, { value: \"offering a glowing apple\", label: \"빛나는 사과를 건네는\\n(Offering a glowing apple)\" }, { value: \"using a smartphone\", label: \"스마트폰을 사용하는\\n(Using a smartphone)\"}, { value: \"working on a laptop\", label: \"노트북으로 작업하는\\n(Working on a laptop)\"}, { value: \"pressing a TV remote\", label: \"TV 리모컨을 누르는\\n(Pressing a TV remote)\"}, { value: \"carrying a bag\", label: \"가방을 드는\\n(Carrying a bag)\"}, { value: \"opening an umbrella\", label: \"우산을 펴는\\n(Opening an umbrella)\"}, { value: \"holding a coffee cup\", label: \"커피 컵을 들고 있는\\n(Holding a coffee cup)\"},\n        ],\n        [ActionSubCategory.MAGICAL_FANTASY]: [\n          NONE_OPTION, { value: \"casting a powerful spell, hands glowing with arcane energy\", label: \"강력한 마법 시전, 손에 비전 에너지\\n(Casting powerful spell, arcane energy)\" }, { value: \"wielding a legendary sword that hums with ancient power\", label: \"전설의 검 휘두르며 고대 힘 진동\\n(Wielding legendary sword, ancient power)\" }, { value: \"summoning a majestic mythical creature (e.g., dragon, phoenix, griffin)\", label: \"웅장한 신화 생물 소환 (용, 불사조)\\n(Summoning majestic mythical creature)\" }, { value: \"levitating slightly off the ground, surrounded by a faint shimmering aura\", label: \"땅에서 살짝 떠오르며 희미한 오라\\n(Levitating slightly, shimmering aura)\" }, { value: \"conjuring swirling flames in the palm of a hand\", label: \"손바닥에 소용돌이치는 불꽃 생성\\n(Conjuring swirling flames in palm)\" }, { value: \"opening a shimmering portal to another dimension or world\", label: \"다른 차원/세계로 빛나는 포털 여는\\n(Opening shimmering portal)\" }, { value: \"communicating telepathically with an ancient, wise animal\", label: \"고대 현명한 동물과 텔레파시 소통\\n(Telepathically communicating with animal)\" }, { value: \"healing a wounded creature with glowing, gentle hands\", label: \"빛나는 손으로 상처 입은 생물 치유\\n(Healing wounded creature, glowing hands)\" }, { value: \"transforming into a powerful animal or mythical beast\", label: \"강력한 동물/신화 야수로 변신\\n(Transforming into animal/beast)\" }, { value: \"reading prophecies from ancient, glowing runes or crystals\", label: \"고대 빛나는 룬/수정 예언 읽는\\n(Reading prophecies from runes/crystals)\" }, { value: \"weaving illusions with intricate hand gestures\", label: \"복잡한 손짓으로 환상 엮는\\n(Weaving illusions with hand gestures)\" }, { value: \"channeling lightning from a stormy sky\", label: \"폭풍우 치는 하늘에서 번개 유도\\n(Channeling lightning from stormy sky)\" }, { value: \"controlling plants and nature with a gesture\", label: \"몸짓으로 식물과 자연 조종\\n(Controlling plants with gesture)\" }, { value: \"wearing an amulet that deflects magical attacks\", label: \"마법 공격 막는 부적 착용\\n(Wearing amulet deflecting magic)\" }, { value: \"drawing power from the moon or stars\", label: \"달/별에서 힘을 끌어오는\\n(Drawing power from moon/stars)\" },\n        ],\n        [ActionSubCategory.DAILY_LIFE]: [\n          NONE_OPTION, { value: \"sipping tea thoughtfully by a rain-streaked window\", label: \"빗줄기 창가, 생각 잠겨 차 마시는\\n(Sipping tea by rain-streaked window)\" }, { value: \"looking out a window at a bustling cityscape, contemplative\", label: \"창밖 붐비는 도시, 사색에 잠긴\\n(Looking out window at cityscape)\" }, { value: \"engaged in an animated conversation with a friend at a cafe\", label: \"카페 친구와 활기찬 대화\\n(Animated conversation at cafe)\" }, { value: \"working diligently on a laptop in a cozy, book-filled study\", label: \"책 가득한 서재, 노트북 작업\\n(Working on laptop in cozy study)\" }, { value: \"cooking a delicious meal in a sunlit, rustic kitchen\", label: \"햇볕 드는 주방, 맛있는 요리\\n(Cooking meal in sunlit kitchen)\" }, { value: \"strolling leisurely through a park on a sunny autumn day\", label: \"화창한 가을날 공원 한가로이 산책\\n(Strolling through park, autumn day)\" }, { value: \"laughing heartily with friends around a dinner table\", label: \"식탁 친구들과 진심으로 웃는\\n(Laughing with friends at dinner)\" }, { value: \"listening to music with headphones, eyes closed, lost in melody\", label: \"헤드폰 음악 감상, 눈 감고 멜로디에\\n(Listening to music, eyes closed)\" }, { value: \"tending to plants in a small, vibrant window garden\", label: \"작고 활기찬 창가 정원 식물 돌보는\\n(Tending plants in window garden)\" }, { value: \"enjoying a quiet moment of reflection on a park bench\", label: \"공원 벤치, 조용히 사색 즐기는\\n(Quiet reflection on park bench)\" }, { value: \"reading a newspaper on a subway train\", label: \"지하철에서 신문 읽는\\n(Reading newspaper on subway)\" }, { value: \"walking a dog in the park\", label: \"공원에서 개 산책시키는\\n(Walking dog in park)\" }, { value: \"shopping for groceries at a local market\", label: \"지역 시장에서 식료품 쇼핑\\n(Shopping for groceries at market)\" }, { value: \"playing a board game with family\", label: \"가족과 보드게임 하는\\n(Playing board game with family)\" }, { value: \"riding a bicycle down a tree-lined street\", label: \"가로수길 자전거 타는\\n(Riding bicycle down street)\" }, { value: \"attending an online meeting\", label: \"온라인 회의 참여하는\\n(Attending an online meeting)\"}, { value: \"receiving food delivery\", label: \"음식 배달받는\\n(Receiving food delivery)\"}, { value: \"opening a delivery box\", label: \"택배 상자 여는\\n(Opening a delivery box)\"}, { value: \"using public transportation\", label: \"대중교통 이용하는\\n(Using public transportation)\"}, { value: \"using an ATM\", label: \"은행 ATM 사용하는\\n(Using an ATM)\"}, { value: \"texting on a phone\", label: \"휴대폰으로 문자 보내는\\n(Texting on a phone)\"}, { value: \"taking a selfie\", label: \"셀카 찍는\\n(Taking a selfie)\"}, { value: \"browsing social media\", label: \"SNS 탐색하는\\n(Browsing social media)\"},\n        ],\n        [ActionSubCategory.HOUSEHOLD_CHORES]: [\n          NONE_OPTION, { value: \"washing dishes at the kitchen sink\", label: \"부엌 싱크대에서 설거지하는\\n(Washing dishes at kitchen sink)\"}, { value: \"vacuuming the living room carpet\", label: \"거실 카펫 진공청소기로 청소하는\\n(Vacuuming living room carpet)\"}, { value: \"doing laundry, loading washing machine\", label: \"세탁하며 세탁기에 빨랫감 넣는\\n(Doing laundry, loading machine)\"}, { value: \"hanging clothes out to dry\", label: \"빨래 너는\\n(Hanging clothes out to dry)\"}, { value: \"ironing clothes on an ironing board\", label: \"다리미판 위에서 옷 다리는\\n(Ironing clothes on board)\"}, { value: \"cooking on a stove\", label: \"가스레인지/인덕션 위에서 요리하는\\n(Cooking on a stove)\"}, { value: \"setting the dinner table\", label: \"저녁 식탁 차리는\\n(Setting the dinner table)\"}, { value: \"taking out the trash/recycling\", label: \"쓰레기/재활용품 버리러 가는\\n(Taking out trash/recycling)\"}, { value: \"watering houseplants\", label: \"집 안 화분에 물 주는\\n(Watering houseplants)\"}, { value: \"sweeping the floor with a broom\", label: \"빗자루로 바닥 쓰는\\n(Sweeping floor with broom)\"}, { value: \"making the bed\", label: \"침대 정리하는\\n(Making the bed)\"}, { value: \"dusting furniture\", label: \"가구 먼지 터는\\n(Dusting furniture)\"},\n        ],\n        [ActionSubCategory.COMBAT_POSES]: [\n          NONE_OPTION, { value: \"in a dynamic sword-fighting stance, ready to strike or parry\", label: \"역동적 검술 자세, 공격/방어 준비\\n(Dynamic sword-fighting stance)\" }, { value: \"aiming a bow and arrow with deadly precision, focused\", label: \"활과 화살 정밀 조준, 집중\\n(Aiming bow and arrow, precision)\" }, { value: \"dodging an incoming attack with agility and grace\", label: \"공격 민첩하고 우아하게 피하는\\n(Dodging attack with agility)\" }, { value: \"parrying a powerful blow with a sturdy shield\", label: \"강력한 공격 견고한 방패로 막는\\n(Parrying blow with shield)\" }, { value: \"in a martial arts kiai pose, channeling energy\", label: \"무술 기합 자세, 에너지 집중\\n(Martial arts kiai pose, channeling)\" }, { value: \"sneaking stealthily through shadows, knife drawn\", label: \"그림자 속 은밀히, 칼 뽑아 든\\n(Sneaking through shadows, knife drawn)\" }, { value: \"holding a glowing magical staff, prepared for magical battle\", label: \"빛나는 마법 지팡이, 마법 전투 준비\\n(Holding magical staff, magic battle)\" }, { value: \"throwing a powerful punch with great force and speed\", label: \"강력한 펀치, 엄청난 힘과 속도\\n(Throwing powerful punch, force/speed)\" }, { value: \"victorious pose over a defeated foe (implied), looking tired but proud\", label: \"승리 포즈 (암시적), 지쳤지만 자랑스러운\\n(Victorious pose, tired but proud)\" }, { value: \"defensive stance, protecting an innocent person or object\", label: \"방어 자세, 무고한 이/물건 보호\\n(Defensive stance, protecting innocent)\" }, { value: \"dual-wielding daggers in a ready stance\", label: \"쌍단검 들고 준비 자세\\n(Dual-wielding daggers, ready stance)\" }, { value: \"firing a futuristic laser pistol\", label: \"미래형 레이저 권총 발사\\n(Firing futuristic laser pistol)\" }, { value: \"mid-air kick, martial arts style\", label: \"공중 발차기, 무술 스타일\\n(Mid-air kick, martial arts)\" }, { value: \"holding a spear, braced for impact\", label: \"창 들고 충격 대비 자세\\n(Holding spear, braced for impact)\" }, { value: \"drawing a sword from its scabbard\", label: \"칼집에서 검 뽑는 중\\n(Drawing sword from scabbard)\" },\n        ],\n        [ActionSubCategory.ARTISTIC_CREATIVE]: [\n          NONE_OPTION, { value: \"playing a grand piano with passion, music notes floating\", label: \"그랜드 피아노 열정적 연주, 음표\\n(Playing grand piano, passion, notes)\" }, { value: \"singing into a vintage microphone on a stage, spotlight\", label: \"무대 빈티지 마이크 노래, 스포트라이트\\n(Singing into vintage microphone, stage)\" }, { value: \"conducting an orchestra with dramatic, sweeping gestures\", label: \"극적 몸짓으로 오케스트라 지휘\\n(Conducting orchestra, dramatic gestures)\" }, { value: \"writing poetry in a leather-bound notebook with a fountain pen\", label: \"가죽 노트, 만년필로 시 쓰는\\n(Writing poetry, leather notebook)\" }, { value: \"taking a photograph with an old, classic film camera\", label: \"오래된 클래식 필름 카메라 사진 촬영\\n(Photographing with classic film camera)\" }, { value: \"designing on a glowing digital tablet with a stylus\", label: \"빛나는 디지털 태블릿, 스타일러스 디자인\\n(Designing on digital tablet, stylus)\" }, { value: \"arranging colorful flowers into a beautiful, intricate bouquet\", label: \"형형색색 꽃, 아름다운 꽃다발 제작\\n(Arranging flowers into bouquet)\" }, { value: \"lost in the music while playing an acoustic guitar by a campfire\", label: \"캠프파이어 옆, 기타 연주 몰입\\n(Playing guitar by campfire, lost in music)\" }, { value: \"sculpting a masterpiece from a block of marble\", label: \"대리석으로 걸작 조각하는\\n(Sculpting marble masterpiece)\" }, { value: \"directing a film scene with a megaphone\", label: \"확성기 들고 영화 장면 감독하는\\n(Directing film scene with megaphone)\" }, { value: \"DJing at a vibrant nightclub, hands on turntables\", label: \"활기찬 클럽 DJ, 턴테이블에 손\\n(DJing at nightclub, turntables)\" }, { value: \"street artist spray-painting a mural on a brick wall\", label: \"벽돌 벽에 그래피티, 거리 예술가\\n(Street artist spray-painting mural)\" }, { value: \"composing music at a piano, surrounded by sheet music\", label: \"피아노 작곡, 악보에 둘러싸여\\n(Composing music at piano, sheet music)\" }, { value: \"sketching in a notebook at a cafe\", label: \"카페에서 노트에 스케치하는\\n(Sketching in notebook at cafe)\"},\n        ],\n        [ActionSubCategory.SPORTS_ATHLETICS]: [\n          NONE_OPTION, { value: \"kicking a soccer ball towards a goal\", label: \"축구공 골대 향해 차는\\n(Kicking soccer ball to goal)\" }, { value: \"shooting a basketball at a hoop\", label: \"농구공 림 향해 쏘는\\n(Shooting basketball at hoop)\" }, { value: \"swinging a tennis racket to hit a ball\", label: \"테니스 라켓 휘둘러 공 치는\\n(Swinging tennis racket)\" }, { value: \"running a marathon, determined expression\", label: \"마라톤 달리는, 단호한 표정\\n(Running marathon, determined)\" }, { value: \"lifting heavy weights at a gym\", label: \"헬스장에서 무거운 역기 드는\\n(Lifting heavy weights at gym)\" }, { value: \"performing a gymnastic routine on a balance beam\", label: \"평균대에서 체조 연기\\n(Gymnastic routine on balance beam)\" }, { value: \"ice skating gracefully on a frozen pond\", label: \"얼어붙은 연못, 우아하게 스케이팅\\n(Ice skating gracefully on pond)\" }, { value: \"diving into a swimming pool\", label: \"수영장으로 다이빙하는\\n(Diving into swimming pool)\" }, { value: \"hitting a baseball with a bat\", label: \"야구 방망이로 공 치는\\n(Hitting baseball with bat)\" }, { value: \"skiing down a snowy mountain slope\", label: \"눈 덮인 산비탈 스키 타는\\n(Skiing down mountain slope)\" }, { value: \"doing yoga poses at home\", label: \"집에서 요가 자세 하는\\n(Doing yoga poses at home)\"},\n        ],\n        [ActionSubCategory.COMMUNICATION_GESTURES]: [\n          NONE_OPTION, { value: \"waving hello or goodbye with a smile\", label: \"미소 지으며 안녕 손 흔드는\\n(Waving hello/goodbye with smile)\" }, { value: \"pointing towards something interesting\", label: \"흥미로운 것 가리키는\\n(Pointing towards something)\" }, { value: \"giving a thumbs up gesture of approval\", label: \"승인하며 엄지척 하는\\n(Giving thumbs up gesture)\" }, { value: \"shrugging shoulders, indicating uncertainty\", label: \"어깨 으쓱, 불확실함 표시\\n(Shrugging shoulders, uncertainty)\" }, { value: \"facepalming in exasperation\", label: \"절망감에 얼굴 감싸는 (페이스팜)\\n(Facepalming in exasperation)\" }, { value: \"holding a hand to ear, listening intently\", label: \"귀에 손 대고 열심히 듣는\\n(Hand to ear, listening intently)\" }, { value: \"making a 'shhh' gesture with finger to lips\", label: \"입술에 손가락, '쉿' 제스처\\n(Making 'shhh' gesture)\" }, { value: \"clapping hands in applause\", label: \"박수 치는\\n(Clapping hands in applause)\" }, { value: \"offering a handshake\", label: \"악수 청하는\\n(Offering a handshake)\" }, { value: \"beckoning someone closer with a hand gesture\", label: \"손짓으로 가까이 오라고 부르는\\n(Beckoning someone closer)\" }, { value: \"talking on the phone\", label: \"전화 통화하는\\n(Talking on the phone)\"}, { value: \"video calling on a laptop\", label: \"노트북으로 화상 통화하는\\n(Video calling on laptop)\"},\n        ],\n      };\n      const CLOTHING_SUB_CATEGORY_LIST = Object.values(ClothingSubCategory).map(val => ({value: val, label: val}));\n      const CLOTHING_DETAIL_OPTIONS = {\n        [ClothingSubCategory.MODERN_CASUAL]: [\n          NONE_OPTION, { value: \"wearing a graphic t-shirt, ripped jeans, and sneakers\", label: \"그래픽 티, 찢청, 스니커즈\\n(Graphic t-shirt, ripped jeans, sneakers)\" }, { value: \"in a comfortable oversized hoodie, leggings, and boots\", label: \"오버사이즈 후드티, 레깅스, 부츠\\n(Oversized hoodie, leggings, boots)\" }, { value: \"sporting a stylish leather jacket over a simple blouse and dark pants\", label: \"가죽 재킷, 블라우스, 어두운 바지\\n(Leather jacket, blouse, dark pants)\" }, { value: \"dressed in trendy athleisure wear, like a matching sweatsuit\", label: \"트렌디 애슬레저룩 (세트 운동복)\\n(Trendy athleisure, sweatsuit)\" }, { value: \"a flowy bohemian maxi dress with sandals and layered necklaces\", label: \"보헤미안 맥시 드레스, 샌들, 목걸이\\n(Bohemian maxi dress, sandals)\" }, { value: \"a simple sundress and a wide-brimmed straw hat\", label: \"심플 선드레스, 넓은 밀짚모자\\n(Simple sundress, straw hat)\" }, { value: \"denim jacket, white tee, and chinos with rolled cuffs\", label: \"데님 재킷, 흰 티, 치노 팬츠 (롤업)\\n(Denim jacket, white tee, chinos)\" }, { value: \"a knitted chunky sweater and corduroy pants, autumn style\", label: \"청키 니트 스웨터, 코듀로이 팬츠\\n(Knitted sweater, corduroy pants)\" }, { value: \"a band t-shirt, cargo shorts, and combat boots\", label: \"밴드 티셔츠, 카고 반바지, 전투화\\n(Band t-shirt, cargo shorts, boots)\" }, { value: \"urban streetwear with a baseball cap, bomber jacket, and joggers\", label: \"어반 스트릿웨어, 야구모자, 봄버, 조거\\n(Urban streetwear, cap, bomber)\" }, { value: \"plaid flannel shirt open over a tank top, with skinny jeans\", label: \"체크 플란넬 셔츠, 탱크탑, 스키니진\\n(Plaid flannel, tank top, skinny jeans)\" }, { value: \"polo shirt and khaki shorts, preppy look\", label: \"폴로 셔츠, 카키 반바지, 프레피룩\\n(Polo shirt, khaki shorts, preppy)\" }, { value: \"jumpsuit or romper with fashionable belt\", label: \"점프수트/롬퍼, 패션 벨트\\n(Jumpsuit/romper, fashion belt)\" }, { value: \"tie-dye t-shirt and denim cutoffs\", label: \"타이다이 티셔츠, 데님 컷오프\\n(Tie-dye t-shirt, denim cutoffs)\" }, { value: \"linen shirt and shorts, beachwear\", label: \"리넨 셔츠와 반바지, 비치웨어\\n(Linen shirt and shorts, beachwear)\" }, { value: \"cotton t-shirt and jeans\", label: \"면 티셔츠와 청바지\\n(Cotton t-shirt and jeans)\"}, { value: \"sweater and cotton pants\", label: \"스웨터와 면바지\\n(Sweater and cotton pants)\"}, { value: \"tracksuit set\", label: \"트레이닝복 세트\\n(Tracksuit set)\"}, { value: \"cardigan and slacks\", label: \"가디건과 슬랙스\\n(Cardigan and slacks)\"},\n        ],\n        [ClothingSubCategory.FORMAL_ELEGANT]: [\n          NONE_OPTION, { value: \"in a sharp, tailored business suit (charcoal grey, navy) with a silk tie\", label: \"잘 재단된 정장(회색/네이비), 실크 넥타이\\n(Tailored suit, silk tie)\" }, { value: \"wearing an elegant floor-length evening gown (e.g., velvet, satin) with sparkling jewelry\", label: \"우아한 이브닝 드레스(벨벳/새틴), 보석\\n(Elegant evening gown, jewelry)\" }, { value: \"in a classic black tuxedo with a bow tie and cummerbund\", label: \"클래식 블랙 턱시도, 나비넥타이\\n(Classic black tuxedo, bow tie)\" }, { value: \"adorned in a sophisticated cocktail dress (e.g., little black dress) and high heels\", label: \"세련된 칵테일 드레스, 하이힐\\n(Sophisticated cocktail dress, heels)\" }, { value: \"a stylish pantsuit (e.g., bold color, wide leg) with statement accessories\", label: \"스타일리시 팬츠수트, 포인트 액세서리\\n(Stylish pantsuit, statement accessories)\" }, { value: \"a flowing silk blouse and a high-waisted pencil skirt\", label: \"실크 블라우스, 하이웨이스트 펜슬 스커트\\n(Silk blouse, pencil skirt)\" }, { value: \"a velvet smoking jacket over formal trousers with loafers\", label: \"벨벳 스모킹 재킷, 정장 바지, 로퍼\\n(Velvet smoking jacket, trousers)\" }, { value: \"a glamorous ballgown with intricate beading and a full skirt\", label: \"화려한 무도회 드레스, 비즈 장식\\n(Glamorous ballgown, beading)\" }, { value: \"wearing a sophisticated three-piece suit with a pocket watch\", label: \"세련된 쓰리피스 수트, 회중시계\\n(Sophisticated three-piece suit)\" }, { value: \"a chic sheath dress with a string of pearls\", label: \"시크한 시스 드레스, 진주 목걸이\\n(Chic sheath dress, pearls)\" }, { value: \"morning suit for formal daytime events\", label: \"모닝 수트 (주간 정장)\\n(Morning suit for daytime events)\" }, { value: \"opera gloves with an off-the-shoulder gown\", label: \"오페라 글러브, 오프숄더 가운\\n(Opera gloves, off-shoulder gown)\" }, { value: \"tailcoat and white tie for ultra-formal occasions\", label: \"연미복과 흰색 타이 (최고 정장)\\n(Tailcoat and white tie)\" }, { value: \"business casual (blazer and chinos)\", label: \"비즈니스 캐주얼 (블레이저와 치노)\\n(Business casual)\"},\n        ],\n        [ClothingSubCategory.HISTORICAL_TRADITIONAL]: [\n          NONE_OPTION, { value: \"wearing traditional Korean Hanbok with intricate gold embroidery and norigae\", label: \"전통 한복, 금박 자수, 노리개\\n(Korean Hanbok, gold embroidery, norigae)\" }, { value: \"in shining medieval knight armor with a heraldic sigil on the breastplate\", label: \"중세 기사 갑옷, 가슴판 문장\\n(Medieval knight armor, heraldic sigil)\" }, { value: \"dressed in elaborate Victorian era attire with a corset, bustle, and lace details\", label: \"빅토리아 시대 의상, 코르셋, 버슬, 레이스\\n(Victorian attire, corset, bustle, lace)\" }, { value: \"wearing a flowing Roman toga and intricate sandals, laurel wreath\", label: \"로마 토가, 샌들, 월계관\\n(Roman toga, sandals, laurel wreath)\" }, { value: \"in a Japanese kimono with a decorative obi sash and geta sandals\", label: \"일본 기모노, 장식 오비, 게다\\n(Japanese kimono, obi, geta)\" }, { value: \"dressed as an Egyptian pharaoh with a nemes headdress, kohl eyeliner, and gold jewelry\", label: \"이집트 파라오, 네메스, 콜 아이라이너, 금 장신구\\n(Egyptian pharaoh, nemes, kohl)\" }, { value: \"Viking warrior attire with fur-lined cloak, leather armor, and horned helmet (optional)\", label: \"바이킹 전사, 모피 망토, 가죽 갑옷, 뿔투구\\n(Viking attire, fur cloak, leather armor)\" }, { value: \"Renaissance noble clothing with ruffs, velvet doublet, and jeweled accessories\", label: \"르네상스 귀족, 러프, 벨벳, 보석\\n(Renaissance noble, ruffs, velvet)\" }, { value: \"Ancient Greek chiton or peplos, simple and elegant\", label: \"고대 그리스 키톤/페플로스, 단순 우아\\n(Ancient Greek chiton/peplos)\" }, { value: \"Scottish kilt with tartan pattern, sporran, and sgian-dubh knife\", label: \"스코틀랜드 킬트, 타탄, 스포런, 단검\\n(Scottish kilt, tartan, sporran)\" }, { value: \"1920s flapper dress with beads, sequins, and a feathered headband\", label: \"1920년대 플래퍼 드레스, 비즈, 깃털\\n(1920s flapper dress, beads, feathers)\" }, { value: \"Wild West cowboy/cowgirl attire: denim, leather chaps, cowboy hat, boots\", label: \"서부 카우보이/걸: 데님, 가죽챕스, 모자\\n(Wild West cowboy/cowgirl attire)\" }, { value: \"Chinese Hanfu, elegant flowing robes\", label: \"중국 한푸, 우아하고 흐르는 도포\\n(Chinese Hanfu, flowing robes)\" }, { value: \"Ottoman Empire kaftan, richly embroidered\", label: \"오스만 제국 카프탄, 화려한 자수\\n(Ottoman Empire kaftan, embroidered)\" },\n        ],\n        [ClothingSubCategory.FANTASY_SCI_FI]: [\n          NONE_OPTION, { value: \"in futuristic cyberpunk gear with neon accents, cybernetic implants, and a trench coat\", label: \"사이버펑크 장비, 네온, 임플란트, 트렌치코트\\n(Cyberpunk gear, neon, implants, trench coat)\" }, { value: \"wearing rugged adventurer's leather armor with pouches, straps, and a tattered cloak\", label: \"모험가 가죽 갑옷, 주머니, 끈, 낡은 망토\\n(Adventurer's leather armor, cloak)\" }, { value: \"in a flowing, ethereal elven robe embroidered with silver thread and leaf motifs\", label: \"엘프 로브, 은실 자수, 잎사귀 무늬\\n(Elven robe, silver embroidery, leaves)\" }, { value: \"donning a sleek, high-tech spacesuit with a reflective visor and glowing blue lights\", label: \"첨단 우주복, 반사 바이저, 파란 불빛\\n(High-tech spacesuit, visor, blue lights)\" }, { value: \"dressed as a sorcerer with a long, star-patterned cloak, pointed hat, and a staff\", label: \"마법사, 별무늬 망토, 뾰족 모자, 지팡이\\n(Sorcerer, star cloak, pointed hat, staff)\" }, { value: \"wearing post-apocalyptic scavenger outfit made of patched leather, metal scraps, and goggles\", label: \"포스트 아포칼립스, 가죽, 금속 조각, 고글\\n(Post-apocalyptic scavenger, scraps, goggles)\" }, { value: \"celestial being adorned in starry, cosmic fabric that shimmers and flows\", label: \"천상의 존재, 별/우주 무늬 천\\n(Celestial being, starry cosmic fabric)\" }, { value: \"dwarven warrior armor, heavy, ornate, with rune engravings and a horned helmet\", label: \"드워프 전사 갑옷, 무겁고 화려, 룬 각인\\n(Dwarven armor, ornate, runes, helmet)\" }, { value: \"steampunk inventor attire with goggles, gears, a waistcoat, and tool belt\", label: \"스팀펑크 발명가, 고글, 기어, 조끼, 공구 벨트\\n(Steampunk inventor, goggles, gears, tool belt)\" }, { value: \"alien race traditional garments, bioluminescent patterns, unusual materials\", label: \"외계 종족 전통 의상, 생체 발광, 특이 소재\\n(Alien garments, bioluminescent, unusual)\" }, { value: \"fairy costume with gossamer wings and flower crown\", label: \"요정 의상, 얇은 날개, 꽃 화관\\n(Fairy costume, gossamer wings, flower crown)\" }, { value: \"space pirate outfit, rugged and functional with a bandana\", label: \"우주 해적 복장, 거칠고 기능적, 반다나\\n(Space pirate, rugged, bandana)\" }, { value: \"mage robes with elemental symbols (fire, water, air, earth)\", label: \"원소 상징 마법사 로브 (불, 물, 공기, 흙)\\n(Mage robes, elemental symbols)\" }, { value: \"time traveler's eclectic outfit, mixing eras\", label: \"시간 여행자 복장, 여러 시대 혼합\\n(Time traveler, eclectic, mixed eras)\" },\n        ],\n        [ClothingSubCategory.OCCUPATIONAL_UNIFORM]: [\n          NONE_OPTION, { value: \"wearing a crisp white doctor's lab coat with a stethoscope around the neck\", label: \"의사 가운, 목에 청진기\\n(Doctor's lab coat, stethoscope)\" }, { value: \"in a firefighter's heavy-duty bunker gear with a helmet and oxygen mask\", label: \"소방관 방화복, 헬멧, 산소마스크\\n(Firefighter bunker gear, helmet, mask)\" }, { value: \"dressed as a chef with a tall white toque, double-breasted jacket, and a stained apron\", label: \"요리사, 높은 모자, 더블자켓, 앞치마\\n(Chef, toque, double-breasted jacket)\" }, { value: \"in a sharp pilot's uniform with epaulets, wings pin, and a cap\", label: \"조종사 유니폼, 견장, 윙뱃지, 모자\\n(Pilot uniform, epaulets, wings pin, cap)\" }, { value: \"police officer uniform with a badge, utility belt, and a holstered sidearm\", label: \"경찰 제복, 배지, 유틸리티 벨트, 권총\\n(Police officer, badge, utility belt, sidearm)\" }, { value: \"scientist in a full-body hazmat suit with a transparent face shield\", label: \"과학자, 전신 방호복, 투명 안면 보호구\\n(Scientist, hazmat suit, face shield)\" }, { value: \"construction worker with a hard hat, reflective vest, and tool belt\", label: \"건설 노동자, 안전모, 반사 조끼, 공구 벨트\\n(Construction worker, hard hat, vest, tools)\" }, { value: \"soldier in camouflage combat uniform, helmet, and tactical vest\", label: \"군인, 위장 전투복, 헬멧, 전술 조끼\\n(Soldier, camouflage, helmet, tactical vest)\" }, { value: \"librarian with glasses on a chain, a cardigan, and a sensible skirt\", label: \"사서, 안경줄, 카디건, 단정한 치마\\n(Librarian, glasses chain, cardigan, skirt)\" }, { value: \"artist with a paint-splattered smock, beret, and holding brushes\", label: \"예술가, 물감 튄 작업복, 베레모, 붓\\n(Artist, paint-splattered smock, beret)\" }, { value: \"astronaut in a bulky spacesuit with NASA patches\", label: \"우주비행사, 두툼한 우주복, NASA 패치\\n(Astronaut, bulky spacesuit, NASA patches)\" }, { value: \"judge in a black robe with a gavel\", label: \"판사, 검은 법복, 의사봉\\n(Judge, black robe, gavel)\" }, { value: \"ballerina in a tutu and pointe shoes\", label: \"발레리나, 튜튜, 토슈즈\\n(Ballerina, tutu, pointe shoes)\" }, { value: \"sailor uniform, white and navy blue with a sailor cap\", label: \"선원 제복, 흰색/남색, 세일러캡\\n(Sailor uniform, white/navy, cap)\" }, { value: \"cafe staff uniform (apron, simple shirt)\", label: \"카페 직원 유니폼 (앞치마, 셔츠)\\n(Cafe staff uniform)\"}, { value: \"convenience store staff uniform (vest or polo shirt)\", label: \"편의점 직원 유니폼 (조끼 또는 폴로셔츠)\\n(Convenience store staff uniform)\"}, { value: \"delivery person outfit (branded jacket/cap)\", label: \"배달원 복장 (브랜드 재킷/모자)\\n(Delivery person outfit)\"},\n        ],\n        [ClothingSubCategory.CULTURAL_ETHNIC]: [\n          NONE_OPTION, { value: \"Indian sari (e.g., silk, cotton) with intricate gold embroidery and matching blouse\", label: \"인도 사리(실크/면), 금 자수, 블라우스\\n(Indian sari, gold embroidery, blouse)\" }, { value: \"Chinese qipao (cheongsam) in silk with dragon or phoenix motifs\", label: \"중국 치파오(실크), 용/봉황 무늬\\n(Chinese qipao, silk, dragon/phoenix)\" }, { value: \"Scottish kilt with sporran, sgian-dubh, kilt pin, and ghillie brogues\", label: \"스코틀랜드 킬트, 스포런, 단검, 핀, 신발\\n(Scottish kilt, sporran, sgian-dubh, pin)\" }, { value: \"Native American tribal regalia with beadwork, feathers, and leather fringe\", label: \"아메리카 원주민 예복, 비즈, 깃털, 가죽 술\\n(Native American regalia, beadwork, feathers)\" }, { value: \"African dashiki with vibrant Kente cloth patterns and a kufi cap\", label: \"아프리카 다시키, 켄테 천, 쿠피 모자\\n(African dashiki, Kente patterns, kufi cap)\" }, { value: \"Middle Eastern abaya and shayla, elegant and modest\", label: \"중동 아바야, 샤일라, 우아하고 단정\\n(Middle Eastern abaya, shayla, elegant)\" }, { value: \"Dutch traditional clothing with wooden clogs (klompen) and lace cap\", label: \"네덜란드 전통 의상, 나막신, 레이스 모자\\n(Dutch traditional, clogs, lace cap)\" }, { value: \"Russian sarafan (pinafore dress) and kokoshnik (headdress)\", label: \"러시아 사라판, 코코쉬닉 (머리장식)\\n(Russian sarafan, kokoshnik)\" }, { value: \"Mexican charro suit for men or folklorico dress for women, colorful and embroidered\", label: \"멕시코 차로 수트/폴클로리코 드레스\\n(Mexican charro/folklorico, colorful)\" }, { value: \"Vietnamese Ao Dai, long tunic over trousers\", label: \"베트남 아오자이, 바지 위 긴 튜닉\\n(Vietnamese Ao Dai, tunic over trousers)\" }, { value: \"Tibetan chuba with colorful apron (pangden for women)\", label: \"티베트 추바, 화려한 앞치마 (팡덴)\\n(Tibetan chuba, colorful apron)\" }, { value: \"Hawaiian aloha shirt or muumuu dress with lei\", label: \"하와이 알로하 셔츠/무무, 레이\\n(Hawaiian aloha/muumuu, lei)\" }, { value: \"Spanish flamenco dress with ruffles and a fan\", label: \"스페인 플라멩코 드레스, 러플, 부채\\n(Spanish flamenco dress, ruffles, fan)\" },\n        ],\n        [ClothingSubCategory.SLEEPWEAR_LOUNGEWEAR]: [\n          NONE_OPTION, { value: \"cozy flannel pajamas with a cute print (e.g., stars, animals)\", label: \"아늑한 플란넬 파자마 (별/동물 무늬)\\n(Cozy flannel pajamas, cute print)\" }, { value: \"silk nightgown and matching robe set, luxurious\", label: \"실크 나이트가운, 로브 세트, 고급스러운\\n(Silk nightgown and robe set, luxurious)\" }, { value: \"comfortable sweatpants and a loose, oversized t-shirt\", label: \"편안한 운동복 바지, 헐렁한 티셔츠\\n(Comfortable sweatpants, loose t-shirt)\" }, { value: \"plush bathrobe and fuzzy slippers, ultimate comfort\", label: \"푹신한 목욕 가운, 털 슬리퍼, 최고 편안함\\n(Plush bathrobe, fuzzy slippers, comfort)\" }, { value: \"onesie pajamas with an animal design (e.g., unicorn, dinosaur)\", label: \"동물 디자인 원지 파자마 (유니콘, 공룡)\\n(Onesie pajamas, animal design)\" }, { value: \"simple cotton nightshirt, breathable and soft\", label: \"심플 면 나이트셔츠, 통기성, 부드러움\\n(Simple cotton nightshirt, breathable)\" }, { value: \"yoga pants and a tank top, for relaxing at home\", label: \"요가 팬츠, 탱크탑, 집에서 휴식용\\n(Yoga pants and tank top, relaxing)\" }, { value: \"kimono-style robe made of soft cotton or silk\", label: \"기모노 스타일 로브 (면/실크)\\n(Kimono-style robe, soft cotton/silk)\" }, { value: \"thermal underwear set for cold nights\", label: \"추운 밤용 보온 내의 세트\\n(Thermal underwear set, cold nights)\" }, { value: \"sleep mask and earplugs for undisturbed sleep\", label: \"수면 안대, 귀마개, 숙면용\\n(Sleep mask and earplugs)\" }, { value: \"cashmere loungewear set (sweater and pants)\", label: \"캐시미어 라운지웨어 세트 (스웨터, 바지)\\n(Cashmere loungewear set)\" }, { value: \"short pajama set (shorts and camisole)\", label: \"짧은 파자마 세트 (반바지, 캐미솔)\\n(Short pajama set, shorts/camisole)\" }, { value: \"hooded robe\", label: \"후드 달린 목욕 가운\\n(Hooded robe)\"}, { value: \"comfortable easywear set\", label: \"편안한 이지웨어 세트\\n(Comfortable easywear set)\"},\n        ],\n        [ClothingSubCategory.PROTECTIVE_GEAR]: [\n          NONE_OPTION, { value: \"motorcycle helmet and leather racing suit\", label: \"오토바이 헬멧, 가죽 레이싱 수트\\n(Motorcycle helmet, leather suit)\" }, { value: \"knight's full plate armor, gleaming\", label: \"기사의 전신 판금 갑옷, 빛나는\\n(Knight's full plate armor, gleaming)\" }, { value: \"riot police gear: shield, helmet, body armor\", label: \"진압 경찰 장비: 방패, 헬멧, 방탄복\\n(Riot police gear: shield, helmet)\" }, { value: \"welder's mask and thick gloves\", label: \"용접 마스크와 두꺼운 장갑\\n(Welder's mask and thick gloves)\" }, { value: \"beekeeper's suit and veiled hat\", label: \"양봉가 복장과 망사 모자\\n(Beekeeper's suit and veiled hat)\" }, { value: \"bomb disposal suit, heavy and padded\", label: \"폭탄 처리반 복장, 무겁고 두툼한\\n(Bomb disposal suit, heavy)\" }, { value: \"fencing mask and padded jacket\", label: \"펜싱 마스크와 패딩 재킷\\n(Fencing mask and padded jacket)\" }, { value: \"chainmail shirt under a tunic\", label: \"튜닉 아래 체인메일 셔츠\\n(Chainmail shirt under tunic)\" }, { value: \"gas mask and goggles\", label: \"방독면과 고글\\n(Gas mask and goggles)\" }, { value: \"bulletproof vest (tactical)\", label: \"방탄조끼 (전술용)\\n(Bulletproof vest (tactical))\" }, { value: \"bicycle helmet\", label: \"자전거 헬멧\\n(Bicycle helmet)\"}, { value: \"safety goggles\", label: \"보안경\\n(Safety goggles)\"},\n        ],\n        [ClothingSubCategory.EVERYDAY_WEAR]: [\n          NONE_OPTION, { value: \"a simple t-shirt and shorts\", label: \"간단한 티셔츠와 반바지\\n(Simple t-shirt and shorts)\"}, { value: \"jeans and a casual shirt\", label: \"청바지와 캐주얼 셔츠\\n(Jeans and casual shirt)\"}, { value: \"a comfortable knit sweater and slacks\", label: \"편안한 니트 스웨터와 슬랙스\\n(Comfortable knit sweater and slacks)\"}, { value: \"a hoodie and sweatpants\", label: \"후드티와 운동복 바지\\n(Hoodie and sweatpants)\"}, { value: \"a polo shirt and chinos\", label: \"폴로 셔츠와 치노 팬츠\\n(Polo shirt and chinos)\"}, { value: \"a light windbreaker jacket\", label: \"가벼운 바람막이 재킷\\n(Light windbreaker jacket)\"}, { value: \"summer dress\", label: \"여름 원피스\\n(Summer dress)\"}, { value: \"office attire (blouse and skirt/pants)\", label: \"사무실 복장 (블라우스와 치마/바지)\\n(Office attire)\"}, { value: \"school uniform\", label: \"교복\\n(School uniform)\"}, { value: \"sports jersey and shorts\", label: \"스포츠 저지와 반바지\\n(Sports jersey and shorts)\"},\n        ]\n      };\n      \n      const ACCESSORIES_SUB_CATEGORY_LIST = Object.values(AccessoriesSubCategory).map(val => ({value: val, label: val}));\n      const ACCESSORIES_DETAIL_OPTIONS = {\n        [AccessoriesSubCategory.MAIN_ACCESSORIES]: [ \n            NONE_OPTION, { value: \"wearing a wide-brimmed sun hat\", label: \"넓은 챙의 태양 모자 착용\\n(Wearing wide-brimmed sun hat)\" }, { value: \"elegant pearl necklace and earrings\", label: \"우아한 진주 목걸이와 귀걸이\\n(Elegant pearl necklace and earrings)\" }, { value: \"leather satchel bag slung across the shoulder\", label: \"가죽 사첼백 어깨에 걸친\\n(Leather satchel bag, shoulder)\" }, { value: \"round-framed spectacles perched on the nose\", label: \"코에 걸친 동그란 안경\\n(Round-framed spectacles on nose)\" }, { value: \"a mysterious locket worn around the neck\", label: \"목에 건 신비로운 로켓 펜던트\\n(Mysterious locket around neck)\" }, { value: \"fingerless gloves, practical or stylish\", label: \"실용적/스타일리시한 반장갑\\n(Fingerless gloves, practical/stylish)\" }, { value: \"a colorful silk scarf tied elegantly\", label: \"화려한 실크 스카프 우아하게 맨\\n(Colorful silk scarf tied elegantly)\" }, { value: \"a utility belt with various pouches and tools\", label: \"다양한 주머니와 도구 달린 유틸리티 벨트\\n(Utility belt, pouches and tools)\" }, { value: \"intricate tribal tattoos visible on arms/shoulders\", label: \"팔/어깨에 보이는 복잡한 부족 문신\\n(Intricate tribal tattoos visible)\" }, { value: \"a single red rose tucked behind the ear\", label: \"귀 뒤에 꽂은 한 송이 붉은 장미\\n(Single red rose behind ear)\" }, { value: \"steampunk goggles resting on forehead\", label: \"이마에 얹은 스팀펑크 고글\\n(Steampunk goggles on forehead)\" }, { value: \"a crown of flowers (flower crown)\", label: \"꽃으로 만든 왕관 (화관)\\n(Crown of flowers / flower crown)\" }, { value: \"worn leather wristbands\", label: \"낡은 가죽 손목 밴드\\n(Worn leather wristbands)\" }, { value: \"a backpack for adventuring\", label: \"모험용 배낭\\n(Backpack for adventuring)\" }, { value: \"a jeweled tiara\", label: \"보석 박힌 티아라\\n(Jeweled tiara)\" }, { value: \"backpack\", label: \"백팩\\n(Backpack)\"}, { value: \"eco bag\", label: \"에코백\\n(Eco bag)\"}, { value: \"smartwatch\", label: \"스마트워치\\n(Smartwatch)\"}, { value: \"eyeglasses\", label: \"안경\\n(Eyeglasses)\"}, { value: \"sunglasses\", label: \"선글라스\\n(Sunglasses)\"}, { value: \"baseball cap\", label: \"야구 모자\\n(Baseball cap)\"}, { value: \"beanie\", label: \"비니\\n(Beanie)\"}, { value: \"headphones around neck\", label: \"목에 건 헤드폰\\n(Headphones around neck)\"},\n        ],\n      };\n\n      const BACKGROUND_SUB_CATEGORY_LIST = Object.values(BackgroundSubCategory).map(val => ({value: val, label: val}));\n      const BACKGROUND_DETAIL_OPTIONS = {\n        [BackgroundSubCategory.NATURE_LANDSCAPE]: [\n          NONE_OPTION, { value: \"in an enchanted forest clearing, sunlight filtering through ancient, mossy trees\", label: \"마법 숲 공터, 이끼 낀 나무 햇빛\\n(Enchanted forest, sunlight, mossy trees)\" }, { value: \"atop a misty mountain peak overlooking a vast, cloud-filled valley at dawn\", label: \"안개 낀 산봉우리, 구름 계곡 새벽\\n(Misty mountain peak, cloud valley, dawn)\" }, { value: \"on a serene tropical beach at sunset, with silhouetted palm trees and calm, reflective ocean\", label: \"고요한 열대 해변 일몰, 야자수 실루엣\\n(Tropical beach sunset, palm silhouettes)\" }, { value: \"amidst a vibrant field of wildflowers under a clear, vast blue sky with fluffy clouds\", label: \"활기찬 들꽃밭, 맑고 푸른 하늘 구름\\n(Wildflower field, clear blue sky, clouds)\" }, { value: \"by a cascading waterfall in a lush, steamy jungle with exotic birds\", label: \"계단식 폭포, 무성한 정글, 이국적 새\\n(Cascading waterfall, lush jungle, birds)\" }, { value: \"in a snowy arctic landscape with the aurora borealis dancing in the night sky\", label: \"눈 덮인 북극, 오로라 춤추는 밤하늘\\n(Snowy arctic, aurora borealis, night sky)\" }, { value: \"deep within a mysterious, bioluminescent mushroom forest, glowing particles in air\", label: \"신비로운 발광 버섯 숲, 빛나는 입자\\n(Bioluminescent mushroom forest, particles)\" }, { value: \"on the edge of a dramatic, windswept cliff overlooking a stormy sea\", label: \"극적인 절벽, 폭풍우 치는 바다\\n(Dramatic cliff, stormy sea)\" }, { value: \"in a tranquil bamboo forest, sunlight dappling through leaves\", label: \"고요한 대나무 숲, 햇살 얼룩무늬\\n(Tranquil bamboo forest, dappled sunlight)\" }, { value: \"a desert oasis with swaying palm trees, a small clear pool, and distant dunes\", label: \"사막 오아시스, 야자수, 맑은 연못, 모래 언덕\\n(Desert oasis, palm trees, pool, dunes)\" }, { value: \"autumn forest with a carpet of colorful falling leaves and golden light\", label: \"가을 숲, 형형색색 낙엽, 황금빛\\n(Autumn forest, colorful leaves, golden light)\" }, { value: \"rolling green hills under a summer sky, like the Shire\", label: \"푸른 구릉지, 여름 하늘 (샤이어처럼)\\n(Rolling green hills, summer sky, Shire)\" }, { value: \"a field of lavender stretching to the horizon\", label: \"지평선까지 펼쳐진 라벤더 밭\\n(Field of lavender to horizon)\" }, { value: \"inside a giant, ancient hollow tree\", label: \"거대하고 오래된 속 빈 나무 안\\n(Inside giant hollow tree)\" }, { value: \"a serene lake reflecting the sky like a mirror\", label: \"하늘 비추는 고요한 호수 (거울처럼)\\n(Serene lake reflecting sky, mirror)\" }, { value: \"a volcanic landscape with flowing lava and smoke\", label: \"흐르는 용암과 연기, 화산 지형\\n(Volcanic landscape, lava, smoke)\" }, { value: \"neighborhood park with trees and benches\", label: \"동네 공원 (나무와 벤치)\\n(Neighborhood park)\"}, { value: \"front yard garden with flowers\", label: \"집 앞 정원 (꽃들)\\n(Front yard garden)\"}, { value: \"riverside walking path\", label: \"강변 산책로\\n(Riverside walking path)\"},\n        ],\n        [BackgroundSubCategory.URBAN_CITYSCAPE]: [\n          NONE_OPTION, { value: \"in a neon-lit cyberpunk cityscape with flying vehicles, towering holographic advertisements\", label: \"네온 사이버펑크, 비행 차량, 홀로그램 광고\\n(Neon cyberpunk, flying vehicles, ads)\" }, { value: \"on a bustling city street at night, wet pavement reflecting colorful lights, steam from vents\", label: \"밤의 붐비는 거리, 젖은 포장도로, 다채로운 빛\\n(Bustling city night, wet pavement, lights)\" }, { value: \"overlooking a sprawling futuristic metropolis from a high-tech balcony, city lights twinkling\", label: \"미래형 대도시 조망, 첨단 발코니, 도시 불빛\\n(Futuristic metropolis, high-tech balcony)\" }, { value: \"in a quaint, cobblestone European alleyway with charming cafes, flower boxes, and old lanterns\", label: \"유럽 자갈길 골목, 매력적 카페, 꽃 상자\\n(Cobblestone European alley, cafes, flowers)\" }, { value: \"on a rooftop overlooking a dense city at sunset, warm golden hour light\", label: \"해질녘 옥상, 빽빽한 도시, 황금 시간대 빛\\n(Rooftop city sunset, golden hour)\" }, { value: \"abandoned, overgrown city ruins, vines covering crumbling buildings\", label: \"버려진 도시 폐허, 덩굴 덮인 건물\\n(Abandoned city ruins, overgrown vines)\" }, { value: \"inside a grand, bustling international marketplace or bazaar, full of exotic goods\", label: \"웅장하고 붐비는 국제 시장/바자, 이국적 상품\\n(Bustling international market/bazaar)\" }, { value: \"a quiet suburban street with identical, well-maintained houses and green lawns\", label: \"조용한 교외 거리, 똑같은 집, 푸른 잔디\\n(Quiet suburban street, identical houses)\" }, { value: \"a gritty, industrial district with towering smokestacks, factories, and rusty pipes\", label: \"거친 산업 지구, 굴뚝, 공장, 녹슨 파이프\\n(Gritty industrial district, smokestacks)\" }, { value: \"modern minimalist cityscape with sleek glass skyscrapers and geometric architecture\", label: \"현대 미니멀 도시, 유리 마천루, 기하학 건축\\n(Modern minimalist city, glass skyscrapers)\" }, { value: \"a grand central park in a major city, with fountains and skyline views\", label: \"대도시 중앙 공원, 분수, 스카이라인\\n(Grand central park, fountains, skyline)\" }, { value: \"a historic city square with ancient monuments and pigeons\", label: \"역사적인 도시 광장, 고대 기념물, 비둘기\\n(Historic city square, monuments, pigeons)\" }, { value: \"a crowded subway station platform with arriving train\", label: \"붐비는 지하철역 플랫폼, 도착하는 열차\\n(Crowded subway station, arriving train)\" }, { value: \"a Venetian canal with gondolas and colorful buildings\", label: \"베네치아 운하, 곤돌라, 다채로운 건물\\n(Venetian canal, gondolas, buildings)\" }, { value: \"a futuristic biodome city, blending nature and technology\", label: \"미래형 바이오돔 도시, 자연과 기술 융합\\n(Futuristic biodome city, nature/tech)\" }, { value: \"ordinary residential alley\", label: \"평범한 주택가 골목\\n(Ordinary residential alley)\"}, { value: \"apartment complex playground\", label: \"아파트 단지 놀이터\\n(Apartment complex playground)\"}, { value: \"busy downtown street in daytime\", label: \"낮의 번화가 거리\\n(Busy downtown street in daytime)\"},\n        ],\n        [BackgroundSubCategory.INTERIOR_SPACES]: [\n          NONE_OPTION, { value: \"in a grand, ancient library filled with dusty tomes, scrolls, and a spiral staircase\", label: \"웅장한 고대 도서관, 고서, 두루마리, 나선형 계단\\n(Ancient library, tomes, scrolls, staircase)\" }, { value: \"inside a cozy, fire-lit medieval tavern with wooden beams, tankards, and cheerful patrons\", label: \"아늑한 중세 선술집, 벽난로, 나무 들보, 맥주잔\\n(Cozy medieval tavern, fire-lit, patrons)\" }, { value: \"on the command bridge of a futuristic starship, overlooking a vibrant nebula through a large viewport\", label: \"미래 우주선 함교, 성운 조망, 대형 창문\\n(Starship bridge, nebula viewport)\" }, { value: \"in a minimalist modern apartment with large windows offering panoramic city views at night\", label: \"미니멀 현대 아파트, 큰 창문, 야경\\n(Minimalist apartment, panoramic city views)\" }, { value: \"a lavish baroque palace ballroom with crystal chandeliers, gilded decorations, and a polished dance floor\", label: \"바로크 궁전 무도회장, 샹들리에, 금박 장식\\n(Baroque palace ballroom, chandeliers)\" }, { value: \"a secret alchemist's laboratory filled with bubbling potions, strange glowing devices, and ancient texts\", label: \"비밀 연금술사 실험실, 물약, 이상한 장치\\n(Alchemist's lab, potions, glowing devices)\" }, { value: \"a child's whimsical bedroom filled with colorful toys, hand-drawn pictures, and fairy lights\", label: \"아이의 기발한 침실, 장난감, 그림, 요정 조명\\n(Child's whimsical bedroom, toys, lights)\" }, { value: \"an opulent art gallery with famous paintings on ornate walls, velvet ropes\", label: \"호화로운 미술관, 유명 그림, 벨벳 로프\\n(Opulent art gallery, famous paintings)\" }, { value: \"a cluttered artist's studio with canvases, paint tubes everywhere, and easels\", label: \"어수선한 예술가 작업실, 캔버스, 물감\\n(Cluttered artist's studio, canvases, paint)\" }, { value: \"a high-tech, sterile laboratory with advanced scientific equipment and holographic displays\", label: \"첨단 무균 실험실, 고급 장비, 홀로그램\\n(High-tech sterile lab, advanced equipment)\" }, { value: \"a grand cathedral interior with stained glass windows and high vaulted ceilings\", label: \"웅장한 대성당 내부, 스테인드 글라스, 높은 천장\\n(Grand cathedral interior, stained glass)\" }, { value: \"a cozy bookstore cafe with shelves packed with books and comfy armchairs\", label: \"아늑한 북카페, 책꽂이, 편안한 안락의자\\n(Cozy bookstore cafe, packed shelves)\" }, { value: \"an old, dusty attic filled with forgotten treasures and cobwebs\", label: \"오래되고 먼지 쌓인 다락방, 잊혀진 보물\\n(Old dusty attic, forgotten treasures)\" }, { value: \"a luxurious hotel lobby with a grand staircase and marble floors\", label: \"호화로운 호텔 로비, 대형 계단, 대리석 바닥\\n(Luxurious hotel lobby, grand staircase)\" }, { value: \"a greenhouse filled with exotic plants and flowers, sunlight streaming in\", label: \"이국적인 식물 가득한 온실, 햇빛\\n(Greenhouse, exotic plants, sunlight)\" }, { value: \"ordinary apartment living room\", label: \"일반 가정집 거실\\n(Ordinary apartment living room)\"}, { value: \"typical bedroom with a bed and desk\", label: \"일반적인 침실 (침대와 책상)\\n(Typical bedroom)\"}, { value: \"modern kitchen with appliances\", label: \"현대적인 부엌 (가전제품들)\\n(Modern kitchen)\"},\n        ],\n        [BackgroundSubCategory.EVERYDAY_LOCATIONS]: [\n          NONE_OPTION, { value: \"a typical office cubicle or open-plan office\", label: \"일반적인 사무실 칸막이/오픈형 사무실\\n(Typical office cubicle/open-plan)\"}, { value: \"inside a bustling supermarket aisle\", label: \"붐비는 슈퍼마켓 통로 안\\n(Inside bustling supermarket aisle)\"}, { value: \"a quiet library reading room with bookshelves\", label: \"조용한 도서관 열람실 (책장들)\\n(Quiet library reading room)\"}, { value: \"a local coffee shop with a few patrons\", label: \"동네 커피숍 (손님 몇 명)\\n(Local coffee shop)\"}, { value: \"a classroom with desks and a whiteboard\", label: \"교실 (책상과 화이트보드)\\n(Classroom with desks)\"}, { value: \"a university campus quad or pathway\", label: \"대학교 캠퍼스 광장/길\\n(University campus quad/pathway)\"}, { value: \"inside a public bus or subway train\", label: \"공공 버스/지하철 내부\\n(Inside public bus/subway)\"}, { value: \"a bus stop shelter\", label: \"버스 정류장 쉼터\\n(Bus stop shelter)\"}, { value: \"a hospital waiting room or corridor\", label: \"병원 대기실/복도\\n(Hospital waiting room/corridor)\"}, { value: \"a gym with exercise equipment\", label: \"헬스장 (운동 기구들)\\n(Gym with exercise equipment)\"}, { value: \"a local park playground\", label: \"동네 공원 놀이터\\n(Local park playground)\"}, { value: \"a movie theater lobby or auditorium\", label: \"영화관 로비/상영관\\n(Movie theater lobby/auditorium)\"}, { value: \"a restaurant dining area\", label: \"식당 식사 공간\\n(Restaurant dining area)\"}, { value: \"a shopping mall interior\", label: \"쇼핑몰 내부\\n(Shopping mall interior)\"}, { value: \"a hair salon or barber shop\", label: \"미용실/이발소\\n(Hair salon/barber shop)\"},\n        ],\n        [BackgroundSubCategory.FANTASY_SURREAL]: [\n          NONE_OPTION, { value: \"before a swirling cosmic nebula, stars glittering like scattered diamonds, planets visible\", label: \"소용돌이 성운, 다이아몬드 별, 행성\\n(Swirling cosmic nebula, glittering stars)\" }, { value: \"in a bizarre dreamscape with floating islands, impossible Escher-like architecture, and waterfalls flowing upwards\", label: \"기괴한 꿈 풍경, 떠다니는 섬, 에셔 건축\\n(Dreamscape, floating islands, Escher arch)\" }, { value: \"within an alien jungle, glowing flora and fauna, two moons in a purple sky\", label: \"외계 정글, 발광 동식물, 보라색 하늘 두 달\\n(Alien jungle, glowing flora/fauna, two moons)\" }, { value: \"in a cavern made of giant, luminous crystals that hum with energy\", label: \"거대 발광 수정 동굴, 에너지 진동\\n(Cavern of giant luminous crystals, hums)\"}, { value: \"a world where gravity works differently, people walking on ceilings or sideways on walls\", label: \"중력 다른 세계, 천장/벽 걷는 사람\\n(Different gravity, people on ceilings/walls)\" }, { value: \"a landscape made entirely of candy, sweets, and gingerbread houses\", label: \"사탕/과자/진저브레드 집 풍경\\n(Landscape of candy, sweets, gingerbread)\" }, { value: \"underwater city ruins of a lost Atlantean civilization, schools of fish swimming through\", label: \"수중 도시 폐허 (아틀란티스), 물고기 떼\\n(Underwater city ruins, Atlantean, fish)\" }, { value: \"a sky filled with giant, floating jellyfish-like creatures that emit soft light\", label: \"거대 해파리 생물 떠다니는 하늘, 부드러운 빛\\n(Sky with giant floating jellyfish creatures)\" }, { value: \"a library where books fly like birds and whisper ancient secrets\", label: \"책이 새처럼 날고 비밀 속삭이는 도서관\\n(Library, flying books, whispering secrets)\" }, { value: \"a chessboard landscape with giant, sentient game pieces\", label: \"거대 체스 말 있는 체스판 풍경, 지각 있는\\n(Chessboard landscape, sentient pieces)\" }, { value: \"a forest where trees have human-like faces and watch passersby\", label: \"나무에 사람 얼굴, 지나가는 이 보는 숲\\n(Forest, trees with human faces)\" }, { value: \"a city built on the back of a colossal, ancient creature\", label: \"거대한 고대 생물 등 위 도시\\n(City on colossal creature's back)\" }, { value: \"a realm made of clouds, with cloud castles and pathways\", label: \"구름으로 만들어진 영역, 구름 성/길\\n(Realm made of clouds, cloud castles)\" }, { value: \"a surreal desert with melting clocks and distorted figures (Dali-esque)\", label: \"녹는 시계, 왜곡된 형상 사막 (달리풍)\\n(Surreal desert, melting clocks, Dali-esque)\" },\n        ],\n        [BackgroundSubCategory.ABSTRACT_MINIMALIST]: [\n          NONE_OPTION, { value: \"against a solid, vibrant color backdrop (e.g., crimson red, deep teal, sunshine yellow)\", label: \"생생한 단색 배경 (진홍색, 청록색 등)\\n(Solid vibrant color backdrop, e.g. teal)\" }, { value: \"with bold, contrasting geometric patterns (circles, triangles, lines, chevrons)\", label: \"굵고 대조적인 기하학 패턴 (원, 삼각형)\\n(Bold contrasting geometric patterns)\" }, { value: \"a soft, ethereal gradient background transitioning between harmonious pastel colors\", label: \"부드러운 파스텔 그라데이션 배경\\n(Soft ethereal gradient, pastel colors)\" }, { value: \"a minimalist textured wall (e.g., raw concrete, brushed metal, dark wood grain, stucco)\", label: \"미니멀 질감 벽 (콘크리트, 메탈, 나무결)\\n(Minimalist textured wall, concrete/metal)\" }, { value: \"a single, stark light source casting long, dramatic shadows on a plain surface\", label: \"단일 광원, 길고 극적인 그림자\\n(Single stark light source, long shadows)\" }, { value: \"monochromatic background with varying shades of a single color (e.g., greyscale, bluescale)\", label: \"단색 배경, 다양한 음영 (회색조 등)\\n(Monochromatic background, shades of color)\" }, { value: \"dynamic abstract light streaks, bokeh effects, and lens flares\", label: \"역동적 추상 광선, 보케, 렌즈 플레어\\n(Dynamic abstract light streaks, bokeh)\" }, { value: \"clean white void or infinite studio background, emphasizing subject\", label: \"깨끗한 흰색 공간/스튜디오 배경, 피사체 강조\\n(Clean white void/studio, emphasis)\" }, { value: \"watercolor splashes and drips in abstract, artistic forms against a paper texture\", label: \"추상 수채화 물감, 종이 질감\\n(Watercolor splashes/drips, abstract)\" }, { value: \"minimalist lines forming a subtle horizon, architectural suggestion, or wave pattern\", label: \"미니멀 선, 미묘한 수평선/구조/파도\\n(Minimalist lines, subtle horizon/structure)\" }, { value: \"a field of color, with the subject as a small focal point\", label: \"색면, 피사체는 작은 초점\\n(Field of color, subject as focal point)\" }, { value: \"negative space heavily utilized, subject off-center\", label: \"여백 활용, 피사체 중심에서 벗어남\\n(Negative space utilized, off-center)\" }, { value: \"fractal patterns, intricate and repeating\", label: \"프랙탈 패턴, 복잡하고 반복적\\n(Fractal patterns, intricate, repeating)\" },\n        ],\n        [BackgroundSubCategory.HISTORICAL_RUINS]: [\n          NONE_OPTION, { value: \"exploring crumbling ancient Greek temples (e.g., Parthenon) with broken columns\", label: \"고대 그리스 신전, 부서진 기둥\\n(Crumbling Greek temples, broken columns)\" }, { value: \"amongst overgrown Mayan pyramids in a dense, misty jungle setting\", label: \"초목 무성한 마야 피라미드, 안개 낀 정글\\n(Overgrown Mayan pyramids, misty jungle)\" }, { value: \"inside a dilapidated medieval castle keep, ivy climbing the stone walls\", label: \"황폐한 중세 성채, 담쟁이덩굴 돌벽\\n(Dilapidated medieval castle, ivy walls)\" }, { value: \"wandering through the Roman Forum ruins, with fallen statues and arches\", label: \"로마 포룸 유적, 쓰러진 조각상, 아치\\n(Roman Forum ruins, fallen statues, arches)\" }, { value: \"a forgotten, sand-covered city in the desert, half-buried structures (e.g., Petra-like)\", label: \"사막 잊혀진 도시, 모래 덮인 구조물\\n(Sand-covered city, half-buried, Petra)\" }, { value: \"ruined Gothic cathedral with broken stained glass windows and crumbling gargoyles\", label: \"폐허 고딕 대성당, 깨진 스테인드 글라스\\n(Ruined Gothic cathedral, broken glass)\" }, { value: \"ancient stone circle (e.g., Stonehenge) under a dramatic, starry night sky or sunset\", label: \"고대 석조 원형 유적 (스톤헨지), 별밤/일몰\\n(Ancient stone circle, starry night/sunset)\" }, { value: \"sunken city ruins visible beneath clear turquoise water, coral growing on structures\", label: \"침몰 도시 유적, 맑은 청록색 물, 산호\\n(Sunken city ruins, clear water, coral)\" }, { value: \"ruins of an ancient amphitheater\", label: \"고대 원형극장 유적\\n(Ruins of ancient amphitheater)\" }, { value: \"a desolate battlefield with remnants of ancient warfare\", label: \"황량한 전쟁터, 고대 전쟁 잔해\\n(Desolate battlefield, ancient warfare)\" }, { value: \"abandoned Victorian manor, haunted and decaying\", label: \"버려진 빅토리아풍 저택, 유령 들린 듯\\n(Abandoned Victorian manor, haunted)\" },\n        ],\n        [BackgroundSubCategory.SPACE_COSMIC]: [\n          NONE_OPTION, { value: \"floating in zero gravity inside a spaceship, looking out at a stunning view of Earth\", label: \"우주선 무중력, 지구 바라보는\\n(Floating zero-G in spaceship, view Earth)\" }, { value: \"standing on the desolate, red desert landscape of Mars, with Olympus Mons in distance\", label: \"화성 붉은 사막, 멀리 올림푸스 산\\n(Mars red desert, Olympus Mons distance)\" }, { value: \"amidst a vibrant, colorful nebula with swirling gas clouds and distant, twinkling stars\", label: \"생생한 성운, 소용돌이 가스, 먼 별\\n(Vibrant nebula, swirling gas, distant stars)\" }, { value: \"on an alien planet with bizarre, crystalline rock formations and multiple moons in a green sky\", label: \"외계 행성, 기괴한 수정 암석, 여러 달\\n(Alien planet, crystalline rocks, moons)\" }, { value: \"inside a sleek space station orbiting a colossal gas giant (like Jupiter or Saturn with rings)\", label: \"우주 정거장 내부, 거대 가스 행성 공전\\n(Space station orbiting gas giant, rings)\" }, { value: \"witnessing a spectacular supernova explosion from a safe distance, bright and colorful\", label: \"장엄한 초신성 폭발 목격, 밝고 화려\\n(Witnessing supernova, bright, colorful)\" }, { value: \"navigating through the intricate rings of Saturn, icy particles glittering\", label: \"토성 고리 통과, 얼음 입자 반짝임\\n(Navigating Saturn's rings, icy particles)\" }, { value: \"a dense field of asteroids drifting silently in the blackness of space\", label: \"소행성 지대, 우주 암흑 속 표류\\n(Asteroid field drifting in space)\" }, { value: \"a lone astronaut on the Moon, Earth visible in the sky\", label: \"달 위 외로운 우주비행사, 하늘에 지구\\n(Lone astronaut on Moon, Earth visible)\" }, { value: \"a futuristic colony on a terraformed planet\", label: \"테라포밍된 행성 위 미래 식민지\\n(Futuristic colony on terraformed planet)\" }, { value: \"approaching a mysterious black hole, light bending around it\", label: \"신비로운 블랙홀 접근, 빛 왜곡\\n(Approaching black hole, light bending)\" }, { value: \"inside a comet's tail, icy and ethereal\", label: \"혜성 꼬리 내부, 얼음 같고 천상적\\n(Inside comet's tail, icy, ethereal)\" },\n        ],\n        [BackgroundSubCategory.WEATHER_ATMOSPHERE]: [\n          NONE_OPTION, { value: \"a dramatic thunderstorm with flashing lightning and heavy rain\", label: \"극적인 뇌우, 번개, 폭우\\n(Dramatic thunderstorm, lightning, rain)\" }, { value: \"a serene foggy morning, mist obscuring distant objects\", label: \"고요한 안개 낀 아침, 안개 자욱\\n(Serene foggy morning, mist)\" }, { value: \"a blizzard with swirling snow and strong winds\", label: \"눈보라, 휘몰아치는 눈, 강풍\\n(Blizzard, swirling snow, strong winds)\" }, { value: \"a beautiful sunset with vibrant orange, pink, and purple clouds\", label: \"아름다운 일몰, 다채로운 구름색\\n(Beautiful sunset, vibrant clouds)\" }, { value: \"a clear night sky full of stars and the Milky Way visible\", label: \"맑은 밤하늘, 별 가득, 은하수\\n(Clear night sky, stars, Milky Way)\" }, { value: \"a double rainbow after a spring shower\", label: \"봄 소나기 후 쌍무지개\\n(Double rainbow after spring shower)\" }, { value: \"dust storm in a desert landscape\", label: \"사막 풍경 속 모래폭풍\\n(Dust storm in desert)\" }, { value: \"sunlight breaking through dark storm clouds (crepuscular rays)\", label: \"먹구름 뚫고 나오는 햇빛 (빛내림)\\n(Sunlight through storm clouds, rays)\" }, { value: \"hazy, humid summer day\", label: \"흐릿하고 습한 여름날\\n(Hazy, humid summer day)\" }, { value: \"crisp, clear autumn day with blue sky\", label: \"상쾌하고 맑은 가을날, 푸른 하늘\\n(Crisp, clear autumn day, blue sky)\" }, { value: \"light rain falling on a city street\", label: \"도시 거리에 가랑비 내리는\\n(Light rain on city street)\"},\n        ],\n        [BackgroundSubCategory.PATTERNS_TEXTURES]: [\n          NONE_OPTION, { value: \"against a wall of intricate, repeating geometric tiles\", label: \"복잡하고 반복적인 기하학 타일 벽\\n(Wall of geometric tiles, repeating)\" }, { value: \"on a surface of cracked earth or dry mud\", label: \"갈라진 땅 또는 마른 진흙 표면\\n(Cracked earth / dry mud surface)\" }, { value: \"surrounded by swirling, abstract smoke patterns\", label: \"소용돌이치는 추상적 연기 패턴\\n(Swirling abstract smoke patterns)\" }, { value: \"against a backdrop of flowing, liquid metal\", label: \"흐르는 액체 금속 배경\\n(Flowing liquid metal backdrop)\" }, { value: \"a textured surface of rough stone or brick\", label: \"거친 돌 또는 벽돌 질감 표면\\n(Rough stone or brick texture)\" }, { value: \"rippling water surface texture\", label: \"잔물결 이는 수면 질감\\n(Rippling water surface texture)\" }, { value: \"close-up of iridescent fish scales or feathers\", label: \"무지갯빛 물고기 비늘/깃털 클로즈업\\n(Iridescent fish scales/feathers closeup)\" }, { value: \"a field of stars as a textured background\", label: \"별밭 질감 배경\\n(Field of stars as textured background)\" }, { value: \"a wall covered in dense, green ivy\", label: \"푸른 담쟁이덩굴로 뒤덮인 벽\\n(Wall covered in dense green ivy)\" }, { value: \"polished wood grain texture\", label: \"윤이 나는 나뭇결 질감\\n(Polished wood grain texture)\" }, { value: \"simple wallpaper pattern\", label: \"단순한 벽지 패턴\\n(Simple wallpaper pattern)\"},\n        ],\n      };\n      \n\n      const DEFAULT_SELECTIONS = {\n        [Category.GENDER]: GENDER_OPTIONS[0].value,\n        [Category.RACE]: RACE_OPTIONS[0].value,\n        [Category.OCCUPATION]: NONE_OPTION_VALUE, \n        customOccupationDetail: \"\",\n        [Category.STYLE]: NONE_OPTION_VALUE,\n        [Category.ASPECT_RATIO]: NONE_OPTION_VALUE,\n        [Category.FRAMING]: NONE_OPTION_VALUE,\n        expressionSubCategory: EXPRESSION_SUB_CATEGORY_LIST[0].value,\n        expressionOption: EXPRESSION_DETAIL_OPTIONS[EXPRESSION_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customExpressionDetail: \"\",\n        actionSubCategory: ACTION_SUB_CATEGORY_LIST.find(opt => opt.value === ActionSubCategory.DAILY_LIFE)?.value || ACTION_SUB_CATEGORY_LIST[0].value,\n        actionOption: ACTION_DETAIL_OPTIONS[ActionSubCategory.DAILY_LIFE]?.[0]?.value || ACTION_DETAIL_OPTIONS[ACTION_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customActionDetail: \"\",\n        clothingSubCategory: CLOTHING_SUB_CATEGORY_LIST.find(opt => opt.value === ClothingSubCategory.EVERYDAY_WEAR)?.value || CLOTHING_SUB_CATEGORY_LIST[0].value,\n        clothingOption: CLOTHING_DETAIL_OPTIONS[ClothingSubCategory.EVERYDAY_WEAR]?.[0]?.value || CLOTHING_DETAIL_OPTIONS[CLOTHING_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customClothingDetail: \"\",\n        accessoriesSubCategory: ACCESSORIES_SUB_CATEGORY_LIST[0].value,\n        accessoriesOption: ACCESSORIES_DETAIL_OPTIONS[ACCESSORIES_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customAccessoriesDetail: \"\",\n        backgroundSubCategory: BACKGROUND_SUB_CATEGORY_LIST.find(opt => opt.value === BackgroundSubCategory.EVERYDAY_LOCATIONS)?.value || BACKGROUND_SUB_CATEGORY_LIST[0].value,\n        backgroundOption: BACKGROUND_DETAIL_OPTIONS[BackgroundSubCategory.EVERYDAY_LOCATIONS]?.[0]?.value || BACKGROUND_DETAIL_OPTIONS[BACKGROUND_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customBackgroundDetail: \"\",\n      };\n\n      // --- Global State ---\n      let selections = { ...DEFAULT_SELECTIONS };\n      let generatedPrompt = \"\";\n      let generatedImageFXPrompt = \"\";\n      let generatedMidjourneyPrompt = \"\";\n      let generatedStableDiffusionPrompt = \"\";\n      let error = null;\n      let promptCopied = false;\n      let imageFXPromptCopied = false;\n      let midjourneyPromptCopied = false;\n      let stableDiffusionPromptCopied = false;\n\n      // --- SVG Icons ---\n      const ClipboardIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2 inline-block\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\" /></svg>`;\n      const YouTubeIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2 inline-block\" fill=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z\" /></svg>`;\n      const ShuffleIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-1 inline-block\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19 11H9.707l2.147-2.146a.5.5 0 00-.708-.708l-3 3a.5.5 0 000 .708l3 3a.5.5 0 00.708-.708L9.707 13H19a1 1 0 001-1V9a1 1 0 00-1-1z\" /><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M5 13h9.293l-2.147 2.146a.5.5 0 00.708.708l3-3a.5.5 0 000-.708l-3-3a.5.5 0 00-.708.708L14.293 11H5a1 1 0 00-1 1v3a1 1 0 001 1z\" /></svg>`;\n      const DiceIconSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2 inline-block\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.106-1.105\" /><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M16 19.5V19a2.5 2.5 0 00-5-2.5H8.5\" /><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M10.172 5.172a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656L13.06 2.06\" /><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8 4.5V5a2.5 2.5 0 005 2.5h2.5\" /><circle cx=\"6.5\" cy=\"17.5\" r=\"1.5\" fill=\"currentColor\" /><circle cx=\"17.5\" cy=\"6.5\" r=\"1.5\" fill=\"currentColor\" /></svg>`;\n\n      // --- Helper Functions ---\n      function getRandomOptionExcludingNone(options) {\n        const filteredOptions = options.filter(opt => opt.value !== NONE_OPTION_VALUE);\n        if (filteredOptions.length > 0) {\n          return filteredOptions[Math.floor(Math.random() * filteredOptions.length)].value;\n        }\n        return options.find(opt => opt.value === NONE_OPTION_VALUE)?.value || (options.length > 0 ? options[0].value : NONE_OPTION_VALUE);\n      }\n\n      function resetOutputs() {\n        generatedPrompt = \"\"; \n        generatedImageFXPrompt = \"\";\n        generatedMidjourneyPrompt = \"\";\n        generatedStableDiffusionPrompt = \"\";\n        error = null;\n        promptCopied = false;\n        imageFXPromptCopied = false;\n        midjourneyPromptCopied = false;\n        stableDiffusionPromptCopied = false;\n        renderResultsPanel(); // Re-render results to clear them\n      }\n\n      // --- DOM Creation Functions ---\n      function createElement(tag, classList = [], attributes = {}, innerHTML = '', textContent = '') {\n        const el = document.createElement(tag);\n        if (classList.length > 0) el.classList.add(...classList);\n        for (const key in attributes) {\n          el.setAttribute(key, attributes[key]);\n        }\n        if (innerHTML) el.innerHTML = innerHTML;\n        if (textContent) el.textContent = textContent;\n        return el;\n      }\n      \n      function createSelectDropdown(id, labelText, options, value, onChangeCallback, customClassName = '') {\n        const baseDivClasses = ['mb-4'];\n        const allDivClasses = customClassName \n            ? baseDivClasses.concat(customClassName.split(' ').filter(c => c.trim() !== '')) \n            : baseDivClasses;\n        const div = createElement('div', allDivClasses);\n\n        const label = createElement('label', ['block', 'text-sm', 'font-medium', 'text-gray-500', 'mb-1', 'whitespace-pre-line', 'h-10'], { for: id }, '', labelText);\n        \n        const select = createElement('select', ['w-full', 'p-3', 'border', 'border-neutral-light', 'rounded-lg', 'shadow-sm', 'focus:ring-brand-secondary', 'focus:border-brand-secondary', 'transition', 'duration-150', 'ease-in-out', 'bg-white', 'text-neutral-dark'], { id });\n        select.value = value;\n        select.addEventListener('change', onChangeCallback);\n\n        options.forEach(option => {\n          const optElement = createElement('option', [], { value: option.value }, '', option.label.replace(/\\n/g, ' '));\n          select.appendChild(optElement);\n        });\n\n        div.appendChild(label);\n        div.appendChild(select);\n        return div;\n      }\n      \n      function createTextInput(id, placeholder, value, onChangeCallback, customClassName = '') {\n        const inputClasses = ['w-full', 'p-3', 'border', 'border-neutral-light', 'rounded-lg', 'shadow-sm', 'focus:ring-brand-secondary', 'focus:border-brand-secondary', 'transition', 'duration-150', 'ease-in-out', 'bg-white', 'text-neutral-dark', 'placeholder-gray-400'];\n        if (customClassName) {\n            inputClasses.push(...customClassName.split(' ').filter(c => c.trim() !== ''));\n        }\n        const input = createElement('input', inputClasses, { type: 'text', id, placeholder });\n        input.value = value;\n        input.addEventListener('input', onChangeCallback); \n        return input;\n      }\n\n      function createButton(id, text, iconSVG, onClickCallback, classList = [], ariaLabel = '') {\n        const button = createElement('button', classList, { id, 'aria-label': ariaLabel || text }, (iconSVG ? iconSVG : '') + text);\n        button.addEventListener('click', onClickCallback);\n        return button;\n      }\n\n      // --- Event Handler Functions ---\n      function handleSimpleSelectionChange(categoryKey, value) {\n        selections[categoryKey] = value;\n        resetOutputs();\n      }\n\n      function handleOccupationChange(value) {\n        selections[Category.OCCUPATION] = value;\n        selections.customOccupationDetail = \"\";\n        document.getElementById('customOccupationDetail').value = \"\"; // Clear input field\n        resetOutputs();\n      }\n\n      function handleCustomOccupationDetailChange(event) {\n        selections.customOccupationDetail = event.target.value;\n        resetOutputs();\n      }\n      \n      function handleSubCategoryChange(categoryType, subCategoryValue) {\n        const subCatKey = `${categoryType}SubCategory`;\n        const optionKey = `${categoryType}Option`;\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        \n        selections[subCatKey] = subCategoryValue;\n        const detailOptionsForSubCat = getDetailOptionsForSubCategory(categoryType, subCategoryValue);\n        selections[optionKey] = detailOptionsForSubCat.find(opt => opt.value === NONE_OPTION_VALUE)?.value || NONE_OPTION_VALUE;\n        selections[customDetailKey] = \"\";\n\n        // Re-render the specific detail dropdown and custom input\n        const detailDropdownId = `${categoryType}Option`;\n        const customInputId = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        const detailDropdown = document.getElementById(detailDropdownId);\n        const customInput = document.getElementById(customInputId);\n\n        if (detailDropdown) {\n            detailDropdown.innerHTML = ''; // Clear existing options\n            detailOptionsForSubCat.forEach(opt => {\n                const optionElement = createElement('option', [], {value: opt.value}, '', opt.label.replace(/\\n/g, ' '));\n                detailDropdown.appendChild(optionElement);\n            });\n            detailDropdown.value = selections[optionKey];\n        }\n        if (customInput) {\n            customInput.value = \"\";\n        }\n        resetOutputs();\n      }\n\n      function handleDetailOptionChange(categoryType, optionValue) {\n        const optionKey = `${categoryType}Option`;\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n\n        selections[optionKey] = optionValue;\n        selections[customDetailKey] = \"\";\n\n        const customInputId = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        const customInput = document.getElementById(customInputId);\n        if (customInput) customInput.value = \"\";\n        \n        resetOutputs();\n      }\n      \n      function handleCustomDetailChange(categoryType, customValue) {\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        selections[customDetailKey] = customValue;\n        resetOutputs();\n      }\n\n      function handleRandomizeGenderRace() {\n        selections[Category.GENDER] = getRandomOptionExcludingNone(GENDER_OPTIONS);\n        selections[Category.RACE] = getRandomOptionExcludingNone(RACE_OPTIONS);\n        \n        // Update UI\n        document.getElementById(Category.GENDER).value = selections[Category.GENDER];\n        document.getElementById(Category.RACE).value = selections[Category.RACE];\n        resetOutputs();\n      }\n\n      function handleRandomizeRemainingDetails() {\n        selections[Category.STYLE] = getRandomOptionExcludingNone(STYLE_OPTIONS);\n        selections[Category.ASPECT_RATIO] = getRandomOptionExcludingNone(ASPECT_RATIO_OPTIONS);\n        selections[Category.FRAMING] = getRandomOptionExcludingNone(FRAMING_OPTIONS);\n\n        document.getElementById(Category.STYLE).value = selections[Category.STYLE];\n        document.getElementById(Category.ASPECT_RATIO).value = selections[Category.ASPECT_RATIO];\n        document.getElementById(Category.FRAMING).value = selections[Category.FRAMING];\n\n        ['expression', 'action', 'clothing', 'accessories', 'background'].forEach(type => {\n            const subCatList = getSubCategoryListByType(type);\n            if (!subCatList || subCatList.length === 0) return;\n            const randomSubCat = subCatList[Math.floor(Math.random() * subCatList.length)].value;\n            selections[`${type}SubCategory`] = randomSubCat;\n            \n            const detailOpts = getDetailOptionsForSubCategory(type, randomSubCat);\n            selections[`${type}Option`] = getRandomOptionExcludingNone(detailOpts);\n            selections[`custom${type.charAt(0).toUpperCase() + type.slice(1)}Detail`] = \"\";\n\n            // Update UI for complex category\n            document.getElementById(`${type}SubCategory`).value = randomSubCat;\n            const detailDropdown = document.getElementById(`${type}Option`);\n            detailDropdown.innerHTML = '';\n            detailOpts.forEach(opt => {\n              const optionEl = createElement('option',[], {value: opt.value}, '', opt.label.replace(/\\n/g, ' '));\n              detailDropdown.appendChild(optionEl);\n            });\n            detailDropdown.value = selections[`${type}Option`];\n            document.getElementById(`custom${type.charAt(0).toUpperCase() + type.slice(1)}Detail`).value = \"\";\n        });\n        resetOutputs();\n      }\n\n      function constructPrompt() {\n        error = null;\n        resetOutputs(); \n\n        const {\n          [Category.GENDER]: gender, [Category.RACE]: race, [Category.OCCUPATION]: occupation, customOccupationDetail,\n          [Category.STYLE]: style, [Category.ASPECT_RATIO]: aspectRatio, [Category.FRAMING]: framing,\n          expressionSubCategory, expressionOption, customExpressionDetail,\n          actionSubCategory, actionOption, customActionDetail,\n          clothingSubCategory, clothingOption, customClothingDetail,\n          accessoriesSubCategory, accessoriesOption, customAccessoriesDetail,\n          backgroundSubCategory, backgroundOption, customBackgroundDetail,\n        } = selections;\n        \n        const finalOccupation = customOccupationDetail || (occupation !== NONE_OPTION_VALUE ? occupation : \"\");\n        const finalExpression = customExpressionDetail || (expressionOption !== NONE_OPTION_VALUE ? expressionOption : \"\");\n        const finalAction = customActionDetail || (actionOption !== NONE_OPTION_VALUE ? actionOption : \"\");\n        const finalClothing = customClothingDetail || (clothingOption !== NONE_OPTION_VALUE ? clothingOption : \"\");\n        const finalAccessories = customAccessoriesDetail || (accessoriesOption !== NONE_OPTION_VALUE ? accessoriesOption : \"\");\n        const finalBackground = customBackgroundDetail || (backgroundOption !== NONE_OPTION_VALUE ? backgroundOption : \"\");\n\n        let dalle2PromptText = style !== NONE_OPTION_VALUE ? `A ${style} image of a ${race} ${gender}` : `An image of a ${race} ${gender}`;\n        if (finalOccupation) dalle2PromptText += ` who is a ${finalOccupation}`;\n        if (framing !== NONE_OPTION_VALUE) dalle2PromptText += `, ${framing}`;\n        if (finalExpression) dalle2PromptText += `, ${finalExpression}`;\n        if (finalAction) dalle2PromptText += `, ${finalAction}`;\n        if (finalClothing) dalle2PromptText += `, wearing ${finalClothing}`;\n        if (finalAccessories) dalle2PromptText += `, with ${finalAccessories}`;\n        if (finalBackground) dalle2PromptText += `. The scene is ${finalBackground}`;\n        dalle2PromptText += `. High detail, cinematic lighting, intricate details, sharp focus.`;\n        if (aspectRatio !== NONE_OPTION_VALUE) dalle2PromptText += ` Image aspect ratio: ${aspectRatio}.`;\n        generatedPrompt = dalle2PromptText;\n\n        let gpt4oDalle3PromptText = `Create an image of a {${race}} {${gender}}.`;\n        if (finalOccupation) gpt4oDalle3PromptText += ` Occupation: {${finalOccupation}}.`;\n        if (finalExpression) gpt4oDalle3PromptText += ` Facial expression: {${finalExpression}}.`;\n        if (finalAction) gpt4oDalle3PromptText += ` Action/Pose: {${finalAction}}.`;\n        if (finalClothing) gpt4oDalle3PromptText += ` Clothing: {${finalClothing}}.`;\n        if (finalAccessories) gpt4oDalle3PromptText += ` Accessories: {${finalAccessories}}.`;\n        if (finalBackground) gpt4oDalle3PromptText += ` Background: {${finalBackground}}.`;\n        if (style !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Art style: {${style}}.`;\n        if (framing !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Shot type/framing: {${framing}}.`;\n        if (aspectRatio !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Aspect ratio: {${aspectRatio}}.`;\n        gpt4oDalle3PromptText += ` Additional details: {high detail, cinematic lighting, intricate details, sharp focus}.`;\n        generatedImageFXPrompt = gpt4oDalle3PromptText.replace(/{\\s*}/g, '').replace(/\\.\\s*\\./g, '.').trim();\n\n        const mjAspectRatioToken = aspectRatio !== NONE_OPTION_VALUE && aspectRatio.includes(':') ? `--ar ${aspectRatio}` : ``;\n        let mjPromptParts = [];\n        mjPromptParts.push(`${race} ${gender}`);\n        if (finalOccupation) mjPromptParts.push(finalOccupation);\n        if (finalExpression) mjPromptParts.push(finalExpression);\n        if (finalAction) mjPromptParts.push(finalAction);\n        if (finalClothing) mjPromptParts.push(`wearing ${finalClothing}`);\n        if (finalAccessories) mjPromptParts.push(`with ${finalAccessories}`);\n        if (finalBackground) mjPromptParts.push(`in ${finalBackground}`);\n        if (style !== NONE_OPTION_VALUE) mjPromptParts.push(style);\n        if (framing !== NONE_OPTION_VALUE) mjPromptParts.push(framing);\n        mjPromptParts.push(\"high detail, cinematic lighting, intricate details, sharp focus\");\n        let mjPromptStr = mjPromptParts.filter(p => p && p.trim() !== \"\").join(', ');\n        if (mjAspectRatioToken) mjPromptStr += ` ${mjAspectRatioToken}`;\n        generatedMidjourneyPrompt = mjPromptStr.replace(/\\s*,\\s*,/g, ',').replace(/,\\s*$/,'').trim();\n\n        let sdPositivePromptParts = [];\n        const addSdPart = (part, weight = 1.0) => {\n          if (part && part.trim() !== \"\") {\n            const cleanedPart = part.split('\\n')[0]; \n            if (weight !== 1.0) sdPositivePromptParts.push(`(${cleanedPart}:${weight.toFixed(1)})`);\n            else sdPositivePromptParts.push(cleanedPart);\n          }\n        };\n        addSdPart(`${race} ${gender}`, 1.3);\n        if (finalOccupation) addSdPart(finalOccupation, 1.2);\n        if (finalExpression) addSdPart(finalExpression, 1.1);\n        if (finalAction) addSdPart(finalAction, 1.1);\n        if (finalClothing) addSdPart(`wearing ${finalClothing}`, 1.1);\n        if (finalAccessories) addSdPart(`with ${finalAccessories}`, 1.1);\n        if (finalBackground) addSdPart(`in ${finalBackground}`, 1.1);\n        if (style !== NONE_OPTION_VALUE) addSdPart(style, 1.2);\n        if (framing !== NONE_OPTION_VALUE) addSdPart(framing);\n        addSdPart(\"high detail\", 1.2); addSdPart(\"cinematic lighting\", 1.1); addSdPart(\"intricate details\"); addSdPart(\"sharp focus\");\n        const sdPositivePrompt = sdPositivePromptParts.join(', ');\n        const sdNegativePrompt = \"ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, extra limbs, disfigured, deformed, body out of frame, blurry, bad anatomy, blurred, watermark, grainy, signature, cut off, draft, low quality, worst quality, (multiple people:1.3), (extra fingers:1.2), (mutated hands:1.2), (bad proportions:1.1), (jpeg artifacts:1.1)\";\n        generatedStableDiffusionPrompt = `Positive: ${sdPositivePrompt}\\n\\nNegative: ${sdNegativePrompt}`;\n        \n        renderResultsPanel();\n      }\n\n      function handleCopyPrompt(promptToCopy, type) {\n        if (!promptToCopy) return;\n        navigator.clipboard.writeText(promptToCopy).then(() => {\n          let copyButton;\n          if (type === 'general') { promptCopied = true; copyButton = document.getElementById('copyGeneralPrompt'); }\n          else if (type === 'imagefx') { imageFXPromptCopied = true; copyButton = document.getElementById('copyImageFXPrompt'); }\n          else if (type === 'midjourney') { midjourneyPromptCopied = true; copyButton = document.getElementById('copyMidjourneyPrompt'); }\n          else if (type === 'stablediffusion') { stableDiffusionPromptCopied = true; copyButton = document.getElementById('copyStableDiffusionPrompt');}\n          \n          if(copyButton) {\n            const originalText = copyButton.innerHTML;\n            const copiedTextContent = type === 'general' ? 'DALL·E 2/Bing/Image-FX 복사됨! (Copied!)' :\n                                   type === 'imagefx' ? 'GPT-4o/DALL·E 3 복사됨! (Copied!)' :\n                                   type === 'midjourney' ? 'Midjourney 복사됨! (Copied!)' :\n                                   'Stable Diffusion 복사됨! (Copied!)';\n            copyButton.innerHTML = ClipboardIconSVG + copiedTextContent;\n            setTimeout(() => {\n              if (type === 'general') promptCopied = false;\n              else if (type === 'imagefx') imageFXPromptCopied = false;\n              else if (type === 'midjourney') midjourneyPromptCopied = false;\n              else if (type === 'stablediffusion') stableDiffusionPromptCopied = false;\n              copyButton.innerHTML = originalText; // Restore original button text\n            }, 2000);\n          }\n        }).catch(err => {\n          console.error(`Failed to copy ${type} prompt: `, err);\n          error = `프롬프트 복사에 실패했습니다. (Failed to copy ${type} prompt.)`;\n          renderResultsPanel();\n        });\n      }\n      \n      function getSubCategoryListByType(type) {\n        if (type === 'expression') return EXPRESSION_SUB_CATEGORY_LIST;\n        if (type === 'action') return ACTION_SUB_CATEGORY_LIST;\n        if (type === 'clothing') return CLOTHING_SUB_CATEGORY_LIST;\n        if (type === 'accessories') return ACCESSORIES_SUB_CATEGORY_LIST;\n        if (type === 'background') return BACKGROUND_SUB_CATEGORY_LIST;\n        return [];\n      }\n\n      function getDetailOptionsForSubCategory(type, subCategoryValue) {\n          if (type === 'expression') return EXPRESSION_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'action') return ACTION_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'clothing') return CLOTHING_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'accessories') return ACCESSORIES_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'background') return BACKGROUND_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          return [NONE_OPTION];\n      }\n\n      // --- UI Rendering Functions ---\n      function renderApp() {\n        const root = document.getElementById('root');\n        root.innerHTML = ''; // Clear previous content\n        root.className = 'min-h-screen bg-gradient-to-br from-neutral-dark via-gray-800 to-neutral-dark text-neutral-extralight p-4 sm:p-8 flex flex-col items-center';\n\n        // Header\n        const header = createElement('header', ['w-full', 'max-w-5xl', 'mb-8', 'text-center']);\n        header.appendChild(createElement('h1', ['text-4xl', 'sm:text-5xl', 'font-bold', 'text-transparent', 'bg-clip-text', 'bg-gradient-to-r', 'from-brand-secondary', 'via-brand-accent', 'to-pink-500', 'mb-2'], {}, 'AI 이미지 프롬프트 생성기'));\n        header.appendChild(createElement('p', ['text-lg', 'text-neutral-light'], {}, '원하는 옵션을 선택하여 독창적인 이미지 프롬프트를 만들어보세요!'));\n        root.appendChild(header);\n\n        // Main\n        const main = createElement('main', ['w-full', 'max-w-5xl', 'grid', 'grid-cols-1', 'gap-8']);\n        \n        // Options Panel\n        const optionsPanel = createElement('section', ['bg-gray-800', 'p-6', 'rounded-xl', 'shadow-2xl', 'border', 'border-gray-700', 'space-y-8']);\n        optionsPanel.appendChild(createElement('h2', ['text-2xl', 'font-semibold', 'mb-3', 'text-brand-accent', 'border-b-2', 'border-brand-accent', 'pb-2'], {}, '옵션 선택 (Select Options)'));\n        \n        // Basic Character\n        const basicCharDiv = createElement('div');\n        basicCharDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '기본 캐릭터 설정 (Basic Character)'));\n        const basicCharGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'gap-4']);\n        basicCharGrid.appendChild(createSelectDropdown(Category.GENDER, Category.GENDER, GENDER_OPTIONS, selections[Category.GENDER], (e) => handleSimpleSelectionChange(Category.GENDER, e.target.value), 'text-neutral-dark'));\n        basicCharGrid.appendChild(createSelectDropdown(Category.RACE, Category.RACE, RACE_OPTIONS, selections[Category.RACE], (e) => handleSimpleSelectionChange(Category.RACE, e.target.value), 'text-neutral-dark'));\n        basicCharDiv.appendChild(basicCharGrid);\n        basicCharDiv.appendChild(createButton('randomizeGenderRaceBtn', '랜덤 성별 & 인종 (Random Gender & Race)', ShuffleIconSVG, handleRandomizeGenderRace, ['w-full', 'mt-4', 'bg-purple-600', 'hover:bg-purple-700', 'text-white', 'font-semibold', 'py-2.5', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-purple-400', 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center', 'transform', 'hover:scale-105']));\n        optionsPanel.appendChild(basicCharDiv);\n\n        // Occupation\n        const occupationDiv = createElement('div');\n        occupationDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '직업 설정 (Occupation)'));\n        const occupationInnerDiv = createElement('div', ['mt-0']);\n        occupationInnerDiv.appendChild(createSelectDropdown(Category.OCCUPATION, Category.OCCUPATION, OCCUPATION_OPTIONS, selections[Category.OCCUPATION], (e) => handleOccupationChange(e.target.value), 'text-neutral-dark mb-2'));\n        occupationInnerDiv.appendChild(createTextInput('customOccupationDetail', '또는 직접 직업 입력 (Or type custom occupation)...', selections.customOccupationDetail, (e) => handleCustomOccupationDetailChange(e)));\n        occupationDiv.appendChild(occupationInnerDiv);\n        optionsPanel.appendChild(occupationDiv);\n\n        // Randomize Others Button and Art Style/Framing/Ratio\n        const randomizeAndArtDiv = createElement('div');\n        randomizeAndArtDiv.appendChild(createButton('randomizeOthersBtn', '선택 캐릭터 외 랜덤 조합 (Randomize Others)', DiceIconSVG, handleRandomizeRemainingDetails, ['w-full', 'mb-4', 'bg-teal-500', 'hover:bg-teal-600', 'text-white', 'font-semibold', 'py-2.5', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-teal-300', 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center', 'transform', 'hover:scale-105']));\n        randomizeAndArtDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '화풍, 구도 및 비율 (Art Style, Framing & Ratio)'));\n        const artStyleGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'md:grid-cols-3', 'gap-4']);\n        artStyleGrid.appendChild(createSelectDropdown(Category.STYLE, Category.STYLE, STYLE_OPTIONS, selections[Category.STYLE], (e) => handleSimpleSelectionChange(Category.STYLE, e.target.value), 'text-neutral-dark'));\n        artStyleGrid.appendChild(createSelectDropdown(Category.FRAMING, Category.FRAMING, FRAMING_OPTIONS, selections[Category.FRAMING], (e) => handleSimpleSelectionChange(Category.FRAMING, e.target.value), 'text-neutral-dark'));\n        artStyleGrid.appendChild(createSelectDropdown(Category.ASPECT_RATIO, Category.ASPECT_RATIO, ASPECT_RATIO_OPTIONS, selections[Category.ASPECT_RATIO], (e) => handleSimpleSelectionChange(Category.ASPECT_RATIO, e.target.value), 'text-neutral-dark'));\n        randomizeAndArtDiv.appendChild(artStyleGrid);\n        optionsPanel.appendChild(randomizeAndArtDiv);\n\n        // Complex Categories\n        const complexCategoryConfigs = [\n            { type: 'expression', label: Category.EXPRESSION, subCategoryList: EXPRESSION_SUB_CATEGORY_LIST, detailOptionsMap: EXPRESSION_DETAIL_OPTIONS },\n            { type: 'action', label: Category.ACTION, subCategoryList: ACTION_SUB_CATEGORY_LIST, detailOptionsMap: ACTION_DETAIL_OPTIONS },\n            { type: 'clothing', label: Category.CLOTHING, subCategoryList: CLOTHING_SUB_CATEGORY_LIST, detailOptionsMap: CLOTHING_DETAIL_OPTIONS },\n            { type: 'accessories', label: Category.ACCESSORIES, subCategoryList: ACCESSORIES_SUB_CATEGORY_LIST, detailOptionsMap: ACCESSORIES_DETAIL_OPTIONS },\n            { type: 'background', label: Category.BACKGROUND, subCategoryList: BACKGROUND_SUB_CATEGORY_LIST, detailOptionsMap: BACKGROUND_DETAIL_OPTIONS },\n        ];\n\n        complexCategoryConfigs.forEach(config => {\n            const catDiv = createElement('div', [], { id: `${config.type}Container`});\n            catDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, config.label.replace('\\\\n', ' ')));\n            const catGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'gap-x-4']);\n            \n            catGrid.appendChild(createSelectDropdown(\n                `${config.type}SubCategory`, \n                `${config.label.split('\\n')[0]} 타입 (Type)`, \n                config.subCategoryList, \n                selections[`${config.type}SubCategory`], \n                (e) => handleSubCategoryChange(config.type, e.target.value),\n                'text-neutral-dark'\n            ));\n            \n            const detailContainer = createElement('div');\n            const currentSubCategoryValue = selections[`${config.type}SubCategory`] || (config.subCategoryList.length > 0 ? config.subCategoryList[0].value : undefined);\n            const currentDetailOptions = currentSubCategoryValue ? (config.detailOptionsMap[currentSubCategoryValue] || [NONE_OPTION]) : [NONE_OPTION];\n            \n            detailContainer.appendChild(createSelectDropdown(\n                `${config.type}Option`, \n                `세부 ${config.label.split('\\n')[0]} (Detail)`, \n                currentDetailOptions, \n                selections[`${config.type}Option`], \n                (e) => handleDetailOptionChange(config.type, e.target.value),\n                'text-neutral-dark mb-2'\n            ));\n            detailContainer.appendChild(createTextInput(\n                `custom${config.type.charAt(0).toUpperCase() + config.type.slice(1)}Detail`,\n                `또는 직접 입력 (Or type custom ${config.type})...`,\n                selections[`custom${config.type.charAt(0).toUpperCase() + config.type.slice(1)}Detail`],\n                (e) => handleCustomDetailChange(config.type, e.target.value)\n            ));\n            catGrid.appendChild(detailContainer);\n            catDiv.appendChild(catGrid);\n            optionsPanel.appendChild(catDiv);\n        });\n\n        optionsPanel.appendChild(createButton('generatePromptBtn', '프롬프트 생성 (Generate Prompt)', null, constructPrompt, ['w-full', 'mt-6', 'bg-gradient-to-r', 'from-brand-primary', 'to-brand-secondary', 'hover:from-brand-secondary', 'hover:to-brand-primary', 'text-white', 'font-semibold', 'py-3', 'px-6', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transform', 'hover:scale-105', 'transition', 'duration-300', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-brand-accent', 'focus:ring-opacity-50']));\n        main.appendChild(optionsPanel);\n\n        // Results Panel (placeholder, will be populated by renderResultsPanel)\n        const resultsPanel = createElement('section', ['bg-gray-800', 'p-6', 'rounded-xl', 'shadow-2xl', 'border', 'border-gray-700', 'space-y-4'], { id: 'resultsPanel' });\n        main.appendChild(resultsPanel);\n        renderResultsPanel(); // Initial render of results panel\n\n        root.appendChild(main);\n\n        // Footer\n        const footer = createElement('footer', ['w-full', 'max-w-5xl', 'mt-12', 'text-center', 'text-neutral-medium', 'text-sm', 'space-y-3']);\n        footer.appendChild(createElement('p', [], {}, `Created by GPT PARK &copy; ${new Date().getFullYear()}. GPT PARK의 AI 이미지 프롬프트 생성기.`));\n        const youtubeLink = createElement('a', ['inline-flex', 'items-center', 'justify-center', 'bg-red-600', 'hover:bg-red-700', 'text-white', 'font-semibold', 'py-2', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-300', 'ease-in-out', 'transform', 'hover:scale-105', 'focus:outline-none', 'focus:ring-2', 'focus:ring-red-400', 'focus:ring-opacity-50'], { href: \"https://www.youtube.com/@AIFACT-GPTPARK\", target: \"_blank\", rel: \"noopener noreferrer\", 'aria-label': \"GPT PARK 유튜브 채널 방문\" }, YouTubeIconSVG + 'GPT PARK 유튜브 채널 (YouTube)');\n        footer.appendChild(youtubeLink);\n        root.appendChild(footer);\n      }\n\n      function renderResultsPanel() {\n        const resultsPanel = document.getElementById('resultsPanel');\n        if (!resultsPanel) return;\n        resultsPanel.innerHTML = ''; // Clear previous results\n\n        resultsPanel.appendChild(createElement('h2', ['text-2xl', 'font-semibold', 'mb-3', 'text-brand-accent', 'border-b-2', 'border-brand-accent', 'pb-2'], {}, '결과 (Results)'));\n\n        if (error) {\n          const errorDiv = createElement('div', ['bg-red-100', 'border-l-4', 'border-red-500', 'text-red-700', 'p-4', 'my-4', 'rounded-md', 'shadow-md'], { role: 'alert' });\n          errorDiv.appendChild(createElement('p', ['font-bold'], {}, '오류 (Error)'));\n          errorDiv.appendChild(createElement('p', [], {}, error));\n          resultsPanel.appendChild(errorDiv);\n        }\n\n        const createPromptSection = (id, title, promptText, copyHandler, copiedFlag, buttonTextPrefix, bgColorClass, borderColorClass, titleColorClass, textBgClass, buttonBgClass, buttonHoverBgClass, buttonRingClass) => {\n            if (!promptText) return null;\n            const sectionDiv = createElement('div', ['p-4', 'rounded-xl', bgColorClass, 'border', borderColorClass]);\n            sectionDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-2', titleColorClass], {}, title));\n            const promptDisplay = createElement('div', [textBgClass, 'p-3', 'rounded-lg', 'text-neutral-extralight', 'text-sm', 'leading-relaxed', 'shadow-inner', 'break-words']);\n            promptDisplay.appendChild(createElement('p', [], {}, promptText));\n            sectionDiv.appendChild(promptDisplay);\n            \n            const buttonText = copiedFlag ? `${buttonTextPrefix.split(' ')[0]} 복사됨! (Copied!)` : `${buttonTextPrefix} 프롬프트 복사`;\n            sectionDiv.appendChild(createButton(\n                `copy${id}Prompt`,\n                buttonText,\n                ClipboardIconSVG,\n                () => copyHandler(promptText, id.toLowerCase()),\n                ['w-full', 'mt-3', buttonBgClass, buttonHoverBgClass, 'text-white', 'font-semibold', 'py-2', 'px-4', 'rounded-lg', 'shadow-sm', 'hover:shadow-md', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', buttonRingClass, 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center'],\n                copiedFlag ? `${buttonTextPrefix} 프롬프트 복사됨` : `${buttonTextPrefix} 프롬프트 복사`\n            ));\n            return sectionDiv;\n        };\n        \n        const generalPromptSection = createPromptSection('General', 'DALL·E 2 / Bing Image Creator / Google Image-FX 프롬프트 (For DALL·E 2 / Bing Image Creator / Google Image-FX):', generatedPrompt, handleCopyPrompt, promptCopied, 'DALL·E 2/Bing/Image-FX', 'bg-gray-700', 'border-gray-600', 'text-neutral-light', 'bg-gray-600', 'bg-gray-500', 'hover:bg-gray-400', 'focus:ring-gray-300');\n        if(generalPromptSection) resultsPanel.appendChild(generalPromptSection);\n\n        const imageFXPromptSection = createPromptSection('ImageFX', 'GPT-4o / DALL·E 3 / OpenAI API 프롬프트 (For GPT-4o / DALL·E 3 / OpenAI API):', generatedImageFXPrompt, handleCopyPrompt, imageFXPromptCopied, 'GPT-4o/DALL·E 3/API', 'bg-blue-950', 'border-blue-800', 'text-blue-300', 'bg-blue-900', 'bg-blue-700', 'hover:bg-blue-600', 'focus:ring-blue-500');\n        if(imageFXPromptSection) resultsPanel.appendChild(imageFXPromptSection);\n\n        const midjourneyPromptSection = createPromptSection('Midjourney', 'Midjourney 프롬프트 (For Midjourney):', generatedMidjourneyPrompt, handleCopyPrompt, midjourneyPromptCopied, 'Midjourney', 'bg-purple-950', 'border-purple-800', 'text-purple-300', 'bg-purple-900', 'bg-purple-700', 'hover:bg-purple-600', 'focus:ring-purple-500');\n        if(midjourneyPromptSection) resultsPanel.appendChild(midjourneyPromptSection);\n        \n        const stableDiffusionSection = createPromptSection('StableDiffusion', 'Stable Diffusion 프롬프트 (For WebUI, ComfyUI, InvokeAI etc.):', generatedStableDiffusionPrompt, handleCopyPrompt, stableDiffusionPromptCopied, 'Stable Diffusion', 'bg-teal-950', 'border-teal-800', 'text-teal-300', 'bg-teal-900', 'bg-teal-700', 'hover:bg-teal-600', 'focus:ring-teal-500');\n         if(stableDiffusionSection) {\n            // For Stable Diffusion, ensure pre-line for the negative prompt\n            const promptDisplayDiv = stableDiffusionSection.querySelector('.bg-teal-900');\n            if(promptDisplayDiv) promptDisplayDiv.classList.add('whitespace-pre-line');\n            resultsPanel.appendChild(stableDiffusionSection);\n        }\n\n\n        if (!generatedPrompt && !generatedImageFXPrompt && !generatedMidjourneyPrompt && !generatedStableDiffusionPrompt && !error) {\n          const placeholderDiv = createElement('div', ['text-center', 'text-neutral-medium', 'py-10']);\n          const placeholderSVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-16 w-16 mx-auto mb-4 text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"1\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" /></svg>`;\n          placeholderDiv.innerHTML = placeholderSVG;\n          placeholderDiv.appendChild(createElement('p', [], {}, '옵션을 선택하고 프롬프트를 생성해보세요.<br/>(Select options and generate a prompt.)'));\n          resultsPanel.appendChild(placeholderDiv);\n        }\n      }\n\n      // --- Initialization ---\n      document.addEventListener('DOMContentLoaded', renderApp);\n\n    </script>",
        "contentSnippet": "AI 이미지 프롬프트 생성기는 복잡한 프롬프트 작성 없이 간단한 옵션 선택만으로 전문적인 AI 이미지 생성 프롬프트를 만들어주는 도구입니다. 성별, 인종, 직업부터 표정, 동작, 의상, 배경까지 세밀한 옵션을 제공하며, 창작 아이디어가 막혔을 때는 랜덤 생성 기능으로 새로운 영감을 얻을 수 있습니다.\n \n DALL·E, Midjourney, Stable Diffusion, GPT-4o 등 각 AI 플랫폼에 최적화된 4가지 형태의 프롬프트를 동시에 생성해주어 어떤 도구든 바로 사용할 수 있습니다. 한국어-영어 병기로 제공되어 이해하기 쉽고, 웹브라우저에서 설치 없이 즉시 사용 가능합니다. AI 이미지 생성 초보자부터 전문가까지, 3분 만에 원하는 캐릭터와 장면을 만들어보세요!\n\n\n \n\n    \n      tailwind.config = {\n        theme: {\n          extend: {\n            colors: {\n              'brand-primary': '#1e40af', // Deep blue\n              'brand-secondary': '#3b82f6', // Lighter blue\n              'brand-accent': '#fbbf24', // Amber accent\n              'neutral-dark': '#1f2937', // Dark gray\n              'neutral-medium': '#4b5563', // Medium gray\n              'neutral-light': '#d1d5db', // Light gray\n              'neutral-extralight': '#f3f4f6', // Extra light gray for backgrounds\n            },\n            fontFamily: {\n              sans: ['Inter', 'sans-serif'], // Using Inter as a modern sans-serif\n            },\n          }\n        }\n      }\n    \n    \n\n\n    \n      // --- Constants and Types (from types.ts and constants.ts) ---\n      const Category = {\n        GENDER: \"성별\\n(Gender)\",\n        RACE: \"인종\\n(Race)\",\n        OCCUPATION: \"직업\\n(Occupation)\",\n        EXPRESSION: \"표정\\n(Facial Expression)\",\n        ACTION: \"동작\\n(Action/Pose)\",\n        CLOTHING: \"복장\\n(Clothing)\",\n        ACCESSORIES: \"액세서리\\n(Accessories)\",\n        BACKGROUND: \"배경\\n(Background)\",\n        STYLE: \"화풍\\n(Art Style)\",\n        ASPECT_RATIO: \"이미지 비율\\n(Image Aspect Ratio)\",\n        FRAMING: \"촬영 구도\\n(Shot Type/Framing)\"\n      };\n\n      const ExpressionSubCategory = {\n        HAPPY_JOYFUL: \"행복/기쁨\\n(Happy/Joyful)\",\n        SAD_SORROWFUL: \"슬픔/비통\\n(Sad/Sorrowful)\",\n        ANGRY_FURIOUS: \"분노/격노\\n(Angry/Furious)\",\n        SURPRISED_SHOCKED: \"놀람/충격\\n(Surprised/Shocked)\",\n        THOUGHTFUL_SERIOUS: \"생각/진지\\n(Thoughtful/Serious)\",\n        NEUTRAL: \"중립적\\n(Neutral)\",\n        FEARFUL_ANXIOUS: \"두려움/불안\\n(Fearful/Anxious)\",\n        PLAYFUL_MISCHIEVOUS: \"장난스러운/익살스러운\\n(Playful/Mischievous)\",\n        LOVE_AFFECTION: \"사랑/애정\\n(Love/Affection)\",\n        CONFIDENT_PROUD: \"자신감/자부심\\n(Confident/Proud)\",\n        DAILY_LIFE_EXPRESSIONS: \"일상 표정\\n(Daily Life Expressions)\"\n      };\n\n      const ActionSubCategory = {\n        STATIC_POSES: \"정적 자세\\n(Static Poses)\",\n        DYNAMIC_MOVEMENT: \"동적 움직임\\n(Dynamic Movement)\",\n        INTERACTION_OBJECT: \"사물과 상호작용\\n(Interaction with Object)\",\n        MAGICAL_FANTASY: \"마법/판타지 동작\\n(Magical/Fantasy Actions)\",\n        DAILY_LIFE: \"일상 활동\\n(Daily Life Activities)\",\n        COMBAT_POSES: \"전투 자세\\n(Combat Poses)\",\n        ARTISTIC_CREATIVE: \"예술/창작 활동\\n(Artistic/Creative)\",\n        SPORTS_ATHLETICS: \"스포츠/운동\\n(Sports/Athletics)\",\n        COMMUNICATION_GESTURES: \"소통/제스처\\n(Communication/Gestures)\",\n        HOUSEHOLD_CHORES: \"집안일\\n(Household Chores)\"\n      };\n\n      const ClothingSubCategory = {\n        MODERN_CASUAL: \"현대/캐주얼\\n(Modern/Casual)\",\n        FORMAL_ELEGANT: \"정장/우아함\\n(Formal/Elegant)\",\n        HISTORICAL_TRADITIONAL: \"역사적/전통적\\n(Historical/Traditional)\",\n        FANTASY_SCI_FI: \"판타지/SF\\n(Fantasy/Sci-Fi)\",\n        OCCUPATIONAL_UNIFORM: \"직업/유니폼\\n(Occupational/Uniform)\",\n        CULTURAL_ETHNIC: \"문화/민족 의상\\n(Cultural/Ethnic)\",\n        SLEEPWEAR_LOUNGEWEAR: \"잠옷/실내복\\n(Sleepwear/Loungewear)\",\n        PROTECTIVE_GEAR: \"보호 장비\\n(Protective Gear)\",\n        EVERYDAY_WEAR: \"일상복\\n(Everyday Wear)\"\n      };\n      \n      const AccessoriesSubCategory = {\n        MAIN_ACCESSORIES: \"주요 액세서리 타입\\n(Main Accessory Types)\"\n      };\n\n      const BackgroundSubCategory = {\n        NATURE_LANDSCAPE: \"자연/풍경\\n(Nature/Landscape)\",\n        URBAN_CITYSCAPE: \"도시/건축\\n(Urban/Cityscape)\",\n        INTERIOR_SPACES: \"실내 공간\\n(Interior Spaces)\",\n        FANTASY_SURREAL: \"판타지/초현실\\n(Fantasy/Surreal)\",\n        ABSTRACT_MINIMALIST: \"추상/미니멀\\n(Abstract/Minimalist)\",\n        HISTORICAL_RUINS: \"역사적 유적\\n(Historical/Ruins)\",\n        SPACE_COSMIC: \"우주/천체\\n(Space/Cosmic)\",\n        WEATHER_ATMOSPHERE: \"날씨/분위기\\n(Weather/Atmosphere)\",\n        PATTERNS_TEXTURES: \"패턴/질감\\n(Patterns/Textures)\",\n        EVERYDAY_LOCATIONS: \"일상 장소\\n(Everyday Locations)\"\n      };\n      \n      const NONE_OPTION_VALUE = \"none\";\n      const NONE_OPTION_LABEL = \"선택 안함\\n(None)\";\n      const NONE_OPTION = { value: NONE_OPTION_VALUE, label: NONE_OPTION_LABEL };\n\n      const GENDER_OPTIONS = [\n        { value: \"man\", label: \"남성\\n(Man)\" }, { value: \"woman\", label: \"여성\\n(Woman)\" }, { value: \"non-binary person\", label: \"논바이너리\\n(Non-binary Person)\" }, { value: \"androgynous person\", label: \"양성적인 사람\\n(Androgynous Person)\" }, { value: \"genderfluid person\", label: \"젠더플루이드\\n(Genderfluid Person)\" }, { value: \"agender person\", label: \"에이젠더\\n(Agender Person)\" }, { value: \"boy\", label: \"소년\\n(Boy)\" }, { value: \"girl\", label: \"소녀\\n(Girl)\" }, { value: \"young man\", label: \"청년\\n(Young Man)\" }, { value: \"young woman\", label: \"젊은 여성\\n(Young Woman)\" }, { value: \"middle-aged man\", label: \"중년 남성\\n(Middle-aged Man)\" }, { value: \"middle-aged woman\", label: \"중년 여성\\n(Middle-aged Woman)\" }, { value: \"elderly man\", label: \"노년 남성\\n(Elderly Man)\" }, { value: \"elderly woman\", label: \"노년 여성\\n(Elderly Woman)\" }, { value: \"transgender man\", label: \"트랜스젠더 남성\\n(Transgender Man)\" }, { value: \"transgender woman\", label: \"트랜스젠더 여성\\n(Transgender Woman)\" },\n      ];\n      const RACE_OPTIONS = [\n        { value: \"Korean\", label: \"한국인\\n(Korean)\" }, { value: \"Japanese\", label: \"일본인\\n(Japanese)\" }, { value: \"Chinese (Han, Uyghur, Tibetan, etc.)\", label: \"중국인 (한족, 위구르족 등)\\n(Chinese)\" }, { value: \"Caucasian (e.g., Northern European, Southern European, Slavic, American)\", label: \"백인 (북유럽, 남유럽, 미국 백인 등)\\n(Caucasian)\" }, { value: \"African descent (e.g., Nigerian, Ethiopian, Kenyan, Afro-Caribbean, African American)\", label: \"아프리카계 (나이지리아, 아프리카계 미국인 등)\\n(African descent)\" }, { value: \"Hispanic/Latinx (e.g., Mexican, Brazilian, Puerto Rican, Cuban, Colombian)\", label: \"히스패닉/라틴계 (멕시코, 브라질 등)\\n(Hispanic/Latinx)\" }, { value: \"Middle Eastern (e.g., Arab, Persian, Turkish, Israeli)\", label: \"중동인 (아랍, 페르시아 등)\\n(Middle Eastern)\" }, { value: \"South Asian (e.g., Indian, Pakistani, Bangladeshi, Sri Lankan)\", label: \"남아시아인 (인도 등)\\n(South Asian)\" }, { value: \"Southeast Asian (e.g., Vietnamese, Thai, Filipino, Malaysian, Indonesian)\", label: \"동남아시아인 (베트남 등)\\n(Southeast Asian)\" }, { value: \"Indigenous/Native American (e.g., Navajo, Inuit, Cherokee, Sioux)\", label: \"원주민/아메리카 원주민\\n(Indigenous/Native American)\" }, { value: \"Pacific Islander (e.g., Polynesian, Melanesian, Micronesian)\", label: \"태평양 섬 주민\\n(Pacific Islander)\" }, { value: \"Nordic (e.g. Swedish, Norwegian, Danish)\", label: \"북유럽인\\n(Nordic)\" }, { value: \"Eastern European (e.g., Russian, Polish, Ukrainian, Czech)\", label: \"동유럽인 (러시아, 폴란드 등)\\n(Eastern European)\" }, { value: \"Mediterranean (e.g., Greek, Italian, Spanish)\", label: \"지중해인 (그리스, 이탈리아 등)\\n(Mediterranean)\" }, { value: \"Celtic (e.g. Irish, Scottish, Welsh)\", label: \"켈트족\\n(Celtic)\" }, { value: \"Aboriginal Australian\", label: \"호주 원주민\\n(Aboriginal Australian)\" }, { value: \"Maori\", label: \"마오리족\\n(Maori)\" }, { value: \"mixed race/ethnicity\", label: \"혼혈/다민족\\n(Mixed Race/Ethnicity)\" }, { value: \"fantasy race (e.g., elf, orc, dwarf, fairy, gnome, troll)\", label: \"판타지 종족 (엘프, 오크 등)\\n(Fantasy Race)\" }, { value: \"extraterrestrial/alien species\", label: \"외계 종족\\n(Alien Species)\" }, { value: \"a person from a specific city (e.g., New Yorker, Parisian, Seoulite)\", label: \"특정 도시 사람 (뉴요커, 파리지앵 등)\\n(Person from a specific city)\"}, { value: \"a tourist\", label: \"관광객\\n(A tourist)\"},\n      ];\n      const OCCUPATION_OPTIONS = [\n        NONE_OPTION, { value: \"student\", label: \"학생\\n(Student)\" }, { value: \"office worker\", label: \"직장인\\n(Office worker)\" }, { value: \"homemaker\", label: \"주부\\n(Homemaker)\" }, { value: \"retiree\", label: \"은퇴자\\n(Retiree)\" }, { value: \"freelancer\", label: \"프리랜서\\n(Freelancer)\" }, { value: \"artist\", label: \"예술가\\n(Artist)\" }, { value: \"shop assistant\", label: \"점원\\n(Shop assistant)\"}, { value: \"teacher\", label: \"교사\\n(Teacher)\"}, { value: \"commuter\", label: \"통근자\\n(Commuter)\"}, { value: \"doctor\", label: \"의사\\n(Doctor)\" }, { value: \"nurse\", label: \"간호사\\n(Nurse)\" }, { value: \"engineer\", label: \"엔지니어\\n(Engineer)\" }, { value: \"scientist\", label: \"과학자\\n(Scientist)\" }, { value: \"chef\", label: \"요리사\\n(Chef)\" }, { value: \"police officer\", label: \"경찰관\\n(Police Officer)\" }, { value: \"firefighter\", label: \"소방관\\n(Firefighter)\" }, { value: \"musician\", label: \"음악가\\n(Musician)\" }, { value: \"writer\", label: \"작가\\n(Writer)\" }, { value: \"athlete\", label: \"운동선수\\n(Athlete)\" }, { value: \"farmer\", label: \"농부\\n(Farmer)\" }, { value: \"pilot\", label: \"조종사\\n(Pilot)\" }, { value: \"construction worker\", label: \"건설 노동자\\n(Construction Worker)\" }, { value: \"librarian\", label: \"사서\\n(Librarian)\" }, { value: \"barista\", label: \"바리스타\\n(Barista)\" }, { value: \"actor/actress\", label: \"배우\\n(Actor/Actress)\" }, { value: \"dancer\", label: \"댄서\\n(Dancer)\" }, { value: \"detective\", label: \"탐정\\n(Detective)\" }, { value: \"journalist\", label: \"기자\\n(Journalist)\" }, { value: \"photographer\", label: \"사진작가\\n(Photographer)\" }, { value: \"programmer/developer\", label: \"프로그래머/개발자\\n(Programmer/Developer)\" }, { value: \"researcher\", label: \"연구원\\n(Researcher)\" }, { value: \"singer\", label: \"가수\\n(Singer)\" }, { value: \"soldier\", label: \"군인\\n(Soldier)\" }, { value: \"translator\", label: \"번역가\\n(Translator)\" }, { value: \"waiter/waitress\", label: \"웨이터/웨이트리스\\n(Waiter/Waitress)\" }, { value: \"wizard/sorcerer/mage\", label: \"마법사\\n(Wizard/Sorcerer/Mage)\" }, { value: \"knight/warrior\", label: \"기사/전사\\n(Knight/Warrior)\" }, { value: \"king/queen/royalty\", label: \"왕/여왕/왕족\\n(King/Queen/Royalty)\" }, { value: \"adventurer/explorer\", label: \"모험가/탐험가\\n(Adventurer/Explorer)\" }, { value: \"spy/secret agent\", label: \"스파이/비밀 요원\\n(Spy/Secret Agent)\" }, { value: \"pirate\", label: \"해적\\n(Pirate)\" }, { value: \"astronaut\", label: \"우주비행사\\n(Astronaut)\" }, { value: \"cyborg\", label: \"사이보그\\n(Cyborg)\" }, { value: \"robot/android\", label: \"로봇/안드로이드\\n(Robot/Android)\" }, { value: \"alien\", label: \"외계인\\n(Alien)\" },\n      ];\n      const STYLE_OPTIONS = [\n        NONE_OPTION, { value: \"photorealistic\", label: \"사진 같은\\n(Photorealistic)\" }, { value: \"digital painting (e.g. detailed, painterly, speedpaint)\", label: \"디지털 페인팅\\n(Digital Painting)\" }, { value: \"anime style (e.g., Studio Ghibli, Shonen, Magical Girl, 90s retro, modern moe)\", label: \"애니메이션 스타일\\n(Anime Style)\" }, { value: \"fantasy art (e.g., D&D style, epic, high fantasy, dark fantasy, whimsical)\", label: \"판타지 아트\\n(Fantasy Art)\" }, { value: \"sci-fi concept art (e.g., futuristic, dystopian, utopian, cyberpunk, biopunk)\", label: \"SF 컨셉 아트\\n(Sci-fi Concept Art)\" }, { value: \"impressionistic painting (Monet, Renoir style)\", label: \"인상주의풍 회화\\n(Impressionistic Painting)\" }, { value: \"oil painting (classical, modern, abstract, impasto)\", label: \"유화\\n(Oil Painting)\" }, { value: \"watercolor art (delicate, vibrant, wet-on-wet, dry brush)\", label: \"수채화\\n(Watercolor Art)\" }, { value: \"pixel art (e.g., 8-bit, 16-bit, isometric, modern indie)\", label: \"픽셀 아트\\n(Pixel Art)\" }, { value: \"cartoon style (e.g., Disney, Looney Tunes, modern flat, CalArts, rubber hose)\", label: \"카툰 스타일\\n(Cartoon Style)\" }, { value: \"steampunk art (Victorian, mechanical, goggles, gears)\", label: \"스팀펑크 아트\\n(Steampunk Art)\" }, { value: \"gothic art (dark, ornate, moody, macabre)\", label: \"고딕 아트\\n(Gothic Art)\" }, { value: \"ink wash painting (Sumi-e, East Asian calligraphy, monochrome)\", label: \"수묵화\\n(Ink Wash Painting)\" }, { value: \"baroque style painting (dramatic, rich detail, chiaroscuro)\", label: \"바로크 양식 회화\\n(Baroque Style Painting)\" }, { value: \"art nouveau (elegant, decorative, flowing lines, Mucha style)\", label: \"아르누보\\n(Art Nouveau)\" }, { value: \"minimalist vector art (clean, geometric, flat colors)\", label: \"미니멀리스트 벡터 아트\\n(Minimalist Vector Art)\" }, { value: \"concept art sketch (rough, dynamic, exploratory)\", label: \"컨셉 아트 스케치\\n(Concept Art Sketch)\" }, { value: \"graphic novel style (bold lines, paneling effect, dynamic shading)\", label: \"그래픽 노블 스타일\\n(Graphic Novel Style)\" }, { value: \"surrealism (dreamlike, illogical, Dali, Magritte style)\", label: \"초현실주의\\n(Surrealism)\" }, { value: \"cyberpunk art (neon, futuristic, gritty, Blade Runner aesthetic)\", label: \"사이버펑크 아트\\n(Cyberpunk Art)\" }, { value: \"ukiyo-e (Japanese woodblock print, Hokusai style)\", label: \"우키요에\\n(Ukiyo-e)\" }, { value: \"art deco (geometric, luxurious, Roaring Twenties)\", label: \"아르데코\\n(Art Deco)\" }, { value: \"chalk art (pastel, textured, ephemeral)\", label: \"분필 아트\\n(Chalk Art)\" }, { value: \"stained glass window (vibrant colors, lead lines, gothic, tiffany)\", label: \"스테인드 글라스\\n(Stained Glass Window)\" }, { value: \"claymation style (Aardman, tactile, stop-motion look)\", label: \"클레이메이션 스타일\\n(Claymation Style)\" }, { value: \"vintage comic book art (dot shading, bold outlines, retro)\", label: \"빈티지 만화책 아트\\n(Vintage Comic Book Art)\" }, { value: \"children's book illustration (whimsical, colorful, charming)\", label: \"동화 삽화\\n(Children's Book Illustration)\" }, { value: \"sticker art (die-cut, glossy, pop art)\", label: \"스티커 아트\\n(Sticker Art)\" }, { value: \"tarot card art (symbolic, mystical, Rider-Waite style)\", label: \"타로 카드 아트\\n(Tarot Card Art)\" }, { value: \"low poly 3D render (geometric, stylized, retro game look)\", label: \"로우 폴리 3D 렌더\\n(Low Poly 3D Render)\" }, { value: \"vaporwave aesthetic (nostalgic, neon, retro-futuristic, glitch art)\", label: \"베이퍼웨이브 미학\\n(Vaporwave Aesthetic)\" }, { value: \"expressionism (emotional, distorted, bold colors, Munch style)\", label: \"표현주의\\n(Expressionism)\" }, { value: \"cubism (geometric forms, multiple perspectives, Picasso style)\", label: \"입체주의\\n(Cubism)\" }, { value: \"pointillism (Seurat style, dots of color)\", label: \"점묘법\\n(Pointillism)\" }, { value: \"tribal art (patterns, symbolic, indigenous motifs)\", label: \"부족 예술\\n(Tribal Art)\" }, { value: \"daily life snapshot style\", label: \"일상 스냅 사진 스타일\\n(Daily life snapshot style)\" }, { value: \"documentary style\", label: \"다큐멘터리 스타일\\n(Documentary style)\" }, { value: \"CCTV footage style\", label: \"CCTV 화면 스타일\\n(CCTV footage style)\" }, { value: \"blog photo style\", label: \"블로그 사진 스타일\\n(Blog photo style)\" }, { value: \"food photography style\", label: \"음식 사진 스타일\\n(Food photography style)\" }, { value: \"fashion editorial style\", label: \"패션 화보 스타일\\n(Fashion editorial style)\" }, { value: \"vintage film photography (e.g. 35mm, polaroid)\", label: \"빈티지 필름 사진 (35mm, 폴라로이드)\\n(Vintage film photography)\" },\n      ];\n      const ASPECT_RATIO_OPTIONS = [\n        NONE_OPTION, { value: \"1:1\", label: \"정사각형 (1:1)\\n(Square 1:1)\" }, { value: \"16:9\", label: \"가로형 HD (16:9)\\n(Landscape HD 16:9)\" }, { value: \"9:16\", label: \"세로형 스토리 (9:16)\\n(Portrait Story 9:16)\" }, { value: \"4:3\", label: \"클래식 TV (4:3)\\n(Classic TV 4:3)\" }, { value: \"3:2\", label: \"사진 DSLR (3:2)\\n(Photo DSLR 3:2)\" }, { value: \"21:9\", label: \"시네마스코프 (21:9)\\n(Cinemascope 21:9)\" }, { value: \"3:4\", label: \"세로형 사진 (3:4)\\n(Portrait Photo 3:4)\" }, { value: \"2:1\", label: \"파노라마 (2:1)\\n(Panorama 2:1)\" }, { value: \"5:4\", label: \"대형 사진 (5:4)\\n(Large Format Photo 5:4)\" }, { value: \"1.85:1\", label: \"와이드스크린 미국 (1.85:1)\\n(Widescreen US 1.85:1)\" }, { value: \"2.39:1\", label: \"아나모픽 시네마 (2.39:1)\\n(Anamorphic Cinema 2.39:1)\" }, { value: \"1.618:1\", label: \"황금 비율 (~1.618:1)\\n(Golden Ratio ~1.618:1)\" }, { value: \"1:1.414\", label: \"A4 용지 비율 (~1:1.414)\\n(A4 Paper ~1:1.414)\" }, { value: \"3:1\", label: \"초광각 파노라마 (예: 3:1)\\n(Ultra-wide Panoramic 3:1)\" },\n      ];\n      const FRAMING_OPTIONS = [\n        NONE_OPTION, { value: \"full body shot\", label: \"전신샷\\n(Full body shot)\"}, { value: \"medium shot (from waist up)\", label: \"미디엄 샷 (허리 위)\\n(Medium shot)\"}, { value: \"cowboy shot (mid-thigh up)\", label: \"카우보이 샷 (허벅지 중간 위)\\n(Cowboy shot)\"}, { value: \"upper body shot (chest up)\", label: \"상반신 샷 (가슴 위)\\n(Upper body shot)\"}, { value: \"close-up shot (face focused)\", label: \"클로즈업 샷 (얼굴 중심)\\n(Close-up shot)\"}, { value: \"extreme close-up (features like eyes or lips)\", label: \"익스트림 클로즈업 (눈, 입 등 특징)\\n(Extreme close-up)\"}, { value: \"portrait shot (head and shoulders)\", label: \"초상화 샷 (머리와 어깨)\\n(Portrait shot)\"}, { value: \"establishing shot (shows environment, character small)\", label: \"설정 샷 (환경 중심, 인물 작게)\\n(Establishing shot)\"}, { value: \"low angle shot (camera looks up)\", label: \"로우 앵글 샷 (아래에서 위로)\\n(Low angle shot)\"}, { value: \"high angle shot (camera looks down)\", label: \"하이 앵글 샷 (위에서 아래로)\\n(High angle shot)\"}, { value: \"dutch angle shot (tilted camera)\", label: \"더치 앵글 샷 (기울어진 카메라)\\n(Dutch angle shot)\"}, { value: \"over-the-shoulder shot\", label: \"어깨너머 샷\\n(Over-the-shoulder shot)\"}, { value: \"point-of-view shot (POV)\", label: \"1인칭 시점 샷 (POV)\\n(Point-of-view shot)\"}, { value: \"selfie angle\", label: \"셀카 구도\\n(Selfie angle)\"}, { value: \"vlog style shot\", label: \"브이로그 스타일 샷\\n(Vlog style shot)\"}, { value: \"eye-level shot\", label: \"눈높이 샷\\n(Eye-level shot)\"},\n      ];\n\n      const EXPRESSION_SUB_CATEGORY_LIST = Object.values(ExpressionSubCategory).map(val => ({value: val, label: val}));\n      const EXPRESSION_DETAIL_OPTIONS = {\n        [ExpressionSubCategory.HAPPY_JOYFUL]: [\n          NONE_OPTION, { value: \"smiling gently\", label: \"부드럽게 미소짓는\\n(Smiling gently)\" }, { value: \"laughing joyfully, eyes crinkled\", label: \"즐겁게 웃으며 눈가 주름진\\n(Laughing joyfully, eyes crinkled)\" }, { value: \"beaming with pure happiness\", label: \"순수한 행복감에 환하게 웃는\\n(Beaming with pure happiness)\" }, { value: \"grinning mischievously, a playful glint in the eyes\", label: \"장난스럽게 히죽이며 눈 반짝\\n(Grinning mischievously)\" }, { value: \"content and satisfied, a calm smile\", label: \"만족스럽고 흡족한, 차분한 미소\\n(Content and satisfied, calm smile)\" }, { value: \"radiant smile, full of warmth\", label: \"따뜻함 가득한 빛나는 미소\\n(Radiant smile, full of warmth)\" }, { value: \"eyes sparkling with delight\", label: \"기쁨으로 반짝이는 눈\\n(Eyes sparkling with delight)\" }, { value: \"a cheerful, open-mouthed laugh\", label: \"활기차고 입 벌리고 웃는\\n(Cheerful, open-mouthed laugh)\" }, { value: \"exuberant laughter, head thrown back\", label: \"열광적으로 웃으며 고개 젖힌\\n(Exuberant laughter, head thrown back)\" }, { value: \"a shy, sweet smile\", label: \"수줍은, 달콤한 미소\\n(A shy, sweet smile)\" }, { value: \"smirking confidently\", label: \"자신감 있게 히죽이는\\n(Smirking confidently)\" }, { value: \"a subtle, knowing smile\", label: \"미묘하고 안다는 듯한 미소\\n(Subtle, knowing smile)\" }, { value: \"overjoyed expression\", label: \"매우 기뻐하는 표정\\n(Overjoyed expression)\" }, { value: \"ecstatic with joy\", label: \"황홀경에 빠진 듯 기뻐하는\\n(Ecstatic with joy)\" }, { value: \"blissful smile\", label: \"더없이 행복한 미소\\n(Blissful smile)\" }, { value: \"chuckling softly\", label: \"부드럽게 킥킥거리는\\n(Chuckling softly)\" }, { value: \"gleeful expression\", label: \"아주 신난 표정\\n(Gleeful expression)\" }, { value: \"elated and jumping for joy\", label: \"기뻐서 펄쩍 뛰는\\n(Elated and jumping for joy)\" }, { value: \"heartfelt smile of gratitude\", label: \"진심 어린 감사의 미소\\n(Heartfelt smile of gratitude)\" }, { value: \"bright, sunny disposition\", label: \"밝고 명랑한 표정\\n(Bright, sunny disposition)\" }, { value: \"relaxed smile\", label: \"느긋하게 미소짓는\\n(Relaxed smile)\"}, { value: \"peaceful smile\", label: \"평화로운 미소\\n(Peaceful smile)\"},\n        ],\n        [ExpressionSubCategory.SAD_SORROWFUL]: [\n          NONE_OPTION, { value: \"looking melancholic, gazing into the distance\", label: \"우울하게 먼 곳 응시\\n(Looking melancholic, gazing)\" }, { value: \"shedding a single, glistening tear\", label: \"반짝이는 눈물 한 방울\\n(Shedding a single tear)\" }, { value: \"with a sorrowful, downturned mouth\", label: \"애처롭게 처진 입매\\n(Sorrowful, downturned mouth)\" }, { value: \"visibly heartbroken, eyes welling up\", label: \"상심하여 눈물 그렁그렁\\n(Visibly heartbroken, eyes welling)\" }, { value: \"a pained expression, enduring suffering\", label: \"고통을 견디는 표정\\n(A pained expression, enduring)\" }, { value: \"eyes filled with unshed tears\", label: \"눈물 가득 고인 눈\\n(Eyes filled with unshed tears)\" }, { value: \"gloomy and dejected\", label: \"침울하고 낙담한\\n(Gloomy and dejected)\" }, { value: \"quietly crying, shoulders shaking\", label: \"조용히 울며 어깨 들썩이는\\n(Quietly crying, shoulders shaking)\" }, { value: \"expression of deep grief\", label: \"깊은 슬픔의 표정\\n(Expression of deep grief)\" }, { value: \"forlorn look, feeling abandoned\", label: \"쓸쓸하고 버려진 듯한 표정\\n(Forlorn look, abandoned)\" }, { value: \"lips trembling with sadness\", label: \"슬픔으로 입술을 떠는\\n(Lips trembling with sadness)\" }, { value: \"despairing gaze, losing hope\", label: \"절망적인 시선, 희망 잃은\\n(Despairing gaze, losing hope)\" }, { value: \"somber and downcast\", label: \"침통하고 풀이 죽은\\n(Somber and downcast)\" }, { value: \"mournful expression\", label: \"애도하는 표정\\n(Mournful expression)\" }, { value: \"eyes reflecting deep sorrow\", label: \"깊은 슬픔이 비치는 눈\\n(Eyes reflecting deep sorrow)\" }, { value: \"heavy-hearted look\", label: \"무거운 마음의 표정\\n(Heavy-hearted look)\" }, { value: \"tears streaming down face\", label: \"얼굴에 눈물이 흐르는\\n(Tears streaming down face)\" }, { value: \"expression of regret\", label: \"후회하는 표정\\n(Expression of regret)\" }, { value: \"anguished cry\", label: \"고뇌에 찬 울부짖음\\n(Anguished cry)\" }, { value: \"slightly disappointed\", label: \"약간 실망한\\n(Slightly disappointed)\"}, { value: \"bored expression\", label: \"지루해하는 표정\\n(Bored expression)\"},\n        ],\n        [ExpressionSubCategory.ANGRY_FURIOUS]: [\n          NONE_OPTION, { value: \"frowning deeply, eyebrows knitted\", label: \"잔뜩 찡그린, 미간 찌푸린\\n(Frowning deeply, eyebrows knitted)\" }, { value: \"with a furious glare, eyes narrowed\", label: \"격노한 시선, 눈 가늘게 뜬\\n(Furious glare, eyes narrowed)\" }, { value: \"lips pressed tightly in anger\", label: \"분노로 입술 꽉 다문\\n(Lips pressed tightly in anger)\" }, { value: \"seething with suppressed rage, jaw clenched\", label: \"억눌린 분노, 턱 악문\\n(Seething with suppressed rage)\" }, { value: \"snarling in contempt\", label: \"경멸하며 으르렁거리는\\n(Snarling in contempt)\" }, { value: \"eyes burning with fury\", label: \"분노로 불타는 눈\\n(Eyes burning with fury)\" }, { value: \"face flushed with anger\", label: \"분노로 얼굴 붉어진\\n(Face flushed with anger)\" }, { value: \"a cold, hard stare of disapproval\", label: \"차갑고 단호한 불만의 시선\\n(Cold, hard stare of disapproval)\" }, { value: \"indignant expression, feeling wronged\", label: \"분개한 표정, 억울함\\n(Indignant expression, wronged)\" }, { value: \"about to shout in rage\", label: \"분노로 소리치기 직전\\n(About to shout in rage)\" }, { value: \"menacing look, threatening\", label: \"위협적인 표정, 협박하는 듯\\n(Menacing look, threatening)\" }, { value: \"irritated and scowling\", label: \"짜증나서 얼굴 찌푸린\\n(Irritated and scowling)\" }, { value: \"veins popping on forehead from anger\", label: \"분노로 이마에 핏대 선\\n(Veins popping from anger)\" }, { value: \"baring teeth in aggression\", label: \"공격적으로 이를 드러낸\\n(Baring teeth in aggression)\" }, { value: \"a look of utter outrage\", label: \"극도의 격분 표정\\n(Look of utter outrage)\" }, { value: \"stormy expression\", label: \"폭풍 같은 표정\\n(Stormy expression)\" }, { value: \"hostile glare\", label: \"적대적인 시선\\n(Hostile glare)\" }, { value: \"resentful look\", label: \"분개하는 표정\\n(Resentful look)\" }, { value: \"annoyed expression\", label: \"짜증난 표정\\n(Annoyed expression)\" },\n        ],\n        [ExpressionSubCategory.SURPRISED_SHOCKED]: [\n          NONE_OPTION, { value: \"eyes wide with surprise, mouth agape\", label: \"놀라서 눈 휘둥그레, 입 벌린\\n(Eyes wide with surprise, mouth agape)\" }, { value: \"jaw slightly dropped in disbelief\", label: \"믿기지 않아 입 살짝 벌린\\n(Jaw slightly dropped in disbelief)\" }, { value: \"looking utterly astonished\", label: \"완전히 경악한 표정\\n(Looking utterly astonished)\" }, { value: \"flabbergasted, hand covering mouth\", label: \"어안 벙벙, 손으로 입 가린\\n(Flabbergasted, hand covering mouth)\" }, { value: \"a sudden look of realization, eyes lighting up\", label: \"갑자기 깨달은 표정, 눈 반짝\\n(Sudden look of realization, eyes light up)\" }, { value: \"eyebrows raised high in shock\", label: \"충격으로 눈썹 치켜올린\\n(Eyebrows raised high in shock)\" }, { value: \"startled expression, jumping back slightly\", label: \"화들짝 놀란 표정, 살짝 뒷걸음질\\n(Startled expression, jumping back)\" }, { value: \"momentarily speechless from awe\", label: \"경외감에 순간 말을 잃은\\n(Momentarily speechless from awe)\" }, { value: \"wide-eyed wonder at a magical sight\", label: \"마법 같은 광경에 경이로운 눈빛\\n(Wide-eyed wonder at magical sight)\" }, { value: \"taken aback by an unexpected event\", label: \"예상치 못한 일에 깜짝 놀란\\n(Taken aback by unexpected event)\" }, { value: \"frozen in surprise\", label: \"놀라서 얼어붙은\\n(Frozen in surprise)\" }, { value: \"gasping in amazement\", label: \"경탄하며 숨을 헐떡이는\\n(Gasping in amazement)\" }, { value: \"eyes popping out (cartoonish)\", label: \"눈이 튀어나올 듯 (만화적)\\n(Eyes popping out (cartoonish))\" }, { value: \"a look of bewilderment\", label: \"어리둥절한 표정\\n(Look of bewilderment)\" }, { value: \"stunned silence\", label: \"충격으로 할 말을 잃은\\n(Stunned silence)\" }, { value: \"mildly surprised\", label: \"살짝 놀란\\n(Mildly surprised)\"},\n        ],\n        [ExpressionSubCategory.THOUGHTFUL_SERIOUS]: [\n          NONE_OPTION, { value: \"deep in thought, chin resting on hand\", label: \"생각 잠겨 손으로 턱 괸\\n(Deep in thought, chin on hand)\" }, { value: \"with a serious, focused gaze, lips pursed\", label: \"진지하고 집중된 시선, 입 오므린\\n(Serious, focused gaze, lips pursed)\" }, { value: \"pensive expression, looking downwards thoughtfully\", label: \"수심 잠겨 아래를 사려 깊게\\n(Pensive expression, looking downwards)\" }, { value: \"analytical look, scrutinizing something intently\", label: \"무언가를 꼼꼼히 살피는 분석적 표정\\n(Analytical look, scrutinizing)\" }, { value: \"contemplative and calm, reflecting deeply\", label: \"사색적이고 차분한, 깊이 성찰\\n(Contemplative and calm, reflecting)\" }, { value: \"determined expression, eyes set on a goal\", label: \"단호한 표정, 목표에 시선 고정\\n(Determined expression, eyes on goal)\" }, { value: \"concentrating intently on a complex task\", label: \"복잡한 작업에 열중하여 집중\\n(Concentrating intently on task)\" }, { value: \"a grave and solemn look, understanding the weight\", label: \"근엄하고 엄숙한 표정, 무게감 이해\\n(Grave and solemn look, understanding)\" }, { value: \"lost in thought, oblivious to surroundings\", label: \"생각에 빠져 주변을 의식 못함\\n(Lost in thought, oblivious)\" }, { value: \"resolute and unwavering, firm in conviction\", label: \"결연하고 흔들림 없는, 확고한 신념\\n(Resolute and unwavering, firm)\" }, { value: \"introspective gaze\", label: \"자기 성찰적인 시선\\n(Introspective gaze)\" }, { value: \"philosophical expression\", label: \"철학적인 표정\\n(Philosophical expression)\" }, { value: \"calculating and strategic look\", label: \"계산적이고 전략적인 표정\\n(Calculating and strategic look)\" }, { value: \"listening intently with a serious face\", label: \"진지한 얼굴로 열심히 듣는\\n(Listening intently, serious face)\" }, { value: \"pondering a difficult question\", label: \"어려운 질문을 숙고하는\\n(Pondering a difficult question)\" }, { value: \"deeply thinking about something\", label: \"무언가에 골똘히 생각하는\\n(Deeply thinking about something)\"}, { value: \"contemplating daily worries\", label: \"일상적인 고민을 하는\\n(Contemplating daily worries)\"},\n        ],\n        [ExpressionSubCategory.NEUTRAL]: [\n          NONE_OPTION, { value: \"neutral expression, looking directly ahead\", label: \"무표정, 정면 응시\\n(Neutral expression, looking ahead)\" }, { value: \"calm and composed, observing quietly\", label: \"차분하고 침착, 조용히 관찰\\n(Calm and composed, observing)\" }, { value: \"stoic, unreadable expression, betraying no emotion\", label: \"금욕적, 읽을 수 없는 표정\\n(Stoic, unreadable expression)\" }, { value: \"a blank, impassive face\", label: \"텅 빈, 아무 감정 없는 얼굴\\n(A blank, impassive face)\" }, { value: \"patiently waiting, expressionless\", label: \"끈기 있게 기다리는, 무표정\\n(Patiently waiting, expressionless)\" }, { value: \"serene and untroubled, at peace\", label: \"고요하고 평온한, 평화로운\\n(Serene and untroubled, at peace)\" }, { value: \"attentive but emotionless, focused\", label: \"주의 깊지만 감정 없는, 집중\\n(Attentive but emotionless, focused)\" }, { value: \"plain expression, simple and unadorned\", label: \"꾸밈없는 표정, 단순 소박\\n(Plain expression, simple)\" }, { value: \"dispassionate look\", label: \"냉정한 표정\\n(Dispassionate look)\" }, { value: \"objective and detached gaze\", label: \"객관적이고 초연한 시선\\n(Objective and detached gaze)\" }, { value: \"mildly curious but otherwise neutral\", label: \"약간 호기심 있지만 중립적\\n(Mildly curious but neutral)\" }, { value: \"resting face\", label: \"편안한 얼굴 (무표정)\\n(Resting face)\" }, { value: \"indifferent expression\", label: \"무심한 표정\\n(Indifferent expression)\"},\n        ],\n        [ExpressionSubCategory.FEARFUL_ANXIOUS]: [\n          NONE_OPTION, { value: \"eyes wide with fear, pupils dilated\", label: \"두려움에 눈 크게, 동공 확장\\n(Eyes wide with fear, pupils dilated)\" }, { value: \"trembling with anxiety, looking around nervously\", label: \"불안감에 떨며 초조하게 두리번\\n(Trembling with anxiety, looking around)\" }, { value: \"a look of sheer terror, face pale\", label: \"순전한 공포, 창백한 얼굴\\n(Look of sheer terror, face pale)\" }, { value: \"nervously biting lip, fidgeting\", label: \"초조하게 입술 깨물며 꼼지락\\n(Nervously biting lip, fidgeting)\" }, { value: \"sweating and pale with fright\", label: \"공포에 질려 땀, 창백\\n(Sweating and pale with fright)\" }, { value: \"worried and apprehensive, expecting something bad\", label: \"걱정하고 염려, 나쁜 일 예상\\n(Worried and apprehensive, expecting bad)\" }, { value: \"panicked expression, eyes darting\", label: \"공황 상태, 눈알 두리번\\n(Panicked expression, eyes darting)\" }, { value: \"hesitant and fearful, reluctant to proceed\", label: \"망설이며 두려워, 나아가길 주저\\n(Hesitant and fearful, reluctant)\" }, { value: \"cowering in fear\", label: \"두려움에 움츠린\\n(Cowering in fear)\" }, { value: \"a silent scream of terror\", label: \"공포의 소리 없는 비명\\n(Silent scream of terror)\" }, { value: \"chattering teeth from fear\", label: \"두려움으로 이가 딱딱거리는\\n(Chattering teeth from fear)\" }, { value: \"look of impending doom\", label: \"임박한 파멸의 표정\\n(Look of impending doom)\" }, { value: \"eyes showing deep unease\", label: \"깊은 불안감이 드러나는 눈\\n(Eyes showing deep unease)\" }, { value: \"slightly nervous\", label: \"약간 긴장한\\n(Slightly nervous)\"},\n        ],\n        [ExpressionSubCategory.PLAYFUL_MISCHIEVOUS]: [\n          NONE_OPTION, { value: \"winking slyly, a secret shared\", label: \"교활하게 윙크, 비밀 공유\\n(Winking slyly, secret shared)\" }, { value: \"sticking tongue out playfully\", label: \"장난스럽게 혀 내미는\\n(Sticking tongue out playfully)\" }, { value: \"a cheeky grin, up to no good\", label: \"까불거리는 미소, 못된 장난 궁리\\n(A cheeky grin, up to no good)\" }, { value: \"eyes dancing with amusement and mischief\", label: \"재미와 장난기로 눈 반짝\\n(Eyes dancing with amusement)\" }, { value: \"a teasing smile, inviting play\", label: \"놀리는 듯한 미소, 놀자고 유혹\\n(A teasing smile, inviting play)\" }, { value: \"poking fun with a lighthearted expression\", label: \"가벼운 표정으로 농담하는\\n(Poking fun, lighthearted)\" }, { value: \"ready for some fun, eager and impish expression\", label: \"즐길 준비, 열정적이고 장난기 어린\\n(Ready for fun, eager and impish)\" }, { value: \"uproarious laughter at a practical joke\", label: \"짓궂은 장난에 배꼽 빠지게 웃는\\n(Uproarious laughter at joke)\"}, { value: \"suppressing a giggle\", label: \"웃음을 참는\\n(Suppressing a giggle)\" }, { value: \"a playful pout\", label: \"장난스럽게 입을 삐죽 내민\\n(A playful pout)\" }, { value: \"eyes full of impish delight\", label: \"장난기 가득한 기쁨의 눈빛\\n(Eyes full of impish delight)\" }, { value: \"conspiratorial whisper and a grin\", label: \"음모를 꾸미는 듯한 속삭임과 미소\\n(Conspiratorial whisper and grin)\" }, { value: \"lightly joking expression\", label: \"가볍게 농담하는 표정\\n(Lightly joking expression)\"},\n        ],\n        [ExpressionSubCategory.LOVE_AFFECTION]: [\n          NONE_OPTION, { value: \"gazing lovingly with soft eyes\", label: \"부드러운 눈으로 사랑스럽게 응시\\n(Gazing lovingly, soft eyes)\" }, { value: \"a gentle, affectionate smile\", label: \"온화하고 애정 어린 미소\\n(Gentle, affectionate smile)\" }, { value: \"eyes full of adoration\", label: \"흠모로 가득 찬 눈\\n(Eyes full of adoration)\" }, { value: \"blowing a kiss\", label: \"키스를 날리는\\n(Blowing a kiss)\" }, { value: \"a warm, heartfelt expression of love\", label: \"따뜻하고 진심 어린 사랑의 표현\\n(Warm, heartfelt expression of love)\" }, { value: \"smiling tenderly\", label: \"부드럽게 미소짓는\\n(Smiling tenderly)\" }, { value: \"yearning look\", label: \"갈망하는 표정\\n(Yearning look)\" }, { value: \"blushing shyly with affection\", label: \"애정으로 수줍게 얼굴 붉히는\\n(Blushing shyly with affection)\" }, { value: \"coy smile\", label: \"수줍은 미소\\n(Coy smile)\" }, { value: \"eyes shining with romantic interest\", label: \"낭만적 관심으로 빛나는 눈\\n(Eyes shining with romantic interest)\" }, { value: \"caring look\", label: \"다정한 표정\\n(Caring look)\"},\n        ],\n        [ExpressionSubCategory.CONFIDENT_PROUD]: [\n          NONE_OPTION, { value: \"standing tall with a proud smile\", label: \"자랑스러운 미소로 당당히 선\\n(Standing tall, proud smile)\" }, { value: \"a confident smirk, self-assured\", label: \"자신감 넘치는 히죽임, 확신에 찬\\n(Confident smirk, self-assured)\" }, { value: \"eyes reflecting strong self-belief\", label: \"강한 자신감이 비치는 눈\\n(Eyes reflecting strong self-belief)\" }, { value: \"head held high with dignity\", label: \"위엄 있게 고개를 든\\n(Head held high with dignity)\" }, { value: \"a look of quiet accomplishment\", label: \"조용한 성취감의 표정\\n(Look of quiet accomplishment)\" }, { value: \"assertive gaze\", label: \"단호한 시선\\n(Assertive gaze)\" }, { value: \"smug expression\", label: \"우쭐대는 표정\\n(Smug expression)\" }, { value: \"radiating self-confidence\", label: \"자신감을 뿜어내는\\n(Radiating self-confidence)\" }, { value: \"a determined and bold look\", label: \"단호하고 대담한 표정\\n(Determined and bold look)\" }, { value: \"looking triumphant\", label: \"승리에 찬 표정\\n(Looking triumphant)\" }, { value: \"self-satisfied smile\", label: \"자기만족의 미소\\n(Self-satisfied smile)\"},\n        ],\n        [ExpressionSubCategory.DAILY_LIFE_EXPRESSIONS]: [\n          NONE_OPTION, { value: \"ordinary daily expression\", label: \"평범한 일상의 표정\\n(Ordinary daily expression)\"}, { value: \"spacing out while commuting\", label: \"출퇴근길 멍한 표정\\n(Spacing out while commuting)\"}, { value: \"slightly tired after work\", label: \"퇴근 후 약간 지친 표정\\n(Slightly tired after work)\"}, { value: \"focused while reading a book\", label: \"책 읽으며 집중한 표정\\n(Focused while reading a book)\"}, { value: \"relaxed while watching TV\", label: \"TV 보며 편안한 표정\\n(Relaxed while watching TV)\"}, { value: \"yawning in the morning\", label: \"아침에 하품하는 표정\\n(Yawning in the morning)\"}, { value: \"listening to music with enjoyment\", label: \"음악 감상하며 즐거운 표정\\n(Enjoying music)\"}, { value: \"contemplating what to eat\", label: \"무엇을 먹을지 고민하는 표정\\n(Contemplating what to eat)\"}, { value: \"browsing smartphone with interest\", label: \"스마트폰 흥미롭게 보는 표정\\n(Browsing smartphone with interest)\"}, { value: \"waiting for coffee, looking expectant\", label: \"커피 기다리며 기대하는 표정\\n(Waiting for coffee, expectant)\"},\n        ],\n      };\n      const ACTION_SUB_CATEGORY_LIST = Object.values(ActionSubCategory).map(val => ({value: val, label: val}));\n      const ACTION_DETAIL_OPTIONS = {\n        [ActionSubCategory.STATIC_POSES]: [\n          NONE_OPTION, { value: \"standing confidently, hands on hips\", label: \"자신감 있게 서서 허리 손\\n(Standing confidently, hands on hips)\" }, { value: \"sitting gracefully on a throne, regal posture\", label: \"왕좌에 우아하게, 위엄 있는 자세\\n(Sitting gracefully on throne, regal)\" }, { value: \"leaning casually against a weathered brick wall\", label: \"낡은 벽돌 벽에 무심하게 기댄\\n(Leaning casually on brick wall)\" }, { value: \"arms crossed, looking contemplative and serious\", label: \"팔짱 끼고 생각 잠긴 듯 진지\\n(Arms crossed, contemplative serious)\" }, { value: \"kneeling respectfully, head bowed slightly\", label: \"공손하게 무릎 꿇고 고개 살짝\\n(Kneeling respectfully, head bowed)\" }, { value: \"reclining elegantly on a chaise lounge, relaxed\", label: \"긴 의자에 우아하게, 편안한\\n(Reclining elegantly on chaise lounge)\" }, { value: \"posing dramatically with one hand outstretched, palm up\", label: \"한 손 뻗고 극적 포즈, 손바닥 위로\\n(Posing dramatically, hand outstretched)\" }, { value: \"standing with feet shoulder-width apart, alert and ready\", label: \"발 어깨 너비, 경계하며 준비된\\n(Standing alert, feet shoulder-width)\" }, { value: \"meditating in a lotus position, serene expression\", label: \"연꽃 자세로 명상, 고요한 표정\\n(Meditating in lotus position, serene)\" }, { value: \"profile view, gazing into the horizon with hope\", label: \"옆모습, 희망 안고 수평선 응시\\n(Profile view, gazing into horizon)\" }, { value: \"silhouetted against a bright sunset or moon\", label: \"밝은 석양/달 등지고 실루엣\\n(Silhouetted against sunset/moon)\" }, { value: \"heroic stance, chest out, looking upwards\", label: \"영웅적 자세, 가슴 펴고 위를 봄\\n(Heroic stance, chest out, upwards)\" }, { value: \"lounging casually on a sofa\", label: \"소파에 편안하게 기대앉은\\n(Lounging casually on sofa)\" }, { value: \"power pose, feet planted firmly, looking determined\", label: \"파워 포즈, 발 굳건히, 단호한\\n(Power pose, feet firm, determined)\" }, { value: \"contrapposto pose, weight shifted to one leg\", label: \"콘트라포스토 자세, 한쪽 다리에 체중\\n(Contrapposto pose, weight shifted)\" }, { value: \"crouching low to the ground, observant\", label: \"땅에 낮게 웅크린, 관찰하는\\n(Crouching low, observant)\" }, { value: \"hands clasped behind back, thoughtful\", label: \"손 등 뒤로 깍지, 생각에 잠긴\\n(Hands clasped behind back)\" }, { value: \"one hand resting on chin, pondering\", label: \"한 손 턱에, 숙고하는\\n(One hand on chin, pondering)\" }, { value: \"standing still looking out window\", label: \"가만히 서서 창밖을 보는\\n(Standing still looking out window)\"}, { value: \"sitting at a table\", label: \"테이블에 앉아있는\\n(Sitting at a table)\"}, { value: \"lying in bed looking at ceiling\", label: \"침대에 누워 천장 보는\\n(Lying in bed looking at ceiling)\"},\n        ],\n        [ActionSubCategory.DYNAMIC_MOVEMENT]: [\n          NONE_OPTION, { value: \"walking purposefully through a crowded street, focused\", label: \"붐비는 거리, 목표 향해 집중\\n(Walking purposefully, crowded street)\" }, { value: \"running swiftly through a sun-dappled forest, agile\", label: \"햇살 비치는 숲, 민첩하게 달리는\\n(Running swiftly, sun-dappled forest)\" }, { value: \"jumping gracefully in mid-air, like a ballet dancer\", label: \"발레리나처럼 공중 우아하게 점프\\n(Jumping gracefully, ballet dancer)\" }, { value: \"dancing energetically to a vibrant rhythm, joyful\", label: \"활기찬 리듬에 힘차게 춤, 즐거운\\n(Dancing energetically, vibrant rhythm)\" }, { value: \"sprinting at full speed, determined to win\", label: \"전속력 질주, 이기려는 의지\\n(Sprinting full speed, determined)\" }, { value: \"leaping over an obstacle with ease\", label: \"장애물을 가뿐히 뛰어넘는\\n(Leaping over obstacle with ease)\" }, { value: \"twirling in a flowing gown, creating motion blur\", label: \"흐르는 드레스 입고 회전, 모션 블러\\n(Twirling in flowing gown, motion blur)\" }, { value: \"swimming powerfully in clear turquoise water\", label: \"맑은 청록색 물, 힘차게 수영\\n(Swimming powerfully, clear water)\" }, { value: \"falling through the air, arms outstretched\", label: \"공중에서 떨어지는, 팔 벌린\\n(Falling through air, arms outstretched)\" }, { value: \"riding a galloping horse across a field\", label: \"질주하는 말 타고 들판 가로지르는\\n(Riding galloping horse across field)\" }, { value: \"skateboarding down a ramp, performing a trick\", label: \"경사로 스케이트보드, 묘기\\n(Skateboarding down ramp, trick)\" }, { value: \"flying through the sky with wings or powers\", label: \"날개/능력으로 하늘 나는\\n(Flying through sky, wings/powers)\" }, { value: \"sliding down a snowy hill on a sled\", label: \"눈 덮인 언덕 썰매 타고 내려오는\\n(Sliding down snowy hill on sled)\" }, { value: \"surfing a large ocean wave\", label: \"큰 파도를 서핑하는\\n(Surfing a large ocean wave)\" }, { value: \"climbing a steep rock face\", label: \"가파른 암벽 등반하는\\n(Climbing steep rock face)\" }, { value: \"somersaulting in mid-air\", label: \"공중제비 도는\\n(Somersaulting in mid-air)\" }, { value: \"spinning rapidly, creating a blur\", label: \"빠르게 회전하며 잔상 만드는\\n(Spinning rapidly, creating blur)\" }, { value: \"walking quickly\", label: \"빠르게 걷는\\n(Walking quickly)\"}, { value: \"going up/down stairs\", label: \"계단을 오르내리는\\n(Going up/down stairs)\"}, { value: \"light jogging\", label: \"가볍게 조깅하는\\n(Light jogging)\"},\n        ],\n        [ActionSubCategory.INTERACTION_OBJECT]: [\n          NONE_OPTION, { value: \"reading an ancient, leather-bound book by candlelight\", label: \"촛불 아래 고대 가죽 책 읽는\\n(Reading ancient book by candlelight)\" }, { value: \"holding a mysterious, glowing orb that pulses with light\", label: \"빛나는 신비로운 구체 들고 있는\\n(Holding mysterious glowing orb)\" }, { value: \"writing intently with a feathered quill on parchment\", label: \"양피지에 깃펜으로 열심히 글 쓰는\\n(Writing with quill on parchment)\" }, { value: \"playing a haunting melody on a violin in a dark room\", label: \"어두운 방, 바이올린 연주\\n(Playing haunting melody on violin)\" }, { value: \"examining a delicate flower with a magnifying glass\", label: \"돋보기로 섬세한 꽃 살펴보는\\n(Examining flower with magnifying glass)\" }, { value: \"drinking from a rustic wooden cup, thoughtful\", label: \"소박한 나무 잔, 생각에 잠겨\\n(Drinking from rustic wooden cup)\" }, { value: \"painting on a canvas with focused expression, art studio\", label: \"캔버스에 그림, 집중된 표정, 화실\\n(Painting on canvas, focused, studio)\" }, { value: \"sculpting clay into a lifelike figure\", label: \"점토로 실물 같은 형상 빚는\\n(Sculpting clay into lifelike figure)\" }, { value: \"using a futuristic holographic interface with glowing hands\", label: \"미래형 홀로그램 인터페이스 사용\\n(Using futuristic holographic interface)\" }, { value: \"sharpening a gleaming sword with a whetstone\", label: \"빛나는 검을 숫돌로 가는\\n(Sharpening gleaming sword)\" }, { value: \"unlocking an ornate, ancient chest with a key\", label: \"화려한 고대 상자 열쇠로 여는\\n(Unlocking ornate ancient chest)\" }, { value: \"sipping tea from a delicate porcelain cup\", label: \"섬세한 도자기 컵으로 차 마시는\\n(Sipping tea from porcelain cup)\" }, { value: \"typing furiously on a glowing keyboard\", label: \"빛나는 키보드 맹렬히 타이핑\\n(Typing furiously on glowing keyboard)\" }, { value: \"adjusting spectacles while reading a scroll\", label: \"두루마리 읽으며 안경 고쳐 쓰는\\n(Adjusting spectacles, reading scroll)\" }, { value: \"holding a lantern aloft in a dark cave\", label: \"어두운 동굴 속 랜턴 높이 든\\n(Holding lantern in dark cave)\" }, { value: \"stirring a bubbling cauldron with a wooden spoon\", label: \"나무 숟가락으로 끓는 솥 젓는\\n(Stirring bubbling cauldron)\" }, { value: \"offering a glowing apple\", label: \"빛나는 사과를 건네는\\n(Offering a glowing apple)\" }, { value: \"using a smartphone\", label: \"스마트폰을 사용하는\\n(Using a smartphone)\"}, { value: \"working on a laptop\", label: \"노트북으로 작업하는\\n(Working on a laptop)\"}, { value: \"pressing a TV remote\", label: \"TV 리모컨을 누르는\\n(Pressing a TV remote)\"}, { value: \"carrying a bag\", label: \"가방을 드는\\n(Carrying a bag)\"}, { value: \"opening an umbrella\", label: \"우산을 펴는\\n(Opening an umbrella)\"}, { value: \"holding a coffee cup\", label: \"커피 컵을 들고 있는\\n(Holding a coffee cup)\"},\n        ],\n        [ActionSubCategory.MAGICAL_FANTASY]: [\n          NONE_OPTION, { value: \"casting a powerful spell, hands glowing with arcane energy\", label: \"강력한 마법 시전, 손에 비전 에너지\\n(Casting powerful spell, arcane energy)\" }, { value: \"wielding a legendary sword that hums with ancient power\", label: \"전설의 검 휘두르며 고대 힘 진동\\n(Wielding legendary sword, ancient power)\" }, { value: \"summoning a majestic mythical creature (e.g., dragon, phoenix, griffin)\", label: \"웅장한 신화 생물 소환 (용, 불사조)\\n(Summoning majestic mythical creature)\" }, { value: \"levitating slightly off the ground, surrounded by a faint shimmering aura\", label: \"땅에서 살짝 떠오르며 희미한 오라\\n(Levitating slightly, shimmering aura)\" }, { value: \"conjuring swirling flames in the palm of a hand\", label: \"손바닥에 소용돌이치는 불꽃 생성\\n(Conjuring swirling flames in palm)\" }, { value: \"opening a shimmering portal to another dimension or world\", label: \"다른 차원/세계로 빛나는 포털 여는\\n(Opening shimmering portal)\" }, { value: \"communicating telepathically with an ancient, wise animal\", label: \"고대 현명한 동물과 텔레파시 소통\\n(Telepathically communicating with animal)\" }, { value: \"healing a wounded creature with glowing, gentle hands\", label: \"빛나는 손으로 상처 입은 생물 치유\\n(Healing wounded creature, glowing hands)\" }, { value: \"transforming into a powerful animal or mythical beast\", label: \"강력한 동물/신화 야수로 변신\\n(Transforming into animal/beast)\" }, { value: \"reading prophecies from ancient, glowing runes or crystals\", label: \"고대 빛나는 룬/수정 예언 읽는\\n(Reading prophecies from runes/crystals)\" }, { value: \"weaving illusions with intricate hand gestures\", label: \"복잡한 손짓으로 환상 엮는\\n(Weaving illusions with hand gestures)\" }, { value: \"channeling lightning from a stormy sky\", label: \"폭풍우 치는 하늘에서 번개 유도\\n(Channeling lightning from stormy sky)\" }, { value: \"controlling plants and nature with a gesture\", label: \"몸짓으로 식물과 자연 조종\\n(Controlling plants with gesture)\" }, { value: \"wearing an amulet that deflects magical attacks\", label: \"마법 공격 막는 부적 착용\\n(Wearing amulet deflecting magic)\" }, { value: \"drawing power from the moon or stars\", label: \"달/별에서 힘을 끌어오는\\n(Drawing power from moon/stars)\" },\n        ],\n        [ActionSubCategory.DAILY_LIFE]: [\n          NONE_OPTION, { value: \"sipping tea thoughtfully by a rain-streaked window\", label: \"빗줄기 창가, 생각 잠겨 차 마시는\\n(Sipping tea by rain-streaked window)\" }, { value: \"looking out a window at a bustling cityscape, contemplative\", label: \"창밖 붐비는 도시, 사색에 잠긴\\n(Looking out window at cityscape)\" }, { value: \"engaged in an animated conversation with a friend at a cafe\", label: \"카페 친구와 활기찬 대화\\n(Animated conversation at cafe)\" }, { value: \"working diligently on a laptop in a cozy, book-filled study\", label: \"책 가득한 서재, 노트북 작업\\n(Working on laptop in cozy study)\" }, { value: \"cooking a delicious meal in a sunlit, rustic kitchen\", label: \"햇볕 드는 주방, 맛있는 요리\\n(Cooking meal in sunlit kitchen)\" }, { value: \"strolling leisurely through a park on a sunny autumn day\", label: \"화창한 가을날 공원 한가로이 산책\\n(Strolling through park, autumn day)\" }, { value: \"laughing heartily with friends around a dinner table\", label: \"식탁 친구들과 진심으로 웃는\\n(Laughing with friends at dinner)\" }, { value: \"listening to music with headphones, eyes closed, lost in melody\", label: \"헤드폰 음악 감상, 눈 감고 멜로디에\\n(Listening to music, eyes closed)\" }, { value: \"tending to plants in a small, vibrant window garden\", label: \"작고 활기찬 창가 정원 식물 돌보는\\n(Tending plants in window garden)\" }, { value: \"enjoying a quiet moment of reflection on a park bench\", label: \"공원 벤치, 조용히 사색 즐기는\\n(Quiet reflection on park bench)\" }, { value: \"reading a newspaper on a subway train\", label: \"지하철에서 신문 읽는\\n(Reading newspaper on subway)\" }, { value: \"walking a dog in the park\", label: \"공원에서 개 산책시키는\\n(Walking dog in park)\" }, { value: \"shopping for groceries at a local market\", label: \"지역 시장에서 식료품 쇼핑\\n(Shopping for groceries at market)\" }, { value: \"playing a board game with family\", label: \"가족과 보드게임 하는\\n(Playing board game with family)\" }, { value: \"riding a bicycle down a tree-lined street\", label: \"가로수길 자전거 타는\\n(Riding bicycle down street)\" }, { value: \"attending an online meeting\", label: \"온라인 회의 참여하는\\n(Attending an online meeting)\"}, { value: \"receiving food delivery\", label: \"음식 배달받는\\n(Receiving food delivery)\"}, { value: \"opening a delivery box\", label: \"택배 상자 여는\\n(Opening a delivery box)\"}, { value: \"using public transportation\", label: \"대중교통 이용하는\\n(Using public transportation)\"}, { value: \"using an ATM\", label: \"은행 ATM 사용하는\\n(Using an ATM)\"}, { value: \"texting on a phone\", label: \"휴대폰으로 문자 보내는\\n(Texting on a phone)\"}, { value: \"taking a selfie\", label: \"셀카 찍는\\n(Taking a selfie)\"}, { value: \"browsing social media\", label: \"SNS 탐색하는\\n(Browsing social media)\"},\n        ],\n        [ActionSubCategory.HOUSEHOLD_CHORES]: [\n          NONE_OPTION, { value: \"washing dishes at the kitchen sink\", label: \"부엌 싱크대에서 설거지하는\\n(Washing dishes at kitchen sink)\"}, { value: \"vacuuming the living room carpet\", label: \"거실 카펫 진공청소기로 청소하는\\n(Vacuuming living room carpet)\"}, { value: \"doing laundry, loading washing machine\", label: \"세탁하며 세탁기에 빨랫감 넣는\\n(Doing laundry, loading machine)\"}, { value: \"hanging clothes out to dry\", label: \"빨래 너는\\n(Hanging clothes out to dry)\"}, { value: \"ironing clothes on an ironing board\", label: \"다리미판 위에서 옷 다리는\\n(Ironing clothes on board)\"}, { value: \"cooking on a stove\", label: \"가스레인지/인덕션 위에서 요리하는\\n(Cooking on a stove)\"}, { value: \"setting the dinner table\", label: \"저녁 식탁 차리는\\n(Setting the dinner table)\"}, { value: \"taking out the trash/recycling\", label: \"쓰레기/재활용품 버리러 가는\\n(Taking out trash/recycling)\"}, { value: \"watering houseplants\", label: \"집 안 화분에 물 주는\\n(Watering houseplants)\"}, { value: \"sweeping the floor with a broom\", label: \"빗자루로 바닥 쓰는\\n(Sweeping floor with broom)\"}, { value: \"making the bed\", label: \"침대 정리하는\\n(Making the bed)\"}, { value: \"dusting furniture\", label: \"가구 먼지 터는\\n(Dusting furniture)\"},\n        ],\n        [ActionSubCategory.COMBAT_POSES]: [\n          NONE_OPTION, { value: \"in a dynamic sword-fighting stance, ready to strike or parry\", label: \"역동적 검술 자세, 공격/방어 준비\\n(Dynamic sword-fighting stance)\" }, { value: \"aiming a bow and arrow with deadly precision, focused\", label: \"활과 화살 정밀 조준, 집중\\n(Aiming bow and arrow, precision)\" }, { value: \"dodging an incoming attack with agility and grace\", label: \"공격 민첩하고 우아하게 피하는\\n(Dodging attack with agility)\" }, { value: \"parrying a powerful blow with a sturdy shield\", label: \"강력한 공격 견고한 방패로 막는\\n(Parrying blow with shield)\" }, { value: \"in a martial arts kiai pose, channeling energy\", label: \"무술 기합 자세, 에너지 집중\\n(Martial arts kiai pose, channeling)\" }, { value: \"sneaking stealthily through shadows, knife drawn\", label: \"그림자 속 은밀히, 칼 뽑아 든\\n(Sneaking through shadows, knife drawn)\" }, { value: \"holding a glowing magical staff, prepared for magical battle\", label: \"빛나는 마법 지팡이, 마법 전투 준비\\n(Holding magical staff, magic battle)\" }, { value: \"throwing a powerful punch with great force and speed\", label: \"강력한 펀치, 엄청난 힘과 속도\\n(Throwing powerful punch, force/speed)\" }, { value: \"victorious pose over a defeated foe (implied), looking tired but proud\", label: \"승리 포즈 (암시적), 지쳤지만 자랑스러운\\n(Victorious pose, tired but proud)\" }, { value: \"defensive stance, protecting an innocent person or object\", label: \"방어 자세, 무고한 이/물건 보호\\n(Defensive stance, protecting innocent)\" }, { value: \"dual-wielding daggers in a ready stance\", label: \"쌍단검 들고 준비 자세\\n(Dual-wielding daggers, ready stance)\" }, { value: \"firing a futuristic laser pistol\", label: \"미래형 레이저 권총 발사\\n(Firing futuristic laser pistol)\" }, { value: \"mid-air kick, martial arts style\", label: \"공중 발차기, 무술 스타일\\n(Mid-air kick, martial arts)\" }, { value: \"holding a spear, braced for impact\", label: \"창 들고 충격 대비 자세\\n(Holding spear, braced for impact)\" }, { value: \"drawing a sword from its scabbard\", label: \"칼집에서 검 뽑는 중\\n(Drawing sword from scabbard)\" },\n        ],\n        [ActionSubCategory.ARTISTIC_CREATIVE]: [\n          NONE_OPTION, { value: \"playing a grand piano with passion, music notes floating\", label: \"그랜드 피아노 열정적 연주, 음표\\n(Playing grand piano, passion, notes)\" }, { value: \"singing into a vintage microphone on a stage, spotlight\", label: \"무대 빈티지 마이크 노래, 스포트라이트\\n(Singing into vintage microphone, stage)\" }, { value: \"conducting an orchestra with dramatic, sweeping gestures\", label: \"극적 몸짓으로 오케스트라 지휘\\n(Conducting orchestra, dramatic gestures)\" }, { value: \"writing poetry in a leather-bound notebook with a fountain pen\", label: \"가죽 노트, 만년필로 시 쓰는\\n(Writing poetry, leather notebook)\" }, { value: \"taking a photograph with an old, classic film camera\", label: \"오래된 클래식 필름 카메라 사진 촬영\\n(Photographing with classic film camera)\" }, { value: \"designing on a glowing digital tablet with a stylus\", label: \"빛나는 디지털 태블릿, 스타일러스 디자인\\n(Designing on digital tablet, stylus)\" }, { value: \"arranging colorful flowers into a beautiful, intricate bouquet\", label: \"형형색색 꽃, 아름다운 꽃다발 제작\\n(Arranging flowers into bouquet)\" }, { value: \"lost in the music while playing an acoustic guitar by a campfire\", label: \"캠프파이어 옆, 기타 연주 몰입\\n(Playing guitar by campfire, lost in music)\" }, { value: \"sculpting a masterpiece from a block of marble\", label: \"대리석으로 걸작 조각하는\\n(Sculpting marble masterpiece)\" }, { value: \"directing a film scene with a megaphone\", label: \"확성기 들고 영화 장면 감독하는\\n(Directing film scene with megaphone)\" }, { value: \"DJing at a vibrant nightclub, hands on turntables\", label: \"활기찬 클럽 DJ, 턴테이블에 손\\n(DJing at nightclub, turntables)\" }, { value: \"street artist spray-painting a mural on a brick wall\", label: \"벽돌 벽에 그래피티, 거리 예술가\\n(Street artist spray-painting mural)\" }, { value: \"composing music at a piano, surrounded by sheet music\", label: \"피아노 작곡, 악보에 둘러싸여\\n(Composing music at piano, sheet music)\" }, { value: \"sketching in a notebook at a cafe\", label: \"카페에서 노트에 스케치하는\\n(Sketching in notebook at cafe)\"},\n        ],\n        [ActionSubCategory.SPORTS_ATHLETICS]: [\n          NONE_OPTION, { value: \"kicking a soccer ball towards a goal\", label: \"축구공 골대 향해 차는\\n(Kicking soccer ball to goal)\" }, { value: \"shooting a basketball at a hoop\", label: \"농구공 림 향해 쏘는\\n(Shooting basketball at hoop)\" }, { value: \"swinging a tennis racket to hit a ball\", label: \"테니스 라켓 휘둘러 공 치는\\n(Swinging tennis racket)\" }, { value: \"running a marathon, determined expression\", label: \"마라톤 달리는, 단호한 표정\\n(Running marathon, determined)\" }, { value: \"lifting heavy weights at a gym\", label: \"헬스장에서 무거운 역기 드는\\n(Lifting heavy weights at gym)\" }, { value: \"performing a gymnastic routine on a balance beam\", label: \"평균대에서 체조 연기\\n(Gymnastic routine on balance beam)\" }, { value: \"ice skating gracefully on a frozen pond\", label: \"얼어붙은 연못, 우아하게 스케이팅\\n(Ice skating gracefully on pond)\" }, { value: \"diving into a swimming pool\", label: \"수영장으로 다이빙하는\\n(Diving into swimming pool)\" }, { value: \"hitting a baseball with a bat\", label: \"야구 방망이로 공 치는\\n(Hitting baseball with bat)\" }, { value: \"skiing down a snowy mountain slope\", label: \"눈 덮인 산비탈 스키 타는\\n(Skiing down mountain slope)\" }, { value: \"doing yoga poses at home\", label: \"집에서 요가 자세 하는\\n(Doing yoga poses at home)\"},\n        ],\n        [ActionSubCategory.COMMUNICATION_GESTURES]: [\n          NONE_OPTION, { value: \"waving hello or goodbye with a smile\", label: \"미소 지으며 안녕 손 흔드는\\n(Waving hello/goodbye with smile)\" }, { value: \"pointing towards something interesting\", label: \"흥미로운 것 가리키는\\n(Pointing towards something)\" }, { value: \"giving a thumbs up gesture of approval\", label: \"승인하며 엄지척 하는\\n(Giving thumbs up gesture)\" }, { value: \"shrugging shoulders, indicating uncertainty\", label: \"어깨 으쓱, 불확실함 표시\\n(Shrugging shoulders, uncertainty)\" }, { value: \"facepalming in exasperation\", label: \"절망감에 얼굴 감싸는 (페이스팜)\\n(Facepalming in exasperation)\" }, { value: \"holding a hand to ear, listening intently\", label: \"귀에 손 대고 열심히 듣는\\n(Hand to ear, listening intently)\" }, { value: \"making a 'shhh' gesture with finger to lips\", label: \"입술에 손가락, '쉿' 제스처\\n(Making 'shhh' gesture)\" }, { value: \"clapping hands in applause\", label: \"박수 치는\\n(Clapping hands in applause)\" }, { value: \"offering a handshake\", label: \"악수 청하는\\n(Offering a handshake)\" }, { value: \"beckoning someone closer with a hand gesture\", label: \"손짓으로 가까이 오라고 부르는\\n(Beckoning someone closer)\" }, { value: \"talking on the phone\", label: \"전화 통화하는\\n(Talking on the phone)\"}, { value: \"video calling on a laptop\", label: \"노트북으로 화상 통화하는\\n(Video calling on laptop)\"},\n        ],\n      };\n      const CLOTHING_SUB_CATEGORY_LIST = Object.values(ClothingSubCategory).map(val => ({value: val, label: val}));\n      const CLOTHING_DETAIL_OPTIONS = {\n        [ClothingSubCategory.MODERN_CASUAL]: [\n          NONE_OPTION, { value: \"wearing a graphic t-shirt, ripped jeans, and sneakers\", label: \"그래픽 티, 찢청, 스니커즈\\n(Graphic t-shirt, ripped jeans, sneakers)\" }, { value: \"in a comfortable oversized hoodie, leggings, and boots\", label: \"오버사이즈 후드티, 레깅스, 부츠\\n(Oversized hoodie, leggings, boots)\" }, { value: \"sporting a stylish leather jacket over a simple blouse and dark pants\", label: \"가죽 재킷, 블라우스, 어두운 바지\\n(Leather jacket, blouse, dark pants)\" }, { value: \"dressed in trendy athleisure wear, like a matching sweatsuit\", label: \"트렌디 애슬레저룩 (세트 운동복)\\n(Trendy athleisure, sweatsuit)\" }, { value: \"a flowy bohemian maxi dress with sandals and layered necklaces\", label: \"보헤미안 맥시 드레스, 샌들, 목걸이\\n(Bohemian maxi dress, sandals)\" }, { value: \"a simple sundress and a wide-brimmed straw hat\", label: \"심플 선드레스, 넓은 밀짚모자\\n(Simple sundress, straw hat)\" }, { value: \"denim jacket, white tee, and chinos with rolled cuffs\", label: \"데님 재킷, 흰 티, 치노 팬츠 (롤업)\\n(Denim jacket, white tee, chinos)\" }, { value: \"a knitted chunky sweater and corduroy pants, autumn style\", label: \"청키 니트 스웨터, 코듀로이 팬츠\\n(Knitted sweater, corduroy pants)\" }, { value: \"a band t-shirt, cargo shorts, and combat boots\", label: \"밴드 티셔츠, 카고 반바지, 전투화\\n(Band t-shirt, cargo shorts, boots)\" }, { value: \"urban streetwear with a baseball cap, bomber jacket, and joggers\", label: \"어반 스트릿웨어, 야구모자, 봄버, 조거\\n(Urban streetwear, cap, bomber)\" }, { value: \"plaid flannel shirt open over a tank top, with skinny jeans\", label: \"체크 플란넬 셔츠, 탱크탑, 스키니진\\n(Plaid flannel, tank top, skinny jeans)\" }, { value: \"polo shirt and khaki shorts, preppy look\", label: \"폴로 셔츠, 카키 반바지, 프레피룩\\n(Polo shirt, khaki shorts, preppy)\" }, { value: \"jumpsuit or romper with fashionable belt\", label: \"점프수트/롬퍼, 패션 벨트\\n(Jumpsuit/romper, fashion belt)\" }, { value: \"tie-dye t-shirt and denim cutoffs\", label: \"타이다이 티셔츠, 데님 컷오프\\n(Tie-dye t-shirt, denim cutoffs)\" }, { value: \"linen shirt and shorts, beachwear\", label: \"리넨 셔츠와 반바지, 비치웨어\\n(Linen shirt and shorts, beachwear)\" }, { value: \"cotton t-shirt and jeans\", label: \"면 티셔츠와 청바지\\n(Cotton t-shirt and jeans)\"}, { value: \"sweater and cotton pants\", label: \"스웨터와 면바지\\n(Sweater and cotton pants)\"}, { value: \"tracksuit set\", label: \"트레이닝복 세트\\n(Tracksuit set)\"}, { value: \"cardigan and slacks\", label: \"가디건과 슬랙스\\n(Cardigan and slacks)\"},\n        ],\n        [ClothingSubCategory.FORMAL_ELEGANT]: [\n          NONE_OPTION, { value: \"in a sharp, tailored business suit (charcoal grey, navy) with a silk tie\", label: \"잘 재단된 정장(회색/네이비), 실크 넥타이\\n(Tailored suit, silk tie)\" }, { value: \"wearing an elegant floor-length evening gown (e.g., velvet, satin) with sparkling jewelry\", label: \"우아한 이브닝 드레스(벨벳/새틴), 보석\\n(Elegant evening gown, jewelry)\" }, { value: \"in a classic black tuxedo with a bow tie and cummerbund\", label: \"클래식 블랙 턱시도, 나비넥타이\\n(Classic black tuxedo, bow tie)\" }, { value: \"adorned in a sophisticated cocktail dress (e.g., little black dress) and high heels\", label: \"세련된 칵테일 드레스, 하이힐\\n(Sophisticated cocktail dress, heels)\" }, { value: \"a stylish pantsuit (e.g., bold color, wide leg) with statement accessories\", label: \"스타일리시 팬츠수트, 포인트 액세서리\\n(Stylish pantsuit, statement accessories)\" }, { value: \"a flowing silk blouse and a high-waisted pencil skirt\", label: \"실크 블라우스, 하이웨이스트 펜슬 스커트\\n(Silk blouse, pencil skirt)\" }, { value: \"a velvet smoking jacket over formal trousers with loafers\", label: \"벨벳 스모킹 재킷, 정장 바지, 로퍼\\n(Velvet smoking jacket, trousers)\" }, { value: \"a glamorous ballgown with intricate beading and a full skirt\", label: \"화려한 무도회 드레스, 비즈 장식\\n(Glamorous ballgown, beading)\" }, { value: \"wearing a sophisticated three-piece suit with a pocket watch\", label: \"세련된 쓰리피스 수트, 회중시계\\n(Sophisticated three-piece suit)\" }, { value: \"a chic sheath dress with a string of pearls\", label: \"시크한 시스 드레스, 진주 목걸이\\n(Chic sheath dress, pearls)\" }, { value: \"morning suit for formal daytime events\", label: \"모닝 수트 (주간 정장)\\n(Morning suit for daytime events)\" }, { value: \"opera gloves with an off-the-shoulder gown\", label: \"오페라 글러브, 오프숄더 가운\\n(Opera gloves, off-shoulder gown)\" }, { value: \"tailcoat and white tie for ultra-formal occasions\", label: \"연미복과 흰색 타이 (최고 정장)\\n(Tailcoat and white tie)\" }, { value: \"business casual (blazer and chinos)\", label: \"비즈니스 캐주얼 (블레이저와 치노)\\n(Business casual)\"},\n        ],\n        [ClothingSubCategory.HISTORICAL_TRADITIONAL]: [\n          NONE_OPTION, { value: \"wearing traditional Korean Hanbok with intricate gold embroidery and norigae\", label: \"전통 한복, 금박 자수, 노리개\\n(Korean Hanbok, gold embroidery, norigae)\" }, { value: \"in shining medieval knight armor with a heraldic sigil on the breastplate\", label: \"중세 기사 갑옷, 가슴판 문장\\n(Medieval knight armor, heraldic sigil)\" }, { value: \"dressed in elaborate Victorian era attire with a corset, bustle, and lace details\", label: \"빅토리아 시대 의상, 코르셋, 버슬, 레이스\\n(Victorian attire, corset, bustle, lace)\" }, { value: \"wearing a flowing Roman toga and intricate sandals, laurel wreath\", label: \"로마 토가, 샌들, 월계관\\n(Roman toga, sandals, laurel wreath)\" }, { value: \"in a Japanese kimono with a decorative obi sash and geta sandals\", label: \"일본 기모노, 장식 오비, 게다\\n(Japanese kimono, obi, geta)\" }, { value: \"dressed as an Egyptian pharaoh with a nemes headdress, kohl eyeliner, and gold jewelry\", label: \"이집트 파라오, 네메스, 콜 아이라이너, 금 장신구\\n(Egyptian pharaoh, nemes, kohl)\" }, { value: \"Viking warrior attire with fur-lined cloak, leather armor, and horned helmet (optional)\", label: \"바이킹 전사, 모피 망토, 가죽 갑옷, 뿔투구\\n(Viking attire, fur cloak, leather armor)\" }, { value: \"Renaissance noble clothing with ruffs, velvet doublet, and jeweled accessories\", label: \"르네상스 귀족, 러프, 벨벳, 보석\\n(Renaissance noble, ruffs, velvet)\" }, { value: \"Ancient Greek chiton or peplos, simple and elegant\", label: \"고대 그리스 키톤/페플로스, 단순 우아\\n(Ancient Greek chiton/peplos)\" }, { value: \"Scottish kilt with tartan pattern, sporran, and sgian-dubh knife\", label: \"스코틀랜드 킬트, 타탄, 스포런, 단검\\n(Scottish kilt, tartan, sporran)\" }, { value: \"1920s flapper dress with beads, sequins, and a feathered headband\", label: \"1920년대 플래퍼 드레스, 비즈, 깃털\\n(1920s flapper dress, beads, feathers)\" }, { value: \"Wild West cowboy/cowgirl attire: denim, leather chaps, cowboy hat, boots\", label: \"서부 카우보이/걸: 데님, 가죽챕스, 모자\\n(Wild West cowboy/cowgirl attire)\" }, { value: \"Chinese Hanfu, elegant flowing robes\", label: \"중국 한푸, 우아하고 흐르는 도포\\n(Chinese Hanfu, flowing robes)\" }, { value: \"Ottoman Empire kaftan, richly embroidered\", label: \"오스만 제국 카프탄, 화려한 자수\\n(Ottoman Empire kaftan, embroidered)\" },\n        ],\n        [ClothingSubCategory.FANTASY_SCI_FI]: [\n          NONE_OPTION, { value: \"in futuristic cyberpunk gear with neon accents, cybernetic implants, and a trench coat\", label: \"사이버펑크 장비, 네온, 임플란트, 트렌치코트\\n(Cyberpunk gear, neon, implants, trench coat)\" }, { value: \"wearing rugged adventurer's leather armor with pouches, straps, and a tattered cloak\", label: \"모험가 가죽 갑옷, 주머니, 끈, 낡은 망토\\n(Adventurer's leather armor, cloak)\" }, { value: \"in a flowing, ethereal elven robe embroidered with silver thread and leaf motifs\", label: \"엘프 로브, 은실 자수, 잎사귀 무늬\\n(Elven robe, silver embroidery, leaves)\" }, { value: \"donning a sleek, high-tech spacesuit with a reflective visor and glowing blue lights\", label: \"첨단 우주복, 반사 바이저, 파란 불빛\\n(High-tech spacesuit, visor, blue lights)\" }, { value: \"dressed as a sorcerer with a long, star-patterned cloak, pointed hat, and a staff\", label: \"마법사, 별무늬 망토, 뾰족 모자, 지팡이\\n(Sorcerer, star cloak, pointed hat, staff)\" }, { value: \"wearing post-apocalyptic scavenger outfit made of patched leather, metal scraps, and goggles\", label: \"포스트 아포칼립스, 가죽, 금속 조각, 고글\\n(Post-apocalyptic scavenger, scraps, goggles)\" }, { value: \"celestial being adorned in starry, cosmic fabric that shimmers and flows\", label: \"천상의 존재, 별/우주 무늬 천\\n(Celestial being, starry cosmic fabric)\" }, { value: \"dwarven warrior armor, heavy, ornate, with rune engravings and a horned helmet\", label: \"드워프 전사 갑옷, 무겁고 화려, 룬 각인\\n(Dwarven armor, ornate, runes, helmet)\" }, { value: \"steampunk inventor attire with goggles, gears, a waistcoat, and tool belt\", label: \"스팀펑크 발명가, 고글, 기어, 조끼, 공구 벨트\\n(Steampunk inventor, goggles, gears, tool belt)\" }, { value: \"alien race traditional garments, bioluminescent patterns, unusual materials\", label: \"외계 종족 전통 의상, 생체 발광, 특이 소재\\n(Alien garments, bioluminescent, unusual)\" }, { value: \"fairy costume with gossamer wings and flower crown\", label: \"요정 의상, 얇은 날개, 꽃 화관\\n(Fairy costume, gossamer wings, flower crown)\" }, { value: \"space pirate outfit, rugged and functional with a bandana\", label: \"우주 해적 복장, 거칠고 기능적, 반다나\\n(Space pirate, rugged, bandana)\" }, { value: \"mage robes with elemental symbols (fire, water, air, earth)\", label: \"원소 상징 마법사 로브 (불, 물, 공기, 흙)\\n(Mage robes, elemental symbols)\" }, { value: \"time traveler's eclectic outfit, mixing eras\", label: \"시간 여행자 복장, 여러 시대 혼합\\n(Time traveler, eclectic, mixed eras)\" },\n        ],\n        [ClothingSubCategory.OCCUPATIONAL_UNIFORM]: [\n          NONE_OPTION, { value: \"wearing a crisp white doctor's lab coat with a stethoscope around the neck\", label: \"의사 가운, 목에 청진기\\n(Doctor's lab coat, stethoscope)\" }, { value: \"in a firefighter's heavy-duty bunker gear with a helmet and oxygen mask\", label: \"소방관 방화복, 헬멧, 산소마스크\\n(Firefighter bunker gear, helmet, mask)\" }, { value: \"dressed as a chef with a tall white toque, double-breasted jacket, and a stained apron\", label: \"요리사, 높은 모자, 더블자켓, 앞치마\\n(Chef, toque, double-breasted jacket)\" }, { value: \"in a sharp pilot's uniform with epaulets, wings pin, and a cap\", label: \"조종사 유니폼, 견장, 윙뱃지, 모자\\n(Pilot uniform, epaulets, wings pin, cap)\" }, { value: \"police officer uniform with a badge, utility belt, and a holstered sidearm\", label: \"경찰 제복, 배지, 유틸리티 벨트, 권총\\n(Police officer, badge, utility belt, sidearm)\" }, { value: \"scientist in a full-body hazmat suit with a transparent face shield\", label: \"과학자, 전신 방호복, 투명 안면 보호구\\n(Scientist, hazmat suit, face shield)\" }, { value: \"construction worker with a hard hat, reflective vest, and tool belt\", label: \"건설 노동자, 안전모, 반사 조끼, 공구 벨트\\n(Construction worker, hard hat, vest, tools)\" }, { value: \"soldier in camouflage combat uniform, helmet, and tactical vest\", label: \"군인, 위장 전투복, 헬멧, 전술 조끼\\n(Soldier, camouflage, helmet, tactical vest)\" }, { value: \"librarian with glasses on a chain, a cardigan, and a sensible skirt\", label: \"사서, 안경줄, 카디건, 단정한 치마\\n(Librarian, glasses chain, cardigan, skirt)\" }, { value: \"artist with a paint-splattered smock, beret, and holding brushes\", label: \"예술가, 물감 튄 작업복, 베레모, 붓\\n(Artist, paint-splattered smock, beret)\" }, { value: \"astronaut in a bulky spacesuit with NASA patches\", label: \"우주비행사, 두툼한 우주복, NASA 패치\\n(Astronaut, bulky spacesuit, NASA patches)\" }, { value: \"judge in a black robe with a gavel\", label: \"판사, 검은 법복, 의사봉\\n(Judge, black robe, gavel)\" }, { value: \"ballerina in a tutu and pointe shoes\", label: \"발레리나, 튜튜, 토슈즈\\n(Ballerina, tutu, pointe shoes)\" }, { value: \"sailor uniform, white and navy blue with a sailor cap\", label: \"선원 제복, 흰색/남색, 세일러캡\\n(Sailor uniform, white/navy, cap)\" }, { value: \"cafe staff uniform (apron, simple shirt)\", label: \"카페 직원 유니폼 (앞치마, 셔츠)\\n(Cafe staff uniform)\"}, { value: \"convenience store staff uniform (vest or polo shirt)\", label: \"편의점 직원 유니폼 (조끼 또는 폴로셔츠)\\n(Convenience store staff uniform)\"}, { value: \"delivery person outfit (branded jacket/cap)\", label: \"배달원 복장 (브랜드 재킷/모자)\\n(Delivery person outfit)\"},\n        ],\n        [ClothingSubCategory.CULTURAL_ETHNIC]: [\n          NONE_OPTION, { value: \"Indian sari (e.g., silk, cotton) with intricate gold embroidery and matching blouse\", label: \"인도 사리(실크/면), 금 자수, 블라우스\\n(Indian sari, gold embroidery, blouse)\" }, { value: \"Chinese qipao (cheongsam) in silk with dragon or phoenix motifs\", label: \"중국 치파오(실크), 용/봉황 무늬\\n(Chinese qipao, silk, dragon/phoenix)\" }, { value: \"Scottish kilt with sporran, sgian-dubh, kilt pin, and ghillie brogues\", label: \"스코틀랜드 킬트, 스포런, 단검, 핀, 신발\\n(Scottish kilt, sporran, sgian-dubh, pin)\" }, { value: \"Native American tribal regalia with beadwork, feathers, and leather fringe\", label: \"아메리카 원주민 예복, 비즈, 깃털, 가죽 술\\n(Native American regalia, beadwork, feathers)\" }, { value: \"African dashiki with vibrant Kente cloth patterns and a kufi cap\", label: \"아프리카 다시키, 켄테 천, 쿠피 모자\\n(African dashiki, Kente patterns, kufi cap)\" }, { value: \"Middle Eastern abaya and shayla, elegant and modest\", label: \"중동 아바야, 샤일라, 우아하고 단정\\n(Middle Eastern abaya, shayla, elegant)\" }, { value: \"Dutch traditional clothing with wooden clogs (klompen) and lace cap\", label: \"네덜란드 전통 의상, 나막신, 레이스 모자\\n(Dutch traditional, clogs, lace cap)\" }, { value: \"Russian sarafan (pinafore dress) and kokoshnik (headdress)\", label: \"러시아 사라판, 코코쉬닉 (머리장식)\\n(Russian sarafan, kokoshnik)\" }, { value: \"Mexican charro suit for men or folklorico dress for women, colorful and embroidered\", label: \"멕시코 차로 수트/폴클로리코 드레스\\n(Mexican charro/folklorico, colorful)\" }, { value: \"Vietnamese Ao Dai, long tunic over trousers\", label: \"베트남 아오자이, 바지 위 긴 튜닉\\n(Vietnamese Ao Dai, tunic over trousers)\" }, { value: \"Tibetan chuba with colorful apron (pangden for women)\", label: \"티베트 추바, 화려한 앞치마 (팡덴)\\n(Tibetan chuba, colorful apron)\" }, { value: \"Hawaiian aloha shirt or muumuu dress with lei\", label: \"하와이 알로하 셔츠/무무, 레이\\n(Hawaiian aloha/muumuu, lei)\" }, { value: \"Spanish flamenco dress with ruffles and a fan\", label: \"스페인 플라멩코 드레스, 러플, 부채\\n(Spanish flamenco dress, ruffles, fan)\" },\n        ],\n        [ClothingSubCategory.SLEEPWEAR_LOUNGEWEAR]: [\n          NONE_OPTION, { value: \"cozy flannel pajamas with a cute print (e.g., stars, animals)\", label: \"아늑한 플란넬 파자마 (별/동물 무늬)\\n(Cozy flannel pajamas, cute print)\" }, { value: \"silk nightgown and matching robe set, luxurious\", label: \"실크 나이트가운, 로브 세트, 고급스러운\\n(Silk nightgown and robe set, luxurious)\" }, { value: \"comfortable sweatpants and a loose, oversized t-shirt\", label: \"편안한 운동복 바지, 헐렁한 티셔츠\\n(Comfortable sweatpants, loose t-shirt)\" }, { value: \"plush bathrobe and fuzzy slippers, ultimate comfort\", label: \"푹신한 목욕 가운, 털 슬리퍼, 최고 편안함\\n(Plush bathrobe, fuzzy slippers, comfort)\" }, { value: \"onesie pajamas with an animal design (e.g., unicorn, dinosaur)\", label: \"동물 디자인 원지 파자마 (유니콘, 공룡)\\n(Onesie pajamas, animal design)\" }, { value: \"simple cotton nightshirt, breathable and soft\", label: \"심플 면 나이트셔츠, 통기성, 부드러움\\n(Simple cotton nightshirt, breathable)\" }, { value: \"yoga pants and a tank top, for relaxing at home\", label: \"요가 팬츠, 탱크탑, 집에서 휴식용\\n(Yoga pants and tank top, relaxing)\" }, { value: \"kimono-style robe made of soft cotton or silk\", label: \"기모노 스타일 로브 (면/실크)\\n(Kimono-style robe, soft cotton/silk)\" }, { value: \"thermal underwear set for cold nights\", label: \"추운 밤용 보온 내의 세트\\n(Thermal underwear set, cold nights)\" }, { value: \"sleep mask and earplugs for undisturbed sleep\", label: \"수면 안대, 귀마개, 숙면용\\n(Sleep mask and earplugs)\" }, { value: \"cashmere loungewear set (sweater and pants)\", label: \"캐시미어 라운지웨어 세트 (스웨터, 바지)\\n(Cashmere loungewear set)\" }, { value: \"short pajama set (shorts and camisole)\", label: \"짧은 파자마 세트 (반바지, 캐미솔)\\n(Short pajama set, shorts/camisole)\" }, { value: \"hooded robe\", label: \"후드 달린 목욕 가운\\n(Hooded robe)\"}, { value: \"comfortable easywear set\", label: \"편안한 이지웨어 세트\\n(Comfortable easywear set)\"},\n        ],\n        [ClothingSubCategory.PROTECTIVE_GEAR]: [\n          NONE_OPTION, { value: \"motorcycle helmet and leather racing suit\", label: \"오토바이 헬멧, 가죽 레이싱 수트\\n(Motorcycle helmet, leather suit)\" }, { value: \"knight's full plate armor, gleaming\", label: \"기사의 전신 판금 갑옷, 빛나는\\n(Knight's full plate armor, gleaming)\" }, { value: \"riot police gear: shield, helmet, body armor\", label: \"진압 경찰 장비: 방패, 헬멧, 방탄복\\n(Riot police gear: shield, helmet)\" }, { value: \"welder's mask and thick gloves\", label: \"용접 마스크와 두꺼운 장갑\\n(Welder's mask and thick gloves)\" }, { value: \"beekeeper's suit and veiled hat\", label: \"양봉가 복장과 망사 모자\\n(Beekeeper's suit and veiled hat)\" }, { value: \"bomb disposal suit, heavy and padded\", label: \"폭탄 처리반 복장, 무겁고 두툼한\\n(Bomb disposal suit, heavy)\" }, { value: \"fencing mask and padded jacket\", label: \"펜싱 마스크와 패딩 재킷\\n(Fencing mask and padded jacket)\" }, { value: \"chainmail shirt under a tunic\", label: \"튜닉 아래 체인메일 셔츠\\n(Chainmail shirt under tunic)\" }, { value: \"gas mask and goggles\", label: \"방독면과 고글\\n(Gas mask and goggles)\" }, { value: \"bulletproof vest (tactical)\", label: \"방탄조끼 (전술용)\\n(Bulletproof vest (tactical))\" }, { value: \"bicycle helmet\", label: \"자전거 헬멧\\n(Bicycle helmet)\"}, { value: \"safety goggles\", label: \"보안경\\n(Safety goggles)\"},\n        ],\n        [ClothingSubCategory.EVERYDAY_WEAR]: [\n          NONE_OPTION, { value: \"a simple t-shirt and shorts\", label: \"간단한 티셔츠와 반바지\\n(Simple t-shirt and shorts)\"}, { value: \"jeans and a casual shirt\", label: \"청바지와 캐주얼 셔츠\\n(Jeans and casual shirt)\"}, { value: \"a comfortable knit sweater and slacks\", label: \"편안한 니트 스웨터와 슬랙스\\n(Comfortable knit sweater and slacks)\"}, { value: \"a hoodie and sweatpants\", label: \"후드티와 운동복 바지\\n(Hoodie and sweatpants)\"}, { value: \"a polo shirt and chinos\", label: \"폴로 셔츠와 치노 팬츠\\n(Polo shirt and chinos)\"}, { value: \"a light windbreaker jacket\", label: \"가벼운 바람막이 재킷\\n(Light windbreaker jacket)\"}, { value: \"summer dress\", label: \"여름 원피스\\n(Summer dress)\"}, { value: \"office attire (blouse and skirt/pants)\", label: \"사무실 복장 (블라우스와 치마/바지)\\n(Office attire)\"}, { value: \"school uniform\", label: \"교복\\n(School uniform)\"}, { value: \"sports jersey and shorts\", label: \"스포츠 저지와 반바지\\n(Sports jersey and shorts)\"},\n        ]\n      };\n      \n      const ACCESSORIES_SUB_CATEGORY_LIST = Object.values(AccessoriesSubCategory).map(val => ({value: val, label: val}));\n      const ACCESSORIES_DETAIL_OPTIONS = {\n        [AccessoriesSubCategory.MAIN_ACCESSORIES]: [ \n            NONE_OPTION, { value: \"wearing a wide-brimmed sun hat\", label: \"넓은 챙의 태양 모자 착용\\n(Wearing wide-brimmed sun hat)\" }, { value: \"elegant pearl necklace and earrings\", label: \"우아한 진주 목걸이와 귀걸이\\n(Elegant pearl necklace and earrings)\" }, { value: \"leather satchel bag slung across the shoulder\", label: \"가죽 사첼백 어깨에 걸친\\n(Leather satchel bag, shoulder)\" }, { value: \"round-framed spectacles perched on the nose\", label: \"코에 걸친 동그란 안경\\n(Round-framed spectacles on nose)\" }, { value: \"a mysterious locket worn around the neck\", label: \"목에 건 신비로운 로켓 펜던트\\n(Mysterious locket around neck)\" }, { value: \"fingerless gloves, practical or stylish\", label: \"실용적/스타일리시한 반장갑\\n(Fingerless gloves, practical/stylish)\" }, { value: \"a colorful silk scarf tied elegantly\", label: \"화려한 실크 스카프 우아하게 맨\\n(Colorful silk scarf tied elegantly)\" }, { value: \"a utility belt with various pouches and tools\", label: \"다양한 주머니와 도구 달린 유틸리티 벨트\\n(Utility belt, pouches and tools)\" }, { value: \"intricate tribal tattoos visible on arms/shoulders\", label: \"팔/어깨에 보이는 복잡한 부족 문신\\n(Intricate tribal tattoos visible)\" }, { value: \"a single red rose tucked behind the ear\", label: \"귀 뒤에 꽂은 한 송이 붉은 장미\\n(Single red rose behind ear)\" }, { value: \"steampunk goggles resting on forehead\", label: \"이마에 얹은 스팀펑크 고글\\n(Steampunk goggles on forehead)\" }, { value: \"a crown of flowers (flower crown)\", label: \"꽃으로 만든 왕관 (화관)\\n(Crown of flowers / flower crown)\" }, { value: \"worn leather wristbands\", label: \"낡은 가죽 손목 밴드\\n(Worn leather wristbands)\" }, { value: \"a backpack for adventuring\", label: \"모험용 배낭\\n(Backpack for adventuring)\" }, { value: \"a jeweled tiara\", label: \"보석 박힌 티아라\\n(Jeweled tiara)\" }, { value: \"backpack\", label: \"백팩\\n(Backpack)\"}, { value: \"eco bag\", label: \"에코백\\n(Eco bag)\"}, { value: \"smartwatch\", label: \"스마트워치\\n(Smartwatch)\"}, { value: \"eyeglasses\", label: \"안경\\n(Eyeglasses)\"}, { value: \"sunglasses\", label: \"선글라스\\n(Sunglasses)\"}, { value: \"baseball cap\", label: \"야구 모자\\n(Baseball cap)\"}, { value: \"beanie\", label: \"비니\\n(Beanie)\"}, { value: \"headphones around neck\", label: \"목에 건 헤드폰\\n(Headphones around neck)\"},\n        ],\n      };\n\n      const BACKGROUND_SUB_CATEGORY_LIST = Object.values(BackgroundSubCategory).map(val => ({value: val, label: val}));\n      const BACKGROUND_DETAIL_OPTIONS = {\n        [BackgroundSubCategory.NATURE_LANDSCAPE]: [\n          NONE_OPTION, { value: \"in an enchanted forest clearing, sunlight filtering through ancient, mossy trees\", label: \"마법 숲 공터, 이끼 낀 나무 햇빛\\n(Enchanted forest, sunlight, mossy trees)\" }, { value: \"atop a misty mountain peak overlooking a vast, cloud-filled valley at dawn\", label: \"안개 낀 산봉우리, 구름 계곡 새벽\\n(Misty mountain peak, cloud valley, dawn)\" }, { value: \"on a serene tropical beach at sunset, with silhouetted palm trees and calm, reflective ocean\", label: \"고요한 열대 해변 일몰, 야자수 실루엣\\n(Tropical beach sunset, palm silhouettes)\" }, { value: \"amidst a vibrant field of wildflowers under a clear, vast blue sky with fluffy clouds\", label: \"활기찬 들꽃밭, 맑고 푸른 하늘 구름\\n(Wildflower field, clear blue sky, clouds)\" }, { value: \"by a cascading waterfall in a lush, steamy jungle with exotic birds\", label: \"계단식 폭포, 무성한 정글, 이국적 새\\n(Cascading waterfall, lush jungle, birds)\" }, { value: \"in a snowy arctic landscape with the aurora borealis dancing in the night sky\", label: \"눈 덮인 북극, 오로라 춤추는 밤하늘\\n(Snowy arctic, aurora borealis, night sky)\" }, { value: \"deep within a mysterious, bioluminescent mushroom forest, glowing particles in air\", label: \"신비로운 발광 버섯 숲, 빛나는 입자\\n(Bioluminescent mushroom forest, particles)\" }, { value: \"on the edge of a dramatic, windswept cliff overlooking a stormy sea\", label: \"극적인 절벽, 폭풍우 치는 바다\\n(Dramatic cliff, stormy sea)\" }, { value: \"in a tranquil bamboo forest, sunlight dappling through leaves\", label: \"고요한 대나무 숲, 햇살 얼룩무늬\\n(Tranquil bamboo forest, dappled sunlight)\" }, { value: \"a desert oasis with swaying palm trees, a small clear pool, and distant dunes\", label: \"사막 오아시스, 야자수, 맑은 연못, 모래 언덕\\n(Desert oasis, palm trees, pool, dunes)\" }, { value: \"autumn forest with a carpet of colorful falling leaves and golden light\", label: \"가을 숲, 형형색색 낙엽, 황금빛\\n(Autumn forest, colorful leaves, golden light)\" }, { value: \"rolling green hills under a summer sky, like the Shire\", label: \"푸른 구릉지, 여름 하늘 (샤이어처럼)\\n(Rolling green hills, summer sky, Shire)\" }, { value: \"a field of lavender stretching to the horizon\", label: \"지평선까지 펼쳐진 라벤더 밭\\n(Field of lavender to horizon)\" }, { value: \"inside a giant, ancient hollow tree\", label: \"거대하고 오래된 속 빈 나무 안\\n(Inside giant hollow tree)\" }, { value: \"a serene lake reflecting the sky like a mirror\", label: \"하늘 비추는 고요한 호수 (거울처럼)\\n(Serene lake reflecting sky, mirror)\" }, { value: \"a volcanic landscape with flowing lava and smoke\", label: \"흐르는 용암과 연기, 화산 지형\\n(Volcanic landscape, lava, smoke)\" }, { value: \"neighborhood park with trees and benches\", label: \"동네 공원 (나무와 벤치)\\n(Neighborhood park)\"}, { value: \"front yard garden with flowers\", label: \"집 앞 정원 (꽃들)\\n(Front yard garden)\"}, { value: \"riverside walking path\", label: \"강변 산책로\\n(Riverside walking path)\"},\n        ],\n        [BackgroundSubCategory.URBAN_CITYSCAPE]: [\n          NONE_OPTION, { value: \"in a neon-lit cyberpunk cityscape with flying vehicles, towering holographic advertisements\", label: \"네온 사이버펑크, 비행 차량, 홀로그램 광고\\n(Neon cyberpunk, flying vehicles, ads)\" }, { value: \"on a bustling city street at night, wet pavement reflecting colorful lights, steam from vents\", label: \"밤의 붐비는 거리, 젖은 포장도로, 다채로운 빛\\n(Bustling city night, wet pavement, lights)\" }, { value: \"overlooking a sprawling futuristic metropolis from a high-tech balcony, city lights twinkling\", label: \"미래형 대도시 조망, 첨단 발코니, 도시 불빛\\n(Futuristic metropolis, high-tech balcony)\" }, { value: \"in a quaint, cobblestone European alleyway with charming cafes, flower boxes, and old lanterns\", label: \"유럽 자갈길 골목, 매력적 카페, 꽃 상자\\n(Cobblestone European alley, cafes, flowers)\" }, { value: \"on a rooftop overlooking a dense city at sunset, warm golden hour light\", label: \"해질녘 옥상, 빽빽한 도시, 황금 시간대 빛\\n(Rooftop city sunset, golden hour)\" }, { value: \"abandoned, overgrown city ruins, vines covering crumbling buildings\", label: \"버려진 도시 폐허, 덩굴 덮인 건물\\n(Abandoned city ruins, overgrown vines)\" }, { value: \"inside a grand, bustling international marketplace or bazaar, full of exotic goods\", label: \"웅장하고 붐비는 국제 시장/바자, 이국적 상품\\n(Bustling international market/bazaar)\" }, { value: \"a quiet suburban street with identical, well-maintained houses and green lawns\", label: \"조용한 교외 거리, 똑같은 집, 푸른 잔디\\n(Quiet suburban street, identical houses)\" }, { value: \"a gritty, industrial district with towering smokestacks, factories, and rusty pipes\", label: \"거친 산업 지구, 굴뚝, 공장, 녹슨 파이프\\n(Gritty industrial district, smokestacks)\" }, { value: \"modern minimalist cityscape with sleek glass skyscrapers and geometric architecture\", label: \"현대 미니멀 도시, 유리 마천루, 기하학 건축\\n(Modern minimalist city, glass skyscrapers)\" }, { value: \"a grand central park in a major city, with fountains and skyline views\", label: \"대도시 중앙 공원, 분수, 스카이라인\\n(Grand central park, fountains, skyline)\" }, { value: \"a historic city square with ancient monuments and pigeons\", label: \"역사적인 도시 광장, 고대 기념물, 비둘기\\n(Historic city square, monuments, pigeons)\" }, { value: \"a crowded subway station platform with arriving train\", label: \"붐비는 지하철역 플랫폼, 도착하는 열차\\n(Crowded subway station, arriving train)\" }, { value: \"a Venetian canal with gondolas and colorful buildings\", label: \"베네치아 운하, 곤돌라, 다채로운 건물\\n(Venetian canal, gondolas, buildings)\" }, { value: \"a futuristic biodome city, blending nature and technology\", label: \"미래형 바이오돔 도시, 자연과 기술 융합\\n(Futuristic biodome city, nature/tech)\" }, { value: \"ordinary residential alley\", label: \"평범한 주택가 골목\\n(Ordinary residential alley)\"}, { value: \"apartment complex playground\", label: \"아파트 단지 놀이터\\n(Apartment complex playground)\"}, { value: \"busy downtown street in daytime\", label: \"낮의 번화가 거리\\n(Busy downtown street in daytime)\"},\n        ],\n        [BackgroundSubCategory.INTERIOR_SPACES]: [\n          NONE_OPTION, { value: \"in a grand, ancient library filled with dusty tomes, scrolls, and a spiral staircase\", label: \"웅장한 고대 도서관, 고서, 두루마리, 나선형 계단\\n(Ancient library, tomes, scrolls, staircase)\" }, { value: \"inside a cozy, fire-lit medieval tavern with wooden beams, tankards, and cheerful patrons\", label: \"아늑한 중세 선술집, 벽난로, 나무 들보, 맥주잔\\n(Cozy medieval tavern, fire-lit, patrons)\" }, { value: \"on the command bridge of a futuristic starship, overlooking a vibrant nebula through a large viewport\", label: \"미래 우주선 함교, 성운 조망, 대형 창문\\n(Starship bridge, nebula viewport)\" }, { value: \"in a minimalist modern apartment with large windows offering panoramic city views at night\", label: \"미니멀 현대 아파트, 큰 창문, 야경\\n(Minimalist apartment, panoramic city views)\" }, { value: \"a lavish baroque palace ballroom with crystal chandeliers, gilded decorations, and a polished dance floor\", label: \"바로크 궁전 무도회장, 샹들리에, 금박 장식\\n(Baroque palace ballroom, chandeliers)\" }, { value: \"a secret alchemist's laboratory filled with bubbling potions, strange glowing devices, and ancient texts\", label: \"비밀 연금술사 실험실, 물약, 이상한 장치\\n(Alchemist's lab, potions, glowing devices)\" }, { value: \"a child's whimsical bedroom filled with colorful toys, hand-drawn pictures, and fairy lights\", label: \"아이의 기발한 침실, 장난감, 그림, 요정 조명\\n(Child's whimsical bedroom, toys, lights)\" }, { value: \"an opulent art gallery with famous paintings on ornate walls, velvet ropes\", label: \"호화로운 미술관, 유명 그림, 벨벳 로프\\n(Opulent art gallery, famous paintings)\" }, { value: \"a cluttered artist's studio with canvases, paint tubes everywhere, and easels\", label: \"어수선한 예술가 작업실, 캔버스, 물감\\n(Cluttered artist's studio, canvases, paint)\" }, { value: \"a high-tech, sterile laboratory with advanced scientific equipment and holographic displays\", label: \"첨단 무균 실험실, 고급 장비, 홀로그램\\n(High-tech sterile lab, advanced equipment)\" }, { value: \"a grand cathedral interior with stained glass windows and high vaulted ceilings\", label: \"웅장한 대성당 내부, 스테인드 글라스, 높은 천장\\n(Grand cathedral interior, stained glass)\" }, { value: \"a cozy bookstore cafe with shelves packed with books and comfy armchairs\", label: \"아늑한 북카페, 책꽂이, 편안한 안락의자\\n(Cozy bookstore cafe, packed shelves)\" }, { value: \"an old, dusty attic filled with forgotten treasures and cobwebs\", label: \"오래되고 먼지 쌓인 다락방, 잊혀진 보물\\n(Old dusty attic, forgotten treasures)\" }, { value: \"a luxurious hotel lobby with a grand staircase and marble floors\", label: \"호화로운 호텔 로비, 대형 계단, 대리석 바닥\\n(Luxurious hotel lobby, grand staircase)\" }, { value: \"a greenhouse filled with exotic plants and flowers, sunlight streaming in\", label: \"이국적인 식물 가득한 온실, 햇빛\\n(Greenhouse, exotic plants, sunlight)\" }, { value: \"ordinary apartment living room\", label: \"일반 가정집 거실\\n(Ordinary apartment living room)\"}, { value: \"typical bedroom with a bed and desk\", label: \"일반적인 침실 (침대와 책상)\\n(Typical bedroom)\"}, { value: \"modern kitchen with appliances\", label: \"현대적인 부엌 (가전제품들)\\n(Modern kitchen)\"},\n        ],\n        [BackgroundSubCategory.EVERYDAY_LOCATIONS]: [\n          NONE_OPTION, { value: \"a typical office cubicle or open-plan office\", label: \"일반적인 사무실 칸막이/오픈형 사무실\\n(Typical office cubicle/open-plan)\"}, { value: \"inside a bustling supermarket aisle\", label: \"붐비는 슈퍼마켓 통로 안\\n(Inside bustling supermarket aisle)\"}, { value: \"a quiet library reading room with bookshelves\", label: \"조용한 도서관 열람실 (책장들)\\n(Quiet library reading room)\"}, { value: \"a local coffee shop with a few patrons\", label: \"동네 커피숍 (손님 몇 명)\\n(Local coffee shop)\"}, { value: \"a classroom with desks and a whiteboard\", label: \"교실 (책상과 화이트보드)\\n(Classroom with desks)\"}, { value: \"a university campus quad or pathway\", label: \"대학교 캠퍼스 광장/길\\n(University campus quad/pathway)\"}, { value: \"inside a public bus or subway train\", label: \"공공 버스/지하철 내부\\n(Inside public bus/subway)\"}, { value: \"a bus stop shelter\", label: \"버스 정류장 쉼터\\n(Bus stop shelter)\"}, { value: \"a hospital waiting room or corridor\", label: \"병원 대기실/복도\\n(Hospital waiting room/corridor)\"}, { value: \"a gym with exercise equipment\", label: \"헬스장 (운동 기구들)\\n(Gym with exercise equipment)\"}, { value: \"a local park playground\", label: \"동네 공원 놀이터\\n(Local park playground)\"}, { value: \"a movie theater lobby or auditorium\", label: \"영화관 로비/상영관\\n(Movie theater lobby/auditorium)\"}, { value: \"a restaurant dining area\", label: \"식당 식사 공간\\n(Restaurant dining area)\"}, { value: \"a shopping mall interior\", label: \"쇼핑몰 내부\\n(Shopping mall interior)\"}, { value: \"a hair salon or barber shop\", label: \"미용실/이발소\\n(Hair salon/barber shop)\"},\n        ],\n        [BackgroundSubCategory.FANTASY_SURREAL]: [\n          NONE_OPTION, { value: \"before a swirling cosmic nebula, stars glittering like scattered diamonds, planets visible\", label: \"소용돌이 성운, 다이아몬드 별, 행성\\n(Swirling cosmic nebula, glittering stars)\" }, { value: \"in a bizarre dreamscape with floating islands, impossible Escher-like architecture, and waterfalls flowing upwards\", label: \"기괴한 꿈 풍경, 떠다니는 섬, 에셔 건축\\n(Dreamscape, floating islands, Escher arch)\" }, { value: \"within an alien jungle, glowing flora and fauna, two moons in a purple sky\", label: \"외계 정글, 발광 동식물, 보라색 하늘 두 달\\n(Alien jungle, glowing flora/fauna, two moons)\" }, { value: \"in a cavern made of giant, luminous crystals that hum with energy\", label: \"거대 발광 수정 동굴, 에너지 진동\\n(Cavern of giant luminous crystals, hums)\"}, { value: \"a world where gravity works differently, people walking on ceilings or sideways on walls\", label: \"중력 다른 세계, 천장/벽 걷는 사람\\n(Different gravity, people on ceilings/walls)\" }, { value: \"a landscape made entirely of candy, sweets, and gingerbread houses\", label: \"사탕/과자/진저브레드 집 풍경\\n(Landscape of candy, sweets, gingerbread)\" }, { value: \"underwater city ruins of a lost Atlantean civilization, schools of fish swimming through\", label: \"수중 도시 폐허 (아틀란티스), 물고기 떼\\n(Underwater city ruins, Atlantean, fish)\" }, { value: \"a sky filled with giant, floating jellyfish-like creatures that emit soft light\", label: \"거대 해파리 생물 떠다니는 하늘, 부드러운 빛\\n(Sky with giant floating jellyfish creatures)\" }, { value: \"a library where books fly like birds and whisper ancient secrets\", label: \"책이 새처럼 날고 비밀 속삭이는 도서관\\n(Library, flying books, whispering secrets)\" }, { value: \"a chessboard landscape with giant, sentient game pieces\", label: \"거대 체스 말 있는 체스판 풍경, 지각 있는\\n(Chessboard landscape, sentient pieces)\" }, { value: \"a forest where trees have human-like faces and watch passersby\", label: \"나무에 사람 얼굴, 지나가는 이 보는 숲\\n(Forest, trees with human faces)\" }, { value: \"a city built on the back of a colossal, ancient creature\", label: \"거대한 고대 생물 등 위 도시\\n(City on colossal creature's back)\" }, { value: \"a realm made of clouds, with cloud castles and pathways\", label: \"구름으로 만들어진 영역, 구름 성/길\\n(Realm made of clouds, cloud castles)\" }, { value: \"a surreal desert with melting clocks and distorted figures (Dali-esque)\", label: \"녹는 시계, 왜곡된 형상 사막 (달리풍)\\n(Surreal desert, melting clocks, Dali-esque)\" },\n        ],\n        [BackgroundSubCategory.ABSTRACT_MINIMALIST]: [\n          NONE_OPTION, { value: \"against a solid, vibrant color backdrop (e.g., crimson red, deep teal, sunshine yellow)\", label: \"생생한 단색 배경 (진홍색, 청록색 등)\\n(Solid vibrant color backdrop, e.g. teal)\" }, { value: \"with bold, contrasting geometric patterns (circles, triangles, lines, chevrons)\", label: \"굵고 대조적인 기하학 패턴 (원, 삼각형)\\n(Bold contrasting geometric patterns)\" }, { value: \"a soft, ethereal gradient background transitioning between harmonious pastel colors\", label: \"부드러운 파스텔 그라데이션 배경\\n(Soft ethereal gradient, pastel colors)\" }, { value: \"a minimalist textured wall (e.g., raw concrete, brushed metal, dark wood grain, stucco)\", label: \"미니멀 질감 벽 (콘크리트, 메탈, 나무결)\\n(Minimalist textured wall, concrete/metal)\" }, { value: \"a single, stark light source casting long, dramatic shadows on a plain surface\", label: \"단일 광원, 길고 극적인 그림자\\n(Single stark light source, long shadows)\" }, { value: \"monochromatic background with varying shades of a single color (e.g., greyscale, bluescale)\", label: \"단색 배경, 다양한 음영 (회색조 등)\\n(Monochromatic background, shades of color)\" }, { value: \"dynamic abstract light streaks, bokeh effects, and lens flares\", label: \"역동적 추상 광선, 보케, 렌즈 플레어\\n(Dynamic abstract light streaks, bokeh)\" }, { value: \"clean white void or infinite studio background, emphasizing subject\", label: \"깨끗한 흰색 공간/스튜디오 배경, 피사체 강조\\n(Clean white void/studio, emphasis)\" }, { value: \"watercolor splashes and drips in abstract, artistic forms against a paper texture\", label: \"추상 수채화 물감, 종이 질감\\n(Watercolor splashes/drips, abstract)\" }, { value: \"minimalist lines forming a subtle horizon, architectural suggestion, or wave pattern\", label: \"미니멀 선, 미묘한 수평선/구조/파도\\n(Minimalist lines, subtle horizon/structure)\" }, { value: \"a field of color, with the subject as a small focal point\", label: \"색면, 피사체는 작은 초점\\n(Field of color, subject as focal point)\" }, { value: \"negative space heavily utilized, subject off-center\", label: \"여백 활용, 피사체 중심에서 벗어남\\n(Negative space utilized, off-center)\" }, { value: \"fractal patterns, intricate and repeating\", label: \"프랙탈 패턴, 복잡하고 반복적\\n(Fractal patterns, intricate, repeating)\" },\n        ],\n        [BackgroundSubCategory.HISTORICAL_RUINS]: [\n          NONE_OPTION, { value: \"exploring crumbling ancient Greek temples (e.g., Parthenon) with broken columns\", label: \"고대 그리스 신전, 부서진 기둥\\n(Crumbling Greek temples, broken columns)\" }, { value: \"amongst overgrown Mayan pyramids in a dense, misty jungle setting\", label: \"초목 무성한 마야 피라미드, 안개 낀 정글\\n(Overgrown Mayan pyramids, misty jungle)\" }, { value: \"inside a dilapidated medieval castle keep, ivy climbing the stone walls\", label: \"황폐한 중세 성채, 담쟁이덩굴 돌벽\\n(Dilapidated medieval castle, ivy walls)\" }, { value: \"wandering through the Roman Forum ruins, with fallen statues and arches\", label: \"로마 포룸 유적, 쓰러진 조각상, 아치\\n(Roman Forum ruins, fallen statues, arches)\" }, { value: \"a forgotten, sand-covered city in the desert, half-buried structures (e.g., Petra-like)\", label: \"사막 잊혀진 도시, 모래 덮인 구조물\\n(Sand-covered city, half-buried, Petra)\" }, { value: \"ruined Gothic cathedral with broken stained glass windows and crumbling gargoyles\", label: \"폐허 고딕 대성당, 깨진 스테인드 글라스\\n(Ruined Gothic cathedral, broken glass)\" }, { value: \"ancient stone circle (e.g., Stonehenge) under a dramatic, starry night sky or sunset\", label: \"고대 석조 원형 유적 (스톤헨지), 별밤/일몰\\n(Ancient stone circle, starry night/sunset)\" }, { value: \"sunken city ruins visible beneath clear turquoise water, coral growing on structures\", label: \"침몰 도시 유적, 맑은 청록색 물, 산호\\n(Sunken city ruins, clear water, coral)\" }, { value: \"ruins of an ancient amphitheater\", label: \"고대 원형극장 유적\\n(Ruins of ancient amphitheater)\" }, { value: \"a desolate battlefield with remnants of ancient warfare\", label: \"황량한 전쟁터, 고대 전쟁 잔해\\n(Desolate battlefield, ancient warfare)\" }, { value: \"abandoned Victorian manor, haunted and decaying\", label: \"버려진 빅토리아풍 저택, 유령 들린 듯\\n(Abandoned Victorian manor, haunted)\" },\n        ],\n        [BackgroundSubCategory.SPACE_COSMIC]: [\n          NONE_OPTION, { value: \"floating in zero gravity inside a spaceship, looking out at a stunning view of Earth\", label: \"우주선 무중력, 지구 바라보는\\n(Floating zero-G in spaceship, view Earth)\" }, { value: \"standing on the desolate, red desert landscape of Mars, with Olympus Mons in distance\", label: \"화성 붉은 사막, 멀리 올림푸스 산\\n(Mars red desert, Olympus Mons distance)\" }, { value: \"amidst a vibrant, colorful nebula with swirling gas clouds and distant, twinkling stars\", label: \"생생한 성운, 소용돌이 가스, 먼 별\\n(Vibrant nebula, swirling gas, distant stars)\" }, { value: \"on an alien planet with bizarre, crystalline rock formations and multiple moons in a green sky\", label: \"외계 행성, 기괴한 수정 암석, 여러 달\\n(Alien planet, crystalline rocks, moons)\" }, { value: \"inside a sleek space station orbiting a colossal gas giant (like Jupiter or Saturn with rings)\", label: \"우주 정거장 내부, 거대 가스 행성 공전\\n(Space station orbiting gas giant, rings)\" }, { value: \"witnessing a spectacular supernova explosion from a safe distance, bright and colorful\", label: \"장엄한 초신성 폭발 목격, 밝고 화려\\n(Witnessing supernova, bright, colorful)\" }, { value: \"navigating through the intricate rings of Saturn, icy particles glittering\", label: \"토성 고리 통과, 얼음 입자 반짝임\\n(Navigating Saturn's rings, icy particles)\" }, { value: \"a dense field of asteroids drifting silently in the blackness of space\", label: \"소행성 지대, 우주 암흑 속 표류\\n(Asteroid field drifting in space)\" }, { value: \"a lone astronaut on the Moon, Earth visible in the sky\", label: \"달 위 외로운 우주비행사, 하늘에 지구\\n(Lone astronaut on Moon, Earth visible)\" }, { value: \"a futuristic colony on a terraformed planet\", label: \"테라포밍된 행성 위 미래 식민지\\n(Futuristic colony on terraformed planet)\" }, { value: \"approaching a mysterious black hole, light bending around it\", label: \"신비로운 블랙홀 접근, 빛 왜곡\\n(Approaching black hole, light bending)\" }, { value: \"inside a comet's tail, icy and ethereal\", label: \"혜성 꼬리 내부, 얼음 같고 천상적\\n(Inside comet's tail, icy, ethereal)\" },\n        ],\n        [BackgroundSubCategory.WEATHER_ATMOSPHERE]: [\n          NONE_OPTION, { value: \"a dramatic thunderstorm with flashing lightning and heavy rain\", label: \"극적인 뇌우, 번개, 폭우\\n(Dramatic thunderstorm, lightning, rain)\" }, { value: \"a serene foggy morning, mist obscuring distant objects\", label: \"고요한 안개 낀 아침, 안개 자욱\\n(Serene foggy morning, mist)\" }, { value: \"a blizzard with swirling snow and strong winds\", label: \"눈보라, 휘몰아치는 눈, 강풍\\n(Blizzard, swirling snow, strong winds)\" }, { value: \"a beautiful sunset with vibrant orange, pink, and purple clouds\", label: \"아름다운 일몰, 다채로운 구름색\\n(Beautiful sunset, vibrant clouds)\" }, { value: \"a clear night sky full of stars and the Milky Way visible\", label: \"맑은 밤하늘, 별 가득, 은하수\\n(Clear night sky, stars, Milky Way)\" }, { value: \"a double rainbow after a spring shower\", label: \"봄 소나기 후 쌍무지개\\n(Double rainbow after spring shower)\" }, { value: \"dust storm in a desert landscape\", label: \"사막 풍경 속 모래폭풍\\n(Dust storm in desert)\" }, { value: \"sunlight breaking through dark storm clouds (crepuscular rays)\", label: \"먹구름 뚫고 나오는 햇빛 (빛내림)\\n(Sunlight through storm clouds, rays)\" }, { value: \"hazy, humid summer day\", label: \"흐릿하고 습한 여름날\\n(Hazy, humid summer day)\" }, { value: \"crisp, clear autumn day with blue sky\", label: \"상쾌하고 맑은 가을날, 푸른 하늘\\n(Crisp, clear autumn day, blue sky)\" }, { value: \"light rain falling on a city street\", label: \"도시 거리에 가랑비 내리는\\n(Light rain on city street)\"},\n        ],\n        [BackgroundSubCategory.PATTERNS_TEXTURES]: [\n          NONE_OPTION, { value: \"against a wall of intricate, repeating geometric tiles\", label: \"복잡하고 반복적인 기하학 타일 벽\\n(Wall of geometric tiles, repeating)\" }, { value: \"on a surface of cracked earth or dry mud\", label: \"갈라진 땅 또는 마른 진흙 표면\\n(Cracked earth / dry mud surface)\" }, { value: \"surrounded by swirling, abstract smoke patterns\", label: \"소용돌이치는 추상적 연기 패턴\\n(Swirling abstract smoke patterns)\" }, { value: \"against a backdrop of flowing, liquid metal\", label: \"흐르는 액체 금속 배경\\n(Flowing liquid metal backdrop)\" }, { value: \"a textured surface of rough stone or brick\", label: \"거친 돌 또는 벽돌 질감 표면\\n(Rough stone or brick texture)\" }, { value: \"rippling water surface texture\", label: \"잔물결 이는 수면 질감\\n(Rippling water surface texture)\" }, { value: \"close-up of iridescent fish scales or feathers\", label: \"무지갯빛 물고기 비늘/깃털 클로즈업\\n(Iridescent fish scales/feathers closeup)\" }, { value: \"a field of stars as a textured background\", label: \"별밭 질감 배경\\n(Field of stars as textured background)\" }, { value: \"a wall covered in dense, green ivy\", label: \"푸른 담쟁이덩굴로 뒤덮인 벽\\n(Wall covered in dense green ivy)\" }, { value: \"polished wood grain texture\", label: \"윤이 나는 나뭇결 질감\\n(Polished wood grain texture)\" }, { value: \"simple wallpaper pattern\", label: \"단순한 벽지 패턴\\n(Simple wallpaper pattern)\"},\n        ],\n      };\n      \n\n      const DEFAULT_SELECTIONS = {\n        [Category.GENDER]: GENDER_OPTIONS[0].value,\n        [Category.RACE]: RACE_OPTIONS[0].value,\n        [Category.OCCUPATION]: NONE_OPTION_VALUE, \n        customOccupationDetail: \"\",\n        [Category.STYLE]: NONE_OPTION_VALUE,\n        [Category.ASPECT_RATIO]: NONE_OPTION_VALUE,\n        [Category.FRAMING]: NONE_OPTION_VALUE,\n        expressionSubCategory: EXPRESSION_SUB_CATEGORY_LIST[0].value,\n        expressionOption: EXPRESSION_DETAIL_OPTIONS[EXPRESSION_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customExpressionDetail: \"\",\n        actionSubCategory: ACTION_SUB_CATEGORY_LIST.find(opt => opt.value === ActionSubCategory.DAILY_LIFE)?.value || ACTION_SUB_CATEGORY_LIST[0].value,\n        actionOption: ACTION_DETAIL_OPTIONS[ActionSubCategory.DAILY_LIFE]?.[0]?.value || ACTION_DETAIL_OPTIONS[ACTION_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customActionDetail: \"\",\n        clothingSubCategory: CLOTHING_SUB_CATEGORY_LIST.find(opt => opt.value === ClothingSubCategory.EVERYDAY_WEAR)?.value || CLOTHING_SUB_CATEGORY_LIST[0].value,\n        clothingOption: CLOTHING_DETAIL_OPTIONS[ClothingSubCategory.EVERYDAY_WEAR]?.[0]?.value || CLOTHING_DETAIL_OPTIONS[CLOTHING_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customClothingDetail: \"\",\n        accessoriesSubCategory: ACCESSORIES_SUB_CATEGORY_LIST[0].value,\n        accessoriesOption: ACCESSORIES_DETAIL_OPTIONS[ACCESSORIES_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customAccessoriesDetail: \"\",\n        backgroundSubCategory: BACKGROUND_SUB_CATEGORY_LIST.find(opt => opt.value === BackgroundSubCategory.EVERYDAY_LOCATIONS)?.value || BACKGROUND_SUB_CATEGORY_LIST[0].value,\n        backgroundOption: BACKGROUND_DETAIL_OPTIONS[BackgroundSubCategory.EVERYDAY_LOCATIONS]?.[0]?.value || BACKGROUND_DETAIL_OPTIONS[BACKGROUND_SUB_CATEGORY_LIST[0].value]?.[0]?.value || NONE_OPTION_VALUE,\n        customBackgroundDetail: \"\",\n      };\n\n      // --- Global State ---\n      let selections = { ...DEFAULT_SELECTIONS };\n      let generatedPrompt = \"\";\n      let generatedImageFXPrompt = \"\";\n      let generatedMidjourneyPrompt = \"\";\n      let generatedStableDiffusionPrompt = \"\";\n      let error = null;\n      let promptCopied = false;\n      let imageFXPromptCopied = false;\n      let midjourneyPromptCopied = false;\n      let stableDiffusionPromptCopied = false;\n\n      // --- SVG Icons ---\n      const ClipboardIconSVG = `\n`;\n      const YouTubeIconSVG = `\n`;\n      const ShuffleIconSVG = `\n`;\n      const DiceIconSVG = `\n\n`;\n\n      // --- Helper Functions ---\n      function getRandomOptionExcludingNone(options) {\n        const filteredOptions = options.filter(opt => opt.value !== NONE_OPTION_VALUE);\n        if (filteredOptions.length > 0) {\n          return filteredOptions[Math.floor(Math.random() * filteredOptions.length)].value;\n        }\n        return options.find(opt => opt.value === NONE_OPTION_VALUE)?.value || (options.length > 0 ? options[0].value : NONE_OPTION_VALUE);\n      }\n\n      function resetOutputs() {\n        generatedPrompt = \"\"; \n        generatedImageFXPrompt = \"\";\n        generatedMidjourneyPrompt = \"\";\n        generatedStableDiffusionPrompt = \"\";\n        error = null;\n        promptCopied = false;\n        imageFXPromptCopied = false;\n        midjourneyPromptCopied = false;\n        stableDiffusionPromptCopied = false;\n        renderResultsPanel(); // Re-render results to clear them\n      }\n\n      // --- DOM Creation Functions ---\n      function createElement(tag, classList = [], attributes = {}, innerHTML = '', textContent = '') {\n        const el = document.createElement(tag);\n        if (classList.length > 0) el.classList.add(...classList);\n        for (const key in attributes) {\n          el.setAttribute(key, attributes[key]);\n        }\n        if (innerHTML) el.innerHTML = innerHTML;\n        if (textContent) el.textContent = textContent;\n        return el;\n      }\n      \n      function createSelectDropdown(id, labelText, options, value, onChangeCallback, customClassName = '') {\n        const baseDivClasses = ['mb-4'];\n        const allDivClasses = customClassName \n            ? baseDivClasses.concat(customClassName.split(' ').filter(c => c.trim() !== '')) \n            : baseDivClasses;\n        const div = createElement('div', allDivClasses);\n\n        const label = createElement('label', ['block', 'text-sm', 'font-medium', 'text-gray-500', 'mb-1', 'whitespace-pre-line', 'h-10'], { for: id }, '', labelText);\n        \n        const select = createElement('select', ['w-full', 'p-3', 'border', 'border-neutral-light', 'rounded-lg', 'shadow-sm', 'focus:ring-brand-secondary', 'focus:border-brand-secondary', 'transition', 'duration-150', 'ease-in-out', 'bg-white', 'text-neutral-dark'], { id });\n        select.value = value;\n        select.addEventListener('change', onChangeCallback);\n\n        options.forEach(option => {\n          const optElement = createElement('option', [], { value: option.value }, '', option.label.replace(/\\n/g, ' '));\n          select.appendChild(optElement);\n        });\n\n        div.appendChild(label);\n        div.appendChild(select);\n        return div;\n      }\n      \n      function createTextInput(id, placeholder, value, onChangeCallback, customClassName = '') {\n        const inputClasses = ['w-full', 'p-3', 'border', 'border-neutral-light', 'rounded-lg', 'shadow-sm', 'focus:ring-brand-secondary', 'focus:border-brand-secondary', 'transition', 'duration-150', 'ease-in-out', 'bg-white', 'text-neutral-dark', 'placeholder-gray-400'];\n        if (customClassName) {\n            inputClasses.push(...customClassName.split(' ').filter(c => c.trim() !== ''));\n        }\n        const input = createElement('input', inputClasses, { type: 'text', id, placeholder });\n        input.value = value;\n        input.addEventListener('input', onChangeCallback); \n        return input;\n      }\n\n      function createButton(id, text, iconSVG, onClickCallback, classList = [], ariaLabel = '') {\n        const button = createElement('button', classList, { id, 'aria-label': ariaLabel || text }, (iconSVG ? iconSVG : '') + text);\n        button.addEventListener('click', onClickCallback);\n        return button;\n      }\n\n      // --- Event Handler Functions ---\n      function handleSimpleSelectionChange(categoryKey, value) {\n        selections[categoryKey] = value;\n        resetOutputs();\n      }\n\n      function handleOccupationChange(value) {\n        selections[Category.OCCUPATION] = value;\n        selections.customOccupationDetail = \"\";\n        document.getElementById('customOccupationDetail').value = \"\"; // Clear input field\n        resetOutputs();\n      }\n\n      function handleCustomOccupationDetailChange(event) {\n        selections.customOccupationDetail = event.target.value;\n        resetOutputs();\n      }\n      \n      function handleSubCategoryChange(categoryType, subCategoryValue) {\n        const subCatKey = `${categoryType}SubCategory`;\n        const optionKey = `${categoryType}Option`;\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        \n        selections[subCatKey] = subCategoryValue;\n        const detailOptionsForSubCat = getDetailOptionsForSubCategory(categoryType, subCategoryValue);\n        selections[optionKey] = detailOptionsForSubCat.find(opt => opt.value === NONE_OPTION_VALUE)?.value || NONE_OPTION_VALUE;\n        selections[customDetailKey] = \"\";\n\n        // Re-render the specific detail dropdown and custom input\n        const detailDropdownId = `${categoryType}Option`;\n        const customInputId = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        const detailDropdown = document.getElementById(detailDropdownId);\n        const customInput = document.getElementById(customInputId);\n\n        if (detailDropdown) {\n            detailDropdown.innerHTML = ''; // Clear existing options\n            detailOptionsForSubCat.forEach(opt => {\n                const optionElement = createElement('option', [], {value: opt.value}, '', opt.label.replace(/\\n/g, ' '));\n                detailDropdown.appendChild(optionElement);\n            });\n            detailDropdown.value = selections[optionKey];\n        }\n        if (customInput) {\n            customInput.value = \"\";\n        }\n        resetOutputs();\n      }\n\n      function handleDetailOptionChange(categoryType, optionValue) {\n        const optionKey = `${categoryType}Option`;\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n\n        selections[optionKey] = optionValue;\n        selections[customDetailKey] = \"\";\n\n        const customInputId = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        const customInput = document.getElementById(customInputId);\n        if (customInput) customInput.value = \"\";\n        \n        resetOutputs();\n      }\n      \n      function handleCustomDetailChange(categoryType, customValue) {\n        const customDetailKey = `custom${categoryType.charAt(0).toUpperCase() + categoryType.slice(1)}Detail`;\n        selections[customDetailKey] = customValue;\n        resetOutputs();\n      }\n\n      function handleRandomizeGenderRace() {\n        selections[Category.GENDER] = getRandomOptionExcludingNone(GENDER_OPTIONS);\n        selections[Category.RACE] = getRandomOptionExcludingNone(RACE_OPTIONS);\n        \n        // Update UI\n        document.getElementById(Category.GENDER).value = selections[Category.GENDER];\n        document.getElementById(Category.RACE).value = selections[Category.RACE];\n        resetOutputs();\n      }\n\n      function handleRandomizeRemainingDetails() {\n        selections[Category.STYLE] = getRandomOptionExcludingNone(STYLE_OPTIONS);\n        selections[Category.ASPECT_RATIO] = getRandomOptionExcludingNone(ASPECT_RATIO_OPTIONS);\n        selections[Category.FRAMING] = getRandomOptionExcludingNone(FRAMING_OPTIONS);\n\n        document.getElementById(Category.STYLE).value = selections[Category.STYLE];\n        document.getElementById(Category.ASPECT_RATIO).value = selections[Category.ASPECT_RATIO];\n        document.getElementById(Category.FRAMING).value = selections[Category.FRAMING];\n\n        ['expression', 'action', 'clothing', 'accessories', 'background'].forEach(type => {\n            const subCatList = getSubCategoryListByType(type);\n            if (!subCatList || subCatList.length === 0) return;\n            const randomSubCat = subCatList[Math.floor(Math.random() * subCatList.length)].value;\n            selections[`${type}SubCategory`] = randomSubCat;\n            \n            const detailOpts = getDetailOptionsForSubCategory(type, randomSubCat);\n            selections[`${type}Option`] = getRandomOptionExcludingNone(detailOpts);\n            selections[`custom${type.charAt(0).toUpperCase() + type.slice(1)}Detail`] = \"\";\n\n            // Update UI for complex category\n            document.getElementById(`${type}SubCategory`).value = randomSubCat;\n            const detailDropdown = document.getElementById(`${type}Option`);\n            detailDropdown.innerHTML = '';\n            detailOpts.forEach(opt => {\n              const optionEl = createElement('option',[], {value: opt.value}, '', opt.label.replace(/\\n/g, ' '));\n              detailDropdown.appendChild(optionEl);\n            });\n            detailDropdown.value = selections[`${type}Option`];\n            document.getElementById(`custom${type.charAt(0).toUpperCase() + type.slice(1)}Detail`).value = \"\";\n        });\n        resetOutputs();\n      }\n\n      function constructPrompt() {\n        error = null;\n        resetOutputs(); \n\n        const {\n          [Category.GENDER]: gender, [Category.RACE]: race, [Category.OCCUPATION]: occupation, customOccupationDetail,\n          [Category.STYLE]: style, [Category.ASPECT_RATIO]: aspectRatio, [Category.FRAMING]: framing,\n          expressionSubCategory, expressionOption, customExpressionDetail,\n          actionSubCategory, actionOption, customActionDetail,\n          clothingSubCategory, clothingOption, customClothingDetail,\n          accessoriesSubCategory, accessoriesOption, customAccessoriesDetail,\n          backgroundSubCategory, backgroundOption, customBackgroundDetail,\n        } = selections;\n        \n        const finalOccupation = customOccupationDetail || (occupation !== NONE_OPTION_VALUE ? occupation : \"\");\n        const finalExpression = customExpressionDetail || (expressionOption !== NONE_OPTION_VALUE ? expressionOption : \"\");\n        const finalAction = customActionDetail || (actionOption !== NONE_OPTION_VALUE ? actionOption : \"\");\n        const finalClothing = customClothingDetail || (clothingOption !== NONE_OPTION_VALUE ? clothingOption : \"\");\n        const finalAccessories = customAccessoriesDetail || (accessoriesOption !== NONE_OPTION_VALUE ? accessoriesOption : \"\");\n        const finalBackground = customBackgroundDetail || (backgroundOption !== NONE_OPTION_VALUE ? backgroundOption : \"\");\n\n        let dalle2PromptText = style !== NONE_OPTION_VALUE ? `A ${style} image of a ${race} ${gender}` : `An image of a ${race} ${gender}`;\n        if (finalOccupation) dalle2PromptText += ` who is a ${finalOccupation}`;\n        if (framing !== NONE_OPTION_VALUE) dalle2PromptText += `, ${framing}`;\n        if (finalExpression) dalle2PromptText += `, ${finalExpression}`;\n        if (finalAction) dalle2PromptText += `, ${finalAction}`;\n        if (finalClothing) dalle2PromptText += `, wearing ${finalClothing}`;\n        if (finalAccessories) dalle2PromptText += `, with ${finalAccessories}`;\n        if (finalBackground) dalle2PromptText += `. The scene is ${finalBackground}`;\n        dalle2PromptText += `. High detail, cinematic lighting, intricate details, sharp focus.`;\n        if (aspectRatio !== NONE_OPTION_VALUE) dalle2PromptText += ` Image aspect ratio: ${aspectRatio}.`;\n        generatedPrompt = dalle2PromptText;\n\n        let gpt4oDalle3PromptText = `Create an image of a {${race}} {${gender}}.`;\n        if (finalOccupation) gpt4oDalle3PromptText += ` Occupation: {${finalOccupation}}.`;\n        if (finalExpression) gpt4oDalle3PromptText += ` Facial expression: {${finalExpression}}.`;\n        if (finalAction) gpt4oDalle3PromptText += ` Action/Pose: {${finalAction}}.`;\n        if (finalClothing) gpt4oDalle3PromptText += ` Clothing: {${finalClothing}}.`;\n        if (finalAccessories) gpt4oDalle3PromptText += ` Accessories: {${finalAccessories}}.`;\n        if (finalBackground) gpt4oDalle3PromptText += ` Background: {${finalBackground}}.`;\n        if (style !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Art style: {${style}}.`;\n        if (framing !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Shot type/framing: {${framing}}.`;\n        if (aspectRatio !== NONE_OPTION_VALUE) gpt4oDalle3PromptText += ` Aspect ratio: {${aspectRatio}}.`;\n        gpt4oDalle3PromptText += ` Additional details: {high detail, cinematic lighting, intricate details, sharp focus}.`;\n        generatedImageFXPrompt = gpt4oDalle3PromptText.replace(/{\\s*}/g, '').replace(/\\.\\s*\\./g, '.').trim();\n\n        const mjAspectRatioToken = aspectRatio !== NONE_OPTION_VALUE && aspectRatio.includes(':') ? `--ar ${aspectRatio}` : ``;\n        let mjPromptParts = [];\n        mjPromptParts.push(`${race} ${gender}`);\n        if (finalOccupation) mjPromptParts.push(finalOccupation);\n        if (finalExpression) mjPromptParts.push(finalExpression);\n        if (finalAction) mjPromptParts.push(finalAction);\n        if (finalClothing) mjPromptParts.push(`wearing ${finalClothing}`);\n        if (finalAccessories) mjPromptParts.push(`with ${finalAccessories}`);\n        if (finalBackground) mjPromptParts.push(`in ${finalBackground}`);\n        if (style !== NONE_OPTION_VALUE) mjPromptParts.push(style);\n        if (framing !== NONE_OPTION_VALUE) mjPromptParts.push(framing);\n        mjPromptParts.push(\"high detail, cinematic lighting, intricate details, sharp focus\");\n        let mjPromptStr = mjPromptParts.filter(p => p && p.trim() !== \"\").join(', ');\n        if (mjAspectRatioToken) mjPromptStr += ` ${mjAspectRatioToken}`;\n        generatedMidjourneyPrompt = mjPromptStr.replace(/\\s*,\\s*,/g, ',').replace(/,\\s*$/,'').trim();\n\n        let sdPositivePromptParts = [];\n        const addSdPart = (part, weight = 1.0) => {\n          if (part && part.trim() !== \"\") {\n            const cleanedPart = part.split('\\n')[0]; \n            if (weight !== 1.0) sdPositivePromptParts.push(`(${cleanedPart}:${weight.toFixed(1)})`);\n            else sdPositivePromptParts.push(cleanedPart);\n          }\n        };\n        addSdPart(`${race} ${gender}`, 1.3);\n        if (finalOccupation) addSdPart(finalOccupation, 1.2);\n        if (finalExpression) addSdPart(finalExpression, 1.1);\n        if (finalAction) addSdPart(finalAction, 1.1);\n        if (finalClothing) addSdPart(`wearing ${finalClothing}`, 1.1);\n        if (finalAccessories) addSdPart(`with ${finalAccessories}`, 1.1);\n        if (finalBackground) addSdPart(`in ${finalBackground}`, 1.1);\n        if (style !== NONE_OPTION_VALUE) addSdPart(style, 1.2);\n        if (framing !== NONE_OPTION_VALUE) addSdPart(framing);\n        addSdPart(\"high detail\", 1.2); addSdPart(\"cinematic lighting\", 1.1); addSdPart(\"intricate details\"); addSdPart(\"sharp focus\");\n        const sdPositivePrompt = sdPositivePromptParts.join(', ');\n        const sdNegativePrompt = \"ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, extra limbs, disfigured, deformed, body out of frame, blurry, bad anatomy, blurred, watermark, grainy, signature, cut off, draft, low quality, worst quality, (multiple people:1.3), (extra fingers:1.2), (mutated hands:1.2), (bad proportions:1.1), (jpeg artifacts:1.1)\";\n        generatedStableDiffusionPrompt = `Positive: ${sdPositivePrompt}\\n\\nNegative: ${sdNegativePrompt}`;\n        \n        renderResultsPanel();\n      }\n\n      function handleCopyPrompt(promptToCopy, type) {\n        if (!promptToCopy) return;\n        navigator.clipboard.writeText(promptToCopy).then(() => {\n          let copyButton;\n          if (type === 'general') { promptCopied = true; copyButton = document.getElementById('copyGeneralPrompt'); }\n          else if (type === 'imagefx') { imageFXPromptCopied = true; copyButton = document.getElementById('copyImageFXPrompt'); }\n          else if (type === 'midjourney') { midjourneyPromptCopied = true; copyButton = document.getElementById('copyMidjourneyPrompt'); }\n          else if (type === 'stablediffusion') { stableDiffusionPromptCopied = true; copyButton = document.getElementById('copyStableDiffusionPrompt');}\n          \n          if(copyButton) {\n            const originalText = copyButton.innerHTML;\n            const copiedTextContent = type === 'general' ? 'DALL·E 2/Bing/Image-FX 복사됨! (Copied!)' :\n                                   type === 'imagefx' ? 'GPT-4o/DALL·E 3 복사됨! (Copied!)' :\n                                   type === 'midjourney' ? 'Midjourney 복사됨! (Copied!)' :\n                                   'Stable Diffusion 복사됨! (Copied!)';\n            copyButton.innerHTML = ClipboardIconSVG + copiedTextContent;\n            setTimeout(() => {\n              if (type === 'general') promptCopied = false;\n              else if (type === 'imagefx') imageFXPromptCopied = false;\n              else if (type === 'midjourney') midjourneyPromptCopied = false;\n              else if (type === 'stablediffusion') stableDiffusionPromptCopied = false;\n              copyButton.innerHTML = originalText; // Restore original button text\n            }, 2000);\n          }\n        }).catch(err => {\n          console.error(`Failed to copy ${type} prompt: `, err);\n          error = `프롬프트 복사에 실패했습니다. (Failed to copy ${type} prompt.)`;\n          renderResultsPanel();\n        });\n      }\n      \n      function getSubCategoryListByType(type) {\n        if (type === 'expression') return EXPRESSION_SUB_CATEGORY_LIST;\n        if (type === 'action') return ACTION_SUB_CATEGORY_LIST;\n        if (type === 'clothing') return CLOTHING_SUB_CATEGORY_LIST;\n        if (type === 'accessories') return ACCESSORIES_SUB_CATEGORY_LIST;\n        if (type === 'background') return BACKGROUND_SUB_CATEGORY_LIST;\n        return [];\n      }\n\n      function getDetailOptionsForSubCategory(type, subCategoryValue) {\n          if (type === 'expression') return EXPRESSION_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'action') return ACTION_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'clothing') return CLOTHING_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'accessories') return ACCESSORIES_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          if (type === 'background') return BACKGROUND_DETAIL_OPTIONS[subCategoryValue] || [NONE_OPTION];\n          return [NONE_OPTION];\n      }\n\n      // --- UI Rendering Functions ---\n      function renderApp() {\n        const root = document.getElementById('root');\n        root.innerHTML = ''; // Clear previous content\n        root.className = 'min-h-screen bg-gradient-to-br from-neutral-dark via-gray-800 to-neutral-dark text-neutral-extralight p-4 sm:p-8 flex flex-col items-center';\n\n        // Header\n        const header = createElement('header', ['w-full', 'max-w-5xl', 'mb-8', 'text-center']);\n        header.appendChild(createElement('h1', ['text-4xl', 'sm:text-5xl', 'font-bold', 'text-transparent', 'bg-clip-text', 'bg-gradient-to-r', 'from-brand-secondary', 'via-brand-accent', 'to-pink-500', 'mb-2'], {}, 'AI 이미지 프롬프트 생성기'));\n        header.appendChild(createElement('p', ['text-lg', 'text-neutral-light'], {}, '원하는 옵션을 선택하여 독창적인 이미지 프롬프트를 만들어보세요!'));\n        root.appendChild(header);\n\n        // Main\n        const main = createElement('main', ['w-full', 'max-w-5xl', 'grid', 'grid-cols-1', 'gap-8']);\n        \n        // Options Panel\n        const optionsPanel = createElement('section', ['bg-gray-800', 'p-6', 'rounded-xl', 'shadow-2xl', 'border', 'border-gray-700', 'space-y-8']);\n        optionsPanel.appendChild(createElement('h2', ['text-2xl', 'font-semibold', 'mb-3', 'text-brand-accent', 'border-b-2', 'border-brand-accent', 'pb-2'], {}, '옵션 선택 (Select Options)'));\n        \n        // Basic Character\n        const basicCharDiv = createElement('div');\n        basicCharDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '기본 캐릭터 설정 (Basic Character)'));\n        const basicCharGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'gap-4']);\n        basicCharGrid.appendChild(createSelectDropdown(Category.GENDER, Category.GENDER, GENDER_OPTIONS, selections[Category.GENDER], (e) => handleSimpleSelectionChange(Category.GENDER, e.target.value), 'text-neutral-dark'));\n        basicCharGrid.appendChild(createSelectDropdown(Category.RACE, Category.RACE, RACE_OPTIONS, selections[Category.RACE], (e) => handleSimpleSelectionChange(Category.RACE, e.target.value), 'text-neutral-dark'));\n        basicCharDiv.appendChild(basicCharGrid);\n        basicCharDiv.appendChild(createButton('randomizeGenderRaceBtn', '랜덤 성별 & 인종 (Random Gender & Race)', ShuffleIconSVG, handleRandomizeGenderRace, ['w-full', 'mt-4', 'bg-purple-600', 'hover:bg-purple-700', 'text-white', 'font-semibold', 'py-2.5', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-purple-400', 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center', 'transform', 'hover:scale-105']));\n        optionsPanel.appendChild(basicCharDiv);\n\n        // Occupation\n        const occupationDiv = createElement('div');\n        occupationDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '직업 설정 (Occupation)'));\n        const occupationInnerDiv = createElement('div', ['mt-0']);\n        occupationInnerDiv.appendChild(createSelectDropdown(Category.OCCUPATION, Category.OCCUPATION, OCCUPATION_OPTIONS, selections[Category.OCCUPATION], (e) => handleOccupationChange(e.target.value), 'text-neutral-dark mb-2'));\n        occupationInnerDiv.appendChild(createTextInput('customOccupationDetail', '또는 직접 직업 입력 (Or type custom occupation)...', selections.customOccupationDetail, (e) => handleCustomOccupationDetailChange(e)));\n        occupationDiv.appendChild(occupationInnerDiv);\n        optionsPanel.appendChild(occupationDiv);\n\n        // Randomize Others Button and Art Style/Framing/Ratio\n        const randomizeAndArtDiv = createElement('div');\n        randomizeAndArtDiv.appendChild(createButton('randomizeOthersBtn', '선택 캐릭터 외 랜덤 조합 (Randomize Others)', DiceIconSVG, handleRandomizeRemainingDetails, ['w-full', 'mb-4', 'bg-teal-500', 'hover:bg-teal-600', 'text-white', 'font-semibold', 'py-2.5', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-teal-300', 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center', 'transform', 'hover:scale-105']));\n        randomizeAndArtDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, '화풍, 구도 및 비율 (Art Style, Framing & Ratio)'));\n        const artStyleGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'md:grid-cols-3', 'gap-4']);\n        artStyleGrid.appendChild(createSelectDropdown(Category.STYLE, Category.STYLE, STYLE_OPTIONS, selections[Category.STYLE], (e) => handleSimpleSelectionChange(Category.STYLE, e.target.value), 'text-neutral-dark'));\n        artStyleGrid.appendChild(createSelectDropdown(Category.FRAMING, Category.FRAMING, FRAMING_OPTIONS, selections[Category.FRAMING], (e) => handleSimpleSelectionChange(Category.FRAMING, e.target.value), 'text-neutral-dark'));\n        artStyleGrid.appendChild(createSelectDropdown(Category.ASPECT_RATIO, Category.ASPECT_RATIO, ASPECT_RATIO_OPTIONS, selections[Category.ASPECT_RATIO], (e) => handleSimpleSelectionChange(Category.ASPECT_RATIO, e.target.value), 'text-neutral-dark'));\n        randomizeAndArtDiv.appendChild(artStyleGrid);\n        optionsPanel.appendChild(randomizeAndArtDiv);\n\n        // Complex Categories\n        const complexCategoryConfigs = [\n            { type: 'expression', label: Category.EXPRESSION, subCategoryList: EXPRESSION_SUB_CATEGORY_LIST, detailOptionsMap: EXPRESSION_DETAIL_OPTIONS },\n            { type: 'action', label: Category.ACTION, subCategoryList: ACTION_SUB_CATEGORY_LIST, detailOptionsMap: ACTION_DETAIL_OPTIONS },\n            { type: 'clothing', label: Category.CLOTHING, subCategoryList: CLOTHING_SUB_CATEGORY_LIST, detailOptionsMap: CLOTHING_DETAIL_OPTIONS },\n            { type: 'accessories', label: Category.ACCESSORIES, subCategoryList: ACCESSORIES_SUB_CATEGORY_LIST, detailOptionsMap: ACCESSORIES_DETAIL_OPTIONS },\n            { type: 'background', label: Category.BACKGROUND, subCategoryList: BACKGROUND_SUB_CATEGORY_LIST, detailOptionsMap: BACKGROUND_DETAIL_OPTIONS },\n        ];\n\n        complexCategoryConfigs.forEach(config => {\n            const catDiv = createElement('div', [], { id: `${config.type}Container`});\n            catDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-4', 'text-neutral-light', 'border-l-4', 'border-brand-secondary', 'pl-3'], {}, config.label.replace('\\\\n', ' ')));\n            const catGrid = createElement('div', ['grid', 'grid-cols-1', 'sm:grid-cols-2', 'gap-x-4']);\n            \n            catGrid.appendChild(createSelectDropdown(\n                `${config.type}SubCategory`, \n                `${config.label.split('\\n')[0]} 타입 (Type)`, \n                config.subCategoryList, \n                selections[`${config.type}SubCategory`], \n                (e) => handleSubCategoryChange(config.type, e.target.value),\n                'text-neutral-dark'\n            ));\n            \n            const detailContainer = createElement('div');\n            const currentSubCategoryValue = selections[`${config.type}SubCategory`] || (config.subCategoryList.length > 0 ? config.subCategoryList[0].value : undefined);\n            const currentDetailOptions = currentSubCategoryValue ? (config.detailOptionsMap[currentSubCategoryValue] || [NONE_OPTION]) : [NONE_OPTION];\n            \n            detailContainer.appendChild(createSelectDropdown(\n                `${config.type}Option`, \n                `세부 ${config.label.split('\\n')[0]} (Detail)`, \n                currentDetailOptions, \n                selections[`${config.type}Option`], \n                (e) => handleDetailOptionChange(config.type, e.target.value),\n                'text-neutral-dark mb-2'\n            ));\n            detailContainer.appendChild(createTextInput(\n                `custom${config.type.charAt(0).toUpperCase() + config.type.slice(1)}Detail`,\n                `또는 직접 입력 (Or type custom ${config.type})...`,\n                selections[`custom${config.type.charAt(0).toUpperCase() + config.type.slice(1)}Detail`],\n                (e) => handleCustomDetailChange(config.type, e.target.value)\n            ));\n            catGrid.appendChild(detailContainer);\n            catDiv.appendChild(catGrid);\n            optionsPanel.appendChild(catDiv);\n        });\n\n        optionsPanel.appendChild(createButton('generatePromptBtn', '프롬프트 생성 (Generate Prompt)', null, constructPrompt, ['w-full', 'mt-6', 'bg-gradient-to-r', 'from-brand-primary', 'to-brand-secondary', 'hover:from-brand-secondary', 'hover:to-brand-primary', 'text-white', 'font-semibold', 'py-3', 'px-6', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transform', 'hover:scale-105', 'transition', 'duration-300', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', 'focus:ring-brand-accent', 'focus:ring-opacity-50']));\n        main.appendChild(optionsPanel);\n\n        // Results Panel (placeholder, will be populated by renderResultsPanel)\n        const resultsPanel = createElement('section', ['bg-gray-800', 'p-6', 'rounded-xl', 'shadow-2xl', 'border', 'border-gray-700', 'space-y-4'], { id: 'resultsPanel' });\n        main.appendChild(resultsPanel);\n        renderResultsPanel(); // Initial render of results panel\n\n        root.appendChild(main);\n\n        // Footer\n        const footer = createElement('footer', ['w-full', 'max-w-5xl', 'mt-12', 'text-center', 'text-neutral-medium', 'text-sm', 'space-y-3']);\n        footer.appendChild(createElement('p', [], {}, `Created by GPT PARK © ${new Date().getFullYear()}. GPT PARK의 AI 이미지 프롬프트 생성기.`));\n        const youtubeLink = createElement('a', ['inline-flex', 'items-center', 'justify-center', 'bg-red-600', 'hover:bg-red-700', 'text-white', 'font-semibold', 'py-2', 'px-4', 'rounded-lg', 'shadow-md', 'hover:shadow-lg', 'transition', 'duration-300', 'ease-in-out', 'transform', 'hover:scale-105', 'focus:outline-none', 'focus:ring-2', 'focus:ring-red-400', 'focus:ring-opacity-50'], { href: \"https://www.youtube.com/@AIFACT-GPTPARK\", target: \"_blank\", rel: \"noopener noreferrer\", 'aria-label': \"GPT PARK 유튜브 채널 방문\" }, YouTubeIconSVG + 'GPT PARK 유튜브 채널 (YouTube)');\n        footer.appendChild(youtubeLink);\n        root.appendChild(footer);\n      }\n\n      function renderResultsPanel() {\n        const resultsPanel = document.getElementById('resultsPanel');\n        if (!resultsPanel) return;\n        resultsPanel.innerHTML = ''; // Clear previous results\n\n        resultsPanel.appendChild(createElement('h2', ['text-2xl', 'font-semibold', 'mb-3', 'text-brand-accent', 'border-b-2', 'border-brand-accent', 'pb-2'], {}, '결과 (Results)'));\n\n        if (error) {\n          const errorDiv = createElement('div', ['bg-red-100', 'border-l-4', 'border-red-500', 'text-red-700', 'p-4', 'my-4', 'rounded-md', 'shadow-md'], { role: 'alert' });\n          errorDiv.appendChild(createElement('p', ['font-bold'], {}, '오류 (Error)'));\n          errorDiv.appendChild(createElement('p', [], {}, error));\n          resultsPanel.appendChild(errorDiv);\n        }\n\n        const createPromptSection = (id, title, promptText, copyHandler, copiedFlag, buttonTextPrefix, bgColorClass, borderColorClass, titleColorClass, textBgClass, buttonBgClass, buttonHoverBgClass, buttonRingClass) => {\n            if (!promptText) return null;\n            const sectionDiv = createElement('div', ['p-4', 'rounded-xl', bgColorClass, 'border', borderColorClass]);\n            sectionDiv.appendChild(createElement('h3', ['text-xl', 'font-semibold', 'mb-2', titleColorClass], {}, title));\n            const promptDisplay = createElement('div', [textBgClass, 'p-3', 'rounded-lg', 'text-neutral-extralight', 'text-sm', 'leading-relaxed', 'shadow-inner', 'break-words']);\n            promptDisplay.appendChild(createElement('p', [], {}, promptText));\n            sectionDiv.appendChild(promptDisplay);\n            \n            const buttonText = copiedFlag ? `${buttonTextPrefix.split(' ')[0]} 복사됨! (Copied!)` : `${buttonTextPrefix} 프롬프트 복사`;\n            sectionDiv.appendChild(createButton(\n                `copy${id}Prompt`,\n                buttonText,\n                ClipboardIconSVG,\n                () => copyHandler(promptText, id.toLowerCase()),\n                ['w-full', 'mt-3', buttonBgClass, buttonHoverBgClass, 'text-white', 'font-semibold', 'py-2', 'px-4', 'rounded-lg', 'shadow-sm', 'hover:shadow-md', 'transition', 'duration-150', 'ease-in-out', 'focus:outline-none', 'focus:ring-2', buttonRingClass, 'focus:ring-opacity-50', 'flex', 'items-center', 'justify-center'],\n                copiedFlag ? `${buttonTextPrefix} 프롬프트 복사됨` : `${buttonTextPrefix} 프롬프트 복사`\n            ));\n            return sectionDiv;\n        };\n        \n        const generalPromptSection = createPromptSection('General', 'DALL·E 2 / Bing Image Creator / Google Image-FX 프롬프트 (For DALL·E 2 / Bing Image Creator / Google Image-FX):', generatedPrompt, handleCopyPrompt, promptCopied, 'DALL·E 2/Bing/Image-FX', 'bg-gray-700', 'border-gray-600', 'text-neutral-light', 'bg-gray-600', 'bg-gray-500', 'hover:bg-gray-400', 'focus:ring-gray-300');\n        if(generalPromptSection) resultsPanel.appendChild(generalPromptSection);\n\n        const imageFXPromptSection = createPromptSection('ImageFX', 'GPT-4o / DALL·E 3 / OpenAI API 프롬프트 (For GPT-4o / DALL·E 3 / OpenAI API):', generatedImageFXPrompt, handleCopyPrompt, imageFXPromptCopied, 'GPT-4o/DALL·E 3/API', 'bg-blue-950', 'border-blue-800', 'text-blue-300', 'bg-blue-900', 'bg-blue-700', 'hover:bg-blue-600', 'focus:ring-blue-500');\n        if(imageFXPromptSection) resultsPanel.appendChild(imageFXPromptSection);\n\n        const midjourneyPromptSection = createPromptSection('Midjourney', 'Midjourney 프롬프트 (For Midjourney):', generatedMidjourneyPrompt, handleCopyPrompt, midjourneyPromptCopied, 'Midjourney', 'bg-purple-950', 'border-purple-800', 'text-purple-300', 'bg-purple-900', 'bg-purple-700', 'hover:bg-purple-600', 'focus:ring-purple-500');\n        if(midjourneyPromptSection) resultsPanel.appendChild(midjourneyPromptSection);\n        \n        const stableDiffusionSection = createPromptSection('StableDiffusion', 'Stable Diffusion 프롬프트 (For WebUI, ComfyUI, InvokeAI etc.):', generatedStableDiffusionPrompt, handleCopyPrompt, stableDiffusionPromptCopied, 'Stable Diffusion', 'bg-teal-950', 'border-teal-800', 'text-teal-300', 'bg-teal-900', 'bg-teal-700', 'hover:bg-teal-600', 'focus:ring-teal-500');\n         if(stableDiffusionSection) {\n            // For Stable Diffusion, ensure pre-line for the negative prompt\n            const promptDisplayDiv = stableDiffusionSection.querySelector('.bg-teal-900');\n            if(promptDisplayDiv) promptDisplayDiv.classList.add('whitespace-pre-line');\n            resultsPanel.appendChild(stableDiffusionSection);\n        }\n\n\n        if (!generatedPrompt && !generatedImageFXPrompt && !generatedMidjourneyPrompt && !generatedStableDiffusionPrompt && !error) {\n          const placeholderDiv = createElement('div', ['text-center', 'text-neutral-medium', 'py-10']);\n          const placeholderSVG = `\n`;\n          placeholderDiv.innerHTML = placeholderSVG;\n          placeholderDiv.appendChild(createElement('p', [], {}, '옵션을 선택하고 프롬프트를 생성해보세요.\n(Select options and generate a prompt.)'));\n          resultsPanel.appendChild(placeholderDiv);\n        }\n      }\n\n      // --- Initialization ---\n      document.addEventListener('DOMContentLoaded', renderApp);",
        "guid": "http://muzbox.tistory.com/483603",
        "categories": [
          "AI, 미래기술/AI 인사이트",
          "ai이미지생성",
          "DALL&middot;E",
          "Midjourney",
          "Sora",
          "Stable Diffusion",
          "미드저니",
          "이미지 생성 프롬프트",
          "인공지능",
          "챗GPT",
          "프롬프트 생성기"
        ],
        "isoDate": "2025-06-03T22:19:12.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "AI 리서치 끝판왕 - 제미나이 딥리서치 GEM 지침 배포 (무료 시각화까지!)",
        "link": "http://muzbox.tistory.com/483602",
        "pubDate": "Sun, 1 Jun 2025 12:43:34 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483602#entry483602comment",
        "content": "<div style=\"background-color: #e0f7fa; padding: 15px; border-radius: 8px; font-style: italic; margin-bottom: 25px; font-size: 15px; border: 1px solid #b2ebf2;\"><b>✨ 제미나이 딥리서치, GEM 지침으로 날개를 달아보세요!</b> 여러분의 AI 활용 수준을 한 단계 업그레이드할 비밀 병기, GEM 지침을 소개합니다. 간단한 질문만으로는 얻을 수 없었던 전문가 수준의 분석 보고서를 직접 경험해보세요!</div>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1536\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/eiAQEQ/btsOlWaxQTl/EK5g1DV33aUPKK57xWyck1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/eiAQEQ/btsOlWaxQTl/EK5g1DV33aUPKK57xWyck1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/eiAQEQ/btsOlWaxQTl/EK5g1DV33aUPKK57xWyck1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FeiAQEQ%2FbtsOlWaxQTl%2FEK5g1DV33aUPKK57xWyck1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"제미나이 딥리서치 GEM 지침 배포\" loading=\"lazy\" width=\"1536\" height=\"1024\" data-origin-width=\"1536\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">혹시 AI에게 질문했을 때, \"음... 뭔가 알맹이가 빠진 것 같은데?\" 혹은 \"출처가 어디지?\" 하며 고개를 갸웃했던 경험, 다들 한 번쯤 있으시죠? 특히 과제나 보고서처럼 정확하고 깊이 있는 정보가 필요할 때는 더욱 답답함을 느끼셨을 거예요. 최신 정보, 실시간 데이터, 신뢰할 수 있는 출처에 기반한 분석. 이게 바로 우리가 AI에게 진짜 원하는 거잖아요!</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">최근 ChatGPT, Claude, Gemini 같은 AI 모델들이 앞다투어 '딥리서치' 기능을 선보이는 이유도 바로 여기에 있습니다. 단순히 웹 검색 결과를 나열하는 것을 넘어, <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">실시간으로 웹을 탐색하고, 최신 논문을 찾고, 신뢰할 수 있는 데이터를 수집해 분석까지 해주는</span> 정말 똑똑한 기능이죠. 하지만 이 강력한 딥리서치 기능도 제대로 활용하지 못하면 무용지물이랍니다. 오늘 제가 그 봉인 해제 방법을 알려드릴게요!  </p>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>딥리서치, 왜 그냥 검색이랑 다를까요?  </b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">\"딥리서치? 그거 그냥 구글링 잘하는 거 아니야?\" 라고 생각하실 수도 있지만, 전혀 그렇지 않아요! 일반 웹 검색은 단순히 정보를 찾아 보여주는 데 그치지만, 딥리서치는 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">마치 숙련된 연구원처럼 정보를 탐색, 검증, 요약하고 비판적으로 재구성하는 과정</span>을 거칩니다. 훨씬 더 깊이 있고 신뢰도 높은 결과물을 만들어내는 거죠.</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">하지만 대부분의 사람들이 AI에게 \"○○에 대해 조사해줘\"처럼 너무 막연하게 질문하는 경우가 많아요. 이렇게 하면 딥리서치 기능을 켜도 AI가 어떤 관점에서, 무엇을 중점적으로 찾아야 할지 몰라 표면적인 정보만 가져오게 됩니다. 실제로 제가 간단한 프롬프트로 딥리서치를 요청했을 때는 일반화된 문장과 출처 불명의 정보만 얻었지만, 제가 개발한 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">GEM 지침을 활용한 구조화된 프롬프트</span>를 사용했을 때는 실제 수치, 표, 그래프, 논문 인용까지 포함된 증거 기반의 답변을 받을 수 있었어요. 엄청난 차이죠?</p>\n<div style=\"background-color: #e0f2f7; border-left: 4px solid #4dd0e1; padding: 15px; margin: 20px 0; border-radius: 0 8px 8px 0;\"><b>  알아두세요! 딥리서치의 작동 과정</b><br />딥리서치는 다음과 같은 체계적인 단계를 거쳐요:<br />\n<ol style=\"margin: 10px 0 0 20px; padding: 0;\" data-ke-list-type=\"decimal\">\n<li style=\"margin-bottom: 5px;\"><b>의도 파악 및 쿼리 분해:</b> 사용자의 복잡한 요청을 구체적인 질문들로 나눕니다.</li>\n<li style=\"margin-bottom: 5px;\"><b>문서 검색:</b> 웹, 학술 데이터베이스, API 등 다양한 소스에서 정보를 찾습니다.</li>\n<li style=\"margin-bottom: 5px;\"><b>근거 중심 응답 구성:</b> 수집된 정보를 바탕으로 신뢰할 수 있는 답변을 만듭니다.</li>\n<li style=\"margin-bottom: 5px;\"><b>출처 명시 및 비판적 요약:</b> 정보의 출처를 명확히 밝히고, 비판적인 시각에서 요약합니다.</li>\n<li style=\"margin-bottom: 0;\"><b>응답 구조화:</b> 사용자가 이해하기 쉽도록 답변을 체계적으로 정리합니다.</li>\n</ol>\n</div>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>마법의 열쇠, GEM 지침이란 무엇일까요?  </b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">이 놀라운 차이를 만드는 것이 바로 제가 개발한 <b>GEM 지침</b>입니다! 여기서 GEM은 Google Gemini에서 제공하는 '사용자 맞춤형 AI 비서' 기능을 의미해요. 즉, 여러분만의 똑똑한 AI 어시스턴트를 만들 수 있는 기능이죠. 물론 이 GEM 지침은 ChatGPT나 Claude 같은 다른 AI 모델에서도 활용할 수 있지만, 제미나이의 GEM 기능과 함께 사용할 때 그 효과가 극대화된답니다.</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">제미나이가 딥리서치에 특히 강력한 이유는 제미나이의 뛰어난 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">멀티모달 능력과 강력한 추론 능력</span> 덕분이에요. 텍스트뿐만 아니라 이미지, 오디오, 비디오 등 다양한 형태의 데이터를 이해하고 분석할 수 있어서, 딥리서치를 통해 수집된 방대한 정보를 훨씬 더 심층적으로 파악하고 숨겨진 통찰까지 찾아낼 수 있죠. 게다가 제미나이의 압도적으로 큰 컨텍스트 윈도우(한 번에 기억하고 처리할 수 있는 정보의 양)와 효율적인 토큰 처리 능력은 딥리서치 과정의 효율성을 엄청나게 높여준답니다!  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"font-size: 20px; color: #00796b; margin: 25px 0 12px;\" data-ke-size=\"size23\"><b>GEM 지침의 핵심 원리 dissected  </b></h3>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">GEM 지침이 어떻게 작동하는지 궁금하시죠? 크게 세 가지 핵심 원리가 있어요.</p>\n<ol style=\"margin: 0 0 15px 20px; padding: 0;\" data-ke-list-type=\"decimal\">\n<li style=\"margin-bottom: 8px;\"><b>응답 형식 준수:</b> 일반적인 AI처럼 바로 답변을 내놓는 게 아니라, AI가 \"당신의 질문을 이렇게 분석했고, 이런 확장 기법을 적용해서 더 완벽한 프롬프트를 만들 거예요!\" 라고 먼저 설명해줘요. 그리고 나서 완전히 새로운 수준의 확장된 프롬프트를 생성해줍니다.</li>\n<li style=\"margin-bottom: 8px;\"><b>확장 프롬프트의 내용 구성:</b> 여기가 진짜 핵심인데요! 여러분의 단순한 질문을 세 가지 차원에서 확장시켜요.\n<ul style=\"margin: 5px 0 5px 20px; padding: 0;\" data-ke-list-type=\"disc\">\n<li style=\"margin-bottom: 3px;\"><b>컨텍스트 설정:</b> 시간적 맥락(예: \"2025년 5월 31일 현재\"), 현재 상황, 기술적 배경 등을 명시해서 AI가 최신 데이터를 우선적으로 탐색하도록 유도해요.</li>\n<li style=\"margin-bottom: 3px;\"><b>목적 명시:</b> 단순히 \"분석해줘\"가 아니라 \"무엇을 위해, 어떤 관점에서, 어떤 결과물을 원하는지\" 아주 구체적으로 알려주는 거죠.</li>\n<li style=\"margin-bottom: 0;\"><b>데이터 소스 지정:</b> 어떤 정보원을 참고할지 (예: 한국언론진흥재단, 정보통신정책연구원), 어떤 형태의 시각자료가 필요한지까지 콕 집어 요청합니다.</li>\n</ul>\n</li>\n<li style=\"margin-bottom: 8px;\"><b>확장 기법 적용 (다차원 분석 요청):</b> 이게 정말 중요해요! 예를 들어 \"블로그와 유튜브의 사회적 영향력\"이라는 주제라면, GEM 지침은 이 질문을 아래와 같이 여러 영역으로 나누어 심층 분석을 요청해요.\n<ul style=\"margin: 5px 0 0 20px; padding: 0;\" data-ke-list-type=\"disc\">\n<li style=\"margin-bottom: 3px;\">정보 확산 및 여론 형성</li>\n<li style=\"margin-bottom: 3px;\">사회/문화적 영향</li>\n<li style=\"margin-bottom: 3px;\">경제적 파급효과</li>\n<li style=\"margin-bottom: 3px;\">윤리적 및 법적 고려사항</li>\n<li style=\"margin-bottom: 0;\">미래 전망 및 제언</li>\n</ul>\n이렇게 하면 AI가 각 영역별로 별도의 리서치를 진행해서 훨씬 종합적이고 깊이 있는 분석 결과를 제공한답니다!</li>\n</ol>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>GEM 지침, 어떻게 등록하고 사용할까요?  </b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">자, 그럼 이 강력한 GEM 지침을 어떻게 사용하냐고요? 아주 간단해요! 제가 영상 설명란과 고정 댓글에 남겨둔 링크를 통해 제 블로그로 오시면 GEM 지침이 담긴 텍스트 파일을 다운로드하실 수 있어요. 그 다음 Gemini에 접속하셔서 화면 왼쪽 메뉴의 \"GEM 관리자\"로 이동해 다운받은 지침을 등록하시면 끝! 자세한 등록 방법은 이전 영상을 참고해주세요.  </p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">일단 '리서치 전문가 GEM 지침'을 등록하셨다면, 이제 여러분이 할 일은 간단한 주제만 입력하는 거예요. 예를 들어, \"블로그와 유튜브의 사회적 영향력을 분석해줘\" 라고 입력하면, GEM 지침이 알아서 이 주제에 최적화된, 아주 상세하고 구조화된 리서치용 프롬프트를 뚝딱 만들어낼 거예요. 정보 확산 방식부터 경제적 파급 효과, 윤리적 쟁점, 미래 전망까지 다각도로 분석하고, 한국언론진흥재단이나 정보통신정책연구원 같은 신뢰도 높은 데이터 소스를 명시하며, 2020년 이후 최신 트렌드에 집중한다는 시간적 범위까지 설정해주는 식이죠.</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">이렇게 잘 짜인 프롬프트는 단순한 질문이 아니라, <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">AI에게 어떤 각도에서 얼마나 깊이 있게 분석해야 하는지 명확한 가이드라인을 제공하는 체계적인 연구 설계서</span>나 마찬가지랍니다! 그 결과, 표면적인 정보 나열이 아니라 구체적인 데이터와 사례, 비판적 관점, 미래 전망까지 담긴 완성도 높은 종합 분석 보고서를 받아보실 수 있는 거예요. 프롬프트 설계에 쏟는 시간이 결과물의 질을 완전히 바꿔놓는 마법을 경험하게 되실 겁니다!</p>\n<div style=\"background-color: #e0f2f7; border-left: 4px solid #4dd0e1; padding: 15px; margin: 20px 0; border-radius: 0 8px 8px 0;\"><b>  GEM 지침 활용 꿀팁!</b><br />- 어떤 주제든 GEM 지침에 넣어보세요! 학술 연구, 시장 분석, 기술 동향 보고서 등 무궁무진하게 활용 가능해요.<br />- 생성된 확장 프롬프트를 그대로 사용해도 좋지만, 필요에 따라 조금씩 수정해서 사용하면 더욱 맞춤화된 결과를 얻을 수 있어요.<br />- AI 기술은 계속 발전하니, GEM 지침도 주기적으로 업데이트하면 좋겠죠? (제 블로그를 주목해주세요!)</div>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>제미나이 딥리서치, 이렇게 강력합니다! ✨</b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">GEM 지침으로 생성된 상세 프롬프트를 복사해서, 제미나이 채팅창 하단의 '딥리서치' 버튼을 활성화한 후 붙여넣고 실행하면 끝! 잠시 후 제미나이가 리서치 계획을 보여줄 거예요. 이때 \"계획 수정\"을 눌러 세부 항목을 조정하거나, 바로 \"연구 시작\"을 눌러 리서치를 진행할 수 있습니다.</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">딥리서치는 주제와 관련된 수많은 출처를 찾아 분석하고 종합하는 과정이 필요해서, 보고서가 완성되기까지 보통 10분 이상 소요될 수 있어요. (프로 모델에서는 더 많은 시간이 걸리기도 하고요!) 하지만 기다린 만큼의 가치가 충분하답니다. 커피 한 잔 하시면서 전문가 수준의 보고서가 탄생하는 과정을 지켜보세요! ☕</p>\n<div style=\"background-color: #fffde7; border-left: 4px solid #fbc02d; padding: 15px; margin: 20px 0; border-radius: 0 8px 8px 0;\"><b>⚠️ 딥리서치 사용 시 참고하세요!</b><br />- 딥리서치는 방대한 정보를 처리하므로 일반적인 답변보다 시간이 더 오래 걸릴 수 있습니다. 인내심을 가져주세요!<br />- 무료 버전과 유료 프로 모델 간에는 분석의 깊이나 속도에 차이가 있을 수 있습니다.<br />- AI가 생성한 정보는 항상 교차 검증하고 비판적으로 수용하는 자세가 중요합니다.</div>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>완성된 보고서, 시각화로 날개를 달다!  </b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">자, 드디어 딥리서치가 완료되면 정말 놀라운 보고서가 눈앞에 펼쳐질 거예요! 하지만 여기서 끝이 아니랍니다. 제미나이는 이 보고서를 더욱 빛나게 해줄 강력한 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">시각화 기능</span>을 제공해요. 심지어 이 기능, 젠스파크 같은 다른 서비스에서는 크레딧을 소모해야 하지만 제미나이에서는 무료 플랜에서도 마음껏 사용할 수 있다는 사실!  </p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">보고서 오른쪽 상단의 '만들기' 버튼을 누르면 웹페이지나 인포그래픽 형태로 바로 변환할 수 있어요. 별도의 복잡한 프롬프트 없이 클릭 몇 번만으로 전문가가 만든 것 같은 시각자료가 뚝딱! 개인적으로는 젠스파크에서 Claude 기반으로 만든 시각화 결과물보다 제미나이 쪽이 더 깔끔하고 뛰어나다는 생각이 들더라고요. (여러분도 한번 비교해보세요!)</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">물론, 시각화된 자료 외에 보고서 원문도 필요하겠죠? 제미나이 딥리서치 결과물은 텍스트로 복사하거나 구글 DOCS로 바로 내보낼 수 있어서, PDF를 포함한 다양한 형태로 저장하고 활용하기에도 정말 편리하답니다.</p>\n<div style=\"background-color: #e0f7fa; padding: 18px; border-radius: 8px; margin: 20px 0; border: 1px solid #b2ebf2;\">\n<h3 style=\"font-size: 20px; color: #333; margin: 0 0 12px;\" data-ke-size=\"size23\"><b>✨ 시각화 마법 살짝 엿보기! (상상도)  ️</b></h3>\n<p style=\"margin-bottom: 8px;\" data-ke-size=\"size16\"><b>웹페이지로 변신!  </b></p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">여러분의 딥리서치 보고서가 항목별로 깔끔하게 정리된 인터랙티브 웹페이지로 재탄생합니다. 스크롤하며 주요 내용을 확인하고, 관련 그래프나 표를 바로 볼 수 있어요. 마치 잘 만들어진 온라인 기사처럼 가독성이 뛰어나답니다!</p>\n<p style=\"margin-bottom: 8px;\" data-ke-size=\"size16\"><b>한눈에 쏙! 인포그래픽  </b></p>\n<p style=\"margin-bottom: 0;\" data-ke-size=\"size16\">복잡한 데이터와 분석 내용이 핵심만 담긴 세련된 인포그래픽으로 요약됩니다. 다양한 차트와 아이콘, 강조 색상을 활용해 정보 전달력을 극대화하죠. 발표 자료나 SNS 공유용으로도 안성맞춤!</p>\n</div>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>핵심만 쏙쏙! GEM 지침으로 딥리서치 역량 UP!  </b></h2>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">오늘 정말 많은 이야기를 나눴는데요, 핵심만 다시 한번 정리해볼까요?</p>\n<ol style=\"margin: 0 0 15px 20px; padding: 0;\" data-ke-list-type=\"decimal\">\n<li style=\"margin-bottom: 8px;\"><b>단순 검색은 이제 그만!</b> 깊이 있는 분석과 통찰을 원한다면 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">딥리서치</span>가 정답입니다.</li>\n<li style=\"margin-bottom: 8px;\"><b>GEM 지침으로 AI를 조련하세요!</b> 여러분의 생각을 정확히 반영한 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">맞춤형 고급 프롬프트</span>를 생성하여 AI의 잠재력을 100% 끌어낼 수 있습니다.</li>\n<li style=\"margin-bottom: 8px;\"><b>제미나이의 강력한 기능들을 활용하세요!</b> 멀티모달 분석, 방대한 컨텍스트 처리, 그리고 무료 시각화 기능까지! 제미나이는 딥리서치를 위한 최고의 파트너입니다.</li>\n<li style=\"margin-bottom: 0;\"><b>결과물 활용도 UP!</b> 전문가 수준의 보고서는 물론, 웹페이지, 인포그래픽 등 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">다양한 형태로 결과물을 활용</span>하여 여러분의 과제나 업무 성과를 극대화하세요.</li>\n</ol>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">이제 여러분도 AI를 단순한 검색 도구가 아닌, 진정한 연구 파트너로 활용하실 수 있을 거예요!</p>\n<div style=\"border-top: 1px dashed #e0e0e0; margin: 30px 0;\">&nbsp;</div>\n<div>\n<style>\n        .single-summary-card-container {\n            justify-content: center;\n            align-items: center;\n            padding: 20px 10px;\n            background-color: #e0f7fa; /* Light Teal for container background */\n            margin: 20px 0; }\n        .single-summary-card {\n            width: 100%;\n            max-width: 700px;\n            background-color: #ffffff; border-radius: 12px;\n            box-shadow: 0 6px 18px rgba(0,0,0,0.12);\n            padding: 25px;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n            border: 1px solid #b2ebf2; /* Teal border for card */\n            box-sizing: border-box; \n            height: auto; \n            min-height: unset; \n        }\n        .single-summary-card .card-header {\n            display: flex; align-items: center;\n            border-bottom: 2px solid #00796b; /* Dark Teal border for header */\n            padding-bottom: 12px; margin-bottom: 12px;\n        }\n        .single-summary-card .card-header-icon {\n            font-size: 34px;\n            color: #00796b; /* Dark Teal icon */\n            margin-right: 14px; }\n        .single-summary-card .card-header h3 {\n            font-size: 26px;\n            color: #00796b; /* Dark Teal header text */\n            margin: 0;\n            line-height: 1.3;\n            font-weight: 700; }\n        .single-summary-card .card-content {\n            flex-grow: 1;\n            display: flex;\n            flex-direction: column; justify-content: space-around;\n            font-size: 17px;\n            line-height: 1.65;\n            color: #333; /* Main text color */\n        }\n        .single-summary-card .card-content .section {\n            margin-bottom: 10px; }\n        .single-summary-card .card-content strong {\n            color: #004d40; /* Darker Teal for strong text */\n            font-weight: 600; }\n        .single-summary-card .card-content .highlight {\n            background-color: #fff9c4; \n            padding: 2px 6px;\n            border-radius: 3px; font-weight: bold;\n        }\n        .single-summary-card .card-content .formula {\n            background-color: #e0f7fa; /* Light Teal formula background */\n            padding: 6px 10px;\n            border-radius: 4px;\n            font-size: 0.9em; text-align: center;\n            margin-top: 5px;\n            color: #004d40; /* Darkest Teal for formula text */\n        }\n        .single-summary-card .card-footer {\n            font-size: 14px; color: #777;\n            text-align: center;\n            padding-top: 12px;\n            border-top: 1px dashed #b2ebf2; /* Light Teal dashed border for footer */\n            margin-top: auto; }\n\n        @media (max-width: 768px) {\n            .single-summary-card {\n                padding: 18px; \n                height: auto; \n                min-height: unset; \n            }\n            .single-summary-card .card-header-icon {\n                font-size: 28px; \n                margin-right: 10px; }\n            .single-summary-card .card-header h3 {\n                font-size: 20px; \n            }\n            .single-summary-card .card-content {\n                font-size: 15px; \n                line-height: 1.5; }\n            .single-summary-card .card-content .section {\n                margin-bottom: 8px; \n            }\n            .single-summary-card .card-content .formula {\n                padding: 5px 8px; font-size: 0.85em; \n            }\n            .single-summary-card .card-footer {\n                font-size: 13px; padding-top: 10px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .single-summary-card {\n                padding: 15px; \n            }\n            .single-summary-card .card-header-icon {\n                font-size: 26px; }\n            .single-summary-card .card-header h3 {\n                font-size: 18px; }\n            .single-summary-card .card-content {\n                font-size: 14px; line-height: 1.4;\n            }\n            .single-summary-card .card-content .section {\n                margin-bottom: 6px; }\n            .single-summary-card .card-content .formula {\n                padding: 4px 6px; font-size: 0.8em;\n            }\n            .single-summary-card .card-footer {\n                font-size: 12px; padding-top: 8px;\n            }\n        }\n    </style>\n</div>\n<div class=\"single-summary-card-container\">\n<div class=\"single-summary-card\">\n<div class=\"card-header\"><span class=\"card-header-icon\"> </span>\n<h3 data-ke-size=\"size23\">GEM 지침: 딥리서치 초격차!</h3>\n</div>\n<div class=\"card-content\">\n<div class=\"section\"><b>✨ 맞춤형 프롬프트:</b> <span class=\"highlight\">GEM 지침이 단순 질문을 전문가급 리서치 설계도로 변환!</span></div>\n<div class=\"section\"><b>  심층 분석 가능:</b> <span class=\"highlight\">다차원 분석 요청으로 AI가 숨겨진 통찰까지 도출!</span></div>\n<div class=\"section\"><b>⚙️ 리서치 효율 극대화:</b>\n<div class=\"formula\">시간 절약 + 정보 품질 UP = 생산성 혁신!</div>\n</div>\n<div class=\"section\"><b>  전문가급 결과물:</b> <span class=\"highlight\">A+ 과제, 승진 보고서도 문제 없어요!</span></div>\n</div>\n<div class=\"card-footer\">GEM 지침으로 제미나이 딥리서치의 모든 가능성을 경험하세요!</div>\n</div>\n</div>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">오늘 여러분께 소개해 드린 GEM 지침은 제미나이의 딥리서치 기능을 단순히 활용하는 수준을 넘어, <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">완전히 새로운 차원으로 끌어올릴 수 있는 강력한 도구</span>입니다. 이제 단 몇 초 만에 전문가 수준의 프롬프트를 작성하고, 그 결과로 대학 논문이나 회사 보고서에 즉시 활용할 수 있는 고품질 분석 자료를 얻을 수 있게 되었습니다. 특히 다른 AI 서비스에서는 유료로 제공하는 시각화 기능을 제미나이에서는 무료로 사용할 수 있다는 점, 정말 놀랍지 않나요?  </p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">\"AI가 별로야\", \"내가 원하는 결과가 안 나와\" 라고 생각하셨던 분들도 이제는 그런 생각을 버리셔도 좋습니다. 문제는 AI가 아니라 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">우리가 어떻게 질문하느냐</span>에 있었던 것이니까요! 혹시 지침 적용 과정에서 어려움이 있으시다면 오픈톡방에 남겨주세요. 최대한 빨리 도와드리겠습니다.  </p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"margin-bottom: 15px;\" data-ke-size=\"size16\">이런 AI 활용 꿀팁들이 더 필요하시다면, 지금 바로 <b>구독과 좋아요</b> 버튼을 꾹! 눌러주세요. 알림까지 켜두시면 앞으로 제가 공개할 더 많은 AI 활용 전략들을 가장 먼저 만나보실 수 있습니다. 여러분의 AI 활용 여정에 제 영상이 도움이 되었으면 좋겠습니다. 그럼 다음 영상에서 더 놀라운 내용으로 찾아뵙겠습니다. 감사합니다!  </p>\n<p data-ke-size=\"size8\">&nbsp;</p>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>자주 묻는 질문 ❓</b></h2>\n<div style=\"margin: 30px 0;\">\n<div style=\"margin-bottom: 20px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; border: 1px solid #eeeeee;\">\n<div style=\"font-weight: bold; margin-bottom: 5px; color: #00796b;\">Q: GEM 지침은 제미나이에서만 사용할 수 있나요?</div>\n<div style=\"padding-left: 15px; color: #555;\">A: 아니요, GEM 지침의 원리는 ChatGPT나 Claude 등 다른 LLM에서도 충분히 활용 가능합니다. 하지만 제미나이의 GEM 기능(사용자 맞춤형 AI 비서)과 결합했을 때 가장 강력한 시너지를 내며, 특히 제미나이의 멀티모달 처리 능력과 방대한 컨텍스트 윈도우는 딥리서치에 최적화되어 있습니다.</div>\n</div>\n<div style=\"margin-bottom: 20px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; border: 1px solid #eeeeee;\">\n<div style=\"font-weight: bold; margin-bottom: 5px; color: #00796b;\">Q: 딥리서치 결과는 항상 100% 정확하고 최신 정보인가요?</div>\n<div style=\"padding-left: 15px; color: #555;\">A: AI가 생성하는 정보는 매우 유용하지만, 항상 100% 완벽하다고 할 수는 없습니다. 딥리서치는 최신 정보를 포함하려고 노력하지만, 정보의 편향성이나 오류 가능성은 여전히 존재합니다. 따라서 중요한 결정이나 학술적 목적으로 사용할 경우, 반드시 여러 출처를 통해 교차 검증하고 비판적으로 검토하는 자세가 필요합니다.</div>\n</div>\n<div style=\"margin-bottom: 20px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; border: 1px solid #eeeeee;\">\n<div style=\"font-weight: bold; margin-bottom: 5px; color: #00796b;\">Q: GEM 지침을 직접 만들거나 수정하는 것이 어렵지 않을까요?</div>\n<div style=\"padding-left: 15px; color: #555;\">A: 제가 제공하는 GEM 지침 템플릿을 활용하시면 누구나 쉽게 시작할 수 있습니다! 처음에는 제공된 지침을 그대로 사용해보시고, 익숙해지면 자신의 필요에 맞게 특정 데이터 소스를 추가하거나 분석 관점을 수정하는 등 커스터마이징 해보시는 것을 추천합니다. 혹시 어려움이 있으시면 언제든 오픈톡방에 질문해주세요!</div>\n</div>\n<div style=\"margin-bottom: 20px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; border: 1px solid #eeeeee;\">\n<div style=\"font-weight: bold; margin-bottom: 5px; color: #00796b;\">Q: 딥리서치와 일반 웹 검색의 가장 큰 차이점은 무엇인가요?</div>\n<div style=\"padding-left: 15px; color: #555;\">A: 가장 큰 차이는 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">분석의 깊이와 정보의 질</span>입니다. 일반 검색은 키워드에 맞는 정보를 찾아 나열하는 수준이라면, 딥리서치는 여러 정보를 종합하고, 검증하며, 다양한 관점에서 분석하여 새로운 통찰을 도출하려고 합니다. 마치 연구원이 연구를 수행하는 과정과 유사하다고 볼 수 있습니다.</div>\n</div>\n<div style=\"margin-bottom: 20px; padding: 12px; background-color: #f9f9f9; border-radius: 6px; border: 1px solid #eeeeee;\">\n<div style=\"font-weight: bold; margin-bottom: 5px; color: #00796b;\">Q: 제미나이에서 제공하는 시각화 기능에는 어떤 종류가 있나요?</div>\n<div style=\"padding-left: 15px; color: #555;\">A: 현재 제미나이는 딥리서치 결과를 바탕으로 <span style=\"background-color: #fff9c4; padding: 2px 4px; border-radius: 3px;\">웹페이지 형태와 인포그래픽 형태로 시각화</span>하는 기능을 제공합니다. 웹페이지는 보고서 내용을 구조적으로 보여주며, 인포그래픽은 핵심 정보를 차트나 그림으로 요약하여 한눈에 파악하기 쉽게 만들어줍니다. 이 기능들은 모두 무료 플랜에서도 사용 가능합니다!</div>\n</div>\n</div>\n<h2 style=\"font-size: 24px; color: white; background: linear-gradient(to right, #00796b, #004d40); margin: 35px 0 15px; padding-bottom: 8px; border-bottom: 2px solid #b2ebf2; border-radius: 10px; padding: 10px 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2); font-weight: bold; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\" data-ke-size=\"size26\"><b>GEM 무료 다운로드❓</b></h2>\n<div class=\"revenue_unit_wrap\">\n  <div class=\"revenue_unit_item adsense responsive\">\n    <div class=\"revenue_unit_info\">반응형</div>\n    <script src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\" async=\"async\"></script>\n    <ins class=\"adsbygoogle\" style=\"display: block;\" data-ad-host=\"ca-host-pub-9691043933427338\" data-ad-client=\"ca-pub-8195497734535830\" data-ad-format=\"auto\"></ins>\n    <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>\n  </div>\n</div>\n<p><figure class=\"fileblock\" data-ke-align=\"alignCenter\"><a href=\"https://blog.kakaocdn.net/dn/csNymq/btsOmg7s37S/HqsI2l4oRsoYmONrdGAZBK/Gemini%EB%A5%BC%20%EC%9C%84%ED%95%9C%20%EB%94%A5%EB%A6%AC%EC%84%9C%EC%B9%98%20%ED%99%95%EC%9E%A5%20%ED%94%84%EB%A1%AC%ED%94%84%ED%8A%B8%20%EC%83%9D%EC%84%B1%20%EC%B5%9C%EC%A0%81%ED%99%94%20%EC%A7%80%EC%B9%A8.zip?attach=1&amp;knm=tfile.zip\" class=\"\">\n    <div class=\"image\"></div>\n    <div class=\"desc\"><div class=\"filename\"><span class=\"name\">Gemini를 위한 딥리서치 확장 프롬프트 생성 최적화 지침.zip</span></div>\n<div class=\"size\">0.00MB</div>\n</div>\n  </a></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=4FBaYaXEqu0\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/SvS5h/hyY0x5VhcT/l9imvX0qQ5d3T4Y5psO8O0/img.jpg?width=1280&amp;height=720&amp;face=326_88_924_224\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"단 한 줄로 최강의 딥리서치 프롬프트 만들기! GEMINI 활용법 3편\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/4FBaYaXEqu0\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<script type=\"application/ld+json\">\n    {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"FAQPage\",\n        \"mainEntity\": [\n            {\n                \"@type\": \"Question\",\n                \"name\": \"GEM 지침은 제미나이에서만 사용할 수 있나요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  아니요, GEM 지침의 원리는 ChatGPT나 Claude 등 다른 LLM에서도 충분히 활용 가능합니다. 하지만 제미나이의 GEM 기능(사용자 맞춤형 AI 비서)과 결합했을 때 가장 강력한 시너지를 내며, 특히 제미나이의 멀티모달 처리 능력과 방대한 컨텍스트 윈도우는 딥리서치에 최적화되어 있습니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"딥리서치 결과는 항상 100% 정확하고 최신 정보인가요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  AI가 생성하는 정보는 매우 유용하지만, 항상 100% 완벽하다고 할 수는 없습니다. 딥리서치는 최신 정보를 포함하려고 노력하지만, 정보의 편향성이나 오류 가능성은 여전히 존재합니다. 따라서 중요한 결정이나 학술적 목적으로 사용할 경우, 반드시 여러 출처를 통해 교차 검증하고 비판적으로 검토하는 자세가 필요합니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"GEM 지침을 직접 만들거나 수정하는 것이 어렵지 않을까요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  제가 제공하는 GEM 지침 템플릿을 활용하시면 누구나 쉽게 시작할 수 있습니다! 처음에는 제공된 지침을 그대로 사용해보시고, 익숙해지면 자신의 필요에 맞게 특정 데이터 소스를 추가하거나 분석 관점을 수정하는 등 커스터마이징 해보시는 것을 추천합니다. 혹시 어려움이 있으시면 언제든 오픈톡방에 질문해주세요!\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"딥리서치와 일반 웹 검색의 가장 큰 차이점은 무엇인가요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  가장 큰 차이는 분석의 깊이와 정보의 질입니다. 일반 검색은 키워드에 맞는 정보를 찾아 나열하는 수준이라면, 딥리서치는 여러 정보를 종합하고, 검증하며, 다양한 관점에서 분석하여 새로운 통찰을 도출하려고 합니다. 마치 연구원이 연구를 수행하는 과정과 유사하다고 볼 수 있습니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"제미나이에서 제공하는 시각화 기능에는 어떤 종류가 있나요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  현재 제미나이는 딥리서치 결과를 바탕으로 웹페이지 형태와 인포그래픽 형태로 시각화하는 기능을 제공합니다. 웹페이지는 보고서 내용을 구조적으로 보여주며, 인포그래픽은 핵심 정보를 차트나 그림으로 요약하여 한눈에 파악하기 쉽게 만들어줍니다. 이 기능들은 모두 무료 플랜에서도 사용 가능합니다!\"\n                }\n            }\n        ]\n    }\n    </script>",
        "contentSnippet": "✨ 제미나이 딥리서치, GEM 지침으로 날개를 달아보세요! 여러분의 AI 활용 수준을 한 단계 업그레이드할 비밀 병기, GEM 지침을 소개합니다. 간단한 질문만으로는 얻을 수 없었던 전문가 수준의 분석 보고서를 직접 경험해보세요!\n\n\n \n혹시 AI에게 질문했을 때, \"음... 뭔가 알맹이가 빠진 것 같은데?\" 혹은 \"출처가 어디지?\" 하며 고개를 갸웃했던 경험, 다들 한 번쯤 있으시죠? 특히 과제나 보고서처럼 정확하고 깊이 있는 정보가 필요할 때는 더욱 답답함을 느끼셨을 거예요. 최신 정보, 실시간 데이터, 신뢰할 수 있는 출처에 기반한 분석. 이게 바로 우리가 AI에게 진짜 원하는 거잖아요!\n \n최근 ChatGPT, Claude, Gemini 같은 AI 모델들이 앞다투어 '딥리서치' 기능을 선보이는 이유도 바로 여기에 있습니다. 단순히 웹 검색 결과를 나열하는 것을 넘어, 실시간으로 웹을 탐색하고, 최신 논문을 찾고, 신뢰할 수 있는 데이터를 수집해 분석까지 해주는 정말 똑똑한 기능이죠. 하지만 이 강력한 딥리서치 기능도 제대로 활용하지 못하면 무용지물이랍니다. 오늘 제가 그 봉인 해제 방법을 알려드릴게요!  \n딥리서치, 왜 그냥 검색이랑 다를까요?  \n\"딥리서치? 그거 그냥 구글링 잘하는 거 아니야?\" 라고 생각하실 수도 있지만, 전혀 그렇지 않아요! 일반 웹 검색은 단순히 정보를 찾아 보여주는 데 그치지만, 딥리서치는 마치 숙련된 연구원처럼 정보를 탐색, 검증, 요약하고 비판적으로 재구성하는 과정을 거칩니다. 훨씬 더 깊이 있고 신뢰도 높은 결과물을 만들어내는 거죠.\n \n하지만 대부분의 사람들이 AI에게 \"○○에 대해 조사해줘\"처럼 너무 막연하게 질문하는 경우가 많아요. 이렇게 하면 딥리서치 기능을 켜도 AI가 어떤 관점에서, 무엇을 중점적으로 찾아야 할지 몰라 표면적인 정보만 가져오게 됩니다. 실제로 제가 간단한 프롬프트로 딥리서치를 요청했을 때는 일반화된 문장과 출처 불명의 정보만 얻었지만, 제가 개발한 GEM 지침을 활용한 구조화된 프롬프트를 사용했을 때는 실제 수치, 표, 그래프, 논문 인용까지 포함된 증거 기반의 답변을 받을 수 있었어요. 엄청난 차이죠?\n  알아두세요! 딥리서치의 작동 과정\n딥리서치는 다음과 같은 체계적인 단계를 거쳐요:\n의도 파악 및 쿼리 분해: 사용자의 복잡한 요청을 구체적인 질문들로 나눕니다.\n문서 검색: 웹, 학술 데이터베이스, API 등 다양한 소스에서 정보를 찾습니다.\n근거 중심 응답 구성: 수집된 정보를 바탕으로 신뢰할 수 있는 답변을 만듭니다.\n출처 명시 및 비판적 요약: 정보의 출처를 명확히 밝히고, 비판적인 시각에서 요약합니다.\n응답 구조화: 사용자가 이해하기 쉽도록 답변을 체계적으로 정리합니다.\n마법의 열쇠, GEM 지침이란 무엇일까요?  \n이 놀라운 차이를 만드는 것이 바로 제가 개발한 GEM 지침입니다! 여기서 GEM은 Google Gemini에서 제공하는 '사용자 맞춤형 AI 비서' 기능을 의미해요. 즉, 여러분만의 똑똑한 AI 어시스턴트를 만들 수 있는 기능이죠. 물론 이 GEM 지침은 ChatGPT나 Claude 같은 다른 AI 모델에서도 활용할 수 있지만, 제미나이의 GEM 기능과 함께 사용할 때 그 효과가 극대화된답니다.\n \n제미나이가 딥리서치에 특히 강력한 이유는 제미나이의 뛰어난 멀티모달 능력과 강력한 추론 능력 덕분이에요. 텍스트뿐만 아니라 이미지, 오디오, 비디오 등 다양한 형태의 데이터를 이해하고 분석할 수 있어서, 딥리서치를 통해 수집된 방대한 정보를 훨씬 더 심층적으로 파악하고 숨겨진 통찰까지 찾아낼 수 있죠. 게다가 제미나이의 압도적으로 큰 컨텍스트 윈도우(한 번에 기억하고 처리할 수 있는 정보의 양)와 효율적인 토큰 처리 능력은 딥리서치 과정의 효율성을 엄청나게 높여준답니다!  \n \nGEM 지침의 핵심 원리 dissected  \nGEM 지침이 어떻게 작동하는지 궁금하시죠? 크게 세 가지 핵심 원리가 있어요.\n응답 형식 준수: 일반적인 AI처럼 바로 답변을 내놓는 게 아니라, AI가 \"당신의 질문을 이렇게 분석했고, 이런 확장 기법을 적용해서 더 완벽한 프롬프트를 만들 거예요!\" 라고 먼저 설명해줘요. 그리고 나서 완전히 새로운 수준의 확장된 프롬프트를 생성해줍니다.\n확장 프롬프트의 내용 구성: 여기가 진짜 핵심인데요! 여러분의 단순한 질문을 세 가지 차원에서 확장시켜요.\n\n컨텍스트 설정: 시간적 맥락(예: \"2025년 5월 31일 현재\"), 현재 상황, 기술적 배경 등을 명시해서 AI가 최신 데이터를 우선적으로 탐색하도록 유도해요.\n목적 명시: 단순히 \"분석해줘\"가 아니라 \"무엇을 위해, 어떤 관점에서, 어떤 결과물을 원하는지\" 아주 구체적으로 알려주는 거죠.\n데이터 소스 지정: 어떤 정보원을 참고할지 (예: 한국언론진흥재단, 정보통신정책연구원), 어떤 형태의 시각자료가 필요한지까지 콕 집어 요청합니다.\n확장 기법 적용 (다차원 분석 요청): 이게 정말 중요해요! 예를 들어 \"블로그와 유튜브의 사회적 영향력\"이라는 주제라면, GEM 지침은 이 질문을 아래와 같이 여러 영역으로 나누어 심층 분석을 요청해요.\n\n정보 확산 및 여론 형성\n사회/문화적 영향\n경제적 파급효과\n윤리적 및 법적 고려사항\n미래 전망 및 제언\nGEM 지침, 어떻게 등록하고 사용할까요?  \n자, 그럼 이 강력한 GEM 지침을 어떻게 사용하냐고요? 아주 간단해요! 제가 영상 설명란과 고정 댓글에 남겨둔 링크를 통해 제 블로그로 오시면 GEM 지침이 담긴 텍스트 파일을 다운로드하실 수 있어요. 그 다음 Gemini에 접속하셔서 화면 왼쪽 메뉴의 \"GEM 관리자\"로 이동해 다운받은 지침을 등록하시면 끝! 자세한 등록 방법은 이전 영상을 참고해주세요.  \n \n일단 '리서치 전문가 GEM 지침'을 등록하셨다면, 이제 여러분이 할 일은 간단한 주제만 입력하는 거예요. 예를 들어, \"블로그와 유튜브의 사회적 영향력을 분석해줘\" 라고 입력하면, GEM 지침이 알아서 이 주제에 최적화된, 아주 상세하고 구조화된 리서치용 프롬프트를 뚝딱 만들어낼 거예요. 정보 확산 방식부터 경제적 파급 효과, 윤리적 쟁점, 미래 전망까지 다각도로 분석하고, 한국언론진흥재단이나 정보통신정책연구원 같은 신뢰도 높은 데이터 소스를 명시하며, 2020년 이후 최신 트렌드에 집중한다는 시간적 범위까지 설정해주는 식이죠.\n \n이렇게 잘 짜인 프롬프트는 단순한 질문이 아니라, AI에게 어떤 각도에서 얼마나 깊이 있게 분석해야 하는지 명확한 가이드라인을 제공하는 체계적인 연구 설계서나 마찬가지랍니다! 그 결과, 표면적인 정보 나열이 아니라 구체적인 데이터와 사례, 비판적 관점, 미래 전망까지 담긴 완성도 높은 종합 분석 보고서를 받아보실 수 있는 거예요. 프롬프트 설계에 쏟는 시간이 결과물의 질을 완전히 바꿔놓는 마법을 경험하게 되실 겁니다!\n  GEM 지침 활용 꿀팁!\n- 어떤 주제든 GEM 지침에 넣어보세요! 학술 연구, 시장 분석, 기술 동향 보고서 등 무궁무진하게 활용 가능해요.\n- 생성된 확장 프롬프트를 그대로 사용해도 좋지만, 필요에 따라 조금씩 수정해서 사용하면 더욱 맞춤화된 결과를 얻을 수 있어요.\n- AI 기술은 계속 발전하니, GEM 지침도 주기적으로 업데이트하면 좋겠죠? (제 블로그를 주목해주세요!)\n제미나이 딥리서치, 이렇게 강력합니다! ✨\nGEM 지침으로 생성된 상세 프롬프트를 복사해서, 제미나이 채팅창 하단의 '딥리서치' 버튼을 활성화한 후 붙여넣고 실행하면 끝! 잠시 후 제미나이가 리서치 계획을 보여줄 거예요. 이때 \"계획 수정\"을 눌러 세부 항목을 조정하거나, 바로 \"연구 시작\"을 눌러 리서치를 진행할 수 있습니다.\n딥리서치는 주제와 관련된 수많은 출처를 찾아 분석하고 종합하는 과정이 필요해서, 보고서가 완성되기까지 보통 10분 이상 소요될 수 있어요. (프로 모델에서는 더 많은 시간이 걸리기도 하고요!) 하지만 기다린 만큼의 가치가 충분하답니다. 커피 한 잔 하시면서 전문가 수준의 보고서가 탄생하는 과정을 지켜보세요! ☕\n⚠️ 딥리서치 사용 시 참고하세요!\n- 딥리서치는 방대한 정보를 처리하므로 일반적인 답변보다 시간이 더 오래 걸릴 수 있습니다. 인내심을 가져주세요!\n- 무료 버전과 유료 프로 모델 간에는 분석의 깊이나 속도에 차이가 있을 수 있습니다.\n- AI가 생성한 정보는 항상 교차 검증하고 비판적으로 수용하는 자세가 중요합니다.\n완성된 보고서, 시각화로 날개를 달다!  \n자, 드디어 딥리서치가 완료되면 정말 놀라운 보고서가 눈앞에 펼쳐질 거예요! 하지만 여기서 끝이 아니랍니다. 제미나이는 이 보고서를 더욱 빛나게 해줄 강력한 시각화 기능을 제공해요. 심지어 이 기능, 젠스파크 같은 다른 서비스에서는 크레딧을 소모해야 하지만 제미나이에서는 무료 플랜에서도 마음껏 사용할 수 있다는 사실!  \n \n보고서 오른쪽 상단의 '만들기' 버튼을 누르면 웹페이지나 인포그래픽 형태로 바로 변환할 수 있어요. 별도의 복잡한 프롬프트 없이 클릭 몇 번만으로 전문가가 만든 것 같은 시각자료가 뚝딱! 개인적으로는 젠스파크에서 Claude 기반으로 만든 시각화 결과물보다 제미나이 쪽이 더 깔끔하고 뛰어나다는 생각이 들더라고요. (여러분도 한번 비교해보세요!)\n \n물론, 시각화된 자료 외에 보고서 원문도 필요하겠죠? 제미나이 딥리서치 결과물은 텍스트로 복사하거나 구글 DOCS로 바로 내보낼 수 있어서, PDF를 포함한 다양한 형태로 저장하고 활용하기에도 정말 편리하답니다.\n✨ 시각화 마법 살짝 엿보기! (상상도)  ️\n웹페이지로 변신!  \n여러분의 딥리서치 보고서가 항목별로 깔끔하게 정리된 인터랙티브 웹페이지로 재탄생합니다. 스크롤하며 주요 내용을 확인하고, 관련 그래프나 표를 바로 볼 수 있어요. 마치 잘 만들어진 온라인 기사처럼 가독성이 뛰어나답니다!\n한눈에 쏙! 인포그래픽  \n복잡한 데이터와 분석 내용이 핵심만 담긴 세련된 인포그래픽으로 요약됩니다. 다양한 차트와 아이콘, 강조 색상을 활용해 정보 전달력을 극대화하죠. 발표 자료나 SNS 공유용으로도 안성맞춤!\n핵심만 쏙쏙! GEM 지침으로 딥리서치 역량 UP!  \n오늘 정말 많은 이야기를 나눴는데요, 핵심만 다시 한번 정리해볼까요?\n단순 검색은 이제 그만! 깊이 있는 분석과 통찰을 원한다면 딥리서치가 정답입니다.\nGEM 지침으로 AI를 조련하세요! 여러분의 생각을 정확히 반영한 맞춤형 고급 프롬프트를 생성하여 AI의 잠재력을 100% 끌어낼 수 있습니다.\n제미나이의 강력한 기능들을 활용하세요! 멀티모달 분석, 방대한 컨텍스트 처리, 그리고 무료 시각화 기능까지! 제미나이는 딥리서치를 위한 최고의 파트너입니다.\n결과물 활용도 UP! 전문가 수준의 보고서는 물론, 웹페이지, 인포그래픽 등 다양한 형태로 결과물을 활용하여 여러분의 과제나 업무 성과를 극대화하세요.\n이제 여러분도 AI를 단순한 검색 도구가 아닌, 진정한 연구 파트너로 활용하실 수 있을 거예요!\n \n \nGEM 지침: 딥리서치 초격차!\n✨ 맞춤형 프롬프트: GEM 지침이 단순 질문을 전문가급 리서치 설계도로 변환!\n  심층 분석 가능: 다차원 분석 요청으로 AI가 숨겨진 통찰까지 도출!\n⚙️ 리서치 효율 극대화:\n시간 절약 + 정보 품질 UP = 생산성 혁신!\n  전문가급 결과물: A+ 과제, 승진 보고서도 문제 없어요!\nGEM 지침으로 제미나이 딥리서치의 모든 가능성을 경험하세요!\n오늘 여러분께 소개해 드린 GEM 지침은 제미나이의 딥리서치 기능을 단순히 활용하는 수준을 넘어, 완전히 새로운 차원으로 끌어올릴 수 있는 강력한 도구입니다. 이제 단 몇 초 만에 전문가 수준의 프롬프트를 작성하고, 그 결과로 대학 논문이나 회사 보고서에 즉시 활용할 수 있는 고품질 분석 자료를 얻을 수 있게 되었습니다. 특히 다른 AI 서비스에서는 유료로 제공하는 시각화 기능을 제미나이에서는 무료로 사용할 수 있다는 점, 정말 놀랍지 않나요?  \n \n\"AI가 별로야\", \"내가 원하는 결과가 안 나와\" 라고 생각하셨던 분들도 이제는 그런 생각을 버리셔도 좋습니다. 문제는 AI가 아니라 우리가 어떻게 질문하느냐에 있었던 것이니까요! 혹시 지침 적용 과정에서 어려움이 있으시다면 오픈톡방에 남겨주세요. 최대한 빨리 도와드리겠습니다.  \n \n이런 AI 활용 꿀팁들이 더 필요하시다면, 지금 바로 구독과 좋아요 버튼을 꾹! 눌러주세요. 알림까지 켜두시면 앞으로 제가 공개할 더 많은 AI 활용 전략들을 가장 먼저 만나보실 수 있습니다. 여러분의 AI 활용 여정에 제 영상이 도움이 되었으면 좋겠습니다. 그럼 다음 영상에서 더 놀라운 내용으로 찾아뵙겠습니다. 감사합니다!  \n \n자주 묻는 질문 ❓\nQ: GEM 지침은 제미나이에서만 사용할 수 있나요?\nA: 아니요, GEM 지침의 원리는 ChatGPT나 Claude 등 다른 LLM에서도 충분히 활용 가능합니다. 하지만 제미나이의 GEM 기능(사용자 맞춤형 AI 비서)과 결합했을 때 가장 강력한 시너지를 내며, 특히 제미나이의 멀티모달 처리 능력과 방대한 컨텍스트 윈도우는 딥리서치에 최적화되어 있습니다.\nQ: 딥리서치 결과는 항상 100% 정확하고 최신 정보인가요?\nA: AI가 생성하는 정보는 매우 유용하지만, 항상 100% 완벽하다고 할 수는 없습니다. 딥리서치는 최신 정보를 포함하려고 노력하지만, 정보의 편향성이나 오류 가능성은 여전히 존재합니다. 따라서 중요한 결정이나 학술적 목적으로 사용할 경우, 반드시 여러 출처를 통해 교차 검증하고 비판적으로 검토하는 자세가 필요합니다.\nQ: GEM 지침을 직접 만들거나 수정하는 것이 어렵지 않을까요?\nA: 제가 제공하는 GEM 지침 템플릿을 활용하시면 누구나 쉽게 시작할 수 있습니다! 처음에는 제공된 지침을 그대로 사용해보시고, 익숙해지면 자신의 필요에 맞게 특정 데이터 소스를 추가하거나 분석 관점을 수정하는 등 커스터마이징 해보시는 것을 추천합니다. 혹시 어려움이 있으시면 언제든 오픈톡방에 질문해주세요!\nQ: 딥리서치와 일반 웹 검색의 가장 큰 차이점은 무엇인가요?\nA: 가장 큰 차이는 분석의 깊이와 정보의 질입니다. 일반 검색은 키워드에 맞는 정보를 찾아 나열하는 수준이라면, 딥리서치는 여러 정보를 종합하고, 검증하며, 다양한 관점에서 분석하여 새로운 통찰을 도출하려고 합니다. 마치 연구원이 연구를 수행하는 과정과 유사하다고 볼 수 있습니다.\nQ: 제미나이에서 제공하는 시각화 기능에는 어떤 종류가 있나요?\nA: 현재 제미나이는 딥리서치 결과를 바탕으로 웹페이지 형태와 인포그래픽 형태로 시각화하는 기능을 제공합니다. 웹페이지는 보고서 내용을 구조적으로 보여주며, 인포그래픽은 핵심 정보를 차트나 그림으로 요약하여 한눈에 파악하기 쉽게 만들어줍니다. 이 기능들은 모두 무료 플랜에서도 사용 가능합니다!\nGEM 무료 다운로드❓\n반응형\n\n    \n    (adsbygoogle = window.adsbygoogle || []).push({});\n  \n\n    \n\n    \nGemini를 위한 딥리서치 확장 프롬프트 생성 최적화 지침.zip\n0.00MB\n\n\n \n\n\n\n \n\n    {\n        \"@context\": \"https://schema.org\",\n        \"@type\": \"FAQPage\",\n        \"mainEntity\": [\n            {\n                \"@type\": \"Question\",\n                \"name\": \"GEM 지침은 제미나이에서만 사용할 수 있나요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  아니요, GEM 지침의 원리는 ChatGPT나 Claude 등 다른 LLM에서도 충분히 활용 가능합니다. 하지만 제미나이의 GEM 기능(사용자 맞춤형 AI 비서)과 결합했을 때 가장 강력한 시너지를 내며, 특히 제미나이의 멀티모달 처리 능력과 방대한 컨텍스트 윈도우는 딥리서치에 최적화되어 있습니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"딥리서치 결과는 항상 100% 정확하고 최신 정보인가요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  AI가 생성하는 정보는 매우 유용하지만, 항상 100% 완벽하다고 할 수는 없습니다. 딥리서치는 최신 정보를 포함하려고 노력하지만, 정보의 편향성이나 오류 가능성은 여전히 존재합니다. 따라서 중요한 결정이나 학술적 목적으로 사용할 경우, 반드시 여러 출처를 통해 교차 검증하고 비판적으로 검토하는 자세가 필요합니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"GEM 지침을 직접 만들거나 수정하는 것이 어렵지 않을까요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  제가 제공하는 GEM 지침 템플릿을 활용하시면 누구나 쉽게 시작할 수 있습니다! 처음에는 제공된 지침을 그대로 사용해보시고, 익숙해지면 자신의 필요에 맞게 특정 데이터 소스를 추가하거나 분석 관점을 수정하는 등 커스터마이징 해보시는 것을 추천합니다. 혹시 어려움이 있으시면 언제든 오픈톡방에 질문해주세요!\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"딥리서치와 일반 웹 검색의 가장 큰 차이점은 무엇인가요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  가장 큰 차이는 분석의 깊이와 정보의 질입니다. 일반 검색은 키워드에 맞는 정보를 찾아 나열하는 수준이라면, 딥리서치는 여러 정보를 종합하고, 검증하며, 다양한 관점에서 분석하여 새로운 통찰을 도출하려고 합니다. 마치 연구원이 연구를 수행하는 과정과 유사하다고 볼 수 있습니다.\"\n                }\n            },\n            {\n                \"@type\": \"Question\",\n                \"name\": \"제미나이에서 제공하는 시각화 기능에는 어떤 종류가 있나요?\",\n                \"acceptedAnswer\": {\n                    \"@type\": \"Answer\",\n                    \"text\": \"  현재 제미나이는 딥리서치 결과를 바탕으로 웹페이지 형태와 인포그래픽 형태로 시각화하는 기능을 제공합니다. 웹페이지는 보고서 내용을 구조적으로 보여주며, 인포그래픽은 핵심 정보를 차트나 그림으로 요약하여 한눈에 파악하기 쉽게 만들어줍니다. 이 기능들은 모두 무료 플랜에서도 사용 가능합니다!\"\n                }\n            }\n        ]\n    }",
        "guid": "http://muzbox.tistory.com/483602",
        "categories": [
          "AI, 미래기술/AI 챗봇 및 지침 무료 배포",
          "ai 리서치",
          "ai 시각화",
          "AI 활용법",
          "gem 지침",
          "구글 제미나이",
          "데이터 분석 ai",
          "보고서 작성 ai",
          "사용자 맞춤형 ai",
          "제미나이 딥리서치",
          "프롬프트 엔지니어링"
        ],
        "isoDate": "2025-06-01T03:43:34.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "(RULIWEB`Д')/",
        "title": "[MULTI] 즐거움 가득한 드퀘의 전설의 숲, 판타지 라이프 i",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2317",
        "pubDate": "Thu, 05 Jun 2025 18:25:23 +0900",
        "author": "(RULIWEB`Д')/",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/25/06/05/1973f68592d4c329e.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2025-06-05T09:25:23.000Z"
      },
      {
        "creator": "［RULIWEB］",
        "title": "[MOBILE] 그래 퍼드는 원래 재미있는 게임이었지, 퍼즐앤드래곤 제로",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2316",
        "pubDate": "Thu, 05 Jun 2025 14:19:53 +0900",
        "author": "［RULIWEB］",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i2.ruliweb.com/thumb/25/06/05/1973e8792c65104c1.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2025-06-05T05:19:53.000Z"
      },
      {
        "creator": "｜RULIWEB｜",
        "title": "악역영애 4컷 만화 - 5화, 등교 시작인데스와~★",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2315",
        "pubDate": "Wed, 04 Jun 2025 19:09:01 +0900",
        "author": "｜RULIWEB｜",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i2.ruliweb.com/thumb/25/06/04/1973a6b125f51ad6b.jpg\">",
        "contentSnippet": "",
        "categories": [
          "웹툰"
        ],
        "isoDate": "2025-06-04T10:09:01.000Z"
      },
      {
        "creator": "「RULIWEB」",
        "title": "[MULTI] 절반만 성공한 실험, 엘든 링: 밤의 통치자",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2314",
        "pubDate": "Wed, 04 Jun 2025 16:12:50 +0900",
        "author": "「RULIWEB」",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i3.ruliweb.com/thumb/25/06/04/19739c82fc44cacdc.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2025-06-04T07:12:50.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "Visual Studio Code 1.98의 AI 기능",
        "link": "https://jacking75.github.io/ai-github_copilot_20250607/",
        "pubDate": "Sat, 07 Jun 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vT_uMzIak_O5zMLJ7gdTbzpo8DRx5tg2bxXUkzN9LnmQ1aW61S2BU5zjoQ3JLMCxpA6Q3Js_24xh_8h/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/ai-github_copilot_20250607/",
        "isoDate": "2025-06-06T15:00:00.000Z"
      },
      {
        "title": "Microsoft, Anthropic과 협력하여 모델 컨텍스트 프로토콜용 공식 C# SDK 개발",
        "link": "https://jacking75.github.io/NET_20250604/",
        "pubDate": "Wed, 04 Jun 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vST2tD5fxYrclBs6TQdQ_iqNiLXaMmWiMUndawnlMTRPMq_gXLdplEdiE0yxYkm2ybyCAvKq2SJ0lTZ/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/NET_20250604/",
        "isoDate": "2025-06-03T15:00:00.000Z"
      },
      {
        "title": "GitHub Copilot의 Visual Studio 자동 문서 댓글 생성 기능 소개",
        "link": "https://jacking75.github.io/ai-github_copilot_20250602/",
        "pubDate": "Mon, 02 Jun 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vQa6SZwBmdzR0s6DZGjkPzv8vvVPZqNErUQiYFr0JaKzXhZgQp7G62W_MYbnNf0a9U3JD0BwUsvK75z/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/ai-github_copilot_20250602/",
        "isoDate": "2025-06-01T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "앱 개발 개척시대",
        "link": "https://jeho.page/essay/2025/06/05/at-the-app-development-race.html",
        "pubDate": "2025-06-05T02:44:00.000Z",
        "author": "김재호",
        "content": "<p>AI 시대에는 개발자가 유리한가?<br />\n디자이너에게 좋은건가? 기획자는? 마케터는?</p>\n\n<p>다 똑같다고 생각합니다. 모두가 같은 출발선.</p>\n\n<p>제가 공부한 모든 컴퓨터 공학 지식의 가치를 0으로 설정했습니다.<br />\n맘이 좀 아프지만 이렇게 생각하니 차라리 편하기도 합니다. (다른 직군도 마찬가지일 겁니다)</p>\n\n<p>서부 개척시대에서 요이땅 하고 땅따먹기를 하러 가는 느낌입니다.<br />\n누구든 먼저 땅에다 깃발을 꼽으면 그 땅을 주었던 시대.<br />\n말 한 마리만으로 달려가던 사람도 있었고 전차를 만들어서 가기도 하고 연합을 하기도 했습니다.<br />\n마냥 좋지만은 않았을 겁니다. 옆에 달려가는 사람들을 죽이기도 하고, 미리 가서 기다리고 있다가 깃발을 꼽는 등 얍삽이가 수두룩했습니다. 그래도 기회의 시대였던 것은 분명합니다.</p>\n\n<p>어쩌면 이게 제 개발자 경력의 마지막은 아닐까?<br />\n나이도 들었고 함께할 연합도 없지만 제가 가진 장점들이 분명히 있을 겁니다.<br />\n이 레이스를 즐겨보려 합니다.😁</p>\n\n<p><img src=\"/assets/img/far_and_away.png\" alt=\"파앤드어웨이\" /></p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2022/09/14/successful-developer.html\">1인 개발자 전성시대</a></li>\n  <li><a href=\"/essay/2024/03/18/surviving-alone.html\">1인 개발이란 전쟁터에서 혼자 살아남는 것</a></li>\n</ul>",
        "contentSnippet": "AI 시대에는 개발자가 유리한가?\n다 똑같다고 생각합니다. 모두가 같은 출발선.\n제가 공부한 모든 컴퓨터 공학 지식의 가치를 0으로 설정했습니다.\n서부 개척시대에서 요이땅 하고 땅따먹기를 하러 가는 느낌입니다.\n어쩌면 이게 제 개발자 경력의 마지막은 아닐까?\n\n\n함께 읽으면 좋은 글:\n1인 개발자 전성시대\n1인 개발이란 전쟁터에서 혼자 살아남는 것",
        "summary": "AI 시대에는 개발자가 유리한가? 디자이너에게 좋은건가? 기획자는? 마케터는?",
        "id": "https://jeho.page/essay/2025/06/05/at-the-app-development-race",
        "isoDate": "2025-06-05T02:44:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "수소 에너지는 3M 과 함께",
        "link": "http://serverdown.tistory.com/1339",
        "pubDate": "Tue, 3 Jun 2025 14:52:25 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1339#entry1339comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">3M - MMM</h2>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=5ZDRfyuvRFE&amp;t=834s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=5ZDRfyuvRFE&amp;t=834s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=5ZDRfyuvRFE\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bYmFtN/hyY05BDJYk/F9fci44O3CXRKc3TEeKGP0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/dVqkK8/hyY48wFYsQ/N3iXEZfKiMgmcmW7BLrdak/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"사하라 사막이 인류가 필요한 에너지의 50배를 생산할 수 있다고?\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/5ZDRfyuvRFE\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">백금 촉매제와</p>\n<p data-ke-size=\"size16\">수소를 담을 수 있는 용기를 개발했다고 합니다.</p>\n<p data-ke-size=\"size16\">이과형을 믿고 매수 하시면 되겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1577\" data-origin-height=\"509\"><span data-url=\"https://blog.kakaocdn.net/dn/pCLTG/btsOmulWXia/95kOsmVLMwMkhMbK3O9yY1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/pCLTG/btsOmulWXia/95kOsmVLMwMkhMbK3O9yY1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/pCLTG/btsOmulWXia/95kOsmVLMwMkhMbK3O9yY1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpCLTG%2FbtsOmulWXia%2F95kOsmVLMwMkhMbK3O9yY1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1577\" height=\"509\" data-origin-width=\"1577\" data-origin-height=\"509\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">5년치 차트인데</p>\n<p data-ke-size=\"size16\">중간에 빠진건 미군 기마개 소송 이슈 때문에 빠졌습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">불륨에너지 - BE</h2>\n<p data-ke-size=\"size16\">지금은 수소가 돈이 안되서 가스 발전으로 전환했지만</p>\n<p data-ke-size=\"size16\">수소 한참 개발하고 있었던 회사라 좋을것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">투자전략</h2>\n<p data-ke-size=\"size16\">2030년까진 전자산의 2% 정도로만 사고 그뒤론 물도 타지말고 기다릴 생각입니다.</p>\n<p data-ke-size=\"size16\">트럼프 초반엔 친환경이 원래 안좋기 때문에 이때가 기회인거 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "3M - MMM\n영상: https://www.youtube.com/watch?v=5ZDRfyuvRFE&t=834s\n\n\n\n \n백금 촉매제와\n수소를 담을 수 있는 용기를 개발했다고 합니다.\n이과형을 믿고 매수 하시면 되겠습니다.\n \n\n\n5년치 차트인데\n중간에 빠진건 미군 기마개 소송 이슈 때문에 빠졌습니다.\n \n불륨에너지 - BE\n지금은 수소가 돈이 안되서 가스 발전으로 전환했지만\n수소 한참 개발하고 있었던 회사라 좋을것 같습니다.\n \n투자전략\n2030년까진 전자산의 2% 정도로만 사고 그뒤론 물도 타지말고 기다릴 생각입니다.\n트럼프 초반엔 친환경이 원래 안좋기 때문에 이때가 기회인거 같습니다.",
        "guid": "http://serverdown.tistory.com/1339",
        "categories": [
          "투자",
          "미국투자",
          "수소"
        ],
        "isoDate": "2025-06-03T05:52:25.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "수이 앱토스 MOVE 언어를 배워봅시다.",
        "link": "http://serverdown.tistory.com/1338",
        "pubDate": "Sun, 1 Jun 2025 17:37:46 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1338#entry1338comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1280\" data-origin-height=\"853\"><span data-url=\"https://blog.kakaocdn.net/dn/cWgFun/btsOl1W5lON/VlHlrAgE6MsHVxiJwM2Rc0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/cWgFun/btsOl1W5lON/VlHlrAgE6MsHVxiJwM2Rc0/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/cWgFun/btsOl1W5lON/VlHlrAgE6MsHVxiJwM2Rc0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcWgFun%2FbtsOl1W5lON%2FVlHlrAgE6MsHVxiJwM2Rc0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1280\" height=\"853\" data-origin-width=\"1280\" data-origin-height=\"853\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">배울땐 수이 보다 앱토스가 자료가 더 좋습니다.</p>\n<p data-ke-size=\"size16\">영상도 앱토스 쪽이 많습니다.</p>\n<p data-ke-size=\"size16\">수이는 그냥 유럽이 밀어주는 코인인 느낌이라 더 유명한거 같군요</p>\n<p data-ke-size=\"size16\">그래서 앱토스로 배우는걸 추천드리구요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">아래의 영상 설명이 잘되어있습니다.</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=giUgccl02-4&amp;list=PLLkrq2VBYc1aMSahgDWehzjhEOXJnLG9C&amp;index=1\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=giUgccl02-4&amp;list=PLLkrq2VBYc1aMSahgDWehzjhEOXJnLG9C&amp;index=1</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=giUgccl02-4&amp;list=PLLkrq2VBYc1aMSahgDWehzjhEOXJnLG9C&amp;index=1\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/tcRgV/hyY1eESOfZ/jL1fHj2BZAVgxF53KSqZd1/img.jpg?width=1280&amp;height=720&amp;face=116_134_486_538,https://scrap.kakaocdn.net/dn/Nm4SQ/hyY1gvTpCa/ORuVZkTKo0GD5vYQxNQ6ak/img.jpg?width=1280&amp;height=720&amp;face=116_134_486_538\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Aptos MOVE Smart Contracts - BASICS P1 - Intro &amp; Setup\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/giUgccl02-4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">자동완성 기능이 없는 상대라 배우기 어렵습니다.</p>\n<p data-ke-size=\"size16\">진짜로 매우 ....</p>\n<p data-ke-size=\"size16\">커서에서도 정상적인 코딩을 못해주는 상태입니다.</p>\n<p data-ke-size=\"size16\">언어에 제약도 많구요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그만큼 코인에서 쓰기 좋습니다.</p>\n<p data-ke-size=\"size16\">기능 많아봐야 무한루프 걸다 죽는 일이 많기 때문에 차라리 기능이 없는게 좋습니다.</p>",
        "contentSnippet": "배울땐 수이 보다 앱토스가 자료가 더 좋습니다.\n영상도 앱토스 쪽이 많습니다.\n수이는 그냥 유럽이 밀어주는 코인인 느낌이라 더 유명한거 같군요\n그래서 앱토스로 배우는걸 추천드리구요\n \n아래의 영상 설명이 잘되어있습니다.\n영상: https://www.youtube.com/watch?v=giUgccl02-4&list=PLLkrq2VBYc1aMSahgDWehzjhEOXJnLG9C&index=1\n\n\n\n \n자동완성 기능이 없는 상대라 배우기 어렵습니다.\n진짜로 매우 ....\n커서에서도 정상적인 코딩을 못해주는 상태입니다.\n언어에 제약도 많구요\n \n그만큼 코인에서 쓰기 좋습니다.\n기능 많아봐야 무한루프 걸다 죽는 일이 많기 때문에 차라리 기능이 없는게 좋습니다.",
        "guid": "http://serverdown.tistory.com/1338",
        "categories": [
          "프로그래밍/개발메모",
          "Move",
          "수이",
          "앱토스",
          "코인"
        ],
        "isoDate": "2025-06-01T08:37:46.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": [
      {
        "creator": "Sangkon Han",
        "title": "내 맘대로 위클리 뉴스 - 2025년 21주(2025.05.25 - 2025.05.31)",
        "link": "https://www.sangkon.com/sigmadream_weekly_2025_21/",
        "pubDate": "Sun, 01 Jun 2025 04:39:00 GMT",
        "content:encodedSnippet": "Python\nUnderstanding Random Forest using Python (scikit-learn)\n이 기사는 Random Forest 알고리즘의 기본 개념과 작동 원리를 소개하고, scikit-learn을 활용한 구현 방법을 단계별로 설명합니다.\n결정 트리의 앙상블 방식, 특성 중요도 분석, 하이퍼파라미터 튜닝 등 Random Forest의 핵심 요소들을 상세히 다루고 있으며, 실제 데이터셋을 활용한 예측 모델 구축 과정과 성능 평가 방법을 제시하고 있습니다.\nIntroducing Pyrefly: A new type checker and IDE experience for Python\nMeta에서 개발한 새로운 Python 타입 체커인 Pyrefly를 소개하는 기사입니다.\nPyrefly의 주요 기능인 정적 타입 분석, 실시간 타입 검사, 그리고 기존 타입 체커들과의 차별점을 설명하고 있으며, Python 생태계에 가져올 혁신적인 변화와 개발자들의 생산성 향상에 대한 기대를 제시하고 있습니다.\nMachine Learning Prototyping with DuckDB and scikit-learn\nDuckDB와 scikit-learn을 활용한 머신러닝 프로토타이핑 방법을 소개하는 기사입니다.\nDuckDB의 빠른 데이터 처리 성능과 scikit-learn의 머신러닝 기능을 결합하여 효율적인 데이터 분석 파이프라인을 구축하는 방법을 설명하고 있습니다.\nJavaScript\nConcurrent Rendering\n이 기사는 React의 Concurrent Rendering에 대한 소개입니다.\n해당 기술은 UI 업데이트를 더 효율적으로 처리하기 위한 새로운 렌더링 모델로, 메인 스레드를 차단하지 않고 여러 렌더링 작업을 동시에 처리할 수 있게 해줍니다. 이 기술은 React 18에서 도입되었으며, Suspense와 함께 사용하여 데이터 페칭이나 코드 스플리팅과 같은 비동기 작업을 더 자연스럽게 처리할 수 있게 되었습니다.\nWake up, Remix!\nRemix 프레임워크의 새로운 버전과 향후 로드맵을 소개하는 기사입니다.\n서버 사이드 렌더링과 클라이언트 사이드 하이드레이션의 개선된 성능과 개발자 경험을 강조하고 있으며, 웹 개발 생태계에서의 Remix의 위치와 미래 비전을 제시하고 있습니다.\nOOP\nMicroapps architecture in Swift. Scaling.\nSwift에서 마이크로앱 아키텍처를 구현하는 방법과 확장성에 대해 다루는 이 기사는, 모듈화된 앱 구조를 통해 대규모 iOS 애플리케이션의 유지보수성과 개발 효율성을 향상시키는 전략을 제시하고 있으며, 특히 의존성 주입과 모듈 간 통신 방식을 통해 확장 가능한 앱 아키텍처를 구축하는 방법을 상세히 설명하고 있습니다.\nHow to run SonarQube analysis locally with Docker\nDocker를 사용하여 SonarQube 분석을 로컬 환경에서 실행하는 방법을 소개하는 이 기사는, Docker Compose를 활용한 SonarQube 서버 설정과 프로젝트 분석 실행 과정을 단계별로 설명하고 있으며, 코드 품질 관리와 정적 분석을 위한 SonarQube의 활용 방안을 제시하고 있습니다.\nTransforming an image into a table with Windows OCR\nWindows OCR을 활용하여 이미지를 테이블로 변환하는 방법을 소개하는 이 기사는, OCR 기술의 기본 원리와 Windows의 OCR API 활용 방법을 설명하고 있으며, 실제 구현 과정에서 발생할 수 있는 문제점들과 그 해결 방안을 제시하고 있습니다.",
        "dc:creator": "Sangkon Han",
        "content": "<h2 id=\"python\">Python</h2>\n<ul>\n<li>\n<p><a href=\"https://towardsdatascience.com/understanding-random-forest-using-python-scikit-learn/\">Understanding Random Forest using Python (scikit-learn)</a></p>\n<ul>\n<li>&#xC774; &#xAE30;&#xC0AC;&#xB294; Random Forest &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC758; &#xAE30;&#xBCF8; &#xAC1C;&#xB150;&#xACFC; &#xC791;&#xB3D9; &#xC6D0;&#xB9AC;&#xB97C; &#xC18C;&#xAC1C;&#xD558;&#xACE0;, scikit-learn&#xC744; &#xD65C;&#xC6A9;&#xD55C; &#xAD6C;&#xD604; &#xBC29;&#xBC95;&#xC744; &#xB2E8;&#xACC4;&#xBCC4;&#xB85C; &#xC124;&#xBA85;&#xD569;&#xB2C8;</li></ul></li></ul>",
        "contentSnippet": "Python\nUnderstanding Random Forest using Python (scikit-learn)\n이 기사는 Random Forest 알고리즘의 기본 개념과 작동 원리를 소개하고, scikit-learn을 활용한 구현 방법을 단계별로 설명합니",
        "guid": "6843c1c35ab4f192c4bcea4c",
        "isoDate": "2025-06-01T04:39:00.000Z"
      }
    ]
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "코드 품질 개선 기법 14편: 책임을 부여하는 오직 하나의 책임",
        "link": "https://techblog.lycorp.co.jp/ko/techniques-for-improving-code-quality-14",
        "pubDate": "Wed, 04 Jun 2025 02:00:00 GMT",
        "content": "이 글은 2024년 2월 22일에 일본어로 먼저 발행된 기사를 번역한 글입니다.안녕하세요. 커뮤니케이션 앱 LINE의 모바일 클라이언트를 개발하고 있는 Ishikawa입니다.저희 ...",
        "contentSnippet": "이 글은 2024년 2월 22일에 일본어로 먼저 발행된 기사를 번역한 글입니다.안녕하세요. 커뮤니케이션 앱 LINE의 모바일 클라이언트를 개발하고 있는 Ishikawa입니다.저희 ...",
        "guid": "https://techblog.lycorp.co.jp/ko/techniques-for-improving-code-quality-14",
        "isoDate": "2025-06-04T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": [
      {
        "creator": "호돌맨",
        "title": "쿠팡을 이용한 결과",
        "link": "https://hodolman.tistory.com/76",
        "pubDate": "Sun, 1 Jun 2025 23:39:39 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/76#entry76comment",
        "content": "<div style=\"background-color: #ffffff; color: #080809; text-align: start;\">\n<div style=\"text-align: start;\">쿠팡에서의 제품 구입 패턴을 바꿔야겠다.</div>\n<div style=\"text-align: start;\">와우회원을 탈퇴하거나 네이버 쇼핑과 잘 믹스 해야겠다.</div>\n<div style=\"text-align: start;\">이유는 이렇다.</div>\n</div>\n<div style=\"background-color: #ffffff; color: #080809; text-align: start;\">\n<div style=\"text-align: start;\">- 저품질, 불만족스러운 제품을 많이 사게 됐다. 리뷰를 꼼꼼히 보고 샀지만, 쉽게 망가지거나 금방 해져버리는 물건들이 많았다. 흔히 말하는 &lsquo;불만족-알리택갈이&rsquo; 제품의 구매 비중이 점점 늘어났다는 얘기다. 특히 생활용품에서 이런 불만족이 컸다. 쿠팡이 그런 제품을 일부러 권한 건 아니지만, 문방구 앞 달고나처럼 달콤한 유혹을 뿌리칠 수 없었다.</div>\n</div>\n<div style=\"background-color: #ffffff; color: #080809; text-align: start;\">\n<div style=\"text-align: start;\">- <span style=\"text-align: inherit;\"></span>로켓배송은 사실 필요가 없었다. 구입 이력을 보니 &lsquo;꼭 오늘, 내일 필요해!&rsquo;라는 제품은 하나도 없었다. 당일이나 하루 만에 도착하는 배송이 편리하다는 착각에 빠져 있었던 것이다. 쾌락과 편리함의 경계를 제대로 구분하지 못한 탓이 크다.</div>\n</div>\n<div style=\"background-color: #ffffff; color: #080809; text-align: start;\">\n<div style=\"text-align: start;\">- 내 기준에 맞는 제품은 대부분 로켓배송이 아니거나, 가격에서 이점이 없다.</div>\n</div>\n<div style=\"background-color: #ffffff; color: #080809; text-align: start;\">\n<div style=\"text-align: start;\">- 쿠팡플레이는 애초에 보지 않는다.</div>\n</div>",
        "contentSnippet": "쿠팡에서의 제품 구입 패턴을 바꿔야겠다.\n와우회원을 탈퇴하거나 네이버 쇼핑과 잘 믹스 해야겠다.\n이유는 이렇다.\n- 저품질, 불만족스러운 제품을 많이 사게 됐다. 리뷰를 꼼꼼히 보고 샀지만, 쉽게 망가지거나 금방 해져버리는 물건들이 많았다. 흔히 말하는 ‘불만족-알리택갈이’ 제품의 구매 비중이 점점 늘어났다는 얘기다. 특히 생활용품에서 이런 불만족이 컸다. 쿠팡이 그런 제품을 일부러 권한 건 아니지만, 문방구 앞 달고나처럼 달콤한 유혹을 뿌리칠 수 없었다.\n- 로켓배송은 사실 필요가 없었다. 구입 이력을 보니 ‘꼭 오늘, 내일 필요해!’라는 제품은 하나도 없었다. 당일이나 하루 만에 도착하는 배송이 편리하다는 착각에 빠져 있었던 것이다. 쾌락과 편리함의 경계를 제대로 구분하지 못한 탓이 크다.\n- 내 기준에 맞는 제품은 대부분 로켓배송이 아니거나, 가격에서 이점이 없다.\n- 쿠팡플레이는 애초에 보지 않는다.",
        "guid": "https://hodolman.tistory.com/76",
        "categories": [
          "우당탕탕 대모험"
        ],
        "isoDate": "2025-06-01T14:39:39.000Z"
      }
    ]
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "세상에서 가장 외로운 싸움",
        "link": "https://www.thestartupbible.com/2025/06/fighting-the-loneliest-fight.html",
        "pubDate": "Wed, 04 Jun 2025 21:27:00 +0000",
        "content:encodedSnippet": "세상에서 가장 외로운 직업은 무엇일까? 내가 전 세계의 모든 직업을 알진 못하지만, 내가 아는 한, 세상에서 가장 외로운 직업은 창업가이고, 이들은 세상에서 가장 외로운 전투싸움을 하고 있다. 전투라고 썼다가 지운 이유는, 그래도 같이 싸워주는 부대가 있어서 어느 정도는 쪽수가 맞아야지 전투라고 할 텐데, 대부분의 창업가들은 온 세상을 상대로 혼자 외롭게 싸우기 때문에 이건 싸움이라고 해야 할 것 같다.\n안쓰럽지만, 대부분의 창업가 주변 지인들은 이들을 믿지 않고, 이들이 하는 것도 믿지 않는다. 실은, 이 글을 읽고 있는 분 중 대단하게 큰 스타트업을 만든 분들이 아니라면 – 즉, 이 글을 읽는 대다수 – 당신들이 하는 일을 당신들 친구도 믿지 않고, 심지어는 가족들도 믿지 않을 것이다. 세상에서 이렇게 외로운 직업이 어디 있을까? 그리고 매일 온 세상을 상대로 외롭게 싸워야 하는 이런 직업이 어디 있을까?\n얼마 전에 이런 외로운 싸움을 5년째 하고 있는 창업가를 만났다. 그리고 며칠 후에 10년 넘게 큰 성장 없이 사업을 하는 분을 만났다. 이분들과 조금 더 깊게 이야기해 보니, 내가 생각했던 것보다 훨씬 더 힘든 것 같다. 처음 시작할 땐, 자신을 불신하고 무시했던 사람들을 엿먹이고 싶었고, 그들이 틀렸다는 걸 증명해 주고 싶었다고 한다. 세월이 흘렀고, 5년, 10년이라는 시간이 지나면서 어느 순간 스스로에게도 의구심이 생기기 시작하면서, 세상 그 누구도 안 믿어도 굳게 자신을 믿었던 본인에 대한 불신이 생기기 시작했다. 그러면서 나와 세상과의 외로운 싸움이, 어느 순간 나와 나와의 싸움이 되기도 했다고 한다. 그나마 계속 이 힘든 일을 할 수 있던 몇 가지 계기가 있었는데, 그건 가끔, 아주 가끔 본인을 믿어주는 사람들을 만났고 – 직원과 투자자 – 이들과 같이 외로운 싸움을 하고 있기 때문이라고 한다.\n이런 말 하면 좀 그렇지만, 솔직히 좀 안쓰럽고 짠하고, 미련하다는 생각이 들었지만, 결국 이들을 존경하고 응원하지 않을 수가 없다. 이 세상에는 하는 사람과 안 하는 사람, 이렇게 두 부류의 사람이 있는데, 이들은 하는 사람들이고, 이들을 비난하는 모든 사람들은 안 하는 사람들이다. 안 하는 사람이 하는 사람을 어떻게 비난할 수 있겠는가. \n오늘도 세상에서 가장 외로운 싸움을 하고 있는 창업가들 파이팅. 결과가 어떨진 모르겠지만, 그래도 당신들은 본인의 믿음으로 삶을 살아가는 인생의 승자들이다.(하지만, 사업에서 승자가 될진 잘 모르겠다.)",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/06/fighting-the-loneliest-fight.html#respond",
        "content": "세상에서 가장 외로운 직업은 무엇일까? 내가 전 세계의 모든 직업을 알진 못하지만, 내가 아는 한, 세상에서 가장 외로운 직업은 창업가이고, 이들은 세상에서 가장 외로운 전투싸움을 하고 있다. 전투라고 썼다가 지운 이유는, 그래도 같이 싸워주는 부대가 있어서 어느 정도는 쪽수가 맞아야지 전투라고 할 텐데, 대부분의 창업가들은 온 세상을 상대로 혼자 외롭게 싸우기 때문에 이건 싸움이라고 해야(...)",
        "contentSnippet": "세상에서 가장 외로운 직업은 무엇일까? 내가 전 세계의 모든 직업을 알진 못하지만, 내가 아는 한, 세상에서 가장 외로운 직업은 창업가이고, 이들은 세상에서 가장 외로운 전투싸움을 하고 있다. 전투라고 썼다가 지운 이유는, 그래도 같이 싸워주는 부대가 있어서 어느 정도는 쪽수가 맞아야지 전투라고 할 텐데, 대부분의 창업가들은 온 세상을 상대로 혼자 외롭게 싸우기 때문에 이건 싸움이라고 해야(...)",
        "guid": "https://www.thestartupbible.com/?p=9460",
        "categories": [
          "Uncategorized",
          "failure",
          "FoundersAtWork",
          "hustle",
          "inspiring"
        ],
        "isoDate": "2025-06-04T21:27:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "누구를 위한 법이고, 누구를 위한 규제인가?",
        "link": "https://www.thestartupbible.com/2025/06/losers-will-be-losers.html",
        "pubDate": "Sun, 01 Jun 2025 21:33:00 +0000",
        "content:encodedSnippet": "우리가 투자한 회사 중 콘택트렌즈 사업을 하는 옵틱라이프라는 곳이 있다. 이 회사는 본인들이 직접 콘택트렌즈를 제조하고, 다른 회사의 제품 또한 유통하고 있는데, 한국은 콘택트렌즈의 온라인 판매가 법으로 금지되어 있어서, 옵틱라이프에서 고객이 원하는 렌즈에 대한 결제를 하고, 실제 픽업은 전국 가맹점 중 하나에서 한다. 가맹 안경점은 특별한 회비나 수수료는 내지 않고, 옵틱라이프가 구매 건당 이들에게 수수료를 지급한다.\n콘택트렌즈의 온라인 판매가 불법인 이유는 렌즈가 각막에 직접 접촉하는 의료기기로 분류되어서, 잘 못 사용 시 시력 저하나 감염 등의 위험이 있으므로 대면 판매를 통해 사용법 안내와 건강 상태 확인이 필요하다는 것이다. 이 규제의 취지는 잘 이해하지만, 국민 건강을 너무 과하게 강조하는 반면, 소비자의 편의성과 선택권은 너무 과하게 무시한다는 점에서는 반드시 바뀌어야 하는 법이라고 생각한다. 그리고, 이보다 더 불평등하다고 생각하는 점은, 이 법은 국민들의 건강보단, 대한안경사협회라는 특정 단체의 권익을 보호하기 위한 법이라는 것이다. 물론, 이건 내 개인적인 생각일 수도 있지만, 안경사협회 회원 5만여 명을 제외한 다른 사람들은 대부분 나와 비슷한 생각을 하는 걸 보면, 내 생각이 맞는 것 같다.\n어쨌든, 이런 법이 있기 때문에, 온라인으로 더 좋고, 더 다양하고, 더 저렴한 콘택트렌즈를 중간상인 없이 고객에게 직접 판매하려고 하는 스타트업들은 위에서 설명했던, 가맹점에서 렌즈를 픽업하는 복잡한 사업을 하고 있다. 실은, 이 모델을 좋아하는 안경사들도 상당히 많다. 안 그래도 오프라인 안경사의 트래픽과 매출이 점점 더 줄어들고 있는데, 픽업 서비스를 통해서 수수료 매출이 발생하기도 하고, 렌즈를 픽업하기 위해서 매장을 방문하는 고객들은 안경이나 다른 제품들을 구매할 확률이 있기 때문에 지속적인 추가 매출이 발생하기 때문이다. 솔직히 나는 이런 모델은 서로에게 유익한, 상생할 수 있는 비즈니스 모델이라고 생각했다.\n그런데 최근에 안경사협회가 렌즈 픽업 서비스를 하는 스타트업 몇 곳을 의료기사법 위반으로 고발했다. 여기에다 안경사협회 회원사 중 픽업 네트워크에 가맹한 안경원에 내용증명도 보내고, 계속 이 네트워크에 가입해 있으면 안경사 면허정지까지 실시하기로 했다고 한다.\n굳이 이렇게까지 할 필요가 있을까? 안경사협회는 국민 눈 건강을 위한 특단의 조치라고 하는데, 내가 보기엔 이들은 국민 눈 건강 걱정은 별로 안 한다. 그런 사람들이 안경원을 방문할 때마다 더 저렴하고 좋은 제품도 있는데, 무조건 비싼 제품을 불투명한 가격에 판매할 리가 없다. 이들은 국민 눈 건강 때문이 아니라, 쿠팡이 이마트 같은 오프라인 유통업체를 무력화했듯이, 새파란 스타트업에 잠식돼 이들의 렌즈 보관함으로 전락하는 걸 훨씬 더 우려한다. 즉, 오랫동안 스스로 노력도 안 하고, 변화하지 않아도 아주 단단했던 철밥그릇을 빼앗길까 봐 이런 싸움을 하는 것이다.\n여기서 가장 피해를 보는 건, 옵틱라이프와 같은 스타트업이 아니라. 바로 콘택트렌즈가 필요한 국민들이다. 온라인 플랫폼에서 선택하고, 안경원에서 픽업한 렌즈를 착용해서 각막이 손실되거나 눈 건강을 잃었다는 소비자는 거의 없는 것 같은데, 국민 눈 건강을 운운하면서 이런 서비스들을 다 막아버리면, 결국엔 소비자들이 오프라인 안경원에서 한정된 종류의 제품을 훨씬 더 비싼 가격에 구매할 수밖에 없다. 이렇게 되면 이건 안경사협회가 소비자의 권리를 침해한다고 주장할 수도 있는데, 이런 건 이분들이 어떻게 생각하는지 잘 모르겠다.\n전에 타다에 대한 글을 내가 꽤 많이 썼는데, 그때와 비슷한 생각이 든다. 도대체 누구를 위한 법이고, 누구를 위한 규제인지 잘 모르겠다. 이 산업을 자세히 보면, 한국에서 온라인 안경/콘택트렌즈 유니콘이 아직 안 나온 가장 큰 이유는 이런 규제 때문인 것 같은데, 이들도 세월의 흐름을 평생 막을 순 없을 것이다. 시간이 걸리더라도 법이나 규제는 다수의 국민과 소비자들의 편의를 위한 방향으로 수정될 것이고, 결국 법이 바뀌면, 기존 안경사들은 많이 망할 것이다.\n전 세계 그 어떤 나라에서도, 회사나 단체의 해자가 규제라면, 그리고 규제가 그 유일한 진입장벽이라면, 이런 조직들은 오래가지 못하고, 규제가 없어지는 그 순간에 단숨에 쓰러진다. 내가 이들이었다면, 소송에 시간과 에너지 낭비하지 말고, 그냥 자신의 체질 개선에 사활을 걸겠다. 왜냐하면, 소송에 이기든 지든 결국 세상은 바뀔 것이다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/06/losers-will-be-losers.html#comments",
        "content": "우리가 투자한 회사 중 콘택트렌즈 사업을 하는 옵틱라이프라는 곳이 있다. 이 회사는 본인들이 직접 콘택트렌즈를 제조하고, 다른 회사의 제품 또한 유통하고 있는데, 한국은 콘택트렌즈의 온라인 판매가 법으로 금지되어 있어서, 옵틱라이프에서 고객이 원하는 렌즈에 대한 결제를 하고, 실제 픽업은 전국 가맹점 중 하나에서 한다. 가맹 안경점은 특별한 회비나 수수료는 내지 않고, 옵틱라이프가 구매 건당 이들에게 수수료를(...)",
        "contentSnippet": "우리가 투자한 회사 중 콘택트렌즈 사업을 하는 옵틱라이프라는 곳이 있다. 이 회사는 본인들이 직접 콘택트렌즈를 제조하고, 다른 회사의 제품 또한 유통하고 있는데, 한국은 콘택트렌즈의 온라인 판매가 법으로 금지되어 있어서, 옵틱라이프에서 고객이 원하는 렌즈에 대한 결제를 하고, 실제 픽업은 전국 가맹점 중 하나에서 한다. 가맹 안경점은 특별한 회비나 수수료는 내지 않고, 옵틱라이프가 구매 건당 이들에게 수수료를(...)",
        "guid": "https://www.thestartupbible.com/?p=9458",
        "categories": [
          "Uncategorized",
          "B2C",
          "FoundersAtWork",
          "healthcare",
          "internet",
          "korea",
          "regulation",
          "Strong"
        ],
        "isoDate": "2025-06-01T21:33:00.000Z"
      }
    ]
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "대환대출로 신용대출 이자 줄일 수 있어요",
        "link": "https://toss.im/tossfeed/article/tossmoment-11",
        "pubDate": "Thu, 05 Jun 2025 06:31:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}월급은 들어오자마자 썰물처럼 빠져나가는 것 같아요. ‘텅장’이라는 신조어가 괜히 생긴 건 아니겠죠. 월세, 공과금, 식비… 그리고 이자까지. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}다행인 건, 이자 부담만큼은 대환대출을 통해 줄일 수도 있다는 거예요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}대환대출이 뭔가요?\n대환대출, 이름부터 낯설고 어렵습니다. 한자로 ‘대(代)’는 대신한다는 뜻이고, ‘환(換)’은 바꾼다는 뜻이에요. 즉, 지금 이미 가지고 있던 대출을 대신해서 새로운 대출로 바꾸는 것이에요. 쉽게 말해 대출 갈아타기죠. 이름 때문에 생겼던 괜한 벽이 조금은 허물어지죠?\n사실, 예전에는 이런 대출 갈아타기가 쉽진 않았어요. 어디가 더 저렴한지 알아보려면 은행 여러 군데를 직접 돌아다녀야 했고, 서류도 잔뜩 챙겨 다녀야 했기 때문이죠. 대환대출이 복잡하다는 인식은 이때 생겼을지도 몰라요.\n하지만 2023년 5월부터는 완전히 달라졌습니다. 정부가 금리 상승으로 높아지는 금융소비자의 이자 부담을 줄이기 위해 '온라인‧원스톱 대환대출 인프라'를 만들면서, 여러 금융사의 대출 조건을 한 번에 비교할 수 있게 되었거든요. 지금은 앱 하나로 내 대출 정보 불러와 가장 좋은 조건의 대출을 고르고, 원한다면 바로 갈아탈 수 있어요. 여러 은행 지점을 돌아다닐 일도, 복잡한 서류를 준비하는 것도 이제는 필요 없습니다.\n신용대출 갈아타면\n뭐가 좋아질까요?\n대환대출의 가장 좋은 점은 지금보다 낮은 금리로 대출을 받을 수 있다는 것이에요. 예를 들어 2천만 원을 연 10% 이자로 빌렸다면, 1년 동안 내는 이자가 200만 원이에요. 그런데 6%로 갈아타면 이자가 120만 원으로 줄어, 1년에 80만 원을 아낄 수 있어요. 대출금이 크거나 기간이 길수록 그 차이는 더 커져요.\n상환 기간을 조정하는 데에도 유용해요. 상환 기간이 짧아 매달 부담이 큰 분들은, 대환대출로 상환 기간을 늘려서 월 납입액을 줄일 수 있죠. 이렇게 하면 생활비에 숨통이 트이고, 혹시 모를 연체 위험도 낮아져요.\n이런 부분들이 차곡차곡 쌓이면 신용점수에도 긍정적인 영향을 줘요. 연체 이력이 사라지고, 상환 능력이 높아졌다고 평가받아 나중에 또 다른 금융상품을 찾을 때 유리해질 수 있죠. 신용대출을 갈아타는 건 단순히 대출 하나 바꾸는 일이 아니라, 나의 신용을 지키는 일이라고 할 수 있어요.\n신용대출 갈아타기 전,\n꼼꼼하게 확인해야 할 것들\n① 중도상환수수료: 약속된 대출 기간보다 빨리 갚으면 ‘중도상환수수료’를 내야 할 때가 있어요. 대출을 갈아탈 때도 이 수수료가 얼마나 드는지 꼭 확인해야 해요. 그래도 새로 받는 대출 이자가 충분히 낮다면, 수수료를 내고도 갈아타는 게 더 유리할 수 있어요.\n② 인지세: 대출을 받으면 ‘인지세’라는 세금을 국가에 내야 해요. 인지세는 법적으로 효력이 있는 증서를 작성할 때 발생하는 세금이죠. 보통은 은행과 내가 반반씩 나눠서 내는데요. 5천만 원 이하는 세금이 없지만, 1억 원 이하일 땐 7만 원, 10억 원 이하는 15만 원, 10억 원을 넘으면 35만 원이 들어가요. 그래서 대출을 갈아탈 때 본인의 대출 규모에 따라 이 비용까지 계산해봐야 해요.\n③ 금리: 현재 금리 수준도 꼭 확인해야 해요. 예전보다 지금 금리가 낮으면 대환대출로 이자 부담을 줄일 수 있어요. 하지만 금리가 오히려 올랐다면, 대환대출이 도움이 될지 꼼꼼히 따져봐야 해요.\n④ 대출 기간: 새로 받는 대출의 상환 기간도 체크해야 해요. 대출을 갈아타면서 상환 기간이 늘어난다면, 이자가 줄어들어도 결국 내야 할 총이자액은 커질 수 있어요. 짧은 기간에 갚는 게 가능한지, 아니면 기간이 길어도 매달 부담을 줄이는 게 나은지 내 상황에 맞게 정해야 해요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n토스에서\n가장 쉽고 빠르게\n토스에서는 내가 가진 대출 정보를 정확하게 불러와서, 토스와 제휴된 금융사들이 제안하는 대출 조건을 한눈에 보여줘요. 이자율, 상환 기간, 월 납입액까지 비교해보고, 원하는 조건이 있다면 앱에서 대출을 갈아탈 수 있어요. 중도상환수수료까지 포함해서 실제로 내는 이자 부담액도 알려드려요.\n갈아타기를 미루는 사이에도 이자는 계속 쌓여요. 남은 대출 기간이 길다면 나에게 더 좋은 조건의 대출로 빠르게 바꿀수록 유리해요. 신용대출 갈아타기를 여러 번 조회해도 신용점수에는 전혀 영향이 없으니, 조회하는 것을 주저할 이유는 없습니다. 아래 버튼을 눌러 내가 갈아탈 수 있는 신용대출 상품이 있는지 확인해보세요. 지금보다 더 나은 조건이 기다리고 있을지도 몰라요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 윤동해 Graphic 조수희 이제현\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}✽준법감시인 심의완료(2025-284호)",
        "content": "이자 부담 줄일 수 있는 신용대출 갈아타기",
        "contentSnippet": "이자 부담 줄일 수 있는 신용대출 갈아타기",
        "guid": "https://toss.im/tossfeed/article/tossmoment-11",
        "isoDate": "2025-06-05T06:31:00.000Z"
      },
      {
        "title": "농구를 넘어 글로벌 콘텐츠 플랫폼이 된 NBA",
        "link": "https://toss.im/tossfeed/article/moneyball-3",
        "pubDate": "Thu, 05 Jun 2025 06:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}NBA 포스트시즌*이 한창입니다. 이번 시즌에는 창단 이후 처음으로 우승을 노리는 오클라호마시티 썬더의 활약으로 팬들의 관심이 더욱 뜨겁습니다. NBA가 요즘 이렇게 주목받는 건 이제 농구 리그를 넘어, 전 세계를 무대로 하는 콘텐츠 플랫폼으로 자리 잡았기 때문이에요.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}* 포스트시즌: 정규 시즌이 끝난 뒤 열리는 모든 경기\nNBA에서 최근 눈에 띄는 건 미국 국적이 아닌 선수들의 활약이 눈부시다는 점입니다. 2018-19 시즌부터 올 시즌까지 7시즌 연속으로 유럽, 아프리카, 캐나다 출신 선수들이 정규리그 MVP를 차지했거든요. 이런 모습은 NBA가 글로벌 콘텐츠로 성장하고 있다는 걸 잘 보여줍니다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n20-21, 21-22, 23-24 시즌 MVP를 차지한 세르비아 출신 니콜라 요키치 / 사진: 로이터\n산업적으로도 NBA는 발 빠르게 시대를 읽고 있어요. 한때는 전통적인 방식에 얽매인 리그라는 평가를 받았지만, 이제는 OTT와 소셜 미디어를 가장 잘 활용하는 스포츠 리그로 평가받고 있죠. 어떻게 NBA는 이런 변화를 이끌어냈을까요?\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}실리콘밸리와 월스트리트 출신\n구단주들이 만든 변화\nNBA는 2010년대 이후 완전히 새로운 시대를 맞았어요. 과거에는 지역 기업가들이 농구팀의 구단주가 된다는 건 연고지의 명예를 드러내는 상징으로 여겨졌어요. 그런데 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}최근에는 실리콘밸리와 월스트리트 출신의 기술·금융 전문가들이 구단을 사들이고 있어요. LA 클리퍼스의 구단주 스티브 발머처럼 기술과 데이터, 그리고 콘텐츠 비즈니스에 강점을 가진 이들이 NBA를 이끌고 있죠.\n\n실리콘밸리나 월스트리트 출신 구단주들이 NBA에 집중적으로 나타난 이유는 이들이 젊은 시절 마이클 조던을 중심으로 한 NBA 황금시대를 경험했기 때문입니다. 기본적으로, 농구에 대한 애정이 깊은 것이죠.\n물론 그렇다고 단순히 농구만 좋아해서 NBA팀의 구단주가 된 것은 아닙니다. MLB나 NFL은 경기에 뛰는 선수의 수가 많아서 승리를 위한 변수가 상대적으로 NBA보다 더 많습니다. 하지만 농구는 5명이 뛰기 때문에 한두 명의 스타급 선수들이 가지는 영향력이 매우 크죠. 기술·금융 전문가들에게 NBA는 데이터를 활용한 경기 전략과 적절한 선수 트레이드를 통한 빠른 전력 극대화에 안성맞춤이었던 리그였던 셈입니다.\n그리고 농구는 축구 다음으로 글로벌 확장성이 큰 스포츠라는 점도 중요했어요. 야구나 미식축구처럼 특정 지역에서만 사랑받는 종목과는 달리, 북미, 유럽, 아시아 어디서나 큰 관심을 받으니까요. 이런 점에서 NBA는 글로벌 시장을 중시하는 실리콘밸리와 월스트리트 사람들에게 매력적인 투자처였어요.\n\n구단주의 배경이 바뀌면서 NBA의 매출 변화도 확실히 드러나요. 2009-10 시즌에 5조 2,500억 원이었던 매출이 최근 시즌에는 15조 6,000억 원을 넘었습니다. 데이터 기반의 전략과 빠른 실험으로 이런 성장을 만들어냈죠. 유니폼 광고, 트레이드 활성화, 3점슛 중심 전술 혁신 같은 것들이 대표적이에요.\nNBA의 혁신에는 유대계 구단주들의 역할도 눈에 띕니다. 실제로 최근 10년 동안 무려 8번이나 유대인 구단주가 투자한 팀이 우승을 차지했을 정도입니다. 여기에 현 NBA 총재인 아담 실버도 유대인입니다. 그래서 유대인이 NBA의 혁신을 주도했다는 얘기가 나오고 있죠.\n유대인들은 전통적으로 교육과 상업, 금융 분야에서 강한 경쟁력을 키워왔어요. 미국 전체 인구의 2.4%에 불과하지만, 미국 억만장자의 40%가 유대계라는 통계가 있을 정도로 경제적 영향력이 큽니다. 데이터를 중시하고 네트워크를 활용하는 이들의 경영 방식은 NBA를 단순한 ‘경기장을 보유한 스포츠팀’이 아니라 글로벌 IP와 데이터, 콘텐츠 비즈니스로 확장할 수 있는 플랫폼으로 이끌었습니다.\n\n혁신을 이끌고 있는 NBA 총재 아담 실버 / 사진: 로이터\n팬들이 원한다면\n규칙도 바꾸는 유연함\nNBA는 팬들이 더 재미있게 경기를 볼 수 있다면 규칙도 기꺼이 바꿔왔어요. 경기가 즐거워야 팬이 늘고, 팬이 많아진다면 수익은 덩달아 따라오기 때문이죠.\n그래서 핸드체킹 금지(2004-05 시즌)로 외곽 공격수를 자유롭게 풀어주고, 수비 3초 규칙(2001-02 시즌)으로 골밑 수비를 약화해 코트를 넓혔습니다. 공격 리바운드 후 샷 클락은 14초로 단축(2018-19 시즌)해 경기 속도를 높였고, 3점슛 시도가 폭발적으로 늘었습니다. 그 결과, 2010년대 초반만 해도 팀당 경기당 3점슛 시도는 18회 수준이었지만 지금은 37회를 넘었어요.\n\nNBA 3점슛 전술의 아이콘, 스테판 커리 / 사진: 로이터\n2021년에는 7~10위 팀들이 플레이오프*를 놓고 토너먼트를 벌이는 ‘플레이 인 토너먼트’도 생겼어요. 정규 시즌 마지막까지 긴장감을 유지할 수 있도록 한 거죠. 2023-24 시즌부터는 정규 시즌 중간에 ‘인시즌 토너먼트’까지 열어 유럽 축구처럼 또 다른 트로피 경쟁을 만들었어요. NBA는 경기 규칙을 단순한 룰이 아니라, 팬들이 더 몰입할 수 있도록 하는 콘텐츠 설계의 일부로 보고 있어요.\n* 플레이오프: 포스트 시즌 중, 정규 시즌 상위 팀들이 우승을 놓고 겨루는 토너먼트 경기\n넷플릭스, 디즈니 버금가는\n콘텐츠 왕국을 꿈꾸는 NBA\nNBA는 경기 중계뿐만 아니라 경기장 안팎에서 일어나는 모든 순간을 콘텐츠로 만듭니다. 감독의 작전회의, 벤치에서의 리액션, 선수들끼리의 대화까지도 NBA 리그패스*에서 그대로 볼 수 있죠. ESPN과 TNT 같은 중계 파트너사도 이런 영상들을 공유받아서 프리·포스트쇼나 SNS 숏폼 영상으로 가공해 더 많은 팬을 붙잡고 있어요.\n* NBA 리그패스: NBA에서 직접 운영하는 OTT 서비스\n라커룸 비하인드 영상, 팬 인터뷰, 팀별 다큐멘터리 시리즈까지도 만들어내요. 마이클 조던이 시카고 불스에서 활약하던 이야기를 다룬 넷플릭스 다큐멘터리 <The Last Dance>처럼 농구 경기 너머의 이야기를 ‘팔리는 IP’로 키워가는 거죠. 요즘 팬들은 단순히 누가 이겼는지만이 아니라, 누가 어떤 말을 했고 어떤 표정을 지었는지까지도 궁금해합니다. NBA는 이 모든 순간을 이야기로 가공해서 2차 콘텐츠로 풀어냅니다.\n\n선수들의 하이라이트 영상을 NFT 형태로 거래하며 보유할 수 있는 NBA Top Shot\n최근에는 VR과 NFT 같은 새로운 기술도 적극적으로 도입하고 있어요. 리그패스에 VR 중계 기술을 도입해 마치 경기장에 직접 있는 것처럼 몰입감을 높이고, NBA Top Shot 같은 NFT 플랫폼을 통해 명장면을 디지털 소유권으로 만들어 팔고 있죠. 팬들은 이걸 사고팔며, NBA와의 관계를 데이터와 디지털 자산 차원에서 더 깊게 쌓아가고 있어요. 특히 NBA Top Shot의 누적 거래액은 1조 4,000억 원을 돌파할 정도로 규모가 커졌습니다.\n이제 NBA는 단순히 농구 경기만이 아니라, 이야기와 데이터, 디지털 소유권까지 아우르는 거대한 비즈니스로 성장하고 있습니다.\nSNS 영향력\n1위 스포츠 리그, NBA\nNBA는 소셜 미디어에서도 압도적인 영향력을 자랑합니다. 디지털 미디어 분석업체 퀄트릭스가 발표한 자료에 따르면, 4대 소셜 미디어에서 NBA의 팔로워는 2억 600만 명을 넘습니다. 이는 NASA와 넷플릭스보다 많은 수치이며, UFC와 NFL 같은 다른 스포츠 리그들과 비교해도 큰 격차를 보입니다.\n\n이런 영향력은 NBA가 팬들이 자유롭게 콘텐츠를 만들어내도록 허용했기 때문에 가능했습니다. 아담 실버 NBA 총재는 “팬들이 만드는 하이라이트는 스낵이에요. 스낵을 먹으면 결국 정식 식사(정규 중계)를 찾게 됩니다.”라고 말한 바 있죠. 실제로 NBA는 인플루언서나 팬 크리에이터들을 주요 이벤트에 초대해, 그들이 자신만의 방식으로 NBA를 해석하고 전파하게끔 도와주고 있어요.\n다른 프로 스포츠 리그들은 팬들이 올린 경기 영상을 저작권 침해로 규제하는 경우가 많아요. 하지만 NBA는 오히려 팬 콘텐츠를 새로운 성장 동력으로 보고 있죠. 구단들도 소셜미디어 전담팀을 두고 선수들의 훈련 영상이나 개인적인 순간을 SNS에 공유하고 있어요.\n보스턴 셀틱스는 동영상 하이라이트를 제공하면서 선수들의 움직임을 농구 작전 판처럼 볼 수 있는 컨텐츠도 만들고, 경기 후에 스타 선수가 어떻게 컨디션을 회복하는지에 대한 개인적인 영상도 포스팅하며 큰 인기를 누리고 있습니다. 이 덕분에 셀틱스의 인스타그램 팔로워는 이미 700만 명을 넘었습니다. 팬들이 소비하는 콘텐츠를 통해 나오는 광고 수입은 보스턴 셀틱스 구단의 또 다른 비즈니스 모델이 되고 있죠.\nNBA가 오랜 인연을 뒤로 하고\n아마존과 새로 손 잡은 이유\nNBA의 급격한 매출 성장에는 중계권 계약도 중요한 역할을 했습니다. 2002-2003 시즌을 앞두고 NBA는 6시즌 동안 5조 5000억 원에 달하는 중계권료 계약을 체결했었는데, 2016-17 시즌부터 올 시즌까지 9시즌 동안은 33조 원이 넘는 중계권료를 받았습니다. 이를 한 시즌 평균으로 환산하면 3조 6000억 원이 넘는 거액입니다. 다음 시즌부터는 한 시즌에만 9조 5,000억 원이 넘는 중계권 수익을 올릴 전망입니다. 직전 중계권 계약에 비해 금액이 3배 가까이 늘어난 규모죠.\n흥미로운 건, NBA가 35년 동안 중계권을 보유했던 TNT 스포츠 대신 아마존을 새로운 중계 파트너로 선택했다는 사실입니다. TNT 스포츠가 제시한 금액은 아마존과 동일했음에도 불구하고, NBA는 아마존의 손을 들어주었습니다. 왜 NBA는 아마존을 새로운 중계 파트너로 선정했을까요?\n\nNBA는 이제 케이블 TV 중심의 중계가 시대에 뒤처진 방식이라는 점을 잘 알고 있었습니다. 미국 내 케이블 TV 가입 가구는 계속 줄어들고 있으며, OTT가 대세가 되고 있기 때문이죠. 게다가 OTT 서비스는 글로벌 확장력이 뛰어납니다. NBA는 이미 자체 스트리밍 서비스인 리그패스를 운영하고 있지만, 아마존 같은 글로벌 OTT 파트너를 통해 리그의 해외 팬을 더 효과적으로 확보할 수 있다고 판단했습니다.\n무엇보다 가장 중요한 이유는 바로 고객 데이터에 있습니다. 기존 방송사는 단순히 시청자 수만 알려줬지만, 아마존은 “뉴욕에 사는 21세 남성이 스테픈 커리 경기를 23분 시청했고, 나이키 구매율이 평균보다 25% 높다” 같은 데이터를 NBA에 전달할 수 있습니다. NBA는 이런 데이터를 스폰서나 파트너사에 다시 팔아 새로운 수익을 만들어내고 있어요.\n이제 NBA는 단순히 농구 경기만 보여주는 무대가 아닙니다. 경기장에서 펼쳐지는 모든 순간을 이야기로 만들고, 그 이야기를 데이터로 바꿔 새로운 수익을 창출하는 글로벌 콘텐츠 플랫폼이죠. NBA가 만드는 이 흐름은 모든 스포츠 팬과 산업계에 새로운 영감을 주고 있습니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 윤동해 Graphic 이은호 윤자영",
        "content": "데이터와 콘텐츠로 진화하는 스포츠 리그",
        "contentSnippet": "데이터와 콘텐츠로 진화하는 스포츠 리그",
        "guid": "https://toss.im/tossfeed/article/moneyball-3",
        "isoDate": "2025-06-05T06:00:00.000Z"
      },
      {
        "title": "토스페이 혜택, 사용법 총정리 2025년 6월",
        "link": "https://toss.im/tossfeed/article/tosspay-2025-02",
        "pubDate": "Wed, 04 Jun 2025 07:05:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}3분만 시간 내면 \n✔️ 토스페이에 카드나 계좌를 등록하고 결제하는 방법을 알 수 있어요. \n✔️  무신사, LG전자, 오늘의집, 신세계면세점, 알리익스프레스 등 6월 할인·적립 혜택을 알 수 있어요. \n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}토스로도 간편결제 하세요\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}복잡한 인증 절차나 정보 입력 없이 빠르고 간편하게 결제할 수 있는 간편결제, 토스로도 할 수 있는 것 알고 계셨나요? 미리 등록한 카드나 계좌를 선택해 몇 번의 클릭만으로 편리한 결제를 경험해보세요. \n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n토스페이 사용법 \n한 번만 카드나 계좌를 등록해두면, 결제 시 선택하여 바로 사용할 수 있습니다. 또한, 토스페이 결제 시 포인트 적립 및 다양한 혜택도 받을 수 있어요. 예를 들어, 토스페이로 간편결제 하면 다양한 금융사의 카드/계좌에서 돈이 출금되었더라도, 모든 결제에 대해 토스페이 포인트가 쌓이는 장점이 있어요.\n토스페이에 카드, 계좌 등록하기 \n(1) 토스 홈에서 [결제]를 클릭해주세요. ‘결제수단’을 클릭하고, ‘추가하기’로 이동하면 추가할 결제수단(카드나 계좌)을 선택할 수 있어요. \n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n(2) 카드는 카드앱을 통해 몇 번의 클릭만으로 연결할 수 있고, 직접 번호를 입력하거나 스캔할 수도 있어요.\n(3) 계좌는 계좌번호와 은행명만 입력하면 5초 만에 연결할 수 있어요.\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}Tip. 신용카드도 등록 가능해요\n자주 쓰는 신용카드로도 토스페이 결제가 가능해요! 카드 실적, 카드 할부 모두 다 동일한 혜택을 받을 수 있어요.\n토스페이로 결제하기 \n토스페이는 온라인과 오프라인 결제가 모두 가능해요. \n📌 온라인 결제\n(1) 쇼핑몰 결제창에서 결제수단으로 토스페이를 선택하고 결제를 진행해주세요. \n(2) 결제 진행 시, 토스앱으로 곧장 연결되어 간편하게 결제를 진행할 수 있어요. 등록해둔 수단 중 출금될 수단을 선택해 결제하면 돼요.  \n\n📌 오프라인 결제\n(1) 토스 홈에서 [결제]를 클릭해주세요.\n(2) QR코드를 클릭하면 출금될 카드·계좌를 선택할 수 있어요. \n(3) 바코드 리더기에 QR코드를 스캔하면 결제가 완료돼요.\n토스페이 6월 혜택 모아보기\n어느덧 6월, 여름이 성큼 다가왔어요. 옷장도, 장바구니도 계절에 맞게 바뀔 시기죠. 6월에도 조금 더 알뜰한 소비를 위해 실속 있는 토스페이 결제 혜택만 모아 정리했어요.\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n.css-mlvj3o{white-space:pre-wrap;color:#4593fc;font-weight:bold;}토스페이로 결제하고 자동 할인받기 \n아래 혜택들은 결제 시 토스페이만 선택하면 자동으로 할인이 적용돼요. .css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n👗 패션\n무신사 6월 ‘무진장’ 캠페인으로 파격 할인받고, 토스페이 결제할인까지 더하면 가장 저렴하게 쇼핑할 수 있어요.\n\n✅ 무신사 (무진장 캠페인 기간)\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n10만원 이상 결제 시 1만원 즉시 할인\n이벤트 기간: 25.06.15~25.06.25\n\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}무신사 바로 가기\n🍽️ 인테리어\n여름맞이 집 꾸미기, 다가오는 계절에 맞춰 시원한 분위기로 바꿔보세요.\n\n✅ 오늘의집\n\n10만원 이상 토스페이머니·계좌 결제 시 1,000원 즉시 할인\n이벤트 기간: 25.06.01~25.06.30\n\n\n오늘의집 바로 가기\n🛍️ 면세점·해외 직구\n면세 쇼핑부터 해외 직구까지, 토스페이로 결제하면 더 알뜰하게 소비할 수 있어요.\n\n✅ 신세계면세점 \n\n20만원 이상 결제 시 2.4만원 즉시 할인\n100만원 이상 결제 시 12만원 즉시 할인\n이벤트 기간: 25.06.11~25.06.30\n\n✅ 알리익스프레스 \n\n$100 이상 결제 시 $11 즉시 할인 \n이벤트 기간: 25.06.16~25.06.25\n\n\n신세계면세점 바로 가기\n알리익스프레스 바로 가기\n\n할인 쿠폰 발급받기\n아래 혜택들은 토스 앱에서 쿠폰을 발급받고 토스페이로 결제하면 자동으로 적용돼요.\n👗 패션\n옷 쇼핑할 때 지그재그, SSFSHOP도 토스페이 결제 혜택을 받을 수 있어요.\n\n✅ 지그재그\n\n2.5% 적립 쿠폰 \n기간: 25.06.16~25.06.30\n\n✅ SSFSHOP\n\n7% 할인 쿠폰\n기간: 25.06.01~25.06.25\n\n\n🍽️ 식품\n날씨가 더울 때는 입맛 돋우는 시원한 음료를 저렴하게 쟁여보세요.\n\n✅ 코크플레이(코카콜라)\n\n20% 할인 쿠폰\n기간: 25.06.01~25.06.30\n\n\n🛍️ 종합몰\n장바구니에 담아만 놓았던 물건들, 이번 기회에 부담 없이 챙겨보세요.\n\n✅ 11번가\n\n5% 적립 쿠폰\n기간: 25.06.01~25.06.30\n\n\nLG전자, 6월에는 더블 혜택이 찾아와요\n토스페이 할인 쿠폰에 더해 결제창에서도 추가로 할인받을 수 있어요. \nLG전자 제품을 가장 알뜰하게 살 수 있는 타이밍입니다. \n\n이벤트 기간: 25.06.01~25.06.30\n\nStep 1. 쿠폰으로 할인받기\n\n모든 고객 2.5% 적립 (~08.31)\n신규 고객 7.2% 할인 \n신규 고객이라면 2.5% + 7.2% = 최대 9.7% 혜택을 받을 수 있어요.\n\nStep 2. 결제하면서 한 번 더 할인받기 \n\n10만원 이상 결제 시 7% 즉시 할인\n\n\nLG전자 쿠폰 받기\n혹시 여행 계획 있으신가요?\n특히 일본으로 떠나는 분이라면, 이 소식은 꼭 알아두세요. 일본 Paypay MPM 가맹점에서 토스페이로 결제하면 랜덤으로 최대 JPY18,888까지 할인받을 수 있습니다.\n\n기간: 25.06.03~25.08.31\n\n기간 내 1인당 5회 참여 가능해요.\n사전 쿠폰 발급 없이, 결제 즉시 자동 할인 받아요.\n하루 약 200명에게 혜택이 제공되니 놓치지 마세요! \n\n\n무더운 날씨가 다가오지만 토스페이 할인 혜택과 함께 조금은 마음 가벼운 날들 보내시기를 바랍니다. 7월에는 더 풍성하고 시원한 혜택들과 함께 찾아올게요.",
        "content": " 무신사, LG전자, 오늘의집, 신세계면세점 등 할인·적립 쿠폰 확인하기",
        "contentSnippet": "무신사, LG전자, 오늘의집, 신세계면세점 등 할인·적립 쿠폰 확인하기",
        "guid": "https://toss.im/tossfeed/article/tosspay-2025-02",
        "isoDate": "2025-06-04T07:05:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]