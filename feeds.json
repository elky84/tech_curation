[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Sy Brand",
        "title": "Pure Virtual C++ 2025: Full Schedule",
        "link": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-full-schedule/",
        "pubDate": "Tue, 15 Apr 2025 12:15:38 +0000",
        "content:encodedSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. This year, it is running on the 30th April. We’re pleased to announce the schedule of live talks:\n14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi\n14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang\n15:00 UTC: Making unfamiliar C++ code familiar with GitHub Copilot with Sinem Akinci\n15:30 UTC: C++ Modules Myth Busting with Cameron DaCamara\n16:00 UTC: constexpr everything?! with Hana Dusíková\nYou can find abstracts for all the talks and register for the conference with the button below.\nKeep an eye out for on-demand pre-conference content coming soon on YouTube.\nRegister for Free\n\nThe post Pure Virtual C++ 2025: Full Schedule appeared first on C++ Team Blog.",
        "dc:creator": "Sy Brand",
        "comments": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-full-schedule/#respond",
        "content": "<p>Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. This year, it is running on the 30th April. We&#8217;re pleased to announce the schedule of live talks: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-full-schedule/\">Pure Virtual C++ 2025: Full Schedule</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. This year, it is running on the 30th April. We’re pleased to announce the schedule of live talks: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making […]\nThe post Pure Virtual C++ 2025: Full Schedule appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35386",
        "categories": [
          "C++"
        ],
        "isoDate": "2025-04-15T12:15:38.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "eBay News Team",
        "title": "eBay Reduces the Time to List on Mobile With New Simplified Selling Tool, Now Featuring Magical Listing AI Technology",
        "link": "https://innovation.ebayinc.com/stories/ebay-reduces-the-time-to-list-on-mobile-with-new-simplified-selling-tool-now-featuring-magical-listing-ai-technology/",
        "pubDate": "Wed, 09 Apr 2025 00:00:00 -0700",
        "dc:creator": "eBay News Team",
        "content": "<div style=\"margin-bottom: 10px;\"><img src=\"https://static.ebayinc.com/static/assets/Uploads/Blog/Posts/_resampled/FitWzIwMCwxMTNd/250407-Magi-listing-v1-inc-1600x900-hero.jpg?fs=09227c32e6784b20\" width=\"200\" height=\"113\" alt=\"eBay Reduces the Time to List on Mobile With New Simplified Selling Tool, Now Featuring Magical Listing AI Technology\" /></div><div>Introducing an easier, more streamlined experience that makes listing creation faster and more effortless for sellers in the U.S. and U.K. </div>",
        "contentSnippet": "Introducing an easier, more streamlined experience that makes listing creation faster and more effortless for sellers in the U.S. and U.K.",
        "guid": "https://innovation.ebayinc.com/stories/ebay-reduces-the-time-to-list-on-mobile-with-new-simplified-selling-tool-now-featuring-magical-listing-ai-technology/",
        "categories": [
          "article"
        ],
        "isoDate": "2025-04-09T07:00:00.000Z"
      }
    ]
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Teodor Irkhin",
        "title": "K2 Mode in IntelliJ IDEA 2025.1: Current State and FAQ",
        "link": "https://blog.jetbrains.com/idea/2025/04/k2-mode-in-intellij-idea-2025-1-current-state-and-faq/",
        "pubDate": "Tue, 15 Apr 2025 14:07:29 +0000",
        "content:encodedSnippet": "Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE. \nWhile this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s important to know that K2 mode is still a work in progress. Some limitations remain, and we’re working hard to address them.\nIn this blog post, we’ll give you an overview of the current state of K2 mode, share our future plans, and answer the most common questions to help you understand what this change means and how it may affect your work.\nHow can I submit feedback or report issues?\nWe’re putting this section right at the start because your feedback is especially important to us. K2 mode is still evolving, and we rely on your real-world experience to help us catch corner cases, rough edges, and scenarios where things don’t work as smoothly as they should. Every report and comment helps us improve our users’ K2 mode experience.\nThere are several ways you can share your feedback:\nYouTrack: Create a KTIJ ticket to report an issue or a bug. The most efficient way to get the problem fixed\nSlack: #intellij channel in Kotlin Slack to ask your questions\nEmail: k2-mode-feedback@jetbrains.com to provide more general feedback.\nPlease provide as many details as possible about your specific case so we can help you effectively.\nWhat is K2 mode, and why is it necessary?\nK2 mode is the result of a long-term effort to modernize Kotlin support in IntelliJ IDEA. For years, the IDE relied on the old Kotlin compiler’s internals, which made it harder to improve performance and maintain stability as the language evolved.\nK2 mode introduces a faster, more scalable rebuilt analysis engine. It also includes the Kotlin Analysis API, which provides a clear and stable way to access code information without depending on compiler internals.\nK2 mode serves as a new foundation for Kotlin support in IntelliJ IDEA, making it possible to support future Kotlin language features and evolve faster, improve the stability and reliability of code analysis, and further boost the speed of Kotlin code analysis. \nFor more extensive information and technical details, check out this detailed blog post!\n\n\n\n\nAre there any K2 mode-only features?\nYes, some features are only available when using K2 mode. This includes all the newest Kotlin language features, which are powered by the K2 compiler, such as:\nGuard conditions in when with a subject\nNon-local break and continue\nMulti-dollar string interpolation\nContext parameters (Beta)\nAnd other new language features\nFurther language features will also be supported only in K2 mode.\n\n\n\n\nSome IDE features will also perform better or behave more reliably in K2 mode, and the newest IDE features are also planned to come to K2 mode only.\nHow does K2 mode affect performance?\nK2 mode is built to improve indexing speed, code analysis, and overall IDE stability. Many users already notice faster and smoother Kotlin support, even though the current performance improvement is far from reaching its potential. \nHowever, depending on your project size and structure, you might still encounter performance issues in specific scenarios. We’re continuously optimizing and tuning K2 mode to address them. We see, though, that autocompletion in some cases is not as fast as we would like it to be. We’ll focus on improving this during the next few months.\nDoes K2 mode work in Android Studio?\nK2 mode is already available to use in Android Studio. Later this year, it will be enabled by default in Android Studio, enhancing your development experience with improved performance and compatibility.\nWhich features are not supported yet?\nWhile K2 mode brings many improvements, some features and integrations are still missing or incomplete. For example:\nSome of the less frequently used inspections, quick-fixes, or intentions (those that are used less by less than 1% of users), might currently be missing. Please let us know if there is a feature you find really helpful that isn’t accessible yet – we’ll do our best to make it available as soon as possible!\nOccasional code analysis and highlighting issues.\nReduced completion speed when working with some specific projects.\nWe plan to address these issues in upcoming releases. \nWill all IntelliJ IDEA plugins work in K2 mode?\nIf the IDE plugin hasn’t used the Kotlin Plugin API, then it is compatible with K2 mode. Almost every single popular plugin that needs to support K2 mode already supports it.\nHowever, if you have non-public plugins that use the Kotlin Plugin API but don’t work with K2 mode – please check the detailed migration guide.\nWill K1 mode still be supported?\nYou can still use K1 mode, but new Kotlin language features and the newest IDE features will be supported only in K2 mode. As this is the new standard, further code analysis optimizations will also target K2 mode. Therefore, we encourage you to use K2 mode for your development.\nHow to verify that K2 mode is enabled\nTo ensure that K2 mode is enabled, go to Preferences/Settings | Languages & Frameworks | Kotlin and check that the Enable K2 mode checkbox is ticked.\n\n\n\n\nWhat’s next for K2 mode?\nThe release of K2 mode as the default in IntelliJ IDEA 2025.1 is an important milestone, but it’s far from the end of the journey. \nOur work on K2 mode will continue with a commitment to refine and improve this new architecture, address remaining limitations, and ensure a stable and reliable experience for all developers. Please send us your feedback to help us identify areas where we can improve your experience with K2 mode.\nFeel free to share your thoughts and ideas with us – whether it’s on Slack, YouTrack, or by email.\nHappy developing!",
        "dc:creator": "Teodor Irkhin",
        "content": "Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE.&#160; While this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s [&#8230;]",
        "contentSnippet": "Starting with IntelliJ IDEA 2025.1, K2 mode, a new implementation of Kotlin support, will be enabled by default. This change is an important step in the ongoing effort to improve Kotlin support in the IDE.  While this transition brings many improvements and lays the foundation for a smoother, more reliable experience in the future, it’s […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=559916",
        "categories": [
          "news",
          "releases",
          "k2-mode"
        ],
        "isoDate": "2025-04-15T14:07:29.000Z"
      },
      {
        "creator": "Justin Kaeser",
        "title": "What’s New in Bazel Plugin 2025.1",
        "link": "https://blog.jetbrains.com/idea/2025/04/what-s-new-in-bazel-plugin-2025-1/",
        "pubDate": "Tue, 15 Apr 2025 13:12:01 +0000",
        "content:encodedSnippet": "We’re excited to tell you about all the changes we’ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we’ve been shipping updates to JetBrains Marketplace with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the 2024.3 and 2025.1 versions of the Bazel plugin, but if you see something here that you’re missing, try upgrading!\nHere’s a more detailed look at what we improved and added:\nSpotlight features: Bazel 8, faster sync, Python, and Scala\nphased sync in action on the Bazel project\n\n\n\n\nFull Bazel 8 and nested modules support: Bazel 8 projects should now work seamlessly. This includes support for nested modules. This Bazel feature allows structuring large projects less monolithically, enabling teams to work on and import sub-modules somewhat independently, which the plugin now fully understands. You can import these modules individually or treat the whole repository as one unit.\nPhased sync (experimental): Try it! Designed to drastically reduce the time you spend waiting for initial project syncs. Enable this experimental mode under Settings | Build, Execution, Deployment | Build Tools | Bazel | Advanced Settings, and the plugin performs a quicker initial import phase. You can start browsing and editing your code almost immediately, while heavier tasks like resolving all dependencies and indexing generated code happen concurrently in the background. This means less upfront delay and fewer distracting red squiggles while background work completes.\nPython and Scala support: These languages are now officially supported targets. This means you get the full IDE experience: sync Python and Scala targets, enjoy code assistance during editing, run and debug your code – all integrated with Bazel’s build process.\nJVM project enhancements: smoother sailing\nImproved project structure handling: The plugin is now smarter at detecting common project layouts, particularly Maven-style structures where all sources in a directory belong to a single target. This translates to IntelliJ’s own features (like package prefix detection and source root identification), working more reliably out of the box.\nGetting started & managing dependencies: Less friction\nadd dependencies on the fly\n\n\n\n\nQuick start project templates: For those new to Bazel or starting a fresh project, we’ve added basic project templates for Java and Kotlin. These provide a minimal, working Bazel setup (MODULE.bazel, BUILD files) so you’re not starting from a completely blank slate.\nAdd dependencies directly from code: When you use a class from another part of your Bazel project that isn’t yet a dependency, IntelliJ’s standard Alt+Enter intention actions will now offer an Add dependency on module… option. Selecting this automatically finds the target defining the class and adds the necessary dependency line to your current target’s BUILD file. This is a significant time-saver, bypassing manual BUILD file editing and requiring no Bazel sync afterward.\nWorking with targets: More convenient actions\nShift-Shift to your target of choice\n\n\n\n\nCreate Bazel packages from the context menu: Right-click a directory in the Project view and select the option to create a new Bazel package. The plugin will create the directory (if needed) and a blank BUILD or BUILD.bazel file, reducing boilerplate.\nEasier access from source file tabs: Right-clicking on an open editor tab now gives you quick actions to navigate to the corresponding BUILD file for that source file, or to copy the file’s Bazel target label (e.g. //path/to:target) to the clipboard for use elsewhere. You can assign keyboard shortcuts to these actions for maximum efficiency.\nSearch Everywhere finds targets: Bazel targets are now integrated into IntelliJ IDEA’s powerful Search Everywhere (Shift+Shift) feature. Type part of a target name, and you can jump directly to its definition in the corresponding BUILD file. The preview shows you where you will go right away.\nRunning tests: Debugging, coverage, and more\nrun tests – with or without coverage\n\n\n\n\nDebugging and coverage for Bazel tests: You can now launch Bazel test targets directly from the IDE with the debugger attached or with code coverage enabled, using IntelliJ IDEA’s standard testing UI and tools.\nRun multiple tests easily: Right-click a directory in the Project tree view, or a target node in the Bazel tool window, to run all tests contained within that scope. This provides a convenient way to execute logical groups of tests without defining specific test_suite targets.\nMore informative JUnit 5 output: For projects using JUnit 5, the test results for failed tests displayed in the IDE’s run console are now even more informative and include the whole stack trace.\nNavigation aids\nClickable Targets in the Sync console: When the Bazel Sync console outputs messages containing target labels, those labels are now often hyperlinked. Clicking them will navigate you directly to the target’s definition in its BUILD file, useful for diagnosing sync issues or exploring project structure.\nStarlark language support: Improving the build language experience\nStarlark is the language of Bazel BUILD and .bzl files and we’re making it easier to write code in it.\n\n\n\n\n\nIn-Editor Quick Documentation: Place your cursor on a native Bazel rule (like java_library) or its attributes within a BUILD or .bzl file and invoke Quick Documentation (Ctrl+Q or F1). You’ll see documentation directly in the editor – no need to constantly refer to the Bazel website.\nComprehensive Code Completions: Get intelligent suggestions as you type for: \n\n\n\nNative Bazel rule names (java_..., py_...) and their parameters.\nFile paths within your workspace.\nTarget labels (e.g., //path/to:target, dependencies).\nExternal repository names and library targets (e.g., @maven//:).\nVisibility specifications (//visibility:public, //project:__pkg__). \nGlob Function Expansion: Curious what files a glob([“*.java”]) expression actually matched during the last sync? You can now navigate on the glob function to see the expanded list of files, which is helpful for debugging glob patterns.\nProject View file editor (.bazelproject)\nImproving the experience of editing the plugin’s own configuration file.\nEnhanced Editor Experience: The .bazelproject file now has better syntax highlighting, making it easier to read.\nStandard Commenting: You can use the standard IDE shortcut (Ctrl+/ or Cmd+/) to toggle comments for lines in this file.\nCode Style Configuration: Control formatting options like indentation for your .bazelproject file under Settings | Editor | Code Style | Bazel ProjectView.\nTools for project administrators: Taming complexity\nAdvanced features for those maintaining the build infrastructure.\nShard sync for large projects: If your project is so large that Bazel runs out of memory during sync, you can enable shard sync. Add shard_sync: true to your .bazelproject file. This tells the plugin to break the sync process into smaller, independent chunks (shards), significantly reducing the peak memory requirement for each chunk – at the cost of increased sync times.\nManaged .bazelproject for consistency: To ensure developers working in your monorepo have a consistent and sensible starting configuration, you can check a tools/intellij/.managed.bazelproject file into your repository. When a user imports the project for the first time, the plugin will use a copy of this managed file instead of potentially inconsistent application defaults, reducing setup friction and “works on my machine” issues.\nImport shared run configurations: Define standard run/debug configurations (e.g. for common services or test suites) in the format used by the original Bazel plugin by Google and check them into version control. Use the import_run_configurations directive in your .bazelproject file to tell the plugin which of these configurations should be automatically imported into the IDE during sync, making them readily available to the whole team.\nCredit where it’s due\nBig props to our external contributors, especially Mihai Toader for the excellent .bazelrc support and students from the University of Warsaw – Stanislaw Solarewicz, Piotr Plywacz, Robert Grigoryan, and Andzrej Jablonski – for many improvements to the Starlark editor experience.\nWe welcome any contributions here. \nBut I found a problem!\nWe got you. Please report any issues, ideas, improvements straight to our issue tracker.\nYou’ll also find us on the Bazel community Slack in the #intellij channel. See you there!",
        "dc:creator": "Justin Kaeser",
        "content": "We&#8217;re excited to tell you about all the changes we&#8217;ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we&#8217;ve been shipping updates to JetBrains Marketplace with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the [&#8230;]",
        "contentSnippet": "We’re excited to tell you about all the changes we’ve made in recent months to improve the Bazel plugin experience in IntelliJ IDEA. Every couple of weeks, we’ve been shipping updates to JetBrains Marketplace with focused fixes and features. Over time, these smaller updates have amounted to substantial enhancements. Most updates are included in the […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=559002",
        "categories": [
          "build-system",
          "intellij",
          "idea",
          "releases",
          "bazel",
          "build",
          "build-tools",
          "intellij-idea",
          "java",
          "kotlin",
          "plugin",
          "python",
          "scala",
          "starlark"
        ],
        "isoDate": "2025-04-15T13:12:01.000Z"
      },
      {
        "creator": "Anastasia Khramushina",
        "title": "Learn AI-Assisted Programming With JetBrains Academy and Nebius",
        "link": "https://blog.jetbrains.com/education/2025/04/15/learn-ai-assisted-programming-with-jetbrains-academy-and-nebius/",
        "pubDate": "Tue, 15 Apr 2025 12:00:33 +0000",
        "content:encodedSnippet": "Learning to code with AI isn’t cheating – it’s the next skill every developer needs.\nAI tools are changing the way we write, test, and maintain code but using them effectively isn’t always straightforward. That’s why we’ve partnered with Nebius, an AI cloud platform known for its expertise in high-performance and AI-first workloads, to bring you a brand-new course series on AI-assisted programming.\n\n\n\n    \nSTART FREE\n                                                    \nThese courses are designed to help developers go beyond the hype and actually learn how to collaborate with AI tools in meaningful, productive ways. Whether you’re a developer curious about AI or a team lead looking to boost productivity, our experts can offer you practical answers to real-world challenges.\nAnd yes, it’s completely free! But not for long.\nWhy we partnered with Nebius\nAt JetBrains Academy, we know what it takes to teach programming effectively. Meanwhile, Nebius possesses deep domain knowledge in applied AI – helping developers, data scientists, and enterprises implement AI in real-world scenarios.\nTogether, we’ve combined forces to design a course that:\nTackles everyday developer pain points when using AI tools.\nProvides insight-driven guidance from professionals working with AI daily.\nBalances theory with practical, hands-on experience.\n🤝 Our shared goal? To help you confidently integrate AI into your workflow and write better code, faster.\nWhat you’ll learn\nAI-assisted programming isn’t just about asking a chatbot to generate code. It’s about knowing enough to collaborate effectively with AI, improve the quality of AI-generated code, and build and deploy apps from scratch using AI-powered dev tools. This series of courses takes a use-case-first approach to address exactly that.\nIn it, you’ll explore topics like:\nPrompting techniques: Learn to interact with LLMs and adjust settings for better results in development and everyday tasks.\nCoding with an AI assistant: How to guide the assistant, where to trust it, and how to validate its output.\nAgents for software development: Discover how AI agents work and how you can leverage them.\nAI development tools: Explore AI tools from chatbots to in-IDE assistants and learn to pick the right ones for your tasks.\nAI in QA engineering: Explore AI tools for QA and learn to choose the right approach for your tasks\nHow’s this all for free?\nHonestly, with the caliber of experts involved and the effort that went into creating this course, I tried to convince the team to make it a paid service from the start. They didn’t budge, so we reached a compromise.\nRight now, 5 out of the 10 courses are out and available for free. The next ones scheduled for release are as follows:\nBuilding Your Own AI Agent\nAI Agents as Your Team\nIntro to AI in DevOps\nAI and the Law\nBuilding an AI-Powered App from Scratch\n👉 Once we add more courses to the series, it will become paid. So take your chance to start learning while it’s still free (or at least before I convince the team they’re being way too generous).\nGET STARTED\n                                                    \nAbout our experts\nI can’t say it enough – we’re incredibly proud of the instructors behind this course series. Our star lineup includes Alexander Avdiushenko (the Head of AI/ML Programs at JetBrains), Andrey Zakonov (AI Product Lead at JetBrains), Roman Gaev (AI Product Manager at Nebius), and famous external instructors, like Daniel Knott (the Head of Software Engineering and Software Testing Content Creator), and Graham Neubig (Chief Scientist of All Hands AI, Associate Professor of Computer Science at Carnegie Mellon University).\n🫶 But there’s one instructor our team and all our YouTube or Instagram subscribers are especially excited about: Clara Maine. You’ll meet her in the Coding With AI Assistant module, to which she brings energy, clarity, and tons of hands-on insight.\nBut why not let our experts speak for themselves?\n\n\n\n\n\n\nTeams at JetBrains and Nebius worked together to interview engineers, both internally and externally, to uncover the real blockers and blind spots when working with AI tools. That research shaped our course content and helped us focus on practical, high-impact solutions.\n✨ This course series is built by people who live and breathe AI and software development and care deeply about helping others achieve the same level of expertise in these rapidly developing sectors.\nWho is it for?\nThis course is ideal for:\nSoftware developers looking to future-proof their skills and explore the practical side of AI.\nJunior engineers who want to start building good habits for working with AI tools.\nTeam leads and managers seeking ways to safely and effectively introduce AI into their development workflows.\nAll you need to get started is a junior-level understanding of any programming language.\nStart today, while it’s free\nAs the role of AI in software development continues to grow, the ability to use it wisely is quickly becoming a core skill. Our course series on AI-assisted programming will give you not just the what but also the how – it is grounded in realistic scenarios and taught by teams who use AI and build developer tools every day.\nHappy learning!\nJetBrains Academy team",
        "dc:creator": "Anastasia Khramushina",
        "content": "Learning to code with AI isn’t cheating – it’s the next skill every developer needs. AI tools are changing the way we write, test, and maintain code but using them effectively isn’t always straightforward. That’s why we’ve partnered with Nebius, an AI cloud platform known for its expertise in high-performance and AI-first workloads, to bring [&#8230;]",
        "contentSnippet": "Learning to code with AI isn’t cheating – it’s the next skill every developer needs. AI tools are changing the way we write, test, and maintain code but using them effectively isn’t always straightforward. That’s why we’ve partnered with Nebius, an AI cloud platform known for its expertise in high-performance and AI-first workloads, to bring […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=559716",
        "categories": [
          "ai-assistant",
          "coding",
          "education",
          "jetbrains-academy",
          "jetbrains-ai",
          "learning-courses",
          "news",
          "ai",
          "ai-assistance",
          "ai-prompts",
          "ai-assisted-programming",
          "nebius"
        ],
        "isoDate": "2025-04-15T12:00:33.000Z"
      },
      {
        "creator": "Maxim Kolmakov",
        "title": "Integration Tests for Plugin Developers: GitHub Actions and Setting Up Continuous Integration",
        "link": "https://blog.jetbrains.com/platform/2025/04/integration-tests-for-plugin-developers-github-actions-and-setting-up-continuous-integration/",
        "pubDate": "Tue, 15 Apr 2025 10:25:59 +0000",
        "content:encodedSnippet": "In our previous blog posts, we created integration tests that interact with UI components, assert different properties of UI components, and interact with APIs. Now, it’s time to look at how to set up continuous integration to ensure that we don’t break them in the next commit.\nWe will be creating continuous integration using GitHub Actions as the majority of community plugins are there, but the main flow applies to any CI like TeamCity, GitLab, and more.\nSetting up machines\nIntegration tests require the IDE to be run in headful mode (with the UI visible) – headless mode is not supported. This makes them different from the usual unit tests, which usually don’t need any UI environment. \nThe requirement for a UI environment creates challenges for continuous integration. The good news is that running integration tests on Linux machines is no different from running unit tests. On Linux, the tests work out of the box without any additional configuration. Before starting a test, the Starter framework will check whether the DISPLAY environment variable exists. If it exists, the IDE will be started immediately. If not, a virtual display (Xvfb) will be initialized and the IDE will show its UI there.\nThe next OS we’re going to look at is Windows. For a JVM that runs tests to be able to simultaneously run another application with a UI and interact with the mouse and keyboard, the JVM has to be started as a command-line application and not as a service. This usually depends on how the build agent is configured.\nOn clean Windows 11 machines, the Start menu is opened by default and overlaps any application, so clicking on IDE UI components may end up running some applications. To avoid this, you can run: \nStop-Process -Name \\\"StartMenuExperienceHost\\\" -Force -ea 0.\nThere is also a popup advertisement for Edge, which can be turned off using\nSet-ItemProperty -Path \\\"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Edge\\\" -Name \\\"HideFirstRunExperience\\\"-Value 1 -Type DWord.\nThe hardest OS to run integration tests on is macOS due to its accessibility permissions.  There is no known way to change the settings without user interaction or without using MDM (mobile device management) with PPPC (Privacy Preferences Policy Control). Setting those up is not a trivial task. Integrating into the dynamic fleet of macOS agents (like we do at JetBrains) is even more difficult.\nThere is a way to turn off permissions automatically, but we can’t recommend it for everybody since it has security implications. The main risk is that Apple’s SIP (System Integrity Protection) must be disabled, since the method requires the modification of internal OS databases. When SIP is disabled, the brew utility tccutil can be used to modify TCC.db – the database that stores the accessibility permissions. \nIn this database, the application starting the IDE must be added, not the IDE itself. In our case, we start tests from Bash (which starts the JVM with tests, which in turn starts the IDE), so we use the following commands to enable screen recording and keyboard and mouse interaction:\nsudo /opt/homebrew/bin/tccutil -s kTCCServicePostEvent --insert \"$bash_path\"\nsudo /opt/homebrew/bin/tccutil -s kTCCServiceAccessibility --insert \"$bash_path\"\nsudo /opt/homebrew/bin/tccutil -s kTCCServiceScreenCapture --insert \"$bash_path\"\nsudo /opt/homebrew/bin/tccutil -s kTCCServiceListenEvent --insert \"$bash_path\".\nLuckily, there is usually little difference between different operating systems in terms of how the IDE behaves. Since Linux is the most straightforward OS, we will demonstrate how to run tests on it.\nGitHub Actions\nRunning integration tests using GitHub Actions on Linux is similar to running unit tests. We need to perform the following operations:\nCheck out sources.\nBuild project, plugin, and tests.\nRun tests.\nCollect build and IDE logs.\nTo accomplish these steps, we need to create a .yml file inside the .github/workflows folder with the following content:\nname: Integration tests\n\non:\n push:\n pull_request:\n\npermissions:\n contents: read\n\njobs:\n runExamples:\n   runs-on: ubuntu-latest\n   steps:\n     - uses: actions/checkout@v4\n     - name: Set up JDK 17\n       uses: actions/setup-java@v4\n       with:\n         java-version: '17'\n         distribution: 'temurin'\n     - name: Setup Gradle\n       uses: gradle/actions/setup-gradle@v4\n     - name: Run tests\n       run: ./gradlew clean build test\n     - name: Upload build reports\n       uses: actions/upload-artifact@v4\n       with:\n         name: build\n         path: |\n           **/build/reports/\n           **/build/test-results/\n     - name: Upload IDE test logs\n       uses: actions/upload-artifact@v4\n       with:\n         name: logs\n         path: '**/out/ide-tests/tests/**/log'\nThe result should look like this:\n\n\n\n\nThe build.zip artifact contains the Gradle output, and the logs.zip artifact contains the IDE logs, various metrics, and screenshots captured during the tests.\nThe structure of logs is the following: out/ide-tests/tests/<IDE-version>/<testName>/log\nWhat’s next?\nStay tuned for the last blog post in this series, where we’ll cover common pitfalls, tips, and tricks for stable UI tests.",
        "dc:creator": "Maxim Kolmakov",
        "content": "In our previous blog posts, we created integration tests that interact with UI components, assert different properties of UI components, and interact with APIs. Now, it’s time to look at how to set up continuous integration to ensure that we don’t break them in the next commit. We will be creating continuous integration using GitHub [&#8230;]",
        "contentSnippet": "In our previous blog posts, we created integration tests that interact with UI components, assert different properties of UI components, and interact with APIs. Now, it’s time to look at how to set up continuous integration to ensure that we don’t break them in the next commit. We will be creating continuous integration using GitHub […]",
        "guid": "https://blog.jetbrains.com/?post_type=platform&p=558884",
        "categories": [
          "plugin-development",
          "marketplace",
          "plugins",
          "testing"
        ],
        "isoDate": "2025-04-15T10:25:59.000Z"
      },
      {
        "creator": "Aleksandra Krupskaya",
        "title": "Toolbox App 2.6 Is Here With Remote Development Support",
        "link": "https://blog.jetbrains.com/toolbox-app/2025/04/toolbox-app-2-6-is-here-with-remote-development-support/",
        "pubDate": "Tue, 15 Apr 2025 10:02:45 +0000",
        "content:encodedSnippet": "Toolbox App 2.6 introduces support for remote development, allowing you to manage JetBrains tools and projects both locally and on remote servers.\nYou can connect to different host platforms, including Windows, macOS, and Linux, and use the integrated OpenSSH for secure and customizable SSH connections. The Toolbox App supports connections to remote SSH hosts, as well as to environments by providers such as Coder, Gitpod, and CodeCanvas. \n\n\n\n\nRemote JetBrains IDE tool management\nBuilding upon its local tool management capabilities, the Toolbox App has extended this functionality to remote environments. This means you can install, access, update, and monitor your JetBrains IDEs on remote hosts just as easily as you do locally.\nYou can manage your development environments consistently across all major operating systems, connecting to remote hosts running Linux, Windows, or macOS.\nThe Toolbox App’s remote development support leverages OpenSSH, offering enterprise-level security and flexibility. Simply import your SSH settings and start working. This approach supports advanced features such as ProxyJump, MFA, reverse proxy, custom IdentityFile settings, askpass integration, and even the ability to replace the SSH binary. By using familiar OpenSSH tools, the Toolbox App makes remote connections secure, customizable, and easy to set up.\nExtensibility through plugins\nToolbox App 2.6 introduces a Plugin API, which allows approved partners to customize and add to its functionality to match specific workflows and remote environments.\nTo install existing plugins, open the Toolbox App, navigate to the Manage providers section, and click the Install button next to the desired plugin. Once the installation is complete, you’re ready to integrate tools like Coder, Gitpod, and CodeCanvas into your workflow.\n\n\n\n\nThese plugins are built in close collaboration with their respective teams to ensure a smooth experience from setup to development.\nWhether you’re already using these platforms or just exploring, this is a great opportunity to take full advantage of their features directly from the Toolbox App. Check out what Coder, Gitpod, and CodeCanvas (a JetBrains solution) have to offer, and see how they can improve your remote development workflows even more.\nMore plugins are currently in development, as we aim to further expand the Toolbox App’s compatibility with a wider range of cloud development tools. Stay tuned for updates as new plugins become available. If you’re looking to migrate your solution to Toolbox, feel free to reach out to us for guides and documentation by filling out the contact form.\nFeedback from early users\nSince the start of the Toolbox App 2.6 EAP, developers have been eager to explore the new remote development features. We’ve received positive feedback from early users who have already integrated it into their workflows. Here’s what they have to say:\n“This looks like a great way to launch the remote IDE, thanks a lot!”\nJakub N\n“This is so awesome, thank you!! I have been waiting for this. Working perfectly so far connecting to Windows 11 inside Parallels from my Mac.”\nChris S.\n“Locked and loaded from Windows 11 connecting into MacOS. So far so good, and perfect timing”\nDavid M.\n“Finally, a way to replace my laggy NoMachine experience with a fully-featured local IDE connecting to my remote Linux dev server.”\nDani F\nGetting started\nGetting started with remote development in the Toolbox App couldn’t be easier! Just download or update to the latest Toolbox App release, switch to the SSH context, and connect to your remote host. Simply copy your usual SSH command from the terminal or enter your username and host details (like you do from the EC2 console). If it works in the terminal, it’ll work in the Toolbox App, too.\nOnce connected, install your preferred JetBrains IDE. For the best experience, we recommend using the 2025.1 version, which include the most recent remote development updates.\nIf you already have SSH connections set up in your SSH config or JetBrains Gateway, there’s no need to start from scratch. Just import your existing configurations into the Toolbox App and continue working without any extra setup.\nFor more detailed instructions and troubleshooting, please refer to our documentation.\nAdditional improvements\nWhile remote development is the headline feature in Toolbox App 2.6, this release also includes several highly requested improvements that enhance the overall user experience:\nToolbox App now runs natively on Windows devices with ARM64 architecture, delivering better performance.\nYou can now change the font size in the Toolbox App interface, improving accessibility and comfort across different screen setups.\nMoreover, the Toolbox App is now officially available in the Microsoft Store, so installation and updates on Windows systems are even more convenient.\n\n\n\n    \nDownload Toolbox App\n                                                    \nWe’d love to hear your thoughts on Toolbox App 2.6! Your feedback helps us improve, so please let us know your thoughts and share your experiences or tips in the comments.\nThe JetBrains Toolbox App team",
        "dc:creator": "Aleksandra Krupskaya",
        "content": "Toolbox App 2.6 introduces support for remote development, allowing you to manage JetBrains tools and projects both locally and on remote servers. You can connect to different host platforms, including Windows, macOS, and Linux, and use the integrated OpenSSH for secure and customizable SSH connections. The Toolbox App supports connections to remote SSH hosts, as [&#8230;]",
        "contentSnippet": "Toolbox App 2.6 introduces support for remote development, allowing you to manage JetBrains tools and projects both locally and on remote servers. You can connect to different host platforms, including Windows, macOS, and Linux, and use the integrated OpenSSH for secure and customizable SSH connections. The Toolbox App supports connections to remote SSH hosts, as […]",
        "guid": "https://blog.jetbrains.com/?post_type=toolbox-app&p=558912",
        "categories": [
          "toolbox-app",
          "jetbrains-toolbox"
        ],
        "isoDate": "2025-04-15T10:02:45.000Z"
      },
      {
        "creator": "Elena Kerpeleva",
        "title": "Busy Plugin Developers Newsletter – Q1 2025",
        "link": "https://blog.jetbrains.com/platform/2025/04/busy-plugin-developers-newsletter-q1-2025/",
        "pubDate": "Mon, 14 Apr 2025 16:56:18 +0000",
        "content:encodedSnippet": "⭐️ Marketplace updates\nOption to Cancel Continuity Discounts\nJetBrains Marketplace now allows plugin authors to cancel continuity discounts for paid plugins. This can be done easily from the Sales tab, with the option to set a specific end date. Customers with active subscriptions for existing plugins will still benefit from the discount, while for new plugins, continuity discounts are now disabled by default. Find more details in our blog post.\nDSA Transparency Report Now Available\nYou can now get insights into our content moderation activities with the annual Digital Services Act (DSA) Transparency Report. The report covers:\nAmount and nature of notices received by JetBrains.\nThe volume and types of content restricted.\nActions taken in response to reported violations.\nFind the report here.\n⭐️ Plugin development tooling updates\nIntelliJ Platform Plugin Template 2.1.0\nThe IntelliJ Platform Plugin Template is a repository that simplifies the initial stages of plugin development for IntelliJ-based IDEs. \nThis release includes new example code, dependency upgrades, and general clean-up. It updates the platform version (2024.2.5), switches to JVM 21, and upgrades the Gradle Wrapper to 8.13. Several outdated components and redundant configurations were removed, and GitHub Actions workflows were improved for better reliability.\nCheck the release notes for the full list of changes.\n⭐️ Useful resources\nIntegration Tests Blog Series\nFollowing the enthusiastic response to our Plugin Testing: Performance, UI, and Functional Testing session at JetBrains Plugin Developer Conf 2024, we launched a blog series that takes a deeper dive into plugin testing strategies.\nThe first post walks you through setting up your testing environment and writing your first integration test. The second explores interacting with UI elements, while the third focuses on using your plugin’s API in tests to reduce UI overhead and streamline execution. Two more posts are on the way! \nThe series is also available in the documentation.\nCoroutines on EDT and Locks\nThis new article explores the use of Kotlin coroutines in the context of the IntelliJ Platform, with a focus on threading and locking behavior on the Event Dispatch Thread (EDT). It explains common warning messages, the reasons behind them, and how upcoming changes will affect plugin development. The page also provides practical guidance on identifying when and how to apply explicit locking using the appropriate APIs, helping developers ensure their code remains safe and future-proof.\nExecution Contexts\nThis page has been updated with new information about execution contexts available since IntelliJ Platform 2024.2. It introduces the Coroutine Execution Context as the alternative to the now-obsolete Progress Indicator approach, highlighting its advantages for running background tasks and supporting cancellation and progress tracking. The update also clarifies platform version differences and outlines recommended APIs for cancellation checks, progress reporting, and context switching.\nLivestream Recording: Essential Tools for JetBrains IDE Plugin Development\nIn our recent livestream, IntelliJ Platform Developer Advocates Yann Cébron and Jakub Chrzanowski explored some of the most useful tools for developing plugins for JetBrains IDEs. They demonstrated how Plugin DevKit, PsiViewer, Index Viewer, and UI Inspector can optimize your workflow and streamline the plugin development process.\nWatch the recording or check out the key takeaways in our blog post.\n\n\n\n\n\n\nBehind the Scenes of Creating a Plugin for JetBrains IDEs\nDmitry Protsenko shares his journey of developing a Docker linter plugin as a pet project to improve the security and maintainability of Dockerfiles. From deep PSI integration to testing, publishing, and promoting the plugin, Dmitry walks through the technical and personal lessons learned along the way. Read the full story in his article.\n⭐️ Community highlights\nJoin Our New Community Space on Discourse\nIn February, we launched a new, unified space for plugin developers to connect, collaborate, and grow together. Powered by Discourse, it brings searchable forums and real-time chat into one platform, replacing our previous support forum and Slack workspace. You’ll find JetBrains experts and fellow developers ready to offer support, share insights, and exchange feedback.\nCheck out our blog post to learn how to get started — or jump right in at platform.jetbrains.com.\nWe’re Now on Bluesky 🦋\nJetBrains Marketplace has joined Bluesky! Follow us there for the latest updates, tips, and insights on building plugins for JetBrains products.\nCheck us out and stay connected: https://bsky.app/profile/platform.jetbrains.com\nYour Voice Matters: JetBrains Plugin Developer Survey\n\n\n\n\nThe IntelliJ Platform SDK team has launched a survey to hear directly from plugin developers like you. They’re looking for feedback on your experience and, more importantly, your thoughts on where they should focus our efforts next.\nTake a few minutes to share your voice and help shape the future of JetBrains plugin development. You’ll also have a chance to win one of five $50 Amazon gift cards or a one-year All Products Pack subscription.",
        "dc:creator": "Elena Kerpeleva",
        "content": "⭐️ Marketplace updates Option to Cancel Continuity Discounts JetBrains Marketplace now allows plugin authors to cancel continuity discounts for paid plugins. This can be done easily from the Sales tab, with the option to set a specific end date. Customers with active subscriptions for existing plugins will still benefit from the discount, while for new [&#8230;]",
        "contentSnippet": "⭐️ Marketplace updates Option to Cancel Continuity Discounts JetBrains Marketplace now allows plugin authors to cancel continuity discounts for paid plugins. This can be done easily from the Sales tab, with the option to set a specific end date. Customers with active subscriptions for existing plugins will still benefit from the discount, while for new […]",
        "guid": "https://blog.jetbrains.com/?post_type=platform&p=559518",
        "categories": [
          "marketplace",
          "news",
          "newsletters",
          "busy-plugin-developers"
        ],
        "isoDate": "2025-04-14T16:56:18.000Z"
      },
      {
        "creator": "Yan Zhulanow",
        "title": "The Story Behind K2 Mode and How It Works",
        "link": "https://blog.jetbrains.com/idea/2025/04/the-story-behind-k2-mode-and-how-it-works/",
        "pubDate": "Mon, 14 Apr 2025 13:32:31 +0000",
        "content:encodedSnippet": "I’m Yan Zhulanow, and I lead the Kotlin Analysis API team. Last year, we made a series of announcements about Kotlin K2 mode in IntelliJ IDEA. Now, as K2 mode is about to become the default, I am thrilled to tell you more about everything we had to go through to make this release happen.\nEven before the Kotlin language got its name, we had already started to work on the compiler. But we wouldn’t be JetBrains if we didn’t think ahead about how to support a new programming language in an IDE. It was clear from day one that Kotlin should have a proper IntelliJ IDEA plugin.\nEasy to say, hard to achieve. For everything to work correctly, both the compiler and the IDE need to understand the programming language perfectly. Those who haven’t worked much with compilers or language tooling may assume it’s all about sharing a parser. In fact, parsers for a statically-typed language are usually the simplest components. Type and call resolution, type inference of various kinds, countless static checks – these are just some of the interesting things that happen inside a semantic code analyzer on top of the produced AST.\n\n\n\n\nBy semantic information, I mean all knowledge about declarations that isn’t explicitly stated in the source code. When you declare the String return type, you assume it’s just a String from the Kotlin standard library. But the compiler doesn’t make assumptions – it analyzes any declarations and imports to find that the reference indeed points to kotlin.String. Similarly, when you call println(), it’s a relatively straightforward affair for the user, but the compiler needs to search high and low to collect all candidates and choose the most suitable overload.\nSo, a semantic analyzer is quite a sophisticated piece of software. What makes implementing it even more challenging is supporting myriad corner cases that are barely present in the language specification. This exact reason makes undertaking two separate (but consistent) analyzer implementations, for the compiler and the IDE, much more than “just” double work. Furthermore, it’s not just a one-time effort – as the language evolves, its new features must be supported exactly in the same way. Otherwise, the IDE might show errors on compilable code, or vice versa.\nWe had to create semantic analyzers for languages such as Java or Rust for IntelliJ IDEA by ourselves, as embedding compilers of those was impossible (or, at least, impractical). However, with Kotlin, it was different. Being the language designers, we had the ability to build the semantic analyzer from scratch to make it work both in the compiler and the IDE.\nTo make supporting languages easier, IntelliJ IDEA offers a handy framework for generic code analysis. We tore it off, together with the Java code analyzer (to make Java/Kotlin cross-referencing possible), built a compiler on top, and used it as a core of the Kotlin IDE plugin. This approach worked incredibly well for us. We instantly had new language features supported in the IDE, so that we could focus on inspections, refactorings, and other neat features you now use every day.\nThe team actively experimented with various language features, deciding on the ideal feature combo. That sometimes caused a bit of turbulence in the compiler codebase. At the same time, features of the IDE plugin often requested more and more sacred knowledge about the code, so the compiler had to offer a way to get it. But, as we developed those in the same repository, cross-refactorings rarely were a problem. Instead, people on both ends could improve the code analyzer as everyone was dealing with the same API. Efficient collaboration was priceless, as back then, in 2014, we barely had 20 people working on the whole Kotlin project.\nOver time, more and more IDE functionality became dependent on the compiler’s internals. There could have been a turning point where we decided to build a stricter API. But when the compiler became stable enough, the IDE support was full of features, too. On top of that, we had no issues with the existing code at the time, so making such a huge refactoring sounded unreasonable.\nThe appearance of the K2 Kotlin compiler turned the tables, though. K2 brings a drastically more robust and performant analysis engine, so we were tempted to incorporate it into the IDE as early as possible. However, as we heavily depended on the old compiler, all IDE features needed to be rewritten or at least get a good shake-up.\nOf course, the fact that we would need to actively develop K2 didn’t come as a surprise to us. We were eager to improve performance and fix numerous bugs on the IDE side, but our hands were often tied owing to the shortcomings of the old compiler’s architecture. While the transition to K2 entailed an overwhelming amount of work, we were rather looking forward to it. In any case, we didn’t have much in the way of alternatives, as all emerging Kotlin language features were only developed for K2.\nSharing is hard\nWhen we talk about “sharing an analysis engine”, it might conjure images of a black box that does some magic with the AST and outputs the results. In reality, use cases between the compiler and IDE are so different that efficient analysis of the code requires fine-grained control over the process.\nFor example, let’s see how code is analyzed in them. The compiler has a rather linear flow – it takes the module sources, analyzes them together, and produces some output (i.e. .class files). On the other hand, in the IDE, code is usually analyzed on demand. Say, the user activates an autocompletion popup, and to show parameter types for the suggested functions, the IDE will trigger parameter resolution. However, function bodies won’t be analyzed, as the IDE doesn’t need them for autocompletion.\n\n\n\n\nThen, the compiler analyzes all the files in a module. However, it never works with multiple modules at once because module dependencies are handled by a build system. In the IDE, though, all files in a project are visible at once, and the programmer can freely navigate around. Not to mention, the IDE needs to be fast, so it caches as many analysis results as possible. Each time the programmer types a letter, parts of that collected information might have to be discarded.\nThese were just a couple of conceptual differences between code analysis in compilers and in IDEs – there are many more. Still, the point is clear: the compiler needs quick batch processing, while the IDE typically wants to analyze as little code as possible.\nHow things worked before\nIn the now-obsolete compiler, we wrapped parts of the compiler logic into lazy blocks to make code analysis in the IDE efficient. It sounded natural at the time – when the IDE requests semantic information for a declaration, it will be automatically computed and cached. Lazy blocks could depend on other blocks, creating a sophisticated graph.\nTo simplify the initial implementation, all the laziness happened under a single shared lock. Even that simple solution seemed quick enough in practice. At the same time, we understood we could decide to improve that part, so we introduced StorageManager, an abstraction layer for deferred computations. A close analogy will be a custom lazy property delegate that accepts an executor for the passed lambdas.\nWell, performance issues started to appear years later as Kotlin projects became larger and IntelliJ IDEA got lots of new features. But we’ve got a fancy API, StorageManager, so we can build a better, multi-threaded implementation of it, right? Well, not quite – too many places throughout the compiler means that no more than one thread can reach those places at the same time. By replacing the caching, we only got sporadic errors instead of a performance boost. Essentially, we got an abstraction that nobody respected.\nIn addition, implicit laziness might look elegant at first sight, but it made the compiler code much less friendly when it came to debugging and optimization. When you can’t precisely track what’s resolved and what isn’t, it’s harder to understand why the analyzer ended up being in some weird inconsistent state. And, as underlying logic is uncontrollable, covering it with tests also becomes challenging.\nCould we have done better from the very beginning? Yes, for sure we could have. Still, the old compiler served us faithfully for more than 10 years. During that time, the Kotlin team gathered a lot of experience on how to share the code analyzer for our language efficiently. We knew what worked well – and what didn’t – and were fully prepared for the hard work that lay ahead.\nA new approach\nWe spent a great deal of time ensuring that the new code analyzer works both in the compiler and the IDE in the best way possible.\nIn the K2 compiler, we dropped all implicit laziness. Instead, we split code analysis into a sequence of phases, each analyzing a specific part of source code. For example, the SUPER_TYPES phase computes supertypes of classes, and TYPES handles signature types (such as parameter and explicit return types of functions). Each phase gradually enriches the AST with chunks of semantic information.\nClear separation between phases greatly simplifies the compiler architecture. But it’s the IDE where the new architecture really shines. A phase may run not only on a file, but also on individual declarations. So, when the IDE requests some semantic data, the declaration is simply resolved up to the phase that provides that data.\nA declaration usually doesn’t come alone – it depends on other declarations. In the following example, the compiler needs to resolve Array and String classes, as well as getOrNull and println library calls:\nfun main(args: Array<String>) {\n    val name = args.getOrNull(0) ?: \"Anonymous\"\n    println(\"Hello, $name!\")\n}\n\n\n\n\nWe’re on a happy path here, as all these declarations come from a library, and for library declarations, we can get all semantic information straight away. But if any of those happened to be in sources, we would also have to analyze them. This would have resulted in an avalanche of implicit computations in the old compiler. In K2 mode, again, we simply instruct the compiler to resolve the dependent declaration to a specific phase, after which we have all the semantic information we need. For declarations with a specified return type, it would be CONTRACTS.\nIn other words, a declaration can only be in one of a few fixed states – either unresolved or resolved up to a specific phase. Such an approach secures the on-demand behavior for the IDE, but provides much more predictability than the old solution. Furthermore, seeing as we can now keep track of all resolution operations, we can precisely cover lazy resolution in tests.\nThe new laziness architecture isn’t the only plausible change we made. The K2 compiler still uses a single thread, as in complex projects, parallel compilation of different modules often makes use of multiple cores anyway. However, all resolution logic is concurrency-tolerant now, so we can finally analyze multiple declarations simultaneously. The global lock is no more!\n\nAt this point, a curious reader might ask: how can we resolve two declarations that point to each other in parallel? Well, in most cases, nothing special really happens. Say we have two functions that call each other; body analysis of both functions will require analysis of the other function’s signature (as we need to know parameter types for call resolution), but the bodies themselves are not interconnected.\nHowever, in a few phases, a loop may indeed happen. Let’s assume we have two functions with implicit return types, and those functions point to each other:\nfun foo() = bar()\n\nfun bar() = foo()\nThis is obviously an invalid piece of code – but the IDE still needs to understand it correctly to report the recursion in type checking! If we request full analysis for both functions at the same time, one worker will have to wait until the other declaration analysis is complete. Still, such loops are not so common, and in most cases, code analysis happens fully in parallel, including the most expensive BODY_RESOLVE phase.\nParallel code analysis doesn’t simply make the IDE faster – it enables new behaviors. For example, if you ran Find Usages on a really huge codebase, it could take quite some time to collect all the results. With the old K1 Kotlin plugin, you could barely use the IDE – code highlighting didn’t work, the completion popup was sluggish, etc. Now you understand that all this happened because Find Usages held a global resolution lock. With K2 mode, no matter what features you activate, all of them will be able to run simultaneously.\nThe Analysis API\nSwitching to the K2 compiler brought us huge benefits, some of which we have yet to use fully. However, migrating existing features wasn’t easy at all – remember, all of them were built on top of the old compiler’s internals. Ultimately, we had to rewrite code highlighting entirely, auto-completion, numerous refactorings and inspections, and many more parts of Kotlin support in IntelliJ IDEA.\nBut even if we forget the K2 transition story for a second, the situation we were in was far from ideal.\nCompiler abstractions leaked too many things that were only needed for code analysis. At the same time, simple data retrieval was clunky. The compiler carried the semantic parts of AST around, but the IDE had to fetch chunks of it explicitly. Also, because of implicit laziness, even more ceremony was sometimes required to force everything to be calculated.\nHistorically, the Kotlin compiler heavily embraced the idea “code is the documentation”. It was rare to find comments explaining use cases of methods and classes, let alone any relevant formal contracts.\nSome time ago, the Kotlin plugin moved to the IntelliJ IDEA repository and became a natural part of the IDE. It greatly helped us in the development of new IDE features, but then we lost an easy way to refactor the compiler. Indeed, we now had to change the code in two products with different release cycles. Thankfully, the compiler team was already busy with K2 at the time, so changes in the obsolete compiler were limited.\nBesides the Kotlin support itself, IntelliJ IDEA bundles various plugins that depend on Kotlin, such as Spring, DevKit, or Ktor. All those also required migration, but we could either do that ourselves or provide in-house guidance. But there are also hundreds of brave developers from the Kotlin community who built their plugins on top of the chaotic compiler APIs. For us, the mentioned issues were rather an inconvenience, but for a person who doesn’t work with Kotlin on a daily basis, it was a nightmare.\nSo, together with Kotlin K2 mode, we developed a library designed specifically for on-demand code analysis – the Kotlin Analysis API. It encapsulates all complex resolution logic and provides documented abstractions with clear and predictable behavior. As a user, you only request pieces of semantic code information you’re interested in, and the library takes care of all lazy and parallel analysis, together with caching the results.\nFor instance, to get an expression type, you only need to call the KtExpression.expressionType extension property provided by the library. If the type isn’t yet known, the body of the containing declaration will be automatically analyzed.\nfun KtExpression.hasStringType(): Boolean {\n    analyze(this) {\n        return expressionType == builtinTypes.string\n    }\n}\n\n\n\n\nBefore, you needed to specify explicitly which declaration to resolve, get an opaque container with all semantic information that was collected during code analysis, and fetch an expression type from it. You could also find nothing there if lazy resolution avoided computing that type for some reason. The Migrating from K1 documentation article tells more on the API differences.\nToday, the Analysis API offers backward compatibility for its core API, which is aligned with IntelliJ IDEA’s policies. We also built a documentation website with guides on using the library and how to migrate your existing code from the legacy API. Furthermore, we approached maintainers of all plugins on JetBrains Marketplace that used the old Kotlin compiler, and we’re happy to see that almost all plugins already migrated to the Analysis API. Thank you!\nWhat’s next?\nTogether with IntelliJ IDEA 2025.1, we are making Kotlin K2 mode the default one, but our work doesn’t stop here. Even though the code is well-tested, there’s still a lot of new code that needs to be battle-tested in production. So, if you find that something works incorrectly, don’t hesitate to contact us:\nYouTrack: Create a KTIJ ticket to report an issue or a bug. The most efficient way to get the problem fixed\nSlack: #intellij channel in Kotlin Slack to ask your questions\nEmail: k2-mode-feedback@jetbrains.com to provide more general feedback.\n We are eager for feedback and will try our best to make the Kotlin IDE experience as pleasurable as the laws of physics allow us to! 🚀",
        "dc:creator": "Yan Zhulanow",
        "content": "I&#8217;m Yan Zhulanow, and I lead the Kotlin Analysis API team. Last year, we made a series of announcements about Kotlin K2 mode in IntelliJ IDEA. Now, as K2 mode is about to become the default, I am thrilled to tell you more about everything we had to go through to make this release happen. [&#8230;]",
        "contentSnippet": "I’m Yan Zhulanow, and I lead the Kotlin Analysis API team. Last year, we made a series of announcements about Kotlin K2 mode in IntelliJ IDEA. Now, as K2 mode is about to become the default, I am thrilled to tell you more about everything we had to go through to make this release happen. […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=559342",
        "categories": [
          "eap",
          "kotlin",
          "releases",
          "intellij-idea",
          "k2-mode"
        ],
        "isoDate": "2025-04-14T13:32:31.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "How To Increase Code Quality in GitHub With Qodana",
        "link": "https://blog.jetbrains.com/qodana/2025/04/code-quality-in-github/",
        "pubDate": "Thu, 10 Apr 2025 17:37:29 +0000",
        "content:encodedSnippet": "Guest Author: Andrei Iurko\nAndrei Iurko is a software developer in the Qodana Core team and a champion of code quality for developers of all skill levels. He is based in Paphos, Cyprus and likes karaoke, refining architecture, and finding unique gifts that his wife will love.\nA year ago we shared a post on how to integrate Qodana with Github Actions on the .NET Community – but a lot has changed since then. \nQodana self-hosted  has been released, with analysis that can make your code more secure by detecting hardcoded passwords and running taint analysis for JVM. The new Android Linter has also been released. \nAnd, more importantly than releasing new functionality and features, the Qodana team has worked hard on improving the experience for users – creating a world-class platform for developers and QAs. As a result of this, we’re now providing a more seamless integration with Github too. \nIn this post, we will discuss what’s changed and how to elevate your code quality in Github with Qodana.\nOpen Qodana Cloud\nTable of Contents\n\nSetting up a Qodana Project and configuring a GitHub Actions workflow file\nInspecting Qodana results for GitHub Actions\nQodana results in GitHub pull requests\nUploading Qodana results as artifacts\nAdding Quick Fixes in your worflow run\nAdding a Qodana status badge\nTry Qodana for GitHub\n\n\nSetting up a Qodana Project and configuring a GitHub Actions workflow file\nHead over to Qodana Cloud or your on-premise solution, and create a new project. \n\n\n\n\nAfter you created the project, choose Github Actions from the options: \n\n\n\n\nYou will be prompted to install the Qodana Cloud Github application. You can choose which repositories it will have access to. After installation, you will be able to link your repository to the Qodana Cloud project:\n\n\n\n\nThe final step is to integrate Qodana into your pipeline. To do this, you only need to choose the right linter, suitable for the language of your project and press the Save token and submit pull request button. If you want to set everything manually, you will be able to find instructions on the same page:\n\n\n\n\nAfter that, navigate to your repository and find the pull request created by Qodana. There, you will see the configuration to apply Qodana to your GitHub CI/CD.\n\n\n\n\n\n\n\n\nAnd that’s it! The Qodana team put a great effort into making the configuration as seamless as possible. If you would like to change the configuration later, you can easily do so in the IDE – because the configuration fully supports the YAML format. Then you can take advantage of code completion, formatting, and validation when editing the file. For instance, you can see which inspection profiles are included out of the box:\n\n\n\n\nInspecting Qodana results for GitHub Actions\nAt this point, you might start imagining the process of using Qodana like this: make some changes to the project, push it to GitHub, wait until the Qodana Action is complete, view the result in Github and then start switching back and forth to fix all the issues you find. Well, here’s some good news – you can fix everything without leaving your IDE!\nTo do so, you need to connect the IDE to Qodana Cloud. Launch your IDE and navigate to problems → Server-Side Analysis tab. Make sure that the configuration suggested in GitHub is applied locally – and press the Log in to use all features button!\n\n\n\n\nAfter you log in, you will find the Qodana Cloud project in the window – choose it and press OK.\n\n\n\n\nLet’s test our setup! I had this ancient react-native project for testing. After adding configuration to the develop branch, I opened a pull request to master. As you can see, Qodana gave us the result as a comment in the pull request, and we can see that there are some issues in the project.\n\n\n\n\nWe are one click away from seeing this report in IDE. All that is left is to open the Server-Side Analysis tab again and press the Refresh Report button (make sure you are on the same branch as your pull request). This report will include all the important information about the workflow run, branch, number of issues, their classifications, and severities. And it seems like in the past, I made a serious mistake – I pushed a RAPID API token right into the code. Well, it was almost my first application, after all.\n\n\n\n\nBut if you would prefer to view all problems on Github – Qodana can show them to you directly through both annotations and job summaries under workflow runs. That means even contributors who don’t use JetBrains IDEs or don’t have access to your Qodana project can take advantage of Qodana’s first-class analysis reports:\n\n\n\n\nIn case you don’t want to see any annotations, you can opt out via the use-annotations property:\n\n\n\n\nIn contrast to our demo project, your solution might show significantly more code inspections and problems. This is expected, and you shouldn’t feel discouraged by it. Our goal with Qodana is to help you improve your code quality in an incremental and flexible way, which can be achieved by moving existing problems to the baseline and configuring a fail threshold as a quality gate.\nQodana also supports CodeQL format reporting, which means that you can configure It to include found problems in a Github CodeQL scan. While not all found issues are security concerns, you may want to look into Qodana Taint Analysis results to be on the safe side.\n\n\n\n\nQodana results in GitHub pull requests\nIn order to make Qodana work properly with pull requests, you need to set the ref and fetch-depth properties on the checkout action as follows (already pre-configured if you followed the previous steps):\n- uses: actions/checkout@v4\n\twith:\n\t\tref: ${{ github.event.pull_request.head.sha }}\n\t\tfetch-depth: 0\nWithout any additional effort, Qodana can post the results of your analysis on GitHub pull requests. This enables contributors to react quickly to potential bugs and quality degradation. At the same time, it gives repository owners more confidence when it comes to merging pull requests by providing a summary in comments:\n\n\n\n\nThis analysis report is updated as more commits are pushed to the branch.\nIf you prefer not to post any updates on pull requests, you can opt out via the post-pr-comment property:\n- name: 'Qodana Scan'\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    post-pr-comment: false\nUploading Qodana results as artifacts\nBy default, Qodana will upload analysis results only to Qodana Cloud. Under certain circumstances, you might also want to upload them as artifacts. This could be to update the qodana.sarif.json baseline file by simply downloading and replacing it in your repository or allow contributors to investigate a report directly in their IDE without having to link the project (which is also possible in our Visual Studio Code extension):\n\n\n\n\nIn order to opt into uploading the Qodana report as an artifact, you can use the upload-result and artifact-name properties:\n- name: 'Qodana Scan'\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    upload-result: ${{ github.ref_name == 'main' }}\n    artifact-name: qodana-report\nAdding Quick Fixes in your worflow run\nAnother powerful feature of Qodana is quick fixes. Jetbrains and the community have developed them for years and you can enable them in your codebase through Qodana. This can be done with any paid linter by adding this configuration to your workflow file:\n- name: 'Qodana Scan'\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    args: --apply-fixes\n    push-fixes: 'branch'\nWith this configuration, after Qodana runs, it will push fixes directly into your branch, without any additional input. If you want to be on the safe side and first review the fixes, then you can change the push-fixes input argument to ‘pull-request‘ and Qodana will open the pull request suggesting fixes in the analyzed branch!\nFor example, here is how one of the quick-fixes looks after the analysis of Glide – a popular Android library for image loading.\n\n\n\n\nAdding a Qodana status badge\nAfter integrating Qodana into your repository, what could be better than adding a cool badge to show that it’s in good shape? Just head over to one of the workflow runs and grab it from the menu in the upper right-hand corner:\n\n\n\n\nTry Qodana for GitHub\nThe Qodana team has improved Github integration, allowing maintainers and contributors to react to any issue fast, and improving the code quality and security of the your products. The experience is not limited to JetBrains IDE users – anyone can benefit from issues displayed in the Github UI and reports exported to their Visual Studio Code too. Get Qodana Cloud or Self-Hosted for your team, and give it a try. \nTry Qodana Cloud",
        "dc:creator": "Kerry Beetge",
        "content": "A year ago we shared a post on how to integrate Qodana with Github Actions on the .NET Community &#8211; but a lot has changed since then. Qodana self-hosted has been released, with analysis that can make your code more secure by detecting hardcoded passwords and running taint analysis for JVM. The new Android Linter [&#8230;]",
        "contentSnippet": "A year ago we shared a post on how to integrate Qodana with Github Actions on the .NET Community – but a lot has changed since then. Qodana self-hosted has been released, with analysis that can make your code more secure by detecting hardcoded passwords and running taint analysis for JVM. The new Android Linter […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=558560",
        "categories": [
          "code-review",
          "tutorials",
          "github",
          "qodana"
        ],
        "isoDate": "2025-04-10T17:37:29.000Z"
      },
      {
        "creator": "Matthias Koch",
        "title": "C# Language Support in ReSharper and Rider 2025.1",
        "link": "https://blog.jetbrains.com/dotnet/2025/04/10/csharp-language-support-in-resharper-and-rider-2025-1/",
        "pubDate": "Thu, 10 Apr 2025 16:51:03 +0000",
        "content:encodedSnippet": "Our release for ReSharper and Rider 2025.1 is just around the corner, and we have lots of exciting features shipping for the current and next version of C#! This will be a really long post (blame our awesome devs!), so make sure to use the table of contents on the right. Oh, and of course…\nDownload Rider 2025.1 Download ReSharper 2025.1 -->Download Rider 2025.1 RC Download ReSharper 2025.1 RC\nFor many of the inspections and quick fixes discussed in this post, we recommend using either find in scope or fix in scope to effectively use them in your codebases. Now, let’s talk about new features!\n\n\n\n\nStructured Logging Support\nIn ReSharper and Rider 2025.1, we enhanced support for structured and high-performance logging using the Microsoft.Extensions.Logging APIs. Similar to how formatting arguments are highlighted in string.Format using the {0} syntax, we now highlight the corresponding type arguments in the Logger.Define and LoggerMessageAttribute API. Additionally, missing type arguments are now reported with diagnostics to catch issues early, along with quick-fixes and context actions to add or remove them as needed:\nStructured and High-Performance Logging Support\n\n\n\n\nString Construction Context Actions\nOur .NET IDEs offer a wide range of suggestions and context actions for working with C# string literals, interpolated strings, string.Format, and StringBuilder constructs. You can convert nearly any string-related expression into various other forms to enhance readability or to better parameterize string construction.\nHowever, some conversion directions were still missing. For example, while it’s been easy to convert a concatenated string like \"Id = \" + someId into either an interpolated string $\"Id = {someId}\" or a format string string.Format(\"Id = {0}\", someId), there hasn’t been a way to reverse this — i.e., to convert interpolated or formatted strings back into concatenation. In certain scenarios, such a transformation can actually result in more concise or readable code:\nConvert Interpolation to Concatenation Context Action\n\n\n\n\nImplicit Usings Refactoring\nImplicit usings simplify your project by automatically including a set of commonly used namespaces, reducing clutter and improving readability. However, there might be scenarios where you prefer explicit control over your namespace imports — for example, to ensure clarity about exactly which namespaces are available or to improve compatibility with certain tooling and team conventions.\nReSharper and Rider 2025.1 introduce a convenient action that allows you to easily toggle implicit usings on or off for your project. When enabling implicit usings, ReSharper automatically removes redundant explicit using directives from your source files, streamlining your codebase. Conversely, disabling implicit usings will explicitly add the necessary namespaces into your files, ensuring your code remains compilable and readable without any manual adjustments:\nToggle Implicit Usings Context Action\n\n\n\n\nImproved Multiline To-Do Comments\nIn the previous release, we introduced support for multiline to-do comments, where subsequent lines were considered part of the same item based on their indentation. In the 2025.1 release, we’ve enhanced this feature by making indentation optional. Now, lines following a to-do comment are automatically treated as part of the same item, even without indentation, making multiline comments more intuitive and seamless. However, if indentation is used, it will be strictly enforced:\nImproved Multiline To-Do Comments\n\n\n\n\nLanguage Injection in Return Values\nLanguage injection made its debut in ReSharper around 10 years ago with support for regular expressions. Since then, it has been brought to Rider, expanded to other languages, and updated to work with new language and runtime features.\nPreviously, the LanguageInjection attribute (from JetBrains.Annotations) could only be applied to parameters, fields, and properties. Now you can annotate methods to specify that their returned strings represent an embedded code of another language:\nLanguage Injection in Return Values\n\n\n\n\nRedundant Duplicated Code\nIn the previous two versions, we introduced inspections for more specific scenarios of code duplication — common code in if and switch statements and duplicated switch section bodies. In this 2025.1 release, we deliver three new inspections to help you eliminate unintentional duplications and improve readability and maintainability in your codebase.\nOur first inspection detects duplicated statements that appear both within conditional branches of if and switch statements ending with jump statements and again immediately afterward:\nDuplicated Statements in Conditional Branches Inspection and Quick-Fix\n\n\n\n\nAnother inspection detects redundant arms in switch expressions — specifically, arms that return the same value as the default one. Removing these redundancies simplifies your code and improves readability:\nRedundant switch Expression Arms Inspection and Quick-Fix\n\n\n\n\nThe last inspection detects when multiple if branches execute identical code and provides a handy quick-fix to merge them:\nDuplicated if Bodies Inspection and Quick-Fix\n\n\n\n\nMisuse of CancellationToken\nWhen working with asynchronous methods, it’s common to pass a CancellationToken through parameters of local functions or lambda expressions. Accidentally using a method-level token instead of a more specific, locally scoped one can lead to unintended behavior, such as tasks not being canceled when expected.\nReSharper and Rider 2025.1 introduce a new inspection that detects when a broader-scoped cancellation token is mistakenly used instead of a more appropriate local token available within a local function or lambda. You can choose from two corresponding quick-fixes to either a) replace the mistakenly used token with the correct local token, or b) link both tokens into one using CancellationTokenSource.CreateLinkedTokenSource:\nPossibly Mistaken Use of CancellationToken Inspection\n\n\n\n\nInjection Postfix Template\nPrimary constructors in C# 12 greatly simplify constructor dependency injection patterns. You only need to mention a dependency once in the constructor parameter list, and it automatically becomes available across all instance members of the class without the need to define and assign a field explicitly.\nIn ReSharper and Rider 2025.1, we introduce a new inject postfix template available for type names. When you realize you need to add a dependency on IService, select it from the completion list, append .inject, and hit your completion key:\nInject Postfix Template\n\n\n\n\nTransform Parameters Refactoring\nThe transform parameters refactoring makes it easy to change a method’s signature by modifying its parameters — for example, removing out parameters, wrapping them in a tuple or a new class, and more — while automatically updating all usages of the method across your solution.\nWith ReSharper and Rider 2025.1, we reworked the refactoring to support modern language features (including tuple types, record classes, and primary constructors), treat tuple elements as multiple return values, transform ref parameters into both input and output values, and handle lots of deconstruction usages. Bring up the dialog, select the parameters you want to transform, and choose your desired target types:\nTransform Parameters Refactoring Dialog\n\n\n\n\nContext Highlighters for Extended Types\nOne of the very subtle features in ReSharper and Rider is the highlighting of matching code elements (for instance, check out Matching of control flow keywords). From 2025.1, we will help you to visually identify members that extend the base class or implement some concrete interface type. Just place the caret over the type name in the base types clause:\nContext Highlighters for Extended and Implemented Members\n\n\n\n\nChop Formatting Context Action\nOur built-in formatter helps you to align your code with your preferred code formatting style settings. It can be invoked manually, through an “on-save” action, or before committing changes. Sometimes, though, you may want more control without triggering widespread formatting. A new context action lets you apply chop formatting to various C# constructs directly without needing to make a selection:\nChop Parameters List Context Action\n\n\n\n\nModification in Debug.Assert\nWhen writing code assertions using APIs like Debug.Assert, it’s easy to forget that these calls are stripped out in RELEASE builds. This is because methods marked with attributes like [Conditional(\"DEBUG\")] are only compiled when the DEBUG symbol is defined in the project. As a result, if the assertion condition includes side effects — such as assignments or collection mutations — those side effects will not occur in RELEASE builds. These conditional side effects are hard to spot and reason about, and they can lead to subtle bugs or unexpected behavior.\nOur new 2025.1 code inspection detects and warns you about such cases automatically:\nModifications in Debug.Assert Inspection\n\n\n\n\nInexact Stream Reads\nA common mistake when working with .NET’s Stream class is misusing the Read and ReadAsync methods. These methods accept a buffer (an array or a Span<byte>) and are often assumed to fill it completely — but they are not guaranteed to do so. Crucially, Stream implementations are allowed to return partial data and will report the actual number of bytes read, which may be less than the buffer size. That’s why it’s essential to handle the return value from Read and ReadAsync properly and continue reading until the desired amount of data is received.\nStarting with our 2025.1 IDEs, incorrect usage patterns of Read and ReadAsync are automatically detected, with suggestions to replace them with the safer ReadExactly API:\nInexact Stream Reads Inspection and Quick-Fix\n\n\n\n\nTuple Component Names\nTuple types allow you to use both explicit and generic component names. Sometimes, it is overlooked that a component can be referenced by its explicit name, e.g., MyComponent, rather than ItemN. Our new IDE hint and corresponding quick-fix help you to get rid of generic names in favor of explicit names to make your code more readable:\nPrefer Explicit Name for Tuple Component Inspection and Quick-Fix\n\n\n\n\nReferencing Enum Member Names\nThe nameof operator was introduced in C# 6 — another case of “10 years today”! Since then, many have embraced it extensively to reference variable, type, and member names as string constants instead of using magic strings. ReSharper and Rider continue to spot situations [1, 2] in which you can make better use of them. Referencing an enum member through ToString introduces unnecessary runtime overhead due to reflection and additional processing.\nIn 2025.1, we are adding a new inspection Use nameof expression to reference enum member name that targets such cases and provides a quick-fix to convert to nameof as a compile-time language feature that is faster, safer, and clearer:\nUse nameof for Reference Inspection and Quick-Fix\n\n\n\n\nNameof with Unbound Generics\nAnother new feature in C# 14 now allows using the nameof operator with unbound generics. Previously, to get List as a compile-time constant, you had to provide generic arguments — e.g., nameof(List<DontCare>) — even though they are not included in the final name. This friction is now removed, and you can use the open generic as in nameof(List<>).\nReSharper and Rider identify places where generic types in nameof operators can be simplified and provide a quick-fix to remove redundancies:\nRedundant Type Arguments in nameof Inspection and Quick-Fix\n\n\n\n\nFirst-Class Span Types\nIn recent years, the BCL and many other libraries have extensively adopted Span<T> and ReadOnlySpan<T> to provide more performant APIs. With C# 14, first-class support for span types is introduced through new implicit conversions between ReadOnlySpan<T>, Span<T>, and T[], which are now applied in more scenarios. This makes working with spans more intuitive and seamless. ReSharper and Rider 2025.1 fully support these updated conversion rules:\nSpan Type Conversion\n\n\n\n\nSimple Lambda Parameters with Modifiers\nThe next C# update simplifies writing lambda signatures. Previously, using parameter modifiers like ref, out, in, ref readonly, or scoped in lambdas required explicitly specifying the parameter type — for no particular reason. Starting with C# 14, this restriction has been lifted, allowing you to use these modifiers without redundant type annotations.\nAs you’d expect, ReSharper and Rider 2025.1 offer a quick-fix to remove the now-redundant type specifications:\nRedundant Lambda Parameters Inspection and Quick-Fix\n\n\n\n\nDefault Literal Suggestions\nC# is well-known for offering multiple ways to express the same concept (looking at you, null checks!). While flexibility has its merits, this kind of redundancy is generally not a good thing. It’s exactly why IDE tooling plays a crucial role in helping developers standardize and streamline code — ensuring consistency and reducing ambiguity.\nUsing the default literal in non-generic contexts to represent trivial values like 0 or false can make code harder to reason about. ReSharper and Rider now help you catch such cases and offer recommendations to clarify the intent:\nDefault Literal Inspection and Quick-Fix\n\n\n\n\nConclusion\nWow — that was a lot to cover! One thing’s clear: our team has poured serious effort into not just flashy new language features but also refining older ones, making them shine in fresh ways.\nWe’d love to hear from you. Do you spot any issues or have ideas for ReSharper and Rider vNextNext? Drop them in the comments!",
        "dc:creator": "Matthias Koch",
        "content": "Our release for ReSharper and Rider 2025.1 is just around the corner, and we have lots of exciting features shipping for the current and next version of C#! This will be a really long post (blame our awesome devs!), so make sure to use the table of contents on the right. Oh, and of course… [&#8230;]",
        "contentSnippet": "Our release for ReSharper and Rider 2025.1 is just around the corner, and we have lots of exciting features shipping for the current and next version of C#! This will be a really long post (blame our awesome devs!), so make sure to use the table of contents on the right. Oh, and of course… […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=558551",
        "categories": [
          "net-tools",
          "how-tos",
          "net",
          "c",
          "formatting",
          "generation-and-templates",
          "inspections",
          "quick-fixes"
        ],
        "isoDate": "2025-04-10T16:51:03.000Z"
      },
      {
        "creator": "Anastassiya Sichkarenko",
        "title": "Developer Ecosystem Survey 2025 – Help Shape the Future of Development",
        "link": "https://blog.jetbrains.com/team/2025/04/10/developer-ecosystem-survey-2025-help-shape-the-future-of-development/",
        "pubDate": "Thu, 10 Apr 2025 16:05:16 +0000",
        "content:encodedSnippet": "Since 2017, we’ve been checking in with developers around the world to better understand how the industry is evolving and how we can build better tools to support you. Now, the Developer Ecosystem Survey 2025 is live, and we’d love for you to be part of it.\n\n\n\n\nThis annual survey is a community milestone that celebrates developers and helps us – and the broader dev community – spot important trends and challenges. No matter what kind of development you do, whether you’re building enterprise apps or hacking away on side projects, your perspective matters.\nSet aside about 30 minutes, grab a drink, get comfortable, and tell us about your experience as a developer – the tools you love, the challenges you face, and how you see the industry evolving.\nAs a thank-you for your time, you’ll be entered to win one of these awesome prizes:\nMacBook Pro 16”\niPhone 16 Pro or Google Pixel 9 Pro\n$500 gift card for Amazon or an alternative of your choice\n1-year JetBrains All Products Pack subscription\n$150 JetBrains Merchandise Store voucher\n\n\n\n\nTAKE THE DEVELOPER ECOSYSTEM SURVEY 2025\nThe more developers who take part, the clearer the picture we can paint of today’s software development landscape. So once you’ve taken the survey, don’t forget to pass it on to your fellow developers. You will get a personal referral link on the last page, and those with the most shares will get a little something extra from us.\nAs always, we’ll publish in-depth results in the form of detailed infographics and reports, and we’ll also release the anonymized raw data for anyone who wants to dig in deeper.Thank you for helping us capture a snapshot of where development is headed in 2025, and for being part of the global development community.",
        "dc:creator": "Anastassiya Sichkarenko",
        "content": "Since 2017, we’ve been checking in with developers around the world to better understand how the industry is evolving and how we can build better tools to support you. Now, the Developer Ecosystem Survey 2025 is live, and we’d love for you to be part of it. This annual survey is a community milestone that [&#8230;]",
        "contentSnippet": "Since 2017, we’ve been checking in with developers around the world to better understand how the industry is evolving and how we can build better tools to support you. Now, the Developer Ecosystem Survey 2025 is live, and we’d love for you to be part of it. This annual survey is a community milestone that […]",
        "guid": "https://blog.jetbrains.com/?post_type=team&p=556276",
        "categories": [
          "deveco",
          "devecosystem",
          "news",
          "research",
          "survey"
        ],
        "isoDate": "2025-04-10T16:05:16.000Z"
      },
      {
        "creator": "Alejandro Serrano Mena",
        "title": "Update on Context Parameters",
        "link": "https://blog.jetbrains.com/kotlin/2025/04/update-on-context-parameters/",
        "pubDate": "Thu, 10 Apr 2025 15:28:12 +0000",
        "content:encodedSnippet": "Context parameters are an upcoming feature in Kotlin, with a variety of use cases including more powerful extension methods and better tools for DSL development. Kotlin 2.2.0 will feature context parameters in Beta, and dedicated IntelliJ IDEA support will be available from 2025.1.\nContext parameters replace another experimental feature in the language, namely context receivers. Although always behind a feature flag, context receivers have been part of Kotlin since version 1.6.20, and are used in a non-trivial amount of code. This blog post describes our plans for the transition between both features.\nSmooth transition\nIn Kotlin version 2.2.0 context parameters are released as Beta, but context receivers are not yet removed. To assist with the migration, when the context parameter feature flag is enabled, the context receiver syntax is still recognized as much as possible, and the compiler and the IDE hint for possible further actions. Migration is strongly recommended, as we plan to remove context receivers around the 2.3 release. Migration does not need to happen all at once: context receivers and parameters may coexist in your project (although within each single module at most one of them may be enabled).\nIf your project already used context receivers, you can get started by changing your free compiler argument from -Xcontext-receivers to -Xcontext-parameters. Upon re-syncing the project, new inspections appear wherever context receivers are used.\n\n\n\n\nThe main difference between context receivers and parameters is that the latter require a name. Introducing this name also requires prefixing any calls which were implicitly using the context receiver with a reference to this new name. In IntelliJ IDEA, starting from version 2025.1, this can be done using the provided Replace context receivers with context parameters quick-fix.\n\n\n\n\nIf in the same message you instead click on More actions… and then press the three vertical dots next to the name of the quick-fix, you can apply it to all the context receivers in the same file. IntelliJ IDEA will change all the occurrences of context receivers, introducing a name based on the type and the usage of the parameter.\n\n\n\n\nYou may even perform a module-wide or project-wide migration by going to Code | Analyze Code | Run Inspection by Name… and then executing Migrate from context receivers to context parameters or Outdated context receivers used (depending on the IntelliJ IDEA version). You can then choose the desired scope for the change.\nManual migration\nCallable references to functions with context parameters are not supported in Kotlin 2.2.0. Implementation in the compiler requires some additional work that will be finalized for 2.3. We think that even without this feature, developers will get a lot of mileage out of context parameters. If you were using callable references to functions with context receivers, you can replace them with lambdas in most cases.\nContext receivers in classes have no direct counterpart in context parameters (the KEEP document describes the reasoning behind this change). Depending on the particular use case, the migration path is quite different, so manual migration is required. We strongly recommend refactoring context receivers in classes now in preparation for the upcoming deprecation.\nConclusion\nContext parameters are becoming a reality in Kotlin 2.2.0. For the brave, partial support for context parameters is already available in Kotlin 2.1.20. However, migration actions from IntelliJ are not available for that version of Kotlin, since the implementation is still in the experimental phase.\nWe recognize the need for a good migration path from context receivers into the new context parameter world. The Kotlin compiler and IDE teams are devoting part of their efforts to make this migration as smooth as possible.",
        "dc:creator": "Alejandro Serrano Mena",
        "content": "Context parameters are an upcoming feature in Kotlin, with a variety of use cases including more powerful extension methods and better tools for DSL development. Kotlin 2.2.0 will feature context parameters in Beta, and dedicated IntelliJ IDEA support will be available from 2025.1. Context parameters replace another experimental feature in the language, namely context receivers. [&#8230;]",
        "contentSnippet": "Context parameters are an upcoming feature in Kotlin, with a variety of use cases including more powerful extension methods and better tools for DSL development. Kotlin 2.2.0 will feature context parameters in Beta, and dedicated IntelliJ IDEA support will be available from 2025.1. Context parameters replace another experimental feature in the language, namely context receivers. […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=557531",
        "categories": [
          "news",
          "language-evolution",
          "roadmap"
        ],
        "isoDate": "2025-04-10T15:28:12.000Z"
      },
      {
        "creator": "Vaclav Pech",
        "title": "New Bug-Fix Releases Are Available – MPS 2024.3.2 and MPS 2024.1.3",
        "link": "https://blog.jetbrains.com/mps/2025/04/mps-2024-3-2-has-been-released/",
        "pubDate": "Thu, 10 Apr 2025 11:40:14 +0000",
        "content:encodedSnippet": "We’ve released updates for MPS 2024.1 and MPS 2024.3 that fix several additional issues. Check them out and see what you think.\nDOWNLOAD MPS 2024.3.2\nDownload MPS 2024.3.2 here.\nhere.\nDownload MPS 2024.1.3 here.\nhere.\nYour JetBrains MPS team",
        "dc:creator": "Vaclav Pech",
        "content": "We’ve released updates for MPS 2024.1 and MPS 2024.3 that fix several additional issues. Check them out and see what you think. DOWNLOAD MPS 2024.3.2 Download MPS 2024.3.2 here. See the full list of fixed issues here. Download MPS 2024.1.3 here. See the full list of fixed issues here. Your JetBrains MPS team",
        "contentSnippet": "We’ve released updates for MPS 2024.1 and MPS 2024.3 that fix several additional issues. Check them out and see what you think. DOWNLOAD MPS 2024.3.2 Download MPS 2024.3.2 here. See the full list of fixed issues here. Download MPS 2024.1.3 here. See the full list of fixed issues here. Your JetBrains MPS team",
        "guid": "https://blog.jetbrains.com/?post_type=mps&p=557567",
        "categories": [
          "releases"
        ],
        "isoDate": "2025-04-10T11:40:14.000Z"
      }
    ]
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Brady Gaster",
        "title": ".NET Aspire and Azure Functions integration preview",
        "link": "https://devblogs.microsoft.com/visualstudio/net-aspire-and-azure-functions-integration-preview/",
        "pubDate": "Wed, 09 Apr 2025 12:00:19 +0000",
        "content:encodedSnippet": "Have you ever struggled with integrating serverless technology into your existing .NET projects? The new update in Visual Studio has got you covered. Say hello to the powerful integration of .NET Aspire with Azure Functions, making your development process smoother than ever before.\nWith this release of Visual Studio, Azure Functions developers can enlist in .NET Aspire orchestration when creating a new Azure Functions project. This simple addition transforms your workflow by including an App Host and a Service Defaults project in your solution right from the get-go. Check out this video by James Montemagno showing you how to integrate .NET Aspire with Azure Functions today.\n\nGone are the days of tedious configurations. Now, setting up a new isolated Azure Functions project with .NET Aspire integration is as easy as checking a box. Upon creation, you’ll find an App Host and Service Defaults project seamlessly included in your solution, streamlining your development process and reducing setup time.\nEffortless integration with existing projects\nBut what if you have an existing Azure Functions project that you want to enhance with .NET Aspire? Visual Studio 2022 has you covered. Just like with ASP.NET Core apps, you can now add .NET Aspire support to your existing Azure Functions projects effortlessly. This ensures that you can leverage the power of .NET Aspire orchestration without having to start from scratch.\n\nReal-time monitoring and debugging\nThe integration doesn’t just stop at setup. Running or debugging an Azure Functions project with .NET Aspire support will launch the .NET Aspire dashboard in your browser. This powerful tool allows you to monitor the execution of your Azure Functions in real-time. You’ll see exactly how the .NET Aspire orchestrator is managing your functions, and you’ll have the ability to pause and resume execution directly from the dashboard.\n\nWe’re incredibly excited to bring this feature to you and can’t wait to see the innovative ways you’ll use Azure Functions within your .NET Aspire projects. Your continuous feedback has been instrumental in making Visual Studio better, and we look forward to your thoughts on this new integration.\nThe post .NET Aspire and Azure Functions integration preview appeared first on Visual Studio Blog.",
        "dc:creator": "Brady Gaster",
        "comments": "https://devblogs.microsoft.com/visualstudio/net-aspire-and-azure-functions-integration-preview/#comments",
        "content": "<p>Have you ever struggled with integrating serverless technology into your existing .NET projects? The new update in Visual Studio has got you covered. Say hello to the powerful integration of .NET Aspire with Azure Functions, making your development process smoother than ever before. With this release of Visual Studio, Azure Functions developers can enlist in [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/net-aspire-and-azure-functions-integration-preview/\">.NET Aspire and Azure Functions integration preview</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Have you ever struggled with integrating serverless technology into your existing .NET projects? The new update in Visual Studio has got you covered. Say hello to the powerful integration of .NET Aspire with Azure Functions, making your development process smoother than ever before. With this release of Visual Studio, Azure Functions developers can enlist in […]\nThe post .NET Aspire and Azure Functions integration preview appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=252964",
        "categories": [
          "Artificial Intelligence",
          "Data and Analytics",
          "Productivity",
          "Visual Studio",
          ".NET",
          "Aspire",
          "Azure Functions"
        ],
        "isoDate": "2025-04-09T12:00:19.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": [
      {
        "creator": "에디의 기술블로그",
        "title": "다시 개발을 시작했더니, 세상이 바뀌어 있었다.",
        "link": "https://brunch.co.kr/@@2MrI/866",
        "pubDate": "Sat, 12 Apr 2025 10:42:03 GMT",
        "author": "에디의 기술블로그",
        "content": "오랜만에 다시 개발을 시작했다. 실무에서 손을 뗀 지는 꽤 되었고, 딸아이가 태어난 이후 병원 치료에 집중해야 했기 때문에 자연스럽게 업무 시간도 줄어들었다. 나는 개발팀 리더는 실무에 깊이 관여하지 않아도 된다는 나름의 철학을 갖고 있었기에, 그 상황을 받아들이는 데 큰 저항은 없었다. 주기적으로 경영진과의 팀의 방향성을 설계하고, 개발조직이&nbsp;최고의 성과",
        "contentSnippet": "오랜만에 다시 개발을 시작했다. 실무에서 손을 뗀 지는 꽤 되었고, 딸아이가 태어난 이후 병원 치료에 집중해야 했기 때문에 자연스럽게 업무 시간도 줄어들었다. 나는 개발팀 리더는 실무에 깊이 관여하지 않아도 된다는 나름의 철학을 갖고 있었기에, 그 상황을 받아들이는 데 큰 저항은 없었다. 주기적으로 경영진과의 팀의 방향성을 설계하고, 개발조직이 최고의 성과",
        "guid": "https://brunch.co.kr/@@2MrI/866",
        "isoDate": "2025-04-12T10:42:03.000Z"
      }
    ]
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": [
      {
        "title": "Gemini 기반 MCP 서버 및 클라이언트 개발해 보기 ",
        "link": "http://daddynkidsmakers.blogspot.com/2025/04/gemini-mcp.html",
        "pubDate": "2025-04-13T00:58:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은&nbsp;Gemini 기반 MCP 서버 및 클라이언트를 개발하는 방법을 간략히 보여준다.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhm2o0xjgQULzjL4FnWbvTN0EZq5ejD3hsoffi1vYZcG1jzqXODlvmDVnpfybgf8a0TuJ0nqpuE46IfQgsX-dOFjTOSkx6lZTdUoEyz-F5lFJFfgQN-WqLbsldwwot3pxyBrJ2-ugwWwvzWGHM8erMtYTNwQheMSZi83krw0VkSqE80hrbTgbVWUX4YMxce\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"600\" data-original-width=\"1200\" height=\"200\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhm2o0xjgQULzjL4FnWbvTN0EZq5ejD3hsoffi1vYZcG1jzqXODlvmDVnpfybgf8a0TuJ0nqpuE46IfQgsX-dOFjTOSkx6lZTdUoEyz-F5lFJFfgQN-WqLbsldwwot3pxyBrJ2-ugwWwvzWGHM8erMtYTNwQheMSZi83krw0VkSqE80hrbTgbVWUX4YMxce=w400-h200\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\">MCP 기반 멀티 AI 에이전트 아키텍처 개념도</div><br /></div><div style=\"text-align: left;\">MCP의 개념과 상세한 동작 방식은 다음 글을 참고한다.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>개요</b></div><div style=\"text-align: left;\">MCP는 클라이언트-서버 구조를 따른다. 클라이언트는 서버의 MCP 도구를 사용하는 AI 앱이나 LLM을 의미한다. 서버는 MCP 도구를 공급하고, API, 데이터소스 인터페이스를 제공한다.&nbsp;</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">MCP를 통해 LLM이 해결하지 못하는 작업은 외부 시스템과 연결해 서비스 받을 수 있다.</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">MCP서버는 파일 시스템 조작, 웹 검색, 데이터베이스 조작, 버전 관리 등 다양한 도구를 제공할 수 있다.&nbsp;</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>제미니 LLM 기반 MCP 구조</b></div><div style=\"text-align: left;\">다음은 제미니 LLM 기반 MCP 구조 예시를 보여준다. 이 예는 비행기 예약 유스케이스를 구현한다.</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJi0KvcBwMZamL_qYjpkJ9L5wCc-L1FNm1XiMpxofuR_BheadHYrmEwVlCidd_Z0u5T01UFwpfrWr-xF23ENbqmEviz_Wqs3rc8VIbUxuHgCoAYP3kP8HU1HIpukYPk9sDOagmKn3vt_bqXFLXA1VDFEalzd9ySjbsxJMgvH9jCDLW6ktNyM917NZ_LnEg\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"755\" data-original-width=\"1067\" height=\"357\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJi0KvcBwMZamL_qYjpkJ9L5wCc-L1FNm1XiMpxofuR_BheadHYrmEwVlCidd_Z0u5T01UFwpfrWr-xF23ENbqmEviz_Wqs3rc8VIbUxuHgCoAYP3kP8HU1HIpukYPk9sDOagmKn3vt_bqXFLXA1VDFEalzd9ySjbsxJMgvH9jCDLW6ktNyM917NZ_LnEg=w505-h357\" width=\"505\" /></a></div>구조의 각 번호는 시퀀스 시나리오를 보여준다. 이 내용은 다음과 같다.</div><div style=\"text-align: left;\"><ol style=\"text-align: left;\"><li>MCP 호스트가 사용자 명령 입력. 예) 내일 인천에서 애틀란타 가는 비행편 찾기</li><ol><li>클라이언트 스크립트가 입력을 처리(CLIENT.PY)</li></ol><li>클라이언트가 MCP 서버 프로세스 시작(MCP-FLIGHT-SEARCH). STDIO 통신 채널 연결 및 관련 도구 검색</li><li>클라이언트가 사용자 명령에 대한 함수 호출 방법을 수신함</li><li>클라리언트가 함수 호출 방법에 대한 정확한 함수 호출 형식을 GEMINI에서 획득. 함수 호출 형식에 부합하는 적절한 MCP 도구를 서버에 호출. 서버의 도구 함수 호출 결과를 리턴</li><li>MCP 서버가 구글 항공편 검색을 위한 SerpAPI를 호출. 구글 항공편 데이터 질의.</li><li>구글 항공편 정보 리턴</li><li>서버에서 클라이언트로 해당 정보 리턴</li><li>클라이언트가 호스로 해당 정보 전달</li></ol><div><b>개발 환경</b></div>개발을 위한 최소한의 환경은 파이썬 3.8+이다. 이외 다음을 준비한다.</div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://console.cloud.google.com/\">Google Cloud</a> 에서 Project 생성</li></ul><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhfTBQEXNM-unXJdkC_ZpFiH8j6l1wDRupyOGynBHVdb0mfX81QoZKJ86O-9jZa3wX-1I5MQqT8J96KGVFXZvVTrAIzinVnJHEfkaGQzSiAv4GyfwycWhkgCgZHIkYL7UdX_lad4hVrJXan6rasu-xOmyARkM9yJk2xSD7sy63ua7TmbRvSgJdqne4P1vMm\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"806\" data-original-width=\"1747\" height=\"185\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhfTBQEXNM-unXJdkC_ZpFiH8j6l1wDRupyOGynBHVdb0mfX81QoZKJ86O-9jZa3wX-1I5MQqT8J96KGVFXZvVTrAIzinVnJHEfkaGQzSiAv4GyfwycWhkgCgZHIkYL7UdX_lad4hVrJXan6rasu-xOmyARkM9yJk2xSD7sy63ua7TmbRvSgJdqne4P1vMm=w400-h185\" width=\"400\" /></a></div></div><ul style=\"text-align: left;\"><li>Google <a href=\"https://aistudio.google.com/apikey\">Gemini API</a>&nbsp;키 획득</li></ul><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJk7hEyenBNWdRjlm114O1G5wlRXCEirzbE7wdn6agF01g36Ufj0KNq7XfOqNlLZ63WayLKcqZk8kXh4kYDqAhV4Zmx0rPdXu1re_vXdWxuAEAdlJ4fHRyLQZqeNnq6qTXUPyBHqoymW54Xj_ORkmaiK-wROnczvyrYjm8naTAFRmIV4F3-OKYYdLm-UK9\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"911\" data-original-width=\"1946\" height=\"150\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjJk7hEyenBNWdRjlm114O1G5wlRXCEirzbE7wdn6agF01g36Ufj0KNq7XfOqNlLZ63WayLKcqZk8kXh4kYDqAhV4Zmx0rPdXu1re_vXdWxuAEAdlJ4fHRyLQZqeNnq6qTXUPyBHqoymW54Xj_ORkmaiK-wROnczvyrYjm8naTAFRmIV4F3-OKYYdLm-UK9\" width=\"320\" /></a></div></div><ul style=\"text-align: left;\"><li><a href=\"https://serpapi.com/\">SerpAPI</a> 키 획득</li></ul><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjXELm_6bCIugZHmhrYyUzDynDZzL5Nb2e3QCQsP6aLcCbvf6nDVNsZmV5KL1tQdl94hzOE9noB2d07QKfNorNqHKdy_KgOGjWMp-EqDxe7AZqrWEyWmZVKF2i_pvkd4lor23dOOgpzhbA8v67icVqUHmQ6yeJ_kuU2pW9gA7eI9sdFdXzSKMTYh8HJ9Xrm\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"903\" data-original-width=\"1989\" height=\"145\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjXELm_6bCIugZHmhrYyUzDynDZzL5Nb2e3QCQsP6aLcCbvf6nDVNsZmV5KL1tQdl94hzOE9noB2d07QKfNorNqHKdy_KgOGjWMp-EqDxe7AZqrWEyWmZVKF2i_pvkd4lor23dOOgpzhbA8v67icVqUHmQ6yeJ_kuU2pW9gA7eI9sdFdXzSKMTYh8HJ9Xrm\" width=\"320\" /></a></div><br /></div><div>다음 종속성을 터미널에서 설치한다. google-genai는 google 생성AI 라이브러리이며, mcp는 MCP 서버 통신을 위한 파이썬 SDK이다.&nbsp;</div><div>pip install google-genai mcp</div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">환경변수를 설정한다.&nbsp;</div><div style=\"text-align: left;\"><div>export GEMINI_API_KEY=\"your-google-api-key\"</div><div>export SERP_API_KEY=\"your-serpapi-key\"</div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>항공편 검색 MCP 서버 설치</b></div><div style=\"text-align: left;\">MCP 프로토콜 공개 이후로 많은 MCP 서버가 개발되었다. 우리는 항공편 검색 MCP 서버 오픈소스인 <a href=\"https://pypi.org/project/mcp-flight-search/\">mcp-flgiht-search</a> 를 사용한다. 다음을 설치한다.</div><div style=\"text-align: left;\"><div>pip install mcp-flight-search</div><div><br /></div></div><div style=\"text-align: left;\"><b>코딩해보기</b></div><div style=\"text-align: left;\">다음과 같이 client.py를 코딩한다.&nbsp;</div><div style=\"text-align: left;\"><div style=\"background-color: #1f1f1f; color: #cccccc; font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; line-height: 16px; white-space: pre;\"><div><span style=\"color: #c586c0;\">import</span> os, sys, time, asyncio</div><div><span style=\"color: #c586c0;\">from</span> google <span style=\"color: #c586c0;\">import</span> genai</div><div><span style=\"color: #c586c0;\">from</span> google.genai <span style=\"color: #c586c0;\">import</span> types</div><div><span style=\"color: #c586c0;\">from</span> mcp <span style=\"color: #c586c0;\">import</span> ClientSession, StdioServerParameters</div><div><span style=\"color: #c586c0;\">from</span> mcp.client.stdio <span style=\"color: #c586c0;\">import</span> stdio_client</div><div><span style=\"color: #c586c0;\">from</span> dotenv <span style=\"color: #c586c0;\">import</span> load_dotenv</div><br /><div>load_dotenv()</div><br /><div>gemini_api_key <span style=\"color: #d4d4d4;\">=</span> os.getenv(<span style=\"color: #ce9178;\">\"GEMINI_API_KEY\"</span>)</div><div>serp_api_key <span style=\"color: #d4d4d4;\">=</span> os.getenv(<span style=\"color: #ce9178;\">\"SERP_API_KEY\"</span>)</div><br /><div>client <span style=\"color: #d4d4d4;\">=</span> genai.Client(<span style=\"color: #9cdcfe;\">api_key</span><span style=\"color: #d4d4d4;\">=</span>gemini_api_key)</div><br /><div>server_params <span style=\"color: #d4d4d4;\">=</span> StdioServerParameters(</div><div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">command</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"mcp-flight-search\"</span>,</div><div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">args</span><span style=\"color: #d4d4d4;\">=</span>[<span style=\"color: #ce9178;\">\"--connection_type\"</span>, <span style=\"color: #ce9178;\">\"stdio\"</span>],</div><div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">env</span><span style=\"color: #d4d4d4;\">=</span>{<span style=\"color: #ce9178;\">\"SERP_API_KEY\"</span>: serp_api_key},</div><div>)</div><br /><div><span style=\"color: #569cd6;\">async</span> <span style=\"color: #569cd6;\">def</span> <span style=\"color: #dcdcaa;\">run</span>():</div><div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">async</span> <span style=\"color: #c586c0;\">with</span> stdio_client(server_params) <span style=\"color: #c586c0;\">as</span> (read, write):  # 항공 예약 검색 도구 등록</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">async</span> <span style=\"color: #c586c0;\">with</span> ClientSession(read, write) <span style=\"color: #c586c0;\">as</span> session:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; prompt <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #569cd6;\">f</span><span style=\"color: #ce9178;\">\"Find Flights from Atlanta to Las Vegas 2025-08-15\"  # 사용자 질의 명령</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">await</span> session.initialize()</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mcp_tools <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #c586c0;\">await</span> session.list_tools()  # 도구 리스트 획득</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tools <span style=\"color: #d4d4d4;\">=</span> [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; types.Tool(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">function_declarations</span><span style=\"color: #d4d4d4;\">=</span>[</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"name\"</span>: tool.name,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"description\"</span>: tool.description,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"parameters\"</span>: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; k: v</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">for</span> k, v <span style=\"color: #c586c0;\">in</span> tool.inputSchema.items()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> k <span style=\"color: #569cd6;\">not</span> <span style=\"color: #569cd6;\">in</span> [<span style=\"color: #ce9178;\">\"additionalProperties\"</span>, <span style=\"color: #ce9178;\">\"$schema\"</span>]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]  # 해당 도구 함수 선언 생성</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">for</span> tool <span style=\"color: #c586c0;\">in</span> mcp_tools.tools</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; response <span style=\"color: #d4d4d4;\">=</span> client.models.generate_content(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">model</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ce9178;\">\"gemini-2.5-pro-exp-03-25\"</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">contents</span><span style=\"color: #d4d4d4;\">=</span>prompt,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">config</span><span style=\"color: #d4d4d4;\">=</span>types.GenerateContentConfig(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">temperature</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">0</span>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">tools</span><span style=\"color: #d4d4d4;\">=</span>tools,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),  # LLM 모델에 프롬프트 전달.</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> response.candidates[<span style=\"color: #b5cea8;\">0</span>].content.parts[<span style=\"color: #b5cea8;\">0</span>].function_call:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function_call <span style=\"color: #d4d4d4;\">=</span> response.candidates[<span style=\"color: #b5cea8;\">0</span>].content.parts[<span style=\"color: #b5cea8;\">0</span>].function_call # 함수호출정보</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; result <span style=\"color: #d4d4d4;\">=</span> <span style=\"color: #c586c0;\">await</span> session.call_tool(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function_call.name, <span style=\"color: #9cdcfe;\">arguments</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #4ec9b0;\">dict</span>(function_call.args)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )  # 도구 함수 호출</div><br /><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #ce9178;\">\"--- Formatted Result ---\"</span>) <span style=\"color: #6a9955;\"># Add header for clarity</span></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">try</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flight_data <span style=\"color: #d4d4d4;\">=</span> json.loads(result.content[<span style=\"color: #b5cea8;\">0</span>].text)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(json.dumps(flight_data, <span style=\"color: #9cdcfe;\">indent</span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #b5cea8;\">2</span>))</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">except</span> json.JSONDecodeError:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #ce9178;\">\"MCP server returned non-JSON response:\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(result.content[<span style=\"color: #b5cea8;\">0</span>].text)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">except</span> (<span style=\"color: #4ec9b0;\">IndexError</span>, <span style=\"color: #4ec9b0;\">AttributeError</span>):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #ce9178;\">\"Unexpected result structure from MCP server:\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #dcdcaa;\">print</span>(result)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">else</span>:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #ce9178;\">\"No function call was generated by the model.\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> response.text:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #dcdcaa;\">print</span>(<span style=\"color: #ce9178;\">\"Model response:\"</span>)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #dcdcaa;\">print</span>(response.text)</div><br /><div>asyncio.run(run()) # 클라이언트 실행</div></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\">실행한다. 그럼 프롬프트에 대해 LLM이 적절한 도구와 파라메터를 확인해 함수 호출 정보를 생성한다. 이를 call_tool로 호출한 결과가 표시된다&nbsp;</div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>레퍼런스</b></div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://medium.com/binome/introduction-to-graphite-an-event-driven-ai-agent-framework-540478130cd2\">Introducing Graphite — An Event Driven AI Agent Framework | by Craig Li, Ph.D | Binome | Apr, 2025 | Medium</a></li><li><a href=\"https://medium.com/google-cloud/model-context-protocol-mcp-with-google-gemini-llm-a-deep-dive-full-code-ea16e3fac9a3\">Model Context Protocol(MCP) with Google Gemini 2.5 Pro - Deep Dive , Google Cloud Gen AI | Google Cloud - Community</a></li><li><a href=\"https://github.com/arjunprabhulal/mcp-gemini-search?source=post_page-----ea16e3fac9a3---------------------------------------\">Model Context Protocol (MCP) with Gemini 2.5 Pro. Convert conversational queries into flight searches using Gemini's function calling capabilities and MCP's flight search tools</a></li></ul></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><br /></div>",
        "contentSnippet": "이 글은 Gemini 기반 MCP 서버 및 클라이언트를 개발하는 방법을 간략히 보여준다.\n\n\n\nMCP 기반 멀티 AI 에이전트 아키텍처 개념도\n\nMCP의 개념과 상세한 동작 방식은 다음 글을 참고한다.\n\n\n개요\nMCP는 클라이언트-서버 구조를 따른다. 클라이언트는 서버의 MCP 도구를 사용하는 AI 앱이나 LLM을 의미한다. 서버는 MCP 도구를 공급하고, API, 데이터소스 인터페이스를 제공한다. \n\n\nMCP를 통해 LLM이 해결하지 못하는 작업은 외부 시스템과 연결해 서비스 받을 수 있다.\n\n\nMCP서버는 파일 시스템 조작, 웹 검색, 데이터베이스 조작, 버전 관리 등 다양한 도구를 제공할 수 있다. \n\n\n제미니 LLM 기반 MCP 구조\n다음은 제미니 LLM 기반 MCP 구조 예시를 보여준다. 이 예는 비행기 예약 유스케이스를 구현한다.\n\n\n구조의 각 번호는 시퀀스 시나리오를 보여준다. 이 내용은 다음과 같다.\n\nMCP 호스트가 사용자 명령 입력. 예) 내일 인천에서 애틀란타 가는 비행편 찾기\n\n클라이언트 스크립트가 입력을 처리(CLIENT.PY)\n\n클라이언트가 MCP 서버 프로세스 시작(MCP-FLIGHT-SEARCH). STDIO 통신 채널 연결 및 관련 도구 검색\n클라이언트가 사용자 명령에 대한 함수 호출 방법을 수신함\n클라리언트가 함수 호출 방법에 대한 정확한 함수 호출 형식을 GEMINI에서 획득. 함수 호출 형식에 부합하는 적절한 MCP 도구를 서버에 호출. 서버의 도구 함수 호출 결과를 리턴\nMCP 서버가 구글 항공편 검색을 위한 SerpAPI를 호출. 구글 항공편 데이터 질의.\n구글 항공편 정보 리턴\n서버에서 클라이언트로 해당 정보 리턴\n클라이언트가 호스로 해당 정보 전달\n\n개발 환경\n개발을 위한 최소한의 환경은 파이썬 3.8+이다. 이외 다음을 준비한다.\n\nGoogle Cloud 에서 Project 생성\n\n\n\nGoogle Gemini API 키 획득\n\n\n\nSerpAPI 키 획득\n\n\n\n다음 종속성을 터미널에서 설치한다. google-genai는 google 생성AI 라이브러리이며, mcp는 MCP 서버 통신을 위한 파이썬 SDK이다. \npip install google-genai mcp\n\n\n환경변수를 설정한다. \n\nexport GEMINI_API_KEY=\"your-google-api-key\"\nexport SERP_API_KEY=\"your-serpapi-key\"\n\n\n항공편 검색 MCP 서버 설치\nMCP 프로토콜 공개 이후로 많은 MCP 서버가 개발되었다. 우리는 항공편 검색 MCP 서버 오픈소스인 mcp-flgiht-search 를 사용한다. 다음을 설치한다.\n\npip install mcp-flight-search\n\n\n코딩해보기\n다음과 같이 client.py를 코딩한다. \n\nimport os, sys, time, asyncio\nfrom google import genai\nfrom google.genai import types\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ngemini_api_key = os.getenv(\"GEMINI_API_KEY\")\nserp_api_key = os.getenv(\"SERP_API_KEY\")\n\nclient = genai.Client(api_key=gemini_api_key)\n\nserver_params = StdioServerParameters(\n    command=\"mcp-flight-search\",\n    args=[\"--connection_type\", \"stdio\"],\n    env={\"SERP_API_KEY\": serp_api_key},\n)\n\nasync def run():\n    async with stdio_client(server_params) as (read, write):  # 항공 예약 검색 도구 등록\n        async with ClientSession(read, write) as session:\n            prompt = f\"Find Flights from Atlanta to Las Vegas 2025-08-15\"  # 사용자 질의 명령\n            await session.initialize()\n\n            mcp_tools = await session.list_tools()  # 도구 리스트 획득\n            tools = [\n                types.Tool(\n                    function_declarations=[\n                        {\n                            \"name\": tool.name,\n                            \"description\": tool.description,\n                            \"parameters\": {\n                                k: v\n                                for k, v in tool.inputSchema.items()\n                                if k not in [\"additionalProperties\", \"$schema\"]\n                            },\n                        }\n                    ]  # 해당 도구 함수 선언 생성\n                )\n                for tool in mcp_tools.tools\n            ]\n\n            response = client.models.generate_content(\n                model=\"gemini-2.5-pro-exp-03-25\",\n                contents=prompt,\n                config=types.GenerateContentConfig(\n                    temperature=0,\n                    tools=tools,\n                ),  # LLM 모델에 프롬프트 전달.\n            )\n\n            if response.candidates[0].content.parts[0].function_call:\n                function_call = response.candidates[0].content.parts[0].function_call # 함수호출정보\n\n                result = await session.call_tool(\n                    function_call.name, arguments=dict(function_call.args)\n                )  # 도구 함수 호출\n\n                print(\"--- Formatted Result ---\") # Add header for clarity\n                try:\n                    flight_data = json.loads(result.content[0].text)\n                    print(json.dumps(flight_data, indent=2))\n                except json.JSONDecodeError:\n                    print(\"MCP server returned non-JSON response:\")\n                    print(result.content[0].text)\n                except (IndexError, AttributeError):\n                     print(\"Unexpected result structure from MCP server:\")\n                     print(result)\n            else:\n                print(\"No function call was generated by the model.\")\n                if response.text:\n                     print(\"Model response:\")\n                     print(response.text)\n\nasyncio.run(run()) # 클라이언트 실행\n\n\n\n실행한다. 그럼 프롬프트에 대해 LLM이 적절한 도구와 파라메터를 확인해 함수 호출 정보를 생성한다. 이를 call_tool로 호출한 결과가 표시된다 \n\n\n레퍼런스\n\nIntroducing Graphite — An Event Driven AI Agent Framework | by Craig Li, Ph.D | Binome | Apr, 2025 | Medium\nModel Context Protocol(MCP) with Google Gemini 2.5 Pro - Deep Dive , Google Cloud Gen AI | Google Cloud - Community\nModel Context Protocol (MCP) with Gemini 2.5 Pro. Convert conversational queries into flight searches using Gemini's function calling capabilities and MCP's flight search tools",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-90111100907465866",
        "isoDate": "2025-04-13T00:58:00.000Z"
      }
    ]
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": [
      {
        "creator": "흰끼끼",
        "title": "블루베리 효능 총정리: 노화 방지에 탁월한 이유 5가지",
        "link": "http://app-developer.tistory.com/entry/%EB%B8%94%EB%A3%A8%EB%B2%A0%EB%A6%AC-%ED%9A%A8%EB%8A%A5-%EC%B4%9D%EC%A0%95%EB%A6%AC-%EB%85%B8%ED%99%94-%EB%B0%A9%EC%A7%80%EC%97%90-%ED%83%81%EC%9B%94%ED%95%9C-%EC%9D%B4%EC%9C%A0-5%EA%B0%80%EC%A7%80",
        "pubDate": "Sun, 13 Apr 2025 20:44:48 +0900",
        "author": "흰끼끼",
        "comments": "http://app-developer.tistory.com/entry/%EB%B8%94%EB%A3%A8%EB%B2%A0%EB%A6%AC-%ED%9A%A8%EB%8A%A5-%EC%B4%9D%EC%A0%95%EB%A6%AC-%EB%85%B8%ED%99%94-%EB%B0%A9%EC%A7%80%EC%97%90-%ED%83%81%EC%9B%94%ED%95%9C-%EC%9D%B4%EC%9C%A0-5%EA%B0%80%EC%A7%80#entry207comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ChatGPT Image 2025년 4월 13일 오후 08_43_47.png\" data-origin-width=\"1536\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/c18gA9/btsNjFgQZIm/4YdksfRmkM58ehiPktlCl1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/c18gA9/btsNjFgQZIm/4YdksfRmkM58ehiPktlCl1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/c18gA9/btsNjFgQZIm/4YdksfRmkM58ehiPktlCl1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc18gA9%2FbtsNjFgQZIm%2F4YdksfRmkM58ehiPktlCl1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1536\" height=\"1024\" data-filename=\"ChatGPT Image 2025년 4월 13일 오후 08_43_47.png\" data-origin-width=\"1536\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p>현대인의 건강식으로 각광받고 있는 <strong>블루베리</strong>, 그냥 맛있는 과일일 뿐이라고 생각하셨다면 오산입니다. 특히 <strong>노화를 늦추는 항산화 식품</strong>으로 블루베리는 수많은 연구에서 그 효과가 입증되고 있는데요. 이번 글에서는 블루베리가 <strong>왜 노화 방지에 탁월한지</strong>, 그 이유 5가지를 집중적으로 알아보겠습니다.</p>\n<h2>1. 강력한 항산화 성분, 안토시아닌의 힘</h2>\n<p>블루베리는 <strong>안토시아닌(Anthocyanin)</strong>이라는 강력한 항산화 성분이 풍부하게 들어 있습니다.<br>이 성분은 활성산소로부터 세포를 보호하여 <strong>세포 노화를 늦추는 효과</strong>를 합니다.<br>피부 탄력, 주름 개선, 면역력 강화에도 큰 도움을 줍니다.</p>\n<h2>2. 뇌 기능 보호 및 인지 능력 향상</h2>\n<p>노화의 대표적인 증상 중 하나는 <strong>기억력 저하</strong>와 같은 뇌 기능 감소입니다.<br>블루베리 섭취는 <strong>신경세포 손상을 줄이고, 뇌 신호 전달을 촉진</strong>하여<br>인지 능력 향상 및 <strong>치매 예방 효과</strong>까지 기대할 수 있습니다.</p>\n<h2>3. 심혈관 건강 개선으로 노화 예방</h2>\n<p>나이가 들수록 혈관 건강은 더 중요해지죠.<br>블루베리는 <strong>혈관을 깨끗하게 유지하고, 혈압과 콜레스테롤 수치를 낮추는 데</strong> 도움을 줍니다.<br>이로 인해 <strong>심혈관 질환 예방</strong>은 물론, 신체 전체의 노화 속도도 늦출 수 있습니다.</p>\n<h2>4. 면역력 강화로 각종 질병 예방</h2>\n<p>노화가 진행되면 <strong>면역 시스템이 약화</strong>되기 쉽습니다.<br>블루베리 속 <strong>비타민 C, K, 망간 등의 영양소</strong>는 면역 기능을 강화해<br>감기나 바이러스, 염증성 질환 등 각종 <strong>질병으로부터 몸을 보호</strong>해 줍니다.</p>\n<h2>5. 피부 건강 개선과 안티에이징 효과</h2>\n<p>블루베리는 <strong>피부 트러블 개선과 피부 톤 개선</strong>에도 효과적입니다.<br>항산화 작용으로 인해 피부의 노화 원인인 <strong>산화 스트레스와 자외선 손상</strong>을 줄여주며,<br>피부에 <strong>생기와 탄력</strong>을 더해주는 데 도움을 줍니다.</p>\n<h2>✅ 결론</h2>\n<p>블루베리는 단순한 과일이 아니라, <strong>노화 방지를 위한 자연의 선물</strong>입니다.<br>매일 소량이라도 꾸준히 섭취한다면, 건강은 물론 <strong>젊음까지 지킬 수 있는 최고의 슈퍼푸드</strong>죠.<br>오늘부터 식단에 블루베리를 더해보는 건 어떠세요?</p>\n<blockquote data-ke-style=\"style1\"><p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Serif KR';\"><p>  <strong>팁</strong>: 신선한 블루베리뿐만 아니라, 냉동 블루베리나 블루베리 파우더도 동일한 효능을 기대할 수 있어요!</p>\n</span></p></blockquote>",
        "contentSnippet": "현대인의 건강식으로 각광받고 있는 블루베리, 그냥 맛있는 과일일 뿐이라고 생각하셨다면 오산입니다. 특히 노화를 늦추는 항산화 식품으로 블루베리는 수많은 연구에서 그 효과가 입증되고 있는데요. 이번 글에서는 블루베리가 왜 노화 방지에 탁월한지, 그 이유 5가지를 집중적으로 알아보겠습니다.\n1. 강력한 항산화 성분, 안토시아닌의 힘\n블루베리는 안토시아닌(Anthocyanin)이라는 강력한 항산화 성분이 풍부하게 들어 있습니다.\n이 성분은 활성산소로부터 세포를 보호하여 세포 노화를 늦추는 효과를 합니다.\n피부 탄력, 주름 개선, 면역력 강화에도 큰 도움을 줍니다.\n2. 뇌 기능 보호 및 인지 능력 향상\n노화의 대표적인 증상 중 하나는 기억력 저하와 같은 뇌 기능 감소입니다.\n블루베리 섭취는 신경세포 손상을 줄이고, 뇌 신호 전달을 촉진하여\n인지 능력 향상 및 치매 예방 효과까지 기대할 수 있습니다.\n3. 심혈관 건강 개선으로 노화 예방\n나이가 들수록 혈관 건강은 더 중요해지죠.\n블루베리는 혈관을 깨끗하게 유지하고, 혈압과 콜레스테롤 수치를 낮추는 데 도움을 줍니다.\n이로 인해 심혈관 질환 예방은 물론, 신체 전체의 노화 속도도 늦출 수 있습니다.\n4. 면역력 강화로 각종 질병 예방\n노화가 진행되면 면역 시스템이 약화되기 쉽습니다.\n블루베리 속 비타민 C, K, 망간 등의 영양소는 면역 기능을 강화해\n감기나 바이러스, 염증성 질환 등 각종 질병으로부터 몸을 보호해 줍니다.\n5. 피부 건강 개선과 안티에이징 효과\n블루베리는 피부 트러블 개선과 피부 톤 개선에도 효과적입니다.\n항산화 작용으로 인해 피부의 노화 원인인 산화 스트레스와 자외선 손상을 줄여주며,\n피부에 생기와 탄력을 더해주는 데 도움을 줍니다.\n✅ 결론\n블루베리는 단순한 과일이 아니라, 노화 방지를 위한 자연의 선물입니다.\n매일 소량이라도 꾸준히 섭취한다면, 건강은 물론 젊음까지 지킬 수 있는 최고의 슈퍼푸드죠.\n오늘부터 식단에 블루베리를 더해보는 건 어떠세요?\n\n  팁: 신선한 블루베리뿐만 아니라, 냉동 블루베리나 블루베리 파우더도 동일한 효능을 기대할 수 있어요!",
        "guid": "http://app-developer.tistory.com/207",
        "categories": [
          "건강/노화 및 웰에이징"
        ],
        "isoDate": "2025-04-13T11:44:48.000Z"
      },
      {
        "creator": "흰끼끼",
        "title": "배우 김수현, 故 김새론과의 의혹 해명에도&hellip;&ldquo;밤 11시에 닭볶음탕?&rdquo; 여론은 여전히 싸늘",
        "link": "http://app-developer.tistory.com/entry/%EB%B0%B0%EC%9A%B0-%EA%B9%80%EC%88%98%ED%98%84-%E6%95%85-%EA%B9%80%EC%83%88%EB%A1%A0%EA%B3%BC%EC%9D%98-%EC%9D%98%ED%98%B9-%ED%95%B4%EB%AA%85%EC%97%90%EB%8F%84%E2%80%A6%E2%80%9C%EB%B0%A4-11%EC%8B%9C%EC%97%90-%EB%8B%AD%EB%B3%B6%EC%9D%8C%ED%83%95%E2%80%9D-%EC%97%AC%EB%A1%A0%EC%9D%80-%EC%97%AC%EC%A0%84%ED%9E%88-%EC%8B%B8%EB%8A%98",
        "pubDate": "Fri, 11 Apr 2025 23:18:10 +0900",
        "author": "흰끼끼",
        "comments": "http://app-developer.tistory.com/entry/%EB%B0%B0%EC%9A%B0-%EA%B9%80%EC%88%98%ED%98%84-%E6%95%85-%EA%B9%80%EC%83%88%EB%A1%A0%EA%B3%BC%EC%9D%98-%EC%9D%98%ED%98%B9-%ED%95%B4%EB%AA%85%EC%97%90%EB%8F%84%E2%80%A6%E2%80%9C%EB%B0%A4-11%EC%8B%9C%EC%97%90-%EB%8B%AD%EB%B3%B6%EC%9D%8C%ED%83%95%E2%80%9D-%EC%97%AC%EB%A1%A0%EC%9D%80-%EC%97%AC%EC%A0%84%ED%9E%88-%EC%8B%B8%EB%8A%98#entry206comment",
        "content": "<p><figure class=\"imageblock widthContent\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"696\" data-origin-height=\"681\"><span data-url=\"https://blog.kakaocdn.net/dn/b3U4cn/btsNiwX3ewn/EmA9ff23k5aM7oyFfeVjh1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/b3U4cn/btsNiwX3ewn/EmA9ff23k5aM7oyFfeVjh1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/b3U4cn/btsNiwX3ewn/EmA9ff23k5aM7oyFfeVjh1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb3U4cn%2FbtsNiwX3ewn%2FEmA9ff23k5aM7oyFfeVjh1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"696\" height=\"681\" data-origin-width=\"696\" data-origin-height=\"681\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">2025년 3월 31일, 배우 <b>김수현</b>이 긴급 기자회견을 열고 <b>故 김새론과의 관계</b>에 대한 입장을 밝혔습니다. 하지만 이 해명 이후에도 <b>대중의 의문은 가라앉지 않고</b> 있습니다. 그 중심에는 &ldquo;고등학교 2학년, 17세였던 김새론이 <b>밤 11시에 김수현 가족이 있는 집에서 닭볶음탕을 만들었다는 정황</b>&rdquo;이 있습니다.</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">▶ &ldquo;연인이 아니었다&rdquo;는 주장&hellip;하지만 그 밤의 정황은?</h2>\n<p data-ke-size=\"size16\">김수현 측은 공식 입장에서 <b>&ldquo;당시 연인 관계가 아니었고, 가족들도 함께 있었다&rdquo;고 해명</b>했습니다. 논란이 된 영상은 2018년 6월 촬영된 것으로, 당시 김새론은 고등학교 2학년, <b>만 17세의 미성년자</b>였습니다.</p>\n<p data-ke-size=\"size16\">해당 영상은 <b>밤 11시 20분경</b> 촬영되었으며, <b>식탁 위에는 소주병과 소주잔이 놓여 있었다는 점</b>이 확인되며 더욱 논란이 커지고 있습니다. 소속사는 단순한 가족 식사 자리였다고 주장하지만, 많은 이들은 이 상황 자체를 납득하기 어렵다는 반응입니다.</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">▶ &ldquo;사귀지도 않았는데, 밤 11시에 가족 집에서 요리?&rdquo;</h2>\n<p data-ke-size=\"size16\">온라인 커뮤니티와 SNS에서는 다양한 반응이 이어지고 있습니다:</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>&ldquo;사귀지 않았다면 오히려 더 이상한 상황&rdquo;</li>\n<li>&ldquo;그 시간에 미성년자가 남자 집에 있었다는 것 자체가 부적절하다&rdquo;</li>\n<li>&ldquo;친구 사이여도 집에 돌려보낼 시간 아닌가?&rdquo;</li>\n</ul>\n<p data-ke-size=\"size16\">또한, 김새론이 김수현에게 보냈다는 <b>카카오톡 메시지</b> 내용도 공개되었습니다. 메시지에는 &ldquo;보고 싶어&rdquo;, &ldquo;언제 안고 잘 수 있어?&rdquo; 등 <b>연인 사이로 보일 수 있는 문구</b>가 담겨 있었지만, 김수현 측은 <b>&ldquo;전면 조작된 메시지&rdquo;라며 원본 데이터 제출을 요구</b>한 상태입니다.</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">▶ 해명에도 남은 의문&hellip;김수현 이미지 타격 불가피</h2>\n<p data-ke-size=\"size16\">김수현 소속사는 <b>&ldquo;미성년자와의 교제는 결단코 없었다&rdquo;</b>며 법적 대응을 시사하고 있지만, 유튜브 채널 <b>&lsquo;가세연&rsquo; 측의 공세는 계속</b>되고 있습니다. 특히 &ldquo;사귄 적 없다&rdquo;는 해명은 <b>&lsquo;그루밍&rsquo; 논란</b>으로 이어지며, 연예계 전반에 큰 파장을 주고 있습니다.</p>\n<p data-ke-size=\"size16\">한 프로파일러는 해당 상황에 대해 <b>&ldquo;상대를 잘못 골랐다&rdquo;</b>며 사안의 심각성을 지적했습니다. 이번 논란은 단순한 해명이 아닌, <b>도덕성과 윤리적 판단에 대한 대중의 평가</b>로 이어지고 있으며, 김수현의 이미지 회복은 <b>당분간 쉽지 않을 것</b>으로 보입니다.</p>\n<hr data-ke-style=\"style1\" />\n<blockquote data-ke-style=\"style1\">\n<p data-ke-size=\"size16\">⚠️ 본 포스팅은 대중에 공개된 기사 및 자료에 기반해 작성된 콘텐츠로, 사실 여부에 대한 판단은 독자에게 맡깁니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "2025년 3월 31일, 배우 김수현이 긴급 기자회견을 열고 故 김새론과의 관계에 대한 입장을 밝혔습니다. 하지만 이 해명 이후에도 대중의 의문은 가라앉지 않고 있습니다. 그 중심에는 “고등학교 2학년, 17세였던 김새론이 밤 11시에 김수현 가족이 있는 집에서 닭볶음탕을 만들었다는 정황”이 있습니다.\n▶ “연인이 아니었다”는 주장…하지만 그 밤의 정황은?\n김수현 측은 공식 입장에서 “당시 연인 관계가 아니었고, 가족들도 함께 있었다”고 해명했습니다. 논란이 된 영상은 2018년 6월 촬영된 것으로, 당시 김새론은 고등학교 2학년, 만 17세의 미성년자였습니다.\n해당 영상은 밤 11시 20분경 촬영되었으며, 식탁 위에는 소주병과 소주잔이 놓여 있었다는 점이 확인되며 더욱 논란이 커지고 있습니다. 소속사는 단순한 가족 식사 자리였다고 주장하지만, 많은 이들은 이 상황 자체를 납득하기 어렵다는 반응입니다.\n▶ “사귀지도 않았는데, 밤 11시에 가족 집에서 요리?”\n온라인 커뮤니티와 SNS에서는 다양한 반응이 이어지고 있습니다:\n“사귀지 않았다면 오히려 더 이상한 상황”\n“그 시간에 미성년자가 남자 집에 있었다는 것 자체가 부적절하다”\n“친구 사이여도 집에 돌려보낼 시간 아닌가?”\n또한, 김새론이 김수현에게 보냈다는 카카오톡 메시지 내용도 공개되었습니다. 메시지에는 “보고 싶어”, “언제 안고 잘 수 있어?” 등 연인 사이로 보일 수 있는 문구가 담겨 있었지만, 김수현 측은 “전면 조작된 메시지”라며 원본 데이터 제출을 요구한 상태입니다.\n▶ 해명에도 남은 의문…김수현 이미지 타격 불가피\n김수현 소속사는 “미성년자와의 교제는 결단코 없었다”며 법적 대응을 시사하고 있지만, 유튜브 채널 ‘가세연’ 측의 공세는 계속되고 있습니다. 특히 “사귄 적 없다”는 해명은 ‘그루밍’ 논란으로 이어지며, 연예계 전반에 큰 파장을 주고 있습니다.\n한 프로파일러는 해당 상황에 대해 “상대를 잘못 골랐다”며 사안의 심각성을 지적했습니다. 이번 논란은 단순한 해명이 아닌, 도덕성과 윤리적 판단에 대한 대중의 평가로 이어지고 있으며, 김수현의 이미지 회복은 당분간 쉽지 않을 것으로 보입니다.\n⚠️ 본 포스팅은 대중에 공개된 기사 및 자료에 기반해 작성된 콘텐츠로, 사실 여부에 대한 판단은 독자에게 맡깁니다.",
        "guid": "http://app-developer.tistory.com/206",
        "isoDate": "2025-04-11T14:18:10.000Z"
      }
    ]
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": [
      {
        "title": "Composable Architecture는 만들었는데 문제가 있었네? 개선해보자.",
        "link": "https://thdev.tech/architecture/2025/04/15/Android-Architecture-02/",
        "pubDate": "Tue, 15 Apr 2025 00:00:00 +0000",
        "content": "<p>이전 글에서 Composable Architecutre를 소개하는 내용을 담아보았는데, 몇 가지 문제점을 발견하여 이를 개선한 내용을 다시 정리하는 글이다.</p>\n\n<p>크게 2가지 문제점을 확인하였다.</p>\n\n<ul>\n  <li>ViewModel 내 Reducer 처리 후 자동 next</li>\n  <li>Action 스트림 처리를 위한 싱글턴 활용 시 Lifecycle 문제</li>\n</ul>\n\n<p>이 2가지 문제점을 해결하기 위해 코드를 어떻게 수정했는지, 그리고 더 나은 방법은 없을지 고민한 과정을 정리해본다.</p>\n\n<h3>이 글에서는</h3>\n<ul>\n  <li>기존 아키텍처의 구조적 문제점을 파악한다.</li>\n  <li>문제 해결 과정과 더 나은 구조에 대한 고민을 공유한다.</li>\n  <li>기본적인 내용을 담지 않고있어 앞선 글을 참고하면 좋다.</li>\n</ul>\n\n<!--more-->\n\n<h2>Action이란?</h2>\n\n<p>View와 ViewModel 사이의 통신을 어떻게 더 간결하게 할 수 있을까? Jetpack Compose 환경에서는 <a href=\"https://developer.android.com/develop/ui/compose/compositionlocal\">CompositionLocal - link</a>을 활용하는 방법이 있다. 저는 이 방식을 응용하여 Composable 함수 어디서든 이벤트 처리를 쉽게 호출할 수 있도록 Action이라는 개념을 만들었다.</p>\n\n<p>Flow를 기반으로 한 Action을 사용한 이유를 설명하기 위해, 먼저 일반적인 View-ViewModel 간 통신 방식의 예시 코드를 살펴보자.</p>\n\n<p>Composable 함수에서 ViewModel 인스턴스를 파라미터로 직접 전달받아 사용하는 것이 일반적이다. 하지만 이 방식은 Composable 함수의 깊이가 깊어지거나 개수가 많아질수록 ViewModel을 어디까지 전달해야 할지 고민이 필요하며, 구조가 복잡해지면 자연스럽게 보일러플레이트 코드가 늘어나는 단점이 있다.</p>\n\n<h4>ViewModel을 직접 사용한 함수 호출</h4>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeScreen</span><span class=\"p\">(</span><span class=\"n\">someViewModel</span><span class=\"p\">:</span> <span class=\"nc\">SomeViewModel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">doSomething</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">doSomethingTwo</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">doSomethingThree</span><span class=\"p\">()</span> <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">SomeViewModel</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">fun</span> <span class=\"nf\">doSomething</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n  <span class=\"k\">fun</span> <span class=\"nf\">doSomethingTwo</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n  <span class=\"k\">fun</span> <span class=\"nf\">doSomethingThree</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4>ViewModel 함수를 sealed interface로 통합하여 호출하는 경우</h4>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">sealed</span> <span class=\"kd\">interface</span> <span class=\"nc\">SomeAction</span> <span class=\"p\">{</span>\n    <span class=\"n\">data</span> <span class=\"kd\">object</span> <span class=\"nc\">ActionOne</span> <span class=\"p\">:</span> <span class=\"nc\">SomeAction</span>\n    <span class=\"n\">data</span> <span class=\"kd\">object</span> <span class=\"nc\">ActionTwo</span> <span class=\"p\">:</span> <span class=\"nc\">SomeAction</span>\n    <span class=\"kd\">data class</span> <span class=\"nc\">ActionThree</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">item</span><span class=\"p\">:</span> <span class=\"nc\">Any</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">SomeAction</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeScreen</span><span class=\"p\">(</span><span class=\"n\">someViewModel</span><span class=\"p\">:</span> <span class=\"nc\">SomeViewModel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">val</span> <span class=\"py\">item</span> <span class=\"p\">=</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span> <span class=\"c1\">// 예시 데이터</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionOne</span><span class=\"p\">)</span> <span class=\"p\">})</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionTwo</span><span class=\"p\">)</span> <span class=\"p\">})</span>\n  <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">someViewModel</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionThree</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span> <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">SomeViewModel</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">fun</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nc\">SomeAction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">is</span> <span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionOne</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n      <span class=\"k\">is</span> <span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionTwo</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n      <span class=\"k\">is</span> <span class=\"nc\">SomeAction</span><span class=\"p\">.</span><span class=\"nc\">ActionThree</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4>제가 활용하는 방식 (CompositionLocal 활용)</h4>\n\n<p>위 방식들은 ViewModel을 계속 전달하거나, <code class=\"language-plaintext highlighter-rouge\">onClick: () -&gt; Unit</code> 같은 콜백을 계속 만들어 전달해야 하는 번거로움이 있다. 특히 콜백 방식은 이벤트 통합 과정에서 N개의 고차 함수(Higher-Order function)가 만들어질 수 있다.</p>\n\n<p>그래서 Compose에서 제공하는 <a href=\"https://developer.android.com/develop/ui/compose/compositionlocal\">Locally scoped - link</a>을 활용하여 Action 객체에 쉽게 접근하는 방법을 사용하고 있습니다. (자세한 활용법은 이전 글 <a href=\"https://thdev.tech/architecture/2025/02/02/Android-Architecture-01/\">컴포즈에 사용할 Composable Architecture 설명</a>을 참고해주세요.)</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Action 정의 (예시)</span>\n<span class=\"k\">sealed</span> <span class=\"kd\">interface</span> <span class=\"nc\">MyScreenAction</span> <span class=\"p\">:</span> <span class=\"nc\">CaAction</span> <span class=\"p\">{</span> <span class=\"c1\">// CaAction은 마커 인터페이스 역할</span>\n    <span class=\"n\">data</span> <span class=\"kd\">object</span> <span class=\"nc\">ButtonClick</span> <span class=\"p\">:</span> <span class=\"nc\">MyScreenAction</span>\n    <span class=\"kd\">data class</span> <span class=\"nc\">TextTyped</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">MyScreenAction</span>\n    <span class=\"kd\">data class</span> <span class=\"nc\">SwitchChanged</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">isOn</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">MyScreenAction</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Composable View</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// CompositionLocal을 통해 ActionDispatcher 획득</span>\n  <span class=\"kd\">val</span> <span class=\"py\">actionDispatcher</span> <span class=\"p\">=</span> <span class=\"nc\">LocalActionDispatcher</span><span class=\"p\">.</span><span class=\"n\">current</span>\n  <span class=\"kd\">var</span> <span class=\"py\">textState</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n  <span class=\"kd\">var</span> <span class=\"py\">switchState</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"k\">false</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n  <span class=\"nc\">Column</span> <span class=\"p\">{</span>\n      <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">ButtonClick</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n          <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Click Me\"</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n      <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n          <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">textState</span><span class=\"p\">,</span>\n          <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n              <span class=\"n\">textState</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n              <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">TextTyped</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">)</span>\n      <span class=\"nc\">Switch</span><span class=\"p\">(</span>\n          <span class=\"n\">checked</span> <span class=\"p\">=</span> <span class=\"n\">switchState</span><span class=\"p\">,</span>\n          <span class=\"n\">onCheckedChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n              <span class=\"n\">switchState</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n              <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">SwitchChanged</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ViewModel</span>\n<span class=\"kd\">class</span> <span class=\"nc\">SomeViewModel</span><span class=\"p\">(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">flowCaActionStream</span><span class=\"p\">:</span> <span class=\"nc\">FlowCaActionStream</span> <span class=\"c1\">// Action 스트림 주입</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">CaViewModel</span><span class=\"p\">&lt;</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">&gt;(</span><span class=\"n\">flowCaActionStream</span><span class=\"p\">,</span> <span class=\"nc\">MyScreenAction</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 수신할 Action 타입 지정</span>\n\n    <span class=\"c1\">// CaViewModel 내부에서 flowAction을 통해 MyScreenAction 타입의 이벤트만 필터링하여 수신</span>\n    <span class=\"c1\">// reducer 메소드에서 각 Action 처리 로직 구현</span>\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nc\">MyScreenAction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">is</span> <span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">ButtonClick</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 버튼 클릭 처리 로직</span>\n                <span class=\"nc\">Log</span><span class=\"p\">.</span><span class=\"nf\">d</span><span class=\"p\">(</span><span class=\"s\">\"SomeViewModel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Button Clicked\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">is</span> <span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">TextTyped</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 텍스트 입력 처리 로직</span>\n                <span class=\"nc\">Log</span><span class=\"p\">.</span><span class=\"nf\">d</span><span class=\"p\">(</span><span class=\"s\">\"SomeViewModel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Text Typed: ${action.text}\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">is</span> <span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">SwitchChanged</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 스위치 변경 처리 로직</span>\n                <span class=\"nc\">Log</span><span class=\"p\">.</span><span class=\"nf\">d</span><span class=\"p\">(</span><span class=\"s\">\"SomeViewModel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Switch Changed: ${action.isOn}\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2>사용성 측면에서의 개선</h2>\n\n<p>필요한 Action을 <code class=\"language-plaintext highlighter-rouge\">LocalAction.current</code>를 통해 어디서든 호출할 수 있으므로, ViewModel 인스턴스를 계속해서 하위 Composable로 전달할 필요가 없어 개발 편의성이 향상될 수 있다.</p>\n\n<p>CompositionLocal에 적절한 기본값이나 테스트용 구현체를 제공하면 Preview 동작에도 문제가 없다. 다만, Preview에서 특정 UI 요소의 상태 변화나 인터랙션을 테스트하려면, 선언형 UI의 원칙에 따라 <a href=\"https://developer.android.com/develop/ui/compose/state\">Stateless - link</a>한 Composable을 만들고 상태와 이벤트를 외부에서 주입하는 것이 좋다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Stateless Composable 예시</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeContent</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">isSwitchOn</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span><span class=\"p\">,</span>\n    <span class=\"n\">onButtonClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n    <span class=\"n\">onTextTyped</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n    <span class=\"n\">onSwitchChange</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nc\">Boolean</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n    <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span> <span class=\"c1\">// Modifier 추가 권장</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Button</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onButtonClick</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* ... */</span> <span class=\"p\">}</span>\n        <span class=\"nc\">TextField</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"n\">onTextTyped</span><span class=\"p\">)</span>\n        <span class=\"nc\">Switch</span><span class=\"p\">(</span><span class=\"n\">checked</span> <span class=\"p\">=</span> <span class=\"n\">isSwitchOn</span><span class=\"p\">,</span> <span class=\"n\">onCheckedChange</span> <span class=\"p\">=</span> <span class=\"n\">onSwitchChange</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Statefull Composable (ViewModel과 연결)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeScreen</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">:</span> <span class=\"nc\">SomeViewModel</span> <span class=\"p\">=</span> <span class=\"nf\">hiltViewModel</span><span class=\"p\">())</span> <span class=\"p\">{</span> <span class=\"c1\">// Hilt 등 DI 활용 예시</span>\n    <span class=\"kd\">val</span> <span class=\"py\">actionDispatcher</span> <span class=\"p\">=</span> <span class=\"nc\">LocalActionDispatcher</span><span class=\"p\">.</span><span class=\"n\">current</span> <span class=\"c1\">// Action 발송기</span>\n    <span class=\"c1\">// ViewModel로부터 상태를 구독하거나, 필요한 상태를 여기서 관리</span>\n    <span class=\"kd\">val</span> <span class=\"py\">textState</span> <span class=\"k\">by</span> <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">textState</span><span class=\"p\">.</span><span class=\"nf\">collectAsState</span><span class=\"p\">()</span> <span class=\"c1\">// 예시 StateFlow</span>\n    <span class=\"kd\">val</span> <span class=\"py\">switchState</span> <span class=\"k\">by</span> <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">switchState</span><span class=\"p\">.</span><span class=\"nf\">collectAsState</span><span class=\"p\">()</span> <span class=\"c1\">// 예시 StateFlow</span>\n\n    <span class=\"nc\">SomeContent</span><span class=\"p\">(</span>\n        <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">textState</span><span class=\"p\">,</span>\n        <span class=\"n\">isSwitchOn</span> <span class=\"p\">=</span> <span class=\"n\">switchState</span><span class=\"p\">,</span>\n        <span class=\"n\">onButtonClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">ButtonClick</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n        <span class=\"n\">onTextTyped</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">TextTyped</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span> <span class=\"p\">},</span>\n        <span class=\"n\">onSwitchChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">actionDispatcher</span><span class=\"p\">.</span><span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"nc\">MyScreenAction</span><span class=\"p\">.</span><span class=\"nc\">SwitchChanged</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span> <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 방식(Stateless/Statefull 분리 및 CompositionLocal 활용)의 단점은 다음과 같다.</p>\n\n<ul>\n  <li>ViewModel에서 모든 UI 인터랙션을 하나의 reducer 함수로 통합 관리하기보다, 각 상태 업데이트 로직과 이벤트 발송 로직이 분리될 수 있다. (이는 관점에 따라 장점일 수도 있다)</li>\n  <li>새로운 Action 이벤트를 추가할 때, ViewModel의 reducer에서도 해당 이벤트를 처리하는 로직을 추가해야 한다. (이는 sealed interface 사용 시 컴파일 타임에 강제될 수 있어 오히려 장점이 될 수 있다.)</li>\n</ul>\n\n<p>하지만 장점은 다음과 같습니다.</p>\n<ul>\n  <li>각 UI 요소의 이벤트 발송 책임이 명확해진다.</li>\n  <li>Stateless Composable은 재사용 및 테스트가 용이하다.</li>\n  <li>CompositionLocal을 통해 이벤트 발송 인터페이스 접근이 간편하다.</li>\n</ul>\n\n<p><br /></p>\n\n<h3>정리하면</h3>\n\n<h4>해결하고 싶었던 지점</h4>\n\n<ul>\n  <li>View와 ViewModel 간의 이벤트 전달을 왜 항상 ViewModel 인스턴스를 통해 viewModel.someFunction() 형태로 직접 호출해야 할까?</li>\n  <li>Composable 함수의 깊이가 깊어질 때 ViewModel 인스턴스나 콜백 함수를 계속 전달해야 하는 번거로움을 줄일 수 없을까?</li>\n</ul>\n\n<h4>그래서 도입한 Action(CompositionLocal)</h4>\n\n<p>이벤트 처리를 위한 Action 인터페이스와 이를 쉽게 발송(dispatch)할 수 있는 ActionDispatcher를 CompositionLocal로 제공하여, Composable 함수 내에서 발생하는 보일러플레이트를 줄이고자 했다.</p>\n\n<p>하지만 여전히 해결해야 할 문제가 있는데</p>\n\n<ul>\n  <li>이벤트를 보내는 쪽(View)과 받는 쪽(ViewModel)에서 정확히 어떤 Action 타입을 사용하고 처리할지 명확히 약속이 필요하다. 만약 서로 다른 타입을 사용하거나 누락하면 이벤트가 유실되어 동작하지 않는 치명적인 문제가 발생할 수 있다.</li>\n</ul>\n\n<p>이 문제를 해결하고 개발 과정에서 실수를 줄이기 위해 <code class=\"language-plaintext highlighter-rouge\">sealed interface</code>를 사용하여 <code class=\"language-plaintext highlighter-rouge\">Action</code>을 정의하는 방식을 채택했다. sealed interface를 사용하면 ViewModel의 reducer에서 when 식으로 처리할 때 모든 하위 타입을 강제로 구현해야 하므로, 이벤트 누락 가능성을 컴파일 시점에 방지할 수 있다. 이는 UI 동작 관련 테스트 케이스를 일부 줄여줄 수 있는 장점도 있다.</p>\n\n<p><br /></p>\n\n<h2>그래서 발견한 문제</h2>\n\n<p><a href=\"https://github.com/pointfreeco/swift-composable-architecture\">Swift-composable architecture - 링크</a>를 참고하여 아키텍처를 구상하다 보니, Reducer가 특정 액션을 처리한 후 다음 액션을 연쇄적으로 발생시키는 구조를 발견했다.</p>\n\n<p>Swift Composable Architecture의 코드 예시를 보면, Reduce 클로저 내에서 <code class=\"language-plaintext highlighter-rouge\">.send</code>나 다른 이펙트(Effect)를 반환하여 다음 동작을 유발할 수 있다. (아래 코드는 TCA의 이전 버전 구문일 수 있으며, 현재는 @Reducer 매크로 등을 사용한다.)</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// TCA 예시 (개념 설명용)</span>\n<span class=\"kt\">Reduce</span> <span class=\"p\">{</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">action</span> <span class=\"k\">in</span>\n  <span class=\"k\">switch</span> <span class=\"n\">action</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">buttonTapped</span><span class=\"p\">:</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">isLoading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"c1\">// 이펙트를 반환하여 비동기 작업 후 다른 액션(.dataLoaded)을 발생시킴</span>\n    <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">run</span> <span class=\"p\">{</span> <span class=\"n\">send</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"k\">await</span> <span class=\"n\">apiClient</span><span class=\"o\">.</span><span class=\"nf\">fetchData</span><span class=\"p\">()</span>\n      <span class=\"k\">await</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">dataLoaded</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">case</span> <span class=\"kd\">let</span> <span class=\"o\">.</span><span class=\"nf\">dataLoaded</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">isLoading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n    <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"k\">none</span> <span class=\"c1\">// 추가 액션 없음</span>\n  <span class=\"c1\">// ...</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이러한 ‘액션 후 연쇄 액션’ 개념을 안드로이드에서 Flow와 제가 만든 Action 시스템으로 구현해보고자 했다. 하지만 여기서 두 가지 주요 문제가 발생했다.</p>\n\n<ol>\n  <li>자동 nextAction 호출로 인한 문제:\n    <ul>\n      <li>ViewModel의 reducer 함수가 반환하는 값을 기반으로 시스템이 자동으로 다음 액션(nextAction)을 발생시키도록 설계했더니, 개발자가 이 동작 방식을 정확히 이해하고 사용해야 하는 부담이 늘었다. 알아야 할 규칙이 많아진 것.</li>\n      <li>결정적으로, nextAction을 잘못 지정하거나 reducer 로직에 실수가 있으면 무한 루프에 빠질 위험이 있었다. 디버깅이 불가능한 것은 아니지만, 코드 설계상 예측 가능한 문제가 쉽게 발생할 수 있는 구조였다.</li>\n    </ul>\n  </li>\n  <li>싱글턴 Action 스트림과 Lifecycle 동기화 문제:\n    <ul>\n      <li>앱 전체에서 단 하나의 Action 스트림(FlowCaActionStream)을 싱글턴으로 사용하다 보니, 새로운 Activity가 실행되거나 Composable Navigation 라이브러리(like Navigation-Compose)를 통해 화면이 전환될 때 문제가 발생했다.</li>\n      <li>예를 들어, Activity A와 Activity B가 있고 각각 여러 Composable 화면(Screen)을 가지고 있다고 가정해 보자. 사용자가 Activity B에 있더라도, 백그라운드의 Activity A에 속한 ViewModel들이 여전히 싱글턴 Action 스트림을 구독하고 있을 수 있다. 만약 특정 Action이 Activity B에서 발생했는데, Activity A의 ViewModel도 해당 Action 타입에 대해 필터링 로직(filterIsInstance)을 가지고 있다면, 의도치 않게 Activity A의 ViewModel에서도 해당 Action이 처리될 수 있다. (물론 reducer 로직 내에서 현재 화면 상태 등을 체크하여 방어할 수는 있겠지만, 근본적으로 불필요한 구독 및 처리 시도가 발생한다.)</li>\n      <li>이는 특히 Alert, Toast, Router(화면 전환)와 같이 앱 전역적으로 영향을 줄 수 있는 Side Effect 처리 시 동기화 문제를 일으킬 수 있다. ViewModel의 생명주기(viewModelScope)는 일반적으로 Composable의 생명주기보다 길기 때문에 이 문제가 더 두드러진다.</li>\n    </ul>\n  </li>\n</ol>\n\n<p>이 두 가지 문제를 어떻게 해결했는지 구체적으로 설명하겠다.</p>\n\n<p><br /></p>\n\n<h2>문제점 1 - 무한 루프 가능성 해결하기</h2>\n\n<p>무한 루프 발생 가능성을 제거하기 위해 기존 CaViewModel의 flowAction 처리 방식에서 문제의 소지가 있는 부분을 수정했다.</p>\n\n<p>기존 코드 (문제 발생 가능성 있음):</p>\n\n<pre><code class=\"language-kotiln\">abstract class CaViewModel&lt;ACTION : CaAction, SIDE_EFFECT : CaSideEffect&gt;(\n    private val flowCaActionStream: FlowCaActionStream, // 'private' 추가 (캡슐화)\n    actionClass: KClass&lt;ACTION&gt;,\n) : ViewModel() {\n\n    @VisibleForTesting\n    val flowAction by lazy(LazyThreadSafetyMode.NONE) {\n        flowCaActionStream.flowAction()\n            .filterIsInstance(actionClass) // 1. 해당 ViewModel이 처리할 Action만 필터링\n            .map { action -&gt; // 2. reducer를 호출하고, 그 결과를 반환 (문제의 소지)\n                reducer(action = action) // reducer가 다음 Action을 반환한다고 가정\n            }\n            .onEach { nextActionToDispatch -&gt; // 3. map에서 반환된 다음 Action을 자동으로 전파 (문제!)\n                flowCaActionStream.nextAction(nextActionToDispatch) // 무한 루프 가능 지점\n            }\n            // .launchIn(viewModelScope) // 실제로는 여기서 launch 되어야 함\n    }\n\n    // reducer 함수가 다음 Action을 반환하는 형태였다고 가정\n    abstract suspend fun reducer(action: ACTION): CaAction? // 예시: 반환 타입이 다음 Action\n}\n</code></pre>\n\n<p>수정된 코드:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">CaViewModel</span><span class=\"p\">&lt;</span><span class=\"nc\">CA_ACTION</span> <span class=\"p\">:</span> <span class=\"nc\">CaAction</span><span class=\"p\">&gt;(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">flowCaActionStream</span><span class=\"p\">:</span> <span class=\"nc\">FlowCaActionStream</span><span class=\"p\">,</span>\n    <span class=\"n\">actionClass</span><span class=\"p\">:</span> <span class=\"nc\">KClass</span><span class=\"p\">&lt;</span><span class=\"nc\">CA_ACTION</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// Action 처리를 위한 Flow (자동 nextAction 로직 제거)</span>\n    <span class=\"nd\">@VisibleForTesting</span>\n    <span class=\"k\">internal</span> <span class=\"kd\">val</span> <span class=\"py\">actionProcessingFlow</span> <span class=\"k\">by</span> <span class=\"nf\">lazy</span><span class=\"p\">(</span><span class=\"nc\">LazyThreadSafetyMode</span><span class=\"p\">.</span><span class=\"nc\">NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 'internal'로 변경하고 이름 명확화</span>\n        <span class=\"n\">flowCaActionStream</span><span class=\"p\">.</span><span class=\"nf\">flowAction</span><span class=\"p\">()</span>\n            <span class=\"p\">.</span><span class=\"nf\">filterIsInstance</span><span class=\"p\">(</span><span class=\"n\">actionClass</span><span class=\"p\">)</span> <span class=\"c1\">// 1. 처리할 Action 필터링</span>\n            <span class=\"p\">.</span><span class=\"nf\">onEach</span> <span class=\"p\">{</span> <span class=\"n\">action</span> <span class=\"p\">-&gt;</span> <span class=\"c1\">// 2. map 대신 onEach 사용. 각 Action에 대해 reducer만 실행 (반환값 사용 안 함)</span>\n                <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"n\">action</span> <span class=\"p\">=</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 3. 자동 nextAction 전파 로직 제거됨</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// reducer 함수는 이제 Side Effect 처리나 상태 변경에만 집중 (반환값 없음)</span>\n    <span class=\"k\">abstract</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">reducer</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nc\">CA_ACTION</span><span class=\"p\">)</span>\n\n    <span class=\"c1\">// 다음 Action을 명시적으로 전파하고 싶을 때 호출하는 함수 추가</span>\n    <span class=\"k\">protected</span> <span class=\"k\">fun</span> <span class=\"nf\">nextAction</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"nc\">CaAction</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 'protected'로 변경하여 자식 클래스에서만 사용하도록 제한</span>\n        <span class=\"n\">flowCaActionStream</span><span class=\"p\">.</span><span class=\"nf\">nextAction</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 실제 Flow 구독 시작/취소는 별도 관리 (아래 Lifecycle 해결 부분 참조)</span>\n    <span class=\"nd\">@VisibleForTesting</span>\n    <span class=\"kd\">var</span> <span class=\"py\">actionProcessingJob</span><span class=\"p\">:</span> <span class=\"nc\">Job</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>수정 내용 요약:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">map</code> -&gt; <code class=\"language-plaintext highlighter-rouge\">onEach</code> 변경: <code class=\"language-plaintext highlighter-rouge\">reducer</code> 함수가 다음 Action을 반환하고 이를 <code class=\"language-plaintext highlighter-rouge\">map</code> 연산자가 받아 downstream로 흘려보내는 구조를 제거했다. 대신 onEach를 사용하여 각 Action에 대해 reducer 함수를 실행만 하도록 변경다. 이로써 reducer의 반환값과 관계없이 자동 nextAction 호출 가능성이 사라졌다.</li>\n  <li>명시적 <code class=\"language-plaintext highlighter-rouge\">nextAction</code> 함수 추가: 연쇄적인 Action 전파가 필요한 경우, 개발자가 <code class=\"language-plaintext highlighter-rouge\">reducer</code> 함수 내에서 직접 <code class=\"language-plaintext highlighter-rouge\">nextAction(action)</code> 함수를 호출하도록 변경했다. 이는 시스템에 의한 암묵적인 동작 대신, 개발자의 명확한 의도에 따라 다음 Action이 발생하도록 하여 코드의 예측 가능성을 높인다.</li>\n</ul>\n\n<p>이제 reducer 내에서 다음과 같이 명시적으로 다음 Action을 지정해야 한다.</p>\n\n<pre><code class=\"language-koltin\">override suspend fun reducer(action: MyScreenAction) {\n    when (action) {\n        is MyScreenAction.ButtonClick -&gt; {\n            // 예시: 버튼 클릭 후 특정 조건 만족 시 Alert 표시 Action 전파\n            if (shouldShowAlert()) {\n                nextAction(CommonUiAction.ShowAlert(\"버튼 클릭됨!\")) // 명시적으로 nextAction 호출\n            }\n        }\n        // ... 다른 Action 처리\n    }\n}\n</code></pre>\n\n<p>이 변경으로 시스템적인 무한 루프 발생 가능성은 제거되었고, 코드의 흐름이 더 명확해졌다.</p>\n\n<p><br /></p>\n\n<h2>문제점 2 - Lifecycle 문제 해결하기</h2>\n\n<p>싱글턴 Action 스트림(FlowCaActionStream) 사용 시 발생하는 Lifecycle 동기화 문제를 해결하기 위해, Composable의 Lifecycle에 맞춰 ViewModel의 Action 스트림 구독을 시작하고 중지하는 방식을 도입했다.</p>\n\n<p>문제 상황: Activity A와 B가 있을 때, Activity B가 화면에 보이는 동안에도 백그라운드의 Activity A에 있는 ViewModel이 Action 스트림을 계속 구독하고 있으면, Activity B에서 발생한 Action이 Activity A의 ViewModel에게도 전달될 수 있다. (물론 filterIsInstance로 타입 필터링은 되지만, 같은 타입의 Action을 여러 화면에서 사용한다면 문제가 된다.)</p>\n\n<p><img src=\"/images/posts/2025/Android-Architecture-02/sample_01.jpg\" alt=\"sample_01\" /></p>\n\n<p><br /></p>\n\n<h3>해결 방안: Lifecycle에 따른 구독 제어</h3>\n\n<p>Composable의 Lifecycle 상태(특히 <code class=\"language-plaintext highlighter-rouge\">ON_RESUME</code>, <code class=\"language-plaintext highlighter-rouge\">ON_PAUSE</code>)에 맞춰 ViewModel 내 Action 스트림(<code class=\"language-plaintext highlighter-rouge\">actionProcessingFlow</code>)의 구독(Job)을 시작하고 취소하는 방법을 사용합니다. 이를 위해 <code class=\"language-plaintext highlighter-rouge\">DisposableEffect</code>와 <code class=\"language-plaintext highlighter-rouge\">LocalLifecycleOwner</code>를 활용하는 Helper Composable 함수를 만들었습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">LaunchedLifecycleViewModel</span><span class=\"p\">(</span>\n    <span class=\"n\">viewModel</span><span class=\"p\">:</span> <span class=\"nc\">CaViewModel</span><span class=\"p\">&lt;</span><span class=\"err\">*</span><span class=\"p\">&gt;</span> <span class=\"c1\">// 라이프사이클 관리가 필요한 ViewModel</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">lifecycleOwner</span> <span class=\"p\">=</span> <span class=\"nc\">LocalLifecycleOwner</span><span class=\"p\">.</span><span class=\"n\">current</span>\n    <span class=\"nc\">DisposableEffect</span><span class=\"p\">(</span><span class=\"n\">lifecycleOwner</span><span class=\"p\">,</span> <span class=\"n\">viewModel</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// lifecycleOwner와 viewModel이 키</span>\n        <span class=\"kd\">val</span> <span class=\"py\">observer</span> <span class=\"p\">=</span> <span class=\"nc\">LifecycleEventObserver</span> <span class=\"p\">{</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">event</span> <span class=\"p\">-&gt;</span>\n            <span class=\"k\">when</span> <span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nc\">Lifecycle</span><span class=\"p\">.</span><span class=\"nc\">Event</span><span class=\"p\">.</span><span class=\"nc\">ON_RESUME</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// 화면이 활성화되면 Action 스트림 구독 시작</span>\n                    <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"nf\">startActionProcessing</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n                <span class=\"nc\">Lifecycle</span><span class=\"p\">.</span><span class=\"nc\">Event</span><span class=\"p\">.</span><span class=\"nc\">ON_PAUSE</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// 화면이 비활성화되면 Action 스트림 구독 취소</span>\n                    <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"nf\">cancelActionProcessing</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n                <span class=\"c1\">// ON_DESTROY는 DisposableEffect의 onDispose에서 처리되거나</span>\n                <span class=\"c1\">// ViewModel의 onCleared에서 처리될 수 있음</span>\n                <span class=\"k\">else</span> <span class=\"p\">-&gt;</span> <span class=\"p\">{</span> <span class=\"cm\">/* Do nothing for other events */</span> <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">lifecycleOwner</span><span class=\"p\">.</span><span class=\"n\">lifecycle</span><span class=\"p\">.</span><span class=\"nf\">addObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Composable이 Composition에서 제거될 때(onDispose) Observer 제거</span>\n        <span class=\"nf\">onDispose</span> <span class=\"p\">{</span>\n            <span class=\"n\">lifecycleOwner</span><span class=\"p\">.</span><span class=\"n\">lifecycle</span><span class=\"p\">.</span><span class=\"nf\">removeObserver</span><span class=\"p\">(</span><span class=\"n\">observer</span><span class=\"p\">)</span>\n            <span class=\"c1\">// 필요하다면 여기서도 cancelActionProcessing() 호출 고려</span>\n            <span class=\"c1\">// viewModel.cancelActionProcessing()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>그리고 <code class=\"language-plaintext highlighter-rouge\">CaViewModel</code>에 <code class=\"language-plaintext highlighter-rouge\">Action</code> 스트림 구독을 시작하고 취소하는 함수를 추가한다. (<code class=\"language-plaintext highlighter-rouge\">internal</code> 접근 제한자를 사용하여 모듈 외부에서의 직접 호출을 방지한다.)</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">abstract</span> <span class=\"kd\">class</span> <span class=\"nc\">CaViewModel</span><span class=\"p\">&lt;</span><span class=\"nc\">CA_ACTION</span> <span class=\"p\">:</span> <span class=\"nc\">CaAction</span><span class=\"p\">&gt;(</span>\n    <span class=\"c1\">// ... (이전 코드와 동일)</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ViewModel</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// ... (actionProcessingFlow, reducer, nextAction 등) ...</span>\n\n    <span class=\"nd\">@VisibleForTesting</span>\n    <span class=\"kd\">var</span> <span class=\"py\">actionProcessingJob</span><span class=\"p\">:</span> <span class=\"nc\">Job</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span> <span class=\"c1\">// 구독 상태를 관리하는 Job</span>\n\n    <span class=\"c1\">// Action 스트림 구독 시작 (ON_RESUME 시 호출됨)</span>\n    <span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">startActionProcessing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 이미 실행 중이라면 중복 실행 방지</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">actionProcessingJob</span><span class=\"o\">?.</span><span class=\"n\">isActive</span> <span class=\"p\">==</span> <span class=\"k\">true</span><span class=\"p\">)</span> <span class=\"k\">return</span>\n\n        <span class=\"c1\">// 기존 Job이 있다면 취소 (혹시 모를 상황 대비)</span>\n        <span class=\"nf\">cancelActionProcessing</span><span class=\"p\">()</span>\n\n        <span class=\"c1\">// actionProcessingFlow를 viewModelScope에서 구독 시작</span>\n        <span class=\"n\">actionProcessingJob</span> <span class=\"p\">=</span> <span class=\"n\">actionProcessingFlow</span>\n            <span class=\"p\">.</span><span class=\"nf\">launchIn</span><span class=\"p\">(</span><span class=\"n\">viewModelScope</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Action 스트림 구독 취소 (ON_PAUSE 시 호출됨)</span>\n    <span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">cancelActionProcessing</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">actionProcessingJob</span><span class=\"o\">?.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>\n        <span class=\"n\">actionProcessingJob</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// ViewModel이 파괴될 때(onCleared) 확실하게 Job 취소</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCleared</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCleared</span><span class=\"p\">()</span>\n        <span class=\"nf\">cancelActionProcessing</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3>위 코드를 활용하는 방법은?</h3>\n\n<p>각 화면의 최상위 Composable에서 ObserveLifecycle 함수를 호출해주어야 한다.</p>\n\n<pre><code class=\"language-koltin\">@Composable\nfun SomeScreen(viewModel: SomeViewModel = hiltViewModel()) {\n    // ViewModel의 Action 구독 라이프사이클 관리\n    LaunchedLifecycleViewModel(viewModel = viewModel)\n\n    // --- 실제 UI ---\n    // val state by viewModel.uiState.collectAsState()\n    // SomeContent(...)\n    // ---\n}\n</code></pre>\n\n<p>개선 아이디어: 매번 ObserveLifecycle(viewModel)를 호출하는 것이 번거롭다면, ViewModel 인스턴스를 얻을 때 자동으로 이 로직을 포함시키는 확장 함수나 위임(delegate)을 고려해볼 수 있다. 예를 들어:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">Some</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">:</span> <span class=\"nc\">ViewModel</span> <span class=\"p\">=</span> <span class=\"nf\">hiltViewModel</span><span class=\"p\">().</span><span class=\"nc\">Activate</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Your view</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>또는 hilt를 직접 확장한다면 아래와 같다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 개념적인 아이디어 (구현 필요)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">inline</span> <span class=\"k\">fun</span> <span class=\"p\">&lt;</span><span class=\"k\">reified</span> <span class=\"nc\">VM</span> <span class=\"p\">:</span> <span class=\"nc\">CaViewModel</span><span class=\"p\">&lt;</span><span class=\"err\">*</span><span class=\"p\">&gt;&gt;</span> <span class=\"nf\">hiltViewModelWithLifecycle</span><span class=\"p\">():</span> <span class=\"nc\">VM</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">viewModel</span><span class=\"p\">:</span> <span class=\"nc\">VM</span> <span class=\"p\">=</span> <span class=\"nf\">hiltViewModel</span><span class=\"p\">()</span>\n    <span class=\"nc\">LaunchedLifecycleViewModel</span><span class=\"p\">(</span><span class=\"n\">viewModel</span> <span class=\"p\">=</span> <span class=\"n\">viewModel</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">viewModel</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 사용 예시</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">SomeScreen</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">:</span> <span class=\"nc\">SomeViewModel</span> <span class=\"p\">=</span> <span class=\"nf\">hiltViewModelWithLifecycle</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 이제 LaunchedLifecycleViewModel() 호출 불필요</span>\n    <span class=\"c1\">// ... UI ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>(Gemini 주의: <code class=\"language-plaintext highlighter-rouge\">hiltViewModelWithLifecycle</code> 같은 함수는 Composable 함수 내에서 다른 Composable 함수(LaunchedLifecycleViewModel)를 호출하는 방식이므로, ViewModel 생성 로직과 Lifecycle 관찰 로직을 분리하는 것이 더 좋을 수 있다. 또는 별도의 진입점 Composable에서 처리하는 방식도 고려할 수 있다.)</p>\n\n<p>고려사항:</p>\n<ul>\n  <li>이 방식은 ViewModel이 간접적으로 UI Lifecycle을 인지하게 되는 것 아니냐는 비판이 있을 수 있다. 하지만 start/cancelActionProcessing 함수 호출 시점은 ViewModel 외부(LaunchedLifecycleViewModel)에서 결정되므로, ViewModel 자체는 Lifecycle 객체를 직접 참조하지 않는다.</li>\n  <li>ON_RESUME / ON_PAUSE 이벤트마다 Job을 취소하고 다시 시작하는 오버헤드가 발생할 수 있다. 하지만 이는 화면이 실제로 보이지 않을 때 불필요한 Action 처리를 방지하는 효과적인 방법 중 하나이다.</li>\n</ul>\n\n<p><br /></p>\n\n<h2>해결했을까?</h2>\n\n<p>위 변경 사항들을 통해 초기 설계에서 발견된 두 가지 주요 문제점을 해결할 수 있었다.</p>\n\n<ul>\n  <li>무한 루프 발생 가능성: <code class=\"language-plaintext highlighter-rouge\">reducer</code> 처리 후 자동 <code class=\"language-plaintext highlighter-rouge\">nextAction</code> 전파 로직을 제거하고, 명시적인 <code class=\"language-plaintext highlighter-rouge\">nextAction</code> 함수 호출 방식으로 변경하여 해결했다.</li>\n  <li>싱글턴 <code class=\"language-plaintext highlighter-rouge\">Action</code> 스트림의 Lifecycle 문제: Composable의 Lifecycle에 맞춰 ViewModel의 Action 스트림 구독을 제어하는 <code class=\"language-plaintext highlighter-rouge\">LaunchedLifecycleViewModel</code> Helper Composable을 도입하여, 비활성 화면에서의 불필요한 Action 처리 가능성을 해결했다.</li>\n</ul>\n\n<p>하지만 항상 더 나은 방법이 있을 수 있다.</p>\n\n<p><br /></p>\n\n<h2>구독하는 더 좋은 방법은 없을까?</h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">ON_RESUME</code>/<code class=\"language-plaintext highlighter-rouge\">ON_PAUSE</code> 마다 <code class=\"language-plaintext highlighter-rouge\">launchIn</code>으로 <code class=\"language-plaintext highlighter-rouge\">Job</code>을 생성하고 취소하는 방식 대신, Flow의 <code class=\"language-plaintext highlighter-rouge\">stateIn</code> 연산자를 활용하는 방법을 고려해볼 수 있다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">stateIn</code> 연산자는 <code class=\"language-plaintext highlighter-rouge\">Flow</code>를 <code class=\"language-plaintext highlighter-rouge\">StateFlow</code>로 변환하며, 구독자(collector)의 유무에 따라 업스트림 Flow의 실행을 제어할 수 있는 SharingStarted 정책을 제공한다. 예를 들어 <code class=\"language-plaintext highlighter-rouge\">SharingStarted.WhileSubscribed()</code> 정책을 사용하면, StateFlow를 구독하는 Composable이 화면에 보이는 동안(<code class=\"language-plaintext highlighter-rouge\">collectAsState</code> 등으로 구독 중)에만 업스트림 Flow(actionProcessingFlow)가 활성화되고, 화면에서 사라지면 자동으로 구독이 중단(cancel)될 수 있다.</p>\n\n<p>이러한 접근 방식은 Slack에서 만든 <a href=\"https://slackhq.github.io/circuit/\">Circuit - link</a> 아키텍처와 유사한 방향으로 흘러갈 수 있다. Circuit에서는 Presenter가 UI State를 Flow로 노출하고, UI 이벤트는 Sink를 통해 Presenter로 전달됩니다. Presenter 내부 로직의 실행 여부는 최종적으로 UI State Flow의 구독 여부에 따라 결정될 수 있다.</p>\n\n<p>skydoves(재웅 님)가 작성한 <a href=\"https://proandroiddev.com/loading-initial-data-in-launchedeffect-vs-viewmodel-f1747c20ce62\">Loading Initial Data in LaunchedEffect vs. ViewModel - link</a> 글에서도 LaunchedEffect 내에서의 데이터 로딩과 ViewModel의 stateIn을 활용한 데이터 로딩 방식을 비교하며 유사한 아이디어를 엿볼 수 있다.</p>\n\n<p>결국 상태(State)를 중심으로 데이터 흐름을 관리하고, 그 상태의 구독 생명주기에 맞춰 연관된 로직(Action 처리 등)의 실행 여부를 제어하는 방식이 더 Compose 친화적이고 효율적일 수 있다.</p>\n\n<p>저는 현재 설계에서 상태 관리와 이벤트 처리를 분리하고 싶어 이 방식(Circuit이나 stateIn을 전면적으로 활용하는 방식)까지 적용하지는 않았지만, 궁극적으로는 이와 유사한 형태로 발전할 수 있지 않을까 생각하고 있다.</p>\n\n<p><br /></p>\n\n<h2>Next</h2>\n\n<p>이번 글에서는 기존 Composable Architecture 설계에서 발견된 2가지 문제점을 파악하고 이를 해결하기 위해 어떤 고민과 선택을 했는지 정리해보았다.</p>\n\n<p>다음 글에서는 이 아키텍처를 활용하여 구현한 구체적인 기능들을 다룰 예정이다.</p>\n\n<ul>\n  <li>코드에는 이미 있지만 Alert/Toast를 포함하고있다.</li>\n  <li>Router(액티비티, 네비게이션)를 처리하기 위한 부분도 포함하고있다.</li>\n</ul>\n\n<p>이제 다음 글에서 이 두개를 정리할 계획이다.</p>\n\n<p><br /></p>\n\n<h2>작성 글 이어보기</h2>\n\n<ul>\n  <li><a href=\"https://thdev.tech/architecture/2025/02/02/Android-Architecture-01/\">컴포즈에 사용할 Composable Architecutre 설명(리엑트?)</a></li>\n  <li>Composable Architecutre는 만들었는데 문제가 있었네? 개선해보자.</li>\n  <li>예고 - Composable Architecutre를 활용한 Alert/Toast?</li>\n  <li>예고 - Composable Architecutre를 활용한 Router?</li>\n</ul>\n\n",
        "contentSnippet": "이전 글에서 Composable Architecutre를 소개하는 내용을 담아보았는데, 몇 가지 문제점을 발견하여 이를 개선한 내용을 다시 정리하는 글이다.\n크게 2가지 문제점을 확인하였다.\nViewModel 내 Reducer 처리 후 자동 next\nAction 스트림 처리를 위한 싱글턴 활용 시 Lifecycle 문제\n이 2가지 문제점을 해결하기 위해 코드를 어떻게 수정했는지, 그리고 더 나은 방법은 없을지 고민한 과정을 정리해본다.\n이 글에서는\n기존 아키텍처의 구조적 문제점을 파악한다.\n문제 해결 과정과 더 나은 구조에 대한 고민을 공유한다.\n기본적인 내용을 담지 않고있어 앞선 글을 참고하면 좋다.\nAction이란?\nView와 ViewModel 사이의 통신을 어떻게 더 간결하게 할 수 있을까? Jetpack Compose 환경에서는 CompositionLocal - link을 활용하는 방법이 있다. 저는 이 방식을 응용하여 Composable 함수 어디서든 이벤트 처리를 쉽게 호출할 수 있도록 Action이라는 개념을 만들었다.\nFlow를 기반으로 한 Action을 사용한 이유를 설명하기 위해, 먼저 일반적인 View-ViewModel 간 통신 방식의 예시 코드를 살펴보자.\nComposable 함수에서 ViewModel 인스턴스를 파라미터로 직접 전달받아 사용하는 것이 일반적이다. 하지만 이 방식은 Composable 함수의 깊이가 깊어지거나 개수가 많아질수록 ViewModel을 어디까지 전달해야 할지 고민이 필요하며, 구조가 복잡해지면 자연스럽게 보일러플레이트 코드가 늘어나는 단점이 있다.\nViewModel을 직접 사용한 함수 호출\n\n@Composable\nfun SomeScreen(someViewModel: SomeViewModel) {\n  Button(onClick = { someViewModel.doSomething() })\n  Button(onClick = { someViewModel.doSomethingTwo() })\n  Button(onClick = { someViewModel.doSomethingThree() })\n}\n\nclass SomeViewModel : ViewModel() {\n  fun doSomething() { /* ... */ }\n  fun doSomethingTwo() { /* ... */ }\n  fun doSomethingThree() { /* ... */ }\n}\n\n\nViewModel 함수를 sealed interface로 통합하여 호출하는 경우\n\nsealed interface SomeAction {\n    data object ActionOne : SomeAction\n    data object ActionTwo : SomeAction\n    data class ActionThree(val item: Any) : SomeAction\n}\n\n@Composable\nfun SomeScreen(someViewModel: SomeViewModel) {\n  val item = remember { /* ... */ } // 예시 데이터\n  Button(onClick = { someViewModel.dispatch(SomeAction.ActionOne) })\n  Button(onClick = { someViewModel.dispatch(SomeAction.ActionTwo) })\n  Button(onClick = { someViewModel.dispatch(SomeAction.ActionThree(item)) })\n}\n\nclass SomeViewModel : ViewModel() {\n  fun dispatch(action: SomeAction) {\n    when (action) {\n      is SomeAction.ActionOne -> { /* ... */ }\n      is SomeAction.ActionTwo -> { /* ... */ }\n      is SomeAction.ActionThree -> { /* ... */ }\n    }\n  }\n}\n\n\n제가 활용하는 방식 (CompositionLocal 활용)\n위 방식들은 ViewModel을 계속 전달하거나, onClick: () -> Unit 같은 콜백을 계속 만들어 전달해야 하는 번거로움이 있다. 특히 콜백 방식은 이벤트 통합 과정에서 N개의 고차 함수(Higher-Order function)가 만들어질 수 있다.\n그래서 Compose에서 제공하는 Locally scoped - link을 활용하여 Action 객체에 쉽게 접근하는 방법을 사용하고 있습니다. (자세한 활용법은 이전 글 컴포즈에 사용할 Composable Architecture 설명을 참고해주세요.)\n\n// Action 정의 (예시)\nsealed interface MyScreenAction : CaAction { // CaAction은 마커 인터페이스 역할\n    data object ButtonClick : MyScreenAction\n    data class TextTyped(val text: String) : MyScreenAction\n    data class SwitchChanged(val isOn: Boolean) : MyScreenAction\n}\n\n// Composable View\n@Composable\nfun SomeScreen() {\n  // CompositionLocal을 통해 ActionDispatcher 획득\n  val actionDispatcher = LocalActionDispatcher.current\n  var textState by remember { mutableStateOf(\"\") }\n  var switchState by remember { mutableStateOf(false) }\n\n  Column {\n      Button(onClick = { actionDispatcher.dispatch(MyScreenAction.ButtonClick) }) {\n          Text(\"Click Me\")\n      }\n      TextField(\n          value = textState,\n          onValueChange = {\n              textState = it\n              actionDispatcher.dispatch(MyScreenAction.TextTyped(it))\n          }\n      )\n      Switch(\n          checked = switchState,\n          onCheckedChange = {\n              switchState = it\n              actionDispatcher.dispatch(MyScreenAction.SwitchChanged(it))\n          }\n      )\n  }\n}\n\n// ViewModel\nclass SomeViewModel(\n    private val flowCaActionStream: FlowCaActionStream // Action 스트림 주입\n) : CaViewModel<MyScreenAction>(flowCaActionStream, MyScreenAction::class) { // 수신할 Action 타입 지정\n\n    // CaViewModel 내부에서 flowAction을 통해 MyScreenAction 타입의 이벤트만 필터링하여 수신\n    // reducer 메소드에서 각 Action 처리 로직 구현\n    override suspend fun reducer(action: MyScreenAction) {\n        when (action) {\n            is MyScreenAction.ButtonClick -> {\n                // 버튼 클릭 처리 로직\n                Log.d(\"SomeViewModel\", \"Button Clicked\")\n            }\n            is MyScreenAction.TextTyped -> {\n                // 텍스트 입력 처리 로직\n                Log.d(\"SomeViewModel\", \"Text Typed: ${action.text}\")\n            }\n            is MyScreenAction.SwitchChanged -> {\n                // 스위치 변경 처리 로직\n                Log.d(\"SomeViewModel\", \"Switch Changed: ${action.isOn}\")\n            }\n        }\n    }\n}\n\n\n\n사용성 측면에서의 개선\n필요한 Action을 LocalAction.current를 통해 어디서든 호출할 수 있으므로, ViewModel 인스턴스를 계속해서 하위 Composable로 전달할 필요가 없어 개발 편의성이 향상될 수 있다.\nCompositionLocal에 적절한 기본값이나 테스트용 구현체를 제공하면 Preview 동작에도 문제가 없다. 다만, Preview에서 특정 UI 요소의 상태 변화나 인터랙션을 테스트하려면, 선언형 UI의 원칙에 따라 Stateless - link한 Composable을 만들고 상태와 이벤트를 외부에서 주입하는 것이 좋다.\n\n// Stateless Composable 예시\n@Composable\nfun SomeContent(\n    text: String,\n    isSwitchOn: Boolean,\n    onButtonClick: () -> Unit,\n    onTextTyped: (String) -> Unit,\n    onSwitchChange: (Boolean) -> Unit,\n    modifier: Modifier = Modifier // Modifier 추가 권장\n) {\n    Column(modifier = modifier) {\n        Button(onClick = onButtonClick) { /* ... */ }\n        TextField(value = text, onValueChange = onTextTyped)\n        Switch(checked = isSwitchOn, onCheckedChange = onSwitchChange)\n    }\n}\n\n// Statefull Composable (ViewModel과 연결)\n@Composable\nfun SomeScreen(viewModel: SomeViewModel = hiltViewModel()) { // Hilt 등 DI 활용 예시\n    val actionDispatcher = LocalActionDispatcher.current // Action 발송기\n    // ViewModel로부터 상태를 구독하거나, 필요한 상태를 여기서 관리\n    val textState by viewModel.textState.collectAsState() // 예시 StateFlow\n    val switchState by viewModel.switchState.collectAsState() // 예시 StateFlow\n\n    SomeContent(\n        text = textState,\n        isSwitchOn = switchState,\n        onButtonClick = { actionDispatcher.dispatch(MyScreenAction.ButtonClick) },\n        onTextTyped = { actionDispatcher.dispatch(MyScreenAction.TextTyped(it)) },\n        onSwitchChange = { actionDispatcher.dispatch(MyScreenAction.SwitchChanged(it)) }\n    )\n}\n\n\n이 방식(Stateless/Statefull 분리 및 CompositionLocal 활용)의 단점은 다음과 같다.\nViewModel에서 모든 UI 인터랙션을 하나의 reducer 함수로 통합 관리하기보다, 각 상태 업데이트 로직과 이벤트 발송 로직이 분리될 수 있다. (이는 관점에 따라 장점일 수도 있다)\n새로운 Action 이벤트를 추가할 때, ViewModel의 reducer에서도 해당 이벤트를 처리하는 로직을 추가해야 한다. (이는 sealed interface 사용 시 컴파일 타임에 강제될 수 있어 오히려 장점이 될 수 있다.)\n하지만 장점은 다음과 같습니다.\n각 UI 요소의 이벤트 발송 책임이 명확해진다.\nStateless Composable은 재사용 및 테스트가 용이하다.\nCompositionLocal을 통해 이벤트 발송 인터페이스 접근이 간편하다.\n\n정리하면\n해결하고 싶었던 지점\nView와 ViewModel 간의 이벤트 전달을 왜 항상 ViewModel 인스턴스를 통해 viewModel.someFunction() 형태로 직접 호출해야 할까?\nComposable 함수의 깊이가 깊어질 때 ViewModel 인스턴스나 콜백 함수를 계속 전달해야 하는 번거로움을 줄일 수 없을까?\n그래서 도입한 Action(CompositionLocal)\n이벤트 처리를 위한 Action 인터페이스와 이를 쉽게 발송(dispatch)할 수 있는 ActionDispatcher를 CompositionLocal로 제공하여, Composable 함수 내에서 발생하는 보일러플레이트를 줄이고자 했다.\n하지만 여전히 해결해야 할 문제가 있는데\n이벤트를 보내는 쪽(View)과 받는 쪽(ViewModel)에서 정확히 어떤 Action 타입을 사용하고 처리할지 명확히 약속이 필요하다. 만약 서로 다른 타입을 사용하거나 누락하면 이벤트가 유실되어 동작하지 않는 치명적인 문제가 발생할 수 있다.\n이 문제를 해결하고 개발 과정에서 실수를 줄이기 위해 sealed interface를 사용하여 Action을 정의하는 방식을 채택했다. sealed interface를 사용하면 ViewModel의 reducer에서 when 식으로 처리할 때 모든 하위 타입을 강제로 구현해야 하므로, 이벤트 누락 가능성을 컴파일 시점에 방지할 수 있다. 이는 UI 동작 관련 테스트 케이스를 일부 줄여줄 수 있는 장점도 있다.\n\n그래서 발견한 문제\nSwift-composable architecture - 링크를 참고하여 아키텍처를 구상하다 보니, Reducer가 특정 액션을 처리한 후 다음 액션을 연쇄적으로 발생시키는 구조를 발견했다.\nSwift Composable Architecture의 코드 예시를 보면, Reduce 클로저 내에서 .send나 다른 이펙트(Effect)를 반환하여 다음 동작을 유발할 수 있다. (아래 코드는 TCA의 이전 버전 구문일 수 있으며, 현재는 @Reducer 매크로 등을 사용한다.)\n\n// TCA 예시 (개념 설명용)\nReduce { state, action in\n  switch action {\n  case .buttonTapped:\n    state.isLoading = true\n    // 이펙트를 반환하여 비동기 작업 후 다른 액션(.dataLoaded)을 발생시킴\n    return .run { send in\n      let data = try await apiClient.fetchData()\n      await send(.dataLoaded(data))\n    }\n  case let .dataLoaded(data):\n    state.isLoading = false\n    state.data = data\n    return .none // 추가 액션 없음\n  // ...\n  }\n}\n\n\n이러한 ‘액션 후 연쇄 액션’ 개념을 안드로이드에서 Flow와 제가 만든 Action 시스템으로 구현해보고자 했다. 하지만 여기서 두 가지 주요 문제가 발생했다.\n자동 nextAction 호출로 인한 문제:\n    \nViewModel의 reducer 함수가 반환하는 값을 기반으로 시스템이 자동으로 다음 액션(nextAction)을 발생시키도록 설계했더니, 개발자가 이 동작 방식을 정확히 이해하고 사용해야 하는 부담이 늘었다. 알아야 할 규칙이 많아진 것.\n결정적으로, nextAction을 잘못 지정하거나 reducer 로직에 실수가 있으면 무한 루프에 빠질 위험이 있었다. 디버깅이 불가능한 것은 아니지만, 코드 설계상 예측 가능한 문제가 쉽게 발생할 수 있는 구조였다.\n싱글턴 Action 스트림과 Lifecycle 동기화 문제:\n    \n앱 전체에서 단 하나의 Action 스트림(FlowCaActionStream)을 싱글턴으로 사용하다 보니, 새로운 Activity가 실행되거나 Composable Navigation 라이브러리(like Navigation-Compose)를 통해 화면이 전환될 때 문제가 발생했다.\n예를 들어, Activity A와 Activity B가 있고 각각 여러 Composable 화면(Screen)을 가지고 있다고 가정해 보자. 사용자가 Activity B에 있더라도, 백그라운드의 Activity A에 속한 ViewModel들이 여전히 싱글턴 Action 스트림을 구독하고 있을 수 있다. 만약 특정 Action이 Activity B에서 발생했는데, Activity A의 ViewModel도 해당 Action 타입에 대해 필터링 로직(filterIsInstance)을 가지고 있다면, 의도치 않게 Activity A의 ViewModel에서도 해당 Action이 처리될 수 있다. (물론 reducer 로직 내에서 현재 화면 상태 등을 체크하여 방어할 수는 있겠지만, 근본적으로 불필요한 구독 및 처리 시도가 발생한다.)\n이는 특히 Alert, Toast, Router(화면 전환)와 같이 앱 전역적으로 영향을 줄 수 있는 Side Effect 처리 시 동기화 문제를 일으킬 수 있다. ViewModel의 생명주기(viewModelScope)는 일반적으로 Composable의 생명주기보다 길기 때문에 이 문제가 더 두드러진다.\n이 두 가지 문제를 어떻게 해결했는지 구체적으로 설명하겠다.\n\n문제점 1 - 무한 루프 가능성 해결하기\n무한 루프 발생 가능성을 제거하기 위해 기존 CaViewModel의 flowAction 처리 방식에서 문제의 소지가 있는 부분을 수정했다.\n기존 코드 (문제 발생 가능성 있음):\nabstract class CaViewModel<ACTION : CaAction, SIDE_EFFECT : CaSideEffect>(\n    private val flowCaActionStream: FlowCaActionStream, // 'private' 추가 (캡슐화)\n    actionClass: KClass<ACTION>,\n) : ViewModel() {\n\n    @VisibleForTesting\n    val flowAction by lazy(LazyThreadSafetyMode.NONE) {\n        flowCaActionStream.flowAction()\n            .filterIsInstance(actionClass) // 1. 해당 ViewModel이 처리할 Action만 필터링\n            .map { action -> // 2. reducer를 호출하고, 그 결과를 반환 (문제의 소지)\n                reducer(action = action) // reducer가 다음 Action을 반환한다고 가정\n            }\n            .onEach { nextActionToDispatch -> // 3. map에서 반환된 다음 Action을 자동으로 전파 (문제!)\n                flowCaActionStream.nextAction(nextActionToDispatch) // 무한 루프 가능 지점\n            }\n            // .launchIn(viewModelScope) // 실제로는 여기서 launch 되어야 함\n    }\n\n    // reducer 함수가 다음 Action을 반환하는 형태였다고 가정\n    abstract suspend fun reducer(action: ACTION): CaAction? // 예시: 반환 타입이 다음 Action\n}\n\n수정된 코드:\n\nabstract class CaViewModel<CA_ACTION : CaAction>(\n    private val flowCaActionStream: FlowCaActionStream,\n    actionClass: KClass<CA_ACTION>,\n) : ViewModel() {\n\n    // Action 처리를 위한 Flow (자동 nextAction 로직 제거)\n    @VisibleForTesting\n    internal val actionProcessingFlow by lazy(LazyThreadSafetyMode.NONE) { // 'internal'로 변경하고 이름 명확화\n        flowCaActionStream.flowAction()\n            .filterIsInstance(actionClass) // 1. 처리할 Action 필터링\n            .onEach { action -> // 2. map 대신 onEach 사용. 각 Action에 대해 reducer만 실행 (반환값 사용 안 함)\n                reducer(action = action)\n            }\n            // 3. 자동 nextAction 전파 로직 제거됨\n    }\n\n    // reducer 함수는 이제 Side Effect 처리나 상태 변경에만 집중 (반환값 없음)\n    abstract suspend fun reducer(action: CA_ACTION)\n\n    // 다음 Action을 명시적으로 전파하고 싶을 때 호출하는 함수 추가\n    protected fun nextAction(action: CaAction) { // 'protected'로 변경하여 자식 클래스에서만 사용하도록 제한\n        flowCaActionStream.nextAction(action)\n    }\n\n    // 실제 Flow 구독 시작/취소는 별도 관리 (아래 Lifecycle 해결 부분 참조)\n    @VisibleForTesting\n    var actionProcessingJob: Job? = null\n}\n\n\n수정 내용 요약:\nmap -> onEach 변경: reducer 함수가 다음 Action을 반환하고 이를 map 연산자가 받아 downstream로 흘려보내는 구조를 제거했다. 대신 onEach를 사용하여 각 Action에 대해 reducer 함수를 실행만 하도록 변경다. 이로써 reducer의 반환값과 관계없이 자동 nextAction 호출 가능성이 사라졌다.\n명시적 nextAction 함수 추가: 연쇄적인 Action 전파가 필요한 경우, 개발자가 reducer 함수 내에서 직접 nextAction(action) 함수를 호출하도록 변경했다. 이는 시스템에 의한 암묵적인 동작 대신, 개발자의 명확한 의도에 따라 다음 Action이 발생하도록 하여 코드의 예측 가능성을 높인다.\n이제 reducer 내에서 다음과 같이 명시적으로 다음 Action을 지정해야 한다.\noverride suspend fun reducer(action: MyScreenAction) {\n    when (action) {\n        is MyScreenAction.ButtonClick -> {\n            // 예시: 버튼 클릭 후 특정 조건 만족 시 Alert 표시 Action 전파\n            if (shouldShowAlert()) {\n                nextAction(CommonUiAction.ShowAlert(\"버튼 클릭됨!\")) // 명시적으로 nextAction 호출\n            }\n        }\n        // ... 다른 Action 처리\n    }\n}\n\n이 변경으로 시스템적인 무한 루프 발생 가능성은 제거되었고, 코드의 흐름이 더 명확해졌다.\n\n문제점 2 - Lifecycle 문제 해결하기\n싱글턴 Action 스트림(FlowCaActionStream) 사용 시 발생하는 Lifecycle 동기화 문제를 해결하기 위해, Composable의 Lifecycle에 맞춰 ViewModel의 Action 스트림 구독을 시작하고 중지하는 방식을 도입했다.\n문제 상황: Activity A와 B가 있을 때, Activity B가 화면에 보이는 동안에도 백그라운드의 Activity A에 있는 ViewModel이 Action 스트림을 계속 구독하고 있으면, Activity B에서 발생한 Action이 Activity A의 ViewModel에게도 전달될 수 있다. (물론 filterIsInstance로 타입 필터링은 되지만, 같은 타입의 Action을 여러 화면에서 사용한다면 문제가 된다.)\n\n\n해결 방안: Lifecycle에 따른 구독 제어\nComposable의 Lifecycle 상태(특히 ON_RESUME, ON_PAUSE)에 맞춰 ViewModel 내 Action 스트림(actionProcessingFlow)의 구독(Job)을 시작하고 취소하는 방법을 사용합니다. 이를 위해 DisposableEffect와 LocalLifecycleOwner를 활용하는 Helper Composable 함수를 만들었습니다.\n\n@Composable\nfun LaunchedLifecycleViewModel(\n    viewModel: CaViewModel<*> // 라이프사이클 관리가 필요한 ViewModel\n) {\n    val lifecycleOwner = LocalLifecycleOwner.current\n    DisposableEffect(lifecycleOwner, viewModel) { // lifecycleOwner와 viewModel이 키\n        val observer = LifecycleEventObserver { _, event ->\n            when (event) {\n                Lifecycle.Event.ON_RESUME -> {\n                    // 화면이 활성화되면 Action 스트림 구독 시작\n                    viewModel.startActionProcessing()\n                }\n                Lifecycle.Event.ON_PAUSE -> {\n                    // 화면이 비활성화되면 Action 스트림 구독 취소\n                    viewModel.cancelActionProcessing()\n                }\n                // ON_DESTROY는 DisposableEffect의 onDispose에서 처리되거나\n                // ViewModel의 onCleared에서 처리될 수 있음\n                else -> { /* Do nothing for other events */ }\n            }\n        }\n        lifecycleOwner.lifecycle.addObserver(observer)\n\n        // Composable이 Composition에서 제거될 때(onDispose) Observer 제거\n        onDispose {\n            lifecycleOwner.lifecycle.removeObserver(observer)\n            // 필요하다면 여기서도 cancelActionProcessing() 호출 고려\n            // viewModel.cancelActionProcessing()\n        }\n    }\n}\n\n\n그리고 CaViewModel에 Action 스트림 구독을 시작하고 취소하는 함수를 추가한다. (internal 접근 제한자를 사용하여 모듈 외부에서의 직접 호출을 방지한다.)\n\nabstract class CaViewModel<CA_ACTION : CaAction>(\n    // ... (이전 코드와 동일)\n) : ViewModel() {\n\n    // ... (actionProcessingFlow, reducer, nextAction 등) ...\n\n    @VisibleForTesting\n    var actionProcessingJob: Job? = null // 구독 상태를 관리하는 Job\n\n    // Action 스트림 구독 시작 (ON_RESUME 시 호출됨)\n    internal fun startActionProcessing() {\n        // 이미 실행 중이라면 중복 실행 방지\n        if (actionProcessingJob?.isActive == true) return\n\n        // 기존 Job이 있다면 취소 (혹시 모를 상황 대비)\n        cancelActionProcessing()\n\n        // actionProcessingFlow를 viewModelScope에서 구독 시작\n        actionProcessingJob = actionProcessingFlow\n            .launchIn(viewModelScope)\n    }\n\n    // Action 스트림 구독 취소 (ON_PAUSE 시 호출됨)\n    internal fun cancelActionProcessing() {\n        actionProcessingJob?.cancel()\n        actionProcessingJob = null\n    }\n\n    // ViewModel이 파괴될 때(onCleared) 확실하게 Job 취소\n    override fun onCleared() {\n        super.onCleared()\n        cancelActionProcessing()\n    }\n}\n\n\n위 코드를 활용하는 방법은?\n각 화면의 최상위 Composable에서 ObserveLifecycle 함수를 호출해주어야 한다.\n@Composable\nfun SomeScreen(viewModel: SomeViewModel = hiltViewModel()) {\n    // ViewModel의 Action 구독 라이프사이클 관리\n    LaunchedLifecycleViewModel(viewModel = viewModel)\n\n    // --- 실제 UI ---\n    // val state by viewModel.uiState.collectAsState()\n    // SomeContent(...)\n    // ---\n}\n\n개선 아이디어: 매번 ObserveLifecycle(viewModel)를 호출하는 것이 번거롭다면, ViewModel 인스턴스를 얻을 때 자동으로 이 로직을 포함시키는 확장 함수나 위임(delegate)을 고려해볼 수 있다. 예를 들어:\n\n@Composable\nfun Some(viewModel: ViewModel = hiltViewModel().Activate()) {\n  // Your view\n}\n\n\n또는 hilt를 직접 확장한다면 아래와 같다.\n\n// 개념적인 아이디어 (구현 필요)\n@Composable\ninline fun <reified VM : CaViewModel<*>> hiltViewModelWithLifecycle(): VM {\n    val viewModel: VM = hiltViewModel()\n    LaunchedLifecycleViewModel(viewModel = viewModel)\n    return viewModel\n}\n\n// 사용 예시\n@Composable\nfun SomeScreen(viewModel: SomeViewModel = hiltViewModelWithLifecycle()) {\n    // 이제 LaunchedLifecycleViewModel() 호출 불필요\n    // ... UI ...\n}\n\n\n(Gemini 주의: hiltViewModelWithLifecycle 같은 함수는 Composable 함수 내에서 다른 Composable 함수(LaunchedLifecycleViewModel)를 호출하는 방식이므로, ViewModel 생성 로직과 Lifecycle 관찰 로직을 분리하는 것이 더 좋을 수 있다. 또는 별도의 진입점 Composable에서 처리하는 방식도 고려할 수 있다.)\n고려사항:\n이 방식은 ViewModel이 간접적으로 UI Lifecycle을 인지하게 되는 것 아니냐는 비판이 있을 수 있다. 하지만 start/cancelActionProcessing 함수 호출 시점은 ViewModel 외부(LaunchedLifecycleViewModel)에서 결정되므로, ViewModel 자체는 Lifecycle 객체를 직접 참조하지 않는다.\nON_RESUME / ON_PAUSE 이벤트마다 Job을 취소하고 다시 시작하는 오버헤드가 발생할 수 있다. 하지만 이는 화면이 실제로 보이지 않을 때 불필요한 Action 처리를 방지하는 효과적인 방법 중 하나이다.\n\n해결했을까?\n위 변경 사항들을 통해 초기 설계에서 발견된 두 가지 주요 문제점을 해결할 수 있었다.\n무한 루프 발생 가능성: reducer 처리 후 자동 nextAction 전파 로직을 제거하고, 명시적인 nextAction 함수 호출 방식으로 변경하여 해결했다.\n싱글턴 Action 스트림의 Lifecycle 문제: Composable의 Lifecycle에 맞춰 ViewModel의 Action 스트림 구독을 제어하는 LaunchedLifecycleViewModel Helper Composable을 도입하여, 비활성 화면에서의 불필요한 Action 처리 가능성을 해결했다.\n하지만 항상 더 나은 방법이 있을 수 있다.\n\n구독하는 더 좋은 방법은 없을까?\nON_RESUME/ON_PAUSE 마다 launchIn으로 Job을 생성하고 취소하는 방식 대신, Flow의 stateIn 연산자를 활용하는 방법을 고려해볼 수 있다.\nstateIn 연산자는 Flow를 StateFlow로 변환하며, 구독자(collector)의 유무에 따라 업스트림 Flow의 실행을 제어할 수 있는 SharingStarted 정책을 제공한다. 예를 들어 SharingStarted.WhileSubscribed() 정책을 사용하면, StateFlow를 구독하는 Composable이 화면에 보이는 동안(collectAsState 등으로 구독 중)에만 업스트림 Flow(actionProcessingFlow)가 활성화되고, 화면에서 사라지면 자동으로 구독이 중단(cancel)될 수 있다.\n이러한 접근 방식은 Slack에서 만든 Circuit - link 아키텍처와 유사한 방향으로 흘러갈 수 있다. Circuit에서는 Presenter가 UI State를 Flow로 노출하고, UI 이벤트는 Sink를 통해 Presenter로 전달됩니다. Presenter 내부 로직의 실행 여부는 최종적으로 UI State Flow의 구독 여부에 따라 결정될 수 있다.\nskydoves(재웅 님)가 작성한 Loading Initial Data in LaunchedEffect vs. ViewModel - link 글에서도 LaunchedEffect 내에서의 데이터 로딩과 ViewModel의 stateIn을 활용한 데이터 로딩 방식을 비교하며 유사한 아이디어를 엿볼 수 있다.\n결국 상태(State)를 중심으로 데이터 흐름을 관리하고, 그 상태의 구독 생명주기에 맞춰 연관된 로직(Action 처리 등)의 실행 여부를 제어하는 방식이 더 Compose 친화적이고 효율적일 수 있다.\n저는 현재 설계에서 상태 관리와 이벤트 처리를 분리하고 싶어 이 방식(Circuit이나 stateIn을 전면적으로 활용하는 방식)까지 적용하지는 않았지만, 궁극적으로는 이와 유사한 형태로 발전할 수 있지 않을까 생각하고 있다.\n\nNext\n이번 글에서는 기존 Composable Architecture 설계에서 발견된 2가지 문제점을 파악하고 이를 해결하기 위해 어떤 고민과 선택을 했는지 정리해보았다.\n다음 글에서는 이 아키텍처를 활용하여 구현한 구체적인 기능들을 다룰 예정이다.\n코드에는 이미 있지만 Alert/Toast를 포함하고있다.\nRouter(액티비티, 네비게이션)를 처리하기 위한 부분도 포함하고있다.\n이제 다음 글에서 이 두개를 정리할 계획이다.\n\n작성 글 이어보기\n컴포즈에 사용할 Composable Architecutre 설명(리엑트?)\nComposable Architecutre는 만들었는데 문제가 있었네? 개선해보자.\n예고 - Composable Architecutre를 활용한 Alert/Toast?\n예고 - Composable Architecutre를 활용한 Router?",
        "guid": "https://thdev.tech/architecture/2025/04/15/Android-Architecture-02/",
        "isoDate": "2025-04-15T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "Splunk의 Join - 5th",
        "link": "https://kangmyounghun.blogspot.com/2025/04/splunk-join-5th.html",
        "pubDate": "2025-04-13T02:57:00.000Z",
        "author": "강명훈",
        "content": "<div>inner join.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixDdh6sq0h7NiY7ekFt67l7iM1xq8xuzAs98M-YfZLGi-RF5u0jJuPt7ZKDvnI2QLHtL8ApWNdZG9BKztDHCP_Icc0AkSCy9D5VDDXr2ByO-OSVFgsjxK5KGhrL2_Whi2fNJmoWUjdSedGCFF60NFAPwO1M8dCuslqlKFPuauk9_V-Y8fEbFnaDDEj7dTQ/s1470/inner_join.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1125\" data-original-width=\"1470\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEixDdh6sq0h7NiY7ekFt67l7iM1xq8xuzAs98M-YfZLGi-RF5u0jJuPt7ZKDvnI2QLHtL8ApWNdZG9BKztDHCP_Icc0AkSCy9D5VDDXr2ByO-OSVFgsjxK5KGhrL2_Whi2fNJmoWUjdSedGCFF60NFAPwO1M8dCuslqlKFPuauk9_V-Y8fEbFnaDDEj7dTQ/s16000/inner_join.png\" /></a></div>\n<div><br /></div><div><span><a name='more'></a></span>left join.</div><br />\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBMe03aUKkg4gKcHkNA0_SYmAO9Qc_hcPLnmMg31hmS2tsgmWAbPfHsV0ap9GvpdrL1tDkxln4vpLrebn7ON935oJPZJT3G9TDJkFxFUkBKH92N_qoj9KFolOzXj6AQF8j0sc7maki5Fof20iL1eq2tXHp-dIZqI2SZu6DxS08Q1S5iR6Z66si6mVRbROb/s1394/left_join.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1125\" data-original-width=\"1394\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBMe03aUKkg4gKcHkNA0_SYmAO9Qc_hcPLnmMg31hmS2tsgmWAbPfHsV0ap9GvpdrL1tDkxln4vpLrebn7ON935oJPZJT3G9TDJkFxFUkBKH92N_qoj9KFolOzXj6AQF8j0sc7maki5Fof20iL1eq2tXHp-dIZqI2SZu6DxS08Q1S5iR6Z66si6mVRbROb/s16000/left_join.png\" /></a></div>\n<div><br /></div><div>교집합 제외한 left join.</div><br />\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiz1UdN6mn1NqtKodNpELfR6Jn4F9aLLlveptkzxioo2L_r8ISYu7ww6XSn2rbYbYtBQoq_SJtoKlAXzjtSWbV80ALWuAMX7gcTdceAJY5dRSv0qEpr_2TGk7cXyURnN0Xzg6Is88PDX0EcZopXJVY3lMjf5RJoZnogWaCMx1MsPSXEYI7Ts_oX-4d_4yEJ/s1502/left_join2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1125\" data-original-width=\"1502\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiz1UdN6mn1NqtKodNpELfR6Jn4F9aLLlveptkzxioo2L_r8ISYu7ww6XSn2rbYbYtBQoq_SJtoKlAXzjtSWbV80ALWuAMX7gcTdceAJY5dRSv0qEpr_2TGk7cXyURnN0Xzg6Is88PDX0EcZopXJVY3lMjf5RJoZnogWaCMx1MsPSXEYI7Ts_oX-4d_4yEJ/s16000/left_join2.png\" /></a></div>\n<br /><div>full join.</div><div><br /></div>\n<div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiyoVvxzr8IoshQYh36Igmd1CshyphenhyphencRy2qO_13b-CepCvOKannzB5NLUTkMD_gbjAqVhKjR8vIZ0D2sBI9r9NebVtKHXSe4kKO0-T5n_zzvzh7H3cA159pQv9ekt_qWKvK_OnHQjy9mMw2BXBhTc3XRvz-gbaRl3M5XnfptbxtO74GJK6HIUhO5QJ7ZXLU_0/s1125/full_join.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1125\" data-original-width=\"944\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiyoVvxzr8IoshQYh36Igmd1CshyphenhyphencRy2qO_13b-CepCvOKannzB5NLUTkMD_gbjAqVhKjR8vIZ0D2sBI9r9NebVtKHXSe4kKO0-T5n_zzvzh7H3cA159pQv9ekt_qWKvK_OnHQjy9mMw2BXBhTc3XRvz-gbaRl3M5XnfptbxtO74GJK6HIUhO5QJ7ZXLU_0/s16000/full_join.png\" /></a></div><br /></div><div>교집합 제외한 full join.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPSJ6DgrvnRYmhT5qwkLjXTFV8ig78PCr9gPHmpDfYxcycB4sM6Hcu6A4cuuTd3a6F3HDwU9kNgjiqBJlQs1UggleUsH2gWer86fn7sjY_N6CxQofWcubDBLlWHvZ2jMalTLIEFMJ1PWoJ59lrG9BYGrn75eOQqhyWkzaOsdyIQD6dcJkQu4_v4suR-kfC/s1125/full_join2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1125\" data-original-width=\"990\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgPSJ6DgrvnRYmhT5qwkLjXTFV8ig78PCr9gPHmpDfYxcycB4sM6Hcu6A4cuuTd3a6F3HDwU9kNgjiqBJlQs1UggleUsH2gWer86fn7sjY_N6CxQofWcubDBLlWHvZ2jMalTLIEFMJ1PWoJ59lrG9BYGrn75eOQqhyWkzaOsdyIQD6dcJkQu4_v4suR-kfC/s16000/full_join2.png\" /></a></div><br /><div><b>관련 글</b></div><div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2024/10/splunk-join-4th.html\">Splunk의 Join - 4th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/03/splunk-join.html\" target=\"\">Splunk의 Join</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/07/splunk-lookup.html\" target=\"\">Splunk의 lookup</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2022/10/join.html\" target=\"\">엘라스틱의 Join</a></li></ul></div></div>",
        "contentSnippet": "inner join.\n\n\n\n\nleft join.\n\n\n\n교집합 제외한 left join.\n\n\nfull join.\n\n\n\n\n\n교집합 제외한 full join.\n\n\n\n\n관련 글\n\n\nSplunk의 Join - 4th\nSplunk의 Join\nSplunk의 lookup\n엘라스틱의 Join",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-9209557534125241532",
        "isoDate": "2025-04-13T02:57:00.000Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": [
      {
        "title": "승려와 수수께끼 | 랜디 코미사",
        "link": "https://sungjk.github.io/2025/04/12/the-monk-and-the-riddle.html",
        "pubDate": "2025-04-12T00:00:00+00:00",
        "content": "\n            \n            &lt;p&gt;&lt;img src=&quot;/images/2025/04/12/the-monk-and-the-riddle.png&quot; alt=&quot;The Monk And The Riddle&quot; title=&quot;The Monk And The Riddle&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;&lt;strong&gt;“이 달걀을 1미터 정도 아래로 떨어뜨리되 깨뜨리면 안 됩니다. 어찌 해야 할까요?”&lt;/strong&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;변호사이자 실리콘밸리 투자자인 &lt;a href=&quot;https://en.wikipedia.org/wiki/Randy_Komisar&quot;&gt;랜디 코미사&lt;/a&gt;의 이야기를 다룬 책이다. 미얀마에서 만난 한 승려가 던지는 질문으로 책에서 하고자 하는 이야기가 시작된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;이 달걀을 1미터 정도 아래로 떨어뜨리되 깨뜨리면 안 됩니다. 어찌 해야 할까요?&lt;/code&gt; 이 질문을 들으면 어떤 생각이 드는가? 단단한 돌 바닥 위에서 달걀을 들고 있는 모습이 상상된다. 그런데 이걸 떨어뜨리되 깨뜨리면 안된다..? 바닥에 쿠션을 놓으면 안될까? 아니면 혹시.. 물 위에서 떨어뜨리면 안되나?&lt;/p&gt;\n\n&lt;p&gt;우리는 자연스레 계란이 떨어지면 깨지는 것부터 상상한다. 그래서 깨지지 않게 하려면 바닥에 부드러운 무언가를 놓고 깨지지 않게끔 만드는게 중요하다고 생각이 든다. 승려는 어떤 메시지를 전달하고 싶어서 이런 질문을 했는지 궁금증을 가진채 계속 읽어 나갔다.&lt;/p&gt;\n\n&lt;p&gt;승려는 책의 도입부에 질문을 마지막으로 나오지 않고, 그 이후부터는 랜디와 레니라는 창업가의 이야기로만 구성되어 있다. 어느날 랜디에게 장례 용품을 온라인에서 사고 팔 수 있는 사업을 하겠다고 레니라는 사람이 투자와 자문을 구하기 위해 찾아왔다. 레니는 엄청난 열정과 굉장히 구체적인 사업 계획을 가지고 있었다. 하지만 지금 당장은 돈을 벌기 위한 수단으로 사업을 하고, 돈을 많이 벌고 난 이후에 본인이 진짜 하고 싶은 일을 하려고 계획중이었다. 이런 레니의 이야기를 듣고 랜디는 열정 가득하고 사업 계획 구체적이지만, 왜 장례 사업을 하려는건지 목적과 비전이 뚜렷하지 않아서 몇 가지 조언을 남긴 뒤 투자를 위한 마음은 접기로 했다.&lt;/p&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;“내 경험상, 만약 돈 때문에 이 일을 시작한다면 닭 쫓던 개 신세를 면치 못할 겁니다. 돈은 결코 그렇게 따라오지 않아요. 뭔가 더 있어야 합니다. 상황이 최악으로 치달을 때 나를 지켜줄 만한 목적의식 같은 것 말이죠. 실패하더라도 이 일에 엄청난 시간과 노력을 쏟을 만한 가치가 있는, 그런 것이 있어야 한단 말입니다.”&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;그러나 레니는 포기하지 않고 랜디의 조언을 바탕으로 사업 계획서를 다시 다듬고 오랜 기간 랜디를 괴롭히다시피 한다. 결국 랜디는 굉장히 끈질긴 성격을 가진 레니에게 사업을 하려고 하는 진짜 목적에 대해 스스로 고민할 수 있도록 질문을 하기 시작한다. ‘미뤄 놓은 인생 설계’, ‘내가 가장 하고 싶은 것’. 중간중간 랜디의 변호사 시절과 실리콘밸리 회사에서의 다양한 경험 이야기도 나오는데, 사업을 함에 있어 가장 중요한건 동기라는 사실을 일깨워준다. 레니는 랜디와 동업자 앨리슨의 생각과 조언을 받아들여 본인이 정말로 하고 싶었던 것과 장례 사업을 접목시켜 가슴뛰는 사업의 목적을 찾게 된다.&lt;/p&gt;\n\n&lt;p&gt;살면서 혹은 일을 하면서 여러가지 문제를 마주하는데 그 때마다 &lt;strong&gt;지금 있는 현상에만 집중하다가 본질(핵심)이 무엇인지 잊게 된다.&lt;/strong&gt; 현상에만 집중하다보면 본질과 다른 방향으로 답을 찾게 된다. 책의 맨 마지막에 승려가 낸 질문에 대한 해답이 나온다. 그런데 그 답이 중요한게 아니라, 승려가 왜 이 수수께끼를 냈는지가 중요하다. 책을 읽다보면 승려가 내놓은 수수께끼의 본질을 알게 되는데, &lt;strong&gt;‘계란이 깨지지 않게 만드는게 아니라, 1미터 높이에서 깨지지 않는 상태로 존재하게 할 수 있는 방법’&lt;/strong&gt; 이다.&lt;/p&gt;\n\n&lt;p&gt;이 책의 주된 이야기인 사업 뿐만 아니라, 우리가 하고 있는 무언가에 대한 질문이기도 하다. 지금 원하는 일을 하고 있는가? 이 일을 왜 하는가? 열심히 일해서, 돈 많이 벌어서, 나중에 하고 싶은거 하면서 편하게 즐겁게 살아야지. 인생은 출애굽기도, 영웅전도 아니다. 현재의 고통을 전제로 미래의 행복을 바꾸거나 하고 싶지도 않은 일에 인생을 낭비하기엔 너무 아깝고, 당장 하고 싶은 일을 해야 한다는 당연하면서도 어려운 교훈을 주는 책이다.&lt;/p&gt;\n\n&lt;h3 id=&quot;인상-깊은-구절&quot;&gt;인상 깊은 구절&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;열정이란, 저항할 수조차 없이 어떤 것으로 당신 자신을 끌어가는 것을 말한다. 반면 의지란, 책임감 또는 해야만 한다고 생각되는 일에 의해 떠밀려가는 것이다. 만약 자신에 대해 아무것도 모른다면 그 차이를 알 수 없다. 조금이나마 자기 인식을 하고 있는 사람은 내가 어떤 분야에 열정을 가지고 있는지 알 수가 있다. 어떤 목표를 달성하고 싶다는 욕망은 열정이 아니며, 일정 수준의 몫이나 보너스, 또는 회사를 매각하여 현금을 벌고 싶다는 욕심도 열정이 아니다. 다른 사람의 성취를 따라 하기 위해 노력하는 것도 열정이 아니다. 그것은 의지에 가깝다.&lt;/li&gt;\n  &lt;li&gt;비즈니스 환경은 늘 변한다. 사람들은 전략과 수익모델을 변화하는 환경에 맞게 지속적으로 재검토하고 필요에 따라 수정해야 한다. 하지만 수정할 때마다 기준으로 삼아야 하는 것은 기업의 큰 비전이다. 긴급한 상황을 모면하기 위해 구성원의 감동을 이끌어 내는 비전을 포기하면, 나침반 없이 남겨지는 것과 다를 바 없다. 나는 기업의 위치를 돌아볼 때 현재 상황만 따지는 것이 아니라 목표와 방향 점검도 병행돼야 한다는 충고를 늘 하고 있다. 나침반을 맞추고 길을 따라 나아가라. 그래야 장애물에 걸려 넘어지더라도 방향 감각을 유지할 수 있을 것이다.&lt;/li&gt;\n  &lt;li&gt;관리와 리더십은 서로 공통점이 있기는 하지만 같은 건 아니다. 레니처럼 편협한 사고방식을 가지고 있는 사람은 그 차이를 알 수 없다. 관리는 체계적인 과정을 말하는데 그 목적은 정해진 시간과 예산 내에서 원하는 결과를 낳는 것이다. 리더십은 인격과 비전으로 다른 사람을 불가능한 일에 도전하도록 만든다. 관리는 리더십을 보완하고 지원하지만, 리더십을 내포하지 않은 관리는 아무것도 할 수 없다. 리더는 아랫사람들의 의혹을 해소시키고 불완전한 정보를 가지고도 나아갈 수 있도록 만들어야 한다.&lt;/li&gt;\n  &lt;li&gt;기차를 제시간에 맞게 도착시키는 관리자의 역할보다 리더로서의 업무가 나는 더 마음에 들었다. 리더의 묘미는 계산기를 두드리고 생산라인을 개선하는 방법을 찾는 것에 있지 않았다. 사람들이 한계를 넘어설 수 있도록 용기를 북돋고, 사람들이 위대해질 수 있도록 자극을 주며 나보다 더 잘 할 수 있는 사람에게 그 일을 맡기며, 또한 사람들이 조화롭게 업무를 수행할 수 있도록 돕는 데 있었다. 그게 수준 높다할 수 있는 기술이었다.&lt;/li&gt;\n  &lt;li&gt;위험부담에 너무 신경 쓴 나머지 아무런 결정도 내리지 못하는 사람들도 있다. 이들은 모든 사항을 열심히 검토하지만, 어느 순간부터는 추가 정보나 확증이 있어도 사업의 궁극적인 성공이나 실패에 대한 갈피를 잡지 못하게 된다. 이렇게 되면 이들은 불확실에 휩싸인 나머지 그 자리에 얼어붙은 채 현상만을 유지한다. 결국 그들이 아는 것은 그게 전부가 된다.&lt;/li&gt;\n  &lt;li&gt;하지만 좀 더 파고들어 가면, 사업의 위험부담과 함께 결부되는 개인의 위험부담도 고려하게 된다. 개인의 위험부담은 존경하지 않는 사람과 함께 일하는 것, 나와 다른 사업관을 가진 회사에서 일하는 것, 그리고 중요하다고 생각하는 것을 타협해야 하는 것, 본모습을 제대로 발휘할 수 없는, 혹은 완전히 모순되는 일을 하는 것들을 의미한다. 하지만 그 중 가장 큰 위험 부단은 미래의 행복을 위안으로 삼으면서 하고 싶지도 않은 일에 평생 인생을 낭비하게 되는 것이다.&lt;/li&gt;\n  &lt;li&gt;반면 개인적 위험은 계량화가 불가능하다. 그것은 가치와 우선순위, 자신이 누구인지를 표현하는 문제다. ‘안전 제일주의’ 라는 말은 현상에 만족하겠다는 것을 의미한다. 지금 당장 금전적 이익이 있으면 시간 낭비와 만족감의 부채 또한 감소할 수 있다는 뜻이다. 아니면 아무 생각조차 해보지 않겠다는 뜻이다. 반면, 시간과 만족이 값을 매길 수 없을만큼 소중한 것이라 여긴다면 자신과 가족의 행복을 위험에 빠뜨리지 않는 한도 내에서 실패에 따른 위험부담을 감수하게 된다. 원하는 삶을 살기 위한 위험부담은 아무것도 아니라는 것을 알기 때문이다.&lt;/li&gt;\n  &lt;li&gt;개인의 위험부담을 생각하다 보면 개인의 성공에 대한 정의도 내려진다. 사업적인 성공이 꼭 개인의 성공으로 연결된다고 할 수 없다. 우리는 대부분 초등학교에서부터 대학교를 거쳐 직장생활에 이르기까지, 끊임없는 방해요소에 부딪히면서 다른 사람들이 내린 ‘성공’ 의 정의를 그대로 인식하게 된다. 다른 사람들이 만든 기준으로 자신을 평가하고, 다른 사람과 나를 비교해 순위를 매기려 한다. 개인적인 목표는 오로지 우리 스스로에게 놓여 있을 뿐, 쓸데없는 평가와 비교로부터 자유로운 것이다.&lt;/li&gt;\n  &lt;li&gt;열정을 다해 열심히 일하라. 단, 가장 소중한 재산인 시간을 가장 의미 있는 일에 써라. 남은 인생 동안 무엇을 하고 싶은가? 이 말은 문자 그대로 앞으로 평생 무엇을 할 것인가 라는 뜻이 아니다. 예상치 않은 사회 속에서 앞으로 평생 동안 어떤 일을 하게 될지 알 수 있는 사람이 과연 누가 있을까? 내일 갑자기 생이 끝난다면 지금까지 정말로 하고 싶은 일을 하면서 살았다고 자신 있게 말할 수 있을까? 당신은 앞으로 평생 어떤 일을 하고 싶은가? 지금 당장 그 일을 시작하려면 어떻게 해야 할까?&lt;/li&gt;\n&lt;/ul&gt;\n\n            \n          ",
        "contentSnippet": "<p><img src=\"/images/2025/04/12/the-monk-and-the-riddle.png\" alt=\"The Monk And The Riddle\" title=\"The Monk And The Riddle\" class=\"center-image\" /></p>\n\n<blockquote>\n  <p><strong>“이 달걀을 1미터 정도 아래로 떨어뜨리되 깨뜨리면 안 됩니다. 어찌 해야 할까요?”</strong></p>\n</blockquote>\n\n<p>변호사이자 실리콘밸리 투자자인 <a href=\"https://en.wikipedia.org/wiki/Randy_Komisar\">랜디 코미사</a>의 이야기를 다룬 책이다. 미얀마에서 만난 한 승려가 던지는 질문으로 책에서 하고자 하는 이야기가 시작된다. <code class=\"language-plaintext highlighter-rouge\">이 달걀을 1미터 정도 아래로 떨어뜨리되 깨뜨리면 안 됩니다. 어찌 해야 할까요?</code> 이 질문을 들으면 어떤 생각이 드는가? 단단한 돌 바닥 위에서 달걀을 들고 있는 모습이 상상된다. 그런데 이걸 떨어뜨리되 깨뜨리면 안된다..? 바닥에 쿠션을 놓으면 안될까? 아니면 혹시.. 물 위에서 떨어뜨리면 안되나?</p>\n\n<p>우리는 자연스레 계란이 떨어지면 깨지는 것부터 상상한다. 그래서 깨지지 않게 하려면 바닥에 부드러운 무언가를 놓고 깨지지 않게끔 만드는게 중요하다고 생각이 든다. 승려는 어떤 메시지를 전달하고 싶어서 이런 질문을 했는지 궁금증을 가진채 계속 읽어 나갔다.</p>\n\n<p>승려는 책의 도입부에 질문을 마지막으로 나오지 않고, 그 이후부터는 랜디와 레니라는 창업가의 이야기로만 구성되어 있다. 어느날 랜디에게 장례 용품을 온라인에서 사고 팔 수 있는 사업을 하겠다고 레니라는 사람이 투자와 자문을 구하기 위해 찾아왔다. 레니는 엄청난 열정과 굉장히 구체적인 사업 계획을 가지고 있었다. 하지만 지금 당장은 돈을 벌기 위한 수단으로 사업을 하고, 돈을 많이 벌고 난 이후에 본인이 진짜 하고 싶은 일을 하려고 계획중이었다. 이런 레니의 이야기를 듣고 랜디는 열정 가득하고 사업 계획 구체적이지만, 왜 장례 사업을 하려는건지 목적과 비전이 뚜렷하지 않아서 몇 가지 조언을 남긴 뒤 투자를 위한 마음은 접기로 했다.</p>\n\n<blockquote>\n  <p>“내 경험상, 만약 돈 때문에 이 일을 시작한다면 닭 쫓던 개 신세를 면치 못할 겁니다. 돈은 결코 그렇게 따라오지 않아요. 뭔가 더 있어야 합니다. 상황이 최악으로 치달을 때 나를 지켜줄 만한 목적의식 같은 것 말이죠. 실패하더라도 이 일에 엄청난 시간과 노력을 쏟을 만한 가치가 있는, 그런 것이 있어야 한단 말입니다.”</p>\n</blockquote>\n\n<p>그러나 레니는 포기하지 않고 랜디의 조언을 바탕으로 사업 계획서를 다시 다듬고 오랜 기간 랜디를 괴롭히다시피 한다. 결국 랜디는 굉장히 끈질긴 성격을 가진 레니에게 사업을 하려고 하는 진짜 목적에 대해 스스로 고민할 수 있도록 질문을 하기 시작한다. ‘미뤄 놓은 인생 설계’, ‘내가 가장 하고 싶은 것’. 중간중간 랜디의 변호사 시절과 실리콘밸리 회사에서의 다양한 경험 이야기도 나오는데, 사업을 함에 있어 가장 중요한건 동기라는 사실을 일깨워준다. 레니는 랜디와 동업자 앨리슨의 생각과 조언을 받아들여 본인이 정말로 하고 싶었던 것과 장례 사업을 접목시켜 가슴뛰는 사업의 목적을 찾게 된다.</p>\n\n<p>살면서 혹은 일을 하면서 여러가지 문제를 마주하는데 그 때마다 <strong>지금 있는 현상에만 집중하다가 본질(핵심)이 무엇인지 잊게 된다.</strong> 현상에만 집중하다보면 본질과 다른 방향으로 답을 찾게 된다. 책의 맨 마지막에 승려가 낸 질문에 대한 해답이 나온다. 그런데 그 답이 중요한게 아니라, 승려가 왜 이 수수께끼를 냈는지가 중요하다. 책을 읽다보면 승려가 내놓은 수수께끼의 본질을 알게 되는데, <strong>‘계란이 깨지지 않게 만드는게 아니라, 1미터 높이에서 깨지지 않는 상태로 존재하게 할 수 있는 방법’</strong> 이다.</p>\n\n<p>이 책의 주된 이야기인 사업 뿐만 아니라, 우리가 하고 있는 무언가에 대한 질문이기도 하다. 지금 원하는 일을 하고 있는가? 이 일을 왜 하는가? 열심히 일해서, 돈 많이 벌어서, 나중에 하고 싶은거 하면서 편하게 즐겁게 살아야지. 인생은 출애굽기도, 영웅전도 아니다. 현재의 고통을 전제로 미래의 행복을 바꾸거나 하고 싶지도 않은 일에 인생을 낭비하기엔 너무 아깝고, 당장 하고 싶은 일을 해야 한다는 당연하면서도 어려운 교훈을 주는 책이다.</p>\n\n<h3 id=\"인상-깊은-구절\">인상 깊은 구절</h3>\n\n<ul>\n  <li>열정이란, 저항할 수조차 없이 어떤 것으로 당신 자신을 끌어가는 것을 말한다. 반면 의지란, 책임감 또는 해야만 한다고 생각되는 일에 의해 떠밀려가는 것이다. 만약 자신에 대해 아무것도 모른다면 그 차이를 알 수 없다. 조금이나마 자기 인식을 하고 있는 사람은 내가 어떤 분야에 열정을 가지고 있는지 알 수가 있다. 어떤 목표를 달성하고 싶다는 욕망은 열정이 아니며, 일정 수준의 몫이나 보너스, 또는 회사를 매각하여 현금을 벌고 싶다는 욕심도 열정이 아니다. 다른 사람의 성취를 따라 하기 위해 노력하는 것도 열정이 아니다. 그것은 의지에 가깝다.</li>\n  <li>비즈니스 환경은 늘 변한다. 사람들은 전략과 수익모델을 변화하는 환경에 맞게 지속적으로 재검토하고 필요에 따라 수정해야 한다. 하지만 수정할 때마다 기준으로 삼아야 하는 것은 기업의 큰 비전이다. 긴급한 상황을 모면하기 위해 구성원의 감동을 이끌어 내는 비전을 포기하면, 나침반 없이 남겨지는 것과 다를 바 없다. 나는 기업의 위치를 돌아볼 때 현재 상황만 따지는 것이 아니라 목표와 방향 점검도 병행돼야 한다는 충고를 늘 하고 있다. 나침반을 맞추고 길을 따라 나아가라. 그래야 장애물에 걸려 넘어지더라도 방향 감각을 유지할 수 있을 것이다.</li>\n  <li>관리와 리더십은 서로 공통점이 있기는 하지만 같은 건 아니다. 레니처럼 편협한 사고방식을 가지고 있는 사람은 그 차이를 알 수 없다. 관리는 체계적인 과정을 말하는데 그 목적은 정해진 시간과 예산 내에서 원하는 결과를 낳는 것이다. 리더십은 인격과 비전으로 다른 사람을 불가능한 일에 도전하도록 만든다. 관리는 리더십을 보완하고 지원하지만, 리더십을 내포하지 않은 관리는 아무것도 할 수 없다. 리더는 아랫사람들의 의혹을 해소시키고 불완전한 정보를 가지고도 나아갈 수 있도록 만들어야 한다.</li>\n  <li>기차를 제시간에 맞게 도착시키는 관리자의 역할보다 리더로서의 업무가 나는 더 마음에 들었다. 리더의 묘미는 계산기를 두드리고 생산라인을 개선하는 방법을 찾는 것에 있지 않았다. 사람들이 한계를 넘어설 수 있도록 용기를 북돋고, 사람들이 위대해질 수 있도록 자극을 주며 나보다 더 잘 할 수 있는 사람에게 그 일을 맡기며, 또한 사람들이 조화롭게 업무를 수행할 수 있도록 돕는 데 있었다. 그게 수준 높다할 수 있는 기술이었다.</li>\n  <li>위험부담에 너무 신경 쓴 나머지 아무런 결정도 내리지 못하는 사람들도 있다. 이들은 모든 사항을 열심히 검토하지만, 어느 순간부터는 추가 정보나 확증이 있어도 사업의 궁극적인 성공이나 실패에 대한 갈피를 잡지 못하게 된다. 이렇게 되면 이들은 불확실에 휩싸인 나머지 그 자리에 얼어붙은 채 현상만을 유지한다. 결국 그들이 아는 것은 그게 전부가 된다.</li>\n  <li>하지만 좀 더 파고들어 가면, 사업의 위험부담과 함께 결부되는 개인의 위험부담도 고려하게 된다. 개인의 위험부담은 존경하지 않는 사람과 함께 일하는 것, 나와 다른 사업관을 가진 회사에서 일하는 것, 그리고 중요하다고 생각하는 것을 타협해야 하는 것, 본모습을 제대로 발휘할 수 없는, 혹은 완전히 모순되는 일을 하는 것들을 의미한다. 하지만 그 중 가장 큰 위험 부단은 미래의 행복을 위안으로 삼으면서 하고 싶지도 않은 일에 평생 인생을 낭비하게 되는 것이다.</li>\n  <li>반면 개인적 위험은 계량화가 불가능하다. 그것은 가치와 우선순위, 자신이 누구인지를 표현하는 문제다. ‘안전 제일주의’ 라는 말은 현상에 만족하겠다는 것을 의미한다. 지금 당장 금전적 이익이 있으면 시간 낭비와 만족감의 부채 또한 감소할 수 있다는 뜻이다. 아니면 아무 생각조차 해보지 않겠다는 뜻이다. 반면, 시간과 만족이 값을 매길 수 없을만큼 소중한 것이라 여긴다면 자신과 가족의 행복을 위험에 빠뜨리지 않는 한도 내에서 실패에 따른 위험부담을 감수하게 된다. 원하는 삶을 살기 위한 위험부담은 아무것도 아니라는 것을 알기 때문이다.</li>\n  <li>개인의 위험부담을 생각하다 보면 개인의 성공에 대한 정의도 내려진다. 사업적인 성공이 꼭 개인의 성공으로 연결된다고 할 수 없다. 우리는 대부분 초등학교에서부터 대학교를 거쳐 직장생활에 이르기까지, 끊임없는 방해요소에 부딪히면서 다른 사람들이 내린 ‘성공’ 의 정의를 그대로 인식하게 된다. 다른 사람들이 만든 기준으로 자신을 평가하고, 다른 사람과 나를 비교해 순위를 매기려 한다. 개인적인 목표는 오로지 우리 스스로에게 놓여 있을 뿐, 쓸데없는 평가와 비교로부터 자유로운 것이다.</li>\n  <li>열정을 다해 열심히 일하라. 단, 가장 소중한 재산인 시간을 가장 의미 있는 일에 써라. 남은 인생 동안 무엇을 하고 싶은가? 이 말은 문자 그대로 앞으로 평생 무엇을 할 것인가 라는 뜻이 아니다. 예상치 않은 사회 속에서 앞으로 평생 동안 어떤 일을 하게 될지 알 수 있는 사람이 과연 누가 있을까? 내일 갑자기 생이 끝난다면 지금까지 정말로 하고 싶은 일을 하면서 살았다고 자신 있게 말할 수 있을까? 당신은 앞으로 평생 어떤 일을 하고 싶은가? 지금 당장 그 일을 시작하려면 어떻게 해야 할까?</li>\n</ul>",
        "guid": "https://sungjk.github.io/2025/04/12/the-monk-and-the-riddle.html",
        "isoDate": "2025-04-12T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Lael's World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "ChatGPT의 GPT-4o 이미지 생성, DALL-E를 어떻게 뛰어넘었나?",
        "link": "http://muzbox.tistory.com/483568",
        "pubDate": "Tue, 15 Apr 2025 08:42:07 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483568#entry483568comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;ChatGPT의 GPT-4o 이미지 생성 기능의 혁신적인 변화! DALL-E와는 무엇이 다른지, 실제 사용해보니 드러난 장단점과 창작계에 미칠 파장까지. AI 이미지 생성의 새 시대가 열렸다고? 디자이너라면 꼭 알아야 할 모든 것.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1280\" data-origin-height=\"853\"><span data-url=\"https://blog.kakaocdn.net/dn/beQ5vI/btsNhu8ooKq/CucFTaHTYCcozipDc2eF1K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/beQ5vI/btsNhu8ooKq/CucFTaHTYCcozipDc2eF1K/img.png\"><img src=\"https://blog.kakaocdn.net/dn/beQ5vI/btsNhu8ooKq/CucFTaHTYCcozipDc2eF1K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbeQ5vI%2FbtsNhu8ooKq%2FCucFTaHTYCcozipDc2eF1K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT의 GPT-4o 이미지 생성, DALL-E를 어떻게 뛰어넘었나?\" loading=\"lazy\" width=\"1280\" height=\"853\" data-filename=\"blob\" data-origin-width=\"1280\" data-origin-height=\"853\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">요즘 들어 SNS를 보면 지브리풍 일러스트부터 놀라울 정도로 사실적인 사진까지, 모두 ChatGPT로 만들었다는 이미지들이 넘쳐나고 있어요. \"뭐야, ChatGPT도 이제 이미지를 만들어?\" 라고 생각하시는 분들 많으실 텐데요. 네, 맞습니다. 2025년 3월 26일, OpenAI가 GPT-4o를 출시하면서 DALL-E를 대체하는 이미지 생성 기능을 통합했거든요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">저는 디자인 분야에서 일하다 보니 미드저니, 스테이블 디퓨전부터 DALL-E까지 거의 모든 AI 이미지 생성 도구를 업무에 활용해왔는데요. GPT-4o의 이미지 생성 기능을 처음 접했을 때는 정말 놀랐어요. 왜 그랬는지, 그리고 이 변화가 우리에게 어떤 의미인지 함께 알아볼까요?</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>DALL-E에서 GPT-4o로, 무엇이 바뀌었나?  </b></span></h2>\n<p data-ke-size=\"size16\">이전까지 ChatGPT에서 이미지를 생성하려면 별도의 DALL-E 모델을 호출해야 했어요. 대화하다가 \"이 설명을 이미지로 만들어줘\"라고 하면 모드 전환이 일어나면서 DALL-E가 작동했죠. 하지만 이제는 GPT-4o 하나로 대화와 이미지 생성이 모두 가능해졌어요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">주요 변화점  </span></h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>통합된 사용자 경험</b> - 대화 흐름 중에 자연스럽게 이미지 생성이 가능해졌어요. 모드 전환 없이 대화하듯 이미지를 요청하면 바로 만들어줍니다.</li>\n<li><b>향상된 응답 속도</b> - DALL-E는 이미지 생성에 10-20초가 걸렸는데, GPT-4o는 대략 절반 정도로 시간이 단축됐어요.</li>\n<li><b>텍스트 렌더링 성능 향상</b> - 이전 DALL-E의 큰 약점 중 하나가 이미지 속 텍스트 처리였는데, GPT-4o는 이 부분이 획기적으로 개선되었어요. 포스터나 책 표지 같은 텍스트가 포함된 이미지 생성이 훨씬 정확해졌답니다.</li>\n<li><b>스타일 일관성</b> - 다양한 예술 스타일을 요청했을 때 일관된 퀄리티를 유지하는 능력이 향상되었어요. 특히 '지브리풍'으로 유명해진 애니메이션 스타일 구현이 뛰어나죠.</li>\n</ol>\n<p data-ke-size=\"size16\">솔직히 말하자면, 순수하게 사진 같은 사실적 이미지만 놓고 보면 기존 DALL-E가 약간 더 나은 경우도 있었어요. 하지만 전반적인 성능과 사용성은 GPT-4o가 훨씬 뛰어납니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>실제 사용해보니 느낀 GPT-4o 이미지 생성의 강점  </b></span></h2>\n<p data-ke-size=\"size16\">실제로 제가 업무에 활용해보니 GPT-4o의 강점이 확실히 드러나더라고요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">1. 맥락 이해 능력</span></h3>\n<p data-ke-size=\"size16\">제가 가장 놀란 부분은 대화 맥락을 기반으로 이미지를 생성한다는 점이에요. 예를 들어, 로고 디자인에 대해 길게 대화를 나눈 후 \"이걸 이미지로 만들어줘\"라고 하면 이전 대화 내용을 모두 고려한 이미지를 만들어줍니다. DALL-E는 그냥 그 한 문장만 고려했죠.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">2. 디테일 컨트롤</span></h3>\n<p data-ke-size=\"size16\">\"조금 더 밝게\", \"왼쪽 캐릭터의 표정을 더 행복하게\" 같은 세부 수정 요청에 훨씬 더 정확하게 반응해요. 이전에는 비슷한 프롬프트로 처음부터 다시 생성하는 경우가 많았는데, GPT-4o는 원하는 부분만 정확히 수정해주는 경우가 많아요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">3. 텍스트와 이미지의 완벽한 조화</span></h3>\n<p data-ke-size=\"size16\">포스터나 인포그래픽처럼 텍스트가 포함된 이미지를 만들 때 정말 빛을 발해요. DALL-E에서는 \"Happy Birthday\"라는 간단한 문구조차 \"Ha9py Birtиday\" 같은 이상한 글자로 나오는 경우가 많았는데, GPT-4o는 거의 완벽하게 텍스트를 렌더링합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>아직 아쉬운 점들  </b></span></h2>\n<p data-ke-size=\"size16\">물론 완벽하진 않아요. 제가 실제 사용하면서 느낀 한계점도 있습니다:</p>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>복잡한 구도의 한계</b> - 여러 사람이 특정 동작을 취하고 있는 복잡한 장면을 요청하면 여전히 손이나 발이 이상하게 나오는 경우가 있어요.</li>\n<li><b>해상도 제한</b> - 현재 생성되는 이미지의 해상도가 제한적이라 고품질 인쇄물용으로 사용하기엔 부족해요.</li>\n<li><b>스타일 제한</b> - 특정 작가나 브랜드의 스타일을 정확하게 모방하는 데는 여전히 한계가 있습니다.</li>\n</ol>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>이 변화가 창작 산업에 미칠 영향  </b></span></h2>\n<p data-ke-size=\"size16\">GPT-4o의 이미지 생성 기능은 단순한 기술적 발전을 넘어 창작 방식 자체를 바꿀 잠재력이 있어요. 이제 누구나 쉽게 자신의 아이디어를 시각화할 수 있게 되었으니까요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">디자이너와 일러스트레이터에게는?</span></h3>\n<p data-ke-size=\"size16\">솔직히 말해서, 불안함을 느끼는 디자이너분들 많으실 거예요. 하지만 저는 이걸 위협보다는 도구로 봐야 한다고 생각해요. 디자인 초안을 빠르게 만들거나, 클라이언트와 소통하는 과정에서 아이디어를 시각화하는 데 정말 유용하거든요.</p>\n<p data-ke-size=\"size16\">실제로 저는 로고 디자인 작업할 때 클라이언트에게 다양한 방향성을 빠르게 제시하기 위해 GPT-4o를 활용하고 있어요. 물론 최종 결과물은 직접 다듬지만, 아이디어 발상 과정이 훨씬 효율적으로 바뀌었답니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">마케팅과 콘텐츠 제작에는?</span></h3>\n<p data-ke-size=\"size16\">SNS 마케팅이나 블로그 콘텐츠 제작자들에게는 정말 혁명적인 변화에요. 이제 디자이너 없이도 괜찮은 퀄리티의 이미지를 즉석에서 만들 수 있으니까요. 특히 텍스트 렌더링이 개선되어 광고나 프로모션 이미지 제작이 훨씬 쉬워졌어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>GPT-4o 이미지 생성, 어떻게 활용해야 할까?  </b></span></h2>\n<p data-ke-size=\"size16\">제가 실제로 GPT-4o 이미지 생성을 활용하면서 터득한 팁을 몇 가지 공유할게요:</p>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>맥락이 풍부한 프롬프트 작성하기</b> - 단순히 \"고양이 그림\"보다는 \"푸른 하늘 아래 햇살을 받으며 창가에 앉아있는 티베트산 하얀 고양이, 스튜디오 조명, 소니 A7 카메라로 촬영한 느낌\"처럼 구체적으로 설명하세요.</li>\n<li><b>대화 맥락 활용하기</b> - 이미지를 생성하기 전에 원하는 스타일이나 분위기에 대해 충분히 설명하면 더 좋은 결과물을 얻을 수 있어요.</li>\n<li><b>반복 생성으로 완성도 높이기</b> - 첫 결과물에 만족하지 못했다면 \"이 이미지에서 배경을 더 밝게, 인물의 표정을 더 행복하게 수정해줘\"처럼 구체적인 피드백을 주세요.</li>\n<li><b>텍스트 활용하기</b> - GPT-4o는 텍스트 렌더링이 강점이니 포스터, 책 표지, 로고 등 텍스트가 포함된 이미지 생성에 적극 활용해보세요.</li>\n</ol>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"866\" data-origin-height=\"486\"><span data-url=\"https://blog.kakaocdn.net/dn/Hb7rL/btsNlgBaU4F/E9DvsnoyK3BIXSZdfToNnk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Hb7rL/btsNlgBaU4F/E9DvsnoyK3BIXSZdfToNnk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Hb7rL/btsNlgBaU4F/E9DvsnoyK3BIXSZdfToNnk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHb7rL%2FbtsNlgBaU4F%2FE9DvsnoyK3BIXSZdfToNnk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT의 GPT-4o 이미지 생성 시대\" loading=\"lazy\" width=\"866\" height=\"486\" data-filename=\"blob\" data-origin-width=\"866\" data-origin-height=\"486\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>결론: 창작의 민주화가 시작됐다  </b></span></h2>\n<p data-ke-size=\"size16\">GPT-4o의 이미지 생성 기능은 DALL-E를 단순히 대체한 것이 아니라, AI 이미지 생성의 패러다임 자체를 바꾸고 있어요. 기술적으로는 더 정교해졌고, 사용자 경험 측면에서는 훨씬 더 접근성이 높아졌죠.</p>\n<p data-ke-size=\"size16\">물론 전문 디자이너나 사진작가의 창의적 작업을 완전히 대체하진 못하겠지만, 창작의 문턱을 크게 낮췄다는 점은 분명해요. 이제 \"난 그림을 못 그려\"라는 말은 더 이상 변명이 되지 않을지도 모르겠네요.</p>\n<p data-ke-size=\"size16\">여러분도 GPT-4o의 이미지 생성 기능을 사용해보셨나요? 어떤 경험을 하셨는지, 또 어떻게 활용하고 계신지 댓글로 공유해주세요!  </p>\n<hr contenteditable=\"false\" data-ke-type=\"horizontalRule\" data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>자주 묻는 질문  </b></span></h2>\n<p data-ke-size=\"size16\"><b>Q: GPT-4o로 생성한 이미지의 저작권은 누구에게 있나요?</b></p>\n<p data-ke-size=\"size16\">A: OpenAI의 정책에 따르면 생성된 이미지의 저작권은 사용자에게 있습니다. 상업적 용도로도 사용 가능해요.</p>\n<p data-ke-size=\"size16\"><b>Q: GPT-4o 이미지 생성은 무료인가요?</b></p>\n<p data-ke-size=\"size16\">A: ChatGPT Plus나 Team, Enterprise 구독자에게 제공되며, 무료 사용자는 제한된 수의 이미지만 생성할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: DALL-E는 이제 완전히 사라진 건가요?</b></p>\n<p data-ke-size=\"size16\">A: 네, 2025년 3월 26일부터 DALL-E는 GPT-4o의 이미지 생성 기능으로 자연스럽게 대체되었습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 생성된 이미지를 편집할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 현재 GPT-4o 자체에서는 생성된 이미지를 직접 편집할 수는 없고, 프롬프트를 통한 재생성만 가능합니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 생성된 이미지의 해상도는 어떻게 되나요?</b></p>\n<p data-ke-size=\"size16\">A: 현재 기본 해상도는 약 1024x1024 픽셀 수준입니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"GPT-4o로 생성한 이미지의 저작권은 누구에게 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI의 정책에 따르면 생성된 이미지의 저작권은 사용자에게 있습니다. 상업적 용도로도 사용 가능해요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"GPT-4o 이미지 생성은 무료인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT Plus나 Team, Enterprise 구독자에게 제공되며, 무료 사용자는 제한된 수의 이미지만 생성할 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"DALL-E는 이제 완전히 사라진 건가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 2025년 3월 26일부터 DALL-E는 GPT-4o의 이미지 생성 기능으로 자연스럽게 대체되었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지를 편집할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"현재 GPT-4o 자체에서는 생성된 이미지를 직접 편집할 수는 없고, 프롬프트를 통한 재생성만 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지의 해상도는 어떻게 되나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"현재 기본 해상도는 약 1024x1024 픽셀 수준입니다.\"\n      }\n    }\n  ]\n}\n</script>",
        "contentSnippet": "ChatGPT의 GPT-4o 이미지 생성 기능의 혁신적인 변화! DALL-E와는 무엇이 다른지, 실제 사용해보니 드러난 장단점과 창작계에 미칠 파장까지. AI 이미지 생성의 새 시대가 열렸다고? 디자이너라면 꼭 알아야 할 모든 것.\n\n\n \n요즘 들어 SNS를 보면 지브리풍 일러스트부터 놀라울 정도로 사실적인 사진까지, 모두 ChatGPT로 만들었다는 이미지들이 넘쳐나고 있어요. \"뭐야, ChatGPT도 이제 이미지를 만들어?\" 라고 생각하시는 분들 많으실 텐데요. 네, 맞습니다. 2025년 3월 26일, OpenAI가 GPT-4o를 출시하면서 DALL-E를 대체하는 이미지 생성 기능을 통합했거든요.\n \n저는 디자인 분야에서 일하다 보니 미드저니, 스테이블 디퓨전부터 DALL-E까지 거의 모든 AI 이미지 생성 도구를 업무에 활용해왔는데요. GPT-4o의 이미지 생성 기능을 처음 접했을 때는 정말 놀랐어요. 왜 그랬는지, 그리고 이 변화가 우리에게 어떤 의미인지 함께 알아볼까요?\n \nDALL-E에서 GPT-4o로, 무엇이 바뀌었나?  \n이전까지 ChatGPT에서 이미지를 생성하려면 별도의 DALL-E 모델을 호출해야 했어요. 대화하다가 \"이 설명을 이미지로 만들어줘\"라고 하면 모드 전환이 일어나면서 DALL-E가 작동했죠. 하지만 이제는 GPT-4o 하나로 대화와 이미지 생성이 모두 가능해졌어요.\n주요 변화점  \n통합된 사용자 경험 - 대화 흐름 중에 자연스럽게 이미지 생성이 가능해졌어요. 모드 전환 없이 대화하듯 이미지를 요청하면 바로 만들어줍니다.\n향상된 응답 속도 - DALL-E는 이미지 생성에 10-20초가 걸렸는데, GPT-4o는 대략 절반 정도로 시간이 단축됐어요.\n텍스트 렌더링 성능 향상 - 이전 DALL-E의 큰 약점 중 하나가 이미지 속 텍스트 처리였는데, GPT-4o는 이 부분이 획기적으로 개선되었어요. 포스터나 책 표지 같은 텍스트가 포함된 이미지 생성이 훨씬 정확해졌답니다.\n스타일 일관성 - 다양한 예술 스타일을 요청했을 때 일관된 퀄리티를 유지하는 능력이 향상되었어요. 특히 '지브리풍'으로 유명해진 애니메이션 스타일 구현이 뛰어나죠.\n솔직히 말하자면, 순수하게 사진 같은 사실적 이미지만 놓고 보면 기존 DALL-E가 약간 더 나은 경우도 있었어요. 하지만 전반적인 성능과 사용성은 GPT-4o가 훨씬 뛰어납니다.\n \n실제 사용해보니 느낀 GPT-4o 이미지 생성의 강점  \n실제로 제가 업무에 활용해보니 GPT-4o의 강점이 확실히 드러나더라고요.\n1. 맥락 이해 능력\n제가 가장 놀란 부분은 대화 맥락을 기반으로 이미지를 생성한다는 점이에요. 예를 들어, 로고 디자인에 대해 길게 대화를 나눈 후 \"이걸 이미지로 만들어줘\"라고 하면 이전 대화 내용을 모두 고려한 이미지를 만들어줍니다. DALL-E는 그냥 그 한 문장만 고려했죠.\n2. 디테일 컨트롤\n\"조금 더 밝게\", \"왼쪽 캐릭터의 표정을 더 행복하게\" 같은 세부 수정 요청에 훨씬 더 정확하게 반응해요. 이전에는 비슷한 프롬프트로 처음부터 다시 생성하는 경우가 많았는데, GPT-4o는 원하는 부분만 정확히 수정해주는 경우가 많아요.\n3. 텍스트와 이미지의 완벽한 조화\n포스터나 인포그래픽처럼 텍스트가 포함된 이미지를 만들 때 정말 빛을 발해요. DALL-E에서는 \"Happy Birthday\"라는 간단한 문구조차 \"Ha9py Birtиday\" 같은 이상한 글자로 나오는 경우가 많았는데, GPT-4o는 거의 완벽하게 텍스트를 렌더링합니다.\n \n아직 아쉬운 점들  \n물론 완벽하진 않아요. 제가 실제 사용하면서 느낀 한계점도 있습니다:\n복잡한 구도의 한계 - 여러 사람이 특정 동작을 취하고 있는 복잡한 장면을 요청하면 여전히 손이나 발이 이상하게 나오는 경우가 있어요.\n해상도 제한 - 현재 생성되는 이미지의 해상도가 제한적이라 고품질 인쇄물용으로 사용하기엔 부족해요.\n스타일 제한 - 특정 작가나 브랜드의 스타일을 정확하게 모방하는 데는 여전히 한계가 있습니다.\n \n이 변화가 창작 산업에 미칠 영향  \nGPT-4o의 이미지 생성 기능은 단순한 기술적 발전을 넘어 창작 방식 자체를 바꿀 잠재력이 있어요. 이제 누구나 쉽게 자신의 아이디어를 시각화할 수 있게 되었으니까요.\n디자이너와 일러스트레이터에게는?\n솔직히 말해서, 불안함을 느끼는 디자이너분들 많으실 거예요. 하지만 저는 이걸 위협보다는 도구로 봐야 한다고 생각해요. 디자인 초안을 빠르게 만들거나, 클라이언트와 소통하는 과정에서 아이디어를 시각화하는 데 정말 유용하거든요.\n실제로 저는 로고 디자인 작업할 때 클라이언트에게 다양한 방향성을 빠르게 제시하기 위해 GPT-4o를 활용하고 있어요. 물론 최종 결과물은 직접 다듬지만, 아이디어 발상 과정이 훨씬 효율적으로 바뀌었답니다.\n마케팅과 콘텐츠 제작에는?\nSNS 마케팅이나 블로그 콘텐츠 제작자들에게는 정말 혁명적인 변화에요. 이제 디자이너 없이도 괜찮은 퀄리티의 이미지를 즉석에서 만들 수 있으니까요. 특히 텍스트 렌더링이 개선되어 광고나 프로모션 이미지 제작이 훨씬 쉬워졌어요.\n \nGPT-4o 이미지 생성, 어떻게 활용해야 할까?  \n제가 실제로 GPT-4o 이미지 생성을 활용하면서 터득한 팁을 몇 가지 공유할게요:\n맥락이 풍부한 프롬프트 작성하기 - 단순히 \"고양이 그림\"보다는 \"푸른 하늘 아래 햇살을 받으며 창가에 앉아있는 티베트산 하얀 고양이, 스튜디오 조명, 소니 A7 카메라로 촬영한 느낌\"처럼 구체적으로 설명하세요.\n대화 맥락 활용하기 - 이미지를 생성하기 전에 원하는 스타일이나 분위기에 대해 충분히 설명하면 더 좋은 결과물을 얻을 수 있어요.\n반복 생성으로 완성도 높이기 - 첫 결과물에 만족하지 못했다면 \"이 이미지에서 배경을 더 밝게, 인물의 표정을 더 행복하게 수정해줘\"처럼 구체적인 피드백을 주세요.\n텍스트 활용하기 - GPT-4o는 텍스트 렌더링이 강점이니 포스터, 책 표지, 로고 등 텍스트가 포함된 이미지 생성에 적극 활용해보세요.\n\n\n결론: 창작의 민주화가 시작됐다  \nGPT-4o의 이미지 생성 기능은 DALL-E를 단순히 대체한 것이 아니라, AI 이미지 생성의 패러다임 자체를 바꾸고 있어요. 기술적으로는 더 정교해졌고, 사용자 경험 측면에서는 훨씬 더 접근성이 높아졌죠.\n물론 전문 디자이너나 사진작가의 창의적 작업을 완전히 대체하진 못하겠지만, 창작의 문턱을 크게 낮췄다는 점은 분명해요. 이제 \"난 그림을 못 그려\"라는 말은 더 이상 변명이 되지 않을지도 모르겠네요.\n여러분도 GPT-4o의 이미지 생성 기능을 사용해보셨나요? 어떤 경험을 하셨는지, 또 어떻게 활용하고 계신지 댓글로 공유해주세요!  \n자주 묻는 질문  \nQ: GPT-4o로 생성한 이미지의 저작권은 누구에게 있나요?\nA: OpenAI의 정책에 따르면 생성된 이미지의 저작권은 사용자에게 있습니다. 상업적 용도로도 사용 가능해요.\nQ: GPT-4o 이미지 생성은 무료인가요?\nA: ChatGPT Plus나 Team, Enterprise 구독자에게 제공되며, 무료 사용자는 제한된 수의 이미지만 생성할 수 있습니다.\nQ: DALL-E는 이제 완전히 사라진 건가요?\nA: 네, 2025년 3월 26일부터 DALL-E는 GPT-4o의 이미지 생성 기능으로 자연스럽게 대체되었습니다.\nQ: 생성된 이미지를 편집할 수 있나요?\nA: 현재 GPT-4o 자체에서는 생성된 이미지를 직접 편집할 수는 없고, 프롬프트를 통한 재생성만 가능합니다.\nQ: 생성된 이미지의 해상도는 어떻게 되나요?\nA: 현재 기본 해상도는 약 1024x1024 픽셀 수준입니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"GPT-4o로 생성한 이미지의 저작권은 누구에게 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI의 정책에 따르면 생성된 이미지의 저작권은 사용자에게 있습니다. 상업적 용도로도 사용 가능해요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"GPT-4o 이미지 생성은 무료인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT Plus나 Team, Enterprise 구독자에게 제공되며, 무료 사용자는 제한된 수의 이미지만 생성할 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"DALL-E는 이제 완전히 사라진 건가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 2025년 3월 26일부터 DALL-E는 GPT-4o의 이미지 생성 기능으로 자연스럽게 대체되었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지를 편집할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"현재 GPT-4o 자체에서는 생성된 이미지를 직접 편집할 수는 없고, 프롬프트를 통한 재생성만 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지의 해상도는 어떻게 되나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"현재 기본 해상도는 약 1024x1024 픽셀 수준입니다.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483568",
        "categories": [
          "AI, 미래기술/AI 이미지 및 아트 생성",
          "AI 이미지",
          "ai 창작 도구",
          "ai 프롬프트 작성법",
          "chatgpt 그림 기능",
          "dall-e 대체",
          "gpt-4o 이미지 생성",
          "디자인 자동화",
          "이미지 생성 프롬프트",
          "지브리풍 ai",
          "텍스트 렌더링"
        ],
        "isoDate": "2025-04-14T23:42:07.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "ChatGPT 검색 vs 추론 - 당신의 질문에 맞는 최적의 선택은?",
        "link": "http://muzbox.tistory.com/483567",
        "pubDate": "Fri, 11 Apr 2025 12:01:03 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483567#entry483567comment",
        "content": "<p data-ke-size=\"size16\">ChatGPT 검색과 추론 기능, 언제 어떤 걸 써야 할지 고민돼요? 실제 사용해보니 확실히 달라요! 사실 확인은 검색, 깊은 분석은 추론, 이 가이드로 AI 활용 효율성을 높여보세요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ChatGPT 검색 vs 추론 - 당신의 질문에 맞는 최적의 선택은.webp\" data-origin-width=\"1536\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/xx1kF/btsNh65AIgZ/nkk7168qWy03AT3AMQ7KSk/img.webp\" data-phocus=\"https://blog.kakaocdn.net/dn/xx1kF/btsNh65AIgZ/nkk7168qWy03AT3AMQ7KSk/img.webp\"><img src=\"https://blog.kakaocdn.net/dn/xx1kF/btsNh65AIgZ/nkk7168qWy03AT3AMQ7KSk/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fxx1kF%2FbtsNh65AIgZ%2Fnkk7168qWy03AT3AMQ7KSk%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT 검색 vs 추론 - 당신의 질문에 맞는 최적의 선택은?\" loading=\"lazy\" width=\"1536\" height=\"1024\" data-filename=\"ChatGPT 검색 vs 추론 - 당신의 질문에 맞는 최적의 선택은.webp\" data-origin-width=\"1536\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">ChatGPT 검색과 추론 기능, 어떻게 구분해서 써야 할까?</p>\n<p data-ke-size=\"size16\">어젯밤에 갑자기 궁금한 게 있어서 ChatGPT를 켰는데, 검색이랑 추론 중에 뭘 선택해야 할지 한참을 고민했어요. 여러분도 그런 경험 있으신가요? 이래저래 둘 다 써보니까 확실히 차이가 느껴지더라고요. 그래서 오늘은 제가 실제로 사용해보면서 알게 된 ChatGPT의 검색과 추론 기능의 차이점과 각각 언제 써야 좋은지 정리해봤습니다.  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>ChatGPT 검색 기능: 구체적인 사실이나 업데이트가 필요할 때  </b></span></h2>\n<p data-ke-size=\"size16\">ChatGPT의 검색 기능은 말 그대로 구체적인 정보나 최신 데이터가 필요할 때 딱이에요. 빠르고 정확한 답변을 원한다면 검색 기능을 사용하세요. 마치 여러분 옆에 앉아서 즉각적으로 정보를 찾아주는 비서 같은 느낌이랄까요?</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ChatGPT 검색 기능 개요.png\" data-origin-width=\"720\" data-origin-height=\"628\"><span data-url=\"https://blog.kakaocdn.net/dn/2H2do/btsNhJC0M1l/o3UyeeH0Y2mgpeZkLWNNo0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/2H2do/btsNhJC0M1l/o3UyeeH0Y2mgpeZkLWNNo0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/2H2do/btsNhJC0M1l/o3UyeeH0Y2mgpeZkLWNNo0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F2H2do%2FbtsNhJC0M1l%2Fo3UyeeH0Y2mgpeZkLWNNo0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT 검색 기능 개요\" loading=\"lazy\" width=\"631\" height=\"550\" data-filename=\"ChatGPT 검색 기능 개요.png\" data-origin-width=\"720\" data-origin-height=\"628\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">최신 소식과 업데이트  </span></h3>\n<p data-ke-size=\"size16\">솔직히 말해서, 요즘 뉴스 보는 것도 귀찮을 때 있잖아요. 정치 소식이나 스포츠 경기 결과, 주식 시장 상황 같은 최신 정보가 필요하시다면 ChatGPT 검색이 짱이에요.</p>\n<p data-ke-size=\"size16\">저는 지난주에 K리그 순위표가 궁금했는데, 여러 사이트를 뒤적거릴 필요 없이 ChatGPT 검색으로 한방에 해결했어요. 진짜 편하더라구요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색] 현재 K리그1 순위표와 다음 경기 일정을 알려줘.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">기본 상식과 정의  </span></h3>\n<p data-ke-size=\"size16\">가끔 갑자기 \"이 단어가 뭐였지?\" 하는 순간 있잖아요. 과학 개념이든, 어려운 단어 철자든, 역사적 사건이든 간단한 정보를 얻고 싶을 때 검색 기능이 제격이에요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">예를 들어 \"애자일 방법론이 정확히 뭐야?\" 같은 질문이나 \"대한민국 제2대 대통령이 누구였지?\" 같은 기본 사실 확인에 아주 유용해요. 불필요한 세부 정보 없이 명확하고 간결한 답변을 받을 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색] 애자일 방법론의 정확한 의미와 장단점을 알려줘.\n[검색] 대한민국 제2대 대통령은 누구였고, 어떤 업적이 있었어?\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">최신 제품 정보  </span></h3>\n<p data-ke-size=\"size16\">요즘처럼 기술이 빠르게 발전하는 시대에는 최신 제품 사양이나 리뷰를 찾는 게 쉽지 않잖아요. ChatGPT 검색은 가젯, 자동차, 또는 다른 소비재를 비교할 때 특히 유용해요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최신 아이폰의 스펙이 궁금하거나 구매하려는 차에 대한 리뷰를 알고 싶다면, 검색 기능이 가장 신뢰할 수 있는 출처에서 최신 데이터를 가져와 줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">예를 들어, 최신 갤럭시폰이 이전 모델보다 성능이 더 좋은지 궁금하다면? 빠른 검색으로 새로운 기능, 스펙, 사용자 리뷰를 한눈에 볼 수 있어요. 여러 웹사이트를 뒤적거릴 필요가 없죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"angelscript\"><code>[검색] 최신 아이폰 15 Pro와 아이폰 14 Pro의 스펙, 가격, 카메라 성능을 비교해줘.\n[검색] 2025년 출시된 현대 아이오닉 7의 주행 거리와 충전 시간, 그리고 테슬라 모델 Y와 비교한 장단점은?\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">지역 정보  </span></h3>\n<p data-ke-size=\"size16\">날씨 예보, 주변 이벤트, 맛집 추천 같은 지역 정보도 ChatGPT 검색으로 쉽게 얻을 수 있어요. 여행 중이거나 주변에서 특별한 것을 찾고 있다면, 간단히 물어보세요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">명동 근처에서 맛있는 순두부찌개 맛집을 찾고 싶다고요? ChatGPT가 즉시 리뷰와 평점을 포함한 최고 평점의 음식점 목록을 알려줄 거예요. 소중한 시간을 최대한 활용할 수 있겠죠?</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색] 서울 강남역 근처 분위기 좋은 데이트 카페 추천해줘. 주차가 편한 곳으로 알려줘.\n[검색] 이번 주말 부산에서 열리는 문화 행사나 축제가 있을까?\n</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>ChatGPT 추론 기능: 깊이 있는 생각과 문제 해결이 필요할 때  </b></span></h2>\n<p data-ke-size=\"size16\">ChatGPT의 검색 기능이 빠르고 사실적인 답변에 좋다면, 추론 기능은 더 복잡한 작업에 진가를 발휘해요. 깊은 분석이나 창의적 사고가 필요한 까다로운 문제에 부딪혔을 때는 ChatGPT 추론의 문제 해결 능력을 활용하세요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ChatGPT의 추론 기능 활용.png\" data-origin-width=\"816\" data-origin-height=\"456\"><span data-url=\"https://blog.kakaocdn.net/dn/cFyw5M/btsNhRujHwW/0Fakjc9kGVkOU23NQK10N0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cFyw5M/btsNhRujHwW/0Fakjc9kGVkOU23NQK10N0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cFyw5M/btsNhRujHwW/0Fakjc9kGVkOU23NQK10N0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcFyw5M%2FbtsNhRujHwW%2F0Fakjc9kGVkOU23NQK10N0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT의 추론 기능 활용\" loading=\"lazy\" width=\"816\" height=\"456\" data-filename=\"ChatGPT의 추론 기능 활용.png\" data-origin-width=\"816\" data-origin-height=\"456\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">복잡한 문제 해결  </span></h3>\n<p data-ke-size=\"size16\">여러 계층을 분석하거나 다양한 옵션을 평가해야 하는 작업에는 ChatGPT의 추론 능력이 정말 소중해요. 사업 전략을 계획하거나 기술적인 문제를 해결할 때, ChatGPT는 다양한 각도를 탐색하고 정보에 기반한 결정을 내리는 데 도움을 줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">예를 들어, 스타트업을 위한 최적의 마케팅 전략을 결정하려 한다면, ChatGPT는 다양한 접근 방식의 장단점을 비교하고, 가능한 장애물을 고려하며, 유사한 사례 연구를 바탕으로 인사이트를 제공할 수 있어요. 단순히 빠른 사실만 제공하는 것이 아니라, 문제 해결을 위한 비판적 사고 과정을 안내해 줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[추론] 미용실 창업을 준비 중인데, 경쟁이 치열한 강남 지역에서 차별화된 마케팅 전략을 세우고 싶어. 소셜 미디어, 지역 특성, 타겟 고객층을 고려해서 구체적인 전략을 제안해줘.\n\n[추론] 우리 회사는 30명 규모의 소프트웨어 개발 스타트업인데, 재택근무와 사무실 근무를 어떻게 균형있게 조합할지 고민이야. 팀 문화, 생산성, 직원 만족도를 모두 고려한 하이브리드 근무 정책을 설계해줄 수 있을까?\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">창의적 작업  </span></h3>\n<p data-ke-size=\"size16\">ChatGPT의 추론은 창의적인 브레인스토밍에도 훌륭한 선택이에요. 이 기능은 논리, 패턴, 관련 데이터를 활용하여 혁신적인 아이디어를 개발하거나 기존 아이디어를 개선하는 데 도움을 줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">소설 플롯에 막혔다면, ChatGPT가 창의적인 프롬프트, 캐릭터 아크, 또는 대체 엔딩을 제안할 수 있어요. 마찬가지로, 지역 커뮤니티 이벤트를 계획한다면, ChatGPT는 독특한 테마, 인터랙티브 활동, 또는 관객을 참여시키는 방법을 브레인스토밍하는 데 도움을 줄 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[추론] 나는 현대판 판타지 소설을 쓰고 있어. 주인공은 평범한 대학생인데 어느날 자신이 꿈속에서 사람들의 병을 치유할 수 있는 능력이 있다는 걸 알게 돼. 이 설정을 바탕으로 흥미로운 플롯 전개와 갈등 요소를 제안해줘.\n\n[추론] 우리 동네 작은 도서관에서 아이들을 위한 여름 독서 프로그램을 기획 중이야. '바다와 모험'이라는 주제로 6-10세 아이들이 책에 흥미를 갖게 할 수 있는 창의적인 활동 아이디어를 5가지 제안해줘.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">논증 분석 또는 의사 결정 ⚖️</span></h3>\n<p data-ke-size=\"size16\">여러 옵션과 많은 변수가 있는 결정에 직면했을 때, ChatGPT 추론은 필수적인 두 번째 의견이 됩니다. 추론 기능을 사용하면 각 선택지의 장단점을 분석하며 상황의 모든 측면을 고려할 수 있어요. 결정하기 어려운 순간에 균형 잡힌 선택을 할 수 있게 도와줍니다.</p>\n<p data-ke-size=\"size16\">예를 들어, 두 개의 채용 제안 중에서 고민하고 있다면, ChatGPT는 각 역할의 이점과 단점을 나열하는 데 도움을 줄 수 있어요. 회사 문화, 경력 성장, 보상, 일과 삶의 균형 같은 요소를 고려하도록 도와줍니다. 또한 ChatGPT는 여러분의 우선순위에 따라 대안 제안을 제공하여 의사 결정 과정을 더 쉽게 만들 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"angelscript\"><code>[추론] 현재 안정적인 대기업(연봉 7000)과 성장 가능성이 높은 스타트업(연봉 5500 + 스톡옵션)의 제안을 동시에 받았어. 경력 성장, 일-삶 균형, 재정적 안정성, 그리고 장기적 전망 측면에서 두 선택지를 분석해줘. 내 우선순위는 1) 성장 2) 안정성 3) 워라밸 순이야.\n\n[추론] 결혼식 장소로 자연 속 야외 웨딩과 고급 호텔 실내 웨딩 중에서 고민 중이야. 날씨 리스크, 비용, 접근성, 사진 퀄리티, 하객 편의성 등 다양한 요소를 비교 분석해줘. 우리는 5월에 결혼할 예정이고, 하객은 약 150명 정도야.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">복잡한 아이디어 설명  </span></h3>\n<p data-ke-size=\"size16\">때로는 단순한 답변 이상이 필요할 때가 있죠. 복잡한 과학 개념, 고급 기술, 또는 이론을 이해하려고 할 때, ChatGPT의 추론 기능은 상세하게 설명해 줄 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">예를 들어, 블록체인이나 머신 러닝 같은 개념으로 고민하고 있다면, ChatGPT는 기본과 더 복잡한 측면 모두를 다루는 상세하고 쉽게 따라갈 수 있는 설명을 제공할 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[추론] 양자컴퓨팅의 기본 원리를 고등학생 수준에서 이해할 수 있게 설명해줘. 특히 기존 컴퓨터와의 차이점과 왜 특정 문제에서 더 효율적인지 비유를 들어 설명해주면 좋겠어.\n\n[추론] ESG 경영이 정확히 무엇이고, 기업과 사회에 어떤 영향을 미치는지 체계적으로 분석해줘. 실제 성공 사례와 비판적 시각도 함께 다루어주면 좋겠어.\n</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>두 기능을 모두 선택해야 할 때  </b></span></h2>\n<p data-ke-size=\"size16\">사실과 깊은 분석 모두가 필요할 때가 있어요. 이런 상황에서는 ChatGPT의 검색과 추론 기능을 결합하면 더 완전하고 미묘한 그림을 얻을 수 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"언제 검색과 추론을 모두 사용해야 할까.png\" data-origin-width=\"792\" data-origin-height=\"510\"><span data-url=\"https://blog.kakaocdn.net/dn/kXoh2/btsNhJpu1yb/Hy3qFMXvKKN74sgE4iCEzK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/kXoh2/btsNhJpu1yb/Hy3qFMXvKKN74sgE4iCEzK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/kXoh2/btsNhJpu1yb/Hy3qFMXvKKN74sgE4iCEzK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkXoh2%2FbtsNhJpu1yb%2FHy3qFMXvKKN74sgE4iCEzK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"언제 검색과 추론을 모두 사용해야 할까요?\" loading=\"lazy\" width=\"792\" height=\"510\" data-filename=\"언제 검색과 추론을 모두 사용해야 할까.png\" data-origin-width=\"792\" data-origin-height=\"510\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">A). 주제를 자세히 이해하기  </span></h3>\n<p data-ke-size=\"size16\">주제를 파고들어 원시 사실과 이들이 어떻게 연결되는지 이해하고 싶다면, ChatGPT의 검색과 추론 기능을 함께 사용하는 것이 좋아요. 이렇게 하면 구체적인 세부 정보를 수집하고 이를 더 큰 그림으로 통합할 수 있습니다.</p>\n<p data-ke-size=\"size16\">예를 들어, 우주 탐사에 대해 연구한다면, 최신 임무, 기술, 발견을 검색하면서 동시에 이들이 사회에 미칠 잠재적 영향에 대해 추론할 수 있어요. 이렇게 하면 사실만 수집하는 것이 아니라, 그것들이 인간 지식, 우주 여행, 미래 노력에 미치는 영향도 한꺼번에 평가할 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색+추론] 최근 5년간 우주 개발 동향과 주요 발전 사항을 검색해주고, 이러한 발전이 향후 10년 내 지구 경제와 과학 기술에 미칠 영향을 종합적으로 분석해줘.\n\n[검색+추론] 현재 글로벌 반도체 산업의 주요 기업들과 시장 점유율을 조사하고, 미-중 기술 갈등이 장기적으로 반도체 공급망과 한국 기업들에게 어떤 영향을 미칠지 전망해줘.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">B). 여러 변수가 있는 결정 내리기  </span></h3>\n<p data-ke-size=\"size16\">집 구매, 특정 소프트웨어 선택, 또는 휴가 목적지 선택과 같이 여러 옵션이나 요소를 고려해야 하는 상황에서는 검색과 추론이 모두 필요해요. 검색 기능은 각 옵션에 대한 하드 사실(비용, 기능, 리뷰)을 수집하고, 추론 기능은 장단점을 평가하여 특정 요구 사항에 가장 잘 맞는 선택을 내릴 수 있게 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">새로운 도시로 이사를 고려하고 있다면, 주택 가격, 지역 편의 시설, 취업 기회를 조사하고 싶을 거예요. 동시에, 도시의 미적 감각, 라이프스타일, 가족이나 친구와의 거리 같은 추상적인 변수도 고려해야 합니다. 이러한 요소들을 개인 선호도와 결합하면 이사가 적합한지 파악하는 데 도움이 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색+추론] 제주도와 부산에 1년 살 예정인데 두 도시를 비교해줘. 주거비용, 생활물가, 기후, 교통, 의료시설, 문화생활 등 객관적 데이터를 찾아주고, 30대 부부가 디지털 노마드로 살기에 어떤 곳이 더 적합할지 분석해줘.\n\n[검색+추론] 아이패드 프로와 삼성 갤럭시 탭 S9 울트라의 최신 스펙, 가격, 호환 액세서리를 비교해주고, 디지털 아트 작업과 영상 편집이 주 용도인 나에게 어떤 제품이 더 적합할지 분석해줘.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">C). 여러 옵션이나 제품 비교하기  </span></h3>\n<p data-ke-size=\"size16\">제품, 서비스, 심지어 경력 경로를 비교할 때, 검색과 추론을 모두 사용하면 좋아요. 검색은 객관적인 사실을 제공하고, 추론은 어떤 옵션이 개인 또는 전문적 목표에 가장 적합한지 평가하거나 해당 제품에 대한 최신 정보를 얻는 데 도움을 줍니다.</p>\n<p data-ke-size=\"size16\">예를 들어, 두 노트북 중에서 고르고 있다면, 스펙과 리뷰를 확인하고(검색), 옵션을 신중히 평가해야 합니다(추론). 어떤 게 예산, 라이프스타일, 미래 필요에 맞을까요? 두 기능을 모두 활용하면 최종 결정을 내리는 데 도움이 될 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색+추론] 애플 맥북 프로 M2와 델 XPS 15의 최신 사양, 가격, 배터리 성능, 화면 품질을 비교해줘. 특히 영상 편집과 코딩을 주로 하는 내게 어떤 노트북이 더 적합할지 분석해줘.\n\n[검색+추론] 넷플릭스, 디즈니플러스, 티빙의 월 구독료, 콘텐츠 라이브러리 크기, 독점 콘텐츠를 비교해주고, 한국 드라마와 다큐멘터리를 주로 보는 내게 가장 가성비 좋은 서비스는 무엇인지 추천해줘.\n</code></pre>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">D). 새로운 개념이나 트렌드 탐색하기  </span></h3>\n<p data-ke-size=\"size16\">검색과 추론을 함께 활용하면 새로운 개념이나 떠오르는 트렌드를 이해하는 데 도움이 될 수 있어요. 검색은 최신 정보를 수집하고, 추론은 잠재적 영향과 더 넓은 의미를 탐색합니다.</p>\n<p data-ke-size=\"size16\">예를 들어, 인공지능에 대해 궁금하다면, 검색을 사용하여 AI의 최신 발전 상황을 찾고, 추론을 사용하여 AI가 다양한 산업에 어떤 영향을 미치거나 미래에 우리 삶의 방식을 어떻게 변화시킬지 분석할 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>프롬프트 예시:</b></p>\n<pre class=\"prolog\"><code>[검색+추론] 웹3.0과 메타버스의 최신 발전 동향과 주요 플랫폼들을 조사해주고, 이러한 기술이 향후 5년 내 교육, 엔터테인먼트, 소매업에 어떤 변화를 가져올지 분석해줘.\n\n[검색+추론] '제로 웨이스트' 라이프스타일의 주요 원칙과 글로벌 트렌드를 조사해주고, 이를 한국의 도시 환경에서 실천하기 위한 현실적인 방법과 도전 과제를 분석해줘.\n</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"954\" data-origin-height=\"642\"><span data-url=\"https://blog.kakaocdn.net/dn/FUp69/btsNhkjtyXh/bJ0G0kJWIkmrbXTBYH9tA0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/FUp69/btsNhkjtyXh/bJ0G0kJWIkmrbXTBYH9tA0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/FUp69/btsNhkjtyXh/bJ0G0kJWIkmrbXTBYH9tA0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFUp69%2FbtsNhkjtyXh%2FbJ0G0kJWIkmrbXTBYH9tA0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"챗GPT 검색 대 추론\" loading=\"lazy\" width=\"954\" height=\"642\" data-origin-width=\"954\" data-origin-height=\"642\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>마치며: 상황에 맞는 선택이 중요해요  </b></span></h2>\n<p data-ke-size=\"size16\">ChatGPT의 검색 기능과 추론 기능을 언제 사용해야 할지 이해함으로써, 이러한 강력한 기능의 가치를 최대화할 수 있어요. 빠른 사실, 깊은 분석, 또는 둘 다 필요하든, ChatGPT는 거의 모든 결정을 내리고 문제에 명확하게 접근하는 데 도움을 줄 수 있으며, 종종 해당 작업에 대한 정말 유용한 두 번째 의견이나 목소리를 제공합니다.</p>\n<p data-ke-size=\"size16\">제 경우에는 일상적인 정보 검색에는 검색 기능을, 블로그 글이나 사업 계획처럼 깊은 사고가 필요한 일에는 추론 기능을 주로 사용하고 있어요. 여러분은 어떤 기능을 더 자주 사용하시나요? 댓글로 알려주세요!  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>Q&amp;A: ChatGPT 검색과 추론에 대해 자주 묻는 질문들</b></span></h2>\n<p data-ke-size=\"size16\"><b>Q: ChatGPT 검색 기능은 얼마나 최신 정보까지 알고 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 검색 기능은 인터넷에 연결되어 있어 최신 정보를 가져옵니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 추론 기능의 한계는 무엇인가요?</b></p>\n<p data-ke-size=\"size16\">A: 복잡한 추론이 가능하지만 전문가 수준의 깊이 있는 분석은 제한적일 수 있어요.</p>\n<p data-ke-size=\"size16\"><b>Q: 검색과 추론을 동시에 사용할 때 더 느려지나요?</b></p>\n<p data-ke-size=\"size16\">A: 약간 더 시간이 걸릴 수 있지만 결과의 질이 높아져 가치가 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 어떤 기능이 더 정확한가요?</b></p>\n<p data-ke-size=\"size16\">A: 사실 확인은 검색이, 복잡한 분석은 추론이 더 정확합니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 추론 기능은 검색 기능보다 창의적인가요?</b></p>\n<p data-ke-size=\"size16\">A: 네, 추론 기능이 패턴 인식과 연결성을 활용해 더 창의적인 결과를 제공합니다.</p>\n<p data-ke-size=\"size16\">\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT 검색 기능은 얼마나 최신 정보까지 알고 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"검색 기능은 인터넷에 연결되어 있어 최신 정보를 가져옵니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"추론 기능의 한계는 무엇인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"복잡한 추론이 가능하지만 전문가 수준의 깊이 있는 분석은 제한적일 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"검색과 추론을 동시에 사용할 때 더 느려지나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"약간 더 시간이 걸릴 수 있지만 결과의 질이 높아져 가치가 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"어떤 기능이 더 정확한가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"사실 확인은 검색이, 복잡한 분석은 추론이 더 정확합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"추론 기능은 검색 기능보다 창의적인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 추론 기능이 패턴 인식과 연결성을 활용해 더 창의적인 결과를 제공합니다.\"\n      }\n    }\n  ]\n}\n</script>\n</p>",
        "contentSnippet": "ChatGPT 검색과 추론 기능, 언제 어떤 걸 써야 할지 고민돼요? 실제 사용해보니 확실히 달라요! 사실 확인은 검색, 깊은 분석은 추론, 이 가이드로 AI 활용 효율성을 높여보세요.\n\n\n \nChatGPT 검색과 추론 기능, 어떻게 구분해서 써야 할까?\n어젯밤에 갑자기 궁금한 게 있어서 ChatGPT를 켰는데, 검색이랑 추론 중에 뭘 선택해야 할지 한참을 고민했어요. 여러분도 그런 경험 있으신가요? 이래저래 둘 다 써보니까 확실히 차이가 느껴지더라고요. 그래서 오늘은 제가 실제로 사용해보면서 알게 된 ChatGPT의 검색과 추론 기능의 차이점과 각각 언제 써야 좋은지 정리해봤습니다.  \n \n \nChatGPT 검색 기능: 구체적인 사실이나 업데이트가 필요할 때  \nChatGPT의 검색 기능은 말 그대로 구체적인 정보나 최신 데이터가 필요할 때 딱이에요. 빠르고 정확한 답변을 원한다면 검색 기능을 사용하세요. 마치 여러분 옆에 앉아서 즉각적으로 정보를 찾아주는 비서 같은 느낌이랄까요?\n\n\n최신 소식과 업데이트  \n솔직히 말해서, 요즘 뉴스 보는 것도 귀찮을 때 있잖아요. 정치 소식이나 스포츠 경기 결과, 주식 시장 상황 같은 최신 정보가 필요하시다면 ChatGPT 검색이 짱이에요.\n저는 지난주에 K리그 순위표가 궁금했는데, 여러 사이트를 뒤적거릴 필요 없이 ChatGPT 검색으로 한방에 해결했어요. 진짜 편하더라구요!\n \n프롬프트 예시:\n[검색] 현재 K리그1 순위표와 다음 경기 일정을 알려줘.\n\n기본 상식과 정의  \n가끔 갑자기 \"이 단어가 뭐였지?\" 하는 순간 있잖아요. 과학 개념이든, 어려운 단어 철자든, 역사적 사건이든 간단한 정보를 얻고 싶을 때 검색 기능이 제격이에요.\n \n예를 들어 \"애자일 방법론이 정확히 뭐야?\" 같은 질문이나 \"대한민국 제2대 대통령이 누구였지?\" 같은 기본 사실 확인에 아주 유용해요. 불필요한 세부 정보 없이 명확하고 간결한 답변을 받을 수 있어요.\n \n프롬프트 예시:\n[검색] 애자일 방법론의 정확한 의미와 장단점을 알려줘.\n[검색] 대한민국 제2대 대통령은 누구였고, 어떤 업적이 있었어?\n\n최신 제품 정보  \n요즘처럼 기술이 빠르게 발전하는 시대에는 최신 제품 사양이나 리뷰를 찾는 게 쉽지 않잖아요. ChatGPT 검색은 가젯, 자동차, 또는 다른 소비재를 비교할 때 특히 유용해요.\n \n최신 아이폰의 스펙이 궁금하거나 구매하려는 차에 대한 리뷰를 알고 싶다면, 검색 기능이 가장 신뢰할 수 있는 출처에서 최신 데이터를 가져와 줍니다.\n \n예를 들어, 최신 갤럭시폰이 이전 모델보다 성능이 더 좋은지 궁금하다면? 빠른 검색으로 새로운 기능, 스펙, 사용자 리뷰를 한눈에 볼 수 있어요. 여러 웹사이트를 뒤적거릴 필요가 없죠.\n \n프롬프트 예시:\n[검색] 최신 아이폰 15 Pro와 아이폰 14 Pro의 스펙, 가격, 카메라 성능을 비교해줘.\n[검색] 2025년 출시된 현대 아이오닉 7의 주행 거리와 충전 시간, 그리고 테슬라 모델 Y와 비교한 장단점은?\n\n지역 정보  \n날씨 예보, 주변 이벤트, 맛집 추천 같은 지역 정보도 ChatGPT 검색으로 쉽게 얻을 수 있어요. 여행 중이거나 주변에서 특별한 것을 찾고 있다면, 간단히 물어보세요.\n \n명동 근처에서 맛있는 순두부찌개 맛집을 찾고 싶다고요? ChatGPT가 즉시 리뷰와 평점을 포함한 최고 평점의 음식점 목록을 알려줄 거예요. 소중한 시간을 최대한 활용할 수 있겠죠?\n \n프롬프트 예시:\n[검색] 서울 강남역 근처 분위기 좋은 데이트 카페 추천해줘. 주차가 편한 곳으로 알려줘.\n[검색] 이번 주말 부산에서 열리는 문화 행사나 축제가 있을까?\n\n \n \nChatGPT 추론 기능: 깊이 있는 생각과 문제 해결이 필요할 때  \nChatGPT의 검색 기능이 빠르고 사실적인 답변에 좋다면, 추론 기능은 더 복잡한 작업에 진가를 발휘해요. 깊은 분석이나 창의적 사고가 필요한 까다로운 문제에 부딪혔을 때는 ChatGPT 추론의 문제 해결 능력을 활용하세요.\n\n\n복잡한 문제 해결  \n여러 계층을 분석하거나 다양한 옵션을 평가해야 하는 작업에는 ChatGPT의 추론 능력이 정말 소중해요. 사업 전략을 계획하거나 기술적인 문제를 해결할 때, ChatGPT는 다양한 각도를 탐색하고 정보에 기반한 결정을 내리는 데 도움을 줍니다.\n \n예를 들어, 스타트업을 위한 최적의 마케팅 전략을 결정하려 한다면, ChatGPT는 다양한 접근 방식의 장단점을 비교하고, 가능한 장애물을 고려하며, 유사한 사례 연구를 바탕으로 인사이트를 제공할 수 있어요. 단순히 빠른 사실만 제공하는 것이 아니라, 문제 해결을 위한 비판적 사고 과정을 안내해 줍니다.\n \n프롬프트 예시:\n[추론] 미용실 창업을 준비 중인데, 경쟁이 치열한 강남 지역에서 차별화된 마케팅 전략을 세우고 싶어. 소셜 미디어, 지역 특성, 타겟 고객층을 고려해서 구체적인 전략을 제안해줘.\n\n[추론] 우리 회사는 30명 규모의 소프트웨어 개발 스타트업인데, 재택근무와 사무실 근무를 어떻게 균형있게 조합할지 고민이야. 팀 문화, 생산성, 직원 만족도를 모두 고려한 하이브리드 근무 정책을 설계해줄 수 있을까?\n\n창의적 작업  \nChatGPT의 추론은 창의적인 브레인스토밍에도 훌륭한 선택이에요. 이 기능은 논리, 패턴, 관련 데이터를 활용하여 혁신적인 아이디어를 개발하거나 기존 아이디어를 개선하는 데 도움을 줍니다.\n \n소설 플롯에 막혔다면, ChatGPT가 창의적인 프롬프트, 캐릭터 아크, 또는 대체 엔딩을 제안할 수 있어요. 마찬가지로, 지역 커뮤니티 이벤트를 계획한다면, ChatGPT는 독특한 테마, 인터랙티브 활동, 또는 관객을 참여시키는 방법을 브레인스토밍하는 데 도움을 줄 수 있습니다.\n \n프롬프트 예시:\n[추론] 나는 현대판 판타지 소설을 쓰고 있어. 주인공은 평범한 대학생인데 어느날 자신이 꿈속에서 사람들의 병을 치유할 수 있는 능력이 있다는 걸 알게 돼. 이 설정을 바탕으로 흥미로운 플롯 전개와 갈등 요소를 제안해줘.\n\n[추론] 우리 동네 작은 도서관에서 아이들을 위한 여름 독서 프로그램을 기획 중이야. '바다와 모험'이라는 주제로 6-10세 아이들이 책에 흥미를 갖게 할 수 있는 창의적인 활동 아이디어를 5가지 제안해줘.\n\n논증 분석 또는 의사 결정 ⚖️\n여러 옵션과 많은 변수가 있는 결정에 직면했을 때, ChatGPT 추론은 필수적인 두 번째 의견이 됩니다. 추론 기능을 사용하면 각 선택지의 장단점을 분석하며 상황의 모든 측면을 고려할 수 있어요. 결정하기 어려운 순간에 균형 잡힌 선택을 할 수 있게 도와줍니다.\n예를 들어, 두 개의 채용 제안 중에서 고민하고 있다면, ChatGPT는 각 역할의 이점과 단점을 나열하는 데 도움을 줄 수 있어요. 회사 문화, 경력 성장, 보상, 일과 삶의 균형 같은 요소를 고려하도록 도와줍니다. 또한 ChatGPT는 여러분의 우선순위에 따라 대안 제안을 제공하여 의사 결정 과정을 더 쉽게 만들 수 있어요.\n \n프롬프트 예시:\n[추론] 현재 안정적인 대기업(연봉 7000)과 성장 가능성이 높은 스타트업(연봉 5500 + 스톡옵션)의 제안을 동시에 받았어. 경력 성장, 일-삶 균형, 재정적 안정성, 그리고 장기적 전망 측면에서 두 선택지를 분석해줘. 내 우선순위는 1) 성장 2) 안정성 3) 워라밸 순이야.\n\n[추론] 결혼식 장소로 자연 속 야외 웨딩과 고급 호텔 실내 웨딩 중에서 고민 중이야. 날씨 리스크, 비용, 접근성, 사진 퀄리티, 하객 편의성 등 다양한 요소를 비교 분석해줘. 우리는 5월에 결혼할 예정이고, 하객은 약 150명 정도야.\n\n복잡한 아이디어 설명  \n때로는 단순한 답변 이상이 필요할 때가 있죠. 복잡한 과학 개념, 고급 기술, 또는 이론을 이해하려고 할 때, ChatGPT의 추론 기능은 상세하게 설명해 줄 수 있어요.\n \n예를 들어, 블록체인이나 머신 러닝 같은 개념으로 고민하고 있다면, ChatGPT는 기본과 더 복잡한 측면 모두를 다루는 상세하고 쉽게 따라갈 수 있는 설명을 제공할 수 있습니다.\n \n프롬프트 예시:\n[추론] 양자컴퓨팅의 기본 원리를 고등학생 수준에서 이해할 수 있게 설명해줘. 특히 기존 컴퓨터와의 차이점과 왜 특정 문제에서 더 효율적인지 비유를 들어 설명해주면 좋겠어.\n\n[추론] ESG 경영이 정확히 무엇이고, 기업과 사회에 어떤 영향을 미치는지 체계적으로 분석해줘. 실제 성공 사례와 비판적 시각도 함께 다루어주면 좋겠어.\n\n \n \n두 기능을 모두 선택해야 할 때  \n사실과 깊은 분석 모두가 필요할 때가 있어요. 이런 상황에서는 ChatGPT의 검색과 추론 기능을 결합하면 더 완전하고 미묘한 그림을 얻을 수 있습니다.\n\n\nA). 주제를 자세히 이해하기  \n주제를 파고들어 원시 사실과 이들이 어떻게 연결되는지 이해하고 싶다면, ChatGPT의 검색과 추론 기능을 함께 사용하는 것이 좋아요. 이렇게 하면 구체적인 세부 정보를 수집하고 이를 더 큰 그림으로 통합할 수 있습니다.\n예를 들어, 우주 탐사에 대해 연구한다면, 최신 임무, 기술, 발견을 검색하면서 동시에 이들이 사회에 미칠 잠재적 영향에 대해 추론할 수 있어요. 이렇게 하면 사실만 수집하는 것이 아니라, 그것들이 인간 지식, 우주 여행, 미래 노력에 미치는 영향도 한꺼번에 평가할 수 있습니다.\n \n프롬프트 예시:\n[검색+추론] 최근 5년간 우주 개발 동향과 주요 발전 사항을 검색해주고, 이러한 발전이 향후 10년 내 지구 경제와 과학 기술에 미칠 영향을 종합적으로 분석해줘.\n\n[검색+추론] 현재 글로벌 반도체 산업의 주요 기업들과 시장 점유율을 조사하고, 미-중 기술 갈등이 장기적으로 반도체 공급망과 한국 기업들에게 어떤 영향을 미칠지 전망해줘.\n\nB). 여러 변수가 있는 결정 내리기  \n집 구매, 특정 소프트웨어 선택, 또는 휴가 목적지 선택과 같이 여러 옵션이나 요소를 고려해야 하는 상황에서는 검색과 추론이 모두 필요해요. 검색 기능은 각 옵션에 대한 하드 사실(비용, 기능, 리뷰)을 수집하고, 추론 기능은 장단점을 평가하여 특정 요구 사항에 가장 잘 맞는 선택을 내릴 수 있게 합니다.\n \n새로운 도시로 이사를 고려하고 있다면, 주택 가격, 지역 편의 시설, 취업 기회를 조사하고 싶을 거예요. 동시에, 도시의 미적 감각, 라이프스타일, 가족이나 친구와의 거리 같은 추상적인 변수도 고려해야 합니다. 이러한 요소들을 개인 선호도와 결합하면 이사가 적합한지 파악하는 데 도움이 됩니다.\n \n프롬프트 예시:\n[검색+추론] 제주도와 부산에 1년 살 예정인데 두 도시를 비교해줘. 주거비용, 생활물가, 기후, 교통, 의료시설, 문화생활 등 객관적 데이터를 찾아주고, 30대 부부가 디지털 노마드로 살기에 어떤 곳이 더 적합할지 분석해줘.\n\n[검색+추론] 아이패드 프로와 삼성 갤럭시 탭 S9 울트라의 최신 스펙, 가격, 호환 액세서리를 비교해주고, 디지털 아트 작업과 영상 편집이 주 용도인 나에게 어떤 제품이 더 적합할지 분석해줘.\n\nC). 여러 옵션이나 제품 비교하기  \n제품, 서비스, 심지어 경력 경로를 비교할 때, 검색과 추론을 모두 사용하면 좋아요. 검색은 객관적인 사실을 제공하고, 추론은 어떤 옵션이 개인 또는 전문적 목표에 가장 적합한지 평가하거나 해당 제품에 대한 최신 정보를 얻는 데 도움을 줍니다.\n예를 들어, 두 노트북 중에서 고르고 있다면, 스펙과 리뷰를 확인하고(검색), 옵션을 신중히 평가해야 합니다(추론). 어떤 게 예산, 라이프스타일, 미래 필요에 맞을까요? 두 기능을 모두 활용하면 최종 결정을 내리는 데 도움이 될 수 있어요.\n \n프롬프트 예시:\n[검색+추론] 애플 맥북 프로 M2와 델 XPS 15의 최신 사양, 가격, 배터리 성능, 화면 품질을 비교해줘. 특히 영상 편집과 코딩을 주로 하는 내게 어떤 노트북이 더 적합할지 분석해줘.\n\n[검색+추론] 넷플릭스, 디즈니플러스, 티빙의 월 구독료, 콘텐츠 라이브러리 크기, 독점 콘텐츠를 비교해주고, 한국 드라마와 다큐멘터리를 주로 보는 내게 가장 가성비 좋은 서비스는 무엇인지 추천해줘.\n\nD). 새로운 개념이나 트렌드 탐색하기  \n검색과 추론을 함께 활용하면 새로운 개념이나 떠오르는 트렌드를 이해하는 데 도움이 될 수 있어요. 검색은 최신 정보를 수집하고, 추론은 잠재적 영향과 더 넓은 의미를 탐색합니다.\n예를 들어, 인공지능에 대해 궁금하다면, 검색을 사용하여 AI의 최신 발전 상황을 찾고, 추론을 사용하여 AI가 다양한 산업에 어떤 영향을 미치거나 미래에 우리 삶의 방식을 어떻게 변화시킬지 분석할 수 있습니다.\n \n프롬프트 예시:\n[검색+추론] 웹3.0과 메타버스의 최신 발전 동향과 주요 플랫폼들을 조사해주고, 이러한 기술이 향후 5년 내 교육, 엔터테인먼트, 소매업에 어떤 변화를 가져올지 분석해줘.\n\n[검색+추론] '제로 웨이스트' 라이프스타일의 주요 원칙과 글로벌 트렌드를 조사해주고, 이를 한국의 도시 환경에서 실천하기 위한 현실적인 방법과 도전 과제를 분석해줘.\n\n \n\n\n마치며: 상황에 맞는 선택이 중요해요  \nChatGPT의 검색 기능과 추론 기능을 언제 사용해야 할지 이해함으로써, 이러한 강력한 기능의 가치를 최대화할 수 있어요. 빠른 사실, 깊은 분석, 또는 둘 다 필요하든, ChatGPT는 거의 모든 결정을 내리고 문제에 명확하게 접근하는 데 도움을 줄 수 있으며, 종종 해당 작업에 대한 정말 유용한 두 번째 의견이나 목소리를 제공합니다.\n제 경우에는 일상적인 정보 검색에는 검색 기능을, 블로그 글이나 사업 계획처럼 깊은 사고가 필요한 일에는 추론 기능을 주로 사용하고 있어요. 여러분은 어떤 기능을 더 자주 사용하시나요? 댓글로 알려주세요!  \nQ&A: ChatGPT 검색과 추론에 대해 자주 묻는 질문들\nQ: ChatGPT 검색 기능은 얼마나 최신 정보까지 알고 있나요?\nA: 검색 기능은 인터넷에 연결되어 있어 최신 정보를 가져옵니다.\nQ: 추론 기능의 한계는 무엇인가요?\nA: 복잡한 추론이 가능하지만 전문가 수준의 깊이 있는 분석은 제한적일 수 있어요.\nQ: 검색과 추론을 동시에 사용할 때 더 느려지나요?\nA: 약간 더 시간이 걸릴 수 있지만 결과의 질이 높아져 가치가 있습니다.\nQ: 어떤 기능이 더 정확한가요?\nA: 사실 확인은 검색이, 복잡한 분석은 추론이 더 정확합니다.\nQ: 추론 기능은 검색 기능보다 창의적인가요?\nA: 네, 추론 기능이 패턴 인식과 연결성을 활용해 더 창의적인 결과를 제공합니다.\n\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT 검색 기능은 얼마나 최신 정보까지 알고 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"검색 기능은 인터넷에 연결되어 있어 최신 정보를 가져옵니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"추론 기능의 한계는 무엇인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"복잡한 추론이 가능하지만 전문가 수준의 깊이 있는 분석은 제한적일 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"검색과 추론을 동시에 사용할 때 더 느려지나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"약간 더 시간이 걸릴 수 있지만 결과의 질이 높아져 가치가 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"어떤 기능이 더 정확한가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"사실 확인은 검색이, 복잡한 분석은 추론이 더 정확합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"추론 기능은 검색 기능보다 창의적인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 추론 기능이 패턴 인식과 연결성을 활용해 더 창의적인 결과를 제공합니다.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483567",
        "categories": [
          "AI, 미래기술/AI 챗봇 및 언어 모델",
          "ai 기능 비교",
          "ai 창의적 활용",
          "chatgpt 검색 기능",
          "chatgpt 추론 기능",
          "문제 해결 ai",
          "복잡한 문제 해결",
          "의사결정 도구",
          "인공지능 활용법",
          "정보 검색 최적화",
          "최신 정보 검색"
        ],
        "isoDate": "2025-04-11T03:01:03.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": [
      {
        "creator": "늑돌이",
        "title": "LG그램, 드디어 AMD를 품다! 인텔 전성시대는 이제 끝?",
        "link": "http://lazion.com/2513744",
        "pubDate": "Thu, 10 Apr 2025 09:44:27 +0900",
        "author": "늑돌이",
        "comments": "http://lazion.com/2513744#entry2513744comment",
        "content": "<h3 data-ke-size=\"size23\">오는 4월 18일, 인텔 CPU만 들어갔던 <b>LG 그램(gram) 시리즈의 AMD CPU 탑재 모델</b>이 국내에 출시됩니다.</h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>추락하는 인텔과 날아가는 AMD, LG전자의 선택은?</b></span></h3>\n<p data-ke-size=\"size16\"><br />요즘 인텔의 위상은 말이 아닙니다. AMD의 약진과 함께 맞물린 인텔의 추락은 x86 프로세서 업계에서의 엄청난 변화를 불러왔죠. 마이크로소프트 또한 ARM 프로세서용 윈도우(WoA; Windows On Arm)를 밀고 있고 나름의 성과를 거두고 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">덕분에 전통적으로 인텔 프로세서만 탑재했던 제품들마저 AMD 프로세서를 탑재하고 나온 경우가 많아졌습니다. 그 가운데 하나가 LG전자의 플래그십 노트북 브랜드인 그램 시리즈입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그동안 그램 시리즈는 크기 대비 가벼움과 인텔 프로세서를 활용한 준수한 성능으로 사랑을 받아왔습니다. AMD 프로세서는 하위 라인업인 LG 울트라PC 시리즈 정도에서나 만날 수 있었죠. 이러한 인텔과의 친밀한 관계도 이제 그만인 듯 합니다. 그램 시리즈에도 AMD CPU 탑재 모델이 나오게 되었으니 말이죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>LG 그램 AMD 모델의 주요 특징</b></span></h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이번에 나오는 LG 그램 AMD CPU 탑재 모델은 그램 시리즈에 AMD 프로세서를 처음 적용한 제품입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"첨부-LG-그램-15-AMD-CPU-탑재-모델-이미지-1.jpg\" data-origin-width=\"1161\" data-origin-height=\"814\"><span data-url=\"https://blog.kakaocdn.net/dn/ckf9XZ/btsNeStXndF/a8tWjaPeXHPTKYGhOOPAO0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/ckf9XZ/btsNeStXndF/a8tWjaPeXHPTKYGhOOPAO0/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/ckf9XZ/btsNeStXndF/a8tWjaPeXHPTKYGhOOPAO0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fckf9XZ%2FbtsNeStXndF%2Fa8tWjaPeXHPTKYGhOOPAO0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1161\" height=\"814\" data-filename=\"첨부-LG-그램-15-AMD-CPU-탑재-모델-이미지-1.jpg\" data-origin-width=\"1161\" data-origin-height=\"814\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">AMD의 올해 최신 제품인 라이젠 AI 300 시리즈를 탑재한 그램 AMD 모델은 NPU 최대 50 TOPS로 동급 최고 수준의 AI 처리 속도를 자랑합니다. 참고로 AI 에이전트 서비스인 마이크로소프트 코파일럿 플러스(Copilot+)의 경우 NPU 40 TOPS 이상의 사양이 요구됩니다.</p>\n<p data-ke-size=\"size16\">라이젠 AI 7 350 기준 8코어로 CPU 연산 성능도 최상위 급입니다.<br /><br />이번 그램 신모델에서는 코파일럿 플러스를 지원하며, GPT-4o 기반 그램 챗 클라우드도 1년 간 무료 사용할 수 있습니다. 그램 챗 클라우드는 AI 비서, Q&amp;A 챗봇 등 기능을 지원하여 아웃룩 및 구글 캘린더∙메일∙드라이브와 연동, 각 서비스에 접속할 필요 없이 채팅창 질문만으로 일정, 주소, 요약 내용 등을 간편하게 파악할 수 있습니다. 다만 웹 검색∙코딩 에디터 기능은 제외되며 Free-trial 쿠폰 사용기간 종료 후에는 유료 사용 가능합니다.<br /><br /><b>15.6인치</b> 대화면이지만 <b>무게는 1290g</b>이며 <b>72Wh 대용량 배터리</b>를 탑재하여 <i>완충 시 R5 CPU 제품 동영상 재생 시간 기준으로 최대 27시간 사용</i> 가능합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>플래그십 노트북도 이제 AMD 세상?</b> </span></h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">LG전자도 이제 AMD 프로세서를 플래그십 라인업인 그램에 합류시킴으로써 인텔의 입지는 더욱 좁아진 것으로 보입니다만, 바로 AMD를 전면적으로 도입하는 것은 아닙니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">LG전자는 발표 내용에 <b>AMD 모델은 그램의 베이직 라인업에 들어가는 것</b>이라고 한정하고 있으며 그램 프로 등의 상위 모델은 여전히 인텔 프로세서 모델만 있습니다.</p>\n<p data-ke-size=\"size16\">여기에 더불어 <b>삼성전자의 갤럭시북 시리즈 또한 인텔 프로세서가 대부분이고 극히 일부만 ARM 기반의 퀄컴 프로세서를 채용</b>한 제품이 있을 뿐입니다. </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그만큼 수십년간 쌓아놓은 인텔의 철옹성은 여전히 견고합니다. 하지만 LG전자와 해외의 다른 PC제조사들이 보여줬듯이 이제 벽에 구멍이 나 물이 새기 시작했습니다. 그 구멍은 갈수록 커져갈 것 같고요. 인텔은 어떤 대응수를 보여줄까요?&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그리고 <span style=\"color: #0593d3;\"><b>삼성 갤럭시북 AMD 모델은 과연 언제 나올까요?</b></span><br /><br /></p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(자료 출처 : LG전자)</p>",
        "contentSnippet": "오는 4월 18일, 인텔 CPU만 들어갔던 LG 그램(gram) 시리즈의 AMD CPU 탑재 모델이 국내에 출시됩니다.\n \n추락하는 인텔과 날아가는 AMD, LG전자의 선택은?\n요즘 인텔의 위상은 말이 아닙니다. AMD의 약진과 함께 맞물린 인텔의 추락은 x86 프로세서 업계에서의 엄청난 변화를 불러왔죠. 마이크로소프트 또한 ARM 프로세서용 윈도우(WoA; Windows On Arm)를 밀고 있고 나름의 성과를 거두고 있습니다.\n \n덕분에 전통적으로 인텔 프로세서만 탑재했던 제품들마저 AMD 프로세서를 탑재하고 나온 경우가 많아졌습니다. 그 가운데 하나가 LG전자의 플래그십 노트북 브랜드인 그램 시리즈입니다.\n \n그동안 그램 시리즈는 크기 대비 가벼움과 인텔 프로세서를 활용한 준수한 성능으로 사랑을 받아왔습니다. AMD 프로세서는 하위 라인업인 LG 울트라PC 시리즈 정도에서나 만날 수 있었죠. 이러한 인텔과의 친밀한 관계도 이제 그만인 듯 합니다. 그램 시리즈에도 AMD CPU 탑재 모델이 나오게 되었으니 말이죠.\n \n \nLG 그램 AMD 모델의 주요 특징\n \n이번에 나오는 LG 그램 AMD CPU 탑재 모델은 그램 시리즈에 AMD 프로세서를 처음 적용한 제품입니다.\n\n\nAMD의 올해 최신 제품인 라이젠 AI 300 시리즈를 탑재한 그램 AMD 모델은 NPU 최대 50 TOPS로 동급 최고 수준의 AI 처리 속도를 자랑합니다. 참고로 AI 에이전트 서비스인 마이크로소프트 코파일럿 플러스(Copilot+)의 경우 NPU 40 TOPS 이상의 사양이 요구됩니다.\n라이젠 AI 7 350 기준 8코어로 CPU 연산 성능도 최상위 급입니다.\n이번 그램 신모델에서는 코파일럿 플러스를 지원하며, GPT-4o 기반 그램 챗 클라우드도 1년 간 무료 사용할 수 있습니다. 그램 챗 클라우드는 AI 비서, Q&A 챗봇 등 기능을 지원하여 아웃룩 및 구글 캘린더∙메일∙드라이브와 연동, 각 서비스에 접속할 필요 없이 채팅창 질문만으로 일정, 주소, 요약 내용 등을 간편하게 파악할 수 있습니다. 다만 웹 검색∙코딩 에디터 기능은 제외되며 Free-trial 쿠폰 사용기간 종료 후에는 유료 사용 가능합니다.\n15.6인치 대화면이지만 무게는 1290g이며 72Wh 대용량 배터리를 탑재하여 완충 시 R5 CPU 제품 동영상 재생 시간 기준으로 최대 27시간 사용 가능합니다.\n \n \n플래그십 노트북도 이제 AMD 세상? \n \nLG전자도 이제 AMD 프로세서를 플래그십 라인업인 그램에 합류시킴으로써 인텔의 입지는 더욱 좁아진 것으로 보입니다만, 바로 AMD를 전면적으로 도입하는 것은 아닙니다.\n \nLG전자는 발표 내용에 AMD 모델은 그램의 베이직 라인업에 들어가는 것이라고 한정하고 있으며 그램 프로 등의 상위 모델은 여전히 인텔 프로세서 모델만 있습니다.\n여기에 더불어 삼성전자의 갤럭시북 시리즈 또한 인텔 프로세서가 대부분이고 극히 일부만 ARM 기반의 퀄컴 프로세서를 채용한 제품이 있을 뿐입니다. \n \n그만큼 수십년간 쌓아놓은 인텔의 철옹성은 여전히 견고합니다. 하지만 LG전자와 해외의 다른 PC제조사들이 보여줬듯이 이제 벽에 구멍이 나 물이 새기 시작했습니다. 그 구멍은 갈수록 커져갈 것 같고요. 인텔은 어떤 대응수를 보여줄까요? \n \n그리고 삼성 갤럭시북 AMD 모델은 과연 언제 나올까요?\n\n(자료 출처 : LG전자)",
        "guid": "http://lazion.com/2513744",
        "categories": [
          "#작은PC/#노트북PC",
          "AMD",
          "GRAM",
          "Laptop",
          "LG",
          "LGE",
          "LG전자",
          "News",
          "PC",
          "Ryzen",
          "ryzen ai"
        ],
        "isoDate": "2025-04-10T00:44:27.000Z"
      }
    ]
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "｜RULIWEB｜",
        "title": "허벅지를 기회로, 유미아의 아틀리에",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2298",
        "pubDate": "Fri, 11 Apr 2025 22:42:23 +0900",
        "author": "｜RULIWEB｜",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/25/04/11/1962515400551ad6b.png\">",
        "contentSnippet": "",
        "categories": [
          "게임툰"
        ],
        "isoDate": "2025-04-11T13:42:23.000Z"
      },
      {
        "creator": "｜RULIWEB｜",
        "title": "우리는 빛을 섬기는 그림자다, 어쌔신 크리드 섀도우스",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2297",
        "pubDate": "Fri, 11 Apr 2025 22:25:49 +0900",
        "author": "｜RULIWEB｜",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i2.ruliweb.com/thumb/25/04/11/19625055fd551ad6b.png\">",
        "contentSnippet": "",
        "categories": [
          "게임툰"
        ],
        "isoDate": "2025-04-11T13:25:49.000Z"
      },
      {
        "creator": "［RULIWEB］",
        "title": "[NS] 더욱 완성되어 돌아온 미지로의 경험, 제노블레이드 크로스 DE",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2296",
        "pubDate": "Fri, 11 Apr 2025 17:30:38 +0900",
        "author": "［RULIWEB］",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i3.ruliweb.com/thumb/25/04/11/19623f858fb5104c1.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2025-04-11T08:30:38.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "Visual Studio의 새로운 생산성 기능",
        "link": "https://jacking75.github.io/VS_20250416/",
        "pubDate": "Wed, 16 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vTFg-bDiBWKSwkueR7UvfuAMhDRF9h-zLESCpCfJcleZlR4uNBrol_bOGeRN5Q6S7_l0EAozlgEncZG/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/VS_20250416/",
        "isoDate": "2025-04-15T15:00:00.000Z"
      },
      {
        "title": "DeepSeek-R1 로컬 실행 시 추천 모델(증류 모델)",
        "link": "https://jacking75.github.io/ai-llm_20250414/",
        "pubDate": "Mon, 14 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vSIHfVUr4Phd-5HYiJu2sxaXF_WcjAXP2sgE9NzFk8OvawOBJC53dnCLlJtRj8SNUpmxDuM1seDAa6s/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/ai-llm_20250414/",
        "isoDate": "2025-04-13T15:00:00.000Z"
      },
      {
        "title": "ChatGPT에게 저장소의 내용을 이해하도록 Markdown 파일을 출력하는 스크립트를 만들어 보았다",
        "link": "https://jacking75.github.io/ai-llm_20250411/",
        "pubDate": "Fri, 11 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vRKwbYu7i3cECitUNdUMOlXZk0DkisflUdrKEQBh89wsSqGBPQaKgefJPya8D6kfguIKPzKk9-Yrs1a/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/ai-llm_20250411/",
        "isoDate": "2025-04-10T15:00:00.000Z"
      },
      {
        "title": "ChatGPT에 코드 리뷰를 받아서 최소한의 품질을 보장 받기",
        "link": "https://jacking75.github.io/ai-llm_20250410/",
        "pubDate": "Thu, 10 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vSAJE1DMN1uZ7ulstFvxYjnHleds7rkJrDztalbPQLpluwlMMRv7beWAxwpFylmtSX6PpbBp-hqdEl_/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/ai-llm_20250410/",
        "isoDate": "2025-04-09T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "node_modules/@google-cloud/storage/build/cjs/src/crc32c.d.ts:6:39 - error TS2315: Type 'Int32Array' is not generic. / Firebase Typescript 환경에서 ...",
        "link": "http://serverdown.tistory.com/1263",
        "pubDate": "Wed, 16 Apr 2025 01:16:55 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1263#entry1263comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"566\" data-origin-height=\"250\"><span data-url=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcbuBMu%2FbtsNmLHCxs0%2Fkyz4cmfZnWBN8vkfjyqfv0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"566\" height=\"250\" data-origin-width=\"566\" data-origin-height=\"250\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">문제: <a href=\"https://github.com/firebase/firebase-functions/issues/1664\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://github.com/firebase/firebase-functions/issues/1664</a></p>\n<figure id=\"og_1744733654622\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"object\" data-og-title=\"Error TS2315: Type 'Int32Array' is not generic. &middot; Issue #1664 &middot; firebase/firebase-functions\" data-og-description=\"Related issues None that I could find [REQUIRED] Version info &quot;firebase-admin&quot;: &quot;^12.1.0&quot; &quot;firebase-functions&quot;: &quot;^5.0.0&quot; node: v20.16.0 firebase-functions: 12.1.0 firebase-tools: 13.16.0 firebase-a...\" data-og-host=\"github.com\" data-og-source-url=\"https://github.com/firebase/firebase-functions/issues/1664\" data-og-url=\"https://github.com/firebase/firebase-functions/issues/1664\" data-og-image=\"\"><a href=\"https://github.com/firebase/firebase-functions/issues/1664\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://github.com/firebase/firebase-functions/issues/1664\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Error TS2315: Type 'Int32Array' is not generic. &middot; Issue #1664 &middot; firebase/firebase-functions</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Related issues None that I could find [REQUIRED] Version info \"firebase-admin\": \"^12.1.0\" \"firebase-functions\": \"^5.0.0\" node: v20.16.0 firebase-functions: 12.1.0 firebase-tools: 13.16.0 firebase-a...</p>\n<p class=\"og-host\" data-ke-size=\"size16\">github.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"566\" data-origin-height=\"250\"><span data-url=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cbuBMu/btsNmLHCxs0/kyz4cmfZnWBN8vkfjyqfv0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcbuBMu%2FbtsNmLHCxs0%2Fkyz4cmfZnWBN8vkfjyqfv0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"566\" height=\"250\" data-origin-width=\"566\" data-origin-height=\"250\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">yarn add -D typescript@latest</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">타입스크립트 설치하라는군요</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">저는 yarn 환경이 아니라</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">npm i&nbsp; -D typescript@latest</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">후에 </span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">npm i </span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">쳐서 다시 설치하니 성공했습니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">이런 맛탱이간 개발한광은 적응이 안되네요</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">왜이케 자주 바뀌는건지</span></p>",
        "contentSnippet": "문제: https://github.com/firebase/firebase-functions/issues/1664\n\n \nError TS2315: Type 'Int32Array' is not generic. · Issue #1664 · firebase/firebase-functions\nRelated issues None that I could find [REQUIRED] Version info \"firebase-admin\": \"^12.1.0\" \"firebase-functions\": \"^5.0.0\" node: v20.16.0 firebase-functions: 12.1.0 firebase-tools: 13.16.0 firebase-a...\ngithub.com\n\n \n\n\n \nyarn add -D typescript@latest\n타입스크립트 설치하라는군요\n저는 yarn 환경이 아니라\nnpm i  -D typescript@latest\n후에 \nnpm i \n쳐서 다시 설치하니 성공했습니다.\n이런 맛탱이간 개발한광은 적응이 안되네요\n왜이케 자주 바뀌는건지",
        "guid": "http://serverdown.tistory.com/1263",
        "categories": [
          "프로그래밍/개발메모",
          "Firebase"
        ],
        "isoDate": "2025-04-15T16:16:55.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "Add Force 1 - v38 업데이트 / 119일차 리뷰 영상",
        "link": "http://serverdown.tistory.com/1262",
        "pubDate": "Mon, 14 Apr 2025 22:00:41 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1262#entry1262comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/cs9k5R/btsNkWWPG0b/hdxSyuencya00ybKvVRNS1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cs9k5R/btsNkWWPG0b/hdxSyuencya00ybKvVRNS1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cs9k5R/btsNkWWPG0b/hdxSyuencya00ybKvVRNS1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcs9k5R%2FbtsNkWWPG0b%2FhdxSyuencya00ybKvVRNS1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">v38 업데이트 내용</h2>\n<p data-ke-size=\"size16\">UI&nbsp;를&nbsp;개선했습니다.<br />-&nbsp;[공격력]이&nbsp;숫자로&nbsp;표시&nbsp;했습니다.<br />-&nbsp;[레벨]&nbsp;과&nbsp;[체력]&nbsp;을&nbsp;막대&nbsp;형태로&nbsp;표시&nbsp;했습니다.<br /><br />난이도를&nbsp;낮추기위해&nbsp;스킬이&nbsp;추가되었습니다.<br />-&nbsp;[공격력&nbsp;증가]&nbsp;스킬이&nbsp;추가되었습니다.<br />-&nbsp;[체력&nbsp;증가]&nbsp;&nbsp;스킬이&nbsp;추가되었습니다.<br />-&nbsp;[폭발&nbsp;범위&nbsp;증가]&nbsp;의&nbsp;최대&nbsp;레벨이&nbsp;증가했습니다.&nbsp;5&nbsp;-&gt;&nbsp;6</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">리뷰 영상: <a href=\"https://www.youtube.com/watch?v=4f61k30HPZ0\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=4f61k30HPZ0</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=4f61k30HPZ0\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cf4mnT/hyYFzBRtgz/Llge0BWCzu06pMvweiQY0k/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/fleDM/hyYHdyt8HQ/juLXXKHQLrVExMK8U0VSYk/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"119일차 / Add Force 1 V38  준비중\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/4f61k30HPZ0\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">플레이 영상: <a href=\"https://www.youtube.com/watch?v=K6xYmNlNf5A\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=K6xYmNlNf5A</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=K6xYmNlNf5A\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/dqCUbC/hyYCkGinrx/2MDE8pwaZPan5VbKKjlhpK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/mTi3y/hyYCaKtxHd/52A5KbPgeSCzUcOFPdj1sK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"af1_v38_play_demo\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/K6xYmNlNf5A\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">팁</h2>\n<p data-ke-size=\"size16\">스토어 링크: <a href=\"https://play.google.com/store/apps/details?id=com.sidnft.add_force_1\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://play.google.com/store/apps/details?id=com.sidnft.add_force_1</a></p>\n<p data-ke-size=\"size16\">의도 하진 않았지만 영상 썸네일에 버전을 쓰니 구글 스토어에서 표시가 잘되네요 ㄷㄷ</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"906\" data-origin-height=\"330\"><span data-url=\"https://blog.kakaocdn.net/dn/cLvAeW/btsNkjlueUS/iHPSKLuOqXfL1wNBaJHCE1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cLvAeW/btsNkjlueUS/iHPSKLuOqXfL1wNBaJHCE1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cLvAeW/btsNkjlueUS/iHPSKLuOqXfL1wNBaJHCE1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcLvAeW%2FbtsNkjlueUS%2FiHPSKLuOqXfL1wNBaJHCE1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"906\" height=\"330\" data-origin-width=\"906\" data-origin-height=\"330\"/></span></figure>\n</p>",
        "contentSnippet": "v38 업데이트 내용\nUI 를 개선했습니다.\n- [공격력]이 숫자로 표시 했습니다.\n- [레벨] 과 [체력] 을 막대 형태로 표시 했습니다.\n난이도를 낮추기위해 스킬이 추가되었습니다.\n- [공격력 증가] 스킬이 추가되었습니다.\n- [체력 증가]  스킬이 추가되었습니다.\n- [폭발 범위 증가] 의 최대 레벨이 증가했습니다. 5 -> 6\n \n리뷰 영상: https://www.youtube.com/watch?v=4f61k30HPZ0\n\n\n\n \n플레이 영상: https://www.youtube.com/watch?v=K6xYmNlNf5A\n\n\n\n \n \n팁\n스토어 링크: https://play.google.com/store/apps/details?id=com.sidnft.add_force_1\n의도 하진 않았지만 영상 썸네일에 버전을 쓰니 구글 스토어에서 표시가 잘되네요 ㄷㄷ",
        "guid": "http://serverdown.tistory.com/1262",
        "categories": [
          "Add Force 1 (자작)"
        ],
        "isoDate": "2025-04-14T13:00:41.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티 6 웹 용량 줄이기에 대한 설명 / unity web",
        "link": "http://serverdown.tistory.com/1261",
        "pubDate": "Mon, 14 Apr 2025 01:48:19 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1261#entry1261comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"300\" data-origin-height=\"168\"><span data-url=\"https://blog.kakaocdn.net/dn/NJtnL/btsNkUKImuF/VHJBBBkkuzkPUwlRfsQBD1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/NJtnL/btsNkUKImuF/VHJBBBkkuzkPUwlRfsQBD1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/NJtnL/btsNkUKImuF/VHJBBBkkuzkPUwlRfsQBD1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FNJtnL%2FbtsNkUKImuF%2FVHJBBBkkuzkPUwlRfsQBD1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"300\" height=\"168\" data-origin-width=\"300\" data-origin-height=\"168\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/eCTKiBVUdRM?t=386\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/eCTKiBVUdRM?t=386</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=eCTKiBVUdRM\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/iBtuB/hyYExd3C81/UNK8Gh4vhNhpSk1TKOQyy1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/dopqkt/hyYG4uxaUb/yX5PqSGPC0mAn50KDbK2i1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"[유니티 TIPS] Unity 6의 웹 플랫폼 소개\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/eCTKiBVUdRM\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<h2 data-ke-size=\"size26\">영상 요약</h2>\n<p data-ke-size=\"size16\">6분 30초 부터 나오구요</p>\n<p data-ke-size=\"size16\">br 악춤 외도 여러가지가 있군요</p>\n<p data-ke-size=\"size16\">그리고 이제webgl 대신 웹 이라고 부르기로 했다고 하네요</p>\n<p data-ke-size=\"size16\">그래서 유니티 웹 이 되겠습니다.</p>\n<p data-ke-size=\"size16\">Unity Play 에 올릴 것을 권장하네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">용어의 통일</h2>\n<p data-ke-size=\"size16\">Unity 6 부터는 webgl 을 Unity Web 으로 부르기로 했다고 합니다.</p>\n<p data-ke-size=\"size16\">WebGL HTML5 WebGPU 등 계속해서 신기술이 개발되어 새로운 용어가 생겨나기 때문에&nbsp;용어를 통일한다고 하네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://youtu.be/eCTKiBVUdRM?t=386\n\n\n\n영상 요약\n6분 30초 부터 나오구요\nbr 악춤 외도 여러가지가 있군요\n그리고 이제webgl 대신 웹 이라고 부르기로 했다고 하네요\n그래서 유니티 웹 이 되겠습니다.\nUnity Play 에 올릴 것을 권장하네요\n \n용어의 통일\nUnity 6 부터는 webgl 을 Unity Web 으로 부르기로 했다고 합니다.\nWebGL HTML5 WebGPU 등 계속해서 신기술이 개발되어 새로운 용어가 생겨나기 때문에 용어를 통일한다고 하네요",
        "guid": "http://serverdown.tistory.com/1261",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-04-13T16:48:19.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "게임 홍보를 위한 유니티 webgl 페이지 만들기 / 홍보의 거리 v4 / street for promotion V4",
        "link": "http://serverdown.tistory.com/1260",
        "pubDate": "Sun, 13 Apr 2025 02:33:55 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1260#entry1260comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1079\" data-origin-height=\"623\"><span data-url=\"https://blog.kakaocdn.net/dn/HW2m5/btsNgfwI2a3/khu6eUuJIGTfInJkGGq3U0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/HW2m5/btsNgfwI2a3/khu6eUuJIGTfInJkGGq3U0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/HW2m5/btsNgfwI2a3/khu6eUuJIGTfInJkGGq3U0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHW2m5%2FbtsNgfwI2a3%2Fkhu6eUuJIGTfInJkGGq3U0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1079\" height=\"623\" data-origin-width=\"1079\" data-origin-height=\"623\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">지난번 vercel express 를 활용한 유니티 webgl 압축 페이지를 구현해</p>\n<p data-ke-size=\"size16\">제 앱을 홍보하는 사이트를 만들었습니다.</p>\n<p data-ke-size=\"size16\">링크: <a href=\"https://unity.sidnft.com/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://unity.sidnft.com/</a></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"391\" data-origin-height=\"304\"><span data-url=\"https://blog.kakaocdn.net/dn/ZxStz/btsNktfrv2j/fMTapzezBo8UVLbIw2nzrK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/ZxStz/btsNktfrv2j/fMTapzezBo8UVLbIw2nzrK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/ZxStz/btsNktfrv2j/fMTapzezBo8UVLbIw2nzrK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZxStz%2FbtsNktfrv2j%2FfMTapzezBo8UVLbIw2nzrK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"391\" height=\"304\" data-origin-width=\"391\" data-origin-height=\"304\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">로딩에 시간이 꽤 걸리네요</p>\n<p data-ke-size=\"size16\">웹페이지 용량은 39mb 입니다.</p>\n<p data-ke-size=\"size16\">br 로 압축하니 29.mb 로 내려가던데 지원하는 코드가 아직 완성이 안되었습니다. ㅠㅠ</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"839\" data-origin-height=\"444\"><span data-url=\"https://blog.kakaocdn.net/dn/TdxWa/btsNiIMd7wT/POarc1S9tollvUwzgmPM3K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/TdxWa/btsNiIMd7wT/POarc1S9tollvUwzgmPM3K/img.png\"><img src=\"https://blog.kakaocdn.net/dn/TdxWa/btsNiIMd7wT/POarc1S9tollvUwzgmPM3K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTdxWa%2FbtsNiIMd7wT%2FPOarc1S9tollvUwzgmPM3K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"839\" height=\"444\" data-origin-width=\"839\" data-origin-height=\"444\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">처음 시작하면 마우스를 드래그 하라고 안내합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"817\" data-origin-height=\"577\"><span data-url=\"https://blog.kakaocdn.net/dn/bphA0x/btsNkJCmI0x/5d3Q35GrqWLs6u8FmWdBk1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bphA0x/btsNkJCmI0x/5d3Q35GrqWLs6u8FmWdBk1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bphA0x/btsNkJCmI0x/5d3Q35GrqWLs6u8FmWdBk1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbphA0x%2FbtsNkJCmI0x%2F5d3Q35GrqWLs6u8FmWdBk1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"817\" height=\"577\" data-origin-width=\"817\" data-origin-height=\"577\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">마우스를 드레그 하면 시선이 움직입니다.</p>\n<p data-ke-size=\"size16\">나중에 1인칭 시점 이동도 처리해야겠군요 드래그는 불편합니다.</p>\n<p data-ke-size=\"size16\">아래쪽에 앱 아이콘을 쳐다보면 상단에 안내 팝업이 뜹니다.</p>\n<p data-ke-size=\"size16\">GO 버튼을 누르면 플레이 스토어로 이동합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"643\" data-origin-height=\"668\"><span data-url=\"https://blog.kakaocdn.net/dn/dwkzSl/btsNkvEkYdL/wQD7BE9H6VDt3euTZfAQA1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dwkzSl/btsNkvEkYdL/wQD7BE9H6VDt3euTZfAQA1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dwkzSl/btsNkvEkYdL/wQD7BE9H6VDt3euTZfAQA1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdwkzSl%2FbtsNkvEkYdL%2FwQD7BE9H6VDt3euTZfAQA1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"643\" height=\"668\" data-origin-width=\"643\" data-origin-height=\"668\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">오른족엔 소녀 하나 배치 했습니다.</p>\n<p data-ke-size=\"size16\">흐느적 거리는데 좋은걸로 교체해야겠습니다.</p>\n<p data-ke-size=\"size16\">눈이 깜박거리지 않는게 좀 어색하군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"755\" data-origin-height=\"532\"><span data-url=\"https://blog.kakaocdn.net/dn/cJhCcR/btsNiN7zUKa/c3aVe3tC3iMY9PCjjPd161/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cJhCcR/btsNiN7zUKa/c3aVe3tC3iMY9PCjjPd161/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cJhCcR/btsNiN7zUKa/c3aVe3tC3iMY9PCjjPd161/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcJhCcR%2FbtsNiN7zUKa%2Fc3aVe3tC3iMY9PCjjPd161%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"755\" height=\"532\" data-origin-width=\"755\" data-origin-height=\"532\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">아래쪽에 자세한 정보를 출력하는 명판이 있습니다.</p>\n<p data-ke-size=\"size16\">쳐다보면 팝업이 뜹니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">좀더 개선하면 앱 홍보에 도움이 될 것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"268\" data-origin-height=\"244\"><span data-url=\"https://blog.kakaocdn.net/dn/bbNiGc/btsNjByxW0z/kDuUiEpIhe9GwjrbmczudK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bbNiGc/btsNjByxW0z/kDuUiEpIhe9GwjrbmczudK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bbNiGc/btsNjByxW0z/kDuUiEpIhe9GwjrbmczudK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbbNiGc%2FbtsNjByxW0z%2FkDuUiEpIhe9GwjrbmczudK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"268\" height=\"244\" data-origin-width=\"268\" data-origin-height=\"244\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">아 버전은 2 입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">옛날에 음식점 개장하면 나레이터들 나와서 마이크 들고 시끄럽게 하던게 생각나서 만들었습니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"640\" data-origin-height=\"640\"><span data-url=\"https://blog.kakaocdn.net/dn/cqf702/btsNjOK769o/VpdAQhwLjkYL9kti7kSkKk/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/cqf702/btsNjOK769o/VpdAQhwLjkYL9kti7kSkKk/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/cqf702/btsNjOK769o/VpdAQhwLjkYL9kti7kSkKk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcqf702%2FbtsNjOK769o%2FVpdAQhwLjkYL9kti7kSkKk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"640\" height=\"640\" data-origin-width=\"640\" data-origin-height=\"640\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">사진 출처: <a href=\"https://blog.naver.com/testifay5864/223413626489\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://blog.naver.com/testifay5864/223413626489</a></p>\n<p data-ke-size=\"size16\">사실 시끄럽기도 하고 효과도 없었던거 같은데&nbsp;<br />창업 비용 증가에 일조한거 같습니다.<br />그땐 다 창업해서 호구 잡히던 시절이였던거 같군요</p>\n<p data-ke-size=\"size16\">옛날엔 이거 꼭 해줬습니다.<br />음식점 창업에 대규모로 도전하던 때라 그런지</p>\n<p data-ke-size=\"size16\">수요도 있고 공급도 있었고 ...</p>\n<p data-ke-size=\"size16\">음식점이 성공하는 경우는 못봤고<br />이벤트 업체와 나래이터들은 돈을 좀 쥐었지 않을까 싶군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">v20 쯤 가면 제대로 표현이 될꺼 같습니다. ㅎㅎ</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">br 압축에 대한 알아낸 사실</h2>\n<p data-ke-size=\"size16\">localhost 에서 테스트할때에는 br 압축이 제대로 동작하지 않아서<br />문제가 있다고 생각했었지만</p>\n<p data-ke-size=\"size16\">https 에 올리고 나서 시도해보니 문제가 없었습니다.</p>\n<p data-ke-size=\"size16\">br 압축은 gz 방식에비해서도 30% 정도 압축이 잘되는 방식이라 버리기 힘든 메리트가 있습니다.</p>\n<p data-ke-size=\"size16\">번거롭겠지만 내부테스트는 gz<br />배포할때는 br 로 당분간해야겠습니다.</p>\n<p data-ke-size=\"size16\">내부테스트를 안하는게 제일 좋은 방법일 것 같습니다.<br />빌드시간이 gz 에 두배는 걸리는 느낌입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">V4 업데이트</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"547\" data-origin-height=\"639\"><span data-url=\"https://blog.kakaocdn.net/dn/dsTOQQ/btsNi2p6mS6/cLyTqp8K1zk0EcJIKpEdqk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dsTOQQ/btsNi2p6mS6/cLyTqp8K1zk0EcJIKpEdqk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dsTOQQ/btsNi2p6mS6/cLyTqp8K1zk0EcJIKpEdqk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdsTOQQ%2FbtsNi2p6mS6%2FcLyTqp8K1zk0EcJIKpEdqk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"547\" height=\"639\" data-origin-width=\"547\" data-origin-height=\"639\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">iOS 에서 로드가 안되는 문제가 있어서</p>\n<p data-ke-size=\"size16\">모델을 변경 했습니다.</p>\n<p data-ke-size=\"size16\">이전에 작성했던 무료 애셋입니다.</p>\n<p data-ke-size=\"size16\">소개글: <a href=\"https://blog.sidnft.com/1248\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://blog.sidnft.com/1248</a></p>\n<figure id=\"og_1744544043840\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"유니티6 분홍 텍스쳐를 고쳐보자 / Unity Asset Free / Anime Girl\" data-og-description=\"아이 무서워 눈 왜이러냐공짜애셋을 반경하여 써보려고 했는데 분홍이 되어버렸군요공자 애셋 링크: Casual 1 - Anime Girl Characters | 3D Humanoids | Unity Asset Store&nbsp;Casual 1 - Anime Girl Characters | 3D 휴머노이\" data-og-host=\"blog.sidnft.com\" data-og-source-url=\"https://blog.sidnft.com/1248\" data-og-url=\"https://blog.sidnft.com/1248\" data-og-image=\"https://scrap.kakaocdn.net/dn/b6TYvp/hyYEBObuGx/kxMDPIOngmTFZFETJrNubk/img.png?width=333&amp;height=323&amp;face=0_0_333_323,https://scrap.kakaocdn.net/dn/kREyL/hyYFFBV90N/nkSX6o9SESxNDjSSU1VSY0/img.png?width=333&amp;height=323&amp;face=0_0_333_323,https://scrap.kakaocdn.net/dn/jHmSz/hyYCjtLooz/a8Fv1Bt2umkJgw4KXhPLl1/img.png?width=428&amp;height=601&amp;face=0_0_428_601\"><a href=\"https://blog.sidnft.com/1248\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://blog.sidnft.com/1248\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/b6TYvp/hyYEBObuGx/kxMDPIOngmTFZFETJrNubk/img.png?width=333&amp;height=323&amp;face=0_0_333_323,https://scrap.kakaocdn.net/dn/kREyL/hyYFFBV90N/nkSX6o9SESxNDjSSU1VSY0/img.png?width=333&amp;height=323&amp;face=0_0_333_323,https://scrap.kakaocdn.net/dn/jHmSz/hyYCjtLooz/a8Fv1Bt2umkJgw4KXhPLl1/img.png?width=428&amp;height=601&amp;face=0_0_428_601');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">유니티6 분홍 텍스쳐를 고쳐보자 / Unity Asset Free / Anime Girl</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">아이 무서워 눈 왜이러냐공짜애셋을 반경하여 써보려고 했는데 분홍이 되어버렸군요공자 애셋 링크: Casual 1 - Anime Girl Characters | 3D Humanoids | Unity Asset Store&nbsp;Casual 1 - Anime Girl Characters | 3D 휴머노이</p>\n<p class=\"og-host\" data-ke-size=\"size16\">blog.sidnft.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">애니메이션이 호환이 안되서 Dance 를 쓸 수가 없어 아쉽네요</p>\n<p data-ke-size=\"size16\">앞으로 나아가야하는데 한보 후퇴한 느낌입니다.</p>\n<p data-ke-size=\"size16\">처음부터 고퀄리티 모델을 쓸껄 그랬군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "지난번 vercel express 를 활용한 유니티 webgl 압축 페이지를 구현해\n제 앱을 홍보하는 사이트를 만들었습니다.\n링크: https://unity.sidnft.com/\n\n\n로딩에 시간이 꽤 걸리네요\n웹페이지 용량은 39mb 입니다.\nbr 로 압축하니 29.mb 로 내려가던데 지원하는 코드가 아직 완성이 안되었습니다. ㅠㅠ\n\n\n \n처음 시작하면 마우스를 드래그 하라고 안내합니다.\n\n\n마우스를 드레그 하면 시선이 움직입니다.\n나중에 1인칭 시점 이동도 처리해야겠군요 드래그는 불편합니다.\n아래쪽에 앱 아이콘을 쳐다보면 상단에 안내 팝업이 뜹니다.\nGO 버튼을 누르면 플레이 스토어로 이동합니다.\n\n\n오른족엔 소녀 하나 배치 했습니다.\n흐느적 거리는데 좋은걸로 교체해야겠습니다.\n눈이 깜박거리지 않는게 좀 어색하군요\n \n\n\n아래쪽에 자세한 정보를 출력하는 명판이 있습니다.\n쳐다보면 팝업이 뜹니다.\n \n좀더 개선하면 앱 홍보에 도움이 될 것 같습니다.\n \n\n\n아 버전은 2 입니다.\n \n옛날에 음식점 개장하면 나레이터들 나와서 마이크 들고 시끄럽게 하던게 생각나서 만들었습니다.\n\n\n사진 출처: https://blog.naver.com/testifay5864/223413626489\n사실 시끄럽기도 하고 효과도 없었던거 같은데 \n창업 비용 증가에 일조한거 같습니다.\n그땐 다 창업해서 호구 잡히던 시절이였던거 같군요\n옛날엔 이거 꼭 해줬습니다.\n음식점 창업에 대규모로 도전하던 때라 그런지\n수요도 있고 공급도 있었고 ...\n음식점이 성공하는 경우는 못봤고\n이벤트 업체와 나래이터들은 돈을 좀 쥐었지 않을까 싶군요\n \nv20 쯤 가면 제대로 표현이 될꺼 같습니다. ㅎㅎ\n \nbr 압축에 대한 알아낸 사실\nlocalhost 에서 테스트할때에는 br 압축이 제대로 동작하지 않아서\n문제가 있다고 생각했었지만\nhttps 에 올리고 나서 시도해보니 문제가 없었습니다.\nbr 압축은 gz 방식에비해서도 30% 정도 압축이 잘되는 방식이라 버리기 힘든 메리트가 있습니다.\n번거롭겠지만 내부테스트는 gz\n배포할때는 br 로 당분간해야겠습니다.\n내부테스트를 안하는게 제일 좋은 방법일 것 같습니다.\n빌드시간이 gz 에 두배는 걸리는 느낌입니다.\n \nV4 업데이트\n\n\niOS 에서 로드가 안되는 문제가 있어서\n모델을 변경 했습니다.\n이전에 작성했던 무료 애셋입니다.\n소개글: https://blog.sidnft.com/1248\n\n \n유니티6 분홍 텍스쳐를 고쳐보자 / Unity Asset Free / Anime Girl\n아이 무서워 눈 왜이러냐공짜애셋을 반경하여 써보려고 했는데 분홍이 되어버렸군요공자 애셋 링크: Casual 1 - Anime Girl Characters | 3D Humanoids | Unity Asset Store Casual 1 - Anime Girl Characters | 3D 휴머노이\nblog.sidnft.com\n\n애니메이션이 호환이 안되서 Dance 를 쓸 수가 없어 아쉽네요\n앞으로 나아가야하는데 한보 후퇴한 느낌입니다.\n처음부터 고퀄리티 모델을 쓸껄 그랬군요",
        "guid": "http://serverdown.tistory.com/1260",
        "categories": [
          "홍보의 거리 (자작)",
          "자작"
        ],
        "isoDate": "2025-04-12T17:33:55.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티 애셋 MudBun 구경해보자 / Boing Kit 개발자",
        "link": "http://serverdown.tistory.com/1259",
        "pubDate": "Sat, 12 Apr 2025 17:23:52 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1259#entry1259comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"324\" data-origin-height=\"248\"><span data-url=\"https://blog.kakaocdn.net/dn/2sKl2/btsNkh7fdlN/kGZVkYgpCuoRHSZkowrkxK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/2sKl2/btsNkh7fdlN/kGZVkYgpCuoRHSZkowrkxK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/2sKl2/btsNkh7fdlN/kGZVkYgpCuoRHSZkowrkxK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F2sKl2%2FbtsNkh7fdlN%2FkGZVkYgpCuoRHSZkowrkxK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"324\" height=\"248\" data-origin-width=\"324\" data-origin-height=\"248\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">동영ㅇ상으로 봐야 이해가될텐데</p>\n<p data-ke-size=\"size16\">이 스샷은 큐브에서 구체를 뺀 화면입니다.</p>\n<p data-ke-size=\"size16\">MudBun 은 두가지&nbsp; 오브젝트를 조합해 효과를 만들어주는 애셋인거 같습니다.</p>\n<p data-ke-size=\"size16\">영상을 봣는데 신기한 표현들이 많았습니다.</p>\n<p data-ke-size=\"size16\">나중에 써먹을데가 있을지 모르겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">홍보영상: <a href=\"https://www.youtube.com/watch?v=oBnwqzWbD-A&amp;t=4s\">MudBun: Volumetric VFX Mesh Tool for Unity</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=oBnwqzWbD-A\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/boONeC/hyYCgwTxjW/XGPvN2Pe12Ct8JMqpPDbH1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bT6J3c/hyYB9q0gHD/F2Yga5kz56WU83o6XhlWxk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"MudBun: Volumetric VFX Mesh Tool for Unity\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/oBnwqzWbD-A\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"481\" data-origin-height=\"334\"><span data-url=\"https://blog.kakaocdn.net/dn/bLQGtq/btsNiZltLcS/CvRxHsQPal7mLFQrfjX0uk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bLQGtq/btsNiZltLcS/CvRxHsQPal7mLFQrfjX0uk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bLQGtq/btsNiZltLcS/CvRxHsQPal7mLFQrfjX0uk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbLQGtq%2FbtsNiZltLcS%2FCvRxHsQPal7mLFQrfjX0uk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"481\" height=\"334\" data-origin-width=\"481\" data-origin-height=\"334\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">UFO 버니도 나오는군요 Boing Kit&nbsp; 개발자였네요&nbsp;</p>\n<p data-ke-size=\"size16\">아래쪽에 먼지같은걸 MudBun 으로 표현한것입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">개발 설명 영상: <a href=\"https://www.youtube.com/watch?v=s5Qrap0EW3M\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=s5Qrap0EW3M</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=s5Qrap0EW3M\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/IngAa/hyYBiPoM2e/LqHozu2GEKYLy1DP8UUtnK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/cf2uJi/hyYCiuG6xY/kdMNwkbo1t4ft3i9tHDNH0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"MudBun Quick Guide\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/s5Qrap0EW3M\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">Boing Kit 도 흥미로운 애셋이니 봐두세요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">보잉 킷 홍보 영상: <a href=\"https://www.youtube.com/watch?v=bcpFaRJmDS8&amp;embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&amp;embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&amp;source_ve_path=MjM4NTE\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=bcpFaRJmDS8&amp;embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&amp;embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&amp;source_ve_path=MjM4NTE</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=bcpFaRJmDS8\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/RPGbn/hyYFDD1nFM/ZYmdngL6KwjKN1Jk1NEB9K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bxy47X/hyYFD4498Y/fsUYy9g9FOUx8hHEFCcUek/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Dynamic Bouncy Bones in Unity (Boing Kit Version 1.2 Update)\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/bcpFaRJmDS8\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">물체를 뽀잉뽀잉 하게 표시해줍니다.</p>",
        "contentSnippet": "동영ㅇ상으로 봐야 이해가될텐데\n이 스샷은 큐브에서 구체를 뺀 화면입니다.\nMudBun 은 두가지  오브젝트를 조합해 효과를 만들어주는 애셋인거 같습니다.\n영상을 봣는데 신기한 표현들이 많았습니다.\n나중에 써먹을데가 있을지 모르겠습니다.\n \n홍보영상: MudBun: Volumetric VFX Mesh Tool for Unity\n\n\n\n \n\n\nUFO 버니도 나오는군요 Boing Kit  개발자였네요 \n아래쪽에 먼지같은걸 MudBun 으로 표현한것입니다.\n \n개발 설명 영상: https://www.youtube.com/watch?v=s5Qrap0EW3M\n\n\n\n \nBoing Kit 도 흥미로운 애셋이니 봐두세요\n \n보잉 킷 홍보 영상: https://www.youtube.com/watch?v=bcpFaRJmDS8&embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&source_ve_path=MjM4NTE\n\n\n\n물체를 뽀잉뽀잉 하게 표시해줍니다.",
        "guid": "http://serverdown.tistory.com/1259",
        "categories": [
          "프로그래밍/개발메모",
          "Boing",
          "mudbun",
          "유니티"
        ],
        "isoDate": "2025-04-12T08:23:52.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티에서 TextMeshPro 폰트를 dynamic 으로 설정하기 / Setting TextMeshPro font to dynamic in Unity",
        "link": "http://serverdown.tistory.com/1258",
        "pubDate": "Sat, 12 Apr 2025 17:11:37 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1258#entry1258comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"492\" data-origin-height=\"303\"><span data-url=\"https://blog.kakaocdn.net/dn/QhKSd/btsNknMVL8p/J6zViSXEEq0Q8aMpYewQY1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/QhKSd/btsNknMVL8p/J6zViSXEEq0Q8aMpYewQY1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/QhKSd/btsNknMVL8p/J6zViSXEEq0Q8aMpYewQY1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQhKSd%2FbtsNknMVL8p%2FJ6zViSXEEq0Q8aMpYewQY1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"492\" height=\"303\" data-origin-width=\"492\" data-origin-height=\"303\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=NY1xKqCIj3c\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=NY1xKqCIj3c</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=NY1xKqCIj3c\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/ELKdI/hyYEJdSQyI/EyJ8fgA98oQQfrrv1vSDDk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/HnuiS/hyYEAVyhTg/XCg9a4k906rTyxUOwKM4X0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"TextMeshPro - Dynamic Font Asset Creation Process\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/NY1xKqCIj3c\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상에서는 dynamic 방식에대한 설명이 들어어있어서 매우 장황합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"text-align: start;\">빠르게 설정 방법</span></h2>\n<p data-ke-size=\"size16\">어차피 dynamic 을 설정하기위해서 이글을 보시는거기 때문에</p>\n<p data-ke-size=\"size16\">폰트로 폰트애셋을 굽습니다. (이건 하셨을듯)</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">폰트애셋을 선택 합니다.</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"264\" data-origin-height=\"123\"><span data-url=\"https://blog.kakaocdn.net/dn/uLnEH/btsNiY082XD/TVdx8edIRLJD0gNYzJtOq1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/uLnEH/btsNiY082XD/TVdx8edIRLJD0gNYzJtOq1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/uLnEH/btsNiY082XD/TVdx8edIRLJD0gNYzJtOq1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuLnEH%2FbtsNiY082XD%2FTVdx8edIRLJD0gNYzJtOq1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"264\" height=\"123\" data-origin-width=\"264\" data-origin-height=\"123\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">제일아래 Aa 로된 아이콘은 TTF 폰트파일입니다. <br />이걸 만지는게 아니고</p>\n<p data-ke-size=\"size16\">위에 F 로 되어있는 폰트애셋을 클릭합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"text-align: start;\">인스팩터에서</span></h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"515\" data-origin-height=\"533\"><span data-url=\"https://blog.kakaocdn.net/dn/Duktu/btsNjg2nhbC/vHkkPSbMICDqkXmibVCyvK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Duktu/btsNjg2nhbC/vHkkPSbMICDqkXmibVCyvK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Duktu/btsNjg2nhbC/vHkkPSbMICDqkXmibVCyvK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDuktu%2FbtsNjg2nhbC%2FvHkkPSbMICDqkXmibVCyvK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"515\" height=\"533\" data-origin-width=\"515\" data-origin-height=\"533\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Atlas Population ~~ 보시면 static 으로 되어있을 것입니다.</p>\n<p data-ke-size=\"size16\">dynamic 으로 바꾸시면 구울때 없었던 본트도 실시간으로 생성됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">장황한 dynamic 방식에 대한 설명</h2>\n<p data-ke-size=\"size16\">게임에 사용할 폰트를 미리 구워 사용하는 방식을 static 이라고 합니다.</p>\n<p data-ke-size=\"size16\">이 방식은 매우 빠르게 사용할 수 있으며 게임의 용량을 줄일 수 있습니다.</p>\n<p data-ke-size=\"size16\">하지만 사용할 새 글자가 추가되면 폰트 이미지를 다시 빌드해야합니다.<br />(개 귀찮)</p>\n<p data-ke-size=\"size16\">그래서 실시간으로 사용하는 글자를 구워주는 기능을 내장하게 되었습니다.</p>\n<p data-ke-size=\"size16\">1. 이러면 단점으로 원본 TTF 파일을 빌드에 같이 포함해야합니다.<br />&nbsp; &nbsp; &nbsp;(용량이 커지겠죠)</p>\n<p data-ke-size=\"size16\">2. 새로운 글자를 사용하려고 할때 빌드를 해야하니 느려지겠죠</p>\n<p data-ke-size=\"size16\">하지만 요즘 컴퓨터는 워낙 빠르기 때문에 이런건 일도 아닙니다.</p>\n<p data-ke-size=\"size16\">저장 공간이나 메모리도 문제가 안될 수준으로 커졌습니다.</p>\n<p data-ke-size=\"size16\">2012년 모바일 환경에서는 상항한 압박이 있었습니다.</p>\n<p data-ke-size=\"size16\">게임은 200mb 미만이어야했고 스맛폰의 메모리는 1gb 가 안되었던 시절입니다.</p>\n<p data-ke-size=\"size16\">그래서 옛날엔 불편하게 게임을 만들었다 정도로 생각해두시고</p>\n<p data-ke-size=\"size16\">요즘은 의미 없다 편하게 쓰자 ...</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=NY1xKqCIj3c\n\n\n\n \n영상에서는 dynamic 방식에대한 설명이 들어어있어서 매우 장황합니다.\n \n빠르게 설정 방법\n어차피 dynamic 을 설정하기위해서 이글을 보시는거기 때문에\n폰트로 폰트애셋을 굽습니다. (이건 하셨을듯)\n \n폰트애셋을 선택 합니다.\n\n\n제일아래 Aa 로된 아이콘은 TTF 폰트파일입니다. \n이걸 만지는게 아니고\n위에 F 로 되어있는 폰트애셋을 클릭합니다.\n \n인스팩터에서\n\n\nAtlas Population ~~ 보시면 static 으로 되어있을 것입니다.\ndynamic 으로 바꾸시면 구울때 없었던 본트도 실시간으로 생성됩니다.\n \n장황한 dynamic 방식에 대한 설명\n게임에 사용할 폰트를 미리 구워 사용하는 방식을 static 이라고 합니다.\n이 방식은 매우 빠르게 사용할 수 있으며 게임의 용량을 줄일 수 있습니다.\n하지만 사용할 새 글자가 추가되면 폰트 이미지를 다시 빌드해야합니다.\n(개 귀찮)\n그래서 실시간으로 사용하는 글자를 구워주는 기능을 내장하게 되었습니다.\n1. 이러면 단점으로 원본 TTF 파일을 빌드에 같이 포함해야합니다.\n     (용량이 커지겠죠)\n2. 새로운 글자를 사용하려고 할때 빌드를 해야하니 느려지겠죠\n하지만 요즘 컴퓨터는 워낙 빠르기 때문에 이런건 일도 아닙니다.\n저장 공간이나 메모리도 문제가 안될 수준으로 커졌습니다.\n2012년 모바일 환경에서는 상항한 압박이 있었습니다.\n게임은 200mb 미만이어야했고 스맛폰의 메모리는 1gb 가 안되었던 시절입니다.\n그래서 옛날엔 불편하게 게임을 만들었다 정도로 생각해두시고\n요즘은 의미 없다 편하게 쓰자 ...",
        "guid": "http://serverdown.tistory.com/1258",
        "categories": [
          "프로그래밍/개발메모",
          "TextMeshPro",
          "유니티",
          "폰트"
        ],
        "isoDate": "2025-04-12T08:11:37.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "500 만원으로 농막 짓기 도전자",
        "link": "http://serverdown.tistory.com/1257",
        "pubDate": "Thu, 10 Apr 2025 01:59:02 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1257#entry1257comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"263\" data-origin-height=\"191\"><span data-url=\"https://blog.kakaocdn.net/dn/dOUUl4/btsNeplgx9E/jUpYEuYYKCMQfvSLe2hxqk/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/dOUUl4/btsNeplgx9E/jUpYEuYYKCMQfvSLe2hxqk/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/dOUUl4/btsNeplgx9E/jUpYEuYYKCMQfvSLe2hxqk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdOUUl4%2FbtsNeplgx9E%2FjUpYEuYYKCMQfvSLe2hxqk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"263\" height=\"191\" data-origin-width=\"263\" data-origin-height=\"191\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=BZLruvIKJwA\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=BZLruvIKJwA</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=BZLruvIKJwA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/b6ed6w/hyYCeZCFSe/1uSgcDkv4KtIyqnpbAoZY0/img.jpg?width=1280&amp;height=720&amp;face=626_254_774_414,https://scrap.kakaocdn.net/dn/beiWKm/hyYB7e7QAY/TU9EGmr1sivsx5G5ZgX7fK/img.jpg?width=1280&amp;height=720&amp;face=626_254_774_414\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"와! 우리집 5090보다 싸다!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/BZLruvIKJwA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">컨테이너 박스 사서 쓰는것도 비싸서&nbsp;</p>\n<p data-ke-size=\"size16\">샌드위치패널로 박스 만들어서 살꺼라고 합니다.</p>\n<p data-ke-size=\"size16\">하는거보고 저도 도전을 해봐야겠군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=BZLruvIKJwA\n\n\n\n \n컨테이너 박스 사서 쓰는것도 비싸서 \n샌드위치패널로 박스 만들어서 살꺼라고 합니다.\n하는거보고 저도 도전을 해봐야겠군요",
        "guid": "http://serverdown.tistory.com/1257",
        "categories": [
          "유튜브",
          "농막"
        ],
        "isoDate": "2025-04-09T16:59:02.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": [
      {
        "creator": "dlehddus84",
        "title": "2025 보드게임 페스타 구매게임들",
        "link": "https://blog.naver.com/dlehddus84/223827662465?fromRss=true&trackingCode=rss",
        "pubDate": "Wed, 09 Apr 2025 18:27:14 +0900",
        "author": "dlehddus84",
        "content": "아내가 페스타 기간에 만삭이라 원래 참석 페스타에 가려고 하지 않았는데 예정일 보다 무려 3주나 빠르게 출산하여 병원 입원을 마치고 조리원으로 입소하는 날 페스타 시작날이었다. 원래 매번 와이프와 함께 갔었는데 못가서 아쉬워하고 있었더니 와이프가 다녀오라고 입장권까지 구매해 주어 다녀올 수 있었다. 병원 퇴원후 조리원에 자리가 없어 집에 하루 다녀와야 됬었는데 아침에 조리원에 데려다 주고 수속을 마치고 났더니 2시쯤에서야 출발 할 수 있었다. 비도 오고 해서 차도없는 나는 전철을 타고 와야하는데 우산까지 들고 무거운 게임을 살 수는 없었는데 다행히 세티는 지인이 미리 구매해서 옮겨주고 행복한 바오밥에선 택배배....... <img src=\"https://blogthumb.pstatic.net/MjAyNTA0MDlfMTA5/MDAxNzQ0MTg5OTcxODY2.-TArs0cbT30DdqDGfNRyY6pqxaKe8IvLTHz45KZoQn4g.npbLqvkgprJZtQjhYSyEa-T7ld5FiKF4oBTiQIm9qjQg.JPEG/KakaoTalk_20250409_181203162.jpg?type=s3\" />",
        "contentSnippet": "아내가 페스타 기간에 만삭이라 원래 참석 페스타에 가려고 하지 않았는데 예정일 보다 무려 3주나 빠르게 출산하여 병원 입원을 마치고 조리원으로 입소하는 날 페스타 시작날이었다. 원래 매번 와이프와 함께 갔었는데 못가서 아쉬워하고 있었더니 와이프가 다녀오라고 입장권까지 구매해 주어 다녀올 수 있었다. 병원 퇴원후 조리원에 자리가 없어 집에 하루 다녀와야 됬었는데 아침에 조리원에 데려다 주고 수속을 마치고 났더니 2시쯤에서야 출발 할 수 있었다. 비도 오고 해서 차도없는 나는 전철을 타고 와야하는데 우산까지 들고 무거운 게임을 살 수는 없었는데 다행히 세티는 지인이 미리 구매해서 옮겨주고 행복한 바오밥에선 택배배.......",
        "guid": "https://blog.naver.com/dlehddus84/223827662465",
        "categories": [
          "정보/구매"
        ],
        "isoDate": "2025-04-09T09:27:14.000Z"
      }
    ]
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "당신의 CPU는 열심히 일하고 있나요?",
        "link": "https://techblog.lycorp.co.jp/ko/efficiently-using-cpu-in-kubernetes",
        "pubDate": "Fri, 11 Apr 2025 02:00:00 GMT",
        "content": "들어가며\n안녕하세요. LINE+ Contents Service Engineering 조직에서 백엔드 개발 및 프런트엔드 개발을 담당하고 있는 문범우, 안현모입니다.\n저희 조직에서는...",
        "contentSnippet": "들어가며\n안녕하세요. LINE+ Contents Service Engineering 조직에서 백엔드 개발 및 프런트엔드 개발을 담당하고 있는 문범우, 안현모입니다.\n저희 조직에서는...",
        "guid": "https://techblog.lycorp.co.jp/ko/efficiently-using-cpu-in-kubernetes",
        "isoDate": "2025-04-11T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "면접의 허상",
        "link": "https://www.thestartupbible.com/2025/04/stop-wasting-too-much-energy-on-interviews.html",
        "pubDate": "Sun, 13 Apr 2025 21:33:00 +0000",
        "content:encodedSnippet": "이 세상을 세상답게 돌아가게 하는 단 한 가지만 꼽으라면, 그건 ‘사람’이라고 할 수 있다. 사람이 사람과 일하고, 사람이 사람과 교류하면서 이 세상은 돌아가고, 더 좋은 세상으로 발전한다. 회사도 마찬가지다. 특히, 스타트업에서 가장 중요하고, 절대로 타협할 수 없는 단 한 가지만 선택하면, 그건 당연히 사람이다. 대표이사는 시간의 50%는 좋은 사람을 채용하는 데 사용해야 하고, 나머지 50%는 있는 사람들이 퇴사하지 않도록 하는 데 사용해야 한다. 지금 내가 채용하는 사람이 우리 회사 그 자체라는 점을 항상 명심해야 한다.\n그래서 우린 면접에 많은 공을 들인다. 면접의 방법도 갈수록 진화하고 있고, 더 좋은 사람을 채용하기 위한 노력의 하나로 면접의 횟수와 시간이 계속 늘어나고 있다. 얼마 전에 아는 분이 외국계 대기업의 시니어 매니저 레벨의 직책에 지원했는데, 6개월 동안 12번의 면접을 했다고 한다. 그런데 막판에 떨어졌다. 면접의 종류도 코딩하기, 케이스 풀기부터 술 마시기까지 정말 다양하게 세분되고 있다. 대기업들은 회사에 가장 적합한 인재 채용을 위한 면접 매뉴얼을 개발하기 위해 수억 원의 돈을 쓰면서 외부 컨설팅까지 받는다.\n그래서 우린 이런 고도화 된 면접 방법을 통해서 정말 더 좋은 사람을 채용하고 있을까? 개인적으로 봤을 땐, 아닌 것 같다. 내 개인적인 경험을 이야기해 보면, 면접을 아무리 잘해도, 이분이 실무는 정말 못 했던 적도 있고, 혼자서는 일을 잘 하는데 팀원들과 같이 했을 땐 팀워크 능력은 현저하게 떨어졌던 적도 있었다. 그리고 이건 내 주변의, 나보다 훨씬 더 많은 사람들을 면접하고 채용하는 매니저들도 비슷한 이야기를 한다. 면접을 20번 해도 그 사람이 실제로 일을 잘하는진 알 수 없고, 실제로 일을 잘해도, 우리 회사에서 일을 잘할 수 있을진 알 수가 없다.\n이게 면접의 현실이다. 면접은 단기간 안에 극적으로 향상할 수 있는 기술이기도 하고 – 입시 학원처럼, 면접 학원도 있다 – 일은 못 해도 말발만 살아 있으면, 면접에선 100점을 받을 수도 있기 때문이다.\n그럼 도대체 사람을 어떻게 채용해야 할까? 내가 아는 세 가지 방법이 있다.\n첫 번째 방법은, 일단 내가 잘 아는 사람만 채용하는 방법이다. 오래된 친구, 대학교 룸메이트, 동아리 선후배, 직장 동료나 선후배가 좋은 사례다. 우리가 투자한 회사 중 이렇게 오랫동안 서로를 알고 지낸 분들이 공동 창업가나 동료로 일하는 곳들이 큰 불협화음 없이 잘하는 걸 자주 경험한다. 하지만, 사람의 네트워크라는 게 한계가 있고, 회사가 성장하면 잘 아는 사람의 인재풀은 바닥나기 때문에 이 방법은 회사 규모가 작을 때만 작동한다.\n두 번째는, 6개월의 수습 기간을 갖고, 이후에 정식 채용을 결정하는 것이다. 면접을 아무리 잘해도 이분이 실제 일을 잘하는진 현장에서 확인해야 하는데, 2개월 정도의 수습은 약간 애매하다. 2개월 정도는 일을 잘하는 척 연기할 수도 있다. 하지만, 6개월을 연기하긴 어렵다. 6개월 같이 일해보면, 이분이 정말 일을 잘하는 분인지 충분히 파악된다. 또한, 일을 잘하는 분도 본인이 회사와 케미가 맞는지 판단해 봐야 하므로 6개월 정도의 수습 기간을 권장한다. 이런 제안에 격하게 반대하는 후보라면, 그리고 그 이유로 자존심과 모욕감 등을 언급하면 이건 적신호다.\n마지막 방법은, 채용보단 보상에 대한 방법이다. 내가 전에 이 글에서 이야기했는데, 면접을 기반으로 직책과 연봉을 결정하는 게 너무 어렵고 위험한 방법이기 때문에, 입사 시 ‘one 직책 one 연봉’ 제도를 도입하는 것이다. 이게 무슨 말이냐 하면, 컴공과를 막 졸업한 25살 엔지니어든, 15년 개발 경력이 있는 엔지니어든, 새로운 회사에 입사할 때 직책이 둘 다 시니어 소프트웨어 엔지니어라면, 이 두 분의 입사 연봉은 무조건 동일하게 가는 전략이다. 같은 직책이라도 과거의 경험이 많으면 연봉이 더 높고, 특히나 면접 때 말을 잘하면 연봉이 훨씬 더 높아지는 게 현대 사회의 채용 전략인데, 나는 이건 완전히 틀렸다고 본다. 경력이 많다고 그 일을 잘하는 건 절대로 아니고 – 오히려 그 반대의 경험을 정말 많이 했다 – 면접 때 말발에서 이기는 사람이 일을 더 잘하는 게 절대로 아니다. 그래서 입사할 땐 모두 다 연봉을 동일하게 가져가지만, 일 년 후 업무 평가에서 실제로 일을 더 잘하는 사람에게 연봉을 드라마틱하게 인상해 주는 방법이 좋은 사람을 계속 회사에 남게 하고, 아닌 사람은 퇴사하게 할 수 있는 좋은 방법이라고 생각한다.\n정답은 아니지만, 위 3개의 방법을 적절하게 활용하면 피곤한 면접 횟수는 줄일 수 있고, 더 좋은 인재를 채용할 수 있다. 실은, 어쩌면 한국은 사람을 해고하는 게 너무 힘들어서 안 내보낼 사람을 채용하기 위해서 면접을 더 중시하고, 더 신중하게 생각할지도 모르겠다. 한국의 경직된 해고 정책은 반드시 바꿔야 한다고 나는 개인적으로 생각한다.\n어쨌든, 이렇게 면접하고, 다양한 채용 방법을 사용하는 이유는 좋은 사람을 확보하기 위해서다. 좋은 사람이란 일을 잘하는 사람인데, 일을 잘하는 사람이란, 일이 주어지면, 그 일을 직접 할 수 있는 사람이다. 일이 주어지면, 그 일을 하기 위해서 사람을 또 채용하는 사람이 아니라.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/04/stop-wasting-too-much-energy-on-interviews.html#respond",
        "content": "이 세상을 세상답게 돌아가게 하는 단 한 가지만 꼽으라면, 그건 ‘사람’이라고 할 수 있다. 사람이 사람과 일하고, 사람이 사람과 교류하면서 이 세상은 돌아가고, 더 좋은 세상으로 발전한다. 회사도 마찬가지다. 특히, 스타트업에서 가장 중요하고, 절대로 타협할 수 없는 단 한 가지만 선택하면, 그건 당연히 사람이다. 대표이사는 시간의 50%는 좋은 사람을 채용하는 데 사용해야 하고, 나머지 50%는(...)",
        "contentSnippet": "이 세상을 세상답게 돌아가게 하는 단 한 가지만 꼽으라면, 그건 ‘사람’이라고 할 수 있다. 사람이 사람과 일하고, 사람이 사람과 교류하면서 이 세상은 돌아가고, 더 좋은 세상으로 발전한다. 회사도 마찬가지다. 특히, 스타트업에서 가장 중요하고, 절대로 타협할 수 없는 단 한 가지만 선택하면, 그건 당연히 사람이다. 대표이사는 시간의 50%는 좋은 사람을 채용하는 데 사용해야 하고, 나머지 50%는(...)",
        "guid": "https://www.thestartupbible.com/?p=9426",
        "categories": [
          "Uncategorized",
          "FoundersAtWork",
          "general",
          "people",
          "strategy",
          "스타트업 바이블 1",
          "스타트업 바이블 2",
          "스타트업 바이블 QA"
        ],
        "isoDate": "2025-04-13T21:33:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "런치랩",
        "link": "https://www.thestartupbible.com/2025/04/order-your-company-lunch-with-lunchlab.html",
        "pubDate": "Wed, 09 Apr 2025 21:36:00 +0000",
        "content:encodedSnippet": "*이 글은 우리 투자사의 홍보성 내용을 포함합니다. 관심 없거나, 이런 홍보성 내용이 싫으면 그냥 안 읽으면 됩니다.\n우리 사무실이 위치한 삼성역엔 식당이 엄청 많다. 점심을 항상 밖에 나가서 먹진 않지만, 나가서 먹는다면 도보로 갈 수 있는 식당이 1,500개는 충분히 되지 않을까 싶다. 여기에다가 배달 음식까지 포함하면, 식당과 메뉴의 선택지는 정말 많아진다. 그런데도 나를 포함한, 삼성역에서 근무하는 모든 직장인들은 점심시간이 다가오면, “오늘 뭐 먹지?”라는 고민을 한다. 아마도 대한민국 모든 직장인들이 공통으로 매일 같은 질문을 할 것이고, 이건 외국의 직장인들도 예외는 아니다.\n이렇게 선택할 옵션이 넘쳐흐르는데도, “오늘 점심 뭐 먹지?” 고민은 한국의 직장인들이 수십 년 동안 했고, 앞으로도 계속할 것으로 생각해서, 우린 계속 이 문제를 해결할 수 있는 회사를 찾았었다. 완벽한 솔루션은 아니었지만, 플레이팅이라는 회사에 여러 번 투자하면서 이 큰 문제를 해결할 수 있길 바랬지만, 플레이팅은 처참하게 실패했다. 이런 과정을 거치면서, 맛있는 음식을 준비해서, 고객들에게 배달하는 사업은 돈 버는 게 정말 어렵다는 걸 뼈저리게 느꼈다.\n보통 이런 경험을 하면, 많은 분들이 이런 사업은 어렵고 우리가 투자한 회사가 망했기 때문에 이와 비슷한 분야나 사업에는 다시 투자하지 않는다. 우린 조금 다르게 생각했다. 우리가 투자한 회사는 잘 안됐지만, 아직도 오늘 뭘 먹을지라는 문제는 존재하고, 오히려 물가가 상승하면서 이 문제는 더욱더 심각하고 커지고 있기 때문에, 누군가 다른 방식으로 이 시장에 접근해서 성공한다면 엄청나게 큰 성공을 만들 수 있다는 생각을 항상 하고 있었다.\n이 분야에서 활동하는 다른 창업가들을 만났지만, 항상 2% 부족한 점들이 보였고, 이미 우리가 F&B 분야에 투자를 좀 많이 하면서 돈 버는 게 생각보다 훨씬 더 어렵다는 걸 많이 경험해서 그런지, 조금 더 보수적으로 검토하다 보니, 선뜻 투자하진 못했다. 그러다 런치랩을 검토하게 됐고, 비즈니스 모델도 꽤 단단하고, 창업가도 용병형 성향이 강해서 몇 달 전에 런치랩의 첫 기관투자자가 됐다.\n런치랩의 사업은 간단하다. 가정식, 샐러위치(샐러드+샌드위치), 샐러드밀 중 하나만 고르면, 매일 회사로 점심을 배달해 주고, 먹은 후에는 음식쓰레기까지 포함한 남은 모든 걸 다시 수거해간다. 메뉴는 회사에서 정하기 때문에, 별로 안 좋아하는 식단이 걸릴 수도 있지만, 오히려 선택 장애를 없애주기 때문에 많은 바쁜 직장인들이 훨씬 더 좋아한다. 회사의 입장에서는 이렇게 메뉴를 단순화하는 게 운영 효율 면에서도 훨씬 비용이 덜 든다. 참고로, 가정식 도시락은 밥과 국을 따뜻한 상태로 그대로 배달해 줘서 가정식과 비슷한 분위기의 맛있는 점심을 먹을 수 있다.\n원래 런치랩의 주 고객층은 대기업보단 사내 카페테리아나 식당이 없는 직원 50명 이하의 회사였는데, 요샌 대기업도 종종 문의가 들어오면서 런치랩의 점심 서비스를 그룹으로 이용하는 사례가 증가하고 있다. 회사 규모와 무관하게 인원수(4~5명), 이용주기(주 2회 이상만) 등 기본 요건만 맞으면 누구든 런치랩 서비스를 신청할 수 있다. 관심 있는 분들은 여기에서 문의하거나, 바로 점심 체험하기를 신청해 보면 된다. 이 블로그를 보고 알게 됐다고 하면, 할인은 잘 모르겠지만, 어쨌든 조금 더 잘 해줄 거다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/04/order-your-company-lunch-with-lunchlab.html#comments",
        "content": "*이 글은 우리 투자사의 홍보성 내용을 포함합니다. 관심 없거나, 이런 홍보성 내용이 싫으면 그냥 안 읽으면 됩니다. 우리 사무실이 위치한 삼성역엔 식당이 엄청 많다. 점심을 항상 밖에 나가서 먹진 않지만, 나가서 먹는다면 도보로 갈 수 있는 식당이 1,500개는 충분히 되지 않을까 싶다. 여기에다가 배달 음식까지 포함하면, 식당과 메뉴의 선택지는 정말 많아진다. 그런데도 나를 포함한, 삼성역에서(...)",
        "contentSnippet": "*이 글은 우리 투자사의 홍보성 내용을 포함합니다. 관심 없거나, 이런 홍보성 내용이 싫으면 그냥 안 읽으면 됩니다. 우리 사무실이 위치한 삼성역엔 식당이 엄청 많다. 점심을 항상 밖에 나가서 먹진 않지만, 나가서 먹는다면 도보로 갈 수 있는 식당이 1,500개는 충분히 되지 않을까 싶다. 여기에다가 배달 음식까지 포함하면, 식당과 메뉴의 선택지는 정말 많아진다. 그런데도 나를 포함한, 삼성역에서(...)",
        "guid": "https://www.thestartupbible.com/?p=9418",
        "categories": [
          "Uncategorized",
          "B2B",
          "f&b",
          "korea",
          "Strong"
        ],
        "isoDate": "2025-04-09T21:36:00.000Z"
      }
    ]
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "직장인의 부업소득, 종합소득세 신고 대상일까요?",
        "link": "https://blog.toss.im/article/tossmoment-7",
        "pubDate": "Fri, 11 Apr 2025 04:21:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}“퇴근 후 배달을 시작한 지 4개월째입니다. 생활비 보태려는 정도로만 부업소득을 벌고 있는데, 굳이 세금 신고를 따로 해야 할까요? 이 정도 금액은 괜찮을 것 같은데…”\n부업을 하는 직장인이라면 누구나 한 번쯤 해봤을 고민이죠.\n하지만 ‘겨우 이 정도 쯤이야.’ 하고 신고하지 않는다면 나중에 후회할 수 있어요. 국세청에서는 부업 소득도 꼼꼼하게 살피기 때문에, 금액이 작다고 무심코 넘어갔다가는 세무적인 불이익을 겪을 수 있거든요. 종합소득세 신고를 안 했을 때 어떻게 되는지 궁금하다면 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}여기에서 확인할 수 있어요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}부업을 한다면\n친해져야 할 종합소득세\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}직장에서 받는 월급의 세금은 연말정산으로 정리되지만, 부업 소득에 대한 세금은 5월 종합소득세 신고기간에 별도로 처리해야해요. \n부업 소득은 직장에서 발생한 근로소득과 합산해서 세금이 산출되기 때문에, 두 소득을 더한 금액이 높을수록 세율도 높아져 세금 부담이 생길 수 있어요. 하지만 이때 신고를 하지 않는다면 나중에 가산세 등의 더 큰 비용이 발생합니다.\n물론, 모든 부업 소득이 종합소득세 신고 대상인 건 아니에요. 소득의 종류와 금액, 수익 구조가 반복적인지에 따라 달라져요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n① 부업이 기타소득인 경우\n일시적인 강연료, 단발성 원고료처럼 반복적이지 않은 수입은 기타소득으로 분류됩니다. 기타소득 금액이 300만 원을 초과하면 다른 소득과 합산해 종합소득세 신고를 해야 해요. 300만 원 이하라면 분리과세*나 종합과세* 중 나에게 더 유리한 것을 선택하면 됩니다.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}* .css-1ebvaan{white-space:pre-wrap;font-weight:bold;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}분리과세: 다른 소득과 합치지 않고, 해당 소득에만 따로 세금을 매기는 방식이에요. 소득이 높아 세율이 높은 사람에게 유리해요.\n* 종합과세: 모든 소득을 합쳐 한꺼번에 세금을 매기는 방식이에요. 소득이 많지 않거나 공제 혜택을 받을 수 있는 사람에게 유리해요.\n강연료, 원고료, 인세 등 일반적인 인적용역 기타소득의 경우, 별도의 증빙자료 없이도 수입의 60%까지는 필요경비로 인정받을 수 있어요. 즉, 필요경비가 450만 원으로 적용되는 750만 원의 수입까지는 일반적으로 종합소득세 신고 대상이 아닌거죠. 750만 원을 넘는 수입을 얻었지만 실제 지출한 비용을 증빙하여 차감한 금액이 300만 원 이하라면, 종합소득세 신고를 통해 기타소득임을 인정받으면 됩니다.\n② 부업이 사업소득인 경우\n크몽, 스마트스토어, 유튜브, 배달처럼 반복적으로 수익을 얻을 수 있는 부업 활동은 사업소득에 해당해요. 사업소득은 금액에 관계없이 모두 종합소득세 신고 대상이에요. 플랫폼에서 단발성으로 수익을 얻었더라도, 계정이 등록되어 언제든 추가 거래가 가능한 상태라면 사업소득으로 신고하는 것이 안전합니다. 계정을 삭제했거나 정지해서 추가 거래 가능성이 없다면 기타소득으로 분류할 수 있어요.\n③ 부업이 근로소득인 경우\n두 회사에서 급여를 받는다면, 한 회사에서 받은 근로소득 원천징수영수증을 다른 회사에 제출해 두 소득을 합산하여 연말정산할 수 있어요. 이 경우 종합소득세 신고를 따로 하지 않아도 됩니다. 하지만 각 회사에서 별도로 연말정산을 했다면, 두 소득을 합산해 종합소득세 신고를 해야 해요. 각각 신고하면 세금이 일시적으로 적게 나올 수 있지만, 나중에 국세청이 두 소득을 합산해 다시 계산하면 미납 세금과 가산세를 추가로 내야 할 수 있으니 처음부터 정확하게 신고하는 게 좋습니다.\n하루 단위로 일한 행사 보조나 단기 알바처럼 일시적인 근로는 일용 근로소득으로 분류됩니다. 일용 근로소득은 보통 지급받을 때 원천징수가 이미 완료되기 때문에 별도로 신고하지 않아도 됩니다. 하지만 세금을 떼지 않고 현금이나 계좌이체 등으로 직접 받았다면, 기타소득이나 사업소득으로 간주되어 신고 대상이 될 수 있어요. 수익 활동이 반복적이고 지속적이라면 사업소득, 그렇지 않다면 기타소득으로 신고하면 됩니다.\n세금을 줄이고 싶다면\n영수증은 꼼꼼하게\n많은 분들이 세금은 번 돈 전체에 붙는다고 생각해요. 하지만 세금은 수입에서 지출 비용을 뺀 소득에 부과됩니다. 그래서 지출 비용을 얼마나 어떻게 인정받느냐에 따라 내야 할 세금은 크게 달라질 수 있어요.\n단, 부업과 관련 없는 지출은 인정되지 않아요. 직접적인 관련성이 있어야 하고, 영수증 같은 증빙 자료가 꼭 있어야 합니다. 그래서 부업용 카드나 통장을 만들어서 지출 자료를 미리 정리해두면 나중에 세금 신고할 때 큰 도움이 됩니다. 경비처리 규정이 담긴 소득세법 시행령 제55조는 법제처 사이트에서 자세히 확인할 수 있어요.\n\n기억해야 할 금액\n2,000만 원\n부업 소득이 연 2,000만 원을 넘으면, 소득월액 보험료가 추가로 부과됩니다. 일반적으로는 추가된 소득 규모에 따라 기존 보험료의 5~10% 정도가 늘어나요. \n그리고 이 정보는 재직중인 회사에도 통보됩니다. 직장에 부업을 비밀로 하고 있었다면 건강보험공단의 보험료 고지서로 들킬 수 있다는 의미죠. 이때 부업 소득은 이자, 배당, 연금, 기타소득까지 모두 합산해서 계산되니 꼼꼼하게 유의하는 게 좋아요.\n내가 놓친 환급금,\n그냥 두면 사라져요\n부업 소득을 성실히 신고했더라도, 원래 납부했어야 할 것보다 더 낸 세금이 있을 수 있어요. 특히 부업을 하는 직장인이라면 빠뜨렸던 항목이 있을 가능성이 높아 돌려받을 수 있는 돈이 있는 경우가 많죠. 이때는 잘못 냈던 세금을 바로잡아 다시 신고하는 경정청구를 통해 세금을 환급 받으면 돼요.\n‘혹시 나도?’ 라는 생각이 든다면, 아래 버튼을 눌러 지금 바로 확인해보세요. 토스 앱에서는 지난 5년간 납부한 세금 중 돌려받을 돈이 있는지, 있다면 얼마나 받을 수 있는지 빠르고 쉽게 확인할 수 있어요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 윤동해 Graphic 조수희 이제현 이동건",
        "content": "부업을 한다면 꼭 알아야 할 세금 상식",
        "contentSnippet": "부업을 한다면 꼭 알아야 할 세금 상식",
        "guid": "https://blog.toss.im/article/tossmoment-7",
        "isoDate": "2025-04-11T04:21:00.000Z"
      },
      {
        "title": "2025 대학생·청년 주거지원 제도 총정리: 임대주택부터 월세지원까지",
        "link": "https://blog.toss.im/article/money-policies-38",
        "pubDate": "Thu, 10 Apr 2025 06:46:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}대학생·청년이 거주할 수 있는 공공주택 유형 4가지\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n1. 다가구 매입임대 주택\n.css-1kxrhf3{white-space:pre-wrap;}역세권 등 입지가 좋은 다가구 주택을 시세의 30~50% 저렴한 임대료로 공급합니다.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n대상: 대학생, 취업준비생 및 19~39세 무주택 청년\n시기: 상시 입주자 모집\n신청 자격: 생계, 주거, 의료급여 수급자 가구 및 한부모가족, 차상위계층 가구, 본인과 부모의 월평균 소득 100% 이하인 자, 본인의 월평균 소득 100% 이하인 자\n신청 방법(문의처): .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}LH청약플러스 및 관할 지자체\n\n\n2. 행복주택\n학교나 직장, 교통이 편리한 지역에 위치한 공공임대주택으로, 시세의 60~80% 수준의 저렴한 임대료가 특징입니다.\n\n\n대상: 대학생, 취업준비생 및 19~39세 무주택 청년, 도시근로자 가구원 수별 가구당 월평균 소득 100% 이하 (1인 가구 120%)\n시기: 입주자 모집 공고 참고\n신청 방법(문의처): 마이홈포털(1600-1004) 및 공공주택 사업처별 청약접수처\n\n\n3. 전세 임대주택\nLH가 집주인과 계약을 맺고 청년에게 재임대하는 방식으로, 전세금을 간접 지원합니다. 청년은 기준 충족 시, 최대 10년까지 거주할 수 있어요.\n\n\n대상: 대학생, 취업준비생 및 19~39세 무주택 청년 중 소득 및 자산 기준 충족자\n지원한도:\n-수도권: 1억 2,000만 원\n-광역시: 9,500만 원(세종 포함)\n-기타 지역: 8,500만 원\n\n신청 방법(문의처): 한국토지주택공사(1600-1004) 및 지방공사\n\n\n4. 통합공공임대주택\n복잡했던 공공임대주택 유형(영구·국민·행복주택)을 하나로 통합한 주택으로, 제도를 간소화하고 입주 자격과 임대료 체계를 개선했어요. 임대 기간은 최대 30년, 임대료는 시세의 35~90% 수준으로 주택마다 다양해요.\n\n\n신청 자격: 18~39세 무주택자, 중위소득 150% 이하 (1인 가구 170%)\n신청 시기: 입주자 모집 공고\n신청 방법(문의처): 마이홈 포털(1600-1004)\n\n\n\n대학생·청년을 위한 주거비 지원 정책 4가지 \n1. 청년 월세 한시 특별지원(2022~2027년)\n부모와 따로 살고 있는 19~34세 무주택 청년이라면 월 최대 20만 원을 지원받을 수 있어요.\n\n\n지원 대상: 19~34세 무주택 청년, 부모와 별도 거주, 청약 통장 가입자\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*청년가구 소득이 기준 중위소득 60% 이하이면서 원가구 소득이 중위소득 100% 이하\n지원 내용: 실제 납부하는 임대료를 월 최대 20만 원, 최대 24개월 지급\n신청 방법: 복지로 웹사이트 또는 관할 행정복지센터 방문 \n\n\n2. 주거안정장학금\n원거리 대학에 진학한 저소득층 학생들에게 월 최대 20만 원을 지원합니다.\n\n\n지원 대상: 원거리 대학에 다니는 기초·차상위 학생 (단, 사업 참여 대학에 한함) 중 성적 기준*을 충족하는 경우\n*성적기준: 직전학기 12학점 이상 이수하여 70/100 점 이상 획득\n지원 내용: 월 최대 20만 원 한도 내 학기 중 학생이 지출한 주거 관련 비용 지원\n월세, 보증금, 공동주택관리비, 수도비, 가스비, 전기비 등\n신청 방법: 한국장학재단 웹 또는 모바일 앱(1599-2000)\n\n\n3. 전세보증금 반환보증 보증료지원\n전세보증금 피해를 막기 위해 보증보험 가입자에게 보증료를 지원합니다.\n\n\n지원 대상: 전세보증금 3억 원 이하이고, 전세보증금 반환보증보험이 유효한 청년 (보증료 5,000만 원 이하)\n지원 내용: 보증료 전액 또는 일부 지원 (최대 30만 원)\n신청 방법: 지자체 방문, 정부24 또는 안심전세포털\n\n\n4. 주택구입·전세자금 대출\n청년이 자립할 수 있도록 대출을 통한 주거비 부담을 완화합니다.\n\n\n지원 내용\n\n청년가구 버팀목전세자금대출 부부 합산 연 소득 5,000만 원 이하, 85㎡ 이하, 보증금 3억 원, 대출한도 2억 원, 대출비율 보증금의 80% 이내, 금리 2.2~3.3%\n신혼부부 디딤돌 구입자금대출 부부 합산 연 소득 8,500만 원 이하, 주택가격 6억 원, 대출금액 최대 4억 원, 금리 2.55~3.85%\n\n\n신청 방법: 주택도시보증공사 기금e 든든 비대면 신청(1566-9009) 및 은행(우리, 신한, 국민, 농협, 하나, iM, 부산) 방문 접수",
        "content": "대학생과 청년을 위한 대표적인 주거지원 제도 모아보기",
        "contentSnippet": "대학생과 청년을 위한 대표적인 주거지원 제도 모아보기",
        "guid": "https://blog.toss.im/article/money-policies-38",
        "isoDate": "2025-04-10T06:46:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]