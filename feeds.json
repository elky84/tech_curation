[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Augustin Popa",
        "title": "What’s New in vcpkg (February 2025): Package installation performance, new tested triplet, and more",
        "link": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-february-2025-package-installation-performance-new-tested-triplet-and-more/",
        "pubDate": "Thu, 27 Feb 2025 23:20:38 +0000",
        "content:encodedSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.02.14 registry release, 2025-02-11,  2025-01-29, 2025-01-24, and 2025-01-20 tool releases, as well as changes to vcpkg documentation throughout February. This release includes significant performance improvements when installing packages, a new tested triplet (x64-windows-release), an overhaul of how vcpkg handles some downloads and console output, and bug fixes. In terms of documentation, there are improvements to our maintainer guide, registries articles, and versioning articles, among others.\nSome stats for this period:\nThere are now 2,558 total ports available in the vcpkg curated registry. A port is a versioned recipe for building a package from source, such as a C or C++ library.\n38 new ports were added to the curated registry.\n314 updates were made to existing ports. As always, we validate each change to a port by building all other ports that depend on or are depended by the library that is being updated for our 13 main triplets.\n100 community contributors made commits.\nThe main vcpkg repo has over 6,600 forks and 24,000 stars on GitHub.\nvcpkg changelog (2025.02.14 release)\nThe following notable changes were made in February:\nOur community contributor, autoantwort, worked on a PR to improve package installation performance by optimizing some binary caching actions. The table below displays the change in our CI run times when building all ports for all tested triplets as a result of this improvement (PR: Microsoft/vcpkg-tool#908, thanks @autoantwort!).\nTriplet\nOld Time (mins)\nNew Time (mins)\nTime Saved (%)\n\n\nx86-windows\n\n1661\n1530\n8%\n\n\nx64-windows\n2009\n1900\n5%\n\n\nx64-windows-static\n1948\n1550\n20%\n\n\nx64-windows-static-md\n1878\n1622\n14%\n\n\nx64-uwp\n369\n333\n10%\n\n\narm64-windows\n1145\n1138\n1%\n\n\narm64-windows-static-md\n1197\n1055\n12%\n\n\narm64-uwp\n355\n333\n6%\n\n\nx64-osx\n2522\n2109\n16%\n\n\narm64-osx\n961\n837\n13%\n\n\nx64-linux\n1278\n1003\n22%\n\n\narm-neon-android\n309\n262\n15%\n\n\nx64-android\n342\n285\n17%\n\n\narm64-android\n346\n290\n16%\n\n\n\n\nThe x64-windows-release community triplet has been promoted to a tested triplet, which means it is now subject to our regular continuous integration runs to verify ongoing package compatibility. An entry has been added to the Total ports available for tested triplets section below and will continue to be included in future release blog posts (PR: Microsoft/vcpkg#43555).\nOverhauled downloads handling and console output to fix many longstanding bugs and reduce confusion (PR: Microsoft/vcpkg-tool#1565). More specifically:\n\nNo longer print an error when an asset cache misses but the authoritative download succeeds.\nNow always and consistently print output from x-script at the time that actually happens.\nNo longer output a message claiming that proxy settings might fix a hash mismatch problem.\nNow output a message that proxy settings might fix a download from asset cache problem.\nNow always output the full command line that was attempted when invoking an x-script that failed.\nFixed a crash that occurred when an x-script doesn’t create the file vcpkg expects or creates a file with the wrong hash.\nNow always print what vcpkg is doing before touching the network, so if vcpkg hangs, the user will know which server is being problematic. This includes storing back to asset caches.\nRemoved misleading debug output about asset cache configuration.\nA new file, manifest-info.jsonnow gets generated in the vcpkg_installed folder for projects using a manifest (vcpkg.json). This file contains the absolute path to the manifest file that was used to generate the vcpkg_installed tree. Can be used for debugging purposes (PR: Microsoft/vcpkg-tool#1568).\nThe experimental --x-use-aria2 option has been removed as it has not worked for several releases and download support in the rest of the product has matured substantially (PR: Microsoft/vcpkg-tool#1582).\nRemoved a misleading warning message that appeared when building ARM64EC packages with x64 upstream dependencies. ARM64EC also supports x64 binaries (PR: Microsoft/vcpkg-tool#1581).\nAdded a missing error message when attempting to install ports with multiple overrides set for the same port (PR: Microsoft/vcpkg-tool#1573).\nFixed a bug with the GitHub Actions binary cache (PR: Microsoft/vcpkg-tool#1572, thanks @j-mie!).\nOther minor bug fixes.\nDocumentation changes\nAdded definition for “Registry” in the Glossary (PR: Microsoft/vcpkg-docs#444).\nFixed errors in examples of VCPKG_USE_HOST_TOOLS and CMakeUserPresets.json (PR: Microsoft/vcpkg-docs#444).\nAdded entry for PowerShell version in the ABI hash keys (PR: Microsoft/vcpkg-docs#444).\nVersioning reference article:\n\nAdded clarification that only one override for a given package name is allowed (PR: Microsoft/vcpkg-docs#438).\nReworded the definition of a baseline for improved clarity (PR: Microsoft/vcpkg-docs#427, thanks @Filoppi!).\nMaintainer function vcpkg_check_linkage,\n\nAdded clarifications for ONLY_DYNAMIC_LIBRARY failures and supports expressions (PR: Microsoft/vcpkg-docs#432).\nFixed typo for staticcrt in a supports expression (PR: Microsoft/vcpkg-docs#446, thanks @dg0yt!).\nRegistries concepts, registries reference, and vcpkg-configuration.json reference:\n\nIn registries concepts, added sections for directory structure, versions database, built-in registry, obtaining a git-tree SHA, and best practices.\nIn registries reference, removed conceptual sections and added JSON schema documentation for baseline.json and version files.\nVarious wording improvements across the three articles.\nPRs: Microsoft/vcpkg-docs#429, Microsoft/vcpkg-docs#442, Microsoft/vcpkg-docs#448, thanks @bansan85!\nIn the maintainer guide:\n\nExpanded on the rule about splitting out and separately packaging dependencies rather than vendoring them, for improved clarity (PR: Microsoft/vcpkg-docs#433).\nAdded rules for using lowercase hexadecimal digits strings in certain scenarios (PR: Microsoft/vcpkg-docs#443).\nIn the remote authentication article, added references to vcpkg_from_gitlab() where appropriate (PR: Microsoft/vcpkg-docs#436, thanks @malaterre!).\nRemoved documentation for experimental option --x-use-aria2, which is no longer supported (PR: Microsoft/vcpkg-docs#441).\nIf you have any suggestions for our documentation, please submit an issue in our GitHub repo or see the box at the bottom of a particular article.\n\nTotal ports available for tested triplets\ntriplet\nports available\n\n\nx64-windows\n2,457\n\n\nx86-windows\n2,344\n\n\nx64-windows-release\n2,458\n\n\nx64-windows-static\n2,323\n\n\nx64-windows-static-md\n2,374\n\n\narm64-windows\n2,058\n\n\narm64-windows-static-md\n2,037\n\n\nx64-uwp\n1,372\n\n\narm64-uwp\n1,337\n\n\nx64-linux\n2,435\n\n\nx64-osx\n2,308\n\n\narm64-osx\n2,231\n\n\narm-neon-android\n1,719\n\n\nx64-android\n1,791\n\n\narm64-android\n1,761\n\n\n\nWhile vcpkg supports a much larger variety of target platforms and architectures (as community triplets), the list above is validated exhaustively to ensure updated ports don’t break other ports in the catalog.\nThank you to our contributors\nvcpkg couldn’t be where it is today without contributions from our open-source community. Thank you for your continued support! The following people contributed to the vcpkg, vcpkg-tool, or vcpkg-docs repos in this release (listed alphabetically by GitHub username):\naabellagm\nAenBleidd\nAgorath\n\n\najtribick\nalfredh\namoeba\n\n\nArashPartow\nautoantwort\nazure-sdk\n\n\nbansan85\nBewareMyPower\nBrandenXia\n\n\nbuck-yeh\nBushidosan\nbwrsandman\n\n\nbzindovic\nc8ef\ncarlo-bramini\n\n\ncenit\nChristianPanov\nculhatsker\n\n\ndalle\ndaniele77\ndaschuer\n\n\ndbolduc\ndeshanxiao\ndg0yt\n\n\ndpogue\nDynamitos\neao197\n\n\nEfesX\nethanmusser\nfaserg1\n\n\nfarindk\nFiloppi\nfran6co\n\n\ngreg7mdp\nhelynranta\nHoneybunch\n\n\nIldarKhayrutdinov\nilya-lavrenov\nj-mie\n\n\njackjansen\njgillis\nJhuighuy\n\n\njmcnamara\nJoergAtGithub\njreichel-nvidia\n\n\nKblaschke\nkduske\nkimidaisuki22\n\n\nlukasberbuer\nluncliff\nm-kuhn\n\n\nmalaterre\nmichaelmigliore\nmingxwa\n\n\nmiyanyan\nmkhon\nmoritz-h\n\n\nmstorsjo\nmtmk\nNeumann-A\n\n\nnickdademo\nnoahknegt\nohhmm\n\n\noleg-derevenetz\nOlli1080\nOsyotr\n\n\npaperchalice\nPavelKisliak\nPodsvirov\n\n\npozemka\nredboltz\nreinder\n\n\nrremilian\nRT2Code\nrtzoeller\n\n\nsargunv\nscotthart\nshybovycha\n\n\nSunBlack\nsweemer\nT3RR7\n\n\ntalregev\ntarcila\ntartanpaint\n\n\nThomas1664\nThomsonTan\ntoge\n\n\ntomconder\ntrueqbit\ntueda\n\n\nvalgur\nwalbourn\nwaruto210\n\n\nwaywardmonkeys\nwikiw91\nytnuf\n\n\nzhcn000000\n\n\n\n\n\nLearn more\nYou can find the main release notes on GitHub. Recent updates to the vcpkg tool can be viewed on the vcpkg-tool Releases page. To contribute to vcpkg documentation, visit the vcpkg-docs repo. If you’re new to vcpkg or curious about how a package manager can make your life easier as a C/C++ developer, check out the vcpkg website – vcpkg.io.\nIf you would like to contribute to vcpkg and its library catalog, or want to give us feedback on anything, check out our GitHub repo. Please report bugs or request updates to ports in our issue tracker or join more general discussion in our discussion forum.\nThe post What’s New in vcpkg (February 2025): Package installation performance, new tested triplet, and more appeared first on C++ Team Blog.",
        "dc:creator": "Augustin Popa",
        "comments": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-february-2025-package-installation-performance-new-tested-triplet-and-more/#respond",
        "content": "<p>This blog post summarizes changes to the vcpkg package manager as part of the 2025.02.14 registry release, 2025-02-11, 2025-01-29, 2025-01-24, and 2025-01-20 tool releases, as well as changes to vcpkg documentation throughout February. This release includes significant performance improvements when installing packages, a new tested triplet (x64-windows-release), an overhaul of how vcpkg handles some downloads [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-february-2025-package-installation-performance-new-tested-triplet-and-more/\">What’s New in vcpkg (February 2025): Package installation performance, new tested triplet, and more</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.02.14 registry release, 2025-02-11, 2025-01-29, 2025-01-24, and 2025-01-20 tool releases, as well as changes to vcpkg documentation throughout February. This release includes significant performance improvements when installing packages, a new tested triplet (x64-windows-release), an overhaul of how vcpkg handles some downloads […]\nThe post What’s New in vcpkg (February 2025): Package installation performance, new tested triplet, and more appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35175",
        "categories": [
          "C++",
          "Vcpkg",
          "vcpkg"
        ],
        "isoDate": "2025-02-27T23:20:38.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "Building multimodal AI for Ray-Ban Meta glasses",
        "link": "https://engineering.fb.com/2025/03/04/virtual-reality/building-multimodal-ai-for-ray-ban-meta-glasses/",
        "pubDate": "Tue, 04 Mar 2025 21:24:18 +0000",
        "content:encodedSnippet": "Multimodal AI – models capable of processing multiple different types of inputs like speech, text, and images – have been transforming user experiences in the wearables space.\nWith our Ray-Ban Meta glasses, multimodal AI helps the glasses see what the wearer is seeing. This means anyone wearing Ray-Ban Meta glasses can ask them questions about what they’re looking at. The glasses can provide information about a landmark, translate text you’re looking at, and many other features.\nBut what does it take to bring AI into a wearable device?\nOn this episode of the Meta Tech Podcast, meet Shane, a research scientist at Meta who has spent the last seven years focusing on computer vision and multimodal AI for wearables. Shane and his team have been behind cutting edge AI research like AnyMAL, a unified language model that can reason over an array of input signals including text, audio, video, and even IMU motion sensor data.\nShane sits down with Pascal Hartig to share how his team is building foundational models for the Ray-Ban Meta glasses. They talk about the unique challenges of AI glasses and pushing the boundaries of AI-driven wearable technology.\nWhether you’re an engineer, a tech enthusiast, or simply curious, this episode has something for everyone!\nDownload or listen to the episode below:\n\nSpotify\nApple Podcasts\nPocket Casts\nOvercast\nThe Meta Tech Podcast is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features.\nSend us feedback on Instagram, Threads, or X.\nAnd if you’re interested in learning more about career opportunities at Meta visit the Meta Careers page.\nLinks\nAnyMAL: An Efficient and Scalable Any-Modality Augmented Language Model\nInside The Be My Eyes-Meta Collaboration\nCachelib\nMeta Open Source on Threads\nMeta’s AI-Powered Ray-Bans Are Life-Enhancing for the Blind\nTimestamps\nIntro 0:06\nOSS News 0:56\nIntroduction Shane 1:30\nThe role of research scientist over time 3:03\nWhat’s Multi-Modal AI? 5:45\nApplying Multi-Modal AI in Meta’s products 7:21\nAcoustic modalities beyond speech 9:17\nAnyMAL 12:23\nEncoder zoos 13:53\n0-shot performance 16:25\nIterating on models 17:28\nLLM parameter size 19:29\nHow do we process a request from the glasses? 21:53\nProcessing moving images 23:44\nScaling to billions of users 26:01\nWhere lies the optimization potential? 28:12\nIncorporating feedback 29:08\nOpen-source influence 31:30\nBe My Eyes Program 33:57\nWorking with industry experts at Meta 36:18\nOutro 38:55\nThe post Building multimodal AI for Ray-Ban Meta glasses appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Multimodal AI – models capable of processing multiple different types of inputs like speech, text, and images – have been transforming user experiences in the wearables space. With our Ray-Ban Meta glasses, multimodal AI helps the glasses see what the wearer is seeing. This means anyone wearing Ray-Ban Meta glasses can ask them questions about [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/03/04/virtual-reality/building-multimodal-ai-for-ray-ban-meta-glasses/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/03/04/virtual-reality/building-multimodal-ai-for-ray-ban-meta-glasses/\">Building multimodal AI for Ray-Ban Meta glasses</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Multimodal AI – models capable of processing multiple different types of inputs like speech, text, and images – have been transforming user experiences in the wearables space. With our Ray-Ban Meta glasses, multimodal AI helps the glasses see what the wearer is seeing. This means anyone wearing Ray-Ban Meta glasses can ask them questions about [...]\nRead More...\nThe post Building multimodal AI for Ray-Ban Meta glasses appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22308",
        "categories": [
          "AI Research",
          "ML Applications",
          "Virtual Reality",
          "Meta Tech Podcast"
        ],
        "isoDate": "2025-03-04T21:24:18.000Z"
      },
      {
        "creator": "",
        "title": "A case for QLC SSDs in the data center",
        "link": "https://engineering.fb.com/2025/03/04/data-center-engineering/a-case-for-qlc-ssds-in-the-data-center/",
        "pubDate": "Tue, 04 Mar 2025 17:00:26 +0000",
        "content:encodedSnippet": "The growth of data and need for increased power efficiency are leading to innovative storage solutions.\nHDDs have been growing in density, but not performance, and TLC flash remains at a price point that is restrictive for scaling. \nQLC technology addresses these challenges by forming a middle tier between HDDs and TLC SSDs.   QLC provides higher density, improved power efficiency, and better cost than existing TLC SSDs. \nToday, HDDs are the go-to storage solution for most data centers because of their lower cost and power footprint compared to other solutions like TLC flash. But while HDDs are growing in size, they haven’t been growing in I/O performance. In other words, the bandwidth per TB for HDDs has been dropping. This has been forcing data center engineers to meet their storage performance needs by shifting hot (frequently accessed) data to a TLC flash tier or by overprovisioning storage.\nQLC flash as a technology has been around since 2009. Adoption has been slow because it has historically operated at lower drive capacity points – less than 32TB. As well, high cost and limited write endurance didn’t make it an attractive alternative to TLC in the datacenter. \nIn the meantime, HDD densities have been growing without any significant increase in the throughput. As more data is stored on a given drive the need for I/O goes up proportionally. The continued densification of HDD capacity has led to a consistent decline in BW/TB. This has negatively affected a portion of hot workloads and forced bytes to get stranded on HDDs.\n\nQLC flash occupies a unique space in the performance spectrum in between HDDs and SSDs for servicing workloads that still depend upon performance at 10 MB/s/TB range i.e., where we had 16-20TB HDDs. Additionally there are workloads doing large batch IOs which do not need very high performance but still are in the 15-20 MB/s/TB range and use TLC flash today.\nQLC flash introduced as a tier above HDDs can meet write performance requirements with sufficient headroom in endurance specifications. The workloads being targeted are read-bandwidth-intensive with infrequent as well as comparatively low write bandwidth requirements. Since the bulk of power consumption in any NAND flash media comes from writes, we expect our workloads to consume lower power with QLC SSDs. \nThe advent of the 2Tb QLC NAND die along with 32-die stack becoming mainstream illustrates just how rapidly the density scaling of QLC flash is growing at a NAND package level as well as at drive level.\nWe expect QLC SSD density will scale much higher than TLC SSD density in the near-term and long-term. This will bring meaningful impact to server and rack level bytes densification as well as help lower per-TB acquisition and power costs at both the drive and server level. \n\nQLC at Meta\nMeta’s storage teams have started working closely with partners like Pure Storage, utilizing their DirectFlash Module (DFM) and DirectFlash software solution to bring reliable QLC storage to Meta. We are also working with other NAND vendors to integrate standard NVMe QLC SSDs into our data centers. \nWhile today QLC is lower in cost than TLC, it is not yet price competitive enough for a broader deployment. Still, the gains in power consumption efficiency are material and the above mentioned use cases are expected to greatly benefit from that. Given that HDDs are continuing to get colder as their density increases (decreasing BW/TB), and that NAND cost structures are improving with technology advancements, we believe that adding a QLC tier is the right path forward.\nHardware considerations for adopting QLC\nWhile E1.S as a form factor has been great for our TLC deployments, it’s not an ideal form factor to scale our QLC roadmap because its size limits the number of NAND packages per drive.\nThe Industry standard U.2-15mm is still a prevalent form factor across SSD suppliers and it enables us to potentially scale to 512TB capacity. E3 doesn’t bring additional value over U.2 at the moment and the market adoption split between the 4 variants of E3 makes it less attractive. Pure Storage’s DFMs can allow scaling up to 600TB with the same NAND package technology. Designing a server to support DFMs allows the drive slot to also accept U.2 drives. This strategy enables us to reap the most benefits in cost competition, schedule acceleration, power efficiency, and vendor diversity.  \nThe primary benefit of QLC drives is byte density at the drive and server level and the associated power efficiency. Within Meta, the byte density target of the QLC-based server is 6x the densest TLC-based server we ship today. Even though the BW/TB expected of QLC is lower than TLC, the QLC server bytes density requires a more performant CPU, faster memory and network subsystem to take advantage of the media capabilities.  \nAdapting our storage software for QLC \nAdopting Meta’s existing storage software to QLC has presented some interesting challenges. As discussed above, our QLC systems are very high in density. And we are targeting QLC SSDs as a higher performance media compared to HDDs. This raises throughput expectations beyond any single server throughput we ever had. \nScaling such high throughput across CPU cores and sockets requires careful placement of data and compute to process that I/O. We need to make sure we minimize data touchpoints and can separate the I/O by type. The software stack in Pure Storage’s solutions uses Linux userspace block device driver (ublk) devices over io_uring to both expose the storage as a regular block device and enable zero copy for data copy elimination – as well as talk to their userspace FTL (DirectFlash software) in the background. \nFor other vendors, the stack uses io_uring to directly interact with the NVMe block device.\nFurther, QLC SSDs have a significant delta between read and write throughput. Read throughput in the case of QLC can be as high as 4x or more than write throughput. What’s more, typical use cases around reads are latency sensitive so we need to make sure that the I/O delivering this massive read BW is not getting serialized behind the writes. This requires building, and carefully tuning, rate controllers and I/O schedulers.\nLooking forward\nMeta recognizes QLC flash’s potential as a viable and promising optimization opportunity for storage cost, performance, and power for data center workloads. As flash suppliers continue to invest in advanced fab processes and package designs and increase the QLC flash production output, we anticipate substantial cost improvements, making QLC flash progressively more attractive for a broader range of data center workloads. We are excited about driving innovation, fostering collaboration, and promoting ecosystem alignment in this evolving storage space.\nThe post A case for QLC SSDs in the data center appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>The growth of data and need for increased power efficiency are leading to innovative storage solutions. HDDs have been growing in density, but not performance, and TLC flash remains at a price point that is restrictive for scaling.  QLC technology addresses these challenges by forming a middle tier between HDDs and TLC SSDs.   QLC [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/03/04/data-center-engineering/a-case-for-qlc-ssds-in-the-data-center/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/03/04/data-center-engineering/a-case-for-qlc-ssds-in-the-data-center/\">A case for QLC SSDs in the data center</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "The growth of data and need for increased power efficiency are leading to innovative storage solutions. HDDs have been growing in density, but not performance, and TLC flash remains at a price point that is restrictive for scaling.  QLC technology addresses these challenges by forming a middle tier between HDDs and TLC SSDs.   QLC [...]\nRead More...\nThe post A case for QLC SSDs in the data center appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22312",
        "categories": [
          "Data Center Engineering"
        ],
        "isoDate": "2025-03-04T17:00:26.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": [
      {
        "creator": "Netflix Technology Blog",
        "title": "Title Launch Observability at Netflix Scale",
        "link": "https://netflixtechblog.com/title-launch-observability-at-netflix-scale-8efe69ebd653?source=rss----2615bd06b42e---4",
        "pubDate": "Wed, 05 Mar 2025 01:24:53 GMT",
        "content:encodedSnippet": "Part 3: System Strategies and Architecture\nBy: Varun Khaitan\nWith special thanks to my stunning colleagues: Mallika Rao, Esmir Mesic, Hugo Marques\nThis blog post is a continuation of Part 2, where we cleared the ambiguity around title launch observability at Netflix. In this installment, we will explore the strategies, tools, and methodologies that were employed to achieve comprehensive title observability at scale.\nDefining the observability endpoint\nTo create a comprehensive solution, we decided to introduce observability endpoints first. Each microservice involved in our Personalization stack that integrated with our observability solution had to introduce a new “Title Health” endpoint. Our goal was for each new endpoint to adhere to a few principles:\n\nAccurate reflection of production behavior\nStandardization across all endpoints\nAnswering the Insight Triad: “Healthy” or not, why not and how to fix it.\n\nAccurately Reflecting Production Behavior\nA key part of our solution is insights into production behavior, which necessitates our requests to the endpoint result in traffic to the real service functions that mimics the same pathways the traffic would take if it came from the usual callers.\nIn order to allow for this mimicking, many systems implement an “event” handling, where they convert our request into a call to the real service with properties enabled to log when titles are filtered out of their response and why. Building services that adhere to software best practices, such as Object-Oriented Programming (OOP), the SOLID principles, and modularization, is crucial to have success at this stage. Without these practices, service endpoints may become tightly coupled to business logic, making it challenging and costly to add a new endpoint that seamlessly integrates with the observability solution while following the same production logic.\nA service with modular business logic facilitates the seamless addition of an observability endpoint.\nStandardization\nTo standardize communication between our observability service and the personalization stack’s observability endpoints, we’ve developed a stable proto request/response format. This centralized format, defined and maintained by our team, ensures all endpoints adhere to a consistent protocol. As a result, requests are uniformly handled, and responses are processed cohesively. This standardization enhances adoption within the personalization stack, simplifies the system, and improves understanding and debuggability for engineers.\nThe request schema for the observability endpoint.\nThe Insight Triad API\nTo efficiently understand the health of a title and triage issues quickly, all implementations of the observability endpoint must answer: is the title eligible for this phase of promotion, if not — why is it not eligible, and what can be done to fix any problems.\nThe end-users of this observability system are Launch Managers, whose job it is to ensure smooth title launches. As such, they must be able to quickly see whether there is a problem, what the problem is, and how to solve it. Teams implementing the endpoint must provide as much information as possible so that a non-engineer (Launch Manager) can understand the root cause of the issue and fix any title setup issues as they arise. They must also provide enough information for partner engineers to identify the problem with the underlying service in cases of system-level issues.\nThese requirements are captured in the following protobuf object that defines the endpoint response.\nThe response schema for the observability endpoint.\nHigh level architecture\nWe’ve distilled our comprehensive solution into the following key steps, capturing the essence of our approach:\n\nEstablish observability endpoints across all services within our Personalization and Discovery Stack.\nImplement proactive monitoring for each of these endpoints.\nTrack real-time title impressions from the Netflix UI.\nStore the data in an optimized, highly distributed datastore.\nOffer easy-to-integrate APIs for our dashboard, enabling stakeholders to track specific titles effectively.\n“Time Travel” to validate ahead of time.\nObservability stack high level architecture diagram\nIn the following sections, we will explore each of these concepts and components as illustrated in the diagram above.\nKey Features\nProactive monitoring through scheduled collectors jobs\nOur Title Health microservice runs a scheduled collector job every 30 minutes for most of our personalization stack.\nFor each Netflix row we support (such as Trending Now, Coming Soon, etc.), there is a dedicated collector. These collectors retrieve the relevant list of titles from our catalog that qualify for a specific row by interfacing with our catalog services. These services are informed about the expected subset of titles for each row, for which we are assessing title health.\nOnce a collector retrieves its list of candidate titles, it orchestrates batched calls to assigned row services using the above standardized schema to retrieve all the relevant health information of the titles. Additionally, some collectors will instead poll our kafka queue for impressions data.\nReal-time Title Impressions and Kafka Queue\nIn addition to evaluating title health via our personalization stack services, we also keep an eye on how our recommendation algorithms treat titles by reviewing impressions data. It’s essential that our algorithms treat all titles equitably, for each one has limitless potential.\nThis data is processed from a real-time impressions stream into a Kafka queue, which our title health system regularly polls. Specialized collectors access the Kafka queue every two minutes to retrieve impressions data. This data is then aggregated in minute(s) intervals, calculating the number of impressions titles receive in near-real-time, and presented as an additional health status indicator for stakeholders.\nData storage and distribution through Hollow Feeds\nNetflix Hollow is an Open Source java library and toolset for disseminating in-memory datasets from a single producer to many consumers for high performance read-only access. Given the shape of our data, hollow feeds are an excellent strategy to distribute the data across our service boxes.\nOnce collectors gather health data from partner services in the personalization stack or from our impressions stream, this data is stored in a dedicated Hollow feed for each collector. Hollow offers numerous features that help us monitor the overall health of a Netflix row, including ensuring there are no large-scale issues across a feed publish. It also allows us to track the history of each title by maintaining a per-title data history, calculate differences between previous and current data versions, and roll back to earlier versions if a problematic data change is detected.\nObservability Dashboard using Health Check Engine\nWe maintain several dashboards that utilize our title health service to present the status of titles to stakeholders. These user interfaces access an endpoint in our service, enabling them to request the current status of a title across all supported rows. This endpoint efficiently reads from all available Hollow Feeds to obtain the current status, thanks to Hollow’s in-memory capabilities. The results are returned in a standardized format, ensuring easy support for future UIs.\nAdditionally, we have other endpoints that can summarize the health of a title across subsets of sections to highlight specific member experiences.\nMessage depicting a dashboard request.\nTime Traveling: Catching before launch\n\nTitles launching at Netflix go through several phases of pre-promotion before ultimately launching on our platform. For each of these phases, the first several hours of promotion are critical for the reach and effective personalization of a title, especially once the title has launched. Thus, to prevent issues as titles go through the launch lifecycle, our observability system needs to be capable of simulating traffic ahead of time so that relevant teams can catch and fix issues before they impact members. We call this capability “Time Travel”.\nMany of the metadata and assets involved in title setup have specific timelines for when they become available to members. To determine if a title will be viewable at the start of an experience, we must simulate a request to a partner service as if it were from a future time when those specific metadata or assets are available. This is achieved by including a future timestamp in our request to the observability endpoint, corresponding to when the title is expected to appear for a given experience. The endpoint then communicates with any further downstream services using the context of that future timestamp.\nAn example request with a future timestamp.\nConclusion\nThroughout this series, we’ve explored the journey of enhancing title launch observability at Netflix. In Part 1, we identified the challenges of managing vast content launches and the need for scalable solutions to ensure each title’s success. Part 2 highlighted the strategic approach to navigating ambiguity, introducing “Title Health” as a framework to align teams and prioritize core issues. In this final part, we detailed the sophisticated system strategies and architecture, including observability endpoints, proactive monitoring, and “Time Travel” capabilities; all designed to ensure a thrilling viewing experience.\nBy investing in these innovative solutions, we enhance the discoverability and success of each title, fostering trust with content creators and partners. This journey not only bolsters our operational capabilities but also lays the groundwork for future innovations, ensuring that every story reaches its intended audience and that every member enjoys their favorite titles on Netflix.\nThank you for joining us on this exploration, and stay tuned for more insights and innovations as we continue to entertain the world.\n\nTitle Launch Observability at Netflix Scale was originally published in Netflix TechBlog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Netflix Technology Blog",
        "guid": "https://medium.com/p/8efe69ebd653",
        "categories": [
          "system-design-concepts",
          "netflix",
          "software-engineering",
          "observability"
        ],
        "isoDate": "2025-03-05T01:24:53.000Z"
      }
    ]
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Maria Kosukhina",
        "title": "IntelliJ IDEA 2025.1 Beta Is Out! ",
        "link": "https://blog.jetbrains.com/idea/2025/03/intellij-idea-2025-1/",
        "pubDate": "Wed, 05 Mar 2025 17:16:21 +0000",
        "content:encodedSnippet": "IntelliJ IDEA 2025.1 Beta is now available! This means we’re in the final stretch before the major release, and you can try out all the new features and improvements right now.\nYou can download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap packages for Ubuntu.\nDownload IntelliJ IDEA 2025.1 Beta\nThere are still several updates and enhancements that haven’t been covered in the 2025.1 EAP blog posts, some of which are highlighted below.\nUser experience \nNative OS file dialogs on Windows \nIntelliJ IDEA now defaults to using native Windows file dialogs instead of the custom implementation. This gives you a more familiar experience when opening or saving files. If you prefer the previous behavior, you can restore it in Advanced Settings | User Interface. \n\n\n\n\nVersion control systems \nCommit details in the diff view\nYou can now see commit details directly in the diff view. The diff dialog now displays the commit message, author, date and time, and full commit hash, giving you a clearer view of a file’s history and helping you understand modifications faster.\n\n\n\n\nOption to run tools for pre-commit checks \nYou can now launch any tool to perform a pre-commit check alongside inspections and formatting. Custom checks can be configured as run configurations in the Run Configuration dialog. This helps you catch potential issues early and ensures your code meets project standards before it’s committed.\n\n\n\n\nAutomatic fetch when adding or modifying a Git remote\nIntelliJ IDEA now automatically fetches changes when you add or update a Git remote, ensuring you always have the latest branch list and commit history without needing to fetch them manually. Newly fetched branches will immediately appear in the Git branch tree. You’ll be able to start working with them right away, and your repository will always be up to date.\n\n\n\n\nOption to disable running Git commit hooks\nA new option allows you to instruct the IDE not to run Git commit hooks. Previously, Git hooks would execute automatically during commit operations, which might not have been desirable in all situations. With this update, you can now configure the IDE to skip these hooks, giving you more control over your commit process.\n\n\n\n\nDiscontinuation of the modal commit interface\nThe modal commit interface has been deactivated in IntelliJ IDEA. A few key reasons are behind this change: \nPerformance and overall experience – The modal commit option introduces lag and performance issues, adding to our technical debt in ways we can’t effectively address.\nRemote development – The current implementation of modal commits limits our ability to focus on a seamless remote development experience, which is becoming essential.\nNon-modal commit – We introduced a non-modal commit interface a few years ago, and it’s now the default for the vast majority of users. We know it’s not perfect, but we’re continually improving it. With the existing customization options, we believe it can be a solid option.\nWhile the non-modal commit workflow will now be the only built-in option, the modal commit experience will still be available through a separate plugin. The plugin won’t be actively maintained long-term, but we’ll review community pull requests to support it if there’s continued interest. If you’re looking to customize your commit workflow to make it similar to the modal commit one, we’ve gathered and documented several useful configuration options available in the IDE.\n\n\n\n\nFrameworks and technologies \nGit-ready Ubuntu image for easier Dev Container setup\nSetting up Dev Containers is now more seamless. When you clone a repository without a Dev Container configuration, the IDE now offers a wizard with an optimized Ubuntu-based container that has Git pre-installed. This update eliminates common issues like Git being missing, reducing setup time so you can focus on coding.\n\n\n\n\nEnhanced user experience with generated HTTP requests \nIntelliJ IDEA now opens HTTP requests generated from code in the right editor split, which means you no longer need to review them in a separate tab that was automatically opened.\n\n\n\n\nThat’s it for now. Stay tuned for more updates coming soon! For a complete list of changes in this build, check out the release notes.\nNow is the perfect time to explore the new features and share your feedback before the final release. Try out the IntelliJ IDEA 2025.1 Beta and let us know your thoughts in the comments or on X. If you run into any issues, please report them in our issue tracker.\nHappy developing!",
        "dc:creator": "Maria Kosukhina",
        "content": "IntelliJ IDEA 2025.1 Beta is now available! This means we’re in the final stretch before the major release, and you can try out all the new features and improvements right now. You can download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap [&#8230;]",
        "contentSnippet": "IntelliJ IDEA 2025.1 Beta is now available! This means we’re in the final stretch before the major release, and you can try out all the new features and improvements right now. You can download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=551057",
        "categories": [
          "eap",
          "2025-1-eap",
          "intellij-idea-2025-1",
          "intellij-idea-2025-1-eap"
        ],
        "isoDate": "2025-03-05T17:16:21.000Z"
      },
      {
        "creator": "Rachel Appel",
        "title": "dotInsights | March 2025",
        "link": "https://blog.jetbrains.com/dotnet/2025/03/05/dotinsights-march-2025/",
        "pubDate": "Wed, 05 Mar 2025 13:45:36 +0000",
        "content:encodedSnippet": "Did you know? The [InternalsVisibleTo] attribute in .NET is a powerful feature that allows an assembly to expose its internal members (normally only accessible within the same assembly) to another specified assembly. This is typically used in scenarios like unit testing or multi-assembly projects where tight integration between assemblies is needed.\n\n\n\n\nWelcome to dotInsights by JetBrains! This newsletter is the home for recent .NET and software development related information.\n🔗 Links\nHere’s the latest from the developer community.\nGetting a Development team Onboard with Technical Coaching – Emily Bache\nSplash Screen in .NET MAUI – Leomaris Reyes\nMassTransit with Azure Service Bus – Error management – Irina Scurtu\n2code ^ !2code [S2025E01] Incremental Source Generators – FlashOWare with Stefan Pölz & Merely Eva\nHow to harmonize Agile sprints with product roadmaps – Amanda Rueda\nDon’t Use WhenAll in .NET! Use WaitAny Instead | Code Cop #027 – Nick Chapsas\n5 Mistakes That Make Your Code Unmaintainable – CodeOpinion by Derek Comartin\nHow to Protect Your API Resources – Gui Ferreira\nHandling MassTransit errors with the Particular Service Platform – Chris Patterson\nTailwind v4 with Blazor – It just got easier – Steven Giesel\nMigrate from MSTest to xUnit using a Roslyn analyzer – Gérald Barré\nNumeric sorting in .NET– Anthony Simmon\nHybrid Caching in ASP.NET Core – Bozo Spoljaric\nBoost Your .NET Projects: Unleashing the Power of Spargine’s InMemoryCache – David McCarter\nC# Dictionary: How to Create One and Best Practices – Stackify Team\nSoftware development is… – Jessica Kerr\nBuild an AI-Powered Smart Appointment Booking App Using WinUI Scheduler – Jeyasri Murugan\nKill the Bloat: The Controversial Clash Between SPAs, Server-Side Rendering, and the Power of Simplicity – Chris Woodruff\nBlazor Basics: Lazy Load Assemblies to Boost the Performance of Blazor WebAssembly – Claudio Bernasconi\nStrongly-Typed Markdown for ASP.NET Core Content Apps – Khalid Abuhakmeh\nEngineering Culture, Trust, and Accountability – Emily Dresner\nWhat are Custom Integrations in .NET Aspire? – Kalle Marjokorpi\nWhy is gRPC so much faster than a JSON-based REST API? – Benjamin Cane\nImplement Phone verification, 2FA using ASP.NET Core Identity – Damien Bowden\nExploring the Forwarded Headers Middleware in ASP.NET Core – Tore Nestenius\n🔦 From our .NET Guide\nEach month we feature tutorials or tips from our .NET Guide.\n\n\n\n            \n.NET Localization\nIn this short series, we’ll explore localization in .NET. For those unfamiliar with the concept, localization is the process of matching an application’s language and visuals to a specific culture. We’ll see just how easy it is to take an existing .NET application and localize it. \nby Khalid Abuhakmeh\n.NET Localization\n                                                    \n☕ Coffee Break\nTake a break to catch some fun social posts.\n\n\n\n\n\n\n🗞️ JetBrains News\nWhat’s going on at JetBrains? Check it out here:\nAnother Set of Bug-Fix Updates for ReSharper and Rider 2024.3 Is Here\nRider 2025.1 EAP 5: Roslyn Syntax Tree Visualizer, Unity Profiler Integration, and More\nWebinar – Uno Platform & Hot Design for Rider\n\n\n\n\n✉️ Comments? Questions? Send us an  email. \nSubscribe to dotInsights",
        "dc:creator": "Rachel Appel",
        "content": "Did you know?&#160;The [InternalsVisibleTo] attribute in .NET is a powerful feature that allows an assembly to expose its internal members (normally only accessible within the same assembly) to another specified assembly. This is typically used in scenarios like unit testing or multi-assembly projects where tight integration between assemblies is needed. Welcome to dotInsights by JetBrains! [&#8230;]",
        "contentSnippet": "Did you know? The [InternalsVisibleTo] attribute in .NET is a powerful feature that allows an assembly to expose its internal members (normally only accessible within the same assembly) to another specified assembly. This is typically used in scenarios like unit testing or multi-assembly projects where tight integration between assemblies is needed. Welcome to dotInsights by JetBrains! […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=550837",
        "categories": [
          "net-tools",
          "dotinsights"
        ],
        "isoDate": "2025-03-05T13:45:36.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "On the Horizon: Top Three Updates Coming Soon From Qodana",
        "link": "https://blog.jetbrains.com/qodana/2025/03/qodana-roadmap-2025-q1/",
        "pubDate": "Tue, 04 Mar 2025 14:05:56 +0000",
        "content:encodedSnippet": "As we head deeper into Q1 of 2025, some exciting new developments are underway. From expanding Qodana’s integrations with new IDEs to consolidating organizational data, many more promising new projects are in the works to help increase code quality in your team. Let’s take a look at the top three!\nAn organization-wide dashboard\nInsights into all your development projects\nWe’ll introduce a new insights dashboard to Qodana, offering a high-level overview of your organization’s code quality. It’s perfect for team leads and project managers to track trends and spot vulnerabilities and will help you get a sense of your organization’s overall code health. \n✓ View behavioral trends and usage patterns.\n✓ Identify projects that need extra work.\n✓ Spot critical issues and vulnerabilities.\nThis new multiproject dashboard will enable your team to filter by the total number of problems, critical problems, and code coverage level. It will also give you an indication of where Qodana is not set up for checks or has been inactive over time. You’ll also be able to check the state of third-party licenses and much more. \nBook Dashboard Demo\nLightweight, self-hosted solution\nData control, compliance, and autonomy\nWe’re about to release Qodana Self-Hosted Lite, which offers teams like yours a secure, lightweight solution for implementing static code analysis and other code quality and security checks. This works well for most software development teams, especially in regulated industries, that want control over their data while they work toward technical excellence. \n✓ Maintain control of your organization’s data.\n✓ Scale up codebase checks easily. \n✓ Configure Qodana to catch issues you deem most important.\nKeep an eye on our social media for details, or reach out to Kai Schmithusen if you’re interested in a demo. \nGet Demo\nNew Visual Studio software quality plugin\nJetBrains code quality for everyone on the team\nYou will soon be able to download the Qodana Code Quality Plugin for Visual Studio via your ReSharper installer to bring Qodana Cloud or self-hosted Qodana projects into Visual Studio. Identify code issues, detect bugs and vulnerabilities, run the analyses directly in your pipeline, and then view issues in the IDE where you work for better contextual updates and learning. You also have the option to download the solution as a standalone plugin. \nWant to have a say in what Qodana focuses on?\nWe’re building Qodana with a user-first approach, and while we’ve already got a lot in the pipeline, we want to give you the opportunity to have your say! Vote on issues in Qodana’s YouTrack, and you could impact what goes into development as we go. You can also reach out to our team with specific requests. \nWhat to do next\nSubscribe to Qodana news and Qodana roadmap updates (on the right).\nJoin our communities on X, LinkedIn, GitHub, and Reddit. \nFind out more about Qodana’s top features. \nGet Qodana",
        "dc:creator": "Kerry Beetge",
        "content": "As we head deeper into Q1 of 2025, some exciting new developments are underway. From expanding Qodana’s integrations with new IDEs to consolidating organizational data, many more promising new projects are in the works to help increase code quality in your team. Let’s take a look at the top three! An organization-wide dashboard Insights into [&#8230;]",
        "contentSnippet": "As we head deeper into Q1 of 2025, some exciting new developments are underway. From expanding Qodana’s integrations with new IDEs to consolidating organizational data, many more promising new projects are in the works to help increase code quality in your team. Let’s take a look at the top three! An organization-wide dashboard Insights into […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=550980",
        "categories": [
          "qodana",
          "code-quality-dashboard",
          "roadmap",
          "roadmap2025",
          "visual-studio-plugin"
        ],
        "isoDate": "2025-03-04T14:05:56.000Z"
      },
      {
        "creator": "Vaclav Pech",
        "title": "MPS 2024.1.2 Is Now Available",
        "link": "https://blog.jetbrains.com/mps/2025/03/mps-2024-1-2-is-out/",
        "pubDate": "Tue, 04 Mar 2025 07:38:22 +0000",
        "content:encodedSnippet": "We’ve just released an update to MPS 2024.1, which corrects several problems, mainly in the UI, indexing, and migrations.\nDOWNLOAD MPS 2024.1.2\nSee the full list of fixed issues here.\nhere.\nYour JetBrains MPS team",
        "dc:creator": "Vaclav Pech",
        "content": "We’ve just released an update to MPS 2024.1, which corrects several problems, mainly in the UI, indexing, and migrations. DOWNLOAD MPS 2024.1.2 See the full list of fixed issues here. Download this latest version here. Your JetBrains MPS team",
        "contentSnippet": "We’ve just released an update to MPS 2024.1, which corrects several problems, mainly in the UI, indexing, and migrations. DOWNLOAD MPS 2024.1.2 See the full list of fixed issues here. Download this latest version here. Your JetBrains MPS team",
        "guid": "https://blog.jetbrains.com/?post_type=mps&p=550470",
        "categories": [
          "releases",
          "release"
        ],
        "isoDate": "2025-03-04T07:38:22.000Z"
      },
      {
        "creator": "Anna Rovinskaia",
        "title": "New Livestream – Gatherers: The API Your Stream Was Missing",
        "link": "https://blog.jetbrains.com/idea/2025/03/new-livestream-gatherers-the-api-your-stream-was-missing/",
        "pubDate": "Mon, 03 Mar 2025 08:55:48 +0000",
        "content:encodedSnippet": "Join us for a new IntelliJ IDEA Livestream episode with José Paumard, where we’ll explore the Stream Gatherer API in JDK 24 and how to use it effectively in your applications. \nDate: March 13, 2025\nTime: 3:00–4:00 pm UTC\nREGISTER FOR THE LIVESTREAM\n\n\n\n\nSession abstract\nJDK 24 is bringing a new enhancement to the Stream API, called the Stream Gatherer API. Stream Gatherers are a great addition to the Stream API, bringing new possibilities and helping to solve complex problems. This presentation shows you how Gatherers work on live examples, how you can create them, and what use cases they are most suitable for. Understanding Gatherers requires a good understanding of the Stream API. At the end of this presentation, you will be able to create your own Gatherers and understand when you should use them in your application.\n\n\n\n\nAsking questions\nJosé will try to answer all of your questions during the session. If we run out of time, we’ll publish answers to any remaining questions in a follow-up blog post.\nYour speaker and host\nSpeaker\nJosé Paumard\nJosé works as Java Developer Advocate at Oracle and is a Java Champion alumni member and JavaOne Rockstar. He has a PhD in applied mathematics and computer science and was an assistant professor at the University Sorbonne Paris Nord for 25 years. A member of the Paris Java User Group, he has been a co-organizer of the Devoxx France conference and is a disorganizer of JChateau – an unconference held in the Châteaux of the Loire Valley. Paumard works on the dev.java documentation website, hosts the monthly YouTube video podcast JEP Café, and is a Pluralsight author in the Java space.\nHost\nMala Gupta\n\nA Java Champion and JUG leader, Mala has authored multiple books with Manning, Packt, and O’Reilly Publications. She has more than two decades of experience in the software industry and is a regular speaker at industry conferences around the world. She is a vocal supporter of Java certification as a path to career advancement.\n\nHappy developing!",
        "dc:creator": "Anna Rovinskaia",
        "content": "Join us for a new IntelliJ IDEA Livestream episode with José Paumard, where we’ll explore the Stream Gatherer API in JDK 24 and how to use it effectively in your applications. Date: March 13, 2025 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract JDK 24 is bringing a new enhancement to the Stream [&#8230;]",
        "contentSnippet": "Join us for a new IntelliJ IDEA Livestream episode with José Paumard, where we’ll explore the Stream Gatherer API in JDK 24 and how to use it effectively in your applications. Date: March 13, 2025 Time: 3:00–4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract JDK 24 is bringing a new enhancement to the Stream […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=548958",
        "categories": [
          "livestreams",
          "intellij-idea",
          "intellijidealivestream",
          "livestream",
          "webinars"
        ],
        "isoDate": "2025-03-03T08:55:48.000Z"
      },
      {
        "creator": "Alena Gupaisova",
        "title": "Admission for the Computer Science and AI BSc Is Open",
        "link": "https://blog.jetbrains.com/education/2025/03/03/admission-for-the-computer-science-and-ai-bsc-is-open/",
        "pubDate": "Mon, 03 Mar 2025 08:17:10 +0000",
        "content:encodedSnippet": "Admission to the Computer Science and Artificial Intelligence bachelor’s program at Neapolis University Pafos is open! \n\n\n\n\nThe JetBrains Foundation supports this bachelor’s program and offers 15 fully funded scholarships for the most talented applicants. The scholarships cover tuition, accommodation, medical insurance, visa fees, and spending money (€300 per month).\nMany students who graduate from bachelor’s and master’s programs developed in collaboration with the JetBrains Foundation work at top IT companies like Meta, Google, and JetBrains, so don’t miss your chance to join the team!\nFind out more about the program here. \n2025 key admission dates\nFirst admission round:\nApplication deadline – April 23\nEntrance test – April 27\n\n\n\n\nSecond admission round:\nApplication deadline – June 11\nEntrance test – June 15\nUpcoming events\nJoin our next livestream with the program team on March 11, 2025. In it, our experts will share details about the curriculum and admission process. \nRegister for Livestream\n                                                    \n\n\n\n\nIf you’re in Cyprus, attend our Open Day on March 15 to meet the program’s professors, speak with current students, and tour the campus. \nMarch 15, 12:00 – 03:00 pm\nWhere: Neapolis University Pafos, 2 Danais Avenue, Paphos 8042\nLearn more about the Open Day here.\nRegister for Open Day\n                                                    \nContact us\nDo you have any questions? Drop us a line via Telegram chat or nup@jetbrains.com.\nDon’t miss this opportunity to launch your career in one of today’s most dynamic and in-demand fields. Apply now and take the first step toward your future in Computer Science and AI!",
        "dc:creator": "Alena Gupaisova",
        "content": "Admission to the Computer Science and Artificial Intelligence bachelor&#8217;s program at Neapolis University Pafos is open!&#160; The JetBrains Foundation supports this bachelor&#8217;s program and offers 15 fully funded scholarships for the most talented applicants. The scholarships cover tuition, accommodation, medical insurance, visa fees, and spending money (€300 per month). Many students who graduate from bachelor’s [&#8230;]",
        "contentSnippet": "Admission to the Computer Science and Artificial Intelligence bachelor’s program at Neapolis University Pafos is open!  The JetBrains Foundation supports this bachelor’s program and offers 15 fully funded scholarships for the most talented applicants. The scholarships cover tuition, accommodation, medical insurance, visa fees, and spending money (€300 per month). Many students who graduate from bachelor’s […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=550218",
        "categories": [
          "offline-programs",
          "csai"
        ],
        "isoDate": "2025-03-03T08:17:10.000Z"
      },
      {
        "creator": "Vaclav Pech",
        "title": "A New MPS 2024.3.1 Bugfix Release Is Now Available",
        "link": "https://blog.jetbrains.com/mps/2025/03/mps-2024-3-1-has-been-released/",
        "pubDate": "Mon, 03 Mar 2025 06:26:57 +0000",
        "content:encodedSnippet": "We’ve released an update for MPS 2024.3 that brings numerous fixes. Check them out and see what you think.\nDOWNLOAD MPS 2024.3.1\nSee the full list of fixed issues here.\nDownload MPS 2024.3.1 here.\nYour JetBrains MPS team",
        "dc:creator": "Vaclav Pech",
        "content": "We’ve released an update for MPS 2024.3 that brings numerous fixes. Check them out and see what you think. DOWNLOAD MPS 2024.3.1 See the full list of fixed issues here. Download MPS 2024.3.1 here. Your JetBrains MPS team",
        "contentSnippet": "We’ve released an update for MPS 2024.3 that brings numerous fixes. Check them out and see what you think. DOWNLOAD MPS 2024.3.1 See the full list of fixed issues here. Download MPS 2024.3.1 here. Your JetBrains MPS team",
        "guid": "https://blog.jetbrains.com/?post_type=mps&p=550463",
        "categories": [
          "releases"
        ],
        "isoDate": "2025-03-03T06:26:57.000Z"
      },
      {
        "creator": "Maria Sharobaeva",
        "title": "JetBrains Academy – February Digest",
        "link": "https://blog.jetbrains.com/education/2025/02/28/jetbrains-academy-december-february/",
        "pubDate": "Fri, 28 Feb 2025 20:10:59 +0000",
        "content:encodedSnippet": "Here’s a roundup of all the good stuff from February  – AI skills to develop, scholarship opportunities, the latest programming and AI trends, and, as a little extra treat, a discount on a Hyperskill Premium subscription!\nAdvance in AI skills\nMaster AI: Build Game Players Using AlphaZero\nWant to upskill in AI? In just 60 hours, gain hands-on experience building AI models from scratch directly in your IDE.\nDive in\n                                                    \nAI Programming for Python Developers\nThis course will help you become proficient at designing effective prompts and leveraging AI tools to write code faster, fix bugs more quickly, and build better software.\nStart learning\n                                                    \nScholarship opportunities\nStudy Computer Science in Germany\nWant to study in Germany? Dive into software development, data analysis, and machine learning with expert-led courses. Apply for the JetBrains Foundation Scholarship at Constructor University by March 17! \nDiscover more\n                                                    \nStudy Computer Science in Cyprus\nIn partnership with JetBrains Academy, Neapolis University Pafos offers 15 fully funded scholarships for its Computer Science & AI bachelor’s program. Don’t miss the chance to apply!\n Find out more\n                                                    \nTech insights\nIs Programming Actually Hard to Learn?\nWatch our latest video exploring whether programming is truly difficult to learn or if that’s just a myth. Share your thoughts in the comments!\nWatch now\n                                                    \nThe 2025 State of AI Development\nFind out what’s in store for AI in 2025 with insights from out in-depth report.\nRead now\n                                                    \nDiscounts\nSave on Hyperskill Premium\nGet a discount on Hyperskill Premium and enjoy 6 months of hands-on learning. Build your portfolio with real projects and earn certifications!\nGet discount",
        "dc:creator": "Maria Sharobaeva",
        "content": "Here’s a roundup of all the good stuff from February&#160; – AI skills to develop, scholarship opportunities, the latest programming and AI trends, and, as a little extra treat, a discount on a Hyperskill Premium subscription!",
        "contentSnippet": "Here’s a roundup of all the good stuff from February  – AI skills to develop, scholarship opportunities, the latest programming and AI trends, and, as a little extra treat, a discount on a Hyperskill Premium subscription!",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=550279",
        "categories": [
          "digest",
          "jetbrains-academy",
          "newsletter"
        ],
        "isoDate": "2025-02-28T20:10:59.000Z"
      },
      {
        "creator": "Maxim Kolmakov",
        "title": "Integration Tests for Plugin Developers: UI Testing",
        "link": "https://blog.jetbrains.com/platform/2025/02/integration-tests-for-plugin-developers-ui-testing/",
        "pubDate": "Fri, 28 Feb 2025 18:30:11 +0000",
        "content:encodedSnippet": "In our previous blog post, we created a basic integration test that: \nInstalled a plugin in the IDE.\nOpened a project.\nWaited for background processes to complete.\nPerformed an exit.\nNow, let’s explore how to interact with UI elements in our tests.\nUI hierarchy\nIntelliJ-based IDEs primarily use Swing and AWT for their user interface, while JCEF is used in specific cases like Markdown rendering. This UI framework organizes elements in a parent-child hierarchy, similar to HTML’s DOM structure:\nTop-level containers (IDE frame and dialogs).\nNested containers.\nIndividual components (buttons, text fields, and lists).\nEvery UI element (except top-level containers) must have a parent container, creating a clear hierarchical structure. \nThe Driver framework provides a Kotlin DSL that mirrors this hierarchy. Here’s an example:\nideFrame {\n     invokeAction(\"SearchEverywhere\")\n     searchEverywherePopup {\n          actionButtonByXpath(xQuery { byAccessibleName(\"Preview\")}).click()\n     }\n}\nThis code demonstrates hierarchical navigation:\nFind the main IDE window (ideFrame).\nTrigger the Search Everywhere action (invokeAction(\"SearchEverywhere\")).\nLocate the Search Everywhere popup (searchEverywherePopup).\nFind and click the Preview button within the popup (actionButtonByXpath(xQuery { byAccessibleName(\"Preview\")}).click()).\nYou could write more concise code:\nideFrame { \n     actionButtonByXpath(xQuery { byAccessibleName(\"Preview\")}).click() \n}\nBut the shorter code has two significant drawbacks:\nReduced precision: The code searches for the Preview button throughout the entire IDE frame. It might find unintended matches in the project explorer, tool windows, or other UI elements. This can make your tests unreliable and prone to breaking when the UI content changes.\nDecreased readability: While the code is more concise, it doesn’t communicate the intended navigation path. The longer version makes it clear exactly where we expect to find the Preview button, making the code more maintainable and easier to debug.\nSo, being explicit about the component hierarchy helps create more robust and maintainable UI automation code, even though it requires writing more code.\nSearching components\nWhile the Driver framework provides many pre-built components (like ideFrame, codeEditor, button, tree, etc.), you’ll sometimes need to locate custom elements. Let’s explore how to find any UI component in your tests.\nFirst, let’s modify our test to pause the IDE so we can examine its UI structure:\n@Test\nfun simpleTest() {\n   Starter.newContext(\n       \"testExample\",\n       TestCase(\n           IdeProductProvider.IC,\n           GitHubProject.fromGithub(branchName = \"master\",\n               repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"))\n           .withVersion(\"2024.3\")\n   ).apply {\n       val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n       PluginConfigurator(this).installPluginFromPath(Path(pathToPlugin))\n   }.runIdeWithDriver().useDriverAndCloseIde {\n       Thread.sleep(30.minutes.inWholeMilliseconds)\n   }\n}\nWhen you run this test, look for this line in the logs: http://localhost:63343/api/remote-driver/.\nOpening this URL reveals an HTML representation of the IDE’s Swing component tree:\n\n\n\n\nUsing Developer Tools in the browser, you can inspect detailed component attributes. Here’s an example component:\n<div accessiblename=\"Current File\" actionmap=\"javax.swing.ActionMap@47d64fb9\" \nactionmap_created=\"8\"\nasstring=\"com.intellij.execution.ui.RedesignedRunConfigurationSelector$createCustomComponent$1[,12,0,118x40,alignmentX=0.0,alignmentY=0.0,border=com.intellij.openapi.actionSystem.impl.ActionToolbarImpl$ActionButtonBorder@19487628,flags=384,maximumSize=,minimumSize=,preferredSize=]\"\nclass=\"ActionButtonWithText\" classhierarchy=\"com.intellij.openapi.actionSystem.impl.ActionButtonWithText ->\ncom.intellij.openapi.actionSystem.impl.ActionButton -> javax.swing.JComponent\" enabled=\"true\"\nhashcode=\"2064836191\" hide_dropdown_icon=\"HIDE_DROPDOWN_ICON\" icon_text_space=\"2\"\njavaclass=\"com.intellij.execution.ui.RedesignedRunConfigurationSelector$createCustomComponent$1\" myaction=\"Select Run/Debug Configuration (null)\" myhorizontaltextalignment=\"2\" myhorizontaltextposition=\"11\" mynoiconsinpopup=\"false\" rdtarget=\"DEFAULT\" refid=\"DEFAULT_5\"\ntext_arrow_space=\"2\"\ntool_tip_text_key=\"ToolTipText\" visible=\"true\" visible_text=\"Current File\" visible_text_keys=\"\"><div>\nThe element corresponds to the following button:\n\n\n\n\nSimilar to web testing frameworks like Selenium, we use XPath to locate components. The Driver framework provides a simple XPath builder. Here are several ways to find the same component:\nxQuery { byVisibleText(\"Current File\") }\nxQuery { byAccessibleName(\"Current File\") }\nxQuery { byType(\"com.intellij.execution.ui.RedesignedRunConfigurationSelector\\$createCustomComponent$1\") }\nFor reliable component identification, prioritize these attributes: accessiblename, visible_text, icon, javaclass. You can combine multiple attributes for a more precise selection.\nInteraction with components \nOnce you’ve located a component, you’ll want to interact with it or verify its properties. So, let’s now explore how to perform various UI interactions. \nTo click the Current File button we found earlier, we need to enter:\nx(xQuery { byVisibleText(\"Current File\") }).click()\nThe x() call creates a lazy reference to the component. It means that the XPath query isn’t executed immediately and component lookup happens only when an action (like click()) is invoked. \nHere’s our test that incorporates UI interaction:\nfun simpleTestForCustomUIElement() {\n   Starter.newContext(\n       \"testExample\",\n       TestCase(\n           IdeProductProvider.IC,\n           GitHubProject.fromGithub(branchName = \"master\",\n               repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"))\n           .withVersion(\"2024.3\")\n   ).apply {\n       val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n       PluginConfigurator(this).installPluginFromPath(Path(pathToPlugin))\n   }.runIdeWithDriver().useDriverAndCloseIde {\n       waitForIndicators(1.minutes)\n       ideFrame {\n           x(xQuery { byVisibleText(\"Current File\") }).click()\n       }\n   }\n}\nBeyond mouse clicks, you can simulate keyboard input and shortcuts:\nkeyboard {\n   enterText(\"Sample text\")\n   enter()\n   hotKey(if (SystemInfo.isMac) KeyEvent.VK_META else KeyEvent.VK_CONTROL, KeyEvent.VK_A)\n   backspace()\n}\nNote: On macOS, the interaction via java.awt.Robot requires special permissions. IntelliJ IDEA should be granted the necessary permissions via the Accessibility page, which can be found under System Settings | Privacy & Security. \nAsserting properties and putting it all together\nLet’s combine everything we’ve learned and add property assertions to create a complete UI test:\n@Test\nfun simpleTestForCustomUIElement() {\n   Starter.newContext(\n       \"testExample\",\n       TestCase(\n           IdeProductProvider.IC,\n           GitHubProject.fromGithub(branchName = \"master\",\n               repoRelativeUrl = \"JetBrains/ij-perf-report-aggregator\"))\n           .withVersion(\"2024.3\")\n   ).apply {\n       val pathToPlugin = System.getProperty(\"path.to.build.plugin\")\n       PluginConfigurator(this).installPluginFromPath(Path(pathToPlugin))\n   }.runIdeWithDriver().useDriverAndCloseIde {\n       waitForIndicators(1.minutes)\n       ideFrame {\n           x(xQuery { byVisibleText(\"Current File\") }).click()\n           val configurations = popup().jBlist(xQuery { contains(byVisibleText(\"Edit Configurations\")) })\n           configurations.shouldBe(\"Configuration list is not present\", present)\n           Assertions.assertTrue(configurations.rawItems.contains(\"backup-data\"),\n               \"Configurations list doesn't contain 'backup-data' item: ${configurations.rawItems}\")\n       }\n   }\n}\nLet’s break down each step:\nOpening the popup\n\nClick the Current File button.\nPopup menu appears.\nFinding the list \n\nUse popup() to locate the popup with a configuration list. Note: This works without any XPath because at the moment of the call, there are no other popups shown on the UI.\nFind the list containing the text Edit Configurations by using the following query:\njBlist(xQuery { contains(byVisibleText(\"Edit Configurations\")) }).\nXQuery searches for the list component that contains the visible text \"Edit Configurations\".\nVerifying list presence\n\nUse shouldBe(<message>, present) to ensure the list exists.\n\nThis is important because popup().jBlist creates a lazy reference without actually checking the results.\nThe actual check happens when shouldBe calls the present method.\nThe shouldBe method waits 15 seconds until the condition is met and can be used to assert various properties.\nChecking list contents\n\nAccess the rawItems property to get all list items.\nVerify the 'backup-data' exists in the list.\nInclude full list content in the error message for debugging.\nYou can find the full source code here.\nWhat’s next?\nYou now have the foundation to create UI tests that can interact with IDE components, verify user scenarios, and catch UI-related regressions. But this is just the beginning of your testing journey!\nStay tuned for upcoming blog posts in this series, where we’ll cover:\nAPI Testing: working with plugin APIs effectively via JMX calls.\nGitHub Actions: setting up continuous integration.\nCommon Pitfalls: tips and tricks for stable UI tests.",
        "dc:creator": "Maxim Kolmakov",
        "content": "In our previous blog post, we created a basic integration test that:&#160; Now, let&#8217;s explore how to interact with UI elements in our tests. UI hierarchy IntelliJ-based IDEs primarily use Swing and AWT for their user interface, while JCEF is used in specific cases like Markdown rendering. This UI framework organizes elements in a parent-child [&#8230;]",
        "contentSnippet": "In our previous blog post, we created a basic integration test that:  Now, let’s explore how to interact with UI elements in our tests. UI hierarchy IntelliJ-based IDEs primarily use Swing and AWT for their user interface, while JCEF is used in specific cases like Markdown rendering. This UI framework organizes elements in a parent-child […]",
        "guid": "https://blog.jetbrains.com/?post_type=platform&p=549400",
        "categories": [
          "plugin-development",
          "marketplace",
          "plugins",
          "testing"
        ],
        "isoDate": "2025-02-28T18:30:11.000Z"
      },
      {
        "creator": "Ksenia Shneyveys",
        "title": "Apply for Google Summer of Code 2025 and Contribute to the Kotlin Ecosystem",
        "link": "https://blog.jetbrains.com/kotlin/2025/02/google-summer-of-code-2025-kotlin/",
        "pubDate": "Fri, 28 Feb 2025 13:27:00 +0000",
        "content:encodedSnippet": "The Kotlin Foundation is once again participating in Google Summer of Code (GSoC), offering contributors an opportunity to work on open-source projects that shape the Kotlin ecosystem. This year, the program is expanding to include even more projects from Kotlin Foundation member companies like JetBrains, Google, Uber, and Gradle, providing contributors with mentorship from some of the top engineers in the industry.\nWhy join GSoC with Kotlin?\nGSoC is designed to introduce new contributors to open-source software development. By participating, you will:\nContribute to impactful open-source initiatives in the Kotlin ecosystem.\nGain hands-on experience by working on real-world Kotlin projects.\nReceive mentorship from experienced engineers.\nEarn a stipend and strengthen your technical skills.\nJoin Kotlin #gsoc Slack channel\nProject ideas\nThis year’s program brings an even broader range of projects across build systems, developer tooling, and multiplatform support. Contributors will have the chance to work on projects from the following key focus areas:\nBuild systems and tooling\nExpand Kotlin’s integration with Bazel, Gradle, and Maven, improving dependency management, and enhancing the developer experience with better build performance and configuration caching.\nMultiplatform development\nStrengthen Kotlin Multiplatform by adding support for key services, refining dependency resolution, and improving interoperability across Android, iOS, and JVM.\nEditor and IDE support\nDevelop a Kotlin Language Server Protocol (LSP) for better code intelligence across editors, refining IntelliJ’s Gradle plugin, and improving static analysis tools.\nCode quality and migration tools\nEnhance OpenRewrite recipes for structured Kotlin refactoring, improving reporting for Kotlin code quality tools, and optimizing Gradle’s Problems API integration.\nView all projects\nHow to apply\nExplore project ideas and find one that matches your interests.\nJoin the Kotlin GSoC Slack channel and ask mentors your questions to refine your proposal.\nReview the GSoC application guidelines and Kotlin contribution guidelines.\nSubmit your application between March 24 and April 8, including a code sample and a paragraph about why you are interested in the project.\nJoin Kotlin #gsoc Slack channel\nIf you are passionate about open-source development, this is your chance to contribute to the Kotlin ecosystem and tooling that developers rely on every day. We look forward to your proposals!",
        "dc:creator": "Ksenia Shneyveys",
        "content": "The Kotlin Foundation is once again participating in Google Summer of Code (GSoC), offering contributors an opportunity to work on open-source projects that shape the Kotlin ecosystem. This year, the program is expanding to include even more projects from Kotlin Foundation member companies like JetBrains, Google, Uber, and Gradle, providing contributors with mentorship from some [&#8230;]",
        "contentSnippet": "The Kotlin Foundation is once again participating in Google Summer of Code (GSoC), offering contributors an opportunity to work on open-source projects that shape the Kotlin ecosystem. This year, the program is expanding to include even more projects from Kotlin Foundation member companies like JetBrains, Google, Uber, and Gradle, providing contributors with mentorship from some […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=550185",
        "categories": [
          "news",
          "education",
          "gsoc",
          "internship"
        ],
        "isoDate": "2025-02-28T13:27:00.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "Another Set of Bug-Fix Updates for ReSharper and Rider 2024.3 Is Here",
        "link": "https://blog.jetbrains.com/dotnet/2025/02/28/resharper-rider-2024-3-6/",
        "pubDate": "Fri, 28 Feb 2025 10:05:24 +0000",
        "content:encodedSnippet": "The new bug fixes for the 2024.3 release are available to download. \nReSharper 2024.3.6 \nThis build contains a fix for an issue where xUnit v3 tests resulted in Inconclusive: Test has not run when executed in under .NET Framework. [RSRP-499789]\nDownload ReSharper 2024.3.6\n                                                    \nRider 2024.3.6\nNotable fixes\nWe’ve resolved an issue where debugging sessions required several attempts to start. [RIDER-122725]\nWe’ve fixed macOS freezes related to Metal rendering in an updated JetBrains Runtime, addressing an issue with MTLRenderQueue.flushNow. A workaround is also available for older JBR builds — see JBR-5497 for details.\nWe’ve fixed a bug where duplicate items would appear in the Go to Symbol search results in Rider. [RIDER-121674]\nWe’ve fixed a problem with xUnit v3 tests resulting in Inconclusive: Test has not run when executed in Rider’s Test Explorer under .NET Framework. [RSRP-499789]\nWe’ve resolved an issue where Qodana would hang indefinitely when analyzing Unreal Engine projects in Rider. [QD-11011]\nFor the full list of changes, please see our issue tracker.\nDownload Rider 2024.3.6",
        "dc:creator": "Sasha Ivanova",
        "content": "The new bug fixes for the 2024.3 release are available to download.&#160; ReSharper 2024.3.6&#160; This build contains a fix for an issue where xUnit v3 tests resulted in Inconclusive: Test has not run when executed in under .NET Framework. [RSRP-499789] Rider 2024.3.6 Notable fixes For the full list of changes, please see our issue tracker.",
        "contentSnippet": "The new bug fixes for the 2024.3 release are available to download.  ReSharper 2024.3.6  This build contains a fix for an issue where xUnit v3 tests resulted in Inconclusive: Test has not run when executed in under .NET Framework. [RSRP-499789] Rider 2024.3.6 Notable fixes For the full list of changes, please see our issue tracker.",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=549948",
        "categories": [
          "net-tools",
          "bugfix",
          "releases",
          "resharper",
          "rider",
          "big-fix"
        ],
        "isoDate": "2025-02-28T10:05:24.000Z"
      },
      {
        "creator": "Maria Kosukhina",
        "title": "IntelliJ IDEA 2024.3.4 Is Out!",
        "link": "https://blog.jetbrains.com/idea/2025/02/intellij-idea-2024-3-4/",
        "pubDate": "Fri, 28 Feb 2025 07:23:34 +0000",
        "content:encodedSnippet": "We’ve just released another update for v2024.3. \nYou can update to this version from inside the IDE, using the Toolbox App, or by using snaps if you are a Ubuntu user. You can also download it from our website.\nThis version brings the following refinements:  \nThe IDE no longer incorrectly reports missing required keys in gitlab-ci.yml. [IJPL-171698]\nThe IDE no longer adds unnecessary spaces around slashes when copying text from the quick documentation. [IJPL-149061]\nPlugin updates are once again detected and processed correctly. [IJPL-175450]\nAWS providers in Terraform are now properly recognized, with correct code completion. [IJPL-164351]\nSeveral issues related to the Kafka plugin have been resolved. [IJPL-176005, IJPL-159726, IJPL-172466, IJPL-172433]\n\n\n\n\nTo see the full list of issues addressed in this version, please refer to the release notes. \nIf you encounter any bugs, please report them using our issue tracker. \nHappy developing!",
        "dc:creator": "Maria Kosukhina",
        "content": "We’ve just released another update for v2024.3.&#160; You can update to this version from inside the IDE, using the&#160;Toolbox App, or by using snaps if you are a Ubuntu user. You can also download it from our&#160;website. This version brings the following refinements:&#160;&#160; To see the full list of issues addressed in this version, please [&#8230;]",
        "contentSnippet": "We’ve just released another update for v2024.3.  You can update to this version from inside the IDE, using the Toolbox App, or by using snaps if you are a Ubuntu user. You can also download it from our website. This version brings the following refinements:   To see the full list of issues addressed in this version, please […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=549613",
        "categories": [
          "releases",
          "bug-fix-update",
          "intellij-idea",
          "intellij-idea-2024-3"
        ],
        "isoDate": "2025-02-28T07:23:34.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": []
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Harshada Hole",
        "title": "New Debugging and Profiling Features in Visual Studio (v17.13)",
        "link": "https://devblogs.microsoft.com/visualstudio/new-debugging-and-profiling-features-in-visual-studio-v17-13/",
        "pubDate": "Wed, 05 Mar 2025 15:39:27 +0000",
        "content:encodedSnippet": "The latest Visual Studio update (v17.13) brings a strong set of debugging and profiling features designed to speed up troubleshooting, making it more efficient. With AI-driven features in this release, variable analysis and data inspection are smarter and more intuitive, and problems are easier to identify and debug. Profiling tool improvements also deliver better support and visualization for multi-process execution, native code, and async workflows, with clearer insights into performance bottlenecks. For a full list of debugger and diagnostics features in this release, check out the release notes.\nDownload Visual Studio 2022 v17.13\n\nGitHub Copilot Assited Debugging Features\nSmarter exception and variable analysis\nGitHub Copilot Exception Analysis and Variable Analysis now use your project context intelligently to find and bring to your attention the most relevant code to errors.\nWith sharper, actionable insights and smarter, context-aware solutions, these capabilities can guide you to the root cause of issues more quickly, make your debugging workflow more streamlined, and provide greater overall accuracy in debugging errors.\n\nAI-Powered Parallel Stacks window\nAuto-Summarize in Parallel Stacks gives you AI-generated summaries so you can get a quick idea of what each thread is doing. Copilot Chat Integration with App Summarization goes a step further, identifying probable problems, recommending solutions, and enabling you to ask questions, get them explained, and get AI-powered suggestions—all in the context of your debugging session.\nCombined, these tools simplify parallel debugging so you can diagnose and repair threading problems more quickly and confidently.\n\nEnhanced Editable Expressions in IEnumerable Visualizer\nThe IEnumerable Visualizer now features GitHub Copilot Inline Chat, allowing you to refine editable expressions using natural language. Open a prompt with the Copilot sparkle button, tell it what you would like to change, and receive AI-generated LINQ queries for customized filtering your data. Including syntax highlighting to make it easier to read.\n\nProfiling Features\nTargeted Instrumentation for native code\nThe Instrumentation tool in the Visual Studio now has targeted instrumentation for native code, allowing you to choose functions and classes to inspect thoroughly.\nThis improves performance monitoring and makes it easier for you to spot issues, streamlining your debugging experience.\n\nDisplay unified async stacks in profiler\nThe Visual Studio profiler now improves debugging of .NET applications by showing stitched async stacks in the summary and detail call tree windows.\nThis feature gives a more cohesive, clearer picture of asynchronous operations, making it easier for developers to follow the entire execution path, including asynchronous method calls, in a single, unified stack trace.\n\nMultiprocess Analysis with Color-Coded Swimlanes in CPU Usage\nCPU Usage tool in the Visual Studio profiler now supports multiprocess analysis, with performance graphs displayed as separate color coding for each process in swim lanes.\nThe graphs are displayed as stacked area charts. You can also filter processes by a dropdown at the top left, to enable focused analysis.\nThis enhancement enables you to profile and isolate CPU usage by process with ease in one session. Providing better visualization of resource usage, it optimizes profiling performance and simplifies multiprocess application performance tuning.\n\nThank you!\nWe aim to make your debugging and profiling experience as smooth and productive as it can be. We really appreciate the feedback and suggestions you provide, as that is what determines the direction of the tools you use daily. Never stop providing us with feedback, as we can keep making Visual Studio an excellent and user-friendly tool for developers like you.\nHappy coding!\nThe post New Debugging and Profiling Features in Visual Studio (v17.13) appeared first on Visual Studio Blog.",
        "dc:creator": "Harshada Hole",
        "content": "<p>The latest Visual Studio update (v17.13) brings a strong set of debugging and profiling features designed to speed up troubleshooting, making it more efficient. With AI-driven features in this release, variable analysis and data inspection are smarter and more intuitive, and problems are easier to identify and debug. Profiling tool improvements also deliver better support [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/new-debugging-and-profiling-features-in-visual-studio-v17-13/\">New Debugging and Profiling Features in Visual Studio (v17.13)</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "The latest Visual Studio update (v17.13) brings a strong set of debugging and profiling features designed to speed up troubleshooting, making it more efficient. With AI-driven features in this release, variable analysis and data inspection are smarter and more intuitive, and problems are easier to identify and debug. Profiling tool improvements also deliver better support […]\nThe post New Debugging and Profiling Features in Visual Studio (v17.13) appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=252584",
        "categories": [
          "Copilot",
          "Debug",
          "Visual Studio",
          "Debugging and Diagnostics",
          "GitHub Copilot",
          "Profiling"
        ],
        "isoDate": "2025-03-05T15:39:27.000Z"
      },
      {
        "creator": "Mads Kristensen",
        "title": "Great new productivity features in Visual Studio",
        "link": "https://devblogs.microsoft.com/visualstudio/great-new-productivity-features-in-visual-studio/",
        "pubDate": "Mon, 03 Mar 2025 16:28:28 +0000",
        "content:encodedSnippet": "Sometimes it’s the little things in life that matter the most. In the latest version of Visual Studio, we’ve added some features and tweaks that aim to put a smile on your face and make you more productive. Here is a list of some of these, and if you want the full list, make sure to check out the release notes.\nCustomize file encoding\nDevelopers working in cross-platform environments often need files to be saved with specific file encodings. Changing these encodings can lead to various issues.\nVisual Studio now allows you to set the default file encoding for saving files. This feature ensures that your preferred encoding is used whenever possible.\nTo set the default encoding, navigate to Tools → Options → Environment → Documents. There, you will find an option titled Save files with a specific encoding. If this option is unchecked, Visual Studio will manage file encoding using its default behavior. If checked, Visual Studio will use the encoding specified in the adjacent combo box whenever a file is saved.\n\nIf Visual Studio cannot save with the specified encoding (e.g., requesting ASCII encoding for a file containing Unicode characters), it will display a dialog informing you of the issue.\nChoose whether to indent word wrap\nWe are excited to introduce a new feature that allows you to control whether wrapped lines are indented in the editor. This enhancement provides greater flexibility and customization for your coding environment, ensuring that your code appears exactly as you prefer.\n\nTo change this option, follow these steps:\nGo to Tools → Options → Text Editor → General.\nLook for the option called Automatically indent when word wrap is enabled.\nBy default, this option is enabled, meaning that wrapped lines will be indented. If you prefer your wrapped lines not to be indented, simply uncheck this option. This setting can help improve readability and maintain the desired formatting of your code, especially in projects where indentation style is crucial.\nPreserve font preferences across themes\nWe understand that the fonts developers select when coding is a personal choice, influenced by preferences for readability, accessibility, or aesthetics. Visual Studio themes primarily focus on presentation colors and are independent of your preferred fonts.\nWith this update, we’ve introduced functionality to retain your font face and size choices when switching themes. You can now set your font preferences once and switch themes in Visual Studio without needing to reconfigure your font settings every time. Note that the colors of your fonts remain linked to the theme, as that is the purpose of themes, but your font selections will be preserved.\n\nThis feature will be enabled by default for all users. If you prefer the previous behavior, go to Tools > Manage Preview Features and find the option Separate font settings from color theme selection. If this option is checked, your font preferences will be maintained regardless of theme changes. Uncheck the box to reinstate the previous behavior which ties font choices to theme.\nReimagine the horizontal scrollbar\nThe editor tray in Visual Studio is a valuable space for a wealth of information. You can control your zoom, check the health of your document, see what line you’re on, and access a variety of additional information.\nUnfortunately, sometimes all of that information can crowd out the horizontal scrollbar, making it difficult to scroll through your window. This is particularly true in a side-by-side view where the system tray isn’t very wide.\nWith this latest update, these struggles are a thing of the past. If the scrollbar drops below a usable width, it will reposition itself above the system tray to ensure it’s always accessible. By default, it will return to the editor tray as soon as there’s enough room for it again.\n\nWhile we believe this behavior will be ideal for most users, if you encounter any issues, you can control the behavior in Tools → Options. The option is located under Text Editor → Advanced and is labeled Editor horizontal scrollbar location. This setting allows you to choose whether the scrollbar adjusts its position according to the available space, stays in the editor tray, or always appears above the editor tray.\n\nThank you!\nWe are dedicated to continuously improving your development experience, and many of these advancements are driven by your invaluable feedback and suggestions. Your input plays a vital role in shaping the future of Visual Studio, and we encourage you to keep sharing your ideas with us.\nHappy coding!\nThe post Great new productivity features in Visual Studio appeared first on Visual Studio Blog.",
        "dc:creator": "Mads Kristensen",
        "content": "<p>Sometimes it’s the little things in life that matter the most. In the latest version of Visual Studio, we’ve added some features and tweaks that aim to put a smile on your face and make you more productive. Here is a list of some of these, and if you want the full list, make sure [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/great-new-productivity-features-in-visual-studio/\">Great new productivity features in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Sometimes it’s the little things in life that matter the most. In the latest version of Visual Studio, we’ve added some features and tweaks that aim to put a smile on your face and make you more productive. Here is a list of some of these, and if you want the full list, make sure […]\nThe post Great new productivity features in Visual Studio appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=252558",
        "categories": [
          "Accessibility",
          "Productivity",
          "Visual Studio",
          "Developer Productivity"
        ],
        "isoDate": "2025-03-03T16:28:28.000Z"
      },
      {
        "creator": "Jessie Houghton",
        "title": "Catch issues before you commit to Git",
        "link": "https://devblogs.microsoft.com/visualstudio/catch-issues-before-you-commit-to-git/",
        "pubDate": "Thu, 27 Feb 2025 17:06:24 +0000",
        "content:encodedSnippet": "Discovering issues with code changes after committing changes can be frustrating. Fortunately, Visual Studio offers a new feature that helps you catch potential problems early, improving your code quality.\n\nVisual Studio now includes a feature powered by GitHub Copilot that lets you review your local code changes before committing them, before they are part of your pull request. This can help identify performance and security issues early, ensuring you maintain a higher quality codebase.\nHow to Get Started\nTo use this feature, ensure your GitHub Copilot subscription is active and enabled within Visual Studio. If you don’t already have GitHub Copilot, you can sign up for free here.\nYou’ll need to enable the necessary feature flags:\nTools > Options > Preview Features > Pull Request Comments\nTools > Options > GitHub > Copilot > Source Control Integration > Enable Git preview features.\nThen, you’ll see a new sparkle comment button in the Git Changes window. Clicking this button allows GitHub Copilot to review your local code changes and provide inline suggestions.\n\nAs always with AI powered features, you’ll want to review Copilot’s suggestions for accuracy, which you can do directly in your working file. You can navigate between comments or collapse them using the up arrow icon in the top right corner of the comment box. Please share your scenarios with us in the survey to help us make the comments as useful as possible.\nShare your feedback\nWe rely on your user feedback to guide our roadmaps in Visual Studio. Please share your thoughts on this feature in this survey. Also, we’re already tracking a suggestion to improve this feature with customization, so share your thoughts here.\nWe value your continued support and insights to make your experiences in Visual Studio the best they can be, especially now with AI!\nThe post Catch issues before you commit to Git appeared first on Visual Studio Blog.",
        "dc:creator": "Jessie Houghton",
        "content": "<p>Discovering issues with code changes after committing changes can be frustrating. Fortunately, Visual Studio offers a new feature that helps you catch potential problems early, improving your code quality. Visual Studio now includes a feature powered by GitHub Copilot that lets you review your local code changes before committing them, before they are part of [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/catch-issues-before-you-commit-to-git/\">Catch issues before you commit to Git</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Discovering issues with code changes after committing changes can be frustrating. Fortunately, Visual Studio offers a new feature that helps you catch potential problems early, improving your code quality. Visual Studio now includes a feature powered by GitHub Copilot that lets you review your local code changes before committing them, before they are part of […]\nThe post Catch issues before you commit to Git appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=252505",
        "categories": [
          "Copilot",
          "Git",
          "GitHub Copilot",
          "Visual Studio"
        ],
        "isoDate": "2025-02-27T17:06:24.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": [
      {
        "creator": "권창현",
        "title": "2015년 여름",
        "link": "https://thoughts.chkwon.net/2015-summer/",
        "pubDate": "Mon, 03 Mar 2025 23:28:10 +0000",
        "content:encodedSnippet": "이 여름에는 많은 일이 일어났다. 버팔로에서 탬파로 이사가고 이직하던 시기이다. 베를린에서 열렸던 TSL Workshop에서는 장영재 교수님을 처음으로 만나 카이스트 산업및시스템공학과와 연결고리가 생기기도 했다.\n버팔로에서 많은 추억을 함께 쌓은 김진수 선생님의 초청으로 인천국제고와 인천과학고에서 세미나도 했다. 산업공학을 소개하고 고등학생들에게 도움될만한 여러가지 이야기를 하러 다녀왔다. 학생들 똘망똘망 질문도 잘하고 진로에 대한 고민을 털어놓기도 하더라.\n인천과학고 학생 하나가 있었다. 이 학생은 2학년이었는데 대학에서 어떤 전공을 할지 고민이 많았더랬다. 현재 고등학교에서 하는 활동은 기계공학에 모두 초점이 맞춰져있었고 가족들도 선생님들도 기계공학을 권하고 있었는데, 정작 본인은 산업공학에 끌리고 있었더랬다. 때마침 찾아온 세미나 연사가 기계공학을 학부에서 공부하고 대학원에서는 산업공학을 공부했단다. 질문을 했다. 나도 그렇게 전공 바꿔서 공부하려고 하는데 괜찮을까요? 학부에서는 기계공학을 대학원에서는 산업공학을.\n2023년에 카이스트 부임해서 가르쳤던 대학원 과목에서 눈에 띄는 학생 하나가 있었다. 수업시간에 질문도 열심히 하고 내 질문에 대답도 열심히 하던 성실하고 똑똑한 학생 하나가 있었다. 석사과정에 입학해서 열심히 연구하고 있다고 했다. 나는 같이 연구할 좋은 학생들을 찾고 있던터라 지도교수님이 이미 있어서 아쉬운 마음이 들기도 했다.\n일년이 지나서 2024년 가을에 연락이 왔다. 지도교수님께서 다른 학교로 이직하게 되면서 새로 지도교수를 찾고 있다고 했다. 인터뷰에서 여러가지 이야기 해 본 다음 박사과정에 진학하게 되는 시점 부터 내가 지도 하기로 했다. 이번 학기가 그 첫 학기다.\n최근에 이 학생이랑 여러가지 이야기 나누다가 이 학생이 그 인천과학고 학생이라는 사실을 알게 되었다. 서로 기억이 희미했지만 그 당시 인천과학고에서 산업공학으로 진학한 학생은 자기 동기들 중에선 본인 밖에 없을 정도로 매우 드물었으며, 그 해 여름에 기계공학에서 산업공학으로 전공을 바꾼 연사가 나 말고 또 누가 왔을 것이며, 나도 비슷한 질문에 대답을 했던 것이 기억이 나는 걸로 보아 이 학생이 질문을 던졌던 세미나 연사가 나였을 확률이 매우 높은 것으로 결론을 지었다.\n그 때 그 질문에 돌아온 대답은 어차피 돌아올거면 지금 왜 당장 하지 않느냐, 그냥 지금 하고 싶은거 해도 된다였단다. 이 대답이 너무 간결해서 마음이 편안해졌고 같은식으로 가족도 설득할 수 있었단다. 그래서 대학에서 원하는 전공 공부하면서 즐겁게 보낼 수 있었단다. 내가 그 이야기해줘서 고마웠다고 했다.\n아마 이 학생은 그 때 이미 마음을 먹은 상태였고 누가 등 떠밀어주기를 바라고 있었던 것 같다. 그게 마침 나였고.\n인연이라는게 참 신기하다. 이렇게 다시 만나는구나. 세상 좁다 또 한 번 느낀다. 고등학생들 만나서 이야기 하고 내 생각 전하던 활동이 이렇게 내게 다시 돌아와, 산업공학 박사과정 학생과 지도교수로 만났다.\n결자해지의 시간인가.",
        "dc:creator": "권창현",
        "comments": "https://thoughts.chkwon.net/2015-summer/#respond",
        "content": "이 여름에는 많은 일이 일어났다. 버팔로에서 탬파로 이사가고 이직하던 시기이다. 베를린에서 열렸던 TSL Workshop에서는 장영재 교수님을 처음으로 만나 카이스트 산업및시스템공학과와 연결고리가 생기기도 했다. 버팔로에서 많은 추억을 함께 쌓은 김진수 선생님의 초청으로 인천국제고와 인천과학고에서 세미나도&#46;&#46;&#46;",
        "contentSnippet": "이 여름에는 많은 일이 일어났다. 버팔로에서 탬파로 이사가고 이직하던 시기이다. 베를린에서 열렸던 TSL Workshop에서는 장영재 교수님을 처음으로 만나 카이스트 산업및시스템공학과와 연결고리가 생기기도 했다. 버팔로에서 많은 추억을 함께 쌓은 김진수 선생님의 초청으로 인천국제고와 인천과학고에서 세미나도...",
        "guid": "https://thoughts.chkwon.net/?p=997",
        "categories": [
          "잡생각"
        ],
        "isoDate": "2025-03-03T23:28:10.000Z"
      }
    ]
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": [
      {
        "title": "최근 포인트 클라우드 세그먼테이션 동향",
        "link": "http://daddynkidsmakers.blogspot.com/2025/03/blog-post.html",
        "pubDate": "2025-03-01T13:46:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은&nbsp;최근 포인트 클라우드 세그먼테이션 동향에 관한 연구를 간략히 조사한것이다.<br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgcaozGMN4hw4l_3DKZNkjeXqc7Uy16p2GvN8EaXuaYEdz-mWpLTWKtvhbP2ZpmiWDnzeIE-pL-Nl4dCBux_0UMB0QTiXKisnOJ6-6fQVyQSx9yMCqIClNleCe7V95JTPRe-2zwQHbVOSmvgykSVEqcBODaeIwDl7G5o1ltswXruDAhGYkoq2ljcgv4DXg6\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"863\" data-original-width=\"1848\" height=\"186\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgcaozGMN4hw4l_3DKZNkjeXqc7Uy16p2GvN8EaXuaYEdz-mWpLTWKtvhbP2ZpmiWDnzeIE-pL-Nl4dCBux_0UMB0QTiXKisnOJ6-6fQVyQSx9yMCqIClNleCe7V95JTPRe-2zwQHbVOSmvgykSVEqcBODaeIwDl7G5o1ltswXruDAhGYkoq2ljcgv4DXg6=w400-h186\" width=\"400\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjFqPHKKktgNFdrWg1--PpHwemHdlwEXqQ_-lVwanHWZDglYWzYCPjnq68PgpS7JFNZa1zxt33jOq91b0S13nWv8SmEqpz3CIPRevBXmocgICwYtl66s0hwCqBgiIc2qrCSkME4lc8PgHTW7EQk6fcm8pUNGcpu4kNuLifBdsDuDMi6fH3J3KoMncy8zA4U\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"1112\" data-original-width=\"1993\" height=\"224\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjFqPHKKktgNFdrWg1--PpHwemHdlwEXqQ_-lVwanHWZDglYWzYCPjnq68PgpS7JFNZa1zxt33jOq91b0S13nWv8SmEqpz3CIPRevBXmocgICwYtl66s0hwCqBgiIc2qrCSkME4lc8PgHTW7EQk6fcm8pUNGcpu4kNuLifBdsDuDMi6fH3J3KoMncy8zA4U=w400-h224\" width=\"400\" /></a></div><a href=\"https://viewer.ahn.nl/AHN4/DTM/0/5.41086/52.29969/5\">AHN4 - DTM | Viewer Actueel Hoogtebestand</a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><iframe allowfullscreen='allowfullscreen' webkitallowfullscreen='webkitallowfullscreen' mozallowfullscreen='mozallowfullscreen' width='320' height='266' src='https://www.blogger.com/video.g?token=AD6v5dxWlxIS9X5UlgdVvvFtP_AT1u9D-_VORDu5I1lQXZqhACI8QLWhpijjwSY48pUwxHpNItBPjMDPNYMuysxN_A' class='b-hbp-video b-uploaded' frameborder='0'></iframe></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://ilya-fradlin.github.io/Interactive4D/\" style=\"text-align: left;\">Interactive 4D LiDAR Segmentation</a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div></div><div style=\"text-align: left;\"><b>레퍼런스</b></div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://github.com/Yarroudh/segment-lidar\">Python package for segmenting LiDAR data using Segment-Anything Model (SAM) from Meta AI.</a>&nbsp;2023</li><li>Meta AI,&nbsp;<a href=\"https://segment-anything.com/\">Segment Anything</a>, <a href=\"https://github.com/facebookresearch/segment-anything\">code</a>, 2023</li><li><a href=\"https://yarroudh.github.io/segment-lidar/\">Segment-lidar documentation</a>, 2023</li><li><a href=\"https://ilya-fradlin.github.io/Interactive4D/\">Interactive4D: Interactive 4D LiDAR Segmentation</a>, <a href=\"https://github.com/Ilya-Fradlin/Interactive4D\">code</a>, 2024</li><li><a href=\"https://github.com/zeng-ziyin/PointNAT\">Large Scale Point Cloud Semantic Segmentation via Neighbor Aggregation with Transformer</a>, 2024</li><li><a href=\"https://github.com/Pointcept/Pointcept\">Pointcept: a codebase for point cloud perception research. Latest works: PTv3 (CVPR'24 Oral), PPT (CVPR'24), OA-CNNs (CVPR'24), MSC (CVPR'23)</a>, 2024</li><li><a href=\"https://github.com/opengeos/segment-geospatial\">segment-geospatial, Python package for segmenting geospatial data with the Segment Anything Model (SAM)</a></li><li>NVIDIA,&nbsp;<a href=\"https://research.nvidia.com/labs/dvl/projects/sal/\">Towards Learning to Segment Anything in Lidar</a>, 2024</li><li><a href=\"https://github.com/hrzhou2/AdaptConv-master\">Adaptive Graph Convolution for Point Cloud Analysis</a>, 2021</li><li><a href=\"https://github.com/XiaShan1227/3D-Point-Cloud\">Paper on 3D Point Cloud Processing</a>, 2024</li><li><a href=\"https://github.com/open-mmlab/mmdetection3d/tree/main\">OpenMMLab's next-generation platform for general 3D object detection</a>, 2022</li><li><a href=\"https://github.com/POSTECH-CVLab/point-transformer\">Point Transformer</a>, 2021</li><li><a href=\"https://github.com/HuguesTHOMAS/KPConv\">KPConv: Kernel Point Convolutions</a>, 2020</li><li><a href=\"https://github.com/QingyongHu/SensatUrban\">Urban-scale point cloud dataset,</a>&nbsp;2022</li><li><a href=\"https://paperswithcode.com/search?q_meta=&amp;q_type=&amp;q=point+cloud\">Search for point cloud | Papers With Code</a>, 2024</li><li><a href=\"https://github.com/unmannedlab/LiDAR-reflectivity-segmentation\">Reflectivity is all you need!: Advancing LiDAR semantic segmentation</a>, 2024</li><li><a href=\"https://github.com/Xiangxu-0103/FRNet\">FRNet: Frustum-Range Networks for Scalable LiDAR Segmentation</a>, 2025</li><li><a href=\"https://github.com/UniBwTAS/continuous_clustering\">Low Latency Instance Segmentation by Continuous Clustering for LiDAR Sensors</a>, 2024</li><li><a href=\"https://github.com/PJLab-ADG/OpenPCSeg\">OpenPCSeg: Open Source Point Cloud Segmentation Toolbox and Benchmark</a></li><li><a href=\"https://github.com/Amsterdam-AI-Team/Urban_PointCloud_Processing\">Repository for automatic classification and labeling of Urban PointClouds using data fusion and region growing techniques</a>, 2022</li><li><a href=\"https://github.com/YevgeniyEngineer/LiDAR-Processing-V2\">Fast Ground Segmentation for 3D LiDAR Point Cloud Based on Jump-Convolution-Process</a>&nbsp;with ROS, 2022</li><li><a href=\"https://github.com/alexdimopoulos/PointCloudCity-Open3D-ML\">PointCloudCity-Open3D-ML: Open3D-ML to integrate the Point Cloud City datasets</a>, 2020</li><li><a href=\"https://github.com/theobdt/aerial_pc_classification/tree/master\">Segmentation of urban aerial point clouds with Deep Learning in Pytorch</a>, 2019</li><li><a href=\"https://github.com/theovincent/3DPointCloudClassification\">Challenge to classify 3D point clouds of cities into Ground - Building - Poles - Pedestrians - Cars - Vegetation</a>, 2021</li></ul></div>",
        "contentSnippet": "이 글은 최근 포인트 클라우드 세그먼테이션 동향에 관한 연구를 간략히 조사한것이다.\n\n\n\n\nAHN4 - DTM | Viewer Actueel Hoogtebestand\n\nInteractive 4D LiDAR Segmentation\n\n\n레퍼런스\n\nPython package for segmenting LiDAR data using Segment-Anything Model (SAM) from Meta AI. 2023\nMeta AI, Segment Anything, code, 2023\nSegment-lidar documentation, 2023\nInteractive4D: Interactive 4D LiDAR Segmentation, code, 2024\nLarge Scale Point Cloud Semantic Segmentation via Neighbor Aggregation with Transformer, 2024\nPointcept: a codebase for point cloud perception research. Latest works: PTv3 (CVPR'24 Oral), PPT (CVPR'24), OA-CNNs (CVPR'24), MSC (CVPR'23), 2024\nsegment-geospatial, Python package for segmenting geospatial data with the Segment Anything Model (SAM)\nNVIDIA, Towards Learning to Segment Anything in Lidar, 2024\nAdaptive Graph Convolution for Point Cloud Analysis, 2021\nPaper on 3D Point Cloud Processing, 2024\nOpenMMLab's next-generation platform for general 3D object detection, 2022\nPoint Transformer, 2021\nKPConv: Kernel Point Convolutions, 2020\nUrban-scale point cloud dataset, 2022\nSearch for point cloud | Papers With Code, 2024\nReflectivity is all you need!: Advancing LiDAR semantic segmentation, 2024\nFRNet: Frustum-Range Networks for Scalable LiDAR Segmentation, 2025\nLow Latency Instance Segmentation by Continuous Clustering for LiDAR Sensors, 2024\nOpenPCSeg: Open Source Point Cloud Segmentation Toolbox and Benchmark\nRepository for automatic classification and labeling of Urban PointClouds using data fusion and region growing techniques, 2022\nFast Ground Segmentation for 3D LiDAR Point Cloud Based on Jump-Convolution-Process with ROS, 2022\nPointCloudCity-Open3D-ML: Open3D-ML to integrate the Point Cloud City datasets, 2020\nSegmentation of urban aerial point clouds with Deep Learning in Pytorch, 2019\nChallenge to classify 3D point clouds of cities into Ground - Building - Poles - Pedestrians - Cars - Vegetation, 2021",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-7742256761394434723",
        "isoDate": "2025-03-01T13:46:00.000Z"
      }
    ]
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "엘라스틱 Runtime field - 10th",
        "link": "https://kangmyounghun.blogspot.com/2025/03/runtime-field-10th.html",
        "pubDate": "2025-03-03T12:27:00.002Z",
        "author": "강명훈",
        "content": "<div>beat 기본 인덱스 템플릿을 사용하면 1,500여 개 필드로 구성된 인덱스가 생성된다.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiy8CR8Pm_CZ6JGMq7P4g0MdNlb0HAtChFNtwZ9oLnSgmnjaX4n6VWHcEg6I0pzaAYSVUxxYCqzavH6CM5VkD2MpUx8TYQfdKzAvFmUGh2HR8M_F6rb6WtbdZ8C8Ic2XQDYzUxXozjevvfjwDHqKIau1COQa8u-3G9LXyU_idQ5yxCNvsy8oe9D4uybD8ml/s1280/winlogbeat_basic_template.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"664\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiy8CR8Pm_CZ6JGMq7P4g0MdNlb0HAtChFNtwZ9oLnSgmnjaX4n6VWHcEg6I0pzaAYSVUxxYCqzavH6CM5VkD2MpUx8TYQfdKzAvFmUGh2HR8M_F6rb6WtbdZ8C8Ic2XQDYzUxXozjevvfjwDHqKIau1COQa8u-3G9LXyU_idQ5yxCNvsy8oe9D4uybD8ml/s16000/winlogbeat_basic_template.png\" /></a></div><br /><div><span><a name='more'></a></span>이게 싫으면 별도 템플릿을 사용하면 됨.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGsQoYvN8bwVnNZSyqWiLsF-gm6Ds2PXwpqrMpMWxYIOWO5OOA-B7Tw0XtaHSatmF-C_pjZeCxTs8kYgfwLO443pkirlW7wwmXVlAgWmf8LefVRWWWkq9NRyrUuJjxnjuC1alNLtggp8KLQGnTrOuxkQf6n-1ykK0w8FZu9dCNrknkYkXm6cj1fxAZypsf/s1280/winlogbeat_custom_template.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"617\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhGsQoYvN8bwVnNZSyqWiLsF-gm6Ds2PXwpqrMpMWxYIOWO5OOA-B7Tw0XtaHSatmF-C_pjZeCxTs8kYgfwLO443pkirlW7wwmXVlAgWmf8LefVRWWWkq9NRyrUuJjxnjuC1alNLtggp8KLQGnTrOuxkQf6n-1ykK0w8FZu9dCNrknkYkXm6cj1fxAZypsf/s16000/winlogbeat_custom_template.png\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjiLRXLnXOGhxQR_QYwc03ue9WFeh1bALR7vI0-F4MF9Q4W5xeIP_99_7sxmY2Y93QUFWgJOamTdLKk2pcpXXpRPJJVmG_eVNA465j5YZ6WhBFyDGuyAig0mPCyaav-1p-VavUslyYaRPzOLL_iXt7BCweV94_T4Sy3Vp7JklYC13y3_NypSYLmOAqFrH-j/s1280/winlogbeat_custom_template2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"621\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjiLRXLnXOGhxQR_QYwc03ue9WFeh1bALR7vI0-F4MF9Q4W5xeIP_99_7sxmY2Y93QUFWgJOamTdLKk2pcpXXpRPJJVmG_eVNA465j5YZ6WhBFyDGuyAig0mPCyaav-1p-VavUslyYaRPzOLL_iXt7BCweV94_T4Sy3Vp7JklYC13y3_NypSYLmOAqFrH-j/s16000/winlogbeat_custom_template2.png\" /></a></div><br /><div>그런데 갑자기 geo_point 타입 필드가 필요하면?</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8NileS2sFLvkS_TX8-CkA8QkgQ8CSZiAlT0OyTB5dGKK0Hb28YSL7VPCK0AK2JLXlhM5wQaTFybWsWLuhJJTxywSkVajuklLf5-QXWMD9MKzLQdw5paBQiJMpdIJQumhfkm_vFLZ2R03TQOufgY7hOjHpVzVWczG_Ed_w6ctcSiyQE9VOb5aYMLy2Ty7T/s1280/win_event_22.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"609\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg8NileS2sFLvkS_TX8-CkA8QkgQ8CSZiAlT0OyTB5dGKK0Hb28YSL7VPCK0AK2JLXlhM5wQaTFybWsWLuhJJTxywSkVajuklLf5-QXWMD9MKzLQdw5paBQiJMpdIJQumhfkm_vFLZ2R03TQOufgY7hOjHpVzVWczG_Ed_w6ctcSiyQE9VOb5aYMLy2Ty7T/s16000/win_event_22.png\" /></a></div><br /><div>미리 계획된 템플릿을 준비하지 못했더라도 rest api로 간단히 원하는 필드 추가 가능.</div>\n<div><pre><code><div>PUT winevent-2025/_mapping</div><div>{</div><div>&nbsp; &nbsp; \"properties\": {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"geoip\": {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"properties\": {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"location\": {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\": \"geo_point\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div></code></pre></div>\n<div><br /></div>\n<div>이게 번거로우면 런타임 필드 기능을 써도 된다. geo_point 타입 빈 필드 생성.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinzjcpDQiTHonYn-eShtCmDX36ZLFeOIBd28wVFZmeJ4FdeSaSQkZJw7hMY7ARHZS4aE35HiROoJfLlZ2y7LEUOp4z07jP9KJctDX36pgKdrj-j-kTVMMZBizjWTy2ZsOfVJa0YFfrA95DDn7Sx_XY5Bp52HRG2CbWjP2pB9pJdn2uprLZgKQknR7UnK-s/s1080/runtime_field.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1080\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEinzjcpDQiTHonYn-eShtCmDX36ZLFeOIBd28wVFZmeJ4FdeSaSQkZJw7hMY7ARHZS4aE35HiROoJfLlZ2y7LEUOp4z07jP9KJctDX36pgKdrj-j-kTVMMZBizjWTy2ZsOfVJa0YFfrA95DDn7Sx_XY5Bp52HRG2CbWjP2pB9pJdn2uprLZgKQknR7UnK-s/s16000/runtime_field.png\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiaNwvOgQjsbI5ov-wU9AOsjFpaEVZR2rfnhNvQeWWwIVhoSIj1MR-KEGpTKNhP5dQECgGOQLkD_TNFkFTtw5jEMCwzgsPSJNpGp6kEEqZtF3yMAiWFmaEUpzgbHM7_1R_glfBNmtOuRYIBvgdiOD4ZLcsil2EUuIoVQ6IE1gqiAvMYyLCuHjNVNpT-sPy0/s1280/win_event_22_2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"609\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiaNwvOgQjsbI5ov-wU9AOsjFpaEVZR2rfnhNvQeWWwIVhoSIj1MR-KEGpTKNhP5dQECgGOQLkD_TNFkFTtw5jEMCwzgsPSJNpGp6kEEqZtF3yMAiWFmaEUpzgbHM7_1R_glfBNmtOuRYIBvgdiOD4ZLcsil2EUuIoVQ6IE1gqiAvMYyLCuHjNVNpT-sPy0/s16000/win_event_22_2.png\" /></a></div><div><br /></div>set value 옵션으로 새로운 값 만들 때만 썼는데 이렇게도 활용할 수 있구나.<br /><div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2024/05/runtime-field-9th.html\">엘라스틱 Runtime field - 9th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/03/712.html\" target=\"\">엘라스틱 Runtime field</a></li><li><a href=\"http://kangmyounghun.blogspot.com/2018/07/elasticsearch-scripted-field.html\" target=\"\">Elasticsearch 활용(scripted field)</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/09/2nd.html\" target=\"\">정규표현식 몰라도 된다 - 2nd</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/09/convert-ip-to-decimal.html\">convert ip to decimal</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2024/02/winlogbeat-812.html\">Winlogbeat 8.12의 변화</a></li></ul></div></div>",
        "contentSnippet": "beat 기본 인덱스 템플릿을 사용하면 1,500여 개 필드로 구성된 인덱스가 생성된다.\n\n\n\n\n이게 싫으면 별도 템플릿을 사용하면 됨.\n\n\n\n\n\n그런데 갑자기 geo_point 타입 필드가 필요하면?\n\n\n\n\n미리 계획된 템플릿을 준비하지 못했더라도 rest api로 간단히 원하는 필드 추가 가능.\n\nPUT winevent-2025/_mapping\n{\n    \"properties\": {\n        \"geoip\": {\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"geo_point\"\n                }\n            }\n        }\n    }\n}\n\n\n\n\n이게 번거로우면 런타임 필드 기능을 써도 된다. geo_point 타입 빈 필드 생성.\n\n\n\n\n\nset value 옵션으로 새로운 값 만들 때만 썼는데 이렇게도 활용할 수 있구나.\n\n\n관련 글\n\n엘라스틱 Runtime field - 9th\n엘라스틱 Runtime field\nElasticsearch 활용(scripted field)\n정규표현식 몰라도 된다 - 2nd\nconvert ip to decimal\nWinlogbeat 8.12의 변화",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-3627236663677945228",
        "isoDate": "2025-03-03T12:27:00.002Z"
      },
      {
        "title": "Beat processors - 6th",
        "link": "https://kangmyounghun.blogspot.com/2025/02/filebeat-processors-6th.html",
        "pubDate": "2025-02-27T03:59:00.004Z",
        "author": "강명훈",
        "content": "<div>;을 구분자로 사용한 데이터 분리.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>- script:</div><div>&nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; function process(evt)&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var str = evt.Get('message').split(';')</div><div>&nbsp; &nbsp; &nbsp; &nbsp; evt.Put('result', str)</div><div>&nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-02-27T03:49:19.802Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"8.17.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net;type:&nbsp; 5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",</div><div><span><a name='more'></a></span>&nbsp; \"result\": [</div><div>&nbsp; &nbsp; \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net\",</div><div>&nbsp; &nbsp; \"type:&nbsp; 5 e8652.dscx.akamaiedge.net\",</div><div>&nbsp; &nbsp; \"::ffff:23.207.177.83\",</div><div>&nbsp; &nbsp; \"\"</div><div>&nbsp; ]</div><div>}</div></span></code></pre></div>\n<div><br /></div><div><span></span>마지막 구분자 때문에 빈 값이 추출된다. 정규표현식으로 구분자만 제외.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>- script:</div><div>&nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var str = evt.Get('message').match(/[^;]+/);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; evt.Put('result', str)</div><div>&nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-02-27T03:53:10.537Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"8.17.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net;type:&nbsp; 5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",</div><div>&nbsp; \"result\": [</div><div>&nbsp; &nbsp; \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net\"</div><div>&nbsp; ]</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>첫 번째 데이터만 추출된다. 정규표현식은 최초 검사 성공 후 중지되기 때문. 모든 데이터를 검사하도록 글로벌<span style=\"font-size: x-small;\">(g)</span> 수정자 추가.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>- script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var str = evt.Get('message').match(/[^;]+/g);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put('result', str)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-02-27T03:54:35.866Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"8.17.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net;type:&nbsp; 5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",</div><div>&nbsp; \"result\": [</div><div>&nbsp; &nbsp; \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net\",</div><div>&nbsp; &nbsp; \"type:&nbsp; 5 e8652.dscx.akamaiedge.net\",</div><div>&nbsp; &nbsp; \"::ffff:23.207.177.83\"</div><div>&nbsp; ]</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>원하는 구조가 나왔으니 정규표현식만 좀 더 깔끔하게 수정.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>- script:</div><div>&nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; var str = evt.Get('message').match(/[^ :;]+\\.[^;]+/g);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; evt.Put('result', str)</div><div>&nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-02-27T03:56:28.797Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"8.17.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type:&nbsp; 5 crl.root-x1.letsencrypt.org.edgekey.net;type:&nbsp; 5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",</div><div>&nbsp; \"result\": [</div><div>&nbsp; &nbsp; \"crl.root-x1.letsencrypt.org.edgekey.net\",</div><div>&nbsp; &nbsp; \"e8652.dscx.akamaiedge.net\",</div><div>&nbsp; &nbsp; \"23.207.177.83\"</div><div>&nbsp; ]</div><div>}</div></span></code></pre></div>\n<div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/01/filebeat-processors-5th.html\">Beat processors - 5th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/09/convert-ip-to-decimal.html\">convert ip to decimal</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/10/key-value.html\" target=\"\">엘라스틱의 key-value 처리</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/06/processors-registereddomain.html\" target=\"\">도메인 정규화 Processor: registered_domain</a></li></ul></div></div>",
        "contentSnippet": ";을 구분자로 사용한 데이터 분리.\n\n- script:\n    lang: javascript\n    source: >\n      function process(evt) \n        var str = evt.Get('message').split(';')\n        evt.Put('result', str)\n      }\n\n\n\n\n{\n  \"@timestamp\": \"2025-02-27T03:49:19.802Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"8.17.0\"\n  },\n  \"message\": \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net;type:  5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",\n  \"result\": [\n    \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net\",\n    \"type:  5 e8652.dscx.akamaiedge.net\",\n    \"::ffff:23.207.177.83\",\n    \"\"\n  ]\n}\n\n\n\n\n마지막 구분자 때문에 빈 값이 추출된다. 정규표현식으로 구분자만 제외.\n\n- script:\n    lang: javascript\n    source: >\n      function process(evt) {\n        var str = evt.Get('message').match(/[^;]+/);\n        evt.Put('result', str)\n      }\n\n\n\n\n{\n  \"@timestamp\": \"2025-02-27T03:53:10.537Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"8.17.0\"\n  },\n  \"message\": \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net;type:  5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",\n  \"result\": [\n    \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net\"\n  ]\n}\n\n\n\n\n첫 번째 데이터만 추출된다. 정규표현식은 최초 검사 성공 후 중지되기 때문. 모든 데이터를 검사하도록 글로벌(g) 수정자 추가.\n\n- script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var str = evt.Get('message').match(/[^;]+/g);\n          evt.Put('result', str)\n        }\n\n\n\n\n{\n  \"@timestamp\": \"2025-02-27T03:54:35.866Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"8.17.0\"\n  },\n  \"message\": \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net;type:  5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",\n  \"result\": [\n    \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net\",\n    \"type:  5 e8652.dscx.akamaiedge.net\",\n    \"::ffff:23.207.177.83\"\n  ]\n}\n\n\n\n\n원하는 구조가 나왔으니 정규표현식만 좀 더 깔끔하게 수정.\n\n- script:\n    lang: javascript\n    source: >\n      function process(evt) {\n        var str = evt.Get('message').match(/[^ :;]+\\.[^;]+/g);\n        evt.Put('result', str)\n      }\n\n\n\n\n{\n  \"@timestamp\": \"2025-02-27T03:56:28.797Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"8.17.0\"\n  },\n  \"message\": \"type:  5 crl.root-x1.letsencrypt.org.edgekey.net;type:  5 e8652.dscx.akamaiedge.net;::ffff:23.207.177.83;\",\n  \"result\": [\n    \"crl.root-x1.letsencrypt.org.edgekey.net\",\n    \"e8652.dscx.akamaiedge.net\",\n    \"23.207.177.83\"\n  ]\n}\n\n\n\n\n관련 글\n\nBeat processors - 5th\nconvert ip to decimal\n엘라스틱의 key-value 처리\n도메인 정규화 Processor: registered_domain",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-4251513065431928459",
        "isoDate": "2025-02-27T03:59:00.004Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": [
      {
        "creator": "minieetea",
        "title": "인생을 0.5배속으로 살아가기",
        "link": "https://minieetea.com/20250304-0-5x-speed-for-life/",
        "pubDate": "Tue, 04 Mar 2025 12:38:51 GMT",
        "content:encodedSnippet": "올해가 카운트다운이 된 지 벌써 60일이 훌쩍 지났습니다. 아직도 저는 날짜를 입력할 때 2024로 쓰고 지우길 반복하는데 말이죠. 3월 초에도 눈은 내리지만, 겨울은 다 끝나가고 이제 봄이 온다는 것을 쇼핑몰이 봄옷으로 바뀌는 것을 보면서 비로소 눈치를 챕니다.\n얼마 전에 바뀐 나이 체계가 아니었다면 올해는 30대의 마지막입니다. 앞자리가 바뀌는 것이 싫긴 하지만, 저는 나이가 들면 시간이 빨리 간다는 말이 더 싫습니다. 새해를 맞아 휘몰아치는 업무에 시간이 훌쩍 지나가 버리고 나니 차마 할 말이 없습니다. 결국 올해도 이렇게 보내고 말겠구나!' 했어요. 예전 같았으면 체념했을 것 같아요. 올해는 망했다- 하면서 말이죠. 하지만 '이렇게 보내지 않으려면 어떻게 해야 하지?'라는 질문의 끝에 저는 이렇게 자리에 앉았습니다. 연말 휴가 때 써둔 글을 몰아서 발행한 후로는 글을 쓰지 못했으니, 사실상 올해의 첫 글이기도 합니다.\n나이가 들면 시간이 빨리 간다는 말은 과학적으로도 근거가 있는 말입니다. 반복적이고 단조로운 일상이 지속되면 시간이 빠르게 지나가는 것처럼 느껴질 수 있습니다.​ 반대로, 일상에서 특별하거나 새로운 경험이 많을수록 시간이 더 천천히 흐르는 것처럼 느낍니다. 이는 뇌가 새로운 정보를 처리하고 저장하는 과정에서 더 많은 자원을 사용하거든요.\n저는 저의 시간을 늘리는 몇 가지 방법이 있습니다. 독서와 글쓰기인데요. 단순히 시간을 보내기 위한 것이 아니라 내면의 경험을 깊이 있게 기록하고 반추하는 과정이기 때문입니다. 아마도 이런 활동을 할 때의 뇌는 평범한 일상의 순간보다 훨씬 풍부하고 세밀한 정보를 저장하게 되고, 그 결과 주관적으로 \"시간이 천천히 간다\"는 느낌을 받는 것이죠. 특히나 글쓰기의 경우 새로 받아들이는 정보와 과거의 기억, 명시적이지 않은 모호한 경험을 뚜렷하고 뾰족하게 만드는 과정에서 머리를 굉장히 많이 쓴다고 느낍니다. 도파민이 쏟아진다고나 해야 할까요?\n이런 경험을 주는 활동 하나를 더한다면 코칭도 마찬가지인 것 같습니다. 코칭은 저의 에너지 박스와 같아요. 어떤 사연이 있을지 모르는 상자를 열어보는 설렘, 당혹스러움과 안도감, 안쓰러움과 설렘 등 다양한 감정을 순식간에 느껴보기도 하고요. 나의 과거로부터의 성찰이 앞에 있는 내담자에게 전달되어 작은 변화라도 한 방울 떨어트리는 순간은 놀랍게도 며칠, 몇 달의 시간이 지나도 뚜렷하게 생각이 납니다. 15분에서 30분, 길게는 1시간의 짧은 대화만으로도 우리의 에너지가 채워지는 기분을 느끼면 이루 말할 수 없는 보람을 느끼는 것 같아요.\n만약 제가 일에 치여 오랫동안 글을 쓰지 않는다면, 다시 돌아오는 데까지 오래 걸릴까 봐 오늘은 사설을 좀 늘어놔 봤어요. 여러분의 '삶의 플레이 속도 조절 버튼'은 무엇인지 궁금해요.",
        "dc:creator": "minieetea",
        "content": "<p>&#xC62C;&#xD574;&#xAC00; &#xCE74;&#xC6B4;&#xD2B8;&#xB2E4;&#xC6B4;&#xC774; &#xB41C; &#xC9C0; &#xBC8C;&#xC368; 60&#xC77C;&#xC774; &#xD6CC;&#xCA4D; &#xC9C0;&#xB0AC;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC544;&#xC9C1;&#xB3C4; &#xC800;&#xB294; &#xB0A0;&#xC9DC;&#xB97C; &#xC785;&#xB825;&#xD560; &#xB54C; 2024&#xB85C; &#xC4F0;&#xACE0; &#xC9C0;&#xC6B0;&#xAE38; &#xBC18;&#xBCF5;&#xD558;&#xB294;&#xB370; &#xB9D0;&#xC774;&#xC8E0;</p>",
        "contentSnippet": "올해가 카운트다운이 된 지 벌써 60일이 훌쩍 지났습니다. 아직도 저는 날짜를 입력할 때 2024로 쓰고 지우길 반복하는데 말이죠",
        "guid": "677d567b933924000135f0b0",
        "isoDate": "2025-03-04T12:38:51.000Z"
      }
    ]
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "YouTube 추천 알고리즘, 내 입맛대로 조정하는 법",
        "link": "http://muzbox.tistory.com/483549",
        "pubDate": "Wed, 5 Mar 2025 11:20:33 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483549#entry483549comment",
        "content": "<p data-ke-size=\"size16\">YouTube 추천 알고리즘이 원하는 대로 작동하지 않나요? 엉뚱한 영상이 계속 뜨는 이유는 시청 기록과 검색 기록 때문일 수도 있어요. 피드를 최적화하고 원하는 콘텐츠만 추천받는 방법을 알려드릴게요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_YouTube 추천 알고리즘, 내 입맛대로 조정하는 법.jpg\" data-origin-width=\"1408\" data-origin-height=\"768\"><span data-url=\"https://blog.kakaocdn.net/dn/b1euyG/btsMBE3IzHc/XFqQDjXWQklvIzRKBie9p1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b1euyG/btsMBE3IzHc/XFqQDjXWQklvIzRKBie9p1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b1euyG/btsMBE3IzHc/XFqQDjXWQklvIzRKBie9p1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb1euyG%2FbtsMBE3IzHc%2FXFqQDjXWQklvIzRKBie9p1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1408\" height=\"768\" data-filename=\"edited_YouTube 추천 알고리즘, 내 입맛대로 조정하는 법.jpg\" data-origin-width=\"1408\" data-origin-height=\"768\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">YouTube를 사용하다 보면 원치 않는 영상이 추천 피드를 도배하는 경우가 많아요. 한 번 실수로 클릭한 영상 때문에 이후의 추천이 엉망이 되기도 하고요. \"내가 좋아하는 콘텐츠만 보고 싶은데, 방법이 없을까?\"라는 고민, 한 번쯤 해보셨을 거예요. 다행히 YouTube 추천 알고리즘은 우리가 조작할 수 있는 요소가 많아요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">오늘은 <b>YouTube 추천 피드를 깔끔하게 정리하고, 나에게 꼭 맞는 영상을 추천받는 방법</b>을 알려드릴게요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  YouTube 추천 알고리즘을 최적화하는 5가지 방법</b></span></h2>\n<p data-ke-size=\"size16\">YouTube의 추천 시스템은 <b>시청 기록, 검색 기록, 좋아요, 싫어요, 구독 채널, 피드백(&lsquo;관심 없음&rsquo; 또는 &lsquo;이 채널 추천 안 함&rsquo;)</b> 등을 분석해 사용자의 관심사에 맞는 영상을 제공합니다. 하지만 한 번의 잘못된 클릭이 계속된 추천 오류를 유발할 수도 있어요. 이 문제를 해결하는 5가지 방법을 소개할게요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">1️⃣ 시청 기록을 삭제해 새로운 추천 받기</span></h3>\n<p data-ke-size=\"size16\">YouTube 추천이 엉망이 된 가장 큰 이유는 <b>기존의 시청 기록 때문</b>입니다. 내가 한 번이라도 본 영상이 추천 알고리즘에 반영되기 때문에, 관심이 없던 영상이 자꾸 등장하는 거죠.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"유튜브 시청기록 지우기.jpg\" data-origin-width=\"958\" data-origin-height=\"481\"><span data-url=\"https://blog.kakaocdn.net/dn/paSqp/btsMBANRJZW/CwzIKJfqcBV5IxzY3RZgi1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/paSqp/btsMBANRJZW/CwzIKJfqcBV5IxzY3RZgi1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/paSqp/btsMBANRJZW/CwzIKJfqcBV5IxzY3RZgi1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpaSqp%2FbtsMBANRJZW%2FCwzIKJfqcBV5IxzY3RZgi1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"958\" height=\"481\" data-filename=\"유튜브 시청기록 지우기.jpg\" data-origin-width=\"958\" data-origin-height=\"481\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ <b>해결 방법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>YouTube 왼쪽 메뉴에서 <b>&lsquo;기록&rsquo;</b> 클릭</li>\n<li>오른쪽에서 <b>&lsquo;모든 시청 기록 삭제&rsquo;</b> 선택</li>\n<li>앞으로 볼 콘텐츠만 추천받고 싶다면 <b>시청 기록을 아예 끄는 것도 가능!</b></li>\n</ul>\n<p data-ke-size=\"size16\">  <b>팁:</b><br />시청 기록을 삭제하기 전에 중요한 영상은 &lsquo;나중에 보기&rsquo; 목록이나 플레이리스트에 저장해 두세요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">2️⃣ 관심 있는 주제의 영상만 시청하기</span></h3>\n<p data-ke-size=\"size16\">시청 기록을 삭제한 후에는 <b>현재 관심 있는 콘텐츠만 시청</b>해야 합니다. YouTube 알고리즘은 사용자가 본 영상의 주제를 기반으로 다음 추천 영상을 결정하니까요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">❌ <b>주의할 점:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>호기심에 클릭 금지!</b> 관심 없는 영상은 클릭하지 마세요.</li>\n<li>실수로 클릭한 영상은 &lsquo;기록&rsquo;에서 바로 삭제할 것!</li>\n</ul>\n<p data-ke-size=\"size16\">✔ <b>시청 기록을 보호하는 방법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>특정 콘텐츠를 검색해야 할 때는 <b>&lsquo;시청 기록 일시 중지&rsquo;</b> 기능 사용\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>방법: YouTube &lsquo;기록&rsquo; &rarr; &lsquo;시청 기록 일시 중지&rsquo;</li>\n<li>&nbsp;</li>\n</ul>\n</li>\n</ul>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">3️⃣ 좋아요는 신중하게, 싫어요도 적극 활용</span></h3>\n<p data-ke-size=\"size16\">&lsquo;좋아요&rsquo;를 누르는 것도 YouTube 추천 알고리즘에 큰 영향을 줍니다. 하지만 <b>무조건 좋아요를 누르면 오히려 추천 피드가 혼란스러워질 수 있어요.</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ <b>좋아요 활용법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>**보고 싶은 영상에만<b> &lsquo;좋아요&rsquo;</b>를 누르세요.</li>\n<li>예전에는 좋아했지만 지금은 관심 없는 영상은 <b>&lsquo;좋아요 취소&rsquo;</b>!</li>\n</ul>\n<p data-ke-size=\"size16\">❌ <b>싫어요 활용법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>특정 유형의 콘텐츠를 추천받고 싶지 않다면 <b>&lsquo;싫어요&rsquo;</b> 버튼 클릭</li>\n<li>더 강력한 차단을 원하면 <b>&lsquo;이 채널 추천 안 함&rsquo;</b> 옵션 활용</li>\n</ul>\n<p data-ke-size=\"size16\">  <b>&lsquo;좋아요&rsquo;와 &lsquo;싫어요&rsquo;를 전략적으로 사용하면 원하는 영상만 추천받을 수 있어요!</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">4️⃣ 검색 기록도 관리해야 한다</span></h3>\n<p data-ke-size=\"size16\">YouTube는 시청 기록뿐만 아니라 <b>검색 기록도 추천 알고리즘에 반영</b>합니다. 내가 검색한 주제와 관련된 영상이 피드에 나타나는 이유죠.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"유튜브 검색기록 해제.jpg\" data-origin-width=\"847\" data-origin-height=\"489\"><span data-url=\"https://blog.kakaocdn.net/dn/caKmfS/btsMBhnuWNm/Cp6pW0Hwd2qswI6ht8sH51/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/caKmfS/btsMBhnuWNm/Cp6pW0Hwd2qswI6ht8sH51/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/caKmfS/btsMBhnuWNm/Cp6pW0Hwd2qswI6ht8sH51/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcaKmfS%2FbtsMBhnuWNm%2FCp6pW0Hwd2qswI6ht8sH51%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"847\" height=\"489\" data-filename=\"유튜브 검색기록 해제.jpg\" data-origin-width=\"847\" data-origin-height=\"489\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ <b>검색 기록 정리 방법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>프로필 아이콘 클릭 &rarr; <b>&lsquo;YouTube 데이터&rsquo;</b> 선택</li>\n<li><b>&lsquo;YouTube 검색 기록 포함&rsquo;</b> 옵션 체크 해제</li>\n<li>필요하면 <b>&lsquo;검색 기록 삭제&rsquo;</b></li>\n</ul>\n<p data-ke-size=\"size16\">  검색 기록을 삭제하면 특정 키워드 검색이 이후 추천에 영향을 주지 않아요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">5️⃣ 추천 주제 필터를 활용해 원하는 영상만 보기</span></h3>\n<p data-ke-size=\"size16\">YouTube 홈 화면 상단에는 내가 관심 있는 주제를 기반으로 한 필터가 표시됩니다.<br />이 기능을 적극 활용하면 원하는 주제의 영상만 추천받을 수 있어요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"유튜브 관심없음.jpg\" data-origin-width=\"893\" data-origin-height=\"531\"><span data-url=\"https://blog.kakaocdn.net/dn/daEhg3/btsMAZN44YB/EyTT8vm4650sC0SQsqkLZ0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/daEhg3/btsMAZN44YB/EyTT8vm4650sC0SQsqkLZ0/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/daEhg3/btsMAZN44YB/EyTT8vm4650sC0SQsqkLZ0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdaEhg3%2FbtsMAZN44YB%2FEyTT8vm4650sC0SQsqkLZ0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"893\" height=\"531\" data-filename=\"유튜브 관심없음.jpg\" data-origin-width=\"893\" data-origin-height=\"531\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ <b>활용법:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>상단의 주제 필터를 클릭하면 관련된 영상만 피드에 표시됨</li>\n<li>원하는 주제가 계속 나오도록 <b>비슷한 주제의 영상을 여러 개 시청</b></li>\n</ul>\n<p data-ke-size=\"size16\">  <b>관심 없는 주제가 계속 추천된다면?</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>&lsquo;관심 없음&rsquo;</b> 또는 <b>&lsquo;이 채널 추천 안 함&rsquo;</b>을 선택하세요!</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b><span style=\"color: #009a87;\">  YouTube 추천 피드를 정리하는 마무리 꿀팁</span></b></h2>\n<p data-ke-size=\"size16\">✅ <b>시청 기록을 삭제하고 새로운 추천을 받는다</b><br />✅ <b>현재 관심 있는 영상만 시청한다</b><br />✅ <b>좋아요, 싫어요를 신중하게 활용한다</b><br />✅ <b>검색 기록을 관리해 추천 피드에 영향을 주지 않는다</b><br />✅ <b>주제 필터를 활용해 원하는 영상만 추천받는다</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이 방법들을 실천하면 YouTube가 <b>내가 원하는 영상만 추천하는 최적의 플랫폼</b>으로 변할 거예요.<br />불필요한 콘텐츠에 시간 낭비하지 말고, 원하는 정보만 골라서 시청해 보세요!  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>  Q&amp;A (자주 묻는 질문)</b></span></h2>\n<p data-ke-size=\"size16\"><b>1. YouTube 추천 피드를 완전히 초기화할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">네! <b>&lsquo;시청 기록 삭제&rsquo; + &lsquo;검색 기록 삭제&rsquo;</b>를 하면 추천 피드가 초기화됩니다. 하지만 완전히 새롭게 만들려면 이후의 시청 습관도 신경 써야 해요.</p>\n<p data-ke-size=\"size16\"><b>2. 검색 기록을 남기지 않고 영상을 볼 수 있나요?</b></p>\n<p data-ke-size=\"size16\">네! <b>&lsquo;시청 기록 일시 중지&rsquo; 기능</b>을 사용하면 검색해도 기록이 남지 않아요.</p>\n<p data-ke-size=\"size16\"><b>3. 특정 채널의 영상이 추천되지 않도록 하는 방법은?</b></p>\n<p data-ke-size=\"size16\"><span style=\"letter-spacing: 0px;\">영상에서</span><b> &lsquo;이 채널 추천 안 함&rsquo;</b><span style=\"letter-spacing: 0px;\">을 선택하면 해당 채널의 영상이 더 이상 추천되지 않습니다.</span></p>\n<p data-ke-size=\"size16\"><b>4. YouTube 알고리즘이 내 관심사를 파악하는 기준은?</b></p>\n<p data-ke-size=\"size16\">YouTube는 <b>시청 기록, 검색 기록, 좋아요, 싫어요, 구독 정보, 피드백(&lsquo;관심 없음&rsquo; 선택 등)</b>을 종합적으로 분석해서 추천을 만듭니다.</p>\n<p data-ke-size=\"size16\"><b>5. 주제별 추천 필터는 어떻게 활용하면 좋나요?</b></p>\n<p data-ke-size=\"size16\">홈 화면 상단의 주제 필터를 클릭하면 특정 주제의 영상만 볼 수 있습니다. 관심 있는 주제를 여러 개 클릭하면 추천 피드가 더욱 최적화됩니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"YouTube 추천 피드를 완전히 초기화할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! ‘시청 기록 삭제’와 ‘검색 기록 삭제’를 하면 추천 피드가 초기화됩니다. 하지만 이후의 시청 습관도 신경 써야 원하는 영상만 추천받을 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"검색 기록을 남기지 않고 영상을 볼 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! ‘시청 기록 일시 중지’ 기능을 사용하면 검색해도 기록이 남지 않으며, 추천 피드에 영향을 주지 않습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"특정 채널의 영상이 추천되지 않도록 하는 방법은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"영상에서 ‘이 채널 추천 안 함’을 선택하면 해당 채널의 영상이 더 이상 추천되지 않습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"YouTube 알고리즘이 내 관심사를 파악하는 기준은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"YouTube는 시청 기록, 검색 기록, 좋아요, 싫어요, 구독 정보, 피드백(‘관심 없음’ 선택 등)을 종합적으로 분석해서 추천을 생성합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"주제별 추천 필터는 어떻게 활용하면 좋나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"홈 화면 상단의 주제 필터를 클릭하면 특정 주제의 영상만 볼 수 있습니다. 관심 있는 주제를 여러 개 클릭하면 추천 피드가 더욱 최적화됩니다.\"\n      }\n    }\n  ]\n}\n</script>\n<div id=\"gtx-trans\" style=\"position: absolute; left: -188px; top: 4883.69px;\">\n<div class=\"gtx-trans-icon\">&nbsp;</div>\n</div>",
        "contentSnippet": "YouTube 추천 알고리즘이 원하는 대로 작동하지 않나요? 엉뚱한 영상이 계속 뜨는 이유는 시청 기록과 검색 기록 때문일 수도 있어요. 피드를 최적화하고 원하는 콘텐츠만 추천받는 방법을 알려드릴게요!\n\n\n \nYouTube를 사용하다 보면 원치 않는 영상이 추천 피드를 도배하는 경우가 많아요. 한 번 실수로 클릭한 영상 때문에 이후의 추천이 엉망이 되기도 하고요. \"내가 좋아하는 콘텐츠만 보고 싶은데, 방법이 없을까?\"라는 고민, 한 번쯤 해보셨을 거예요. 다행히 YouTube 추천 알고리즘은 우리가 조작할 수 있는 요소가 많아요.\n \n오늘은 YouTube 추천 피드를 깔끔하게 정리하고, 나에게 꼭 맞는 영상을 추천받는 방법을 알려드릴게요.\n \n \n  YouTube 추천 알고리즘을 최적화하는 5가지 방법\nYouTube의 추천 시스템은 시청 기록, 검색 기록, 좋아요, 싫어요, 구독 채널, 피드백(‘관심 없음’ 또는 ‘이 채널 추천 안 함’) 등을 분석해 사용자의 관심사에 맞는 영상을 제공합니다. 하지만 한 번의 잘못된 클릭이 계속된 추천 오류를 유발할 수도 있어요. 이 문제를 해결하는 5가지 방법을 소개할게요.\n1️⃣ 시청 기록을 삭제해 새로운 추천 받기\nYouTube 추천이 엉망이 된 가장 큰 이유는 기존의 시청 기록 때문입니다. 내가 한 번이라도 본 영상이 추천 알고리즘에 반영되기 때문에, 관심이 없던 영상이 자꾸 등장하는 거죠.\n\n\n \n✔ 해결 방법:\nYouTube 왼쪽 메뉴에서 ‘기록’ 클릭\n오른쪽에서 ‘모든 시청 기록 삭제’ 선택\n앞으로 볼 콘텐츠만 추천받고 싶다면 시청 기록을 아예 끄는 것도 가능!\n  팁:\n시청 기록을 삭제하기 전에 중요한 영상은 ‘나중에 보기’ 목록이나 플레이리스트에 저장해 두세요!\n \n2️⃣ 관심 있는 주제의 영상만 시청하기\n시청 기록을 삭제한 후에는 현재 관심 있는 콘텐츠만 시청해야 합니다. YouTube 알고리즘은 사용자가 본 영상의 주제를 기반으로 다음 추천 영상을 결정하니까요.\n \n❌ 주의할 점:\n호기심에 클릭 금지! 관심 없는 영상은 클릭하지 마세요.\n실수로 클릭한 영상은 ‘기록’에서 바로 삭제할 것!\n✔ 시청 기록을 보호하는 방법:\n특정 콘텐츠를 검색해야 할 때는 ‘시청 기록 일시 중지’ 기능 사용\n\n방법: YouTube ‘기록’ → ‘시청 기록 일시 중지’\n \n3️⃣ 좋아요는 신중하게, 싫어요도 적극 활용\n‘좋아요’를 누르는 것도 YouTube 추천 알고리즘에 큰 영향을 줍니다. 하지만 무조건 좋아요를 누르면 오히려 추천 피드가 혼란스러워질 수 있어요.\n \n✔ 좋아요 활용법:\n**보고 싶은 영상에만 ‘좋아요’를 누르세요.\n예전에는 좋아했지만 지금은 관심 없는 영상은 ‘좋아요 취소’!\n❌ 싫어요 활용법:\n특정 유형의 콘텐츠를 추천받고 싶지 않다면 ‘싫어요’ 버튼 클릭\n더 강력한 차단을 원하면 ‘이 채널 추천 안 함’ 옵션 활용\n  ‘좋아요’와 ‘싫어요’를 전략적으로 사용하면 원하는 영상만 추천받을 수 있어요!\n \n4️⃣ 검색 기록도 관리해야 한다\nYouTube는 시청 기록뿐만 아니라 검색 기록도 추천 알고리즘에 반영합니다. 내가 검색한 주제와 관련된 영상이 피드에 나타나는 이유죠.\n\n\n \n✔ 검색 기록 정리 방법:\n프로필 아이콘 클릭 → ‘YouTube 데이터’ 선택\n‘YouTube 검색 기록 포함’ 옵션 체크 해제\n필요하면 ‘검색 기록 삭제’\n  검색 기록을 삭제하면 특정 키워드 검색이 이후 추천에 영향을 주지 않아요!\n \n5️⃣ 추천 주제 필터를 활용해 원하는 영상만 보기\nYouTube 홈 화면 상단에는 내가 관심 있는 주제를 기반으로 한 필터가 표시됩니다.\n이 기능을 적극 활용하면 원하는 주제의 영상만 추천받을 수 있어요!\n\n\n \n✔ 활용법:\n상단의 주제 필터를 클릭하면 관련된 영상만 피드에 표시됨\n원하는 주제가 계속 나오도록 비슷한 주제의 영상을 여러 개 시청\n  관심 없는 주제가 계속 추천된다면?\n‘관심 없음’ 또는 ‘이 채널 추천 안 함’을 선택하세요!\n \n  YouTube 추천 피드를 정리하는 마무리 꿀팁\n✅ 시청 기록을 삭제하고 새로운 추천을 받는다\n✅ 현재 관심 있는 영상만 시청한다\n✅ 좋아요, 싫어요를 신중하게 활용한다\n✅ 검색 기록을 관리해 추천 피드에 영향을 주지 않는다\n✅ 주제 필터를 활용해 원하는 영상만 추천받는다\n \n이 방법들을 실천하면 YouTube가 내가 원하는 영상만 추천하는 최적의 플랫폼으로 변할 거예요.\n불필요한 콘텐츠에 시간 낭비하지 말고, 원하는 정보만 골라서 시청해 보세요!  \n  Q&A (자주 묻는 질문)\n1. YouTube 추천 피드를 완전히 초기화할 수 있나요?\n네! ‘시청 기록 삭제’ + ‘검색 기록 삭제’를 하면 추천 피드가 초기화됩니다. 하지만 완전히 새롭게 만들려면 이후의 시청 습관도 신경 써야 해요.\n2. 검색 기록을 남기지 않고 영상을 볼 수 있나요?\n네! ‘시청 기록 일시 중지’ 기능을 사용하면 검색해도 기록이 남지 않아요.\n3. 특정 채널의 영상이 추천되지 않도록 하는 방법은?\n영상에서 ‘이 채널 추천 안 함’을 선택하면 해당 채널의 영상이 더 이상 추천되지 않습니다.\n4. YouTube 알고리즘이 내 관심사를 파악하는 기준은?\nYouTube는 시청 기록, 검색 기록, 좋아요, 싫어요, 구독 정보, 피드백(‘관심 없음’ 선택 등)을 종합적으로 분석해서 추천을 만듭니다.\n5. 주제별 추천 필터는 어떻게 활용하면 좋나요?\n홈 화면 상단의 주제 필터를 클릭하면 특정 주제의 영상만 볼 수 있습니다. 관심 있는 주제를 여러 개 클릭하면 추천 피드가 더욱 최적화됩니다.",
        "guid": "http://muzbox.tistory.com/483549",
        "categories": [
          "유튜브,넷플릭스 사용법/유튜브(YOUTUBE) 사용법",
          "youtube 추천 알고리즘",
          "youtube 피드 정리",
          "검색 기록 관리",
          "관심 없는 영상 차단",
          "시청 기록 삭제",
          "유튜브 설정 변경",
          "유튜브 주제 필터",
          "유튜브 추천 초기화",
          "유튜브 추천 최적화",
          "좋아요 싫어요 활용"
        ],
        "isoDate": "2025-03-05T02:20:33.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "ChatGPT는 정말 공정할까? 편향된 답변 피하는 5가지 방법",
        "link": "http://muzbox.tistory.com/483548",
        "pubDate": "Tue, 4 Mar 2025 18:49:06 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483548#entry483548comment",
        "content": "<p data-ke-size=\"size16\">ChatGPT의 편향성을 최소화하는 방법이 궁금하신가요? 특정 역할을 부여하거나, 다양한 의견을 요청하는 등 균형 잡힌 답변을 얻는 방법을 알려드립니다. AI의 한계를 극복하는 스마트한 활용법을 지금 확인하세요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1280\" data-origin-height=\"722\"><span data-url=\"https://blog.kakaocdn.net/dn/bfgVFd/btsMB1qskrT/iQMascsKYLB8B0OyvCKVL1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bfgVFd/btsMB1qskrT/iQMascsKYLB8B0OyvCKVL1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bfgVFd/btsMB1qskrT/iQMascsKYLB8B0OyvCKVL1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbfgVFd%2FbtsMB1qskrT%2FiQMascsKYLB8B0OyvCKVL1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"ChatGPT는 정말 공정할까? 편향된 답변 피하는 5가지 방법\" loading=\"lazy\" width=\"1280\" height=\"722\" data-filename=\"blob\" data-origin-width=\"1280\" data-origin-height=\"722\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;AI 챗봇을 사용하다 보면 \"이거 너무 한쪽으로 치우친 답변 아닌가?\"라는 생각이 들 때가 있죠. 저도 처음엔 ChatGPT가 공정하고 객관적인 답변을 줄 거라고 믿었어요. 하지만 쓰면 쓸수록 미묘하게 편향된 답변을 주는 경우가 많다는 걸 알게 됐어요. 특히 정치, 사회 이슈나 윤리적 논란이 있는 주제에서는 더욱 그렇죠. 그렇다면 어떻게 하면 ChatGPT가 보다 균형 잡힌 답변을 하도록 유도할 수 있을까요?</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>1. ChatGPT에게 &lsquo;역할&rsquo;을 부여하기</b></span></h2>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">  &ldquo;이제부터 너는 중립적인 컨설턴트야.&rdquo;</span></blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">가장 효과적인 방법 중 하나는 ChatGPT에게 특정한 역할을 부여하는 거예요. 예를 들면, \"너는 공정한 저널리스트야\" 혹은 \"너는 객관적인 연구 분석가야\"라고 요청하는 거죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>  예제:</b></span><br /><b>&ldquo;너는 정치적으로 중립적인 전문가야. 특정한 이념이나 정당을 지지하지 않고, 팩트에 기반해서만 설명해줘.&rdquo;</b></p>\n<p data-ke-size=\"size16\">이렇게 역할을 정해주면 ChatGPT가 특정한 관점을 지양하고 좀 더 균형 잡힌 정보를 제공하려고 해요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>2. 더 구체적인 프롬프트 사용하기</b></span></h2>\n<p data-ke-size=\"size16\">✅ <b>\"XX에 대한 객관적인 분석을 해줘.\"</b><br />✅ <b>\"찬반 의견을 모두 포함해서 정리해줘.\"</b><br />✅ <b>\"팩트 기반의 근거를 제시해줘.\"</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">처음엔 저도 단순하게 \"이 주제에 대해 설명해줘\"라고만 요청했어요. 그런데 그럴 경우 ChatGPT가 제한된 정보만 제공하는 경향이 있더라고요. 그래서 더 구체적으로 요청하는 방식으로 바꿨어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>  예제</b></span><br />❌ <b>\"기후 변화에 대해 설명해줘.\"</b><br />✔ <b>\"기후 변화에 대한 주요 과학적 연구 결과를 중립적으로 정리해줘.\"</b></p>\n<p data-ke-size=\"size16\">이렇게 하면 ChatGPT가 다양한 관점을 반영해서 답변을 구성할 가능성이 커져요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>3. 다양한 의견을 요청하기</b></span></h2>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">\"한 가지 답변만 주지 말고, 여러 가지 시각에서 분석해줘.\"</span></blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">ChatGPT는 기본적으로 사용자가 원하는 대답을 해주려고 해요. 그렇다 보니 질문 방식이 편향되면 답변도 그에 맞춰지는 경우가 많죠. 그래서 저는 \"다른 시각에서 보면 어떨까?\"라는 질문을 자주 던져요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>  예제:</b></span><br /><b>&ldquo;이 주제에 대한 서로 다른 학파의 입장을 3가지 이상 정리해줘.&rdquo;</b><br /><b>&ldquo;반대 의견을 가진 사람들이 어떤 근거로 주장하는지 설명해줘.&rdquo;</b></p>\n<p data-ke-size=\"size16\">이런 식으로 요청하면 ChatGPT가 한쪽으로 치우치지 않고 다양한 의견을 제공할 가능성이 높아져요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>4. \"동의하냐\"고 묻지 않기</b></span></h2>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">\"너도 이 의견에 동의하지?\"</span></blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">라고 묻는 순간, ChatGPT는 동의하는 방향으로 답변을 만들어낼 가능성이 커요. 이건 심리학적으로도 자연스러운 반응이에요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>  잘못된 질문</b></span><br /><b>&ldquo;이 이론이 맞다고 생각해?&rdquo;</b><br />  동의하는 방향으로 답변을 생성할 확률이 높음</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>✅ 올바른 질문</b></span><br /><b>&ldquo;이 이론을 반대하는 학자들의 근거는 무엇이야?&rdquo;</b><br />  반대 의견까지 포함된 균형 잡힌 답변을 받을 확률이 높음</p>\n<p data-ke-size=\"size16\">이처럼 질문하는 방식만 바꿔도 답변의 질이 확 달라져요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>5. ChatGPT 설정을 커스터마이징하기</b></span></h2>\n<p data-ke-size=\"size16\">ChatGPT를 사용할 때, 프로필 아이콘을 클릭하면 <b>\"Customize ChatGPT\"</b> 옵션이 있어요. 여기에서 답변 스타일을 조정할 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ <b>\"정치적으로 중립적인 답변을 원합니다.\"</b><br />✔ <b>\"객관적이고 공정한 분석을 제공해 주세요.\"</b></p>\n<p data-ke-size=\"size16\">이런 식으로 설정을 조정하면 AI가 좀 더 균형 잡힌 답변을 하도록 유도할 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b><span style=\"color: #009a87;\">결론: AI는 도구일 뿐, 우리가 스마트하게 활용해야 한다</span></b></h2>\n<p data-ke-size=\"size16\">ChatGPT는 완벽한 도구가 아니에요. 여전히 편향된 데이터로 학습될 수도 있고, 사용자 질문 방식에 따라 답변이 왜곡될 수도 있어요. 하지만 위의 방법들을 활용하면 보다 객관적이고 균형 잡힌 답변을 얻을 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">✔ ChatGPT에게 역할을 부여하기<br />✔ 더 구체적인 질문하기<br />✔ 다양한 시각을 요청하기<br />✔ \"동의하냐?\"는 질문을 피하기<br />✔ 설정을 커스터마이징하기</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이 다섯 가지만 기억해도 훨씬 더 좋은 답변을 얻을 수 있을 거예요! 여러분은 AI를 사용할 때 어떤 방법을 활용하시나요? 댓글로 경험을 공유해 주세요  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>  Q&amp;A</b></span></h2>\n<p data-ke-size=\"size16\"><b>1. ChatGPT는 왜 편향된 답변을 할까요?</b></p>\n<p data-ke-size=\"size16\">ChatGPT는 인터넷의 방대한 데이터를 학습했기 때문에 원천 데이터가 편향적이라면 답변도 영향을 받을 수 있어요. 또한, 사용자의 질문 방식에 따라 특정한 방향으로 답변이 조정될 수도 있어요.</p>\n<p data-ke-size=\"size16\"><b>2. ChatGPT의 답변이 공정한지 확인하는 방법은?</b></p>\n<p data-ke-size=\"size16\">하나의 답변만 믿지 말고, 같은 질문을 다르게 표현해서 여러 번 요청해보세요. 또한, 다른 정보 출처와 비교하는 것도 중요해요.</p>\n<p data-ke-size=\"size16\"><b>3. AI의 편향성을 최소화하는 가장 효과적인 방법은?</b></p>\n<p data-ke-size=\"size16\">AI에게 특정한 역할을 부여하거나, 반대 의견을 요청하는 방식이 가장 효과적이에요.</p>\n<p data-ke-size=\"size16\"><b>4. ChatGPT를 설정에서 중립적으로 만들 수 있나요?</b></p>\n<p data-ke-size=\"size16\">네! \"Customize ChatGPT\" 기능을 활용하면 원하는 답변 스타일을 설정할 수 있어요.</p>\n<p data-ke-size=\"size16\"><b>5. ChatGPT가 제공하는 정보를 100% 신뢰해도 될까요?</b></p>\n<p data-ke-size=\"size16\">아니요! AI는 참고용으로만 사용하고, 중요한 결정은 반드시 다른 신뢰할 만한 정보와 함께 고려해야 해요.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT는 왜 편향된 답변을 할까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT는 인터넷의 방대한 데이터를 학습했기 때문에 원천 데이터가 편향적이라면 답변도 영향을 받을 수 있어요. 또한, 사용자의 질문 방식에 따라 특정한 방향으로 답변이 조정될 수도 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT의 답변이 공정한지 확인하는 방법은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"하나의 답변만 믿지 말고, 같은 질문을 다르게 표현해서 여러 번 요청해보세요. 또한, 다른 정보 출처와 비교하는 것도 중요해요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"AI의 편향성을 최소화하는 가장 효과적인 방법은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"AI에게 특정한 역할을 부여하거나, 반대 의견을 요청하는 방식이 가장 효과적이에요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT를 설정에서 중립적으로 만들 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! 'Customize ChatGPT' 기능을 활용하면 원하는 답변 스타일을 설정할 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT가 제공하는 정보를 100% 신뢰해도 될까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아니요! AI는 참고용으로만 사용하고, 중요한 결정은 반드시 다른 신뢰할 만한 정보와 함께 고려해야 해요.\"\n      }\n    }\n  ]\n}\n</script>",
        "contentSnippet": "ChatGPT의 편향성을 최소화하는 방법이 궁금하신가요? 특정 역할을 부여하거나, 다양한 의견을 요청하는 등 균형 잡힌 답변을 얻는 방법을 알려드립니다. AI의 한계를 극복하는 스마트한 활용법을 지금 확인하세요!\n\n\n \n AI 챗봇을 사용하다 보면 \"이거 너무 한쪽으로 치우친 답변 아닌가?\"라는 생각이 들 때가 있죠. 저도 처음엔 ChatGPT가 공정하고 객관적인 답변을 줄 거라고 믿었어요. 하지만 쓰면 쓸수록 미묘하게 편향된 답변을 주는 경우가 많다는 걸 알게 됐어요. 특히 정치, 사회 이슈나 윤리적 논란이 있는 주제에서는 더욱 그렇죠. 그렇다면 어떻게 하면 ChatGPT가 보다 균형 잡힌 답변을 하도록 유도할 수 있을까요?\n \n \n1. ChatGPT에게 ‘역할’을 부여하기\n  “이제부터 너는 중립적인 컨설턴트야.”\n \n가장 효과적인 방법 중 하나는 ChatGPT에게 특정한 역할을 부여하는 거예요. 예를 들면, \"너는 공정한 저널리스트야\" 혹은 \"너는 객관적인 연구 분석가야\"라고 요청하는 거죠.\n \n  예제:\n“너는 정치적으로 중립적인 전문가야. 특정한 이념이나 정당을 지지하지 않고, 팩트에 기반해서만 설명해줘.”\n이렇게 역할을 정해주면 ChatGPT가 특정한 관점을 지양하고 좀 더 균형 잡힌 정보를 제공하려고 해요.\n \n \n \n2. 더 구체적인 프롬프트 사용하기\n✅ \"XX에 대한 객관적인 분석을 해줘.\"\n✅ \"찬반 의견을 모두 포함해서 정리해줘.\"\n✅ \"팩트 기반의 근거를 제시해줘.\"\n \n처음엔 저도 단순하게 \"이 주제에 대해 설명해줘\"라고만 요청했어요. 그런데 그럴 경우 ChatGPT가 제한된 정보만 제공하는 경향이 있더라고요. 그래서 더 구체적으로 요청하는 방식으로 바꿨어요.\n \n  예제\n❌ \"기후 변화에 대해 설명해줘.\"\n✔ \"기후 변화에 대한 주요 과학적 연구 결과를 중립적으로 정리해줘.\"\n이렇게 하면 ChatGPT가 다양한 관점을 반영해서 답변을 구성할 가능성이 커져요.\n \n \n \n3. 다양한 의견을 요청하기\n\"한 가지 답변만 주지 말고, 여러 가지 시각에서 분석해줘.\"\n \nChatGPT는 기본적으로 사용자가 원하는 대답을 해주려고 해요. 그렇다 보니 질문 방식이 편향되면 답변도 그에 맞춰지는 경우가 많죠. 그래서 저는 \"다른 시각에서 보면 어떨까?\"라는 질문을 자주 던져요.\n \n  예제:\n“이 주제에 대한 서로 다른 학파의 입장을 3가지 이상 정리해줘.”\n“반대 의견을 가진 사람들이 어떤 근거로 주장하는지 설명해줘.”\n이런 식으로 요청하면 ChatGPT가 한쪽으로 치우치지 않고 다양한 의견을 제공할 가능성이 높아져요.\n \n \n \n4. \"동의하냐\"고 묻지 않기\n\"너도 이 의견에 동의하지?\"\n \n라고 묻는 순간, ChatGPT는 동의하는 방향으로 답변을 만들어낼 가능성이 커요. 이건 심리학적으로도 자연스러운 반응이에요.\n \n  잘못된 질문\n“이 이론이 맞다고 생각해?”\n  동의하는 방향으로 답변을 생성할 확률이 높음\n \n✅ 올바른 질문\n“이 이론을 반대하는 학자들의 근거는 무엇이야?”\n  반대 의견까지 포함된 균형 잡힌 답변을 받을 확률이 높음\n이처럼 질문하는 방식만 바꿔도 답변의 질이 확 달라져요!\n \n \n \n5. ChatGPT 설정을 커스터마이징하기\nChatGPT를 사용할 때, 프로필 아이콘을 클릭하면 \"Customize ChatGPT\" 옵션이 있어요. 여기에서 답변 스타일을 조정할 수 있어요.\n \n✔ \"정치적으로 중립적인 답변을 원합니다.\"\n✔ \"객관적이고 공정한 분석을 제공해 주세요.\"\n이런 식으로 설정을 조정하면 AI가 좀 더 균형 잡힌 답변을 하도록 유도할 수 있어요.\n \n \n결론: AI는 도구일 뿐, 우리가 스마트하게 활용해야 한다\nChatGPT는 완벽한 도구가 아니에요. 여전히 편향된 데이터로 학습될 수도 있고, 사용자 질문 방식에 따라 답변이 왜곡될 수도 있어요. 하지만 위의 방법들을 활용하면 보다 객관적이고 균형 잡힌 답변을 얻을 수 있어요.\n \n✔ ChatGPT에게 역할을 부여하기\n✔ 더 구체적인 질문하기\n✔ 다양한 시각을 요청하기\n✔ \"동의하냐?\"는 질문을 피하기\n✔ 설정을 커스터마이징하기\n \n이 다섯 가지만 기억해도 훨씬 더 좋은 답변을 얻을 수 있을 거예요! 여러분은 AI를 사용할 때 어떤 방법을 활용하시나요? 댓글로 경험을 공유해 주세요  \n  Q&A\n1. ChatGPT는 왜 편향된 답변을 할까요?\nChatGPT는 인터넷의 방대한 데이터를 학습했기 때문에 원천 데이터가 편향적이라면 답변도 영향을 받을 수 있어요. 또한, 사용자의 질문 방식에 따라 특정한 방향으로 답변이 조정될 수도 있어요.\n2. ChatGPT의 답변이 공정한지 확인하는 방법은?\n하나의 답변만 믿지 말고, 같은 질문을 다르게 표현해서 여러 번 요청해보세요. 또한, 다른 정보 출처와 비교하는 것도 중요해요.\n3. AI의 편향성을 최소화하는 가장 효과적인 방법은?\nAI에게 특정한 역할을 부여하거나, 반대 의견을 요청하는 방식이 가장 효과적이에요.\n4. ChatGPT를 설정에서 중립적으로 만들 수 있나요?\n네! \"Customize ChatGPT\" 기능을 활용하면 원하는 답변 스타일을 설정할 수 있어요.\n5. ChatGPT가 제공하는 정보를 100% 신뢰해도 될까요?\n아니요! AI는 참고용으로만 사용하고, 중요한 결정은 반드시 다른 신뢰할 만한 정보와 함께 고려해야 해요.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT는 왜 편향된 답변을 할까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT는 인터넷의 방대한 데이터를 학습했기 때문에 원천 데이터가 편향적이라면 답변도 영향을 받을 수 있어요. 또한, 사용자의 질문 방식에 따라 특정한 방향으로 답변이 조정될 수도 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT의 답변이 공정한지 확인하는 방법은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"하나의 답변만 믿지 말고, 같은 질문을 다르게 표현해서 여러 번 요청해보세요. 또한, 다른 정보 출처와 비교하는 것도 중요해요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"AI의 편향성을 최소화하는 가장 효과적인 방법은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"AI에게 특정한 역할을 부여하거나, 반대 의견을 요청하는 방식이 가장 효과적이에요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT를 설정에서 중립적으로 만들 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! 'Customize ChatGPT' 기능을 활용하면 원하는 답변 스타일을 설정할 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"ChatGPT가 제공하는 정보를 100% 신뢰해도 될까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아니요! AI는 참고용으로만 사용하고, 중요한 결정은 반드시 다른 신뢰할 만한 정보와 함께 고려해야 해요.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483548",
        "categories": [
          "AI, 미래기술/채팅",
          "ai 답변 조정",
          "ai 신뢰성",
          "AI 편향성",
          "ai 프롬프트",
          "AI 활용법",
          "ai와 정보 검증",
          "chatgpt 설정",
          "hatgpt",
          "공정한 답변",
          "중립적 ai"
        ],
        "isoDate": "2025-03-04T09:49:06.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "AI 기반 네이버 검색 알고리즘 업데이트 &ndash; SEO 전략은 어떻게 수정할까?",
        "link": "http://muzbox.tistory.com/483547",
        "pubDate": "Sun, 2 Mar 2025 15:27:35 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483547#entry483547comment",
        "content": "<p data-ke-size=\"size16\">네이버가 UGC 검색 시스템을 AI 기반으로 대폭 개편했습니다. 이제 단순 키워드 매칭이 아닌 <b>콘텐츠의 질과 신뢰성, 유사성까지 평가</b>하는데요. 검색 노출을 유지하려면 어떻게 해야 할까요? <b>네이버 SEO 최적화 전략</b>과 <b>검색 알고리즘 변화 대응법</b>을 깊이 있게 분석해 드립니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_AI 기반 네이버 검색 알고리즘 업데이트, SEO 전략은 어떻게 수정할까.jpg\" data-origin-width=\"1792\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/n4Sao/btsMyGuuUVC/336ktVfLGxVu5OwE5OZUmk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/n4Sao/btsMyGuuUVC/336ktVfLGxVu5OwE5OZUmk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/n4Sao/btsMyGuuUVC/336ktVfLGxVu5OwE5OZUmk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fn4Sao%2FbtsMyGuuUVC%2F336ktVfLGxVu5OwE5OZUmk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"AI 기반 네이버 검색 알고리즘 업데이트 &ndash; SEO 전략은 어떻게 수정할까?\" loading=\"lazy\" width=\"1792\" height=\"1024\" data-filename=\"edited_AI 기반 네이버 검색 알고리즘 업데이트, SEO 전략은 어떻게 수정할까.jpg\" data-origin-width=\"1792\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">\"이제 네이버 검색도 AI가 다 하는 건가요?\"</span></blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;네이버가 검색 시스템을 AI 중심으로 개편하면서, 많은 분들이 불안해하고 계시죠. \"내 콘텐츠가 검색에서 사라지면 어떡하지?\" \"키워드만 잘 넣으면 되는 거 아닌가?\" \"AI로 만든 글도 걸러진다는데, 그럼 앞으로 어떻게 해야 하지?\"</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">네이버의 <b>UGC(User-Generated Content) 검색 시스템 업데이트</b>는 단순한 변화가 아닙니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"color: #ee2323;\"><b>\"UGC 문서 노출 시스템이 더욱 정교하게 개선됩니다.\"</b></span>라는 제목으로 25년 2월 28일 공지한 이번 업데이트의 핵심은 <b>AI가 직접 콘텐츠를 평가하고, 비슷한 문서들을 자동으로 걸러내며, 검색 결과의 신뢰도를 높이는 방향으로 운영된다는 것</b>인데요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"네이버공지.jpg\" data-origin-width=\"958\" data-origin-height=\"1210\"><span data-url=\"https://blog.kakaocdn.net/dn/rErKR/btsMysQWoSb/0BxGBD6TcMk9gyovBDZz01/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/rErKR/btsMysQWoSb/0BxGBD6TcMk9gyovBDZz01/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/rErKR/btsMysQWoSb/0BxGBD6TcMk9gyovBDZz01/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FrErKR%2FbtsMysQWoSb%2F0BxGBD6TcMk9gyovBDZz01%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"958\" height=\"1210\" data-filename=\"네이버공지.jpg\" data-origin-width=\"958\" data-origin-height=\"1210\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그렇다면, 앞으로 콘텐츠 제작자들은 <b>어떤 전략을 가져야 할까요?</b><br />지금부터 <b>네이버 검색 알고리즘의 변화와 SEO 최적화 전략</b>을 하나씩 살펴보겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  네이버 UGC 검색 시스템 AI 업데이트, 뭐가 바뀌었나?</b></span></h2>\n<p data-ke-size=\"size16\">이번 네이버 검색 개편에서 가장 중요한 변화는 다음 세 가지입니다.</p>\n<h3 data-ke-size=\"size23\"><b>1️⃣ AI(Large Language Model) 기반 문서 평가 도입</b></h3>\n<p data-ke-size=\"size16\">네이버 검색 시스템은 이제 <b>단순 키워드 포함 여부가 아니라, 콘텐츠의 질과 맥락을 분석</b>합니다.<br />즉, 같은 키워드라도 <b>정보의 깊이와 신뢰도가 높은 콘텐츠가 더 잘 노출</b>된다는 뜻이죠.</p>\n<p data-ke-size=\"size16\">  <b>대응법:</b><br />✅ <b>얕은 정보 나열 대신, 심층적인 분석과 해석을 포함하세요.</b><br />✅ 출처가 확실한 데이터를 활용하고, <b>전문성을 강화</b>해야 합니다.<br />✅ 키워드를 단순 나열하는 방식은 더 이상 효과적이지 않습니다.</p>\n<h3 data-ke-size=\"size23\"><b>2️⃣ 유사 문서 판독 시스템 개선</b></h3>\n<p data-ke-size=\"size16\">이제 네이버는 <b>비슷한 내용의 문서들을 자동으로 걸러내고, 검색 노출을 제한</b>할 수 있습니다.<br />즉, 기존 콘텐츠를 단순히 복사하거나, AI가 생성한 비슷한 글을 여러 개 만들면 <b>노출이 어렵다</b>는 거죠.</p>\n<p data-ke-size=\"size16\">  <b>대응법:</b><br />✅ 기존 콘텐츠를 그대로 재활용하지 말고, <b>새로운 인사이트를 추가</b>하세요.<br />✅ 같은 주제라도 <b>차별화된 시각, 새로운 사례, 실전 경험</b>을 녹여야 합니다.<br />✅ 자동 생성된 AI 콘텐츠는 <b>사람이 직접 편집하고 수정</b>하는 것이 필수입니다.</p>\n<h3 data-ke-size=\"size23\"><b>3️⃣ AI 콘텐츠 필터링 강화</b></h3>\n<p data-ke-size=\"size16\">AI 기술이 발전하면서, 생성형 AI(예: ChatGPT)로 만든 콘텐츠가 무분별하게 늘어나고 있는데요.<br />네이버는 AI가 단순 생성한 글을 걸러내기 위해, <b>자동 생성 콘텐츠 필터링을 강화</b>했습니다.</p>\n<p data-ke-size=\"size16\">  <b>대응법:</b><br />✅ AI를 활용하더라도, <b>사람의 개입이 반드시 필요</b>합니다.<br />✅ <b>개인적인 경험, 사례 연구, 전문가 분석</b>을 포함해 오리지널리티를 높이세요.<br />✅ 생성형 AI가 제공하는 정보를 <b>그대로 사용하지 말고, 가공하고 재해석</b>해야 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  콘텐츠 제작자, 이렇게 대응하세요! (필수 체크리스트)</b></span></h2>\n<p data-ke-size=\"size16\">이번 네이버 검색 변화는 결국 <span style=\"color: #ee2323;\"><b>\"더 나은 콘텐츠를 만들라\"</b></span>는 메시지입니다.<br />그렇다면 <b>검색 순위를 유지하고, 오히려 더 높이기 위해서는 어떻게 해야 할까요?</b></p>\n<h3 data-ke-size=\"size23\"><b>✅ 1. 신뢰성과 전문성을 강화하세요 (가장 중요 )</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>단순 정보 제공이 아니라, <b>근거와 출처가 확실한 콘텐츠</b>를 만들어야 합니다.</li>\n<li>검증된 데이터, 공식적인 보고서, 전문가 인터뷰 등을 활용하세요.</li>\n<li>독자들이 신뢰할 수 있는 콘텐츠일수록 검색 노출이 유리합니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>✅ 2. 차별화된 인사이트를 제공하세요 (중요 )</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>\"어디서나 볼 수 있는 정보\"보다는, <b>나만의 해석과 분석을 담아야 합니다.</b></li>\n<li>사례 연구, 실전 경험, 전문가 의견 등을 추가하세요.</li>\n<li>기존 콘텐츠를 리메이크할 때도 <b>새로운 시각을 적용하는 것</b>이 필수입니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>✅ 3. 사용자 검색 의도를 반영하세요 (중요⚡)</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>검색하는 사람이 원하는 정보가 무엇인지 먼저 고민하세요.</li>\n<li>제목과 본문을 구성할 때, <b>사용자 질문을 직접 해결하는 방식</b>으로 작성하면 검색 순위에 유리합니다.</li>\n<li>검색 트렌드를 파악하고, 관련 키워드를 자연스럽게 반영하세요.</li>\n</ul>\n<h3 data-ke-size=\"size23\"><b>✅ 4. 콘텐츠 가독성을 높이세요 (중요⚡)</b></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>긴 문장은 짧게 나누고, 가독성을 높이는 것이 중요합니다.</li>\n<li><b>목차, 리스트, 볼드체, 이모지 등을 활용</b>해 정보를 쉽게 전달하세요.</li>\n<li>모바일에서도 읽기 편한 구조로 콘텐츠를 구성하세요.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  네이버 SEO 최적화를 위한 핵심 키워드</b></span></h2>\n<p data-ke-size=\"size16\">네이버 검색 노출을 최적화하려면 다음 8가지 키워드를 기억하세요.</p>\n<p data-ke-size=\"size16\">  <b>네이버 SEO, 네이버 검색 알고리즘, 네이버 검색 최적화, AI 콘텐츠 필터링, 유사 문서 판독, UGC 검색 최적화, 검색 노출 전략, 콘텐츠 신뢰성 강화</b></p>\n<p data-ke-size=\"size16\">이 키워드들을 자연스럽게 콘텐츠에 녹이면 <b>검색 순위를 높이는 데 도움이 됩니다.</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"naver-ugc-search-presentation.svg\" data-origin-width=\"84\" data-origin-height=\"150\"><span data-url=\"https://blog.kakaocdn.net/dn/bXb1ur/btsMzexKXtw/KTPjbt0JXUtMPx1h4FPbh1/tfile.svg\" data-phocus=\"https://blog.kakaocdn.net/dn/bXb1ur/btsMzexKXtw/KTPjbt0JXUtMPx1h4FPbh1/tfile.svg\" data-alt=\"&amp;lt;기사 요약&amp;gt;\"><img src=\"https://blog.kakaocdn.net/dn/bXb1ur/btsMzexKXtw/KTPjbt0JXUtMPx1h4FPbh1/tfile.svg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbXb1ur%2FbtsMzexKXtw%2FKTPjbt0JXUtMPx1h4FPbh1%2Ftfile.svg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"AI 기반 네이버 검색 알고리즘 업데이트\" loading=\"lazy\" width=\"800\" height=\"1429\" data-filename=\"naver-ugc-search-presentation.svg\" data-origin-width=\"84\" data-origin-height=\"150\"/></span><figcaption>&lt;기사 요약&gt;</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>마무리 &amp; 한마디</b></span></h2>\n<p data-ke-size=\"size16\">네이버 검색 알고리즘이 AI 중심으로 개편되면서, <b>단순 키워드 SEO는 이제 효과가 점점 줄어들고 있습니다.</b><br />앞으로는 <b>더 신뢰할 수 있는 정보, 차별화된 인사이트, 깊이 있는 콘텐츠가 살아남는 시대</b>입니다.</p>\n<p data-ke-size=\"size16\">  <b>여러분의 콘텐츠는 AI 시대에도 경쟁력이 있나요?</b><br />  <b>네이버 검색 알고리즘 변화에 맞춘 새로운 전략을 준비하고 계신가요?</b></p>\n<p data-ke-size=\"size16\">지금부터 <b>더 스마트한 콘텐츠 전략을 세워야 할 때입니다!</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<blockquote data-ke-style=\"style3\"><b>  네이버 검색 알고리즘 변화, 이제 제대로 준비해야 할 때입니다!  </b></blockquote>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><b>  Q&amp;A (자주 묻는 질문)</b></h2>\n<p data-ke-size=\"size16\">❓ <b>Q1. 네이버 검색에서 AI가 만든 콘텐츠는 모두 걸러지나요?</b><br />✅ 아닙니다. <b>AI 생성 콘텐츠라도 사람이 편집하고 가치를 추가하면 검색에 노출될 수 있습니다.</b></p>\n<p data-ke-size=\"size16\">❓ <b>Q2. 키워드 밀도가 높은 콘텐츠가 여전히 유리한가요?</b><br />✅ 키워드 밀도보다는 <b>문서의 질과 신뢰성</b>이 더 중요해졌습니다.</p>\n<p data-ke-size=\"size16\">❓ <b>Q3. 기존 콘텐츠를 수정해서 다시 올리면 검색 순위가 올라가나요?</b><br />✅ 단순 복사&amp;붙여넣기가 아닌 <b>새로운 인사이트를 추가한 개편된 콘텐츠</b>라면 검색 순위에 긍정적인 영향을 미칠 수 있습니다.</p>\n<p data-ke-size=\"size16\">❓ <b>Q4. 네이버 검색 알고리즘은 얼마나 자주 바뀌나요?</b><br />✅ 네이버는 지속적으로 검색 품질을 개선하고 있어, 정기적으로 알고리즘이 업데이트됩니다.</p>\n<p data-ke-size=\"size16\">❓ <b>Q5. 콘텐츠 신뢰성을 높이는 방법은 무엇인가요?</b><br />✅ 출처를 명확히 밝히고, 데이터를 기반으로 논리를 전개하며, 전문가 의견을 포함하는 것이 효과적입니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"네이버 검색에서 AI가 만든 콘텐츠는 모두 걸러지나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아닙니다. AI 생성 콘텐츠라도 사람이 직접 편집하고 가치를 추가하면 검색에 노출될 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"키워드 밀도가 높은 콘텐츠가 여전히 유리한가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"키워드 밀도보다는 문서의 질과 신뢰성이 더 중요한 요소가 되었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"기존 콘텐츠를 수정해서 다시 올리면 검색 순위가 올라가나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"단순 복사&붙여넣기가 아닌 새로운 인사이트를 추가한 개편된 콘텐츠라면 검색 순위에 긍정적인 영향을 미칠 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"네이버 검색 알고리즘은 얼마나 자주 바뀌나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네이버는 지속적으로 검색 품질을 개선하고 있어, 정기적으로 알고리즘이 업데이트됩니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"콘텐츠 신뢰성을 높이는 방법은 무엇인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"출처를 명확히 밝히고, 데이터를 기반으로 논리를 전개하며, 전문가 의견을 포함하는 것이 효과적입니다.\"\n      }\n    }\n  ]\n}\n</script>",
        "contentSnippet": "네이버가 UGC 검색 시스템을 AI 기반으로 대폭 개편했습니다. 이제 단순 키워드 매칭이 아닌 콘텐츠의 질과 신뢰성, 유사성까지 평가하는데요. 검색 노출을 유지하려면 어떻게 해야 할까요? 네이버 SEO 최적화 전략과 검색 알고리즘 변화 대응법을 깊이 있게 분석해 드립니다.\n\n\n \n\"이제 네이버 검색도 AI가 다 하는 건가요?\"\n \n 네이버가 검색 시스템을 AI 중심으로 개편하면서, 많은 분들이 불안해하고 계시죠. \"내 콘텐츠가 검색에서 사라지면 어떡하지?\" \"키워드만 잘 넣으면 되는 거 아닌가?\" \"AI로 만든 글도 걸러진다는데, 그럼 앞으로 어떻게 해야 하지?\"\n \n네이버의 UGC(User-Generated Content) 검색 시스템 업데이트는 단순한 변화가 아닙니다.\n \n\"UGC 문서 노출 시스템이 더욱 정교하게 개선됩니다.\"라는 제목으로 25년 2월 28일 공지한 이번 업데이트의 핵심은 AI가 직접 콘텐츠를 평가하고, 비슷한 문서들을 자동으로 걸러내며, 검색 결과의 신뢰도를 높이는 방향으로 운영된다는 것인데요.\n\n\n \n그렇다면, 앞으로 콘텐츠 제작자들은 어떤 전략을 가져야 할까요?\n지금부터 네이버 검색 알고리즘의 변화와 SEO 최적화 전략을 하나씩 살펴보겠습니다.\n \n \n  네이버 UGC 검색 시스템 AI 업데이트, 뭐가 바뀌었나?\n이번 네이버 검색 개편에서 가장 중요한 변화는 다음 세 가지입니다.\n1️⃣ AI(Large Language Model) 기반 문서 평가 도입\n네이버 검색 시스템은 이제 단순 키워드 포함 여부가 아니라, 콘텐츠의 질과 맥락을 분석합니다.\n즉, 같은 키워드라도 정보의 깊이와 신뢰도가 높은 콘텐츠가 더 잘 노출된다는 뜻이죠.\n  대응법:\n✅ 얕은 정보 나열 대신, 심층적인 분석과 해석을 포함하세요.\n✅ 출처가 확실한 데이터를 활용하고, 전문성을 강화해야 합니다.\n✅ 키워드를 단순 나열하는 방식은 더 이상 효과적이지 않습니다.\n2️⃣ 유사 문서 판독 시스템 개선\n이제 네이버는 비슷한 내용의 문서들을 자동으로 걸러내고, 검색 노출을 제한할 수 있습니다.\n즉, 기존 콘텐츠를 단순히 복사하거나, AI가 생성한 비슷한 글을 여러 개 만들면 노출이 어렵다는 거죠.\n  대응법:\n✅ 기존 콘텐츠를 그대로 재활용하지 말고, 새로운 인사이트를 추가하세요.\n✅ 같은 주제라도 차별화된 시각, 새로운 사례, 실전 경험을 녹여야 합니다.\n✅ 자동 생성된 AI 콘텐츠는 사람이 직접 편집하고 수정하는 것이 필수입니다.\n3️⃣ AI 콘텐츠 필터링 강화\nAI 기술이 발전하면서, 생성형 AI(예: ChatGPT)로 만든 콘텐츠가 무분별하게 늘어나고 있는데요.\n네이버는 AI가 단순 생성한 글을 걸러내기 위해, 자동 생성 콘텐츠 필터링을 강화했습니다.\n  대응법:\n✅ AI를 활용하더라도, 사람의 개입이 반드시 필요합니다.\n✅ 개인적인 경험, 사례 연구, 전문가 분석을 포함해 오리지널리티를 높이세요.\n✅ 생성형 AI가 제공하는 정보를 그대로 사용하지 말고, 가공하고 재해석해야 합니다.\n \n \n  콘텐츠 제작자, 이렇게 대응하세요! (필수 체크리스트)\n이번 네이버 검색 변화는 결국 \"더 나은 콘텐츠를 만들라\"는 메시지입니다.\n그렇다면 검색 순위를 유지하고, 오히려 더 높이기 위해서는 어떻게 해야 할까요?\n✅ 1. 신뢰성과 전문성을 강화하세요 (가장 중요 )\n단순 정보 제공이 아니라, 근거와 출처가 확실한 콘텐츠를 만들어야 합니다.\n검증된 데이터, 공식적인 보고서, 전문가 인터뷰 등을 활용하세요.\n독자들이 신뢰할 수 있는 콘텐츠일수록 검색 노출이 유리합니다.\n✅ 2. 차별화된 인사이트를 제공하세요 (중요 )\n\"어디서나 볼 수 있는 정보\"보다는, 나만의 해석과 분석을 담아야 합니다.\n사례 연구, 실전 경험, 전문가 의견 등을 추가하세요.\n기존 콘텐츠를 리메이크할 때도 새로운 시각을 적용하는 것이 필수입니다.\n✅ 3. 사용자 검색 의도를 반영하세요 (중요⚡)\n검색하는 사람이 원하는 정보가 무엇인지 먼저 고민하세요.\n제목과 본문을 구성할 때, 사용자 질문을 직접 해결하는 방식으로 작성하면 검색 순위에 유리합니다.\n검색 트렌드를 파악하고, 관련 키워드를 자연스럽게 반영하세요.\n✅ 4. 콘텐츠 가독성을 높이세요 (중요⚡)\n긴 문장은 짧게 나누고, 가독성을 높이는 것이 중요합니다.\n목차, 리스트, 볼드체, 이모지 등을 활용해 정보를 쉽게 전달하세요.\n모바일에서도 읽기 편한 구조로 콘텐츠를 구성하세요.\n \n  네이버 SEO 최적화를 위한 핵심 키워드\n네이버 검색 노출을 최적화하려면 다음 8가지 키워드를 기억하세요.\n  네이버 SEO, 네이버 검색 알고리즘, 네이버 검색 최적화, AI 콘텐츠 필터링, 유사 문서 판독, UGC 검색 최적화, 검색 노출 전략, 콘텐츠 신뢰성 강화\n이 키워드들을 자연스럽게 콘텐츠에 녹이면 검색 순위를 높이는 데 도움이 됩니다.\n \n<기사 요약>\n\n\n \n \n마무리 & 한마디\n네이버 검색 알고리즘이 AI 중심으로 개편되면서, 단순 키워드 SEO는 이제 효과가 점점 줄어들고 있습니다.\n앞으로는 더 신뢰할 수 있는 정보, 차별화된 인사이트, 깊이 있는 콘텐츠가 살아남는 시대입니다.\n  여러분의 콘텐츠는 AI 시대에도 경쟁력이 있나요?\n  네이버 검색 알고리즘 변화에 맞춘 새로운 전략을 준비하고 계신가요?\n지금부터 더 스마트한 콘텐츠 전략을 세워야 할 때입니다!\n \n  네이버 검색 알고리즘 변화, 이제 제대로 준비해야 할 때입니다!  \n  Q&A (자주 묻는 질문)\n❓ Q1. 네이버 검색에서 AI가 만든 콘텐츠는 모두 걸러지나요?\n✅ 아닙니다. AI 생성 콘텐츠라도 사람이 편집하고 가치를 추가하면 검색에 노출될 수 있습니다.\n❓ Q2. 키워드 밀도가 높은 콘텐츠가 여전히 유리한가요?\n✅ 키워드 밀도보다는 문서의 질과 신뢰성이 더 중요해졌습니다.\n❓ Q3. 기존 콘텐츠를 수정해서 다시 올리면 검색 순위가 올라가나요?\n✅ 단순 복사&붙여넣기가 아닌 새로운 인사이트를 추가한 개편된 콘텐츠라면 검색 순위에 긍정적인 영향을 미칠 수 있습니다.\n❓ Q4. 네이버 검색 알고리즘은 얼마나 자주 바뀌나요?\n✅ 네이버는 지속적으로 검색 품질을 개선하고 있어, 정기적으로 알고리즘이 업데이트됩니다.\n❓ Q5. 콘텐츠 신뢰성을 높이는 방법은 무엇인가요?\n✅ 출처를 명확히 밝히고, 데이터를 기반으로 논리를 전개하며, 전문가 의견을 포함하는 것이 효과적입니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"네이버 검색에서 AI가 만든 콘텐츠는 모두 걸러지나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아닙니다. AI 생성 콘텐츠라도 사람이 직접 편집하고 가치를 추가하면 검색에 노출될 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"키워드 밀도가 높은 콘텐츠가 여전히 유리한가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"키워드 밀도보다는 문서의 질과 신뢰성이 더 중요한 요소가 되었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"기존 콘텐츠를 수정해서 다시 올리면 검색 순위가 올라가나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"단순 복사&붙여넣기가 아닌 새로운 인사이트를 추가한 개편된 콘텐츠라면 검색 순위에 긍정적인 영향을 미칠 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"네이버 검색 알고리즘은 얼마나 자주 바뀌나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네이버는 지속적으로 검색 품질을 개선하고 있어, 정기적으로 알고리즘이 업데이트됩니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"콘텐츠 신뢰성을 높이는 방법은 무엇인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"출처를 명확히 밝히고, 데이터를 기반으로 논리를 전개하며, 전문가 의견을 포함하는 것이 효과적입니다.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483547",
        "categories": [
          "NEWS/IT 뉴스",
          "ai 검색 알고리즘",
          "ai 콘텐츠 필터링",
          "SEO 전략",
          "ugc 검색 변화",
          "검색 순위 상승",
          "네이버 seo",
          "네이버 검색 노출",
          "네이버 검색 최적화",
          "유사 문서 판독",
          "콘텐츠 마케팅"
        ],
        "isoDate": "2025-03-02T06:27:35.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "챗GPT 딥리서치 완벽 활용법! 실패 없는 프롬프트 작성을 위한 무료 GPTS 공개",
        "link": "http://muzbox.tistory.com/483546",
        "pubDate": "Thu, 27 Feb 2025 14:57:46 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483546#entry483546comment",
        "content": "<p data-ke-size=\"size16\">챗GPT의 딥리서치 기능을 최대한 활용하려면 제대로 된 프롬프트가 필요합니다. 한 달에 10번만 사용 가능한 챗GPT 딥리서치를 완벽하게 수행할 수 있도록 돕는 <b>\"챗GPT 딥리서치 프롬프트 아키텍트\"</b>를 무료로 공개합니다. 심층 연구가 필요한 분들은 꼭 확인하세요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_챗GPT딥리서치용 무료GPTS.jpg\" data-origin-width=\"2752\" data-origin-height=\"1536\"><span data-url=\"https://blog.kakaocdn.net/dn/bNS6ks/btsMxsv6UDn/CJ02QZXMsYazt5yDgegbqK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bNS6ks/btsMxsv6UDn/CJ02QZXMsYazt5yDgegbqK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bNS6ks/btsMxsv6UDn/CJ02QZXMsYazt5yDgegbqK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbNS6ks%2FbtsMxsv6UDn%2FCJ02QZXMsYazt5yDgegbqK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"챗GPT 딥리서치 완벽 활용법! 실패 없는 프롬프트 작성을 위한 무료 GPTS 공개\" loading=\"lazy\" width=\"2752\" height=\"1536\" data-filename=\"edited_챗GPT딥리서치용 무료GPTS.jpg\" data-origin-width=\"2752\" data-origin-height=\"1536\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">챗GPT를 사용할 때 가장 중요한 것이 <b>프롬프트 작성법</b>이라는 점, 많이들 공감하시죠? 특히 한 달에 10번만 딥리서치 기능을 사용할 수 있다면, 매번 실패 없이 최적의 결과를 얻는 것이 필수입니다. 하지만 <b>어떤 질문을 해야 원하는 정보를 얻을 수 있는지</b> 고민하는 분들이 많아요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">그래서 준비했습니다!   \"챗GPT 딥리서치 프롬프트 아키텍트\"  </span></blockquote>\n<p data-ke-size=\"size16\"><br />이 GPTS는 사용자가 간단한 키워드만 입력하면, <b>심층 연구 결과를 얻기 위한 최적의 프롬프트를 자동으로 생성</b>해 줍니다. 단순히 질문을 던지는 것이 아니라, <b>출처 지정, 관점 확장, 후속 질문 유도 등</b> 딥리서치를 위한 완벽한 틀을 제공하죠.</p>\n<p data-ke-size=\"size16\">이제 <b>챗GPT의 딥리서치 기회를 낭비하지 않고</b>, 매번 최상의 결과를 얻는 방법을 알려드릴게요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>✅ 딥리서치를 위한 최적화된 프롬프트 생성 방식</b></span></h2>\n<p data-ke-size=\"size16\">이 GPTS는 단순히 &ldquo;XX에 대해 알려줘&rdquo;라고 묻는 것이 아니라, <b>연구 수준의 답변을 얻을 수 있도록 구조화된 질문을 자동으로 생성</b>합니다.</p>\n<h3 data-ke-size=\"size23\">  1. 사용자 입력 분석</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용자가 입력한 <b>주제나 키워드</b>의 의미를 분석</li>\n<li>해당 주제가 포함하는 <b>잠재적 하위 주제</b> 파악</li>\n<li>연구에 필요한 <b>관련 개념 및 맥락</b> 설정</li>\n</ul>\n<h3 data-ke-size=\"size23\">❓ 2. 맥락 강화 질문 포함</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용자의 <b>현재 지식 수준</b>을 기반으로 맞춤형 질문 생성</li>\n<li>주제에 대한 <b>배경 정보 요청</b> 포함</li>\n<li><b>의식의 흐름을 유도하는 질문</b>을 추가해 깊이 있는 답변을 얻도록 설계</li>\n</ul>\n<h3 data-ke-size=\"size23\">  3. 출처 및 관점 지정</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>단순한 정보가 아닌 <b>신뢰할 수 있는 출처(학술, 정부, 산업 보고서 등) 활용</b></li>\n<li>특정 주제를 <b>다양한 관점(역사적, 문화적, 직업적)에서 분석</b></li>\n<li>비교 분석을 위한 <b>다중 출처 요청 방법 적용</b></li>\n</ul>\n<h3 data-ke-size=\"size23\">  4. 원하는 출력 형식 지정</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>표, 요약, 단계별 분석</b> 등 원하는 형태의 출력 요청 가능</li>\n<li><b>데이터를 시각적으로 구성하는 방법</b>까지 포함</li>\n<li>단순한 설명이 아닌 <b>실행 가능한 인사이트 중심 구성</b></li>\n</ul>\n<h3 data-ke-size=\"size23\">  5. 후속 질문 유도</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>결과 검증 및 추가 탐구를 위한 <b>후속 질문 제시</b></li>\n<li>더 깊이 있는 분석이 필요할 경우 <b>프롬프트 개선 전략 제공</b></li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  실제 적용 사례</b></span></h2>\n<p data-ke-size=\"size16\">사용자가<b> \"현대&middot;기아차의 글로벌 자동차 시장 미래 전망\"</b>에 대해 연구하고 싶다면?<br />이 GPTS가 <b>자동으로 최적화된 프롬프트를 생성</b>해 줍니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"849\" data-origin-height=\"456\"><span data-url=\"https://blog.kakaocdn.net/dn/xNhBX/btsMx6Gc8fa/3qc0Yd05xuu159EeUnYj10/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/xNhBX/btsMx6Gc8fa/3qc0Yd05xuu159EeUnYj10/img.png\"><img src=\"https://blog.kakaocdn.net/dn/xNhBX/btsMx6Gc8fa/3qc0Yd05xuu159EeUnYj10/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxNhBX%2FbtsMx6Gc8fa%2F3qc0Yd05xuu159EeUnYj10%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"849\" height=\"456\" data-filename=\"blob\" data-origin-width=\"849\" data-origin-height=\"456\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\">  <b>최종 프롬프트 예시</b></h3>\n<p data-ke-size=\"size16\">  <b>현대&middot;기아차의 글로벌 자동차 시장 미래 전망 심층 분석 프롬프트</b></p>\n<p data-ke-size=\"size16\">  <b>배경 및 맥락:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>현대자동차와 기아자동차의 <b>글로벌 시장에서의 현재 입지</b>에 대해 알고 계신 내용을 공유해 주세요.</li>\n<li>이 주제를 연구하는 이유와 <b>얻고자 하는 특정 인사이트</b>를 알려주세요.</li>\n<li>현대&middot;기아차 관련 <b>개인적 경험이나 관찰</b>이 있다면 자유롭게 설명해 주세요.</li>\n</ul>\n<p data-ke-size=\"size16\">  <b>출처 및 관점:</b><br />다음과 같은 다양한 출처에서 정보를 종합해 주세요:<br />✅ 관련 학술 논문 및 자동차 산업 연구<br />✅ 정부 및 공식 기관의 자동차 산업 데이터<br />✅ 최신 산업 보고서 및 전문가 의견</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그리고 다음 관점들을 포함해 주세요:<br />✅ 자동차 산업 분석가의 시각<br />✅ 역사적 vs. 현대적 시장 점유율 변화 비교<br />✅ 글로벌 시장에서의 전략 분석<br />✅ 전기차 및 친환경 차량 도입 평가</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">  <b>출력 형식:</b><br />✅ 주요 전략, 판매 데이터, 시장 점유율 변화 등을 포함한 <b>명확한 표 형식 제공</b><br />✅ 향후 5년간 예상되는 시장 동향과 전략을 <b>3단계 요약</b><br />✅ 중요 인사이트에 대한 <b>구체적인 예시와 적용 방법 포함</b><br />✅ 각 섹션에서 <b>정보의 신뢰성과 관련성 평가</b></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">❓ <b>결과 개선을 위한 후속 질문:</b></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>이 분석에서 놓친 중요한 측면이 있나요?</li>\n<li>어떤 지역 시장에서 더 깊이 있는 탐구가 필요한가요?</li>\n<li>현대&middot;기아차의 전략을 다른 글로벌 자동차 제조사와 비교하면 어떤 차이가 있을까요?</li>\n</ul>\n<h4 data-ke-size=\"size20\"><i><span style=\"color: #006dd7;\"><b>[사용과정 영상]</b></span></i></h4>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"kakaotv\" data-video-url=\"https://tv.kakao.com/v/453315604\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bG0dSG/hyYjpOk30D/jWH7tqFa89KUfTUkpi2tgk/img.jpg?width=1708&amp;height=1080&amp;face=0_0_1708_1080,https://scrap.kakaocdn.net/dn/fUYEY/hyYm4BGgeG/uyLPMS3xPraGKdLz0WqGF1/img.jpg?width=1708&amp;height=1080&amp;face=0_0_1708_1080\" data-video-width=\"860\" data-video-height=\"544\" data-video-origin-width=\"860\" data-video-origin-height=\"544\" data-ke-mobilestyle=\"widthContent\" data-video-play-service=\"daum_tistory\" data-original-url=\"\" data-video-title=\"\"><iframe src=\"https://play-tv.kakao.com/embed/player/cliplink/453315604?service=daum_tistory\" width=\"860\" height=\"544\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><span style=\"color: #006dd7;\"><b>[이 프롬프트로 생성한 결과물 PDF 파일. 보고서 생성에 약 15분 소요]</b></span></h4>\n<p><figure class=\"fileblock\" data-ke-align=\"alignCenter\"><a href=\"https://blog.kakaocdn.net/dn/Unz4X/btsMyCLybZL/PYuPMi0X9dT6sHvmADDZmk/%ED%98%84%EB%8C%80%26middot%3B%EA%B8%B0%EC%95%84%EC%B0%A8%EC%9D%98%20%EA%B8%80%EB%A1%9C%EB%B2%8C%20%EC%9E%90%EB%8F%99%EC%B0%A8%20%EC%8B%9C%EC%9E%A5%EC%97%90%EC%84%9C%EC%9D%98%20%ED%98%84%EC%9E%AC%20%EC%9C%84%EC%B9%98%EC%99%80%20%EB%AF%B8%EB%9E%98%20%EC%A0%84%EB%9E%B5.pdf?attach=1&amp;knm=tfile.pdf\" class=\"\">\n    <div class=\"image\"></div>\n    <div class=\"desc\"><div class=\"filename\"><span class=\"name\">현대&amp;middot;기아차의 글로벌 자동차 시장에서의 현재 위치와 미래 전략.pdf</span></div>\n<div class=\"size\">0.50MB</div>\n</div>\n  </a></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 id=\"section-12\" style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b> &nbsp;GPTS&nbsp;무료배포</b></span></h2>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;약간의 지식과 시간만 투자하면 누구나 직접 제작하고 활용할 수 있는 유용한 GPTs가 이미 많이 존재합니다. 그러나 여전히 AI 기술에 대한 낯선 접근을 두려워하거나 IT 초보자, 또는 시간적 여유가 없거나 수익화에 대한 절실함 때문에 올바른 정보를 얻지 못하는 사람들이 많습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이러한&nbsp;심리를&nbsp;악용해&nbsp;과도한&nbsp;가격으로&nbsp;유료&nbsp;강의를&nbsp;판매하며&nbsp;불필요한&nbsp;부담을&nbsp;주는&nbsp;사례들이&nbsp;늘어나고&nbsp;있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;<span style=\"color: #ee2323;\"><b>이에 본 블로그에서는 모든 사람이 AI의 혜택을 공정하고 자유롭게 누릴 수 있도록 GPTs를 무료로 배포하며, 불합리한 강의 판매 행위를 단호히 배척하고자 합니다. (당연히 저도 무료 그 이상의 가치가 있는 챗봇이라면 유료화를 검토중입니다.)</b></span></p>\n<center><figure id=\"og_1740636794233\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"ChatGPT - 챗GPT 딥리서치 프롬프트 아키텍트\" data-og-description=\"모든 주제에 대한 심층 연구 프롬프트를 생성할 수 있습니다.\" data-og-host=\"chatgpt.com\" data-og-source-url=\"https://chatgpt.com/g/g-67bfb09513648191a2d188e90d708def-caesgpt-dibriseoci-peurompeuteu-akitegteu\" data-og-url=\"https://chatgpt.com/g/g-67bfb09513648191a2d188e90d708def-caesgpt-dibriseoci-peurompeuteu-akitegteu\" data-og-image=\"\"><a href=\"https://chatgpt.com/g/g-67bfb09513648191a2d188e90d708def-caesgpt-dibriseoci-peurompeuteu-akitegteu\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://chatgpt.com/g/g-67bfb09513648191a2d188e90d708def-caesgpt-dibriseoci-peurompeuteu-akitegteu\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">ChatGPT - 챗GPT 딥리서치 프롬프트 아키텍트</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">모든 주제에 대한 심층 연구 프롬프트를 생성할 수 있습니다.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">chatgpt.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<figure id=\"og_1740636820573\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"ChatGPT 구독 고민된다면 겜스고로 저렴하게 먼저 체험해보세요\" data-og-description=\"ChatGPT 플러스나 프로를 구독하기 전에, 먼저 저렴하게 체험해볼 수 있는 방법이 있습니다. 겜스고(Gamsgo)를 활용하면 공식 요금제 대비 최대 60~70% 저렴하게 AI를 경험할 수 있는데요.&nbsp;GPT를 처음 \" data-og-host=\"muzbox.tistory.com\" data-og-source-url=\"https://muzbox.tistory.com/483542\" data-og-url=\"https://muzbox.tistory.com/483542\" data-og-image=\"https://scrap.kakaocdn.net/dn/eAPh3/hyYjsK2TLT/NVBF3ZwCxY0xRF1WTk8bWk/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/kDJLt/hyYjDFH5iL/KN78WxUoTEUO0RkfuBPj81/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/eI1sW/hyYjmKfaM0/078XIjhGPQcpr5CoqkRtsK/img.png?width=1792&amp;height=1024&amp;face=0_0_1792_1024\"><a href=\"https://muzbox.tistory.com/483542\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://muzbox.tistory.com/483542\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/eAPh3/hyYjsK2TLT/NVBF3ZwCxY0xRF1WTk8bWk/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/kDJLt/hyYjDFH5iL/KN78WxUoTEUO0RkfuBPj81/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/eI1sW/hyYjmKfaM0/078XIjhGPQcpr5CoqkRtsK/img.png?width=1792&amp;height=1024&amp;face=0_0_1792_1024');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">ChatGPT 구독 고민된다면 겜스고로 저렴하게 먼저 체험해보세요</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">ChatGPT 플러스나 프로를 구독하기 전에, 먼저 저렴하게 체험해볼 수 있는 방법이 있습니다. 겜스고(Gamsgo)를 활용하면 공식 요금제 대비 최대 60~70% 저렴하게 AI를 경험할 수 있는데요.&nbsp;GPT를 처음</p>\n<p class=\"og-host\" data-ke-size=\"size16\">muzbox.tistory.com</p>\n</div>\n</a></figure>\n</center>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">  자주 묻는 질문 (FAQ)</h2>\n<p data-ke-size=\"size16\"><b>1. 챗GPT 딥리서치 기능이 정확히 뭔가요?</b></p>\n<p data-ke-size=\"size16\">챗GPT에서 <b>더 심층적인 분석과 연구 수준의 답변</b>을 제공하는 기능입니다. 하지만 <b>한 달에 10번만 사용 가능</b>하기 때문에, 반드시 효과적인 프롬프트를 사용해야 합니다.</p>\n<p data-ke-size=\"size16\"><b>2. 이 GPTS는 어떻게 무료로 사용할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">OpenAI에서 제공하는 GPTS 기능을 활용한 맞춤형 도구입니다. 별도의 가입 없이 무료로 사용하실 수 있어요.</p>\n<p data-ke-size=\"size16\"><b>3. 연구 외에도 활용할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">네! 딥리서치뿐만 아니라 <b>비즈니스 분석, 기술 연구, 마케팅 전략 수립</b> 등 다양한 분야에서 활용 가능합니다.</p>\n<p data-ke-size=\"size16\"><b>4. 기존 챗GPT 프롬프트와 뭐가 다른가요?</b></p>\n<p data-ke-size=\"size16\">일반적인 질문이 아닌 <b>구조화된 심층 분석 프롬프트</b>를 자동으로 생성해 줍니다. 단순한 답변이 아니라, <b>출처, 관점, 후속 질문까지 포함된 연구 프레임워크</b>를 제공합니다.</p>\n<p data-ke-size=\"size16\"><b>5. 사용 방법이 어렵진 않나요?</b></p>\n<p data-ke-size=\"size16\">아니요! 단순히 키워드를 입력하면 <b>자동으로 완벽한 프롬프트가 생성</b>되기 때문에, 누구나 쉽게 활용할 수 있습니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"챗GPT 딥리서치 기능이 정확히 뭔가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"챗GPT에서 더 심층적인 분석과 연구 수준의 답변을 제공하는 기능입니다. 하지만 한 달에 10번만 사용 가능하기 때문에, 반드시 효과적인 프롬프트를 사용해야 합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"이 GPTS는 어떻게 무료로 사용할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI에서 제공하는 GPTS 기능을 활용한 맞춤형 도구입니다. 별도의 가입 없이 무료로 사용하실 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"연구 외에도 활용할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! 딥리서치뿐만 아니라 비즈니스 분석, 기술 연구, 마케팅 전략 수립 등 다양한 분야에서 활용 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"기존 챗GPT 프롬프트와 뭐가 다른가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"일반적인 질문이 아닌 구조화된 심층 분석 프롬프트를 자동으로 생성해 줍니다. 단순한 답변이 아니라, 출처, 관점, 후속 질문까지 포함된 연구 프레임워크를 제공합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"사용 방법이 어렵진 않나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아니요! 단순히 키워드를 입력하면 자동으로 완벽한 프롬프트가 생성되기 때문에, 누구나 쉽게 활용할 수 있습니다.\"\n      }\n    }\n  ]\n}\n</script>",
        "contentSnippet": "챗GPT의 딥리서치 기능을 최대한 활용하려면 제대로 된 프롬프트가 필요합니다. 한 달에 10번만 사용 가능한 챗GPT 딥리서치를 완벽하게 수행할 수 있도록 돕는 \"챗GPT 딥리서치 프롬프트 아키텍트\"를 무료로 공개합니다. 심층 연구가 필요한 분들은 꼭 확인하세요!\n\n\n \n챗GPT를 사용할 때 가장 중요한 것이 프롬프트 작성법이라는 점, 많이들 공감하시죠? 특히 한 달에 10번만 딥리서치 기능을 사용할 수 있다면, 매번 실패 없이 최적의 결과를 얻는 것이 필수입니다. 하지만 어떤 질문을 해야 원하는 정보를 얻을 수 있는지 고민하는 분들이 많아요.\n \n그래서 준비했습니다!   \"챗GPT 딥리서치 프롬프트 아키텍트\"  \n이 GPTS는 사용자가 간단한 키워드만 입력하면, 심층 연구 결과를 얻기 위한 최적의 프롬프트를 자동으로 생성해 줍니다. 단순히 질문을 던지는 것이 아니라, 출처 지정, 관점 확장, 후속 질문 유도 등 딥리서치를 위한 완벽한 틀을 제공하죠.\n이제 챗GPT의 딥리서치 기회를 낭비하지 않고, 매번 최상의 결과를 얻는 방법을 알려드릴게요.\n \n✅ 딥리서치를 위한 최적화된 프롬프트 생성 방식\n이 GPTS는 단순히 “XX에 대해 알려줘”라고 묻는 것이 아니라, 연구 수준의 답변을 얻을 수 있도록 구조화된 질문을 자동으로 생성합니다.\n  1. 사용자 입력 분석\n사용자가 입력한 주제나 키워드의 의미를 분석\n해당 주제가 포함하는 잠재적 하위 주제 파악\n연구에 필요한 관련 개념 및 맥락 설정\n❓ 2. 맥락 강화 질문 포함\n사용자의 현재 지식 수준을 기반으로 맞춤형 질문 생성\n주제에 대한 배경 정보 요청 포함\n의식의 흐름을 유도하는 질문을 추가해 깊이 있는 답변을 얻도록 설계\n  3. 출처 및 관점 지정\n단순한 정보가 아닌 신뢰할 수 있는 출처(학술, 정부, 산업 보고서 등) 활용\n특정 주제를 다양한 관점(역사적, 문화적, 직업적)에서 분석\n비교 분석을 위한 다중 출처 요청 방법 적용\n  4. 원하는 출력 형식 지정\n표, 요약, 단계별 분석 등 원하는 형태의 출력 요청 가능\n데이터를 시각적으로 구성하는 방법까지 포함\n단순한 설명이 아닌 실행 가능한 인사이트 중심 구성\n  5. 후속 질문 유도\n결과 검증 및 추가 탐구를 위한 후속 질문 제시\n더 깊이 있는 분석이 필요할 경우 프롬프트 개선 전략 제공\n \n  실제 적용 사례\n사용자가 \"현대·기아차의 글로벌 자동차 시장 미래 전망\"에 대해 연구하고 싶다면?\n이 GPTS가 자동으로 최적화된 프롬프트를 생성해 줍니다.\n\n\n \n  최종 프롬프트 예시\n  현대·기아차의 글로벌 자동차 시장 미래 전망 심층 분석 프롬프트\n  배경 및 맥락:\n현대자동차와 기아자동차의 글로벌 시장에서의 현재 입지에 대해 알고 계신 내용을 공유해 주세요.\n이 주제를 연구하는 이유와 얻고자 하는 특정 인사이트를 알려주세요.\n현대·기아차 관련 개인적 경험이나 관찰이 있다면 자유롭게 설명해 주세요.\n  출처 및 관점:\n다음과 같은 다양한 출처에서 정보를 종합해 주세요:\n✅ 관련 학술 논문 및 자동차 산업 연구\n✅ 정부 및 공식 기관의 자동차 산업 데이터\n✅ 최신 산업 보고서 및 전문가 의견\n \n그리고 다음 관점들을 포함해 주세요:\n✅ 자동차 산업 분석가의 시각\n✅ 역사적 vs. 현대적 시장 점유율 변화 비교\n✅ 글로벌 시장에서의 전략 분석\n✅ 전기차 및 친환경 차량 도입 평가\n \n  출력 형식:\n✅ 주요 전략, 판매 데이터, 시장 점유율 변화 등을 포함한 명확한 표 형식 제공\n✅ 향후 5년간 예상되는 시장 동향과 전략을 3단계 요약\n✅ 중요 인사이트에 대한 구체적인 예시와 적용 방법 포함\n✅ 각 섹션에서 정보의 신뢰성과 관련성 평가\n \n❓ 결과 개선을 위한 후속 질문:\n이 분석에서 놓친 중요한 측면이 있나요?\n어떤 지역 시장에서 더 깊이 있는 탐구가 필요한가요?\n현대·기아차의 전략을 다른 글로벌 자동차 제조사와 비교하면 어떤 차이가 있을까요?\n[사용과정 영상]\n\n\n\n \n[이 프롬프트로 생성한 결과물 PDF 파일. 보고서 생성에 약 15분 소요]\n\n    \n\n    \n현대&middot;기아차의 글로벌 자동차 시장에서의 현재 위치와 미래 전략.pdf\n0.50MB\n\n\n \n \n  GPTS 무료배포\n 약간의 지식과 시간만 투자하면 누구나 직접 제작하고 활용할 수 있는 유용한 GPTs가 이미 많이 존재합니다. 그러나 여전히 AI 기술에 대한 낯선 접근을 두려워하거나 IT 초보자, 또는 시간적 여유가 없거나 수익화에 대한 절실함 때문에 올바른 정보를 얻지 못하는 사람들이 많습니다. \n이러한 심리를 악용해 과도한 가격으로 유료 강의를 판매하며 불필요한 부담을 주는 사례들이 늘어나고 있습니다.\n \n 이에 본 블로그에서는 모든 사람이 AI의 혜택을 공정하고 자유롭게 누릴 수 있도록 GPTs를 무료로 배포하며, 불합리한 강의 판매 행위를 단호히 배척하고자 합니다. (당연히 저도 무료 그 이상의 가치가 있는 챗봇이라면 유료화를 검토중입니다.)\n\n \nChatGPT - 챗GPT 딥리서치 프롬프트 아키텍트\n모든 주제에 대한 심층 연구 프롬프트를 생성할 수 있습니다.\nchatgpt.com\n\n \n \n \n\n \nChatGPT 구독 고민된다면 겜스고로 저렴하게 먼저 체험해보세요\nChatGPT 플러스나 프로를 구독하기 전에, 먼저 저렴하게 체험해볼 수 있는 방법이 있습니다. 겜스고(Gamsgo)를 활용하면 공식 요금제 대비 최대 60~70% 저렴하게 AI를 경험할 수 있는데요. GPT를 처음\nmuzbox.tistory.com\n\n\n \n  자주 묻는 질문 (FAQ)\n1. 챗GPT 딥리서치 기능이 정확히 뭔가요?\n챗GPT에서 더 심층적인 분석과 연구 수준의 답변을 제공하는 기능입니다. 하지만 한 달에 10번만 사용 가능하기 때문에, 반드시 효과적인 프롬프트를 사용해야 합니다.\n2. 이 GPTS는 어떻게 무료로 사용할 수 있나요?\nOpenAI에서 제공하는 GPTS 기능을 활용한 맞춤형 도구입니다. 별도의 가입 없이 무료로 사용하실 수 있어요.\n3. 연구 외에도 활용할 수 있나요?\n네! 딥리서치뿐만 아니라 비즈니스 분석, 기술 연구, 마케팅 전략 수립 등 다양한 분야에서 활용 가능합니다.\n4. 기존 챗GPT 프롬프트와 뭐가 다른가요?\n일반적인 질문이 아닌 구조화된 심층 분석 프롬프트를 자동으로 생성해 줍니다. 단순한 답변이 아니라, 출처, 관점, 후속 질문까지 포함된 연구 프레임워크를 제공합니다.\n5. 사용 방법이 어렵진 않나요?\n아니요! 단순히 키워드를 입력하면 자동으로 완벽한 프롬프트가 생성되기 때문에, 누구나 쉽게 활용할 수 있습니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"챗GPT 딥리서치 기능이 정확히 뭔가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"챗GPT에서 더 심층적인 분석과 연구 수준의 답변을 제공하는 기능입니다. 하지만 한 달에 10번만 사용 가능하기 때문에, 반드시 효과적인 프롬프트를 사용해야 합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"이 GPTS는 어떻게 무료로 사용할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI에서 제공하는 GPTS 기능을 활용한 맞춤형 도구입니다. 별도의 가입 없이 무료로 사용하실 수 있어요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"연구 외에도 활용할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네! 딥리서치뿐만 아니라 비즈니스 분석, 기술 연구, 마케팅 전략 수립 등 다양한 분야에서 활용 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"기존 챗GPT 프롬프트와 뭐가 다른가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"일반적인 질문이 아닌 구조화된 심층 분석 프롬프트를 자동으로 생성해 줍니다. 단순한 답변이 아니라, 출처, 관점, 후속 질문까지 포함된 연구 프레임워크를 제공합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"사용 방법이 어렵진 않나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"아니요! 단순히 키워드를 입력하면 자동으로 완벽한 프롬프트가 생성되기 때문에, 누구나 쉽게 활용할 수 있습니다.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483546",
        "categories": [
          "AI, 미래기술/채팅",
          "ai 리서치",
          "GPT 활용법",
          "gpts 무료",
          "딥러닝 프롬프트",
          "심층 분석",
          "챗gpt 딥리서치",
          "챗gpt 연구",
          "챗GPT 프롬프트",
          "프롬프트 아키텍트",
          "프롬프트 최적화"
        ],
        "isoDate": "2025-02-27T05:57:46.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": [
      {
        "creator": "늑돌이",
        "title": "미니PC 강자 미니스포럼(MINISFORUM), 한국어 공식 홈페이지 오픈",
        "link": "http://lazion.com/2513739",
        "pubDate": "Fri, 28 Feb 2025 15:23:51 +0900",
        "author": "늑돌이",
        "comments": "http://lazion.com/2513739#entry2513739comment",
        "content": "<h3 data-ke-size=\"size23\">미니PC 업계에서 유명한 <b>미니스포럼(MINISFORUM)의 한국어 공식 홈페이지</b>(<a href=\"https://www.minisforum.kr/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.minisforum.kr/</a>)가 열렸습니다.</h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">미니스포럼은 Kommend Technology Co., Limited의 브랜드로, 중국 심천(Shenzen)에서 2012년부터 시작하여 만들어진 컴퓨터 제조사입니다. 다만 글로벌 페이지에서는 2018년부터 미니스포럼 브랜드가 만들어졌다고 하니 좀 혼란스럽네요.</p>\n<p data-ke-size=\"size16\">아무튼 다양한 <a href=\"https://lazion.com/tag/MINISFORUM\">미니PC 관련 제품을 내놓으면서 조금씩 유명해진 회사</a>입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">국내에서는 AMD 라이젠 프로세서를 채용한 UM 시리즈로 유명합니다만, 공식 판매 채널이 없어서 직구로만 구입 가능했고 AS는 사실상 불가능했죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"mj_Firefox_Screenshot_2025-02-28T03-13-52.257Z.jpg\" data-origin-width=\"2482\" data-origin-height=\"1902\"><span data-url=\"https://blog.kakaocdn.net/dn/MueKS/btsMykZbNwL/MZSiFdeoEKQOOBxO9QzAkK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/MueKS/btsMykZbNwL/MZSiFdeoEKQOOBxO9QzAkK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/MueKS/btsMykZbNwL/MZSiFdeoEKQOOBxO9QzAkK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMueKS%2FbtsMykZbNwL%2FMZSiFdeoEKQOOBxO9QzAkK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2482\" height=\"1902\" data-filename=\"mj_Firefox_Screenshot_2025-02-28T03-13-52.257Z.jpg\" data-origin-width=\"2482\" data-origin-height=\"1902\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><a href=\"https://www.minisforum.kr/\" target=\"_blank\" rel=\"noopener\">이번에 오픈한 미니스포럼 한국어 페이지</a>에서는 현재 몇몇 미니PC를 판매 중입니다. 다만 가격 면에서 직구보다는 아직 많이 비싸군요. 제품 보증이 중요한 분들이 선택하실 것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">참고로 미니스포럼 한국어 페이지에서 구입하는 경우 <b>12개월의 제한적인 보증</b>을 제공합니다. 그리고 제품을 받고 <b>30일 안에 초기 불량에 대해서는 교환 또는 환불</b>을 지원합니다.</p>\n<p data-ke-size=\"size16\">물론 우리나라에는 대리점이 없으므로 본사와 직접 제품을 주고 받아야 하니 시간은 좀 들어갈 것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><a href=\"https://www.minisforum.kr/pages/warranty-policy-and-returns\" target=\"_blank\" rel=\"noopener\">더 자세한 내용은 이곳을 확인</a>하시기 바랍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">당연한 이야기지만 여전히 리셀러를 통한 직구 방식으로 구입한 제품에 대해서는 어떤 보증도 해주지 않습니다. 구입처에 문의하거나 스스로 부품을 사서 해결하는 방법이 가능하겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(출처 : 미니스포럼)</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">실제로 아직 미니스포럼 한국어 페이지에서 직접 구입하여 후기를 남긴 고객이 없는지라 직구에 비해 얼마나 이득을 줄지는 모르겠지만 그래도 공식 창구가 생겼다는 점에서 일단 환영합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"text-align: left;\" data-ke-size=\"size20\">관련 글</h4>\n<figure id=\"og_1740723279710\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"미니스포럼 고성능 미니워크스테이션 MS-A1, 라이젠 8700G AM5 플랫폼의 미니PC 출시\" data-og-description=\"미니PC로 유명한 미니스포럼(Minisforum)에서 AMD 라이젠7 8700G를 지원하는 MS-A1을 출시합니다.&nbsp;&nbsp;Minisforum MS-A1의 주요 특징&nbsp;이 제품은 미니스포럼에서 내놓은 인텔 플랫폼 기반의 MS-01과 비슷한 하우\" data-og-host=\"lazion.com\" data-og-source-url=\"https://lazion.com/2513719\" data-og-url=\"https://lazion.com/2513719\" data-og-image=\"https://scrap.kakaocdn.net/dn/cRQxIg/hyYmTmMkE5/HJ3tPrDXoXHOD6Pd3EDTLk/img.jpg?width=800&amp;height=800&amp;face=0_0_800_800,https://scrap.kakaocdn.net/dn/8rSlI/hyYmYaxCYP/1yRAPS140RJQmJjKQWkwbk/img.jpg?width=800&amp;height=800&amp;face=0_0_800_800,https://scrap.kakaocdn.net/dn/bvjTcQ/hyYmYhjBuK/xyWk3KogUyXdlI2O7BEU70/img.jpg?width=2048&amp;height=1154&amp;face=0_0_2048_1154\"><a href=\"https://lazion.com/2513719\" rel=\"noopener\" data-source-url=\"https://lazion.com/2513719\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/cRQxIg/hyYmTmMkE5/HJ3tPrDXoXHOD6Pd3EDTLk/img.jpg?width=800&amp;height=800&amp;face=0_0_800_800,https://scrap.kakaocdn.net/dn/8rSlI/hyYmYaxCYP/1yRAPS140RJQmJjKQWkwbk/img.jpg?width=800&amp;height=800&amp;face=0_0_800_800,https://scrap.kakaocdn.net/dn/bvjTcQ/hyYmYhjBuK/xyWk3KogUyXdlI2O7BEU70/img.jpg?width=2048&amp;height=1154&amp;face=0_0_2048_1154');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">미니스포럼 고성능 미니워크스테이션 MS-A1, 라이젠 8700G AM5 플랫폼의 미니PC 출시</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">미니PC로 유명한 미니스포럼(Minisforum)에서 AMD 라이젠7 8700G를 지원하는 MS-A1을 출시합니다.&nbsp;&nbsp;Minisforum MS-A1의 주요 특징&nbsp;이 제품은 미니스포럼에서 내놓은 인텔 플랫폼 기반의 MS-01과 비슷한 하우</p>\n<p class=\"og-host\" data-ke-size=\"size16\">lazion.com</p>\n</div>\n</a></figure>\n<figure id=\"og_1740723287617\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"미니스포럼, 최초의 터치스크린 코어 울트라 9 고성능 미니PC AtomMan X7 Ti 발표\" data-og-description=\"소형 PC 제조사 미니스포럼(MINISFORUM)에서 최초로 터치스크린과 인텔 코어 울트라 9 프로세서를 갖고 나온 미니PC AtomMan X7 Ti를 발표했습니다.&nbsp;&nbsp;미니스포럼의 하이엔드 브랜드인 아톰맨(AtomMan)으\" data-og-host=\"lazion.com\" data-og-source-url=\"https://lazion.com/2513670\" data-og-url=\"https://lazion.com/2513670\" data-og-image=\"https://scrap.kakaocdn.net/dn/bYHqZM/hyYjoaW8nm/Z0pZKCWQ6gdUGkxDoNb6N0/img.png?width=800&amp;height=876&amp;face=0_0_800_876,https://scrap.kakaocdn.net/dn/bpKAfT/hyYm2RyBmb/Bv331Ieidawvm4WMX1tIxk/img.png?width=800&amp;height=876&amp;face=0_0_800_876,https://scrap.kakaocdn.net/dn/Fhfbg/hyYmU63R80/N6AKIE5FZVHGCAo0F2hHU0/img.jpg?width=2144&amp;height=2072&amp;face=0_0_2144_2072\"><a href=\"https://lazion.com/2513670\" rel=\"noopener\" data-source-url=\"https://lazion.com/2513670\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bYHqZM/hyYjoaW8nm/Z0pZKCWQ6gdUGkxDoNb6N0/img.png?width=800&amp;height=876&amp;face=0_0_800_876,https://scrap.kakaocdn.net/dn/bpKAfT/hyYm2RyBmb/Bv331Ieidawvm4WMX1tIxk/img.png?width=800&amp;height=876&amp;face=0_0_800_876,https://scrap.kakaocdn.net/dn/Fhfbg/hyYmU63R80/N6AKIE5FZVHGCAo0F2hHU0/img.jpg?width=2144&amp;height=2072&amp;face=0_0_2144_2072');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">미니스포럼, 최초의 터치스크린 코어 울트라 9 고성능 미니PC AtomMan X7 Ti 발표</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">소형 PC 제조사 미니스포럼(MINISFORUM)에서 최초로 터치스크린과 인텔 코어 울트라 9 프로세서를 갖고 나온 미니PC AtomMan X7 Ti를 발표했습니다.&nbsp;&nbsp;미니스포럼의 하이엔드 브랜드인 아톰맨(AtomMan)으</p>\n<p class=\"og-host\" data-ke-size=\"size16\">lazion.com</p>\n</div>\n</a></figure>\n<figure id=\"og_1740723297457\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"인텔 N100 스틱PC, MINISFORUM S100(미니스포럼 S100) 출시\" data-og-description=\"초소형 PC를 만드는 미니스포럼(MINISFORUM)에서 S100이라는 이름으로 인텔 N100 프로세서가 들어간 스틱PC를 출시합니다.&nbsp;&nbsp;마치 좀 큰 USB 메모리스틱을 연상시키는 모양의 스틱PC는 주로 모니터 뒤에\" data-og-host=\"lazion.com\" data-og-source-url=\"https://lazion.com/2513661\" data-og-url=\"https://lazion.com/2513661\" data-og-image=\"https://scrap.kakaocdn.net/dn/cu7SZk/hyYm5tX2wi/5uU7FQ124BJl0YNfJOW3s0/img.png?width=300&amp;height=300&amp;face=0_0_300_300,https://scrap.kakaocdn.net/dn/LZYUm/hyYmJLeOIU/SrVpWecJOwHVokK4Oy7rm0/img.png?width=300&amp;height=300&amp;face=0_0_300_300,https://scrap.kakaocdn.net/dn/b6qEXJ/hyYjNuW1rG/Zw5O8eZKu18DSDG2w3xpP0/img.jpg?width=2000&amp;height=1125&amp;face=0_0_2000_1125\"><a href=\"https://lazion.com/2513661\" rel=\"noopener\" data-source-url=\"https://lazion.com/2513661\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/cu7SZk/hyYm5tX2wi/5uU7FQ124BJl0YNfJOW3s0/img.png?width=300&amp;height=300&amp;face=0_0_300_300,https://scrap.kakaocdn.net/dn/LZYUm/hyYmJLeOIU/SrVpWecJOwHVokK4Oy7rm0/img.png?width=300&amp;height=300&amp;face=0_0_300_300,https://scrap.kakaocdn.net/dn/b6qEXJ/hyYjNuW1rG/Zw5O8eZKu18DSDG2w3xpP0/img.jpg?width=2000&amp;height=1125&amp;face=0_0_2000_1125');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">인텔 N100 스틱PC, MINISFORUM S100(미니스포럼 S100) 출시</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">초소형 PC를 만드는 미니스포럼(MINISFORUM)에서 S100이라는 이름으로 인텔 N100 프로세서가 들어간 스틱PC를 출시합니다.&nbsp;&nbsp;마치 좀 큰 USB 메모리스틱을 연상시키는 모양의 스틱PC는 주로 모니터 뒤에</p>\n<p class=\"og-host\" data-ke-size=\"size16\">lazion.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<div class=\"notranslate\" style=\"all: initial;\">&nbsp;</div>",
        "contentSnippet": "미니PC 업계에서 유명한 미니스포럼(MINISFORUM)의 한국어 공식 홈페이지(https://www.minisforum.kr/)가 열렸습니다.\n \n미니스포럼은 Kommend Technology Co., Limited의 브랜드로, 중국 심천(Shenzen)에서 2012년부터 시작하여 만들어진 컴퓨터 제조사입니다. 다만 글로벌 페이지에서는 2018년부터 미니스포럼 브랜드가 만들어졌다고 하니 좀 혼란스럽네요.\n아무튼 다양한 미니PC 관련 제품을 내놓으면서 조금씩 유명해진 회사입니다.\n \n국내에서는 AMD 라이젠 프로세서를 채용한 UM 시리즈로 유명합니다만, 공식 판매 채널이 없어서 직구로만 구입 가능했고 AS는 사실상 불가능했죠.\n \n\n\n \n이번에 오픈한 미니스포럼 한국어 페이지에서는 현재 몇몇 미니PC를 판매 중입니다. 다만 가격 면에서 직구보다는 아직 많이 비싸군요. 제품 보증이 중요한 분들이 선택하실 것 같습니다.\n \n참고로 미니스포럼 한국어 페이지에서 구입하는 경우 12개월의 제한적인 보증을 제공합니다. 그리고 제품을 받고 30일 안에 초기 불량에 대해서는 교환 또는 환불을 지원합니다.\n물론 우리나라에는 대리점이 없으므로 본사와 직접 제품을 주고 받아야 하니 시간은 좀 들어갈 것 같습니다.\n \n더 자세한 내용은 이곳을 확인하시기 바랍니다.\n \n \n당연한 이야기지만 여전히 리셀러를 통한 직구 방식으로 구입한 제품에 대해서는 어떤 보증도 해주지 않습니다. 구입처에 문의하거나 스스로 부품을 사서 해결하는 방법이 가능하겠습니다.\n \n(출처 : 미니스포럼)\n \n실제로 아직 미니스포럼 한국어 페이지에서 직접 구입하여 후기를 남긴 고객이 없는지라 직구에 비해 얼마나 이득을 줄지는 모르겠지만 그래도 공식 창구가 생겼다는 점에서 일단 환영합니다.\n \n \n \n관련 글\n\n \n미니스포럼 고성능 미니워크스테이션 MS-A1, 라이젠 8700G AM5 플랫폼의 미니PC 출시\n미니PC로 유명한 미니스포럼(Minisforum)에서 AMD 라이젠7 8700G를 지원하는 MS-A1을 출시합니다.  Minisforum MS-A1의 주요 특징 이 제품은 미니스포럼에서 내놓은 인텔 플랫폼 기반의 MS-01과 비슷한 하우\nlazion.com\n\n\n \n미니스포럼, 최초의 터치스크린 코어 울트라 9 고성능 미니PC AtomMan X7 Ti 발표\n소형 PC 제조사 미니스포럼(MINISFORUM)에서 최초로 터치스크린과 인텔 코어 울트라 9 프로세서를 갖고 나온 미니PC AtomMan X7 Ti를 발표했습니다.  미니스포럼의 하이엔드 브랜드인 아톰맨(AtomMan)으\nlazion.com\n\n\n \n인텔 N100 스틱PC, MINISFORUM S100(미니스포럼 S100) 출시\n초소형 PC를 만드는 미니스포럼(MINISFORUM)에서 S100이라는 이름으로 인텔 N100 프로세서가 들어간 스틱PC를 출시합니다.  마치 좀 큰 USB 메모리스틱을 연상시키는 모양의 스틱PC는 주로 모니터 뒤에\nlazion.com",
        "guid": "http://lazion.com/2513739",
        "categories": [
          "#작은PC/#미니PC",
          "miniPC",
          "Minisforum",
          "News",
          "PC"
        ],
        "isoDate": "2025-02-28T06:23:51.000Z"
      }
    ]
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "(RULIWEB`Д')/",
        "title": "[MULTI] 야쿠자가 바다로 간 까닭은, 용과 같이 8 외전 파이리츠 인 하와이",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2289",
        "pubDate": "Fri, 28 Feb 2025 19:22:58 +0900",
        "author": "(RULIWEB`Д')/",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/25/02/28/1954c1305304c329e.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2025-02-28T10:22:58.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "NotebookLM을 이용한 AI 활용 - 기술 자료 분석",
        "link": "https://jacking75.github.io/tech-ai_20250304/",
        "pubDate": "Tue, 04 Mar 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vQX9B27qcuEN-EoU4AMLJso1YazqPvmvFMZzyXFnEb3X7FUYvYAzPtDANR7Y6ajdg6byfunqRYfFps7/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/tech-ai_20250304/",
        "isoDate": "2025-03-03T15:00:00.000Z"
      },
      {
        "title": "비주얼 스튜디오 빌드 인사이트 17.12의 새로운 기능",
        "link": "https://jacking75.github.io/VS_20250303/",
        "pubDate": "Mon, 03 Mar 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vSuM1M9lKVf30FWBcFxdPob0dFcQzi9CKCDIKQkNm9hjkpsMFug7ZD0GXT8NMDS80Q0p7bEFMKOwjQb/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/VS_20250303/",
        "isoDate": "2025-03-02T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": [
      {
        "creator": "noreply@blogger.com (Unknown)",
        "title": "Cursor 0.46, 뭔가 달라졌다! Agent의 변화를 체크해보세요.",
        "link": "https://blog.gaerae.com/2025/03/cursor-046-agent.html",
        "pubDate": "Sun, 02 Mar 2025 14:57:00 +0000",
        "author": "noreply@blogger.com (Unknown)",
        "content": "  <img \n    alt=\"Cursor 이미지\" \n    data-original-height=\"800\" \n    data-original-width=\"1200\" \n    src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiOVjcAf_9-IWc2icNqWSY4kyNapMtTfRR3Ibpph7jlivQU7aoXGYTq0FOa1spTA3xGTKjlLTWppCSB2aLBE-w8Q7kt04Jm-LxQmXyftiJrzthPJwguPJsJHnwPiSXXLFK296l8oZY7RPanjVsCbCN7CaQhKQbeaiXBV8GzK1U94N1eAgwc4ZUrbGtoUDc/s600/cursor.png\" \n    width=\"600\" \n  />\n\n  <p>Cursor 0.46 업데이트에서 중요한 변화들이 있었네요! 주요 포인트를 정리해보면 다음과 같습니다.</p>\n\n  <h3>🔥 <strong>Cursor 0.46 업데이트 핵심 요약</strong></h3>\n  <ol>\n    <li>\n      <p><strong>💡 Agent 기본 모드로 통합</strong></p>\n      <ul>\n        <li>Chat, Composer, Agent가 하나의 인터페이스로 정리됨.</li>\n        <li>\n          <strong>기존 모드 이름 변경</strong>\n          <ul>\n            <li>Chat → <strong>Ask</strong></li>\n            <li>Composer (일반) → <strong>Edit</strong></li>\n            <li>Composer (Agent 모드) → <strong>Agent</strong></li>\n          </ul>\n        </li>\n        <li><strong>단축어:</strong> <code>⌘ + .</code> (모드 전환 가능)</li>\n        <li>Ask ↔ Agent <strong>같은 컨텍스트에서 자유롭게 전환 가능!</strong></li>\n      </ul>\n      <img \n        alt=\"Agent 통합 모드 이미지\" \n        width=\"600\" \n        data-original-height=\"1440\" \n        data-original-width=\"1920\" \n        src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEigZzYcOPrJBm0oMW_zT_q4HCpw1deTWZtd3ttJWmZ3M4p6KAGSUgm-_nR0GRNVDjVPNwTIC6zj9Ut-M-ubTh86xfQp8fv01F1TzbI9pPs55PzZEbr7_8pj95LcYSGHODiQtePuJRiBrEl3iSwVqXblfo0qrgeXeb8vEt0HZf5jrzGWEWKM5YlqeXjs6Pg/s600/cursor-0-46.png\"\n      />\n    </li>\n    <li>\n      <p><strong>🌐 웹 검색 기본 제공</strong></p>\n      <ul>\n        <li>이제 프롬프트에 <code>@web</code>을 포함하지 않아도 웹 검색이 자동 적용됨.</li>\n        <li>만약 웹 검색이 되지 않는다고 느껴진다면, <strong>\"웹에서 공식 문서를 검색한 다음 구현을 진행\"</strong> 같은 문장을 포함하면 해결 가능.</li>\n      </ul>\n      <img \n        alt=\"웹 검색 기능 이미지\" \n        width=\"600\" \n        data-original-height=\"1440\" \n        data-original-width=\"1920\" \n        src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLEifzIVjNW-kT-4Ymr_r3z9-4GQfN02X04yom1oYvfkPYiIBEtAqgi2odUOKj_Th96H2R8QGOcIyqW-xXN8RVWY8fbdpnGOGwxeWmJFV3UwwQa1oFtqUFVNt1ESBTPQjIeiZ-YFIJBv8CqByfrxPZ5E4SWhtcvxCZmw0j0Ta5QEL2g3VAIUjVoz5JVto/s600/cursor-web.png\"\n      />\n    </li>\n    <li>\n      <p><strong>🖥️ 터미널 참조 기능 추가 (<code>@terminals</code>)</strong></p>\n      <ul>\n        <li><code>@terminals</code>를 사용하여 <strong>터미널 내용을 바로 참조 가능</strong></li>\n        <li>기존에 Agent에 터미널 내용을 전달하는 과정이 불편했는데, 이제 <strong>더 직관적인 디버깅 환경 제공</strong></li>\n      </ul>\n      <img \n        alt=\"터미널 참조 기능 이미지\" \n        width=\"600\" \n        data-original-height=\"1440\" \n        data-original-width=\"1920\" \n        src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEix1oYDg5W6RAxsLFPY2pN6taVWLM2ONEpTq2qftpvnXDwR82uAZBSkI14pOyJQsmtpsrJvIXNZgMGYOkV1KUE7jQ61E_MmyxPkyHTMt-NSwXude5Y9OQvKEXUUKrZ34sk0nIbbVSUwBWZ1hSfpv2r2y-Nym1-KYstPIytX5-xG_eCkfyHgL7Jf_5DRHGo/s600/cursor-terminal.png\"\n      />\n    </li>\n  </ol>\n\n  <hr>\n\n  <h3>✨ <strong>이 업데이트의 의미는?</strong></h3>\n  <ul>\n    <li><strong>더 자연스럽고 편리한 워크플로우</strong> → 하나의 인터페이스에서 모든 기능을 수행 가능</li>\n    <li><strong>웹 검색이 더 직관적</strong> → @web을 따로 입력할 필요 없이 자동 제공</li>\n    <li><strong>터미널 디버깅이 개선</strong> → @terminals로 바로 참조 가능</li>\n  </ul>\n\n  <p>\n    💡 <strong>더 자세한 정보는?</strong><br>\n    👉 <a href=\"https://www.cursor.com/changelog/agent-is-ready-and-ui-refresh\">Cursor 공식 변경 로그</a>\n  </p>\n  <p>이제 코딩할 때 더 빠르고 매끄럽게 작업할 수 있겠네요! 🚀🔥</p>",
        "contentSnippet": "Cursor 0.46 업데이트에서 중요한 변화들이 있었네요! 주요 포인트를 정리해보면 다음과 같습니다.\n🔥 Cursor 0.46 업데이트 핵심 요약\n💡 Agent 기본 모드로 통합\nChat, Composer, Agent가 하나의 인터페이스로 정리됨.\n기존 모드 이름 변경\n          \nChat → Ask\nComposer (일반) → Edit\nComposer (Agent 모드) → Agent\n단축어: ⌘ + . (모드 전환 가능)\nAsk ↔ Agent 같은 컨텍스트에서 자유롭게 전환 가능!\n🌐 웹 검색 기본 제공\n이제 프롬프트에 @web을 포함하지 않아도 웹 검색이 자동 적용됨.\n만약 웹 검색이 되지 않는다고 느껴진다면, \"웹에서 공식 문서를 검색한 다음 구현을 진행\" 같은 문장을 포함하면 해결 가능.\n🖥️ 터미널 참조 기능 추가 (@terminals)\n@terminals를 사용하여 터미널 내용을 바로 참조 가능\n기존에 Agent에 터미널 내용을 전달하는 과정이 불편했는데, 이제 더 직관적인 디버깅 환경 제공\n✨ 이 업데이트의 의미는?\n더 자연스럽고 편리한 워크플로우 → 하나의 인터페이스에서 모든 기능을 수행 가능\n웹 검색이 더 직관적 → @web을 따로 입력할 필요 없이 자동 제공\n터미널 디버깅이 개선 → @terminals로 바로 참조 가능\n더 자세한 정보는?\nCursor 공식 변경 로그\n  \n이제 코딩할 때 더 빠르고 매끄럽게 작업할 수 있겠네요! 🚀🔥",
        "guid": "tag:blogger.com,1999:blog-1127118646487305903.post-1707420585751649415",
        "categories": [
          {
            "_": "ai",
            "$": {
              "domain": "http://www.blogger.com/atom/ns#"
            }
          }
        ],
        "isoDate": "2025-03-02T14:57:00.000Z"
      }
    ]
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": [
      {
        "title": "BigQuery PIPE 사용법 : SQL의 새로운 형태",
        "link": "https://zzsza.github.io/gcp/2025/03/01/bigquery-pipe/",
        "pubDate": "Sat, 01 Mar 2025 00:00:00 +0000",
        "content": "<ul>\n  <li>2024년 연말에 새로 생긴 BigQuery Pipe 사용법에 대해 작성한 글입니다\n    <ul>\n      <li>이 글은 2025년 3월 초 기준으로 작성되었습니다</li>\n      <li>파이프 문법 Cheatsheet가 궁금하면 <a href=\"https://zzsza.github.io/bigquery/advanced/bigquery-pipe-cheatsheet.html\">BigQuery 가이드북</a>을 방문해주세요</li>\n    </ul>\n  </li>\n  <li>키워드 : BigQuery Pipe, BigQuery PIPE syntax</li>\n</ul>\n\n<p><br /></p>\n\n<hr />\n\n<h1 id=\"bigquery-pipe-syntax\">BigQuery Pipe Syntax</h1>\n<ul>\n  <li>이 부분은 구글의 논문인 <a href=\"https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/\">SQL Has Problems. We Can Fix Them: Pipe Syntax In SQL</a>을 참고했음</li>\n</ul>\n\n<h2 id=\"기존-sql의-문제점\">기존 SQL의 문제점</h2>\n<ul>\n  <li>SQL은 데이터 작업을 위한 표준 언어가 되었고, 대부분의 SQL 엔진 대부분 비슷한 문법을 사용함\n    <ul>\n      <li>하지만 SQL은 배우기 어렵고, 사용하기 어렵고, 확장하기 어려움</li>\n      <li>이런 문제를 해결하기 위해 새로운 언어를 개발해서 제안한 사람들이 있으나, 새로운 언어를 채택하는 과정은 반발심도 있어서 쉽지 않음</li>\n    </ul>\n  </li>\n  <li>SQL은 다음과 같은 문제점이 존재함\n    <ul>\n      <li>고정된 구문 순서</li>\n      <li>중복된 구문(예 : 필터링)</li>\n      <li>서브 쿼리 사용</li>\n      <li>내부 -&gt; 외부의 데이터 흐름</li>\n      <li>동일한 컬럼들의 반복</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"고정된-구문-순서\">고정된 구문 순서</h3>\n<ul>\n  <li>SELECT - FROM - WHERE - GROUP BY 순서가 고정되어 있어서 유연성이 떨어짐\n    <ul>\n      <li>문법과 의미 관점에서 순서가 다름</li>\n    </ul>\n  </li>\n  <li>데이터는 FROM에서 나오기 때문에, FROM 절부터 생각해야 함\n    <ul>\n      <li>그러나 쿼리의 시작이 SELECT라 헷갈리게 됨</li>\n      <li>처음 SQL을 학습할 때 많은 분들이 이 부분에 대해 어려워 함</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"중복된-구문예--필터링\">중복된 구문(예 : 필터링)</h3>\n<ul>\n  <li>데이터를 필터링할 때, WHERE, HAVING, QUALIFY를 사용할 수 있음\n    <ul>\n      <li>이 3개가 사용되는 경우는 모두 다르지만, 결국에 데이터를 필터링할 때 사용됨. 그래서 처음 SQL을 공부하는 사람이 헷갈리게 됨. 언제 WHERE? 언제 HAVING?</li>\n    </ul>\n  </li>\n  <li>아래 쿼리를 보면 WHERE, HAVING, QUALIFY에 대해 작성되어 있음. 궁극적으로 이걸 하나로 통일할 수는 없을까?</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT\n  customer_name,\n  order_date,\n  SUM(amount) AS total,\n  RANK() OVER (PARTITION BY customer_name ORDER BY SUM(amount) DESC) AS rk\nFROM customers \nJOIN orders ON customers.id = orders.customer_id\nWHERE region = 'East'           -- 집계 전 필터링\nGROUP BY customer_name, order_date\nHAVING SUM(amount) &gt; 1000       -- 집계 후 필터링\nQUALIFY rk = 1  \n</code></pre></div></div>\n\n<h3 id=\"서브-쿼리-사용\">서브 쿼리 사용</h3>\n<ul>\n  <li>다중 집계, 계산된 표현의 재사용 등을 위해 서브 쿼리를 사용해야 함\n    <ul>\n      <li>서브 쿼리는 들여쓰기가 많아져서 가독성을 해치고, 편집할 때 실수를 유발할 가능성이 생김</li>\n    </ul>\n  </li>\n  <li>간단한 연산이지만 서브 쿼리가 필요한 경우\n    <ul>\n      <li>두 번 이상 합산하기</li>\n      <li>지원되는 세 곳(WHERE, HAVING, QUALIFY) 이외의 위치에 필터링을 해야할 때, 서브 쿼리로 한번 감싸서 처리해야 함</li>\n    </ul>\n  </li>\n  <li>BigQuery ML을 사용해서 임베딩 모델을 예측하고, 그 후에 예측할 때 서브 쿼리를 사용해야 함(2번 연속으로 서브 쿼리 사용)</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT *\nFROM ML.PREDICT(\n  MODEL `my_project.imdb_classifier`,\n  (\n    SELECT *\n    FROM ML.PREDICT(\n      MODEL `my_project.nnlm_embedding_model`,\n      (SELECT '&lt;text&gt;' AS input, 7 AS rating)\n    )\n  )\n)\n</code></pre></div></div>\n\n<h3 id=\"내부---외부의-데이터-흐름\">내부 -&gt; 외부의 데이터 흐름</h3>\n<ul>\n  <li>서브 쿼리, JOIN 등이 혼합된 쿼리를 볼 때 제일 안쪽에 있는 FROM을 확인하고, 바깥쪽으로 쿼리문을 읽어야 함\n    <ul>\n      <li>이 과정이 직관적이지 않고, 쿼리를 보는 시간을 늘림</li>\n      <li>아래 쿼리를 보면 FROM customer 부터 이해를 하고, 그 안에 있는 부분 =&gt; 바깥을 이해해야 함</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT\n  c_count,\n  COUNT(*) AS custdist\nFROM (\n  SELECT\n    c_custkey,\n    COUNT(o_orderkey) c_count\n  FROM customer\n  LEFT OUTER JOIN orders ON c_custkey = o_custkey\n  AND o_comment NOT LIKE '%unusual%packages%'\n  GROUP BY c_custkey\n) AS c_orders\nGROUP BY\n  c_count\nORDER BY\n  custdist DESC,\n  c_count DESC;\n</code></pre></div></div>\n\n<h3 id=\"동일한-컬럼들의-반복\">동일한 컬럼들의 반복</h3>\n<ul>\n  <li>SELECT, GROUP BY, ORDER BY 등에 중복된 컬럼을 사용하는 경우가 있음</li>\n  <li>하나의 컬럼을 변경할 때, 다른 곳을 모두 변경해야 함(물론 GROUP BY는 GROUP BY ALL로 대체할 수 있긴 함)</li>\n  <li>아래 쿼리에서 SELECT에 있는 컬럼을 바꾸면 GROUP BY, ORDER BY도 수정해야 할 수 있음</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT\n  department,\n  employee_name,\n  salary, \n  RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rank\nFROM employees\nGROUP BY\n  department,\n  employee_name,\n  salary\nORDER BY\n  department,\n  rank\n</code></pre></div></div>\n\n<p><br /></p>\n\n<hr />\n\n<h2 id=\"googlesql의-시도--pipe-구문-추가\">GoogleSQL의 시도 : PIPE 구문 추가</h2>\n<ul>\n  <li>GoogleSQL에선 새로운 언어를 만드는 방법이 아닌 기존 SQL 기능을 확장해서 문제를 해결하려고 함\n    <ul>\n      <li>SQL에 data flow syntax를 추가했고 확장하기 쉽고 유연하게 되었음</li>\n      <li>data flow syntax는 쉘 커맨드의 파이프 구문, 스파크의 체이닝과 유사하다고 보면 됨</li>\n    </ul>\n  </li>\n  <li>SQL에서 표준 절은 정의된 하나의 순서로 발생함. 파이프 구문을 사용하면 임의의 순서로 연산을 만들 수 있음</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>FROM Produce\n|&gt; WHERE item != 'bananas' AND category IN ('fruit', 'nut')\n|&gt; AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n   GROUP BY item\n|&gt; ORDER BY item DESC\n</code></pre></div></div>\n\n<h2 id=\"bigquery-pipe-문법의-특징\">BigQuery PIPE 문법의 특징</h2>\n<ul>\n  <li>Linear Flow : 순차적 실행</li>\n  <li>Reduced Nesting : 서브쿼리를 사용하지 않음</li>\n  <li>재생산성이 가능하고 직관적임</li>\n  <li>FROM 부터 시작함</li>\n  <li>파이프 연산자로 <code class=\"language-plaintext highlighter-rouge\">|&gt;</code>을 사용함</li>\n  <li>파이프 연산자는 유효한 쿼리 뒤에 계속 추가할 수 있음</li>\n  <li>아래 이미지를 보면 파이프 문법에선 의미론적인 순서와 동일해짐</li>\n</ul>\n\n<p><img src=\"https://www.dropbox.com/scl/fi/mp56bysid9jcxqx0te0ow/2025-02-22-7.11.33.png?rlkey=pvm5bm11pzyckshwtwar1nsio&amp;raw=1\" /></p>\n\n<p><br /></p>\n\n<h3 id=\"파이프-문자를-사용하는-이유\">파이프 문자(|&gt;)를 사용하는 이유</h3>\n<ul>\n  <li>친숙함과 선례 관점\n    <ul>\n      <li>(1) 유닉스 파이프는 널리 이해되는 패러다임으로, 이 구문과 동작을 친숙하고 이해하기 쉽게 만듦</li>\n      <li>(2) 다른 데이터 처리 언어(예: KQL)도 파이프 구문을 사용함</li>\n      <li>(3) 파이프와 같은 데이터 흐름은 Pandas DataFrames와 Apache Beam 등의 데이터 처리 프레임워크에서도 사용됨</li>\n    </ul>\n  </li>\n  <li>기술적 관점\n    <ul>\n      <li>(1) 파이프 연산자를 사용하면 어디서 구문이 시작되는지 명확히 알 수 있음</li>\n      <li>(2) 파싱하는 방법이 간단해져서 확장성이 증가됨</li>\n      <li>(3) 파이프 연산자는 이전 단계의 결과에 존재하는 컬럼만 접근할 수 있음. 명확해지고 예측이 가능해짐</li>\n      <li>(4) 파이프 연산자를 사용해서 순차적으로 연산을 진행할 수 있음</li>\n    </ul>\n  </li>\n  <li>가독성 관점\n    <ul>\n      <li>(1) 언제 파이프 연산자로 전환되는지 인식하기 수월함</li>\n      <li>\n        <p>(2) 여러 절로 구성된 파이프 연산자를 하나의 논리적인 단위로 인식할 수 있게 해줌</p>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  |&gt; AGGREGATE SUM(sales) AS total_sales, AVG(price) AS avg_price\n     GROUP BY region, product\n</code></pre></div>        </div>\n      </li>\n      <li>(3) 구조적 가시성 : 쿼리를 순차적인 N개의 연산으로 표현 가능. 쿼리의 논리적 흐름을 시각적으로 더 잘 반영함</li>\n    </ul>\n  </li>\n  <li>파이프 문자로 <code class=\"language-plaintext highlighter-rouge\">|</code>을 사용할 수 있지만, 비트 연산에 사용되기 때문에 헷갈리고 충돌이 생기게 됨. 그래서 <code class=\"language-plaintext highlighter-rouge\">|&gt;</code>을 선택함</li>\n</ul>\n\n<p><br /><br /></p>\n\n<hr />\n\n<h1 id=\"bigquery-pipe-문법\">BigQuery PIPE 문법</h1>\n<ul>\n  <li><a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/pipe-syntax#pipe_operators\">공식 문서</a>에서 확인할 수 있고, 앞으로 계속 늘어날 것으로 예상</li>\n  <li>일반적으로 사용하는 FROM, SELECT, JOIN, WHERE, LIMIT, ORDER BY은 동일하다고 생각하면 됨</li>\n  <li>아래에선 PIPE 문법 중 특별한 부분만 기록</li>\n</ul>\n\n<p><br />\n<br /></p>\n\n<h2 id=\"set\">SET</h2>\n<ul>\n  <li>SELECT * REPLACE(expression AS col)와 동일한 표현</li>\n  <li>컬럼을 다른 값으로 대체함</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT 1 AS x, 11 AS y\n  UNION ALL\n  SELECT 2 AS x, 22 AS y\n)\n|&gt; SET x = x * x, y = 3;\n\n/*\n+---+---+\n| x | y |\n+---+---+\n| 1 | 3 |\n| 4 | 3 |\n+---+---+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"extend\">EXTEND</h2>\n<ul>\n  <li>SELECT *, new_col과 동일한 표현</li>\n  <li>기존 테이블의 모든 컬럼에 새로운 컬럼 추가\n    <ul>\n      <li>파이프 문법에선 이전 결과에 나오는 컬럼만 선택할 수 있어서 EXTEND를 사용해야 할 수 있음</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT 'apples' AS item, 2 AS sales\n  UNION ALL\n  SELECT 'carrots' AS item, 8 AS sales\n)\n|&gt; EXTEND item IN ('carrots', 'oranges') AS is_orange;\n\n/*\n+---------+-------+------------+\n| item    | sales | is_orange |\n+---------+-------+------------+\n| apples  | 2    | FALSE     |\n| carrots | 8    | TRUE      |\n+---------+-------+------------+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"aggregate\">AGGREGATE</h2>\n<ul>\n  <li>전체 테이블 또는 컬럼의 값에 대한 집계 수행</li>\n  <li>\n    <p>전체 테이블 집계</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  -- Full-table aggregation\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |&gt; AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales;\n    \n  /*\n  +-----------+-------------+\n  | num_items | total_sales |\n  +-----------+-------------+\n  | 3        | 14        |\n  +-----------+-------------+\n  */\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>GROUP BY와 함께 사용해서 집계</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  -- Aggregation with grouping\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |&gt; AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n     GROUP BY item;\n    \n  /*\n  +---------+-----------+-------------+\n  | item   | num_items | total_sales |\n  +---------+-----------+-------------+\n  | apples  | 2       | 9         |\n  | bananas | 1       | 5         |\n  +---------+-----------+-------------+\n  */\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>GROUP AND ORDER BY를 사용하면 컬럼을 반복적으로 입력하지 않아도 괜찮음</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  -- Aggregation with grouping and order by\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |&gt; AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n     GROUP AND ORDER BY item;\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"pivot\">PIVOT</h2>\n<ul>\n  <li>StandardSQL의 PIVOT 함수를 사용할 수도 있음</li>\n  <li>열(Row)을 컬럼(Column)으로 회전</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT \"kale\" AS product, 51 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"kale\" AS product, 4 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"kale\" AS product, 45 AS sales, \"Q2\" AS quarter\n  UNION ALL\n  SELECT \"apple\" AS product, 8 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"apple\" AS product, 10 AS sales, \"Q2\" AS quarter\n)\n|&gt; PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2'));\n\n/*\n+---------+----+------+\n| product | Q1 | Q2  |\n+---------+-----------+\n| kale    | 55 | 45  |\n| apple   | 8  | 10  |\n+---------+----+------+\n*/\n</code></pre></div></div>\n\n<h2 id=\"unpivot\">UNPIVOT</h2>\n<ul>\n  <li>컬럼(Column)을 열(Row)로 회전</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT 'kale' as product, 55 AS Q1, 45 AS Q2\n  UNION ALL\n  SELECT 'apple', 8, 10\n)\n|&gt; UNPIVOT(sales FOR quarter IN (Q1, Q2));\n\n/*\n+---------+-------+---------+\n| product | sales | quarter |\n+---------+-------+---------+\n| kale   | 55    | Q1    |\n| kale   | 45    | Q2    |\n| apple  | 8     | Q1    |\n| apple  | 10    | Q2    |\n+---------+-------+---------+\n*/\n</code></pre></div></div>\n\n<h2 id=\"union-all-by-name\">UNION ALL BY NAME</h2>\n<ul>\n  <li>UNION ALL을 할 때 이름으로 자동으로 매칭해줌(UNION ALL만 사용하면 순서도 맞춰줘야 함</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT 1 AS one_digit, 10 AS two_digit\n|&gt; UNION ALL BY NAME\n    (SELECT 20 AS two_digit, 2 AS one_digit);\n\n/*\n+-----------+-----------+\n| one_digit | two_digit |\n+-----------+-----------+\n| 1        | 10      |\n| 2        | 20      |\n+-----------+-----------+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"call\">CALL</h2>\n<ul>\n  <li>테이블 값 함수(Table Value Function, TVF) 호출\n    <ul>\n      <li>TVF가 궁금하면 <a href=\"https://cloud.google.com/bigquery/docs/table-functions?hl=ko#tvfs\">공식 문서</a> 참고</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>FROM input_table\n|&gt; CALL tvf1(arg1)\n|&gt; CALL tvf2(arg2, arg3);\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"window\">WINDOW</h2>\n<ul>\n  <li>윈도우 함수 계산하고 싶을 때 사용\n    <ul>\n      <li>윈도우 함수는 AGGREGATE와 사용하는 것이 아니고 WINDOW를 명시해서 사용해야 함</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT 'apples' AS item, 2 AS sales\n  UNION ALL\n  SELECT 'bananas' AS item, 5 AS sales\n  UNION ALL\n  SELECT 'carrots' AS item, 8 AS sales\n)\n|&gt; WINDOW SUM(sales) OVER() AS total_sales;\n\n/*\n+---------+-------+-------------+\n| item   | sales | total_sales |\n+---------+-------+-------------+\n| apples  | 2    | 15        |\n| bananas | 5    | 15        |\n| carrots | 8    | 15        |\n+---------+-------+-------------+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"drop\">DROP</h2>\n<ul>\n  <li>컬럼을 제외하고 싶을 때 사용</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT 'apples' AS item, 2 AS sales, 'fruit' AS category\n|&gt; DROP sales, category;\n\n/*\n+--------+\n| item  |\n+--------+\n| apples |\n+--------+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"rename\">RENAME</h2>\n<ul>\n  <li>컬럼의 이름을 변경하고 싶은 경우 사용</li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SELECT 1 AS x, 2 AS y, 3 AS z\n|&gt; AS t\n|&gt; RENAME y AS renamed_y\n|&gt; SELECT *, t.y AS t_y;\n\n/*\n+---+-----------+---+-----+\n| x | renamed_y| z | t_y |\n+---+-----------+---+-----+\n| 1 | 2       | 3 | 2  |\n+---+-----------+---+-----+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"as\">AS</h2>\n<ul>\n  <li>Input 테이블에 대해 Alias를 지정하고 싶을 때 사용\n    <ul>\n      <li>WITH base 대신 AS를 바로 사용해서 쓸 수 있음</li>\n    </ul>\n  </li>\n</ul>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\n  SELECT \"000123\" AS id, \"apples\" AS item, 2 AS sales\n  UNION ALL\n  SELECT \"000456\" AS id, \"bananas\" AS item, 5 AS sales\n) AS sales_table\n|&gt; AGGREGATE SUM(sales) AS total_sales GROUP BY id, item\n-- The sales_table alias is now out of scope. We must introduce a new one.\n|&gt; AS t1\n|&gt; JOIN (SELECT 456 AS id, \"yellow\" AS color) AS t2\n   ON CAST(t1.id AS INT64) = t2.id\n|&gt; SELECT t2.id, total_sales, color;\n\n\n/*\n+-----+-------------+--------+\n| id  | total_sales| color  |\n+-----+-------------+--------+\n| 456 | 5         | yellow |\n+-----+-------------+--------+\n*/\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"언제-유용할까\">언제 유용할까?</h2>\n<ul>\n  <li>BigQuery 처음 학습하는 분들에게 추천\n    <ul>\n      <li>그러나 회사에서 BigQuery를 사용하지 않으면 애매함(다른 DB에선 아직 지원을 안할 수 있으므로)</li>\n    </ul>\n  </li>\n  <li>Text to SQL을 구현할 때 추천\n    <ul>\n      <li>기존의 SQL 쿼리에서 파싱이 어려웠는데, 이젠 명확하게 쿼리를 분석하기 좋음</li>\n      <li>자연어로 쿼리를 생성할 때, 파이프를 사용하는 것이 더 유리할 것으로 예상</li>\n      <li>유사하게 Programmatic하게 쿼리를 생성할 때도 추천</li>\n    </ul>\n  </li>\n  <li>데이터 엔지니어링 파이프라인\n    <ul>\n      <li>데이터 엔지니어링 파이프라인 중 Flow가 중요한 경우 추천</li>\n      <li>쉘 커맨드에서 데이터를 처리하는 것처럼 사용할 수 있음</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"문법-정리\">문법 정리</h2>\n<ul>\n  <li>문법을 잘 정리된 형태로 보면 좋을 것 같아, 별도의 웹페이지로 제작함\n    <ul>\n      <li><a href=\"https://zzsza.github.io/bigquery/advanced/bigquery-pipe-cheatsheet.html\">BigQuery Guide Book - 빅쿼리 가이드북 - PIPE Cheatsheet</a> 참고</li>\n    </ul>\n  </li>\n</ul>\n\n<p><img src=\"https://www.dropbox.com/scl/fi/fjoc87hxkm2kbtuoe35mk/2025-03-02-8.13.45.png?rlkey=3rzrh8zmp6c2bjjdh4hlq7hea&amp;raw=1\" />\n<img src=\"https://www.dropbox.com/scl/fi/j1kae9186lwo0c8zrhcqf/2025-03-02-8.14.18.png?rlkey=s6gpjmryhdm1vdcagkl97biwn&amp;raw=1\" /></p>\n\n<p><br /><br /></p>\n\n<h1 id=\"standardsql-vs-pipe-쿼리-비교\">StandardSQL vs Pipe 쿼리 비교</h1>\n<ul>\n  <li><a href=\"https://inf.run/p121d\">초보자를 위한 BigQuery(SQL) 입문</a> 강의에서 진행한 연습 문제 쿼리를 비교</li>\n  <li>\n    <p>StandardSQL</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  SELECT\n    p.type1,\n    COUNT(tp.id) AS pokemon_cnt\n  FROM (\n    SELECT\n      id,\n      trainer_id,\n      pokemon_id,\n      status\n    FROM basic.trainer_pokemon\n    WHERE\n      status IN (\"Active\", \"Training\")\n  ) AS tp\n  LEFT JOIN basic.pokemon AS p\n  ON tp.pokemon_id = p.id\n  WHERE\n    type1 = \"Grass\"\n  GROUP BY\n    type1\n  ORDER BY\n    2 DESC \n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>PIPE</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  FROM basic.trainer_pokemon AS tp\n  |&gt; WHERE status IN ('Active', 'Training')\n  |&gt; LEFT JOIN basic.pokemon AS p\n    ON tp.pokemon_id = p.id  \n  |&gt; WHERE type1 = 'Grass'\n  |&gt; AGGREGATE\n    COUNT(tp.id) AS pokemon_cnt\n    GROUP BY p.type1\n  |&gt; ORDER BY pokemon_cnt DESC\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<p><img src=\"https://www.dropbox.com/scl/fi/7vvtd8n2dzl0say1grkr9/2025-02-22-6.18.54.png?rlkey=9p6esbh7ve21no2vvh392h59l&amp;raw=1\" /></p>\n\n<ul>\n  <li>확실히 더 직관적이고, 짧아짐</li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"firebase-앱-로그-데이터의-퍼널-쿼리-비교\">Firebase, 앱 로그 데이터의 퍼널 쿼리 비교</h2>\n<ul>\n  <li><a href=\"https://inf.run/QVgPf\">BigQuery 활용편(퍼널 분석, 리텐션 분석)</a>에서 진행한 쿼리 비교</li>\n  <li>\n    <p>StandardSQL</p>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  WITH base AS (\n    SELECT\n      event_date,\n      event_timestamp,\n      event_name,\n      user_id,\n      user_pseudo_id,\n      platform,\n      MAX(IF(event_param.key = \"firebase_screen\", event_param.value.string_value, NULL)) AS firebase_screen,\n      MAX(IF(event_param.key = \"session_id\", event_param.value.string_value, NULL)) AS session_id\n    FROM advanced.app_logs\n    CROSS JOIN UNNEST(event_params) AS event_param\n    WHERE\n      event_date BETWEEN \"2022-08-01\" AND \"2022-08-18\"\n    GROUP BY ALL\n  ), filter_event_and_concat_event_and_screen AS (\n    SELECT\n      * EXCEPT(event_name, firebase_screen, event_timestamp),\n      CONCAT(event_name, \"-\", firebase_screen) AS event_name_with_screen,\n      DATETIME(TIMESTAMP_MICROS(event_timestamp), 'Asia/Seoul') AS event_datetime\n    FROM base\n    WHERE\n      event_name IN (\"screen_view\", \"click_payment\")\n  )\n  SELECT\n    event_date, # 일자별로 퍼널별 유저 수 쿼리\n    event_name_with_screen,\n    CASE \n      WHEN event_name_with_screen = \"screen_view-welcome\" THEN 1\n      WHEN event_name_with_screen = \"screen_view-home\" THEN 2\n      WHEN event_name_with_screen = \"screen_view-food_category\" THEN 3\n      WHEN event_name_with_screen = \"screen_view-restaurant\" THEN 4\n      WHEN event_name_with_screen = \"screen_view-cart\" THEN 5\n      WHEN event_name_with_screen = \"click_payment-cart\" THEN 6\n    ELSE NULL\n    END AS step_number,\n    COUNT(DISTINCT user_pseudo_id) AS cnt\n  FROM filter_event_and_concat_event_and_screen\n  GROUP BY ALL\n  HAVING step_number IS NOT NULL\n  ORDER BY event_date, step_number\n</code></pre></div>    </div>\n  </li>\n  <li>PIPE\n    <ul>\n      <li>좀 더 간결하게 만들 수 있을 것 같지만 일단 이정도로 올려봄</li>\n    </ul>\n\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  FROM advanced.app_logs\n  |&gt; CROSS JOIN UNNEST(event_params) AS event_param\n  |&gt; WHERE event_date BETWEEN \"2022-08-01\" AND \"2022-08-18\" AND event_name IN (\"screen_view\", \"click_payment\")\n  |&gt; AGGREGATE\n     MAX(IF(event_param.key = \"firebase_screen\", event_param.value.string_value, NULL)) AS firebase_screen,\n     MAX(IF(event_param.key = \"session_id\", event_param.value.string_value, NULL)) AS session_id\n     GROUP BY event_date, event_timestamp, event_name, user_id, user_pseudo_id, platform\n  |&gt; SELECT\n      * EXCEPT(event_name, firebase_screen, event_timestamp),  \n      CONCAT(event_name, \"-\", firebase_screen) AS event_name_with_screen,\n      DATETIME(TIMESTAMP_MICROS(event_timestamp), 'Asia/Seoul') AS event_datetime\n  |&gt; EXTEND\n      CASE\n        WHEN event_name_with_screen = \"screen_view-welcome\" THEN 1\n        WHEN event_name_with_screen = \"screen_view-home\" THEN 2      \n        WHEN event_name_with_screen = \"screen_view-food_category\" THEN 3\n        WHEN event_name_with_screen = \"screen_view-restaurant\" THEN 4       \n        WHEN event_name_with_screen = \"screen_view-cart\" THEN 5\n        WHEN event_name_with_screen = \"click_payment-cart\" THEN 6        \n        ELSE NULL\n      END AS step_number\n  |&gt; WHERE step_number IS NOT NULL    \n  |&gt; AGGREGATE\n       COUNT(DISTINCT user_pseudo_id) AS cnt\n       GROUP BY event_date, event_name_with_screen, step_number\n  |&gt; ORDER BY event_date, step_number\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<h2 id=\"standardsql---pipe-마이그레이션-가이드\">StandardSQL -&gt; PIPE 마이그레이션 가이드</h2>\n<ul>\n  <li>1주일 정도 파이프 문법을 사용하면서 어떻게 옮겨야 할까? 생각해보고 작성한 내용입니다. 추후에 더 추가될 수도 있음</li>\n  <li>FROM 절은 항상 쿼리의 시작\n    <ul>\n      <li>기존: FROM 절이 SELECT 절 뒤에 위치</li>\n      <li>파이프: FROM 절을 쿼리의 가장 앞으로 이동</li>\n    </ul>\n  </li>\n  <li>JOIN은 FROM 절 안에 포함하거나 파이프 연산자로 분리\n    <ul>\n      <li>기존: FROM 절 안에서 JOIN 사용</li>\n      <li>파이프: FROM 절 안에 JOIN을 그대로 사용하거나, 별도의 파이프 연산자로 분리</li>\n    </ul>\n  </li>\n  <li>WHERE 절은 필터링이 필요한 위치에 파이프 연산자를 사용하여 배치\n    <ul>\n      <li>기존: WHERE 절은 FROM 절과 GROUP BY 절 사이에 위치</li>\n      <li>파이프: WHERE 절을 필요한 위치에 파이프 연산자로 연결</li>\n    </ul>\n  </li>\n  <li>SELECT 절은 주로 쿼리의 뒷부분에 파이프 연산자를 사용하여 배치\n    <ul>\n      <li>기존: SELECT 절이 쿼리의 맨 앞에 위치</li>\n      <li>파이프: SELECT 절을 필요한 위치에 파이프 연산자로 연결, 주로 쿼리의 뒷부분에 배치</li>\n    </ul>\n  </li>\n  <li>GROUP BY와 집계 함수는 AGGREGATE 파이프 연산자를 사용\n    <ul>\n      <li>기존: GROUP BY와 집계 함수를 SELECT 절과 함께 사용</li>\n      <li>파이프: GROUP BY와 집계 함수를 AGGREGATE 파이프 연산자로 결합하여 사용</li>\n    </ul>\n  </li>\n  <li>서브쿼리는 파이프 연산자를 사용하여 단계적으로 처리\n    <ul>\n      <li>기존: 여러 개의 중첩된 서브쿼리 사용</li>\n      <li>파이프: 파이프 연산자를 사용하여 서브쿼리를 단계적으로 연결(AS 사용)</li>\n    </ul>\n  </li>\n  <li>불필요한 절과 구문은 제거하고 쿼리를 간소화한다.\n    <ul>\n      <li>기존: 복잡하고 중복된 구문 사용</li>\n      <li>파이프: 파이프 연산자를 활용하여 쿼리를 간소화하고 가독성 향상</li>\n    </ul>\n  </li>\n</ul>\n\n<p><br /></p>\n\n<hr />\n\n<h1 id=\"참고-자료\">참고 자료</h1>\n<ul>\n  <li><a href=\"https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/\">SQL Has Problems. We Can Fix Them: Pipe Syntax In SQL</a></li>\n  <li><a href=\"https://cloud.google.com/bigquery/docs/reference/standard-sql/pipe-syntax\">BigQuery Pipe 공식 문서</a></li>\n  <li><a href=\"https://cloud.google.com/blog/products/data-analytics/simplify-your-sql-with-pipe-syntax-in-bigquery-and-cloud-logging?hl=en\">Revolutionizing SQL with pipe syntax, now available in BigQuery and Cloud Logging</a></li>\n</ul>\n\n<hr />\n\n<ul>\n  <li>글 작성하는데 걸린 시간 : 167분\n    <ul>\n      <li>하고자 하는 이야기, 개요 정리 : 10분</li>\n      <li>초안 글 작성 : 112분</li>\n      <li>초안 후 수정 : 45분</li>\n    </ul>\n  </li>\n  <li>이 개념에 대한 학습은 150분 정도 소요</li>\n</ul>\n",
        "contentSnippet": "2024년 연말에 새로 생긴 BigQuery Pipe 사용법에 대해 작성한 글입니다\n    \n이 글은 2025년 3월 초 기준으로 작성되었습니다\n파이프 문법 Cheatsheet가 궁금하면 BigQuery 가이드북을 방문해주세요\n키워드 : BigQuery Pipe, BigQuery PIPE syntax\n\nBigQuery Pipe Syntax\n이 부분은 구글의 논문인 SQL Has Problems. We Can Fix Them: Pipe Syntax In SQL을 참고했음\n기존 SQL의 문제점\nSQL은 데이터 작업을 위한 표준 언어가 되었고, 대부분의 SQL 엔진 대부분 비슷한 문법을 사용함\n    \n하지만 SQL은 배우기 어렵고, 사용하기 어렵고, 확장하기 어려움\n이런 문제를 해결하기 위해 새로운 언어를 개발해서 제안한 사람들이 있으나, 새로운 언어를 채택하는 과정은 반발심도 있어서 쉽지 않음\nSQL은 다음과 같은 문제점이 존재함\n    \n고정된 구문 순서\n중복된 구문(예 : 필터링)\n서브 쿼리 사용\n내부 -> 외부의 데이터 흐름\n동일한 컬럼들의 반복\n고정된 구문 순서\nSELECT - FROM - WHERE - GROUP BY 순서가 고정되어 있어서 유연성이 떨어짐\n    \n문법과 의미 관점에서 순서가 다름\n데이터는 FROM에서 나오기 때문에, FROM 절부터 생각해야 함\n    \n그러나 쿼리의 시작이 SELECT라 헷갈리게 됨\n처음 SQL을 학습할 때 많은 분들이 이 부분에 대해 어려워 함\n중복된 구문(예 : 필터링)\n데이터를 필터링할 때, WHERE, HAVING, QUALIFY를 사용할 수 있음\n    \n이 3개가 사용되는 경우는 모두 다르지만, 결국에 데이터를 필터링할 때 사용됨. 그래서 처음 SQL을 공부하는 사람이 헷갈리게 됨. 언제 WHERE? 언제 HAVING?\n아래 쿼리를 보면 WHERE, HAVING, QUALIFY에 대해 작성되어 있음. 궁극적으로 이걸 하나로 통일할 수는 없을까?\n\nSELECT\n  customer_name,\n  order_date,\n  SUM(amount) AS total,\n  RANK() OVER (PARTITION BY customer_name ORDER BY SUM(amount) DESC) AS rk\nFROM customers \nJOIN orders ON customers.id = orders.customer_id\nWHERE region = 'East'           -- 집계 전 필터링\nGROUP BY customer_name, order_date\nHAVING SUM(amount) > 1000       -- 집계 후 필터링\nQUALIFY rk = 1  \n\n\n서브 쿼리 사용\n다중 집계, 계산된 표현의 재사용 등을 위해 서브 쿼리를 사용해야 함\n    \n서브 쿼리는 들여쓰기가 많아져서 가독성을 해치고, 편집할 때 실수를 유발할 가능성이 생김\n간단한 연산이지만 서브 쿼리가 필요한 경우\n    \n두 번 이상 합산하기\n지원되는 세 곳(WHERE, HAVING, QUALIFY) 이외의 위치에 필터링을 해야할 때, 서브 쿼리로 한번 감싸서 처리해야 함\nBigQuery ML을 사용해서 임베딩 모델을 예측하고, 그 후에 예측할 때 서브 쿼리를 사용해야 함(2번 연속으로 서브 쿼리 사용)\n\nSELECT *\nFROM ML.PREDICT(\n  MODEL `my_project.imdb_classifier`,\n  (\n    SELECT *\n    FROM ML.PREDICT(\n      MODEL `my_project.nnlm_embedding_model`,\n      (SELECT '<text>' AS input, 7 AS rating)\n    )\n  )\n)\n\n\n내부 -> 외부의 데이터 흐름\n서브 쿼리, JOIN 등이 혼합된 쿼리를 볼 때 제일 안쪽에 있는 FROM을 확인하고, 바깥쪽으로 쿼리문을 읽어야 함\n    \n이 과정이 직관적이지 않고, 쿼리를 보는 시간을 늘림\n아래 쿼리를 보면 FROM customer 부터 이해를 하고, 그 안에 있는 부분 => 바깥을 이해해야 함\n\nSELECT\n  c_count,\n  COUNT(*) AS custdist\nFROM (\n  SELECT\n    c_custkey,\n    COUNT(o_orderkey) c_count\n  FROM customer\n  LEFT OUTER JOIN orders ON c_custkey = o_custkey\n  AND o_comment NOT LIKE '%unusual%packages%'\n  GROUP BY c_custkey\n) AS c_orders\nGROUP BY\n  c_count\nORDER BY\n  custdist DESC,\n  c_count DESC;\n\n\n동일한 컬럼들의 반복\nSELECT, GROUP BY, ORDER BY 등에 중복된 컬럼을 사용하는 경우가 있음\n하나의 컬럼을 변경할 때, 다른 곳을 모두 변경해야 함(물론 GROUP BY는 GROUP BY ALL로 대체할 수 있긴 함)\n아래 쿼리에서 SELECT에 있는 컬럼을 바꾸면 GROUP BY, ORDER BY도 수정해야 할 수 있음\n\nSELECT\n  department,\n  employee_name,\n  salary, \n  RANK() OVER (PARTITION BY department ORDER BY salary DESC) as rank\nFROM employees\nGROUP BY\n  department,\n  employee_name,\n  salary\nORDER BY\n  department,\n  rank\n\n\n\nGoogleSQL의 시도 : PIPE 구문 추가\nGoogleSQL에선 새로운 언어를 만드는 방법이 아닌 기존 SQL 기능을 확장해서 문제를 해결하려고 함\n    \nSQL에 data flow syntax를 추가했고 확장하기 쉽고 유연하게 되었음\ndata flow syntax는 쉘 커맨드의 파이프 구문, 스파크의 체이닝과 유사하다고 보면 됨\nSQL에서 표준 절은 정의된 하나의 순서로 발생함. 파이프 구문을 사용하면 임의의 순서로 연산을 만들 수 있음\n\nFROM Produce\n|> WHERE item != 'bananas' AND category IN ('fruit', 'nut')\n|> AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n   GROUP BY item\n|> ORDER BY item DESC\n\n\nBigQuery PIPE 문법의 특징\nLinear Flow : 순차적 실행\nReduced Nesting : 서브쿼리를 사용하지 않음\n재생산성이 가능하고 직관적임\nFROM 부터 시작함\n파이프 연산자로 |>을 사용함\n파이프 연산자는 유효한 쿼리 뒤에 계속 추가할 수 있음\n아래 이미지를 보면 파이프 문법에선 의미론적인 순서와 동일해짐\n\n\n파이프 문자(|>)를 사용하는 이유\n친숙함과 선례 관점\n    \n(1) 유닉스 파이프는 널리 이해되는 패러다임으로, 이 구문과 동작을 친숙하고 이해하기 쉽게 만듦\n(2) 다른 데이터 처리 언어(예: KQL)도 파이프 구문을 사용함\n(3) 파이프와 같은 데이터 흐름은 Pandas DataFrames와 Apache Beam 등의 데이터 처리 프레임워크에서도 사용됨\n기술적 관점\n    \n(1) 파이프 연산자를 사용하면 어디서 구문이 시작되는지 명확히 알 수 있음\n(2) 파싱하는 방법이 간단해져서 확장성이 증가됨\n(3) 파이프 연산자는 이전 단계의 결과에 존재하는 컬럼만 접근할 수 있음. 명확해지고 예측이 가능해짐\n(4) 파이프 연산자를 사용해서 순차적으로 연산을 진행할 수 있음\n가독성 관점\n    \n(1) 언제 파이프 연산자로 전환되는지 인식하기 수월함\n(2) 여러 절로 구성된 파이프 연산자를 하나의 논리적인 단위로 인식할 수 있게 해줌\n\n  |> AGGREGATE SUM(sales) AS total_sales, AVG(price) AS avg_price\n     GROUP BY region, product\n\n        \n(3) 구조적 가시성 : 쿼리를 순차적인 N개의 연산으로 표현 가능. 쿼리의 논리적 흐름을 시각적으로 더 잘 반영함\n파이프 문자로 |을 사용할 수 있지만, 비트 연산에 사용되기 때문에 헷갈리고 충돌이 생기게 됨. 그래서 |>을 선택함\n\n\n\n\n\nBigQuery PIPE 문법\n공식 문서에서 확인할 수 있고, 앞으로 계속 늘어날 것으로 예상\n일반적으로 사용하는 FROM, SELECT, JOIN, WHERE, LIMIT, ORDER BY은 동일하다고 생각하면 됨\n아래에선 PIPE 문법 중 특별한 부분만 기록\n\n\nSET\nSELECT * REPLACE(expression AS col)와 동일한 표현\n컬럼을 다른 값으로 대체함\n\n(\n  SELECT 1 AS x, 11 AS y\n  UNION ALL\n  SELECT 2 AS x, 22 AS y\n)\n|> SET x = x * x, y = 3;\n\n/*\n+---+---+\n| x | y |\n+---+---+\n| 1 | 3 |\n| 4 | 3 |\n+---+---+\n*/\n\n\n\nEXTEND\nSELECT *, new_col과 동일한 표현\n기존 테이블의 모든 컬럼에 새로운 컬럼 추가\n    \n파이프 문법에선 이전 결과에 나오는 컬럼만 선택할 수 있어서 EXTEND를 사용해야 할 수 있음\n\n(\n  SELECT 'apples' AS item, 2 AS sales\n  UNION ALL\n  SELECT 'carrots' AS item, 8 AS sales\n)\n|> EXTEND item IN ('carrots', 'oranges') AS is_orange;\n\n/*\n+---------+-------+------------+\n| item    | sales | is_orange |\n+---------+-------+------------+\n| apples  | 2    | FALSE     |\n| carrots | 8    | TRUE      |\n+---------+-------+------------+\n*/\n\n\n\nAGGREGATE\n전체 테이블 또는 컬럼의 값에 대한 집계 수행\n전체 테이블 집계\n\n  -- Full-table aggregation\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |> AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales;\n    \n  /*\n  +-----------+-------------+\n  | num_items | total_sales |\n  +-----------+-------------+\n  | 3        | 14        |\n  +-----------+-------------+\n  */\n\n    \nGROUP BY와 함께 사용해서 집계\n\n  -- Aggregation with grouping\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |> AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n     GROUP BY item;\n    \n  /*\n  +---------+-----------+-------------+\n  | item   | num_items | total_sales |\n  +---------+-----------+-------------+\n  | apples  | 2       | 9         |\n  | bananas | 1       | 5         |\n  +---------+-----------+-------------+\n  */\n\n    \nGROUP AND ORDER BY를 사용하면 컬럼을 반복적으로 입력하지 않아도 괜찮음\n\n  -- Aggregation with grouping and order by\n  (\n    SELECT 'apples' AS item, 2 AS sales\n    UNION ALL\n    SELECT 'bananas' AS item, 5 AS sales\n    UNION ALL\n    SELECT 'apples' AS item, 7 AS sales\n  )\n  |> AGGREGATE COUNT(*) AS num_items, SUM(sales) AS total_sales\n     GROUP AND ORDER BY item;\n\n    \n\nPIVOT\nStandardSQL의 PIVOT 함수를 사용할 수도 있음\n열(Row)을 컬럼(Column)으로 회전\n\n(\n  SELECT \"kale\" AS product, 51 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"kale\" AS product, 4 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"kale\" AS product, 45 AS sales, \"Q2\" AS quarter\n  UNION ALL\n  SELECT \"apple\" AS product, 8 AS sales, \"Q1\" AS quarter\n  UNION ALL\n  SELECT \"apple\" AS product, 10 AS sales, \"Q2\" AS quarter\n)\n|> PIVOT(SUM(sales) FOR quarter IN ('Q1', 'Q2'));\n\n/*\n+---------+----+------+\n| product | Q1 | Q2  |\n+---------+-----------+\n| kale    | 55 | 45  |\n| apple   | 8  | 10  |\n+---------+----+------+\n*/\n\n\nUNPIVOT\n컬럼(Column)을 열(Row)로 회전\n\n(\n  SELECT 'kale' as product, 55 AS Q1, 45 AS Q2\n  UNION ALL\n  SELECT 'apple', 8, 10\n)\n|> UNPIVOT(sales FOR quarter IN (Q1, Q2));\n\n/*\n+---------+-------+---------+\n| product | sales | quarter |\n+---------+-------+---------+\n| kale   | 55    | Q1    |\n| kale   | 45    | Q2    |\n| apple  | 8     | Q1    |\n| apple  | 10    | Q2    |\n+---------+-------+---------+\n*/\n\n\nUNION ALL BY NAME\nUNION ALL을 할 때 이름으로 자동으로 매칭해줌(UNION ALL만 사용하면 순서도 맞춰줘야 함\n\nSELECT 1 AS one_digit, 10 AS two_digit\n|> UNION ALL BY NAME\n    (SELECT 20 AS two_digit, 2 AS one_digit);\n\n/*\n+-----------+-----------+\n| one_digit | two_digit |\n+-----------+-----------+\n| 1        | 10      |\n| 2        | 20      |\n+-----------+-----------+\n*/\n\n\n\nCALL\n테이블 값 함수(Table Value Function, TVF) 호출\n    \nTVF가 궁금하면 공식 문서 참고\n\nFROM input_table\n|> CALL tvf1(arg1)\n|> CALL tvf2(arg2, arg3);\n\n\n\nWINDOW\n윈도우 함수 계산하고 싶을 때 사용\n    \n윈도우 함수는 AGGREGATE와 사용하는 것이 아니고 WINDOW를 명시해서 사용해야 함\n\n(\n  SELECT 'apples' AS item, 2 AS sales\n  UNION ALL\n  SELECT 'bananas' AS item, 5 AS sales\n  UNION ALL\n  SELECT 'carrots' AS item, 8 AS sales\n)\n|> WINDOW SUM(sales) OVER() AS total_sales;\n\n/*\n+---------+-------+-------------+\n| item   | sales | total_sales |\n+---------+-------+-------------+\n| apples  | 2    | 15        |\n| bananas | 5    | 15        |\n| carrots | 8    | 15        |\n+---------+-------+-------------+\n*/\n\n\n\nDROP\n컬럼을 제외하고 싶을 때 사용\n\nSELECT 'apples' AS item, 2 AS sales, 'fruit' AS category\n|> DROP sales, category;\n\n/*\n+--------+\n| item  |\n+--------+\n| apples |\n+--------+\n*/\n\n\n\nRENAME\n컬럼의 이름을 변경하고 싶은 경우 사용\n\nSELECT 1 AS x, 2 AS y, 3 AS z\n|> AS t\n|> RENAME y AS renamed_y\n|> SELECT *, t.y AS t_y;\n\n/*\n+---+-----------+---+-----+\n| x | renamed_y| z | t_y |\n+---+-----------+---+-----+\n| 1 | 2       | 3 | 2  |\n+---+-----------+---+-----+\n*/\n\n\n\nAS\nInput 테이블에 대해 Alias를 지정하고 싶을 때 사용\n    \nWITH base 대신 AS를 바로 사용해서 쓸 수 있음\n\n(\n  SELECT \"000123\" AS id, \"apples\" AS item, 2 AS sales\n  UNION ALL\n  SELECT \"000456\" AS id, \"bananas\" AS item, 5 AS sales\n) AS sales_table\n|> AGGREGATE SUM(sales) AS total_sales GROUP BY id, item\n-- The sales_table alias is now out of scope. We must introduce a new one.\n|> AS t1\n|> JOIN (SELECT 456 AS id, \"yellow\" AS color) AS t2\n   ON CAST(t1.id AS INT64) = t2.id\n|> SELECT t2.id, total_sales, color;\n\n\n/*\n+-----+-------------+--------+\n| id  | total_sales| color  |\n+-----+-------------+--------+\n| 456 | 5         | yellow |\n+-----+-------------+--------+\n*/\n\n\n\n언제 유용할까?\nBigQuery 처음 학습하는 분들에게 추천\n    \n그러나 회사에서 BigQuery를 사용하지 않으면 애매함(다른 DB에선 아직 지원을 안할 수 있으므로)\nText to SQL을 구현할 때 추천\n    \n기존의 SQL 쿼리에서 파싱이 어려웠는데, 이젠 명확하게 쿼리를 분석하기 좋음\n자연어로 쿼리를 생성할 때, 파이프를 사용하는 것이 더 유리할 것으로 예상\n유사하게 Programmatic하게 쿼리를 생성할 때도 추천\n데이터 엔지니어링 파이프라인\n    \n데이터 엔지니어링 파이프라인 중 Flow가 중요한 경우 추천\n쉘 커맨드에서 데이터를 처리하는 것처럼 사용할 수 있음\n\n문법 정리\n문법을 잘 정리된 형태로 보면 좋을 것 같아, 별도의 웹페이지로 제작함\n    \nBigQuery Guide Book - 빅쿼리 가이드북 - PIPE Cheatsheet 참고\n\n\n\n\n\nStandardSQL vs Pipe 쿼리 비교\n초보자를 위한 BigQuery(SQL) 입문 강의에서 진행한 연습 문제 쿼리를 비교\nStandardSQL\n\n  SELECT\n    p.type1,\n    COUNT(tp.id) AS pokemon_cnt\n  FROM (\n    SELECT\n      id,\n      trainer_id,\n      pokemon_id,\n      status\n    FROM basic.trainer_pokemon\n    WHERE\n      status IN (\"Active\", \"Training\")\n  ) AS tp\n  LEFT JOIN basic.pokemon AS p\n  ON tp.pokemon_id = p.id\n  WHERE\n    type1 = \"Grass\"\n  GROUP BY\n    type1\n  ORDER BY\n    2 DESC \n\n    \nPIPE\n\n  FROM basic.trainer_pokemon AS tp\n  |> WHERE status IN ('Active', 'Training')\n  |> LEFT JOIN basic.pokemon AS p\n    ON tp.pokemon_id = p.id  \n  |> WHERE type1 = 'Grass'\n  |> AGGREGATE\n    COUNT(tp.id) AS pokemon_cnt\n    GROUP BY p.type1\n  |> ORDER BY pokemon_cnt DESC\n\n    \n\n확실히 더 직관적이고, 짧아짐\n\nFirebase, 앱 로그 데이터의 퍼널 쿼리 비교\nBigQuery 활용편(퍼널 분석, 리텐션 분석)에서 진행한 쿼리 비교\nStandardSQL\n\n  WITH base AS (\n    SELECT\n      event_date,\n      event_timestamp,\n      event_name,\n      user_id,\n      user_pseudo_id,\n      platform,\n      MAX(IF(event_param.key = \"firebase_screen\", event_param.value.string_value, NULL)) AS firebase_screen,\n      MAX(IF(event_param.key = \"session_id\", event_param.value.string_value, NULL)) AS session_id\n    FROM advanced.app_logs\n    CROSS JOIN UNNEST(event_params) AS event_param\n    WHERE\n      event_date BETWEEN \"2022-08-01\" AND \"2022-08-18\"\n    GROUP BY ALL\n  ), filter_event_and_concat_event_and_screen AS (\n    SELECT\n      * EXCEPT(event_name, firebase_screen, event_timestamp),\n      CONCAT(event_name, \"-\", firebase_screen) AS event_name_with_screen,\n      DATETIME(TIMESTAMP_MICROS(event_timestamp), 'Asia/Seoul') AS event_datetime\n    FROM base\n    WHERE\n      event_name IN (\"screen_view\", \"click_payment\")\n  )\n  SELECT\n    event_date, # 일자별로 퍼널별 유저 수 쿼리\n    event_name_with_screen,\n    CASE \n      WHEN event_name_with_screen = \"screen_view-welcome\" THEN 1\n      WHEN event_name_with_screen = \"screen_view-home\" THEN 2\n      WHEN event_name_with_screen = \"screen_view-food_category\" THEN 3\n      WHEN event_name_with_screen = \"screen_view-restaurant\" THEN 4\n      WHEN event_name_with_screen = \"screen_view-cart\" THEN 5\n      WHEN event_name_with_screen = \"click_payment-cart\" THEN 6\n    ELSE NULL\n    END AS step_number,\n    COUNT(DISTINCT user_pseudo_id) AS cnt\n  FROM filter_event_and_concat_event_and_screen\n  GROUP BY ALL\n  HAVING step_number IS NOT NULL\n  ORDER BY event_date, step_number\n\n    \nPIPE\n    \n좀 더 간결하게 만들 수 있을 것 같지만 일단 이정도로 올려봄\n\n  FROM advanced.app_logs\n  |> CROSS JOIN UNNEST(event_params) AS event_param\n  |> WHERE event_date BETWEEN \"2022-08-01\" AND \"2022-08-18\" AND event_name IN (\"screen_view\", \"click_payment\")\n  |> AGGREGATE\n     MAX(IF(event_param.key = \"firebase_screen\", event_param.value.string_value, NULL)) AS firebase_screen,\n     MAX(IF(event_param.key = \"session_id\", event_param.value.string_value, NULL)) AS session_id\n     GROUP BY event_date, event_timestamp, event_name, user_id, user_pseudo_id, platform\n  |> SELECT\n      * EXCEPT(event_name, firebase_screen, event_timestamp),  \n      CONCAT(event_name, \"-\", firebase_screen) AS event_name_with_screen,\n      DATETIME(TIMESTAMP_MICROS(event_timestamp), 'Asia/Seoul') AS event_datetime\n  |> EXTEND\n      CASE\n        WHEN event_name_with_screen = \"screen_view-welcome\" THEN 1\n        WHEN event_name_with_screen = \"screen_view-home\" THEN 2      \n        WHEN event_name_with_screen = \"screen_view-food_category\" THEN 3\n        WHEN event_name_with_screen = \"screen_view-restaurant\" THEN 4       \n        WHEN event_name_with_screen = \"screen_view-cart\" THEN 5\n        WHEN event_name_with_screen = \"click_payment-cart\" THEN 6        \n        ELSE NULL\n      END AS step_number\n  |> WHERE step_number IS NOT NULL    \n  |> AGGREGATE\n       COUNT(DISTINCT user_pseudo_id) AS cnt\n       GROUP BY event_date, event_name_with_screen, step_number\n  |> ORDER BY event_date, step_number\n\n    \nStandardSQL -> PIPE 마이그레이션 가이드\n1주일 정도 파이프 문법을 사용하면서 어떻게 옮겨야 할까? 생각해보고 작성한 내용입니다. 추후에 더 추가될 수도 있음\nFROM 절은 항상 쿼리의 시작\n    \n기존: FROM 절이 SELECT 절 뒤에 위치\n파이프: FROM 절을 쿼리의 가장 앞으로 이동\nJOIN은 FROM 절 안에 포함하거나 파이프 연산자로 분리\n    \n기존: FROM 절 안에서 JOIN 사용\n파이프: FROM 절 안에 JOIN을 그대로 사용하거나, 별도의 파이프 연산자로 분리\nWHERE 절은 필터링이 필요한 위치에 파이프 연산자를 사용하여 배치\n    \n기존: WHERE 절은 FROM 절과 GROUP BY 절 사이에 위치\n파이프: WHERE 절을 필요한 위치에 파이프 연산자로 연결\nSELECT 절은 주로 쿼리의 뒷부분에 파이프 연산자를 사용하여 배치\n    \n기존: SELECT 절이 쿼리의 맨 앞에 위치\n파이프: SELECT 절을 필요한 위치에 파이프 연산자로 연결, 주로 쿼리의 뒷부분에 배치\nGROUP BY와 집계 함수는 AGGREGATE 파이프 연산자를 사용\n    \n기존: GROUP BY와 집계 함수를 SELECT 절과 함께 사용\n파이프: GROUP BY와 집계 함수를 AGGREGATE 파이프 연산자로 결합하여 사용\n서브쿼리는 파이프 연산자를 사용하여 단계적으로 처리\n    \n기존: 여러 개의 중첩된 서브쿼리 사용\n파이프: 파이프 연산자를 사용하여 서브쿼리를 단계적으로 연결(AS 사용)\n불필요한 절과 구문은 제거하고 쿼리를 간소화한다.\n    \n기존: 복잡하고 중복된 구문 사용\n파이프: 파이프 연산자를 활용하여 쿼리를 간소화하고 가독성 향상\n\n참고 자료\nSQL Has Problems. We Can Fix Them: Pipe Syntax In SQL\nBigQuery Pipe 공식 문서\nRevolutionizing SQL with pipe syntax, now available in BigQuery and Cloud Logging\n글 작성하는데 걸린 시간 : 167분\n    \n하고자 하는 이야기, 개요 정리 : 10분\n초안 글 작성 : 112분\n초안 후 수정 : 45분\n이 개념에 대한 학습은 150분 정도 소요",
        "guid": "https://zzsza.github.io/gcp/2025/03/01/bigquery-pipe/",
        "categories": [
          "BigQuery",
          "gcp"
        ],
        "isoDate": "2025-03-01T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "구글 플레이 / 변경사항이 아직 검토를 위해 전송되지 않음 / Android 13 이상을 타겟팅하는 모든 개발자는 앱에서 광고 ID를 사용하는지 여부를 Google Play에 알려야 합니다.",
        "link": "http://serverdown.tistory.com/1167",
        "pubDate": "Wed, 5 Mar 2025 20:16:55 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1167#entry1167comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1119\" data-origin-height=\"293\"><span data-url=\"https://blog.kakaocdn.net/dn/dFLWIj/btsMB4hdKoZ/RkH7Ry67h7AcTH8vjdebB0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dFLWIj/btsMB4hdKoZ/RkH7Ry67h7AcTH8vjdebB0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dFLWIj/btsMB4hdKoZ/RkH7Ry67h7AcTH8vjdebB0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdFLWIj%2FbtsMB4hdKoZ%2FRkH7Ry67h7AcTH8vjdebB0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1119\" height=\"293\" data-origin-width=\"1119\" data-origin-height=\"293\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">Android 13 이상을 타겟팅하는 모든 개발자는 앱에서 광고 ID를 사용하는지 여부를 Google Play에 알려야 합니다.</span></p>\n<p data-ke-size=\"size16\">이런 문제가 있다는군요</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"894\" data-origin-height=\"283\"><span data-url=\"https://blog.kakaocdn.net/dn/uiuqy/btsMBZf3bWK/h6h9LVPB3XQrE1cBhx8Mf1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/uiuqy/btsMBZf3bWK/h6h9LVPB3XQrE1cBhx8Mf1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/uiuqy/btsMBZf3bWK/h6h9LVPB3XQrE1cBhx8Mf1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fuiuqy%2FbtsMBZf3bWK%2Fh6h9LVPB3XQrE1cBhx8Mf1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"894\" height=\"283\" data-origin-width=\"894\" data-origin-height=\"283\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Admob 사용중인데 어쩌나 하다 밑에 버튼을 눌러봤습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"398\" data-origin-height=\"212\"><span data-url=\"https://blog.kakaocdn.net/dn/HqrOK/btsMAW5DzuE/r3Sb01WJxpyWFDUoDAC5Z0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/HqrOK/btsMAW5DzuE/r3Sb01WJxpyWFDUoDAC5Z0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/HqrOK/btsMAW5DzuE/r3Sb01WJxpyWFDUoDAC5Z0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHqrOK%2FbtsMAW5DzuE%2Fr3Sb01WJxpyWFDUoDAC5Z0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"398\" height=\"212\" data-origin-width=\"398\" data-origin-height=\"212\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">광고 ID 에 대해 묻는 설문이 있군요</p>\n<p data-ke-size=\"size16\">저는 Admob 과 애널리틱스 를 사용중입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"302\" data-origin-height=\"326\"><span data-url=\"https://blog.kakaocdn.net/dn/dkZxut/btsMCxDm64j/nt5Uk1GMOBFDAETIWf7tjk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dkZxut/btsMCxDm64j/nt5Uk1GMOBFDAETIWf7tjk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dkZxut/btsMCxDm64j/nt5Uk1GMOBFDAETIWf7tjk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdkZxut%2FbtsMCxDm64j%2Fnt5Uk1GMOBFDAETIWf7tjk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"302\" height=\"326\" data-origin-width=\"302\" data-origin-height=\"326\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">예~</p>\n<p data-ke-size=\"size16\">제 게임은 유저 관리는 하지 않으니&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"219\" data-origin-height=\"565\"><span data-url=\"https://blog.kakaocdn.net/dn/bwFQNM/btsMAYClrUS/n96lq5MyMMRLKwszABbaxK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bwFQNM/btsMAYClrUS/n96lq5MyMMRLKwszABbaxK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bwFQNM/btsMAYClrUS/n96lq5MyMMRLKwszABbaxK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbwFQNM%2FbtsMAYClrUS%2Fn96lq5MyMMRLKwszABbaxK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"219\" height=\"565\" data-origin-width=\"219\" data-origin-height=\"565\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">애널리틱스 묻네요 그것만 체크</p>\n<p data-ke-size=\"size16\">다시 문제의 게시 개요 이동합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">개시 개요</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1116\" data-origin-height=\"382\"><span data-url=\"https://blog.kakaocdn.net/dn/czfE0U/btsMC2QtWUS/RXkuiMNYgJSPXaayHdSnO0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/czfE0U/btsMC2QtWUS/RXkuiMNYgJSPXaayHdSnO0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/czfE0U/btsMC2QtWUS/RXkuiMNYgJSPXaayHdSnO0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FczfE0U%2FbtsMC2QtWUS%2FRXkuiMNYgJSPXaayHdSnO0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1116\" height=\"382\" data-origin-width=\"1116\" data-origin-height=\"382\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">이제 오류가 발견되었다는 문구가 사라졌으며</p>\n<p data-ke-size=\"size16\">변경사항을 보낼 수 있군요&nbsp;</p>\n<p data-ke-size=\"size16\">보내면 바로 출시될꺼 같군요</p>\n<p data-ke-size=\"size16\">빌드 문제는 아니라 다행</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "Android 13 이상을 타겟팅하는 모든 개발자는 앱에서 광고 ID를 사용하는지 여부를 Google Play에 알려야 합니다.\n이런 문제가 있다는군요\n\n\nAdmob 사용중인데 어쩌나 하다 밑에 버튼을 눌러봤습니다.\n\n\n광고 ID 에 대해 묻는 설문이 있군요\n저는 Admob 과 애널리틱스 를 사용중입니다.\n\n\n예~\n제 게임은 유저 관리는 하지 않으니 \n\n\n애널리틱스 묻네요 그것만 체크\n다시 문제의 게시 개요 이동합니다.\n \n개시 개요\n\n\n이제 오류가 발견되었다는 문구가 사라졌으며\n변경사항을 보낼 수 있군요 \n보내면 바로 출시될꺼 같군요\n빌드 문제는 아니라 다행",
        "guid": "http://serverdown.tistory.com/1167",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-03-05T11:16:55.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "중국 인구는 이미 5억명이 줄었다는 주장 / 괴담",
        "link": "http://serverdown.tistory.com/1166",
        "pubDate": "Wed, 5 Mar 2025 01:13:43 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1166#entry1166comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=cHY-ZiGFozA\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=cHY-ZiGFozA</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=cHY-ZiGFozA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/ckaiBR/hyYm8EYsl5/SsWrjpz4w9vLy6U2sAWv1k/img.jpg?width=1280&amp;height=720&amp;face=952_108_1250_434,https://scrap.kakaocdn.net/dn/F2BCq/hyYm5Bs3J0/lmMk8GeVFoOTImsv7g8DkK/img.jpg?width=1280&amp;height=720&amp;face=952_108_1250_434\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"【중국인사이트】 중국 수억 명 인구 증발?!머스크가 폭로한 충격적인 비밀! (진태산 보도)\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/cHY-ZiGFozA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">2억 ~ 5억명이 이미 사라졌을 가능성이 있다는 주장이 나왔습니다.</p>\n<p data-ke-size=\"size16\">이것은 코로나와 주택버블 붕괴로 여러명이 사망했을 가능성이 있다고 합니다.</p>\n<p data-ke-size=\"size16\">몇년째 화장터가 쉬지 않고 가동중이며&nbsp;</p>\n<p data-ke-size=\"size16\">코로나 봉쇄가 너무 과했다고 생각했는데&nbsp;<br />그럴만한 이유가 있었던게 아닌가 하는 생각도 드는군요</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=cHY-ZiGFozA\n\n\n\n2억 ~ 5억명이 이미 사라졌을 가능성이 있다는 주장이 나왔습니다.\n이것은 코로나와 주택버블 붕괴로 여러명이 사망했을 가능성이 있다고 합니다.\n몇년째 화장터가 쉬지 않고 가동중이며 \n코로나 봉쇄가 너무 과했다고 생각했는데 \n그럴만한 이유가 있었던게 아닌가 하는 생각도 드는군요",
        "guid": "http://serverdown.tistory.com/1166",
        "categories": [
          "유튜브",
          "중국"
        ],
        "isoDate": "2025-03-04T16:13:43.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "눈 깜짝할 사이에 당하는 스맛폰 도난",
        "link": "http://serverdown.tistory.com/1165",
        "pubDate": "Tue, 4 Mar 2025 01:32:22 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1165#entry1165comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=UEnx08n0amk\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=UEnx08n0amk</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=UEnx08n0amk\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/gYrm0/hyYm7MAmyo/paOw4akzkjyd8TWsCe5Y40/img.jpg?width=1280&amp;height=720&amp;face=372_56_460_152,https://scrap.kakaocdn.net/dn/bkC7ut/hyYna3BHL3/o8oDkKm5CwqKa5SgR86v2k/img.jpg?width=1280&amp;height=720&amp;face=372_56_460_152\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"【중국인사이트】 AI 얼굴 바꾸기, 음성 변조까지! 중국의 최첨단 사기 수법 대공개!(보도 이태연\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/UEnx08n0amk\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">저도 보고 도 어리둥절 했습니다.</p>\n<p data-ke-size=\"size16\">이런 방식이 있다니 ㄷㄷㄷ</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=UEnx08n0amk\n\n\n\n저도 보고 도 어리둥절 했습니다.\n이런 방식이 있다니 ㄷㄷㄷ",
        "guid": "http://serverdown.tistory.com/1165",
        "isoDate": "2025-03-03T16:32:22.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티 UIToolKit 배워보자 / 디자이너와 프로그래머의 협업이 쉬워진다.",
        "link": "http://serverdown.tistory.com/1164",
        "pubDate": "Sat, 1 Mar 2025 22:15:08 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1164#entry1164comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=eeDjeziVEbA&amp;t=23s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=eeDjeziVEbA&amp;t=23s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=eeDjeziVEbA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/sZ6FI/hyYjFRoFTd/2WGlLIUk67TG0Nekz0zdAK/img.jpg?width=1280&amp;height=720&amp;face=558_74_666_182,https://scrap.kakaocdn.net/dn/cDttCF/hyYjuJalh9/TTJNZK1zdtk8HIKTaJFkNk/img.jpg?width=1280&amp;height=720&amp;face=558_74_666_182\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"UI Toolkit의 기초 1: 레이아웃과 버튼 애니메이션 [유니티 UI 강의, Unity UI Toolkit 강좌]\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/eeDjeziVEbA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<h2 data-ke-size=\"size26\">기존에는 ...</h2>\n<p data-ke-size=\"size16\">UI 디자이너와 프로그래머는 같은 씬파일을 사용해서</p>\n<p data-ke-size=\"size16\">서로 저장하다보면 합치는 과정에서 누구하나 피를 봐야합니다.</p>\n<p data-ke-size=\"size16\">하지만 서로 다른 파일을 사용한다면 쉽겠죠?</p>\n<p data-ke-size=\"size16\">프로그래머가 이런일에 익숙하다면 UI 디자이너에게 별도의 씬파일을 제공해주는 것도 괸찮은 방법이지만</p>\n<p data-ke-size=\"size16\">아예 유니티에서 만들어 줬습니다.</p>\n<p data-ke-size=\"size16\">그이름이 UIToolKit 입니다.</p>\n<p data-ke-size=\"size16\">uxml 이라는 파일을 사용하며 html 형식으로 제작됩니다.</p>\n<p data-ke-size=\"size16\">디자이너는 uxml 을 편집해서 작업을하고</p>\n<p data-ke-size=\"size16\">프로그래머는 uxml 에 있는 요소와 연결하여 상호작용하기 때문에 서로 겹칠일이 없게됩니다.</p>\n<p data-ke-size=\"size16\">씬은 계속 프로그래머가 사용하겠군요</p>\n<p data-ke-size=\"size16\">좋은 방식입니다. <br />생소한 UI 에 적응하시기 바랍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">코딩 부분</h2>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=_jtj73lu2Ko\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=_jtj73lu2Ko</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=_jtj73lu2Ko\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/LOkvg/hyYmRCFaSw/eE9Vqmmm5R78iqgiozIjz0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/dYnavU/hyYm6GA8k6/KHffCA2UxhmkwZFHUQHjK1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Get started with UI Toolkit in Unity\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/_jtj73lu2Ko\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">이영상을 참고해서 아래의 코드를 작성했다</p>\n<p data-ke-size=\"size16\">버튼을 누르면 어떤 box 의 배경색을 바꾸는 코드이다.</p>\n<p data-ke-size=\"size16\">프로그래머가 해야할 부분은 마우스로 UI 요소를 끌어다 놓는 일을</p>\n<p data-ke-size=\"size16\">이제 UI 엘리먼트 이름을 가져와 사용해야한다.</p>\n<p data-ke-size=\"size16\">이름은 서로 잘 협의 되어야겠다. 있던게 삭제되고 그러면 곤란하다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">using&nbsp;UnityEngine; <br />using&nbsp;UnityEngine.UIElements; <br /><br />public&nbsp;class&nbsp;TestMyUIDoc&nbsp;:&nbsp;MonoBehaviour <br />{ <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> public UIDocument doc; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Button&nbsp;button; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> VisualElement box; <br /><br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> int&nbsp;index&nbsp;=&nbsp;0; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Color[]&nbsp;colors&nbsp;=&nbsp;new&nbsp;Color[3] <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> { <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Color.red, <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Color.green, <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Color.blue, <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> }; <br /><br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> void&nbsp;Start() <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> { <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> box = doc.rootVisualElement.Q&lt;VisualElement&gt;(\"mybox\"); <br /><br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> button = doc.rootVisualElement.Q&lt;Button&gt;(\"mybutton\"); <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> button.RegisterCallback&lt;ClickEvent&gt;(delegate <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> {<br /><span style=\"text-align: start;\"> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> // 버튼 이벤트</span><br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> Debug.Log(\"click\");<br /><span style=\"text-align: start;\"> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> // 색깔을 바꾼다.</span><br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> index++; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> box.style.backgroundColor&nbsp;=&nbsp;colors[index&nbsp;%&nbsp;colors.Length]; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> }); <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> } <br />}</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"502\" data-origin-height=\"535\"><span data-url=\"https://blog.kakaocdn.net/dn/caelQ3/btsMzrctsNF/tDOaXwjYLXIReCSZ9cS8Jk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/caelQ3/btsMzrctsNF/tDOaXwjYLXIReCSZ9cS8Jk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/caelQ3/btsMzrctsNF/tDOaXwjYLXIReCSZ9cS8Jk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcaelQ3%2FbtsMzrctsNF%2FtDOaXwjYLXIReCSZ9cS8Jk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"502\" height=\"535\" data-origin-width=\"502\" data-origin-height=\"535\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">doc 정도는 마우스로 끌어다 놓아다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"223\" data-origin-height=\"170\"><span data-url=\"https://blog.kakaocdn.net/dn/bCunsO/btsMynhKuAu/kKaqbM6auQmXEsyhszTJ31/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bCunsO/btsMynhKuAu/kKaqbM6auQmXEsyhszTJ31/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bCunsO/btsMynhKuAu/kKaqbM6auQmXEsyhszTJ31/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCunsO%2FbtsMynhKuAu%2FkKaqbM6auQmXEsyhszTJ31%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"223\" height=\"170\" data-origin-width=\"223\" data-origin-height=\"170\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">엘리먼트 이름들은 UI 편집기에서 표시되는 이름이다.</p>\n<p data-ke-size=\"size16\">디자이너랑 협의하던가 디자이너가 완성한 파일을 보고 찾아 쓰면 되겠다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">코딩 자동완성으로 더 많은 기능에 접근 가능해서 편했다.</p>\n<p data-ke-size=\"size16\">위치 맞추는 법이 생각보다 어려웠고 이해가 잘 안되었다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=eeDjeziVEbA&t=23s\n\n\n\n기존에는 ...\nUI 디자이너와 프로그래머는 같은 씬파일을 사용해서\n서로 저장하다보면 합치는 과정에서 누구하나 피를 봐야합니다.\n하지만 서로 다른 파일을 사용한다면 쉽겠죠?\n프로그래머가 이런일에 익숙하다면 UI 디자이너에게 별도의 씬파일을 제공해주는 것도 괸찮은 방법이지만\n아예 유니티에서 만들어 줬습니다.\n그이름이 UIToolKit 입니다.\nuxml 이라는 파일을 사용하며 html 형식으로 제작됩니다.\n디자이너는 uxml 을 편집해서 작업을하고\n프로그래머는 uxml 에 있는 요소와 연결하여 상호작용하기 때문에 서로 겹칠일이 없게됩니다.\n씬은 계속 프로그래머가 사용하겠군요\n좋은 방식입니다. \n생소한 UI 에 적응하시기 바랍니다.\n \n코딩 부분\n영상: https://www.youtube.com/watch?v=_jtj73lu2Ko\n\n\n\n이영상을 참고해서 아래의 코드를 작성했다\n버튼을 누르면 어떤 box 의 배경색을 바꾸는 코드이다.\n프로그래머가 해야할 부분은 마우스로 UI 요소를 끌어다 놓는 일을\n이제 UI 엘리먼트 이름을 가져와 사용해야한다.\n이름은 서로 잘 협의 되어야겠다. 있던게 삭제되고 그러면 곤란하다.\n \nusing UnityEngine; \nusing UnityEngine.UIElements; \npublic class TestMyUIDoc : MonoBehaviour \n{ \n     public UIDocument doc; \n     Button button; \n     VisualElement box; \n     int index = 0; \n     Color[] colors = new Color[3] \n     { \n          Color.red, \n          Color.green, \n          Color.blue, \n     }; \n     void Start() \n     { \n          box = doc.rootVisualElement.Q<VisualElement>(\"mybox\"); \n          button = doc.rootVisualElement.Q<Button>(\"mybutton\"); \n          button.RegisterCallback<ClickEvent>(delegate \n          {\n                // 버튼 이벤트\n               Debug.Log(\"click\");\n                // 색깔을 바꾼다.\n               index++; \n               box.style.backgroundColor = colors[index % colors.Length]; \n          }); \n     } \n}\n \n\n\ndoc 정도는 마우스로 끌어다 놓아다.\n \n\n\n엘리먼트 이름들은 UI 편집기에서 표시되는 이름이다.\n디자이너랑 협의하던가 디자이너가 완성한 파일을 보고 찾아 쓰면 되겠다.\n \n코딩 자동완성으로 더 많은 기능에 접근 가능해서 편했다.\n위치 맞추는 법이 생각보다 어려웠고 이해가 잘 안되었다.",
        "guid": "http://serverdown.tistory.com/1164",
        "categories": [
          "프로그래밍/개발메모",
          "유니티"
        ],
        "isoDate": "2025-03-01T13:15:08.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "프로그래머와 협업을 위한 git 설치와 사용 / TortoiseGit",
        "link": "http://serverdown.tistory.com/1163",
        "pubDate": "Sat, 1 Mar 2025 18:59:21 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1163#entry1163comment",
        "content": "<p data-ke-size=\"size16\">코딩하는 사람은&nbsp;</p>\n<p data-ke-size=\"size16\">이미지나 ui 의 모양은 개발하는데 중요하진 않습니다.<br />개발은 더미 이미지나 버튼 배치로 얼마든지 진행할 수 있습니다.</p>\n<p data-ke-size=\"size16\">하지만 디자이너들에겐 이런것들이 중요하겠죠</p>\n<p data-ke-size=\"size16\">개발자에게 이미지를 바꿀때마다 파일을 던져는 식이라면 양쪽모두에게 절차가 길어집니다.</p>\n<p data-ke-size=\"size16\">그래서 디자이너가 직접 파일을 바꿀 수 있게 해주는 것이 좋습니다.</p>\n<p data-ke-size=\"size16\">디자이너는 <span style=\"text-align: start;\">매번 덮어쓰면되기 때문에</span> GIT 에 대해 알아햘 사항이 많지는 않습니다.&nbsp;</p>\n<p data-ke-size=\"size16\">그래서 익혀두시면 좋습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">구글에서 TortoiseGit&nbsp; 이걸 검색하면 설치페이지를 알려줍니다.</p>\n<p data-ke-size=\"size16\">거북이 깃 최신버전 링크: <a href=\"https://tortoisegit.org/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://tortoisegit.org/</a></p>\n<p data-ke-size=\"size16\">보통 64bit 쓰니까 64bit 로 설치합니다.</p>\n<p data-ke-size=\"size16\">다음다음 해서 설치하시구요</p>\n<p data-ke-size=\"size16\">여기까지 하시면</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"356\" data-origin-height=\"469\"><span data-url=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbi115D%2FbtsMBe348pZ%2FBYyWWk44xwMs5AkMRaxRuK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"356\" height=\"469\" data-origin-width=\"356\" data-origin-height=\"469\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">윈도우 탐색기에서 우클릭 하시면 clone 을 할 수 있습니다.</p>\n<p data-ke-size=\"size16\">처음에 소스를 가져오는 행동이 클론 clone 입니다.</p>\n<p data-ke-size=\"size16\">눌러모시면 에러가 납니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"405\" data-origin-height=\"298\"><span data-url=\"https://blog.kakaocdn.net/dn/b03qHO/btsMAILhfvM/gyzWi7gkQxwZxJINdDGYMk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b03qHO/btsMAILhfvM/gyzWi7gkQxwZxJINdDGYMk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b03qHO/btsMAILhfvM/gyzWi7gkQxwZxJINdDGYMk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb03qHO%2FbtsMAILhfvM%2FgyzWi7gkQxwZxJINdDGYMk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"405\" height=\"298\" data-origin-width=\"405\" data-origin-height=\"298\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">git 명령어 프로그램이 필요하기 때문입니다.</p>\n<p data-ke-size=\"size16\">일단 Set Git Path 를 누릅니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"634\" data-origin-height=\"563\"><span data-url=\"https://blog.kakaocdn.net/dn/rajen/btsMz9iguSh/fGRvDbzT2FL7GWutH2JDl0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/rajen/btsMz9iguSh/fGRvDbzT2FL7GWutH2JDl0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/rajen/btsMz9iguSh/fGRvDbzT2FL7GWutH2JDl0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Frajen%2FbtsMz9iguSh%2FfGRvDbzT2FL7GWutH2JDl0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"634\" height=\"563\" data-origin-width=\"634\" data-origin-height=\"563\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">화살표를 보시면 git 을 받을 수 있는 링크를 제공합니다.&nbsp;<br />눌러서 웹페이지가 열리면 다운받을 수 있습니다.</p>\n<p data-ke-size=\"size16\">실행하시면 여러가지를 물어보는데 <br />따로 만질것은 없고 다음다음 눌러 설치하면 됩니다.</p>\n<p data-ke-size=\"size16\">위에 Set Git Path 창은 이제 필요 없습니다. 닫으시구요</p>\n<p data-ke-size=\"size16\">clone 다시 진행합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">거북이 깃은 git 명령어가 어렵기 때문에 ui 로 만질수 있게 해주는&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"356\" data-origin-height=\"469\"><span data-url=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bi115D/btsMBe348pZ/BYyWWk44xwMs5AkMRaxRuK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbi115D%2FbtsMBe348pZ%2FBYyWWk44xwMs5AkMRaxRuK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"356\" height=\"469\" data-origin-width=\"356\" data-origin-height=\"469\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"674\" data-origin-height=\"471\"><span data-url=\"https://blog.kakaocdn.net/dn/UTEvj/btsMyjNboIx/5QR04w1C7hAxfPfAnKFxq0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/UTEvj/btsMyjNboIx/5QR04w1C7hAxfPfAnKFxq0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/UTEvj/btsMyjNboIx/5QR04w1C7hAxfPfAnKFxq0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUTEvj%2FbtsMyjNboIx%2F5QR04w1C7hAxfPfAnKFxq0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"674\" height=\"471\" data-origin-width=\"674\" data-origin-height=\"471\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">url 주소 넣으시구요 ok 누릅니다.</p>\n<p data-ke-size=\"size16\">각 주소에 따라 접근권한이 막혀있으면 각종 로그인 창이 뜹니다.</p>\n<p data-ke-size=\"size16\">로그인하시면 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이제 뭔가 수정했다고 치고요 수정이 되면 파일이 빨간색 아이콘이 뜨게됩니다.</p>\n<p data-ke-size=\"size16\">파일을 업로드하는 과정인&nbsp; commit 과 push 를 해봅시다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"346\" data-origin-height=\"128\"><span data-url=\"https://blog.kakaocdn.net/dn/bn3eJB/btsMzOrOnAf/OUY30hDhkcPq4aKbV61JG1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bn3eJB/btsMzOrOnAf/OUY30hDhkcPq4aKbV61JG1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bn3eJB/btsMzOrOnAf/OUY30hDhkcPq4aKbV61JG1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbn3eJB%2FbtsMzOrOnAf%2FOUY30hDhkcPq4aKbV61JG1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"346\" height=\"128\" data-origin-width=\"346\" data-origin-height=\"128\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">우클릭해서 commit 누르세요</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"674\" data-origin-height=\"659\"><span data-url=\"https://blog.kakaocdn.net/dn/b1B3NN/btsMA6ynJCz/1MFyMjCBH7iqkGkgojTZIk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b1B3NN/btsMA6ynJCz/1MFyMjCBH7iqkGkgojTZIk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b1B3NN/btsMA6ynJCz/1MFyMjCBH7iqkGkgojTZIk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb1B3NN%2FbtsMA6ynJCz%2F1MFyMjCBH7iqkGkgojTZIk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"674\" height=\"659\" data-origin-width=\"674\" data-origin-height=\"659\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">상단부에 설명을 써야합니다. <br />비어있으면 안올라가기 때문에 아무거나 쓰세요</p>\n<p data-ke-size=\"size16\">아래쪽엔 내가 고친 파일들이 보입니다. 확인하시구요</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"369\" data-origin-height=\"153\"><span data-url=\"https://blog.kakaocdn.net/dn/bHXMy1/btsMzZGJW3T/99GzCXKCMPn1AocmV8Ax9K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bHXMy1/btsMzZGJW3T/99GzCXKCMPn1AocmV8Ax9K/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bHXMy1/btsMzZGJW3T/99GzCXKCMPn1AocmV8Ax9K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbHXMy1%2FbtsMzZGJW3T%2F99GzCXKCMPn1AocmV8Ax9K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"369\" height=\"153\" data-origin-width=\"369\" data-origin-height=\"153\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">하단에 Commit 버튼을 보셔야합니다.</p>\n<p data-ke-size=\"size16\">commit 만 하시면 서버에 안올라갑니다. push 를 해야 서버까지 올라갑니다.</p>\n<p data-ke-size=\"size16\">화살표 보고 Commit &amp; Push 를 누르세요</p>\n<p data-ke-size=\"size16\">누르면 바로 진행합니다.</p>\n<p data-ke-size=\"size16\">권한 설정에 따라 성공하거나 실패할 수 있습니다. <br />실패하면 git 소스 소유자에게 물어보세요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">최신소스 받는법 Pull</h2>\n<p data-ke-size=\"size16\">처음엔 clone 을 해서 받아왔지만 이후에는 Pull 을 이용해 가져와야합니다.</p>\n<p data-ke-size=\"size16\">매번 clone 을 하면 오래걸리 때문에 바뀐거만 받는 것입니다.</p>\n<p data-ke-size=\"size16\">우클릭하구요</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"369\" data-origin-height=\"153\"><span data-url=\"https://blog.kakaocdn.net/dn/cDYrFF/btsMyHfQStb/qRyBVt7Yw0D8WMmFE0bmM0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cDYrFF/btsMyHfQStb/qRyBVt7Yw0D8WMmFE0bmM0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cDYrFF/btsMyHfQStb/qRyBVt7Yw0D8WMmFE0bmM0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcDYrFF%2FbtsMyHfQStb%2FqRyBVt7Yw0D8WMmFE0bmM0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"369\" height=\"153\" data-origin-width=\"369\" data-origin-height=\"153\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Git Sync 누릅니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"733\" data-origin-height=\"564\"><span data-url=\"https://blog.kakaocdn.net/dn/cB3ugv/btsMz6eLeEH/csQAeVBOhWwWFJqTkZZbO1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cB3ugv/btsMz6eLeEH/csQAeVBOhWwWFJqTkZZbO1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cB3ugv/btsMz6eLeEH/csQAeVBOhWwWFJqTkZZbO1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcB3ugv%2FbtsMz6eLeEH%2FcsQAeVBOhWwWFJqTkZZbO1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"733\" height=\"564\" data-origin-width=\"733\" data-origin-height=\"564\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">아래에 보시면 Pull 있습니다. 누르시면 받아집니다.</p>\n<p data-ke-size=\"size16\">참고로 이 창에선 Commit Push 다 별도로 할 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">잘못 고쳤어요 Revert</h2>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">Commit &amp; Push&nbsp;</span> 하기전엔 되돌릴 수 있습니다.</p>\n<p data-ke-size=\"size16\">해당파일에 직접 가서 우클릭하시면</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"712\" data-origin-height=\"825\"><span data-url=\"https://blog.kakaocdn.net/dn/D6tGL/btsMyGOP4eX/zTUPBRMjzqivQbFjdFscoK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/D6tGL/btsMyGOP4eX/zTUPBRMjzqivQbFjdFscoK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/D6tGL/btsMyGOP4eX/zTUPBRMjzqivQbFjdFscoK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FD6tGL%2FbtsMyGOP4eX%2FzTUPBRMjzqivQbFjdFscoK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"712\" height=\"825\" data-origin-width=\"712\" data-origin-height=\"825\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Revert 가 있습니다. 누른다고 진행되는것이 아니고 다시 파일을 고를 수 있는 창이 표시됩니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"534\" data-origin-height=\"503\"><span data-url=\"https://blog.kakaocdn.net/dn/Va06d/btsMA7D2x31/fJG1JZFNkIKaa7UfnDlDZ0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Va06d/btsMA7D2x31/fJG1JZFNkIKaa7UfnDlDZ0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Va06d/btsMA7D2x31/fJG1JZFNkIKaa7UfnDlDZ0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FVa06d%2FbtsMA7D2x31%2FfJG1JZFNkIKaa7UfnDlDZ0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"534\" height=\"503\" data-origin-width=\"534\" data-origin-height=\"503\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">어떤파일을 Revert 되돌리기 할지 선택할 수 있습니다.</p>\n<p data-ke-size=\"size16\">파일 체크 하시고 ok 누르시면 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">요약</h2>\n<p data-ke-size=\"size16\">처음에 받기 clone</p>\n<p data-ke-size=\"size16\">고치고 올리기 Commit &amp; Push</p>\n<p data-ke-size=\"size16\">최신소스 다시 받기 Pull</p>\n<p data-ke-size=\"size16\">고친거 버리기 Revert&nbsp;</p>\n<p data-ke-size=\"size16\">이렇게 네가지를 만 하시면 될것 같습니다.</p>\n<p data-ke-size=\"size16\">점점 불황으로 빠지고 있어서 효율을 높이지 않으면 경쟁력에서 밀릴 것입니다.</p>\n<p data-ke-size=\"size16\">적극적으로 사용해서 경쟁력을 올리시 바랍니다.</p>",
        "contentSnippet": "코딩하는 사람은 \n이미지나 ui 의 모양은 개발하는데 중요하진 않습니다.\n개발은 더미 이미지나 버튼 배치로 얼마든지 진행할 수 있습니다.\n하지만 디자이너들에겐 이런것들이 중요하겠죠\n개발자에게 이미지를 바꿀때마다 파일을 던져는 식이라면 양쪽모두에게 절차가 길어집니다.\n그래서 디자이너가 직접 파일을 바꿀 수 있게 해주는 것이 좋습니다.\n디자이너는 매번 덮어쓰면되기 때문에 GIT 에 대해 알아햘 사항이 많지는 않습니다. \n그래서 익혀두시면 좋습니다.\n \n구글에서 TortoiseGit  이걸 검색하면 설치페이지를 알려줍니다.\n거북이 깃 최신버전 링크: https://tortoisegit.org/\n보통 64bit 쓰니까 64bit 로 설치합니다.\n다음다음 해서 설치하시구요\n여기까지 하시면\n\n\n윈도우 탐색기에서 우클릭 하시면 clone 을 할 수 있습니다.\n처음에 소스를 가져오는 행동이 클론 clone 입니다.\n눌러모시면 에러가 납니다.\n\n\ngit 명령어 프로그램이 필요하기 때문입니다.\n일단 Set Git Path 를 누릅니다.\n\n\n화살표를 보시면 git 을 받을 수 있는 링크를 제공합니다. \n눌러서 웹페이지가 열리면 다운받을 수 있습니다.\n실행하시면 여러가지를 물어보는데 \n따로 만질것은 없고 다음다음 눌러 설치하면 됩니다.\n위에 Set Git Path 창은 이제 필요 없습니다. 닫으시구요\nclone 다시 진행합니다.\n \n \n \n \n \n \n거북이 깃은 git 명령어가 어렵기 때문에 ui 로 만질수 있게 해주는 \n\n\n\nurl 주소 넣으시구요 ok 누릅니다.\n각 주소에 따라 접근권한이 막혀있으면 각종 로그인 창이 뜹니다.\n로그인하시면 됩니다.\n \n이제 뭔가 수정했다고 치고요 수정이 되면 파일이 빨간색 아이콘이 뜨게됩니다.\n파일을 업로드하는 과정인  commit 과 push 를 해봅시다.\n\n\n우클릭해서 commit 누르세요\n\n\n상단부에 설명을 써야합니다. \n비어있으면 안올라가기 때문에 아무거나 쓰세요\n아래쪽엔 내가 고친 파일들이 보입니다. 확인하시구요\n\n\n하단에 Commit 버튼을 보셔야합니다.\ncommit 만 하시면 서버에 안올라갑니다. push 를 해야 서버까지 올라갑니다.\n화살표 보고 Commit & Push 를 누르세요\n누르면 바로 진행합니다.\n권한 설정에 따라 성공하거나 실패할 수 있습니다. \n실패하면 git 소스 소유자에게 물어보세요\n \n최신소스 받는법 Pull\n처음엔 clone 을 해서 받아왔지만 이후에는 Pull 을 이용해 가져와야합니다.\n매번 clone 을 하면 오래걸리 때문에 바뀐거만 받는 것입니다.\n우클릭하구요\n\n\nGit Sync 누릅니다.\n\n\n아래에 보시면 Pull 있습니다. 누르시면 받아집니다.\n참고로 이 창에선 Commit Push 다 별도로 할 수 있습니다.\n \n \n잘못 고쳤어요 Revert\nCommit & Push  하기전엔 되돌릴 수 있습니다.\n해당파일에 직접 가서 우클릭하시면\n\n\nRevert 가 있습니다. 누른다고 진행되는것이 아니고 다시 파일을 고를 수 있는 창이 표시됩니다.\n\n\n어떤파일을 Revert 되돌리기 할지 선택할 수 있습니다.\n파일 체크 하시고 ok 누르시면 됩니다.\n \n요약\n처음에 받기 clone\n고치고 올리기 Commit & Push\n최신소스 다시 받기 Pull\n고친거 버리기 Revert \n이렇게 네가지를 만 하시면 될것 같습니다.\n점점 불황으로 빠지고 있어서 효율을 높이지 않으면 경쟁력에서 밀릴 것입니다.\n적극적으로 사용해서 경쟁력을 올리시 바랍니다.",
        "guid": "http://serverdown.tistory.com/1163",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-03-01T09:59:21.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "일론머스크의 DOGE 기관이 하는 일을 알아보자",
        "link": "http://serverdown.tistory.com/1162",
        "pubDate": "Sat, 1 Mar 2025 17:08:44 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1162#entry1162comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=dtMqHIK1ol0\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=dtMqHIK1ol0</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=dtMqHIK1ol0\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bkYamu/hyYjsLjMoY/sI6egNxIHkD6058wiEUsUK/img.jpg?width=1280&amp;height=720&amp;face=658_176_874_412\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"[경제잡썰] 모두를 충격에 빠트린 세금 루팡\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/dtMqHIK1ol0\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">평화의시대에 너무 나태해졌습니다.</p>\n<p data-ke-size=\"size16\">이젠 중국과의 경쟁을 해야하는 판이라 더이상 미룰 수 없고</p>\n<p data-ke-size=\"size16\">혁신이 필요할때 같습니다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=dtMqHIK1ol0\n\n\n\n \n평화의시대에 너무 나태해졌습니다.\n이젠 중국과의 경쟁을 해야하는 판이라 더이상 미룰 수 없고\n혁신이 필요할때 같습니다.",
        "guid": "http://serverdown.tistory.com/1162",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2025-03-01T08:08:44.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티 UI 팁 Canvas 로 넓은 화면과 좁은 화면 둘다 맞춰봅시다.",
        "link": "http://serverdown.tistory.com/1161",
        "pubDate": "Fri, 28 Feb 2025 18:50:20 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1161#entry1161comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"255\" data-origin-height=\"331\"><span data-url=\"https://blog.kakaocdn.net/dn/lQoPV/btsMxExfmjv/NC4l2EAAkd1I5I3kEPJ4vK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/lQoPV/btsMxExfmjv/NC4l2EAAkd1I5I3kEPJ4vK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/lQoPV/btsMxExfmjv/NC4l2EAAkd1I5I3kEPJ4vK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlQoPV%2FbtsMxExfmjv%2FNC4l2EAAkd1I5I3kEPJ4vK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"255\" height=\"331\" data-origin-width=\"255\" data-origin-height=\"331\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">힌색 반투명 박스를 넓은 화면과 좁은 화면 둘다 맞출 예정입니다.</p>\n<p data-ke-size=\"size16\">세로화면은 보통 9:16 비율로 맞추죠</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"466\" data-origin-height=\"469\"><span data-url=\"https://blog.kakaocdn.net/dn/TslWE/btsMzh1Uhme/0q6oYVblgAyJ5wNLSuodxK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/TslWE/btsMzh1Uhme/0q6oYVblgAyJ5wNLSuodxK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/TslWE/btsMzh1Uhme/0q6oYVblgAyJ5wNLSuodxK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTslWE%2FbtsMzh1Uhme%2F0q6oYVblgAyJ5wNLSuodxK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"466\" height=\"469\" data-origin-width=\"466\" data-origin-height=\"469\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">Canvas 에 2,3 을 설정을 따라합니다.</p>\n<p data-ke-size=\"size16\">3번은 9:16 에 맞는 해상도를 넣으면 되는데 저는 UI 크기를 맞추다 보니 이렇게 되었습니다.<br />1080 x 1920 이런 식으로 넣으셔도 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"466\" data-origin-height=\"469\"><span data-url=\"https://blog.kakaocdn.net/dn/4TApR/btsMzexl6gA/xsQB5O9BqHBjP0zSj8QQk0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/4TApR/btsMzexl6gA/xsQB5O9BqHBjP0zSj8QQk0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/4TApR/btsMzexl6gA/xsQB5O9BqHBjP0zSj8QQk0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4TApR%2FbtsMzexl6gA%2FxsQB5O9BqHBjP0zSj8QQk0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"466\" height=\"469\" data-origin-width=\"466\" data-origin-height=\"469\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">힌색 박스를 중앙에 맞추고 width 와 height 를 동일하게 넣으시면 CanvasScaler 에 딱맞는 크기로 나옵니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"268\" data-origin-height=\"399\"><span data-url=\"https://blog.kakaocdn.net/dn/cS6jsn/btsMxHHnbLB/t9wqLFwh8VZ4XWvLphqXw0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cS6jsn/btsMxHHnbLB/t9wqLFwh8VZ4XWvLphqXw0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cS6jsn/btsMxHHnbLB/t9wqLFwh8VZ4XWvLphqXw0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcS6jsn%2FbtsMxHHnbLB%2Ft9wqLFwh8VZ4XWvLphqXw0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"268\" height=\"399\" data-origin-width=\"268\" data-origin-height=\"399\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">540 x 960 도 9:16 이기 때문에 꽉차게 표시됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">3번에 width or height 를 설정해야 4번 UI 가 표시됩니다.</p>\n<p data-ke-size=\"size16\">이 방식은 width 에 맞추둔 height 엣추든 하겠다는 뜻입니다.</p>\n<p data-ke-size=\"size16\">width 에 맞추고 싶으면 0<br />height 에 맞추고 싶으면 1</p>\n<p data-ke-size=\"size16\">인데 0.5 같이 애매한 값을 넣으면 이해할 수 없는 이상한 형태가 됩니다.</p>\n<p data-ke-size=\"size16\">그래서 프로그램으로 해결할 것입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"271\" data-origin-height=\"325\"><span data-url=\"https://blog.kakaocdn.net/dn/c9qBxt/btsMzOyo1oj/2SUxnVksKKBiZjzud0WZJk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/c9qBxt/btsMzOyo1oj/2SUxnVksKKBiZjzud0WZJk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/c9qBxt/btsMzOyo1oj/2SUxnVksKKBiZjzud0WZJk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc9qBxt%2FbtsMzOyo1oj%2F2SUxnVksKKBiZjzud0WZJk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"271\" height=\"325\" data-origin-width=\"271\" data-origin-height=\"325\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">3:4 화면 처럼 옆으로 넓으면 위아래를 꽉채워서 좌우가 남게되고</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"250\" data-origin-height=\"391\"><span data-url=\"https://blog.kakaocdn.net/dn/copHu1/btsMAFgwVfv/QDBHgKK1sjtF6QKkDLfWl1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/copHu1/btsMAFgwVfv/QDBHgKK1sjtF6QKkDLfWl1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/copHu1/btsMAFgwVfv/QDBHgKK1sjtF6QKkDLfWl1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcopHu1%2FbtsMAFgwVfv%2FQDBHgKK1sjtF6QKkDLfWl1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"250\" height=\"391\" data-origin-width=\"250\" data-origin-height=\"391\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">9:21 같이 좁은 화면은 좌우를 꽉채워서 위아래를 남기게 할 예정입니다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">보시면 아시겠지만 특별히 화면 가장자리에 배치될 것들은 이상식을 따를 필요는 없습니다.<br /></span><span style=\"text-align: start;\">게임 전에 표시할 메뉴 UI 나 팝업 같은 것에 사용됩니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">이러면 의도한 모든 내용이 화면에 표시되고 밖으로 튀어 나가지 않습니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">코드</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">public&nbsp;class&nbsp;CanvasHelper&nbsp;:&nbsp;MonoBehaviour<br />{ <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> void Awake()<br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> { <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> var scaler = GetComponent&lt;CanvasScaler&gt;(); <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> var aspect = Camera.main.aspect; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> var aspect_9_16 = 9.0f / 16.0f;<br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> if (aspect &gt; aspect_9_16) <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> { <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> scaler.matchWidthOrHeight = 1; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> }<br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> else <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> { <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> scaler.matchWidthOrHeight = 0; <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> } <br /><span style=\"text-align: start;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> }&nbsp;&nbsp;&nbsp;<br />}<br /></span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">코드를 설명하자면 9:16 의 비율보다 크다면 넓은 화면이라 1을 넣고<br />작다면 0을 넣는다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">화면이 9:16 이라면 뭘 넣어도 상관 없으니 이러면 긑이다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">이제 이 스크립트를 Canvas 에 붙이고</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">흰색 사각 바스안에 UI 를 배치하면 될것이다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">SafeArea 라고 아이폰의 상단 노치 (검게 튀어나온 부분) 을 피해서 작업하는 방법도 있다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">내 블로그엔 내용이 없으니 다른 사람 내용을 링크 걸어두겠다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\"><a href=\"https://mingyu0403.tistory.com/310\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://mingyu0403.tistory.com/310</a></span></p>\n<figure id=\"og_1740736196021\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"[Unity] SafeArea로 모바일 Notch 디자인 대응하기\" data-og-description=\"참고 https://www.youtube.com/watch?v=VprqsEsFb5w 위 영상에서는 Package Manager에서 Device Simulator를 다운받았지만, 내가 쓰고 있는 Unity 2021.1.17f1 버전에서는 이미 기본적으로 탑재되어있다. 대응하기 1. Canvas \" data-og-host=\"mingyu0403.tistory.com\" data-og-source-url=\"https://mingyu0403.tistory.com/310\" data-og-url=\"https://mingyu0403.tistory.com/310\" data-og-image=\"https://scrap.kakaocdn.net/dn/g3EVw/hyYmW4Uugn/UYVGzptMEFtuljdd7KMXx1/img.png?width=257&amp;height=461&amp;face=0_0_257_461,https://scrap.kakaocdn.net/dn/gC2FK/hyYjv80cp2/3zfcAP6VRTBfhtFkMmLV1K/img.png?width=257&amp;height=461&amp;face=0_0_257_461,https://scrap.kakaocdn.net/dn/cdg9rK/hyYmYIogqe/xffuwgdLRj3WK1A99IKO70/img.png?width=704&amp;height=675&amp;face=0_0_704_675\"><a href=\"https://mingyu0403.tistory.com/310\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://mingyu0403.tistory.com/310\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/g3EVw/hyYmW4Uugn/UYVGzptMEFtuljdd7KMXx1/img.png?width=257&amp;height=461&amp;face=0_0_257_461,https://scrap.kakaocdn.net/dn/gC2FK/hyYjv80cp2/3zfcAP6VRTBfhtFkMmLV1K/img.png?width=257&amp;height=461&amp;face=0_0_257_461,https://scrap.kakaocdn.net/dn/cdg9rK/hyYmYIogqe/xffuwgdLRj3WK1A99IKO70/img.png?width=704&amp;height=675&amp;face=0_0_704_675');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">[Unity] SafeArea로 모바일 Notch 디자인 대응하기</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">참고 https://www.youtube.com/watch?v=VprqsEsFb5w 위 영상에서는 Package Manager에서 Device Simulator를 다운받았지만, 내가 쓰고 있는 Unity 2021.1.17f1 버전에서는 이미 기본적으로 탑재되어있다. 대응하기 1. Canvas</p>\n<p class=\"og-host\" data-ke-size=\"size16\">mingyu0403.tistory.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">화이팅!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "힌색 반투명 박스를 넓은 화면과 좁은 화면 둘다 맞출 예정입니다.\n세로화면은 보통 9:16 비율로 맞추죠\n\n\nCanvas 에 2,3 을 설정을 따라합니다.\n3번은 9:16 에 맞는 해상도를 넣으면 되는데 저는 UI 크기를 맞추다 보니 이렇게 되었습니다.\n1080 x 1920 이런 식으로 넣으셔도 됩니다.\n \n\n\n힌색 박스를 중앙에 맞추고 width 와 height 를 동일하게 넣으시면 CanvasScaler 에 딱맞는 크기로 나옵니다.\n \n\n\n540 x 960 도 9:16 이기 때문에 꽉차게 표시됩니다.\n \n3번에 width or height 를 설정해야 4번 UI 가 표시됩니다.\n이 방식은 width 에 맞추둔 height 엣추든 하겠다는 뜻입니다.\nwidth 에 맞추고 싶으면 0\nheight 에 맞추고 싶으면 1\n인데 0.5 같이 애매한 값을 넣으면 이해할 수 없는 이상한 형태가 됩니다.\n그래서 프로그램으로 해결할 것입니다.\n \n \n\n\n3:4 화면 처럼 옆으로 넓으면 위아래를 꽉채워서 좌우가 남게되고\n \n\n\n9:21 같이 좁은 화면은 좌우를 꽉채워서 위아래를 남기게 할 예정입니다.\n \n보시면 아시겠지만 특별히 화면 가장자리에 배치될 것들은 이상식을 따를 필요는 없습니다.\n게임 전에 표시할 메뉴 UI 나 팝업 같은 것에 사용됩니다.\n이러면 의도한 모든 내용이 화면에 표시되고 밖으로 튀어 나가지 않습니다.\n코드\npublic class CanvasHelper : MonoBehaviour\n{ \n     void Awake()\n     { \n          var scaler = GetComponent<CanvasScaler>(); \n          var aspect = Camera.main.aspect; \n          var aspect_9_16 = 9.0f / 16.0f;\n          if (aspect > aspect_9_16) \n          { \n               scaler.matchWidthOrHeight = 1; \n          }\n          else \n          { \n               scaler.matchWidthOrHeight = 0; \n          } \n     }   \n}\n코드를 설명하자면 9:16 의 비율보다 크다면 넓은 화면이라 1을 넣고\n작다면 0을 넣는다.\n화면이 9:16 이라면 뭘 넣어도 상관 없으니 이러면 긑이다.\n이제 이 스크립트를 Canvas 에 붙이고\n흰색 사각 바스안에 UI 를 배치하면 될것이다.\nSafeArea 라고 아이폰의 상단 노치 (검게 튀어나온 부분) 을 피해서 작업하는 방법도 있다.\n내 블로그엔 내용이 없으니 다른 사람 내용을 링크 걸어두겠다.\nhttps://mingyu0403.tistory.com/310\n\n \n[Unity] SafeArea로 모바일 Notch 디자인 대응하기\n참고 https://www.youtube.com/watch?v=VprqsEsFb5w 위 영상에서는 Package Manager에서 Device Simulator를 다운받았지만, 내가 쓰고 있는 Unity 2021.1.17f1 버전에서는 이미 기본적으로 탑재되어있다. 대응하기 1. Canvas\nmingyu0403.tistory.com\n\n화이팅!",
        "guid": "http://serverdown.tistory.com/1161",
        "categories": [
          "프로그래밍/개발메모",
          "유니티"
        ],
        "isoDate": "2025-02-28T09:50:20.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "류이치 2D 충돌 영역 설정하기",
        "link": "http://serverdown.tistory.com/1160",
        "pubDate": "Fri, 28 Feb 2025 16:51:48 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1160#entry1160comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"328\" data-origin-height=\"325\"><span data-url=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F0WwJJ%2FbtsMx1Z1TVh%2F950tAJYqEAEROaz7Kt8bW1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"328\" height=\"325\" data-origin-width=\"328\" data-origin-height=\"325\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">충돌박스를 삼각형을 몬들어봤습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=2kdQFcTC-v4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=2kdQFcTC-v4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=2kdQFcTC-v4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/HRjiG/hyYm0e8wyF/zxS5QH2fefG2D3mAkd4jJK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/ewGrku/hyYjAvEjUX/3FKL2g95usrwan5X8JEh0k/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Make a Custom 2D Collision Shape in Unity\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/2kdQFcTC-v4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">3D 는 리소스 만들기도 어렵고 한데</p>\n<p data-ke-size=\"size16\">2D 는 이미지에 바로 충돌영역을 설정할 수 있어 쉽게 사용할 수 있군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">1. 2D 이미지 에서 Open Sprite Editor 를 눌러 편집기를 켭니다.</p>\n<p data-ke-size=\"size16\">2. 상단에 Sprite Editor 를 그림에 보이는 걸로 고릅니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"228\" data-origin-height=\"138\"><span data-url=\"https://blog.kakaocdn.net/dn/bcP2Bs/btsMAmuDWvV/WGcoPqrn9E6LOH8kCvsDx0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bcP2Bs/btsMAmuDWvV/WGcoPqrn9E6LOH8kCvsDx0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bcP2Bs/btsMAmuDWvV/WGcoPqrn9E6LOH8kCvsDx0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbcP2Bs%2FbtsMAmuDWvV%2FWGcoPqrn9E6LOH8kCvsDx0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"228\" height=\"138\" data-origin-width=\"228\" data-origin-height=\"138\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">3. 처음엔 아무것도 없으니 마우스로 드레그 해서 네모 상자를 만듭니다.</p>\n<p data-ke-size=\"size16\">4. 모서리에 메로를 끌어서 위치를 잡습니다.<br />모서리를 늘리려면 더블 클릭 해서 끌면 됩니다.<br />모서리를 줄이려렴 모서리 누르고 del 키 누릅니다.</p>\n<p data-ke-size=\"size16\">5. 상단에 Apply 눌러 저장합니다.</p>\n<p data-ke-size=\"size16\">6. 게임 오브젝트 하나 만드시고 SpriteRenderer 를 add component 합니다.</p>\n<p data-ke-size=\"size16\">7. 이미지 붙여넣으시구요</p>\n<p data-ke-size=\"size16\">8. Polygon Collider 2D 를 add component 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"328\" data-origin-height=\"325\"><span data-url=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/0WwJJ/btsMx1Z1TVh/950tAJYqEAEROaz7Kt8bW1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F0WwJJ%2FbtsMx1Z1TVh%2F950tAJYqEAEROaz7Kt8bW1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"328\" height=\"325\" data-origin-width=\"328\" data-origin-height=\"325\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">녹색 선으로 충돌영역이 보입니다.</p>\n<p data-ke-size=\"size16\">이미지랑 섞여서 잘 안보이시면 Sprite Renderer 를 끕니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"444\" data-origin-height=\"204\"><span data-url=\"https://blog.kakaocdn.net/dn/cq5res/btsMx4PVP74/3ia1xrk6gcck5JnCAqKk2k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cq5res/btsMx4PVP74/3ia1xrk6gcck5JnCAqKk2k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cq5res/btsMx4PVP74/3ia1xrk6gcck5JnCAqKk2k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fcq5res%2FbtsMx4PVP74%2F3ia1xrk6gcck5JnCAqKk2k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"444\" height=\"204\" data-origin-width=\"444\" data-origin-height=\"204\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"367\" data-origin-height=\"325\"><span data-url=\"https://blog.kakaocdn.net/dn/cvrOVb/btsMzYOi5Sb/pKPBm3B3ya4PbXqFc3K7zK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cvrOVb/btsMzYOi5Sb/pKPBm3B3ya4PbXqFc3K7zK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cvrOVb/btsMzYOi5Sb/pKPBm3B3ya4PbXqFc3K7zK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcvrOVb%2FbtsMzYOi5Sb%2FpKPBm3B3ya4PbXqFc3K7zK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"367\" height=\"325\" data-origin-width=\"367\" data-origin-height=\"325\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">녹색선이 확실히 잘 보입니다.</p>",
        "contentSnippet": "충돌박스를 삼각형을 몬들어봤습니다.\n \n영상: https://www.youtube.com/watch?v=2kdQFcTC-v4\n\n\n\n3D 는 리소스 만들기도 어렵고 한데\n2D 는 이미지에 바로 충돌영역을 설정할 수 있어 쉽게 사용할 수 있군요\n \n1. 2D 이미지 에서 Open Sprite Editor 를 눌러 편집기를 켭니다.\n2. 상단에 Sprite Editor 를 그림에 보이는 걸로 고릅니다.\n\n\n3. 처음엔 아무것도 없으니 마우스로 드레그 해서 네모 상자를 만듭니다.\n4. 모서리에 메로를 끌어서 위치를 잡습니다.\n모서리를 늘리려면 더블 클릭 해서 끌면 됩니다.\n모서리를 줄이려렴 모서리 누르고 del 키 누릅니다.\n5. 상단에 Apply 눌러 저장합니다.\n6. 게임 오브젝트 하나 만드시고 SpriteRenderer 를 add component 합니다.\n7. 이미지 붙여넣으시구요\n8. Polygon Collider 2D 를 add component 합니다.\n \n\n\n녹색 선으로 충돌영역이 보입니다.\n이미지랑 섞여서 잘 안보이시면 Sprite Renderer 를 끕니다.\n\n\n\n녹색선이 확실히 잘 보입니다.",
        "guid": "http://serverdown.tistory.com/1160",
        "categories": [
          "프로그래밍/개발메모",
          "유니티",
          "충돌"
        ],
        "isoDate": "2025-02-28T07:51:48.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "쉽고 효과좋은 코어운동",
        "link": "http://serverdown.tistory.com/1159",
        "pubDate": "Fri, 28 Feb 2025 13:15:51 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1159#entry1159comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=m-gRpx4NyxY&amp;list=WL\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=m-gRpx4NyxY&amp;list=WL</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=m-gRpx4NyxY\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/pjtng/hyYjrS1JHq/IFsGOyJ27huJD6kjLCCtg0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/chD3QW/hyYjxlmTBt/beTXPvgKvWBF6WgPj7v0F0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"집에서도 가능한 \" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/m-gRpx4NyxY\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">쉽고 재밌으며 효과적입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"코어운동.gif\" data-origin-width=\"358\" data-origin-height=\"200\"><span data-url=\"https://blog.kakaocdn.net/dn/dot6nk/btsMzeRq6VI/k8sHuERrH2mYktWlaCiIsk/img.gif\" data-phocus=\"https://blog.kakaocdn.net/dn/dot6nk/btsMzeRq6VI/k8sHuERrH2mYktWlaCiIsk/img.gif\"><img src=\"https://blog.kakaocdn.net/dn/dot6nk/btsMzeRq6VI/k8sHuERrH2mYktWlaCiIsk/img.gif\" srcset=\"https://blog.kakaocdn.net/dn/dot6nk/btsMzeRq6VI/k8sHuERrH2mYktWlaCiIsk/img.gif\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"358\" height=\"200\" data-filename=\"코어운동.gif\" data-origin-width=\"358\" data-origin-height=\"200\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">흔들흔들</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=m-gRpx4NyxY&list=WL\n\n\n\n쉽고 재밌으며 효과적입니다.\n\n\n흔들흔들",
        "guid": "http://serverdown.tistory.com/1159",
        "categories": [
          "유튜브",
          "코어운동"
        ],
        "isoDate": "2025-02-28T04:15:51.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "c# 실수 / 배열에서 콤마 빼먹어도 돌아가네",
        "link": "http://serverdown.tistory.com/1158",
        "pubDate": "Fri, 28 Feb 2025 00:07:42 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1158#entry1158comment",
        "content": "<p data-ke-size=\"size16\">코드</p>\n<p data-ke-size=\"size16\">float[] arr_pos = new float[] {<br />&nbsp; &nbsp;-2.55f, <br />&nbsp; &nbsp;-2.0f&nbsp; &nbsp; &nbsp;// &lt;-- 여기에 콤마가 없습니다.<br />&nbsp; &nbsp;-1.5f, <br />&nbsp; -0.85f, <br />&nbsp; &nbsp;0, <br />&nbsp; &nbsp;0.85f, <br />&nbsp; &nbsp;1.5f, <br />&nbsp; &nbsp;2.0f, <br />&nbsp; &nbsp;2.55f, <br />};</p>\n<p data-ke-size=\"size16\">요 코드 입니다.&nbsp;</p>\n<p data-ke-size=\"size16\">-2.0f 뒤에 콤마를 빼먹어도 컴파일이 됩니다.</p>\n<p data-ke-size=\"size16\">저는 배열이 당연 9개라고 생각했지만 콤마가 없어서 8개가 됩니다.</p>\n<p data-ke-size=\"size16\">숫자는 이상하게 들어가 버리나봅니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">컴파일에서 요류가 나게 하려면 배열의 크기를 지정하면 됩니다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">float[] arr_pos = new float[9] { // 9개라고 선언해버림<br />&nbsp; &nbsp;-2.55f,<br />&nbsp; &nbsp;-2.0f&nbsp; &nbsp; &nbsp;// &lt;-- 여기에 콤마가 없습니다.<br />&nbsp; &nbsp;-1.5f,<br />&nbsp; -0.85f,<br />&nbsp; &nbsp;0,<br />&nbsp; &nbsp;0.85f,<br />&nbsp; &nbsp;1.5f,<br />&nbsp; &nbsp;2.0f,<br />&nbsp; &nbsp;2.55f,<br />};</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">이러면 9개를 초기값으로 넣으라고 오류를 냅니다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">잡는데 오래걸려서 납겨둡니다.</p>",
        "contentSnippet": "코드\nfloat[] arr_pos = new float[] {\n   -2.55f, \n   -2.0f     // <-- 여기에 콤마가 없습니다.\n   -1.5f, \n  -0.85f, \n   0, \n   0.85f, \n   1.5f, \n   2.0f, \n   2.55f, \n};\n요 코드 입니다. \n-2.0f 뒤에 콤마를 빼먹어도 컴파일이 됩니다.\n저는 배열이 당연 9개라고 생각했지만 콤마가 없어서 8개가 됩니다.\n숫자는 이상하게 들어가 버리나봅니다.\n \n컴파일에서 요류가 나게 하려면 배열의 크기를 지정하면 됩니다.\nfloat[] arr_pos = new float[9] { // 9개라고 선언해버림\n   -2.55f,\n   -2.0f     // <-- 여기에 콤마가 없습니다.\n   -1.5f,\n  -0.85f,\n   0,\n   0.85f,\n   1.5f,\n   2.0f,\n   2.55f,\n};\n이러면 9개를 초기값으로 넣으라고 오류를 냅니다.\n잡는데 오래걸려서 납겨둡니다.",
        "guid": "http://serverdown.tistory.com/1158",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-02-27T15:07:42.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": [
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "조금은 덜 최적화된 환경",
        "link": "http://jojoldu.tistory.com/820",
        "pubDate": "Tue, 4 Mar 2025 09:22:28 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "http://jojoldu.tistory.com/820#entry820comment",
        "content": "<p>최근 <a href=\"https://series.naver.com/novel/detail.series?productNo=10311211\">배드 본 블러드</a>라는 판타지 웹 소설을 완독했다.  </p>\n<p>지구가 망하고 행성 이주를 해서 살아가는 디스토피아를 그리고 있는데, 사람과 삶에 대해 되게 많은 생각을 하게 해준다.  </p>\n<p>소설에서는 3개의 국가가 배경이 되는데, 주인공이 태어난 국가는 상층과 하층으로 나뉠정도로 <strong>계급화가 되어있으며 기계국가로서 계급이 올라갈수록 신체를 좋은 기계 신체로 교체</strong>한다.<br>그래서 좋은 기계 신체로 교체된 사람일수록 고위직임을 의미한다.  </p>\n<p>환경에 관계 없이 좋은 퍼포먼스를, 신체를 건강하게 하기 위해 했던 기존의 낭비적인 활동 (생리욕구, 음식 섭취, 오염된 환경에서의 적응등) 들을 모두 할 필요가 없는 최적의 신체가 되는 것이 국가적으로 최고의 목표인 것이다.  </p>\n<p>아이러니한 것은 이렇게 모든 신체를 기계로 바꾼 고위층들이 몰래 저지르는 범되이다.<br>돈, 성, 마약 등에 대한 범죄 보다 더 극단적으로 취하고 있는 범죄가 바로 <strong>일반 신체에 대한 욕구</strong>이다.   </p>\n<p><strong>생살, 피, 뼈에 대한 집착</strong>으로 기계신체를 갖지 못한 하위층 시민들을 납치해 생살을 찢고, 피를 뽑고, 뼈를 부수는 등 기계 신체가 아닌 인간의 신체에 대한 고문을 한다.  </p>\n<p>그렇게 효율적으로, 효과적으로 살기 위해 기계신체로 변경하고나서 보니 예전의 비효율적인 신체가 여러 감정들을 느끼게 해주는 장치들이였던 것이다.<br>다시 돌아가지 못하는 것을 알기에 남의 신체에 고통을 주면서 상실감을 채운다.  </p>\n<hr>\n<p>최근 데브옵스 파트와 데일리 스크럼 시간에 잡담으로 1시간을 보냈다.<br>원래 했어야할 스크럼 내용은 하나도 하지 못하고 당시 있었던 전사 주간 프리뷰 이야기, 중간 리더에 대한 이야기, 프로덕트 파트에 대한 이야기 등등을 나눴다.<br>특히 <strong>효율, 비효율에 관한 이야기</strong>를 나눌때 팀원들과 다양하게 의견을 교류할 수 있었다.  </p>\n<p>데브옵스 파트가 해야하는 일이 결국 팀의 업무환경을 효율적으로 개선하는 것인데 이 <strong>조직의 효율화 개선이 가장 중요한 목표가 되면 우리가 놓치는 것들이 있지 않겠냐</strong>는 주제의 대화였다.  </p>\n<p>대화 중 &quot;회사에서 이런 인문학적인 이야기를 할 수 있어서 되게 좋은 것 같다&quot; 라는 이야기가 팀원에게서 나왔다.<br>다른 팀원들도 동의하면서 같은 파트로서 일하는 &quot;<strong>우리가 서로 가치관이 어느 방향을 향하는지 알 수 있었다</strong>&quot;는 말에서 다시 한번 이 시간이 소중했다는 생각을 했다.<br>각자가 어떻게 생각하는지 이야기를 나누고 데일리 스크럼 시간이 끝나버렸다.  </p>\n<p>빠르게 데일리 스크럼을 마치고 각자 자기 할 일을 하는게 회사 내 업무 시간을 가장 효율적으로 보내는 것이다.<br>다만 그렇게 효율만 추구하는게 오히려 더 비효율을 추구할 수 있다.<br><strong>효율화, 최적화를 하면 할수록 눈엔 보이지 않지만 조직에 가장 중요한 것들인 유대감, 동질감, 전우애 등이 사라진다</strong>.  </p>\n<p>물론 시간을 낭비해야한다는 건 아니다.<br>다만, <strong>불순물이 하나도 없는 완전히 최적화된 환경을 지향할수록 부작용이 더 클 것</strong>이라는 이야기다.<br><strong>내가 버릴려고 했던 마지막 0.01%의 불순물은 실제로는 불순물이 아닌 다른 큰 사이드 이펙트를 막기 위한 방지턱</strong>일 수도 있다.  </p>",
        "contentSnippet": "최근 배드 본 블러드라는 판타지 웹 소설을 완독했다.  \n지구가 망하고 행성 이주를 해서 살아가는 디스토피아를 그리고 있는데, 사람과 삶에 대해 되게 많은 생각을 하게 해준다.  \n소설에서는 3개의 국가가 배경이 되는데, 주인공이 태어난 국가는 상층과 하층으로 나뉠정도로 계급화가 되어있으며 기계국가로서 계급이 올라갈수록 신체를 좋은 기계 신체로 교체한다.\n그래서 좋은 기계 신체로 교체된 사람일수록 고위직임을 의미한다.  \n환경에 관계 없이 좋은 퍼포먼스를, 신체를 건강하게 하기 위해 했던 기존의 낭비적인 활동 (생리욕구, 음식 섭취, 오염된 환경에서의 적응등) 들을 모두 할 필요가 없는 최적의 신체가 되는 것이 국가적으로 최고의 목표인 것이다.  \n아이러니한 것은 이렇게 모든 신체를 기계로 바꾼 고위층들이 몰래 저지르는 범되이다.\n돈, 성, 마약 등에 대한 범죄 보다 더 극단적으로 취하고 있는 범죄가 바로 일반 신체에 대한 욕구이다.   \n생살, 피, 뼈에 대한 집착으로 기계신체를 갖지 못한 하위층 시민들을 납치해 생살을 찢고, 피를 뽑고, 뼈를 부수는 등 기계 신체가 아닌 인간의 신체에 대한 고문을 한다.  \n그렇게 효율적으로, 효과적으로 살기 위해 기계신체로 변경하고나서 보니 예전의 비효율적인 신체가 여러 감정들을 느끼게 해주는 장치들이였던 것이다.\n다시 돌아가지 못하는 것을 알기에 남의 신체에 고통을 주면서 상실감을 채운다.  \n최근 데브옵스 파트와 데일리 스크럼 시간에 잡담으로 1시간을 보냈다.\n원래 했어야할 스크럼 내용은 하나도 하지 못하고 당시 있었던 전사 주간 프리뷰 이야기, 중간 리더에 대한 이야기, 프로덕트 파트에 대한 이야기 등등을 나눴다.\n특히 효율, 비효율에 관한 이야기를 나눌때 팀원들과 다양하게 의견을 교류할 수 있었다.  \n데브옵스 파트가 해야하는 일이 결국 팀의 업무환경을 효율적으로 개선하는 것인데 이 조직의 효율화 개선이 가장 중요한 목표가 되면 우리가 놓치는 것들이 있지 않겠냐는 주제의 대화였다.  \n대화 중 \"회사에서 이런 인문학적인 이야기를 할 수 있어서 되게 좋은 것 같다\" 라는 이야기가 팀원에게서 나왔다.\n다른 팀원들도 동의하면서 같은 파트로서 일하는 \"우리가 서로 가치관이 어느 방향을 향하는지 알 수 있었다\"는 말에서 다시 한번 이 시간이 소중했다는 생각을 했다.\n각자가 어떻게 생각하는지 이야기를 나누고 데일리 스크럼 시간이 끝나버렸다.  \n빠르게 데일리 스크럼을 마치고 각자 자기 할 일을 하는게 회사 내 업무 시간을 가장 효율적으로 보내는 것이다.\n다만 그렇게 효율만 추구하는게 오히려 더 비효율을 추구할 수 있다.\n효율화, 최적화를 하면 할수록 눈엔 보이지 않지만 조직에 가장 중요한 것들인 유대감, 동질감, 전우애 등이 사라진다.  \n물론 시간을 낭비해야한다는 건 아니다.\n다만, 불순물이 하나도 없는 완전히 최적화된 환경을 지향할수록 부작용이 더 클 것이라는 이야기다.\n내가 버릴려고 했던 마지막 0.01%의 불순물은 실제로는 불순물이 아닌 다른 큰 사이드 이펙트를 막기 위한 방지턱일 수도 있다.",
        "guid": "http://jojoldu.tistory.com/820",
        "categories": [
          "생각정리",
          "DevOps",
          "데브옵스",
          "배드 본 블러드",
          "생산성",
          "최적화"
        ],
        "isoDate": "2025-03-04T00:22:28.000Z"
      },
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "관계의 아궁이",
        "link": "http://jojoldu.tistory.com/819",
        "pubDate": "Sun, 2 Mar 2025 21:18:08 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "http://jojoldu.tistory.com/819#entry819comment",
        "content": "<p data-ke-size=\"size16\">예전에 본 <a href=\"https://www.slideshare.net/slideshow/ss-6097436/6097436\">갈망의 아궁이</a> 발표를 좋아한다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"1.png\" data-origin-width=\"1642\" data-origin-height=\"1232\"><span data-url=\"https://blog.kakaocdn.net/dn/PTNOd/btsMAKibOMd/9Vw8GS02aVckK3OmUDxusk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PTNOd/btsMAKibOMd/9Vw8GS02aVckK3OmUDxusk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PTNOd/btsMAKibOMd/9Vw8GS02aVckK3OmUDxusk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPTNOd%2FbtsMAKibOMd%2F9Vw8GS02aVckK3OmUDxusk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"638\" height=\"479\" data-filename=\"1.png\" data-origin-width=\"1642\" data-origin-height=\"1232\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">갈망이란 아궁이 속 불씨와 같아서 한번 완전히 꺼지면 다시 살리기가 어렵다.<br />그래서 아궁이 속 불이 완전히 꺼지기 전에 다른 아궁이로 불씨를 옮기듯이 갈망의 대상도 (본업, 취미, 연인관계, 사이드 프로젝트 등) 계속해서 옮겨가야 한다는 이야기이다.</p>\n<p data-ke-size=\"size16\">이 이야기를 듣고나서 <b>회사에서의 일 외에도 기댈 곳을 만들어 두는 것이 얼마나 장기적으로 큰 힘이 되는 지</b> 알게 되었다.<br />이후로 블로그나 커뮤니티, 멘토링 등 여러 방면에서 본업에서의 갈망이 식었을때 완전히 연소되는 일을 막아주었다.</p>\n<p data-ke-size=\"size16\">요즘은 이 아궁이가 꼭 갈망에만 적용되는 것이 아니라는 생각이 들었다.<br />사람간 관계에서도 비슷한 것 같다.</p>\n<p data-ke-size=\"size16\">어떤 인간 관계든 오랫동안 함께 하다보면 서운한 상황이 생길 수 있다.</p>\n<p data-ke-size=\"size16\">이를테면 내 주변에는 다음과 같은 관계들이 있다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>와이프</li>\n<li>부모님을 비롯한 가족들</li>\n<li>학창 친구들</li>\n<li>(현재의) 회사 동료들</li>\n<li>(전) 회사 동료들</li>\n<li>회사 밖 지인들</li>\n</ul>\n<p data-ke-size=\"size16\">여러 관계가 있다보니 각 관계속에서의 여러 감정들이 서로 위로가 될 때가 많다.</p>\n<p data-ke-size=\"size16\">와이프와 어떤 문제를 가지고 주말에 싸우고 월요일에 출근을 하면 회사 동료들과 일 하면서 어느새 그 문제가 별것 아닌 일이 되어 있었다.<br />평일에 회사일을 하면서 받은 여러 부정적 감정들이 주말에 와이프와 쉬거나 운동 선생님과 운동하면서 나누는 대화로 인해 금새 잊혀지게 된다.<br />가족과 회사 일 모두에게 문제가 생길때는 친구들 혹은 전 회사 동료들과의 대화에서 위로를 받기도 한다.</p>\n<p data-ke-size=\"size16\">하나의 관계에만 너무 몰입했다면 그 관계에서 상처나 실망을 받았을 때 못 버티는 경우를 종종 봤다.<br /><b>여러 관계를 맺어두고, 그 관계에서 받은 여러 감정들을 다른 관계를 통해 해소할 수 있다</b>.</p>\n<p data-ke-size=\"size16\">물론 어느 유튜브 속 대사처럼 나 자신에게 집중하면 굳이 타인과의 관계에 휩쓸리지 않을 수 있다.</p>\n<p><iframe src=\"https://www.youtube.com/embed/AJJ7G9OfyfI\" width=\"560\" height=\"315\" frameborder=\"0\" allowfullscreen=\"\">\n</iframe></p>\n<p data-ke-size=\"size16\">그렇지만 우리 같은 직장인 특히나 어느정도 커리어를 쌓은 입장에서는 전문직이나 연예인처럼 온전히 나에게만 집중할 수 없다.</p>\n<p data-ke-size=\"size16\">나도 꽤나 나에게 집중하는 성향이 강한데도, 사회적인 상황이 달라지면 나에게만 온전히 집중할 수 없었다.<br />커리어가 쌓일수록 결국 사람과의 관계가 더 중요한 상황이 되기 때문이다.</p>\n<p data-ke-size=\"size16\">관계로서 만나는 문제는 또 다른 관계로 해결할 수 있다.<br />여러 사람간의 관계가 의외로 여러 부정적 감정에 대해 위로 받을 수 있으니 굳이 멀리할 필요가 없고, 오히려 <b>새로운 관계를 맺음으로 지금의 많은 문제들이 자연스레 해결</b>될 수도 있다.</p>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">물론 와이프에게 가장 집중해야하는 것은 두말할 필요 없지만 말이다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "예전에 본 갈망의 아궁이 발표를 좋아한다.\n\n\n갈망이란 아궁이 속 불씨와 같아서 한번 완전히 꺼지면 다시 살리기가 어렵다.\n그래서 아궁이 속 불이 완전히 꺼지기 전에 다른 아궁이로 불씨를 옮기듯이 갈망의 대상도 (본업, 취미, 연인관계, 사이드 프로젝트 등) 계속해서 옮겨가야 한다는 이야기이다.\n이 이야기를 듣고나서 회사에서의 일 외에도 기댈 곳을 만들어 두는 것이 얼마나 장기적으로 큰 힘이 되는 지 알게 되었다.\n이후로 블로그나 커뮤니티, 멘토링 등 여러 방면에서 본업에서의 갈망이 식었을때 완전히 연소되는 일을 막아주었다.\n요즘은 이 아궁이가 꼭 갈망에만 적용되는 것이 아니라는 생각이 들었다.\n사람간 관계에서도 비슷한 것 같다.\n어떤 인간 관계든 오랫동안 함께 하다보면 서운한 상황이 생길 수 있다.\n이를테면 내 주변에는 다음과 같은 관계들이 있다.\n와이프\n부모님을 비롯한 가족들\n학창 친구들\n(현재의) 회사 동료들\n(전) 회사 동료들\n회사 밖 지인들\n여러 관계가 있다보니 각 관계속에서의 여러 감정들이 서로 위로가 될 때가 많다.\n와이프와 어떤 문제를 가지고 주말에 싸우고 월요일에 출근을 하면 회사 동료들과 일 하면서 어느새 그 문제가 별것 아닌 일이 되어 있었다.\n평일에 회사일을 하면서 받은 여러 부정적 감정들이 주말에 와이프와 쉬거나 운동 선생님과 운동하면서 나누는 대화로 인해 금새 잊혀지게 된다.\n가족과 회사 일 모두에게 문제가 생길때는 친구들 혹은 전 회사 동료들과의 대화에서 위로를 받기도 한다.\n하나의 관계에만 너무 몰입했다면 그 관계에서 상처나 실망을 받았을 때 못 버티는 경우를 종종 봤다.\n여러 관계를 맺어두고, 그 관계에서 받은 여러 감정들을 다른 관계를 통해 해소할 수 있다.\n물론 어느 유튜브 속 대사처럼 나 자신에게 집중하면 굳이 타인과의 관계에 휩쓸리지 않을 수 있다.\n\n\n그렇지만 우리 같은 직장인 특히나 어느정도 커리어를 쌓은 입장에서는 전문직이나 연예인처럼 온전히 나에게만 집중할 수 없다.\n나도 꽤나 나에게 집중하는 성향이 강한데도, 사회적인 상황이 달라지면 나에게만 온전히 집중할 수 없었다.\n커리어가 쌓일수록 결국 사람과의 관계가 더 중요한 상황이 되기 때문이다.\n관계로서 만나는 문제는 또 다른 관계로 해결할 수 있다.\n여러 사람간의 관계가 의외로 여러 부정적 감정에 대해 위로 받을 수 있으니 굳이 멀리할 필요가 없고, 오히려 새로운 관계를 맺음으로 지금의 많은 문제들이 자연스레 해결될 수도 있다.\n물론 와이프에게 가장 집중해야하는 것은 두말할 필요 없지만 말이다.",
        "guid": "http://jojoldu.tistory.com/819",
        "categories": [
          "생각정리"
        ],
        "isoDate": "2025-03-02T12:18:08.000Z"
      }
    ]
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": [
      {
        "title": "Cursor와 웹페이지 만들기",
        "link": "https://hyeonseok.com/blog/933",
        "pubDate": "Sat, 01 Mar 2025 14:47:30 GMT",
        "content": "<p><a href=\"https://www.cursor.com/\">커서(Cursor)</a>가 엄청 좋다는 얘기를 들어서 <a href=\"https://github.com/hyeonseok/monidroid-public\">입코딩으로 간단한 페이지를 만들어봤다</a>. 안드로이드 폰에서 배터리 정보를 보내주면 이걸 모아서 선그래프로 보여주는 페이지이다. 초기에 데이터를 읽어오고 쉘에서 텍스트 정리하는 부분은 챗지피티한테 물어봐서 만들었다. 귀찮아서 텍스트로 출력해 놨는데 AI 툴도 써볼겸해서 그래프로 출력해봤다. <img src=\"/static/blog/cursor.png\" alt=\"커서의 화면 캡춰\" class=\"major\" /></p>\r\n\r\n<p><a href=\"https://code.visualstudio.com/\">비주얼 스튜디오 코드(VSCode)</a>를 포크한 제품이어서 실행하면 아주 익숙한 화면이 나온다. 깔려 있는 VSCode의 설정을 가져올 수 있다. 우측 패널에서 챗봇을 사용할 수 있고 코드 수정된 결과가 diff로 표시 된다. 파일이 수정까지 되어서 계속 챗하면서 테스트할 수 있고 어느정도 마음에 들면 버튼을 눌러서 코드에 반영할 수 있다. 중간에 터미널에서 명령어 실행이 필요한 경우 사용자가 확인을 해주어야 다음 단계로 넘어가기도 한다. 여러 단계가 필요한 경우도 단계를 보여주면서 진행하고 여러 파일에 걸쳐서 수정을 해야 하는 경우에도 알아서 다 수정해준다. 오류가 발생하면 오류 로그만 붙여넣어줘도 알아서 코드를 수정을 해준다. 인라인으로 에디팅하는 뷰에서 간단히 챗하면서 수정할 수도 있다.</p>\r\n\r\n<p>차트를 그리고 싶은데 차트 툴은 쓰기 싫어서 SVG로 그려달라고 했다. SVG로 차트를 그리려면 코드양도 많고 위치 잡는 작업에 손도 많이 가게 되는데 한방에 그래프가 나오니 아주 큰 도움이 됐다. 세부 항목을 수정하면서 계속 말로 설명하는게 좀 답답하기는 한데 말도 잘 알아듣고 원하는 결과가 생각보다 잘 만들어 졌다. 특히 축과 레이블의 위치 조정 같은 것은 자칫 지루한 반복작업이 될 수 있는데 아주 수월하게 진행이 됐다.</p>\r\n\r\n<p>기능을 어느 파일에 넣어야 할지 제대로 말해주지 않으면 내 생각과는 다른 곳에 넣기도 하는데 이걸 바로 잡으려면 상당히 여러번 얘기를 해줘야 했다. 그래도 \"API 관련된 기능만 빼고 나머지는 다른 파일로 다 옮겨달라\"고 했을때 아주 깔끔하게 정리가 되는 것을 보고 좀 감탄했다.</p>\r\n\r\n<p><img src=\"/static/blog/monidroid.png\" alt=\"핸드폰의 배터리와 사용전력을 꺾은선으로 보여주는 그래프\" class=\"major\" /> 전반적인 느낌은 계속해서 초심자 코드리뷰해주는 느낌이다. 코드베이스가 작아서 그런지 원하는 위치에 코드를 생성하게 만드는게 좀 힘들고 여러번 설명을 해줘야 했다. 반면에 대충 말해도 찰떡같이 알아 듣는 부분도 있어서 그때는 감탄을 했다. 이 친구가 타이핑도 엄청 빠르고 대규모 수정도 실수 없이 잘 하고 대충 말해도 표정하나 바뀌지 않고 친절하기 때문에 만족도는 상당히 높았다. 조금 느린감도 없잖아 있는데 유료는 더 빠르게 쓸 수 있는 듯 하다.</p>\r\n\r\n<p>일단 프로토타이핑 할때는 무조건 사용해야 할 것 같고 실제 업무에서도 큰 도움이 될 것 같다. 자칫 바보되는거 아닌가 무섭기도 한데 코드 읽기를 많이 하고 생각도 많이하는 긍정적인 방향으로 생각하기로 했다. 다른 챗화면의 제품과 달리 코드를 복붙하지 않아도 되어서 상당히 경쟁력 있는 제품이라고 생각된다. 개발자가 없어지려나 싶기도 한데 결국 계획을 세우고 방향을 잡는 것까지는 누군가 글로 써줘야 하기 때문에 코딩은 좀 줄지언정 사고하고 고민하는 개발자의 역할은 (아직은) 줄어들지 않을 것 같다. 코드웍을 잘 할 수록 생산성에서 차이가 많이 날 것이기 때문에 공부는 계속 열심해 해야 할 것 같다.</p>",
        "contentSnippet": "커서(Cursor)가 엄청 좋다는 얘기를 들어서 입코딩으로 간단한 페이지를 만들어봤다. 안드로이드 폰에서 배터리 정보를 보내주면 이걸 모아서 선그래프로 보여주는 페이지이다. 초기에 데이터를 읽어오고 쉘에서 텍스트 정리하는 부분은 챗지피티한테 물어봐서 만들었다. 귀찮아서 텍스트로 출력해 놨는데 AI 툴도 써볼겸해서 그래프로 출력해봤다. \n\r\n\r\n비주얼 스튜디오 코드(VSCode)를 포크한 제품이어서 실행하면 아주 익숙한 화면이 나온다. 깔려 있는 VSCode의 설정을 가져올 수 있다. 우측 패널에서 챗봇을 사용할 수 있고 코드 수정된 결과가 diff로 표시 된다. 파일이 수정까지 되어서 계속 챗하면서 테스트할 수 있고 어느정도 마음에 들면 버튼을 눌러서 코드에 반영할 수 있다. 중간에 터미널에서 명령어 실행이 필요한 경우 사용자가 확인을 해주어야 다음 단계로 넘어가기도 한다. 여러 단계가 필요한 경우도 단계를 보여주면서 진행하고 여러 파일에 걸쳐서 수정을 해야 하는 경우에도 알아서 다 수정해준다. 오류가 발생하면 오류 로그만 붙여넣어줘도 알아서 코드를 수정을 해준다. 인라인으로 에디팅하는 뷰에서 간단히 챗하면서 수정할 수도 있다.\n\r\n\r\n차트를 그리고 싶은데 차트 툴은 쓰기 싫어서 SVG로 그려달라고 했다. SVG로 차트를 그리려면 코드양도 많고 위치 잡는 작업에 손도 많이 가게 되는데 한방에 그래프가 나오니 아주 큰 도움이 됐다. 세부 항목을 수정하면서 계속 말로 설명하는게 좀 답답하기는 한데 말도 잘 알아듣고 원하는 결과가 생각보다 잘 만들어 졌다. 특히 축과 레이블의 위치 조정 같은 것은 자칫 지루한 반복작업이 될 수 있는데 아주 수월하게 진행이 됐다.\n\r\n\r\n기능을 어느 파일에 넣어야 할지 제대로 말해주지 않으면 내 생각과는 다른 곳에 넣기도 하는데 이걸 바로 잡으려면 상당히 여러번 얘기를 해줘야 했다. 그래도 \"API 관련된 기능만 빼고 나머지는 다른 파일로 다 옮겨달라\"고 했을때 아주 깔끔하게 정리가 되는 것을 보고 좀 감탄했다.\n\r\n\r\n 전반적인 느낌은 계속해서 초심자 코드리뷰해주는 느낌이다. 코드베이스가 작아서 그런지 원하는 위치에 코드를 생성하게 만드는게 좀 힘들고 여러번 설명을 해줘야 했다. 반면에 대충 말해도 찰떡같이 알아 듣는 부분도 있어서 그때는 감탄을 했다. 이 친구가 타이핑도 엄청 빠르고 대규모 수정도 실수 없이 잘 하고 대충 말해도 표정하나 바뀌지 않고 친절하기 때문에 만족도는 상당히 높았다. 조금 느린감도 없잖아 있는데 유료는 더 빠르게 쓸 수 있는 듯 하다.\n\r\n\r\n일단 프로토타이핑 할때는 무조건 사용해야 할 것 같고 실제 업무에서도 큰 도움이 될 것 같다. 자칫 바보되는거 아닌가 무섭기도 한데 코드 읽기를 많이 하고 생각도 많이하는 긍정적인 방향으로 생각하기로 했다. 다른 챗화면의 제품과 달리 코드를 복붙하지 않아도 되어서 상당히 경쟁력 있는 제품이라고 생각된다. 개발자가 없어지려나 싶기도 한데 결국 계획을 세우고 방향을 잡는 것까지는 누군가 글로 써줘야 하기 때문에 코딩은 좀 줄지언정 사고하고 고민하는 개발자의 역할은 (아직은) 줄어들지 않을 것 같다. 코드웍을 잘 할 수록 생산성에서 차이가 많이 날 것이기 때문에 공부는 계속 열심해 해야 할 것 같다.",
        "guid": "https://hyeonseok.com/blog/933",
        "isoDate": "2025-03-01T14:47:30.000Z"
      }
    ]
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "신뢰성 향상을 위한 SLI/SLO 도입 2편 - 플랫폼 적용 사례",
        "link": "https://techblog.lycorp.co.jp/ko/sli-and-slo-for-improving-reliability-2",
        "pubDate": "Fri, 28 Feb 2025 02:00:00 GMT",
        "content": "시작하며\n안녕하세요. Enablement Engineering 팀에서 SRE(site reliability engineer)로 일하고 있는 어다희입니다.\n저희 팀은 LINE 서비스...",
        "contentSnippet": "시작하며\n안녕하세요. Enablement Engineering 팀에서 SRE(site reliability engineer)로 일하고 있는 어다희입니다.\n저희 팀은 LINE 서비스...",
        "guid": "https://techblog.lycorp.co.jp/ko/sli-and-slo-for-improving-reliability-2",
        "isoDate": "2025-02-28T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": [
      {
        "title": "Trino로 타임아웃 개선하기",
        "link": "https://meetup.nhncloud.com/posts/391",
        "pubDate": "Tue, 04 Mar 2025 02:22:40 GMT",
        "content": "![NHN Cloud_meetup banner_trino_202502-01_900.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannertrino20250201900.png)\r\r\n\r\r\n# 들어가며\r\r\n안녕하세요. NHN Cloud의 클라우드AI팀 이태형입니다.\r\r\n로그 데이터가 쌓일수록 조회 속도가 느려지는 문제, 한 번쯤 겪어 보셨을 텐데요. 이 글에서는 이러한 문제를 해결하기 위해 저희 팀에서 Trino를 도입하여 성능을 개선한 과정을 공유해 보려 합니다. 재미있게 읽어 주세요! \r\r\n\r\r\n# 개요: NHN AppGuard\r\r\n[NHN AppGuard](https://www.nhncloud.com/kr/service/security/nhn-appguard) 서비스에 Trino를 적용한 이야기를 드릴 예정이라서 먼저 해당 서비스를 소개하겠습니다.\r\r\n\r\r\nNHN AppGuard는 모바일 애플리케이션을 보호하기 위해 사용자의 이상 행위를 탐지하거나 차단하는 모바일 앱 보안 솔루션입니다. NHN AppGuard의 서버는 탐지/차단 로그를 안전하게 저장하고, 각종 조건 검색과 대시보드를 제공합니다.\r\r\n\r\r\n![Trino_1.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino1.png)\r\r\n\r\r\n## NHN AppGuard 로그\r\r\n\r\r\nNHN AppGuard는 평균 600만개/일 가량의 로그를 수집하고 있습니다. 이러한 로그는 NHN AppGuard 로그 워크플로에 따라 DB에 적재됩니다.\r\r\n\r\r\n![Trino_2_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino2900.png)\r\r\n\r\r\n## 이슈 발생\r\r\n\r\r\n대부분의 쿼리가 월 단위 집계 성격을 띠는 이유로 질의 대상 row 가 1억 건이 넘는 경우가 많아 이슈가 발생했습니다.\r\r\n발생한 이슈는 아래와 같습니다.\r\r\n\r\r\n1. 검색 조건 변경 시 대시보드 화면에서 타임아웃 발생\r\r\n![Trino_3.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino3.png)\r\r\n2. 집계 쿼리가 수행되는 새벽 시간대에 slow query 발생\r\r\n![Trino_4.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino4.png)\r\r\n\r\r\n## 일반적인 해결 방안\r\r\n\r\r\n위 이슈들은 결국 쿼리의 성능이 원인이기 때문에 먼저 쿼리 최적화를 수행했습니다.\r\r\n\r\r\n1. index 문제\r\r\n    1. 쿼리 검수를 통해 index의 순서를 변경하고\r\r\n    2. 의도한 index가 적용되도록 쿼리에 index hint를 추가했습니다.\r\r\n2. 쿼리의 문제\r\r\n    1. 한 달 기간 전체 데이터를 스캔하는 쿼리를 당일 증가분만 조회하도록 수정하고\r\r\n    2. 대시보드를 매번 조회하지 않고 일 배치 작업으로 미리 계산해 둔 데이터를 조회하고\r\r\n    3. 조회 가능한 기간을 제한했습니다.\r\r\n\r\r\n이러한 최적화를 통해 일시적으로 이슈가 해소되었습니다.\r\r\n하지만 NHN AppGuard의 로그는 점차 늘어나고, 집계할 데이터의 종류도 증가했으며, 조회 기간 감소에 대한 불만이 발생하여 다른 접근이 필요했습니다.\r\r\n\r\r\n## 로그 저장소 검토\r\r\n\r\r\nMySQL을 대신해 로그를 저장하기에 적절한 로그 저장소를 검토했습니다.\r\r\n\r\r\n1. Elasticsearch (LNCS)\r\r\n    1. 검색에 좋은 성능\r\r\n    2. 상품 스펙상 최대 120일 저장 제한\r\r\n2. Trino (DataQuery)\r\r\n    1. 복잡한 집계 쿼리에 좋은 성능\r\r\n    2. 여러 데이터 소스 간 federation 지원\r\r\n    3. 저장 기간 제한 없음\r\r\n\r\r\nNHN AppGuard는 로그의 저장 기간을 기존 90일에서 늘리는 것을 계획하고 있었고, 무엇보다 대부분의 쿼리가 집계 성격을 많이 띠어 Trino가 적절하다고 판단했습니다.\r\r\n\r\r\n# Trino와 DataQuery\r\r\n\r\r\n## Trino란\r\r\n\r\r\n[Trino 공식 홈페이지](https://trino.io)를 보면 아래와 같은 문구를 찾을 수 있습니다.\r\r\n\r\r\n> Trino, a query engine that runs at ludicrous speed\r\r\n> Fast distributed SQL query engine for big data analytics that helps you explore your data universe.\r\r\n\r\r\n키워드를 뽑아 보면 아래와 같습니다.\r\r\n\r\r\n1. Fast - 빠르다\r\r\n2. Distributed - 분산 처리한다\r\r\n3. analytics - 분석에 적절하다\r\r\n\r\r\n## Trino 특징\r\r\n\r\r\n마찬가지로 [Trino 공식 홈페이지](https://trino.io)에서는 아래와 같은 특징을 소개합니다.\r\r\n![Trino_5.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino5.png)\r\r\n\r\r\n여기서도 키워드를 뽑아보면 아래와 같습니다.\r\r\n\r\r\n1. distributed: 분산 처리로 빠르고\r\r\n2. ANSI SQL: 표준 SQL 을 호환하여 현재 쿼리문을 수정할 필요가 없고\r\r\n3. S3: OBS에 저장하여 스토리지 비용을 줄일 수 있고\r\r\n4. Query Federation: OBS의 데이터와 MySQL 데이터를 하나의 쿼리로 join할 수 있다.\r\r\n\r\r\n## Trino 동작 원리\r\r\n\r\r\nTrino의 동작 원리는 [Presto: SQL on Everything](https://trino.io/Presto_SQL_on_Everything.pdf)라는 논문에 자세히 소개하고 있습니다.\r\r\n해당 논문의 일부를 가볍게 살펴보겠습니다.\r\r\n\r\r\n### 구조도\r\r\n![Trino_6.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino6.png)\r\r\n\r\r\nTrino는 하나의 Coordinator 노드와 여러 개의 Worker 노드로 구성됩니다. Coordinator 노드는 쿼리의 인입 지점으로 admit, parsing, planning, optimizing, orchestration 등을 수행하고, worker node는 query processing을 담당합니다.\r\r\n\r\r\n### 요청 처리 순서\r\r\n\r\r\nCoordinator 노드가 분산 처리를 계획하면 worker node가 병렬로 처리해서 복잡한 쿼리가 더 빠르게 실행되는 원리입니다.\r\r\n\r\r\n1. client → coordinator: http request (SQL stmt)\r\r\n2. coordinator: evaluate request(parsing, analyzing, **optimizing distributed execution plan**)\r\r\n3. coordinator: plan to worker\r\r\n    1. task 생성\r\r\n    2. **splits** 생성(addressable chunk in external storage)\r\r\n    3. splits을 task에 할당\r\r\n4. worker: run task\r\r\n    1. fetching splits\r\r\n    2. 다른 worker에서 생성한 intermediate data 처리\r\r\n        1. worker 간에는 intermediate data를 memory에 저장하여 공유\r\r\n        2. **shuffle**이 발생할 수 있음\r\r\n             \\*shuffle = node 간 데이터 재분배\r\r\n    3. query의 shape에 따라 모든 데이터를 처리하지 않고 반환\r\r\n\r\r\n## Trino 쿼리 실행 예시\r\r\n\r\r\n### 그림으로 살펴보기\r\r\n* 쿼리문\r\r\n![Trino_7.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino7.png)\r\r\n\r\r\n* logical plan\r\r\n![Trino_8.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino8.png)\r\r\n\r\r\n* distributed plan (stage)\r\r\n![Trino_9.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino9.png)\r\r\n\r\r\n* optimized plan (pipeline, parallelism)\r\r\n![Trino_10.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino10.png)\r\r\n\r\r\n\r\r\n### 실행 순서\r\r\n\r\r\n1. Planner: SQL → SQL syntax tree → Logical Planning (IR 생성)\r\r\n    * IR = Intermediate Representation\r\r\n2. Optimizer: Logical Plan → evaluate transformation rules → **optimize** → Physical Structure\r\r\n    * transformation rules = sub-tree query plan + transformation\r\r\n    * 사용되는 optimizing 기법 = predicate and limit pushdown, column pruning, decorrelation, table and column statistics 기반 cost-based 최적화\r\r\n        * Data Layouts = Connector Data Layout API로 얻어내는 위치, 파티션, 정렬, 그룹화, 인덱스\r\r\n        * Predicate Pushdown = connector에 따른 filtering 최적화\r\r\n            * \\*pushdown : 읽어야 하는 데이터를 줄이는 것\r\r\n            * \\***Predicate Pushdown** : 조회 조건에 맞는 데이터만 읽는 것\r\r\n        * **Inter**-node Parallelism = stage 단위의 병렬 실행\r\r\n        * **Intra**-node Parallelism = stage 내에서 single node의 thread에 걸친 병렬 실행\r\r\n3. Scheduler: Stage Scheduling → Task Scheduling → Split Scheduling\r\r\n    * Task Scheduling = Leaf Stage / Intermediate Stage 분리하여 배치\r\r\n4. Query Execution = Local Data Flow → Shuffles → Writes\r\r\n\r\r\n## DataQuery\r\r\n\r\r\n[NHN Cloud의 DataQuery](https://www.nhncloud.com/kr/service/data-analytics/dataquery?lang=ko) 서비스는 위에서 소개한 Trino를 기반으로 대규모 데이터에 대해 쿼리를 실행할 수 있는 서비스입니다.\r\r\n이를 통해 원하는 클러스터 스펙을 지정하고 연결할 데이터 소스만 작성하면 Trino의 복잡한 설치와 설정 과정 없이 사용이 가능합니다.\r\r\n\r\r\n# Trino 적용 - 개념\r\r\nTrino를 적용하기 위해 알아야 할 개념을 소개합니다.\r\r\n\r\r\n## 데이터 소스 선정\r\r\nTrino는 여러 종류의 데이터 소스를 지원합니다.\r\r\n\r\r\nNHN AppGuard는 로그 저장 기간 증가를 계획하고 있어 저장 비용을 절약하기 위해 OBS를 데이터 소스로 선정하였습니다.\r\r\nOBS 데이터 소스를 사용하는 경우 데이터의 타입도 Parquet, JSON, ORC, CSV, Text 중에 선택해 주어야 해서, 위와 동일한 이유로 Parquet 파일 포맷을 선택하였습니다.\r\r\n\r\r\n### Apache Parquet\r\r\n\r\r\n[Apache Parquet 홈페이지](https://parquet.apache.org)에는 Parquet를 아래와 같이 설명합니다.\r\r\n\r\r\n> Apache Parquet is an open source, column-oriented data file format designed for efficient data storage and retrieval. It provides efficient data compression and encoding schemes with enhanced performance to handle complex data in bulk. Parquet is available in multiple languages including Java, C++, Python, etc...\r\r\n\r\r\n여기서도 키워드를 뽑아보면 아래와 같습니다.\r\r\n\r\r\n* column-oriented data\r\r\n* efficient data storage and retrieval\r\r\n* efficient data compression\r\r\n* encoding schema\r\r\n* handle complex data in bulk\r\r\n\r\r\ncolumn-oriented data의 설명은 아래의 그림을 보시면 이해가 쉽습니다.\r\r\n![Trino_11.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino11.png)\r\r\n<center>(Source: [https://devidea.tistory.com/92](https://devidea.tistory.com/92))</center>\r\r\n<br>\r\r\n동일한 타입의 데이터가 나열되기 때문에 압축 효율이 높아지는 효과가 있습니다.\r\r\n또한 footer에 데이터에 대한 메타데이터를 저장해 두어 reader에게 데이터에 대한 힌트를 주어 조회 성능을 높입니다.\r\r\n\r\r\n![Trino_12.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino12.png)\r\r\n<center>(source: [https://parquet.apache.org/docs/file-format/](https://parquet.apache.org/docs/file-format/))</center>\r\r\n<br>\r\r\n## 구상안\r\r\n\r\r\nparquet는 columnar한 형식이기 때문에 row 단위로 데이터를 append하는 것은 비효율적입니다. 그러므로 데이터를 모아서 parquet 형식으로 파일을 생성하는 것이 효율적입니다. 이를 위해 NHN AppGuard에서는 3가지 구성 방법을 고려했고 3번째 안을 선택했습니다.\r\r\n\r\r\n1. micro batch\r\r\n    1. kafka → log-batch → create parquet / 1 minute → save obs → obs\r\r\n    2. trino는 OBS를 사용하는 경우 파일 기반으로 동작하기 때문에 파일의 개수가 많아지면 비효율적입니다.\r\r\n    3. 1분 단위로 파일을 쓸 경우 작은 파일이 많아져 조회 성능이 현저히 떨어지기 때문에 선택하지 않았습니다.\r\r\n2. hourly batch\r\r\n    1. kafka → log-batch → create parquet / 1 hour (save data in memory or redis) → save obs → obs\r\r\n    2. 메모리에 저장하는 경우 데이터 유실의 리스크가 걱정되었고\r\r\n    3. NHN AppGuard는 redis를 사용하고 있지 않아 trino와 redis 두 컴포넌트의 추가로 인한 운영 복잡도 증가가 부담되어 선택하지 않았습니다.\r\r\n3. **중간 DB 사용 - MySQL**\r\r\n    1. kafka → log-batch → save to mysql → mysql → tier down in daily-batch → save obs → obs\r\r\n    2. 기존에 사용하던 MySQL 구성을 변경하지 않아 수정 소요가 적었고\r\r\n    3. MySQL을 통해 실시간 데이터 또한 조회할 수 있어 실시간 데이터 조회가 쉬워 선택하였습니다.\r\r\n\r\r\n### 구성도\r\r\n\r\r\n* AS-IS\r\r\n![Trino_13_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino13900.png)\r\r\n\r\r\n* TO-BE\r\r\n![Trino_14_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino14900.png)\r\r\n\r\r\n\r\r\n### tier down 개념\r\r\n\r\r\nElasticSearch는 데이터의 역할 또는 접근 빈도에 따라 노드를 분배하는 기법으로 Data Tiering 을 사용합니다.\r\r\n\r\r\n![Trino_15.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino15.png)\r\r\n<center>(source: [https://www.linkedin.com/pulse/navigating-data-tiers-optimizing-costs-reducing-risk-boosting-lim-yfeyc](https://www.linkedin.com/pulse/navigating-data-tiers-optimizing-costs-reducing-risk-boosting-lim-yfeyc))</center>\r\r\n<br>\r\r\n이렇게 tier를 적용한 데이터를 높은 티어에서 낮은 티어로 낮추는 것을 tier down이라고 부릅니다. hot tier는 일반적으로 성능이 좋고 반응이 빠르지만 비용이 비싸고, cold tier는 반응은 조금 느리지만 비용이 저렴한 저장소를 사용합니다.\r\r\n\r\r\nNHN AppGuard에서는 MySQL을 hot tier, Trino를 cold tier로 정의하고 daily-batch에서 MySQL 데이터를 Parquet로 변환해 Trino에 삽입시키는 작업을 tier down으로 정의했습니다.\r\r\n\r\r\n### Parquet 파일 생성 방법\r\r\n\r\r\nParquet는 원래 HDFS에 쓰는 용도로 고안되어서 Parquet 파일을 직접 쓰려면 `org.apache.hadoop:hadoop-common:3.3.6`과 같은 hdfs writer에 세그먼트 관리, 열 압축 등의 기능을 구현해야 합니다. 이러한 작업을 피하기 위해 일반적으로 Spark 등의 외부 컴포넌트를 쓰거나 avro 포맷의 파일을 거쳤다가 parquet로 변환하는 방법을 사용합니다.\r\r\n\r\r\n[Apache Avro](https://avro.apache.org)는 data를 serialize하기에 좋은 포맷으로 스키마를 갖습니다.\r\r\nParquetFileWriter를 지원하기 때문에 손쉽게 변환이 가능합니다.\r\r\n\r\r\n> Apache Avro™ is the leading serialization format for record data, and first choice for streaming data pipelines. It offers excellent schema evolution, and has implementations for the JVM (Java, Kotlin, Scala, …), Python, C/C++/C#, PHP, Ruby, Rust, JavaScript, and even Perl.\r\r\n\r\r\n# Trino 적용 - 구현\r\r\n\r\r\n## tier down 구현\r\r\n\r\r\n### 논리 구조\r\r\n![Trino_16_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino16900.png)\r\r\n\r\r\n\r\r\n### Trino 테이블 생성\r\r\n\r\r\nTrino 데이터 소스로 OBS를 사용하는 경우 Hive를 사용하기 때문에 HQL을 사용해야 합니다. HQL 또한 SQL 표준을 따르기 때문에 거의 유사하지만 묵시적 형 변환과 같은 편의 기능을 지원하지 않고, with 문의 external location, partitioned_by 등의 옵션이 추가됩니다.\r\r\n\r\r\n```sql\r\r\nCREATE TABLE log\r\r\n (\r\r\n    seq              bigint, \r\r\n    log_time         timestamp,\r\r\n    // 생략 \r\r\n    log_date         date,\r\r\n    appkey           varchar(64),\r\r\n ) \r\r\n WITH ( \r\r\n    format = 'Parquet',\r\r\n    external_location = 's3a://data-query/log',\r\r\n    partitioned_by = ARRAY['appkey','date']\r\r\n);\r\r\n```\r\r\n\r\r\n### avro schema 작성\r\r\n\r\r\n```javascript\r\r\n{\r\r\n  \"type\" : \"record\",\r\r\n  \"name\" : \"log\",\r\r\n  \"namespace\" : \"avro\",\r\r\n  \"fields\" : [\r\r\n    { \"name\" : \"seq\", \"type\" : \"long\" },\r\r\n    { \"name\" : \"log_time\", \"type\" : [ \"null\", \"string\" ], \"default\" : null },\r\r\n    // 생략\r\r\n  ]\r\r\n}\r\r\n```\r\r\n\r\r\n### tier down process\r\r\n![Trino_17.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino17.png)\r\r\n데이터를 메모리에 올려서 변환하기 때문에 장비와 데이터에 따라 적절한 페이징을 적용해야 합니다.\r\r\n\r\r\n### convert to parquet\r\r\n![Trino_18.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino18.png)\r\r\navro 변환은 apache avro 모듈의 schema.from 함수로 쉽게 변환이 가능합니다. parquet는 apache parquet 모듈의 PositionOutputStream 객체의 writer를 구현하여 변환할 수 있습니다.\r\r\n\r\r\n### 다른 방법은 없을까?\r\r\nCTAS(Create Table As Select)가 가장 쉬운 방법입니다. 수행 시간은 위 방법과 비슷하게 소요되지만 용량이 30% 정도 더 효율적인 것으로 확인하였습니다. 하지만 DataQuery에서 사내 DB를 아직 데이터 소스로 지원하지 않아 현재는 사용이 어렵습니다.\r\r\n여기에서는 방법만 소개하겠습니다.\r\r\n\r\r\n```sql\r\r\nCREATE TABLE obs.test.log_ctas\r\r\n    WITH (\r\r\n        format = 'Parquet',\r\r\n        external_location = 's3a://ctas-test/log-ctas',\r\r\n        partitioned_by = ARRAY['log_date', 'appkey']\r\r\n        )\r\r\nAS\r\r\nselect seq,\r\r\n// 생략\r\r\n       cast(log_time as date) as log_date,\r\r\n       appkey\r\r\nfrom \"mysql\".log\r\r\nwhere log_time >= date '2024-11-01'\r\r\n  and log_time < date '2024-11-02';\r\r\n```\r\r\n\r\r\n## 실시간 데이터 union 구현\r\r\n\r\r\n### 논리 구성도\r\r\n![Trino_19_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino19900.png)\r\r\n1. cold data에 마지막으로 저장된 시간을 조회하고\r\r\n2. cold data와 hot data를 조회해\r\r\n3. join / union 하여 응답합니다.\r\r\n\r\r\n### Data 조회\r\r\n\r\r\nCold - max cold data 기준 왼쪽을 조회합니다.\r\r\n![Trino_20.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino20.png)\r\r\n\r\r\nHot - max cold data 기준 오른쪽을 조회합니다.\r\r\n![Trino_21.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino21.png)\r\r\n\r\r\n### Data Join / Union\r\r\n\r\r\n집계의 경우 toMap과 id 값을 이용해 Join 합니다.\r\r\n![Trino_22.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino22.png)\r\r\n\r\r\n단순 조회의 경우 stream.concat으로 Union 합니다.\r\r\n![Trino_23.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino23.png)\r\r\n\r\r\n# 성능 테스트\r\r\n\r\r\n## 환경\r\r\n\r\r\n* DataQuery 스펙: c2m8 * 3\r\r\n* DataQuery 데이터는(log_date, appKey) 파티셔닝 되어 있고\r\r\n    * 참고 \\*partition = RDBMS의 index 와 유사. parquet 가 저장된 경로를 의미\r\r\n        ![Trino_24.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino24.png)\r\r\n* MySQL 데이터는 일 단위로 파티셔닝되어 있습니다.\r\r\n* MySQL 데이터는 log\\_time, appkey 각각의 인덱스와 (log\\_time, appkey) 복합 index 가 적용되어 있습니다.\r\r\n\r\r\n## 데이터 조회\r\r\n\r\r\n이슈 대응 등의 이유로 개발자가 쿼리 엔진에 자주 질의하는 **일반 쿼리**와 서비스에서 사용하는 **서비스 쿼리**로 구분하여 테스트했습니다.\r\r\n\r\r\n### 일반 쿼리\r\r\n\r\r\n단순한 select \\* 조회는 mysql이 7배가량 빠르고, count 등의 집계 함수가 포함된 쿼리는 DataQuery가 적게는 4배에서 6배가량 빠른 양상을 보였습니다.\r\r\nTrino + Parquet 조합은 열 기반 데이터 포맷으로 인한 행 조회의 비효율성, Trino의 쿼리 플래닝과 file fetch에서의 오버헤드로 인해 단순한 행 조회가 느리기 때문입니다.\r\r\n\r\r\n| 쿼리 | dataquery | mysql |\r\r\n| --- | --------- | ----- |\r\r\n| **단순** 조회 (select \\* limit 500) | <span style=\"color:#e11d21;\">1 s 151 ms</span> | <span style=\"color:#0052cc;\">148 ms</span> |\r\r\n| **count** 조회 (select count(\\*) 한 달 | <span style=\"color:#0052cc;\">8 s 957 ms</span> | <span style=\"color:#e11d21;\">30.987 s</span> |\r\r\n| filter - appkey \\& log\\_time **행 조회** | <span style=\"color:#e11d21;\">1 s 323 ms</span> | <span style=\"color:#0052cc;\">393 ms</span> |\r\r\n| filter - appkey \\& log\\_time **count** | <span style=\"color:#0052cc;\">349 ms</span> | <span style=\"color:#e11d21;\">14.662 s</span> |\r\r\n| group by - appkey 하루 | <span style=\"color:#0052cc;\">814 ms</span> | <span style=\"color:#e11d21;\">2.385 s</span> |\r\r\n| group by - appkey 한 달 | <span style=\"color:#0052cc;\">18 s 530 ms</span> | <span style=\"color:#e11d21;\">2m 15s 538ms</span> |\r\r\n\r\r\n### NHN AppGuard 서비스 쿼리\r\r\n\r\r\nDataQuery가 전반적으로 10배 정도 빨랐습니다.\r\r\n이상 행위 탐지 현황의 한 달치 데이터는 MySQL에서 30분 이상 소요되어 조회할 수 없었지만 DataQuery는 36초만에 조회하였습니다.\r\r\n\r\r\n| 쿼리 | dataquery | mysql |\r\r\n| --- | --------- | ----- |\r\r\n| 이상행위 탐지현황 - limit 50 하루 | <span style=\"color:#0052cc;\">1 s 696 ms</span> | <span style=\"color:#e11d21;\">9.676s</span> |\r\r\n| 이상행위 탐지현황 - limit 50 한 달 | <span style=\"color:#0052cc;\">6 s 468 ms</span> | <span style=\"color:#e11d21;\">6m 19s 459ms</span> |\r\r\n| 이상행위 탐지현황 report - 하루 | <span style=\"color:#0052cc;\">7.06s</span> | <span style=\"color:#e11d21;\">21s 890ms</span> |\r\r\n| 이상행위 탐지현황 report - 한 달 | <span style=\"color:#0052cc;\">36.81s</span> | <span style=\"color:#e11d21;\">**조회 불가(30분 이상)**</span> |\r\r\n| 로그 조회 - 하루 | <span style=\"color:#0052cc;\">1 s 531 ms</span> | <span style=\"color:#e11d21;\">7s 264ms</span> |\r\r\n| 로그 조회 - 한 달 | <span style=\"color:#0052cc;\">5 s 728 ms</span> | <span style=\"color:#e11d21;\">5m 58s 381ms</span> |\r\r\n\r\r\n### Parquet 크기별 비교\r\r\n\r\r\nappkey로 파티션 되기 때문에 appkey별 로그 양이 달라 로그 개수에 따른 성능 차이를 비교해 보았습니다. 로그 수 기준 중위의 appkey까지도 MySQL이 더 빠른 양상을 보였습니다. 2-300ms가량의 차이를 보이는 만큼 로그가 적은 사용자 입장에서는 데이터가 없는데 굼뜨다는 느낌을 받을 수 있습니다. 이에 반해 로그 수가 평균을 넘어가면 MySQL은 30초가 넘어가는 응답을 보여 콘솔에서 서비스하기에 어려운 반응 속도를 보입니다.\r\r\n\r\r\n| 대시보드 조회 쿼리 | DataQuery | MySQL |\r\r\n| ---------- | --------- | ----- |\r\r\n| 데이터 없음 | <span style=\"color:#e11d21;\">267 ms</span> | <span style=\"color:#0052cc;\">102 ms</span> |\r\r\n| 최소 | <span style=\"color:#e11d21;\">365 ms</span> | <span style=\"color:#0052cc;\">100 ms</span> |\r\r\n| 중위 | <span style=\"color:#e11d21;\">610 ms</span> | <span style=\"color:#0052cc;\">168 ms</span> |\r\r\n| 평균 | <span style=\"color:#0052cc;\">505 ms</span> | <span style=\"color:#e11d21;\">34 s 24 ms</span> |\r\r\n| 최대 | <span style=\"color:#0052cc;\">15s 85 ms</span> | <span style=\"color:#e11d21;\">10 m 23 s 982 ms</span> |\r\r\n\r\r\n## 성능 테스트 결론\r\r\n\r\r\n1. 행 전체 조회, 데이터가 적은 경우는 MySQL이 빠르다.\r\r\n    1. 100ms VS 500ms의 차이 → **참을만하다.**\r\r\n2. 집계 조회, 데이터가 많은 경우에는 DataQuery가 빠르다.\r\r\n    1. 수십 초 VS 수 분 차이 → **참을 수 없다.**\r\r\n\r\r\n# 결과\r\r\n\r\r\n## 좋아졌나요?\r\r\n\r\r\n1. 이상 행위 탐지 현황의 30일치 데이터를 조회하지 못하던 고객이 이제 조회할 수 있게 되었습니다.\r\r\n2. 2024년 초 공개한 NHN AppGuard public api는 MySQL로는 30분 이상 소요되어 개발이 어려웠는데, DataQuery를 통해 7초 이내로 조회하여 개발할 수 있었습니다.\r\r\n3. 내부 집계 시간이 38m36s → 22m16s로 약 43% 개선했습니다.\r\r\n4. mysql에서의 집계로 인한 slow query가 제거되어 일 배치로 인한 서비스의 영향성이 없어졌습니다.\r\r\n5. 집계 연산이 빨라져서 집계 데이터의 종류를 늘리는 것에 부담이 없어졌습니다.\r\r\n6. 스토리지 비용 감소로 데이터 저장 기간을 60일에서 1년으로 늘렸습니다.\r\r\n\r\r\n## 나쁜 점은 없나요?\r\r\n\r\r\n1. 대시보드의 기본 응답 속도가 300ms 정도 느려졌습니다.\r\r\n2. tier down 실패 시 집계, 미터링 등에 영향을 주기 때문에 모니터링 요소가 늘어났습니다.\r\r\n3. DataQuery와 OBS 비용이 추가되었습니다. (대략 100만 원/월)\r\r\n\r\r\n## 앞으로 해야 할 것이 있을까요?\r\r\n\r\r\n1. 일 단위 tier down을 시간 단위로 변경하는 것을 고민하고 있습니다.\r\r\n2. 고객 로그 수에 따라 적절한 쿼리 엔진을 사용하도록 최적화하는 부분에 대해 고민하고 있습니다.\r\r\n\r\r\n\r\r\n\r\r\n이상 NHN AppGuard에 Trino를 적용해 본 과정과 결과에 대해 정리하였습니다. 도움이 되셨길 바라며, 긴 글을 읽어 주셔서 감사합니다. \r\r\n\r\r\n[![NHN Cloud_meetup banner_footer_gray_202408_900.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannerfootergray202408900.png)](https://www.nhncloud.com/kr)",
        "contentSnippet": "![NHN Cloud_meetup banner_trino_202502-01_900.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannertrino20250201900.png)\r\r\n\r\r\n# 들어가며\r\r\n안녕하세요. NHN Cloud의 클라우드AI팀 이태형입니다.\r\r\n로그 데이터가 쌓일수록 조회 속도가 느려지는 문제, 한 번쯤 겪어 보셨을 텐데요. 이 글에서는 이러한 문제를 해결하기 위해 저희 팀에서 Trino를 도입하여 성능을 개선한 과정을 공유해 보려 합니다. 재미있게 읽어 주세요! \r\r\n\r\r\n# 개요: NHN AppGuard\r\r\n[NHN AppGuard](https://www.nhncloud.com/kr/service/security/nhn-appguard) 서비스에 Trino를 적용한 이야기를 드릴 예정이라서 먼저 해당 서비스를 소개하겠습니다.\r\r\n\r\r\nNHN AppGuard는 모바일 애플리케이션을 보호하기 위해 사용자의 이상 행위를 탐지하거나 차단하는 모바일 앱 보안 솔루션입니다. NHN AppGuard의 서버는 탐지/차단 로그를 안전하게 저장하고, 각종 조건 검색과 대시보드를 제공합니다.\r\r\n\r\r\n![Trino_1.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino1.png)\r\r\n\r\r\n## NHN AppGuard 로그\r\r\n\r\r\nNHN AppGuard는 평균 600만개/일 가량의 로그를 수집하고 있습니다. 이러한 로그는 NHN AppGuard 로그 워크플로에 따라 DB에 적재됩니다.\r\r\n\r\r\n![Trino_2_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino2900.png)\r\r\n\r\r\n## 이슈 발생\r\r\n\r\r\n대부분의 쿼리가 월 단위 집계 성격을 띠는 이유로 질의 대상 row 가 1억 건이 넘는 경우가 많아 이슈가 발생했습니다.\r\r\n발생한 이슈는 아래와 같습니다.\r\r\n\r\r\n1. 검색 조건 변경 시 대시보드 화면에서 타임아웃 발생\r\r\n![Trino_3.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino3.png)\r\r\n2. 집계 쿼리가 수행되는 새벽 시간대에 slow query 발생\r\r\n![Trino_4.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino4.png)\r\r\n\r\r\n## 일반적인 해결 방안\r\r\n\r\r\n위 이슈들은 결국 쿼리의 성능이 원인이기 때문에 먼저 쿼리 최적화를 수행했습니다.\r\r\n\r\r\n1. index 문제\r\r\n    1. 쿼리 검수를 통해 index의 순서를 변경하고\r\r\n    2. 의도한 index가 적용되도록 쿼리에 index hint를 추가했습니다.\r\r\n2. 쿼리의 문제\r\r\n    1. 한 달 기간 전체 데이터를 스캔하는 쿼리를 당일 증가분만 조회하도록 수정하고\r\r\n    2. 대시보드를 매번 조회하지 않고 일 배치 작업으로 미리 계산해 둔 데이터를 조회하고\r\r\n    3. 조회 가능한 기간을 제한했습니다.\r\r\n\r\r\n이러한 최적화를 통해 일시적으로 이슈가 해소되었습니다.\r\r\n하지만 NHN AppGuard의 로그는 점차 늘어나고, 집계할 데이터의 종류도 증가했으며, 조회 기간 감소에 대한 불만이 발생하여 다른 접근이 필요했습니다.\r\r\n\r\r\n## 로그 저장소 검토\r\r\n\r\r\nMySQL을 대신해 로그를 저장하기에 적절한 로그 저장소를 검토했습니다.\r\r\n\r\r\n1. Elasticsearch (LNCS)\r\r\n    1. 검색에 좋은 성능\r\r\n    2. 상품 스펙상 최대 120일 저장 제한\r\r\n2. Trino (DataQuery)\r\r\n    1. 복잡한 집계 쿼리에 좋은 성능\r\r\n    2. 여러 데이터 소스 간 federation 지원\r\r\n    3. 저장 기간 제한 없음\r\r\n\r\r\nNHN AppGuard는 로그의 저장 기간을 기존 90일에서 늘리는 것을 계획하고 있었고, 무엇보다 대부분의 쿼리가 집계 성격을 많이 띠어 Trino가 적절하다고 판단했습니다.\r\r\n\r\r\n# Trino와 DataQuery\r\r\n\r\r\n## Trino란\r\r\n\r\r\n[Trino 공식 홈페이지](https://trino.io)를 보면 아래와 같은 문구를 찾을 수 있습니다.\r\r\n\r\r\n> Trino, a query engine that runs at ludicrous speed\r\r\n> Fast distributed SQL query engine for big data analytics that helps you explore your data universe.\r\r\n\r\r\n키워드를 뽑아 보면 아래와 같습니다.\r\r\n\r\r\n1. Fast - 빠르다\r\r\n2. Distributed - 분산 처리한다\r\r\n3. analytics - 분석에 적절하다\r\r\n\r\r\n## Trino 특징\r\r\n\r\r\n마찬가지로 [Trino 공식 홈페이지](https://trino.io)에서는 아래와 같은 특징을 소개합니다.\r\r\n![Trino_5.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino5.png)\r\r\n\r\r\n여기서도 키워드를 뽑아보면 아래와 같습니다.\r\r\n\r\r\n1. distributed: 분산 처리로 빠르고\r\r\n2. ANSI SQL: 표준 SQL 을 호환하여 현재 쿼리문을 수정할 필요가 없고\r\r\n3. S3: OBS에 저장하여 스토리지 비용을 줄일 수 있고\r\r\n4. Query Federation: OBS의 데이터와 MySQL 데이터를 하나의 쿼리로 join할 수 있다.\r\r\n\r\r\n## Trino 동작 원리\r\r\n\r\r\nTrino의 동작 원리는 [Presto: SQL on Everything](https://trino.io/Presto_SQL_on_Everything.pdf)라는 논문에 자세히 소개하고 있습니다.\r\r\n해당 논문의 일부를 가볍게 살펴보겠습니다.\r\r\n\r\r\n### 구조도\r\r\n![Trino_6.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino6.png)\r\r\n\r\r\nTrino는 하나의 Coordinator 노드와 여러 개의 Worker 노드로 구성됩니다. Coordinator 노드는 쿼리의 인입 지점으로 admit, parsing, planning, optimizing, orchestration 등을 수행하고, worker node는 query processing을 담당합니다.\r\r\n\r\r\n### 요청 처리 순서\r\r\n\r\r\nCoordinator 노드가 분산 처리를 계획하면 worker node가 병렬로 처리해서 복잡한 쿼리가 더 빠르게 실행되는 원리입니다.\r\r\n\r\r\n1. client → coordinator: http request (SQL stmt)\r\r\n2. coordinator: evaluate request(parsing, analyzing, **optimizing distributed execution plan**)\r\r\n3. coordinator: plan to worker\r\r\n    1. task 생성\r\r\n    2. **splits** 생성(addressable chunk in external storage)\r\r\n    3. splits을 task에 할당\r\r\n4. worker: run task\r\r\n    1. fetching splits\r\r\n    2. 다른 worker에서 생성한 intermediate data 처리\r\r\n        1. worker 간에는 intermediate data를 memory에 저장하여 공유\r\r\n        2. **shuffle**이 발생할 수 있음\r\r\n             \\*shuffle = node 간 데이터 재분배\r\r\n    3. query의 shape에 따라 모든 데이터를 처리하지 않고 반환\r\r\n\r\r\n## Trino 쿼리 실행 예시\r\r\n\r\r\n### 그림으로 살펴보기\r\r\n* 쿼리문\r\r\n![Trino_7.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino7.png)\r\r\n\r\r\n* logical plan\r\r\n![Trino_8.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino8.png)\r\r\n\r\r\n* distributed plan (stage)\r\r\n![Trino_9.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino9.png)\r\r\n\r\r\n* optimized plan (pipeline, parallelism)\r\r\n![Trino_10.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino10.png)\r\r\n\r\r\n\r\r\n### 실행 순서\r\r\n\r\r\n1. Planner: SQL → SQL syntax tree → Logical Planning (IR 생성)\r\r\n    * IR = Intermediate Representation\r\r\n2. Optimizer: Logical Plan → evaluate transformation rules → **optimize** → Physical Structure\r\r\n    * transformation rules = sub-tree query plan + transformation\r\r\n    * 사용되는 optimizing 기법 = predicate and limit pushdown, column pruning, decorrelation, table and column statistics 기반 cost-based 최적화\r\r\n        * Data Layouts = Connector Data Layout API로 얻어내는 위치, 파티션, 정렬, 그룹화, 인덱스\r\r\n        * Predicate Pushdown = connector에 따른 filtering 최적화\r\r\n            * \\*pushdown : 읽어야 하는 데이터를 줄이는 것\r\r\n            * \\***Predicate Pushdown** : 조회 조건에 맞는 데이터만 읽는 것\r\r\n        * **Inter**-node Parallelism = stage 단위의 병렬 실행\r\r\n        * **Intra**-node Parallelism = stage 내에서 single node의 thread에 걸친 병렬 실행\r\r\n3. Scheduler: Stage Scheduling → Task Scheduling → Split Scheduling\r\r\n    * Task Scheduling = Leaf Stage / Intermediate Stage 분리하여 배치\r\r\n4. Query Execution = Local Data Flow → Shuffles → Writes\r\r\n\r\r\n## DataQuery\r\r\n\r\r\n[NHN Cloud의 DataQuery](https://www.nhncloud.com/kr/service/data-analytics/dataquery?lang=ko) 서비스는 위에서 소개한 Trino를 기반으로 대규모 데이터에 대해 쿼리를 실행할 수 있는 서비스입니다.\r\r\n이를 통해 원하는 클러스터 스펙을 지정하고 연결할 데이터 소스만 작성하면 Trino의 복잡한 설치와 설정 과정 없이 사용이 가능합니다.\r\r\n\r\r\n# Trino 적용 - 개념\r\r\nTrino를 적용하기 위해 알아야 할 개념을 소개합니다.\r\r\n\r\r\n## 데이터 소스 선정\r\r\nTrino는 여러 종류의 데이터 소스를 지원합니다.\r\r\n\r\r\nNHN AppGuard는 로그 저장 기간 증가를 계획하고 있어 저장 비용을 절약하기 위해 OBS를 데이터 소스로 선정하였습니다.\r\r\nOBS 데이터 소스를 사용하는 경우 데이터의 타입도 Parquet, JSON, ORC, CSV, Text 중에 선택해 주어야 해서, 위와 동일한 이유로 Parquet 파일 포맷을 선택하였습니다.\r\r\n\r\r\n### Apache Parquet\r\r\n\r\r\n[Apache Parquet 홈페이지](https://parquet.apache.org)에는 Parquet를 아래와 같이 설명합니다.\r\r\n\r\r\n> Apache Parquet is an open source, column-oriented data file format designed for efficient data storage and retrieval. It provides efficient data compression and encoding schemes with enhanced performance to handle complex data in bulk. Parquet is available in multiple languages including Java, C++, Python, etc...\r\r\n\r\r\n여기서도 키워드를 뽑아보면 아래와 같습니다.\r\r\n\r\r\n* column-oriented data\r\r\n* efficient data storage and retrieval\r\r\n* efficient data compression\r\r\n* encoding schema\r\r\n* handle complex data in bulk\r\r\n\r\r\ncolumn-oriented data의 설명은 아래의 그림을 보시면 이해가 쉽습니다.\r\r\n![Trino_11.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino11.png)\r\r\n(Source: [https://devidea.tistory.com/92](https://devidea.tistory.com/92))\r\r\n\r\r\n동일한 타입의 데이터가 나열되기 때문에 압축 효율이 높아지는 효과가 있습니다.\r\r\n또한 footer에 데이터에 대한 메타데이터를 저장해 두어 reader에게 데이터에 대한 힌트를 주어 조회 성능을 높입니다.\r\r\n\r\r\n![Trino_12.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino12.png)\r\r\n(source: [https://parquet.apache.org/docs/file-format/](https://parquet.apache.org/docs/file-format/))\r\r\n\r\r\n## 구상안\r\r\n\r\r\nparquet는 columnar한 형식이기 때문에 row 단위로 데이터를 append하는 것은 비효율적입니다. 그러므로 데이터를 모아서 parquet 형식으로 파일을 생성하는 것이 효율적입니다. 이를 위해 NHN AppGuard에서는 3가지 구성 방법을 고려했고 3번째 안을 선택했습니다.\r\r\n\r\r\n1. micro batch\r\r\n    1. kafka → log-batch → create parquet / 1 minute → save obs → obs\r\r\n    2. trino는 OBS를 사용하는 경우 파일 기반으로 동작하기 때문에 파일의 개수가 많아지면 비효율적입니다.\r\r\n    3. 1분 단위로 파일을 쓸 경우 작은 파일이 많아져 조회 성능이 현저히 떨어지기 때문에 선택하지 않았습니다.\r\r\n2. hourly batch\r\r\n    1. kafka → log-batch → create parquet / 1 hour (save data in memory or redis) → save obs → obs\r\r\n    2. 메모리에 저장하는 경우 데이터 유실의 리스크가 걱정되었고\r\r\n    3. NHN AppGuard는 redis를 사용하고 있지 않아 trino와 redis 두 컴포넌트의 추가로 인한 운영 복잡도 증가가 부담되어 선택하지 않았습니다.\r\r\n3. **중간 DB 사용 - MySQL**\r\r\n    1. kafka → log-batch → save to mysql → mysql → tier down in daily-batch → save obs → obs\r\r\n    2. 기존에 사용하던 MySQL 구성을 변경하지 않아 수정 소요가 적었고\r\r\n    3. MySQL을 통해 실시간 데이터 또한 조회할 수 있어 실시간 데이터 조회가 쉬워 선택하였습니다.\r\r\n\r\r\n### 구성도\r\r\n\r\r\n* AS-IS\r\r\n![Trino_13_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino13900.png)\r\r\n\r\r\n* TO-BE\r\r\n![Trino_14_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino14900.png)\r\r\n\r\r\n\r\r\n### tier down 개념\r\r\n\r\r\nElasticSearch는 데이터의 역할 또는 접근 빈도에 따라 노드를 분배하는 기법으로 Data Tiering 을 사용합니다.\r\r\n\r\r\n![Trino_15.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino15.png)\r\r\n(source: [https://www.linkedin.com/pulse/navigating-data-tiers-optimizing-costs-reducing-risk-boosting-lim-yfeyc](https://www.linkedin.com/pulse/navigating-data-tiers-optimizing-costs-reducing-risk-boosting-lim-yfeyc))\r\r\n\r\r\n이렇게 tier를 적용한 데이터를 높은 티어에서 낮은 티어로 낮추는 것을 tier down이라고 부릅니다. hot tier는 일반적으로 성능이 좋고 반응이 빠르지만 비용이 비싸고, cold tier는 반응은 조금 느리지만 비용이 저렴한 저장소를 사용합니다.\r\r\n\r\r\nNHN AppGuard에서는 MySQL을 hot tier, Trino를 cold tier로 정의하고 daily-batch에서 MySQL 데이터를 Parquet로 변환해 Trino에 삽입시키는 작업을 tier down으로 정의했습니다.\r\r\n\r\r\n### Parquet 파일 생성 방법\r\r\n\r\r\nParquet는 원래 HDFS에 쓰는 용도로 고안되어서 Parquet 파일을 직접 쓰려면 `org.apache.hadoop:hadoop-common:3.3.6`과 같은 hdfs writer에 세그먼트 관리, 열 압축 등의 기능을 구현해야 합니다. 이러한 작업을 피하기 위해 일반적으로 Spark 등의 외부 컴포넌트를 쓰거나 avro 포맷의 파일을 거쳤다가 parquet로 변환하는 방법을 사용합니다.\r\r\n\r\r\n[Apache Avro](https://avro.apache.org)는 data를 serialize하기에 좋은 포맷으로 스키마를 갖습니다.\r\r\nParquetFileWriter를 지원하기 때문에 손쉽게 변환이 가능합니다.\r\r\n\r\r\n> Apache Avro™ is the leading serialization format for record data, and first choice for streaming data pipelines. It offers excellent schema evolution, and has implementations for the JVM (Java, Kotlin, Scala, …), Python, C/C++/C#, PHP, Ruby, Rust, JavaScript, and even Perl.\r\r\n\r\r\n# Trino 적용 - 구현\r\r\n\r\r\n## tier down 구현\r\r\n\r\r\n### 논리 구조\r\r\n![Trino_16_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino16900.png)\r\r\n\r\r\n\r\r\n### Trino 테이블 생성\r\r\n\r\r\nTrino 데이터 소스로 OBS를 사용하는 경우 Hive를 사용하기 때문에 HQL을 사용해야 합니다. HQL 또한 SQL 표준을 따르기 때문에 거의 유사하지만 묵시적 형 변환과 같은 편의 기능을 지원하지 않고, with 문의 external location, partitioned_by 등의 옵션이 추가됩니다.\r\r\n\r\r\n```sql\r\r\nCREATE TABLE log\r\r\n (\r\r\n    seq              bigint, \r\r\n    log_time         timestamp,\r\r\n    // 생략 \r\r\n    log_date         date,\r\r\n    appkey           varchar(64),\r\r\n ) \r\r\n WITH ( \r\r\n    format = 'Parquet',\r\r\n    external_location = 's3a://data-query/log',\r\r\n    partitioned_by = ARRAY['appkey','date']\r\r\n);\r\r\n```\r\r\n\r\r\n### avro schema 작성\r\r\n\r\r\n```javascript\r\r\n{\r\r\n  \"type\" : \"record\",\r\r\n  \"name\" : \"log\",\r\r\n  \"namespace\" : \"avro\",\r\r\n  \"fields\" : [\r\r\n    { \"name\" : \"seq\", \"type\" : \"long\" },\r\r\n    { \"name\" : \"log_time\", \"type\" : [ \"null\", \"string\" ], \"default\" : null },\r\r\n    // 생략\r\r\n  ]\r\r\n}\r\r\n```\r\r\n\r\r\n### tier down process\r\r\n![Trino_17.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino17.png)\r\r\n데이터를 메모리에 올려서 변환하기 때문에 장비와 데이터에 따라 적절한 페이징을 적용해야 합니다.\r\r\n\r\r\n### convert to parquet\r\r\n![Trino_18.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino18.png)\r\r\navro 변환은 apache avro 모듈의 schema.from 함수로 쉽게 변환이 가능합니다. parquet는 apache parquet 모듈의 PositionOutputStream 객체의 writer를 구현하여 변환할 수 있습니다.\r\r\n\r\r\n### 다른 방법은 없을까?\r\r\nCTAS(Create Table As Select)가 가장 쉬운 방법입니다. 수행 시간은 위 방법과 비슷하게 소요되지만 용량이 30% 정도 더 효율적인 것으로 확인하였습니다. 하지만 DataQuery에서 사내 DB를 아직 데이터 소스로 지원하지 않아 현재는 사용이 어렵습니다.\r\r\n여기에서는 방법만 소개하겠습니다.\r\r\n\r\r\n```sql\r\r\nCREATE TABLE obs.test.log_ctas\r\r\n    WITH (\r\r\n        format = 'Parquet',\r\r\n        external_location = 's3a://ctas-test/log-ctas',\r\r\n        partitioned_by = ARRAY['log_date', 'appkey']\r\r\n        )\r\r\nAS\r\r\nselect seq,\r\r\n// 생략\r\r\n       cast(log_time as date) as log_date,\r\r\n       appkey\r\r\nfrom \"mysql\".log\r\r\nwhere log_time >= date '2024-11-01'\r\r\n  and log_time < date '2024-11-02';\r\r\n```\r\r\n\r\r\n## 실시간 데이터 union 구현\r\r\n\r\r\n### 논리 구성도\r\r\n![Trino_19_900.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino19900.png)\r\r\n1. cold data에 마지막으로 저장된 시간을 조회하고\r\r\n2. cold data와 hot data를 조회해\r\r\n3. join / union 하여 응답합니다.\r\r\n\r\r\n### Data 조회\r\r\n\r\r\nCold - max cold data 기준 왼쪽을 조회합니다.\r\r\n![Trino_20.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino20.png)\r\r\n\r\r\nHot - max cold data 기준 오른쪽을 조회합니다.\r\r\n![Trino_21.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino21.png)\r\r\n\r\r\n### Data Join / Union\r\r\n\r\r\n집계의 경우 toMap과 id 값을 이용해 Join 합니다.\r\r\n![Trino_22.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino22.png)\r\r\n\r\r\n단순 조회의 경우 stream.concat으로 Union 합니다.\r\r\n![Trino_23.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino23.png)\r\r\n\r\r\n# 성능 테스트\r\r\n\r\r\n## 환경\r\r\n\r\r\n* DataQuery 스펙: c2m8 * 3\r\r\n* DataQuery 데이터는(log_date, appKey) 파티셔닝 되어 있고\r\r\n    * 참고 \\*partition = RDBMS의 index 와 유사. parquet 가 저장된 경로를 의미\r\r\n        ![Trino_24.png](https://image.toast.com/aaaadh/real/2025/techblog/Trino24.png)\r\r\n* MySQL 데이터는 일 단위로 파티셔닝되어 있습니다.\r\r\n* MySQL 데이터는 log\\_time, appkey 각각의 인덱스와 (log\\_time, appkey) 복합 index 가 적용되어 있습니다.\r\r\n\r\r\n## 데이터 조회\r\r\n\r\r\n이슈 대응 등의 이유로 개발자가 쿼리 엔진에 자주 질의하는 **일반 쿼리**와 서비스에서 사용하는 **서비스 쿼리**로 구분하여 테스트했습니다.\r\r\n\r\r\n### 일반 쿼리\r\r\n\r\r\n단순한 select \\* 조회는 mysql이 7배가량 빠르고, count 등의 집계 함수가 포함된 쿼리는 DataQuery가 적게는 4배에서 6배가량 빠른 양상을 보였습니다.\r\r\nTrino + Parquet 조합은 열 기반 데이터 포맷으로 인한 행 조회의 비효율성, Trino의 쿼리 플래닝과 file fetch에서의 오버헤드로 인해 단순한 행 조회가 느리기 때문입니다.\r\r\n\r\r\n| 쿼리 | dataquery | mysql |\r\r\n| --- | --------- | ----- |\r\r\n| **단순** 조회 (select \\* limit 500) | 1 s 151 ms | 148 ms |\r\r\n| **count** 조회 (select count(\\*) 한 달 | 8 s 957 ms | 30.987 s |\r\r\n| filter - appkey \\& log\\_time **행 조회** | 1 s 323 ms | 393 ms |\r\r\n| filter - appkey \\& log\\_time **count** | 349 ms | 14.662 s |\r\r\n| group by - appkey 하루 | 814 ms | 2.385 s |\r\r\n| group by - appkey 한 달 | 18 s 530 ms | 2m 15s 538ms |\r\r\n\r\r\n### NHN AppGuard 서비스 쿼리\r\r\n\r\r\nDataQuery가 전반적으로 10배 정도 빨랐습니다.\r\r\n이상 행위 탐지 현황의 한 달치 데이터는 MySQL에서 30분 이상 소요되어 조회할 수 없었지만 DataQuery는 36초만에 조회하였습니다.\r\r\n\r\r\n| 쿼리 | dataquery | mysql |\r\r\n| --- | --------- | ----- |\r\r\n| 이상행위 탐지현황 - limit 50 하루 | 1 s 696 ms | 9.676s |\r\r\n| 이상행위 탐지현황 - limit 50 한 달 | 6 s 468 ms | 6m 19s 459ms |\r\r\n| 이상행위 탐지현황 report - 하루 | 7.06s | 21s 890ms |\r\r\n| 이상행위 탐지현황 report - 한 달 | 36.81s | **조회 불가(30분 이상)** |\r\r\n| 로그 조회 - 하루 | 1 s 531 ms | 7s 264ms |\r\r\n| 로그 조회 - 한 달 | 5 s 728 ms | 5m 58s 381ms |\r\r\n\r\r\n### Parquet 크기별 비교\r\r\n\r\r\nappkey로 파티션 되기 때문에 appkey별 로그 양이 달라 로그 개수에 따른 성능 차이를 비교해 보았습니다. 로그 수 기준 중위의 appkey까지도 MySQL이 더 빠른 양상을 보였습니다. 2-300ms가량의 차이를 보이는 만큼 로그가 적은 사용자 입장에서는 데이터가 없는데 굼뜨다는 느낌을 받을 수 있습니다. 이에 반해 로그 수가 평균을 넘어가면 MySQL은 30초가 넘어가는 응답을 보여 콘솔에서 서비스하기에 어려운 반응 속도를 보입니다.\r\r\n\r\r\n| 대시보드 조회 쿼리 | DataQuery | MySQL |\r\r\n| ---------- | --------- | ----- |\r\r\n| 데이터 없음 | 267 ms | 102 ms |\r\r\n| 최소 | 365 ms | 100 ms |\r\r\n| 중위 | 610 ms | 168 ms |\r\r\n| 평균 | 505 ms | 34 s 24 ms |\r\r\n| 최대 | 15s 85 ms | 10 m 23 s 982 ms |\r\r\n\r\r\n## 성능 테스트 결론\r\r\n\r\r\n1. 행 전체 조회, 데이터가 적은 경우는 MySQL이 빠르다.\r\r\n    1. 100ms VS 500ms의 차이 → **참을만하다.**\r\r\n2. 집계 조회, 데이터가 많은 경우에는 DataQuery가 빠르다.\r\r\n    1. 수십 초 VS 수 분 차이 → **참을 수 없다.**\r\r\n\r\r\n# 결과\r\r\n\r\r\n## 좋아졌나요?\r\r\n\r\r\n1. 이상 행위 탐지 현황의 30일치 데이터를 조회하지 못하던 고객이 이제 조회할 수 있게 되었습니다.\r\r\n2. 2024년 초 공개한 NHN AppGuard public api는 MySQL로는 30분 이상 소요되어 개발이 어려웠는데, DataQuery를 통해 7초 이내로 조회하여 개발할 수 있었습니다.\r\r\n3. 내부 집계 시간이 38m36s → 22m16s로 약 43% 개선했습니다.\r\r\n4. mysql에서의 집계로 인한 slow query가 제거되어 일 배치로 인한 서비스의 영향성이 없어졌습니다.\r\r\n5. 집계 연산이 빨라져서 집계 데이터의 종류를 늘리는 것에 부담이 없어졌습니다.\r\r\n6. 스토리지 비용 감소로 데이터 저장 기간을 60일에서 1년으로 늘렸습니다.\r\r\n\r\r\n## 나쁜 점은 없나요?\r\r\n\r\r\n1. 대시보드의 기본 응답 속도가 300ms 정도 느려졌습니다.\r\r\n2. tier down 실패 시 집계, 미터링 등에 영향을 주기 때문에 모니터링 요소가 늘어났습니다.\r\r\n3. DataQuery와 OBS 비용이 추가되었습니다. (대략 100만 원/월)\r\r\n\r\r\n## 앞으로 해야 할 것이 있을까요?\r\r\n\r\r\n1. 일 단위 tier down을 시간 단위로 변경하는 것을 고민하고 있습니다.\r\r\n2. 고객 로그 수에 따라 적절한 쿼리 엔진을 사용하도록 최적화하는 부분에 대해 고민하고 있습니다.\r\r\n\r\r\n\r\r\n\r\r\n이상 NHN AppGuard에 Trino를 적용해 본 과정과 결과에 대해 정리하였습니다. 도움이 되셨길 바라며, 긴 글을 읽어 주셔서 감사합니다. \r\r\n\r\r\n[![NHN Cloud_meetup banner_footer_gray_202408_900.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannerfootergray202408900.png)](https://www.nhncloud.com/kr)",
        "isoDate": "2025-03-04T02:22:40.000Z"
      }
    ]
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": [
      {
        "title": "식자재 품목 검색을 더 쉽게! 검색 엔진 도입과 개선",
        "link": "https://spoqa.github.io/2025/03/04/es-dev.html",
        "pubDate": "2025-03-04T00:00:00.000Z",
        "author": "이지민",
        "content": "<p>안녕하세요. 스포카 백엔드팀 프로그래머 이지민입니다.</p>\n\n<p>스포카에서는 식당 점주분들이 식자재 주문을 더 편리하게 하기 위한 많은 노력들을 하고 있습니다.\n그중에서도, 주문하려는 품목을 검색하여 원하는 품목을 빠르게 찾을 수 있도록 품목 검색 기능을 제공하고 있는데요.</p>\n\n<p>검색 엔진 도입부터 지금의 검색이 되기까지의 과정들을 이야기해보려고 합니다.</p>\n\n<p>도입 초기에는 검색 엔진에 대한 이해가 깊지 않아, 논리적인 의사결정보다는 다양한 테스트를 통해 더 나은 결과를 찾는 방식으로 기능을 결정, 구현하였습니다.\n이 점을 고려해 읽어주시길 바라며, 이 글은 검색 엔진의 점진적인 발전 과정을 다루는 이야기이니, 순차적으로 읽어보시면 개선 과정이 더욱 잘 이해되실 것 같습니다!</p>\n\n<h1 id=\"검색-엔진-도입-배경\">검색 엔진 도입 배경</h1>\n<p>품목 검색 기능 초기에는 Database의 LIKE 질의를 통한 검색만 제공되었습니다. 이로 인해 품목명에 띄어쓰기가 다르거나 맞춤법이 정확히 일치하지 않는 경우, 사용자가 원하는 결과를 찾기가 어려웠습니다.</p>\n\n<p>예를 들어, <code class=\"language-plaintext highlighter-rouge\">깐마늘</code>을 검색했을 때 <code class=\"language-plaintext highlighter-rouge\">마늘/깐</code> 이라고 저장되어 있는 유통사 품목은 검색되지 않아 점주들은 깐마늘을 유통사가 취급하지 않는다고 오해하는 상황이 발생하곤 했습니다.</p>\n\n<p>이와 같은 문제와 사용하는 점주의 수가 증가하고 품목의 종류가 다양해짐에 따라, DB 검색 기능의 한계가 더 드러나게 되었고 이를 해결하기 위해 검색 엔진 도입의 필요성이 대두되었습니다.</p>\n\n<p>이번 검색 엔진 도입이 스포카에서 최초 도입은 아닌데요.(하지만 제가 처음이에요.) (구)도도카트 서비스 운영 당시 많은 명세표 품목을 검색하는데 Elasticsearch 검색 엔진을 활용했었습니다.\n우선 별도의 검색 품질에 대한 기준이 마련되어 있지 않았기 때문에 (구)도도카트 서비스의 검색 엔진 설정을 참고해 Elasticsearch(이하 ES)를 POC 해보기로 했습니다.</p>\n\n<p><img src=\"/images/es-dev/es0-1.jpg\" alt=\"background\" /></p>\n\n<h2 id=\"db-like-검색과-es-검색-비교-poc\">DB LIKE 검색과 ES 검색 비교 POC</h2>\n<p>품목 데이터는 <code class=\"language-plaintext highlighter-rouge\">product</code> 라는 인덱스에 다음과 같은 setting 으로 구성했습니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"product\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"mappings\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"properties\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n        </span><span class=\"nl\">\"name\"</span><span class=\"p\">:{</span><span class=\"w\">\n          </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:</span><span class=\"s2\">\"korean\"</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"fields\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"ngram\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:</span><span class=\"s2\">\"korean_ngram\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"settings\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"index\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"nl\">\"analysis\"</span><span class=\"p\">:{</span><span class=\"w\">\n          </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"edge_ngram_back\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"min_gram\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"side\"</span><span class=\"p\">:</span><span class=\"s2\">\"back\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"edge_ngram\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"max_gram\"</span><span class=\"p\">:</span><span class=\"s2\">\"5\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"nl\">\"edge_ngram_front\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"min_gram\"</span><span class=\"p\">:</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"side\"</span><span class=\"p\">:</span><span class=\"s2\">\"front\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"edge_ngram\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"max_gram\"</span><span class=\"p\">:</span><span class=\"s2\">\"5\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n          </span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"korean\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                </span><span class=\"s2\">\"lowercase\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">\"trim\"</span><span class=\"w\">\n              </span><span class=\"p\">],</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"custom\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"tokenizer\"</span><span class=\"p\">:</span><span class=\"s2\">\"nori_mixed\"</span><span class=\"w\">\n            </span><span class=\"p\">},</span><span class=\"w\">\n            </span><span class=\"nl\">\"korean_ngram\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                </span><span class=\"s2\">\"lowercase\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">\"edge_ngram_front\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">\"edge_ngram_back\"</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">\"trim\"</span><span class=\"w\">\n              </span><span class=\"p\">],</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"custom\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"tokenizer\"</span><span class=\"p\">:</span><span class=\"s2\">\"nori_mixed\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n          </span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"nl\">\"tokenizer\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"nori_mixed\"</span><span class=\"p\">:{</span><span class=\"w\">\n              </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"nori_tokenizer\"</span><span class=\"p\">,</span><span class=\"w\">\n              </span><span class=\"nl\">\"decompound_mode\"</span><span class=\"p\">:</span><span class=\"s2\">\"mixed\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<ul>\n  <li>품목명을 저장할 <code class=\"language-plaintext highlighter-rouge\">name</code> field, <code class=\"language-plaintext highlighter-rouge\">name.ngram</code> field 구현</li>\n  <li>한글 검색의 정확성과 유연성을 높이기 위해 <a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-nori-tokenizer.html\">Nori Tokenizer</a>와 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-edgengram-tokenfilter.html\">Edge N-gram</a> 필터를 활용해 띄어쓰기나 일부 단어만으로도 검색이 가능하도록 설정</li>\n</ul>\n\n<p>또한, LIKE 질의를 사용하는 기존 DB 검색과 ES 검색의 결과를 비교한 POC 결과는 다음과 같습니다.\n<img src=\"/images/es-dev/es0-2.png\" alt=\"es-start\" /></p>\n\n<p>결과를 통해 볼 수 있듯이, 정확하지 않은 키워드로 검색했을 때도 기존 DB의 LIKE 질의보다 ES 검색이 훨씬 더 나은 결과를 제공하는 것을 확인할 수 있었습니다.</p>\n\n<p>비용 증가와 관리 포인트가 늘어남에도 불구하고 앞서 언급한 문제들이 해소되었고 검색 품질을 크게 항상시킬 수 있을거 같아 검색 엔진 도입을 최종적으로 결정하게 되었습니다!</p>\n\n<p>다만, 이번 테스트는 전체 검색어가 아닌 일부 검색어를 대상으로 진행된 POC 였기 때문에, 실제 사용자의 피드백을 바탕으로 지속적인 수정과 개선이 필요할 것으로 예상하고 있었습니다.\n이러한 부분을 미리 인지하고 마음의 준비(?)와 공부를 하고 있었죠.</p>\n\n<h1 id=\"개선-작업\">개선 작업</h1>\n<h2 id=\"1-가중치-조절-및-n-gram-조정\">1) 가중치 조절 및 N-gram 조정</h2>\n<h3 id=\"이슈-및-원인-분석\">이슈 및 원인 분석</h3>\n<p>검색 엔진을 적용한 후에 아래와 같은 피드백이 들어왔습니다.\n<img src=\"/images/es-dev/es1-1.png\" alt=\"es-bacon-result\" /></p>\n\n<p>주문하려고 했던 품목은 <code class=\"language-plaintext highlighter-rouge\">통베이컨(에스푸드)</code>였지만, <code class=\"language-plaintext highlighter-rouge\">통베</code>, <code class=\"language-plaintext highlighter-rouge\">통베이</code> 키워드로 검색했을 때 상위에 노출되지 않는다는 이슈였습니다.\n이 문제를 해결하기 위해, 우선 <code class=\"language-plaintext highlighter-rouge\">통베</code>라는 검색어를 중심으로 원인을 분석해보았습니다.</p>\n\n<p>문제 원인 파악을 위해 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html\">_analyze</a> API를 활용하여 name 필드에 적용된 분석기(analyzer)가 검색어를 어떻게 토큰화하는지 살펴보았습니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">GET</span><span class=\"w\"> </span><span class=\"err\">product/_analyze</span><span class=\"w\">\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"field\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"name\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"text\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"통베이컨(에스푸드)\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"err\">Response</span><span class=\"w\">\n</span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"response\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"tokens\"</span><span class=\"p\">:[</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"통\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"start_offset\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"end_offset\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"word\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"position\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"베이컨\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"start_offset\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"end_offset\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"word\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"position\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"에스\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"start_offset\"</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"end_offset\"</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"word\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"position\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"token\"</span><span class=\"p\">:</span><span class=\"s2\">\"푸드\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"start_offset\"</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"end_offset\"</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"word\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"position\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>결과는 [<code class=\"language-plaintext highlighter-rouge\">통</code>, <code class=\"language-plaintext highlighter-rouge\">베이컨</code>, <code class=\"language-plaintext highlighter-rouge\">에스</code>, <code class=\"language-plaintext highlighter-rouge\">푸드</code>] 로 예측 가능하게 나오네요.</p>\n\n<p>그러나 문제의 검색어인 통베는 다음과 같이 토큰화되었습니다:\n[<code class=\"language-plaintext highlighter-rouge\">통</code>, <code class=\"language-plaintext highlighter-rouge\">베</code>, <code class=\"language-plaintext highlighter-rouge\">베</code>, <code class=\"language-plaintext highlighter-rouge\">어</code>]</p>\n\n<p>잠깐 <code class=\"language-plaintext highlighter-rouge\">어</code> 는 뭐지? 라고 생각하실 수 있는데요. <code class=\"language-plaintext highlighter-rouge\">통베</code>라는 단어 어디에도 <code class=\"language-plaintext highlighter-rouge\">어</code> 라는 단어는 찾아볼 수 없기 때문이죠.</p>\n\n<p>이는 ES의 Nori Tokenizer 가 한국어 문장에서 어미를 추출하는 방식을 따라 토큰화하기 때문입니다.\n예를 들어, “강아지가 밥을 먹습니다”라는 문장은 [<code class=\"language-plaintext highlighter-rouge\">강아지</code>, <code class=\"language-plaintext highlighter-rouge\">가</code>, <code class=\"language-plaintext highlighter-rouge\">밥</code>, <code class=\"language-plaintext highlighter-rouge\">을</code>, <code class=\"language-plaintext highlighter-rouge\">먹</code>, <code class=\"language-plaintext highlighter-rouge\">습니다</code>]로 명사와 어미를 구분하여 토큰화됩니다.\n따라서 정확히 알기는 어렵지만 <code class=\"language-plaintext highlighter-rouge\">어</code>는 Nori Tokenizer 가 <code class=\"language-plaintext highlighter-rouge\">베</code>에서 어미로 분리한 결과로 예상하고 있어요.</p>\n\n<p>이런 토큰화 방식을 보고 Nori Tokenizer 의 토큰화는 단어별로 검색하는 패턴이 많은 저희 서비스에서 예측 불가능할 수 있겠다라는 깨달음을 얻었어요.\n하지만 Nori를 아예 제거하기엔 Nori 가 해주는 명사 추출의 이점이 있을 수 있어 조심스러웠습니다.\n결론적으로, Nori 기능을 완전히 제거하는 대신, 다른 접근을 시도하기로 했습니다.</p>\n\n<h3 id=\"쿼리-가중치-조절-poc\">쿼리 가중치 조절 POC</h3>\n<p>문제 해결을 위해 쿼리의 가중치를 조절해보기로 했습니다.\n기존엔 쿼리 가중치를 순수 Nori Tokenizer 가 적용된 <code class=\"language-plaintext highlighter-rouge\">name</code> 필드와 Nori Tokenizer 와 N-gram filter 가 적용된 <code class=\"language-plaintext highlighter-rouge\">name.ngram</code> 필드에 각각 10과 5 를 주고 있었는데요.\n따라서 N-gram 에 의해 검색된 품목보다 순수 Nori 에 의해 검색된 품목의 유사도가 높아져 상위에 올라가게 됩니다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">통베</code> 라고 검색했을때 <code class=\"language-plaintext highlighter-rouge\">통베이컨(에스푸드)</code> 품목이 올라오기 위한 가중치 조절과 N-gram Filter 조정이 필요해보였습니다.\n<img src=\"/images/es-dev/es1-2.jpeg\" alt=\"sapjil\" />\n최적의 가중치와 N-gram Filter 설정을 찾기 위해 통베이컨 품목을 기준으로 <del>삽질을</del> 테스트를 아래와 같이 해보았는데요.</p>\n\n<p><img src=\"/images/es-dev/es1-3.png\" alt=\"es-ngram\" />\n<img src=\"/images/es-dev/es1-4.png\" alt=\"es-ngram\" /></p>\n\n<p>Nori Tokenizer 에만 의존하기에는 무리가 있을거 같아 ES 기본 Tokenizer 인 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-tokenizer.html\">Standard Tokenizer</a> 도 추가해서 테스트 해봤습니다. \n가중치의 경우, 순수 Nori 인 <code class=\"language-plaintext highlighter-rouge\">nori</code> 와 N-gram 을 적용한 <code class=\"language-plaintext highlighter-rouge\">ngram</code>, <code class=\"language-plaintext highlighter-rouge\">standard</code> 필드의 가중치를 조정해보며 각각 2.0, 3.0, 2.0 일 때 <code class=\"language-plaintext highlighter-rouge\">통베이컨(에스푸드)</code>와 <code class=\"language-plaintext highlighter-rouge\">세척당근</code>이 가장 잘 검색되는 것을 확인 했습니다.</p>\n\n<p>여기에서 Edge N-gram 에 대해서 간단히 설명드리자면요.</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"min_gram\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"max_gram\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"3\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"side\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"front\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"edge_ngram\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<ul>\n  <li>min_gram : 최소 토큰 길이</li>\n  <li>max_gram : 최대 토큰 길이</li>\n  <li>side : 단어의 어느 부분부터 토큰화 할지 설정(front/back)</li>\n</ul>\n\n<p>side 가 front 인 위 예시로 <code class=\"language-plaintext highlighter-rouge\">안녕하세요</code>를 토큰화해보면 [<code class=\"language-plaintext highlighter-rouge\">안</code>, <code class=\"language-plaintext highlighter-rouge\">안녕</code>, <code class=\"language-plaintext highlighter-rouge\">안녕하</code>]로 토큰화되고 side 가 back 일 경우엔 [<code class=\"language-plaintext highlighter-rouge\">요</code>, <code class=\"language-plaintext highlighter-rouge\">세요</code>, <code class=\"language-plaintext highlighter-rouge\">하세요</code>]로 토큰화 됩니다.\n때문에 front 의 경우 주로 첫 글자부터 검색하는 자동완성과 같은 곳에서 사용하고 back 은 주로 뒷글자부터 검색하는 경우, 예를들면 영어로 ion 을 검색했을 때 action, station, evolution 같은 것들을 검색할 때 유용하게 사용할 수 있을거예요.</p>\n\n<p>저희는 식자재 검색라는 특성이 있어 <code class=\"language-plaintext highlighter-rouge\">통베</code>, <code class=\"language-plaintext highlighter-rouge\">세척당</code>과 같이 앞글자부터 검색하는 경우가 많기 때문에 back 은 제거하고 front 만 남기기로 했습니다. max_gram 도 기존엔 5로 토큰화가 많이 되어 오히려 정확성을 떨어트리는 것을 발견했고 적절해보이는 3으로 조정했습니다.</p>\n\n<h3 id=\"결론\">결론</h3>\n<p>결론적으로 아래 조정 작업으로 문제가 되었던 품목이 검색 상위에 안정적으로 노출되도록 검색 품질을 향상시켰습니다.</p>\n<ul>\n  <li>N-gram 조정: <code class=\"language-plaintext highlighter-rouge\">max_gram</code> 값을 5 -&gt; 3으로 하향 조정하고 <code class=\"language-plaintext highlighter-rouge\">side: front</code> 만 사용</li>\n  <li>가중치 조정: Nori, N-gram, Standard 분석기의 가중치를 적절히 분배</li>\n</ul>\n\n<h2 id=\"2-wildcard-검색\">2) Wildcard 검색</h2>\n<h3 id=\"이슈-및-원인-분석-1\">이슈 및 원인 분석</h3>\n<p>위 작업을 배포하고 내부에서 아래와 같은 피드백을 받았습니다.\n<img src=\"/images/es-dev/es2-1.png\" alt=\"es2\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">칠성사이다/355ml*24캔</code>라는 품목이 있는데도 불구하고 <code class=\"language-plaintext highlighter-rouge\">사이다</code> 라고 검색했을때 검색이 되지 않는 이슈였는데요.\n각 분석기에서 <code class=\"language-plaintext highlighter-rouge\">칠성사이다/355ml*24캔</code>이 토큰화된 결과는 다음과 같았습니다.</p>\n\n<div class=\"language-text highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Nori: 칠성사, 칠, 성사, 이, 다, 355, ml, 24, 캔\n\nN-gram: 칠, 칠성, 칠성사, 칠, 성, 성사, 이, 다, 3, 35, 355, m, ml, 2, 24, 캔\n\nStandard: 칠성사이다, 355ml, 24캔\n</code></pre></div></div>\n<p>결과에서 확인할 수 있듯이, <code class=\"language-plaintext highlighter-rouge\">사이다</code>라는 토큰이 생성되지 않아 검색 결과에서 제외된 것입니다.</p>\n\n<p>위에서 가중치와 N-gram 을 조정했는데도 불구하고 왜 사이다로 토큰화되지 않았을까요?\n이는 N-gram 은 Filter 이기 때문에 Nori 분석기에서 생성된 토큰을 기반으로 토큰을 더 잘게 나누는 필터링을 수행하기 때문이에요.\n즉, Nori 분석기가 사이다를 하나의 단어로 인식하지 못하고 어미(이, 다)로 나누어버렸기 때문에, 사이다라는 토큰 자체가 존재하지 않았던 것이죠,,</p>\n\n<p>만약 칠성고구마였다면 어떻게 되었을까요?</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nori: [칠성, 고구마, 355, ml, 24, 캔]\n\nngram: [칠, 칠성, 고, 고구, 고구마, 3, 35, 355, m, ml, 2, 24, 캔]\n\nstandard: [칠성고구마, 355ml, 24캔]\n</code></pre></div></div>\n\n<p><img src=\"/images/es-dev/es2-2.jpeg\" alt=\"huguma\" width=\"300\" /></p>\n\n<p>이처럼 명사 단위로 토큰화하기 때문에 <a href=\"https://bitbucket.org/eunjeon/mecab-ko-dic/src/master/\">Nori 명사 사전</a>에 명사 존재 여부에 따라 토큰화가 다르게 됩니다. 명사 사전에 존재하는 품목의 경우, 고구마처럼 검색이 훨씬 매끄러울 수 있을거예요.\n사이다도 명사 사전에 등록되어 있었다면 <code class=\"language-plaintext highlighter-rouge\">칠성사이다</code>도 [<code class=\"language-plaintext highlighter-rouge\">칠성</code>, <code class=\"language-plaintext highlighter-rouge\">사이다</code>] 로 토큰할 수 있었겠죠.</p>\n\n<h3 id=\"user-dictionary\">User Dictionary</h3>\n<p>따라서, <a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-nori-tokenizer.html\">사용자 사전(user_dictionary)</a> 도입을 고려했었는데요. Nori Tokenizer 에게 <code class=\"language-plaintext highlighter-rouge\">사이다</code>는 명사야, 혹은 <code class=\"language-plaintext highlighter-rouge\">칠성사이다</code>는 [<code class=\"language-plaintext highlighter-rouge\">칠성</code>, <code class=\"language-plaintext highlighter-rouge\">사이다</code>] 라고 토큰화 해! 라고 인식할 수 있는 기준을 마련해줄수있는 방법이에요.</p>\n\n<p>하지만 몇가지 한계가 있었어요.</p>\n\n<ul>\n  <li>관리 포인트 증가\n    <ul>\n      <li>관리해야 할 품목의 종류가 너무 많아 어려움이 발생</li>\n      <li>농산물, 곡류, 축산물, 수산물 등 수백에서 수천 가지 품목을 주기적으로 업데이트하기 어려운 환경</li>\n    </ul>\n  </li>\n  <li>표준화되지 않은 품목명\n    <ul>\n      <li>유통사마다 다른 표기 방식으로 인해 같은 품목도 명칭이 다름</li>\n      <li>예: “무”와 “무우”, “샐러드”와 “셀러드” 등 비표준어와 잘못된 외래어 표기</li>\n      <li>이러한 다양한 표기법을 모두 관리하기엔 부담이 큼</li>\n    </ul>\n  </li>\n</ul>\n\n<p>이러한 이유로 사용자 사전을 유지 관리하는 것이 현실적으로 어렵다고 판단하여 다른 접근 방식을 찾기로 했습니다.</p>\n\n<h3 id=\"wildcard-field\">Wildcard Field</h3>\n<p>문제를 다시 분석한 결과, 검색어 자체가 포함된 품목을 반환하는 것이 핵심이라는 점을 확인했습니다.\n이는 마치 DB의 LIKE 쿼리처럼 검색어가 포함된 품목을 반환하는 것이죠.\nES에서는 이러한 기능을 제공하는 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/7.17/keyword.html#wildcard-field-type\">Wildcard</a> 필드를 활용할 수 있었습니다.</p>\n\n<p>Wildcard 필드를 추가하는 방법은 간단합니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"mappings\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"properties\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:</span><span class=\"s2\">\"korean\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"fields\"</span><span class=\"p\">:{</span><span class=\"w\">\n          </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n          </span><span class=\"nl\">\"wildcard\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"wildcard\"</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"err\">//..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Wildcard 필드는 역색인 구조가 아닌 패턴 매칭 방식을 사용하기 때문에 성능 문제가 발생할 수 있어서 신중히 사용해야 합니다. 모든 토큰을 검사해야 하기 때문에 데이터가 많아질수록 메모리 사용량이 많아지고 성능이 떨어질 수 있습니다.\n따라서 Wildcard 필드 대신 정교한 N-gram 을 사용하거나 Query-String 쿼리를 권장합니다.</p>\n\n<p>하지만 저희는 데이터량이 많지 않고, 필터를 통해 조회되는 데이터 수를 제한할 수 있었기 때문에 성능 부담이 아직까진 크지 않아 Wildcard 필드를 사용하기로 결정했습니다.</p>\n\n<p>Wildcard 필드를 활용한 쿼리는 다음과 같이 구성했습니다:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"query\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"bool\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"must\"</span><span class=\"p\">:[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"bool\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"should\"</span><span class=\"p\">:[</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"wildcard\"</span><span class=\"p\">:{</span><span class=\"w\">\n                  </span><span class=\"nl\">\"name.wildcard\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"boost\"</span><span class=\"p\">:</span><span class=\"mf\">100.0</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"wildcard\"</span><span class=\"p\">:</span><span class=\"s2\">\"*사이다*\"</span><span class=\"w\">\n                  </span><span class=\"p\">}</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"p\">},</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"multi_match\"</span><span class=\"p\">:{</span><span class=\"w\">\n                  </span><span class=\"nl\">\"fields\"</span><span class=\"p\">:[</span><span class=\"w\">\n                    </span><span class=\"s2\">\"name^3.0\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"name.ngram^4.0\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"name.standard^3.0\"</span><span class=\"w\">\n                  </span><span class=\"p\">],</span><span class=\"w\">\n                  </span><span class=\"nl\">\"query\"</span><span class=\"p\">:</span><span class=\"s2\">\"사이다\"</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>검색어가 포함된 결과는 상단으로 올리되, 포함된 결과 내에서도 유사도에 맞게 정렬되도록 쿼리를 수정했습니다. 위처럼 할 경우 사이다가 포함된 단어는 100 점을 추가로 받고 match 되는 필드에 따라 점수를 추가로 더해지게 됩니다.</p>\n\n<p>예를들어 <code class=\"language-plaintext highlighter-rouge\">칠성사이다</code> , <code class=\"language-plaintext highlighter-rouge\">칠십성사이다</code> , <code class=\"language-plaintext highlighter-rouge\">칠성사이</code> 라는 품목이 있을때, <code class=\"language-plaintext highlighter-rouge\">사이다</code> 라고 검색하면 wildcard 에 의해 <code class=\"language-plaintext highlighter-rouge\">칠성사이다</code>, <code class=\"language-plaintext highlighter-rouge\">칠십성사이다</code> 가 가장 상단으로 나오게 될테고, 품목의 이름이 더 짧아 유사도가 더 높은 <code class=\"language-plaintext highlighter-rouge\">칠성사이다</code> 가 최상단으로 나오게 될거예요.\n기존의 가중치는 유지하되 검색어가 포함된 결과만 올리기 위한 쿼리입니다.</p>\n\n<h3 id=\"결론-1\">결론</h3>\n<ul>\n  <li>User Dictionary 도입을 고려했으나 유지보수에 대한 한계로 제외</li>\n  <li>Wildcard 필드와 쿼리로 검색어가 포함된 품목의 점수를 높임</li>\n</ul>\n\n<h2 id=\"3-초성-검색-feat-icu\">3) 초성 검색 feat. ICU</h2>\n<p>Wildcard 검색까지 구현하고 나니 검색 되지 않는 품목 없이 꽤 안정화된 검색 결과를 제공할 수 있었는데요. 더 편리한 검색을 위한 초성 검색 니즈가 들어 왔습니다.</p>\n\n<h3 id=\"어떤-extension-을-사용할-것인가\">어떤 extension 을 사용할 것인가</h3>\n<p>초성검색을 위해 지금 시스템에 도입할 수 있고, 적당한 레퍼런스가 있는 두가지 extension으로 POC 를 진행해봤어요.</p>\n<ol>\n  <li><a href=\"https://github.com/netcrazy/elasticsearch-jaso-analyzer\">elasticsearch-jaso-analyzer</a>(이하 JASO)</li>\n  <li><a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-icu.html\">analysis-icu</a>(이하 ICU)</li>\n</ol>\n\n<p>결론적으로 ICU 를 선택했는데요, JASO 에 대한 설명이 너무 길어질거 같아 자세한 설정 방법과 설명은 위 주소에서 참고주시길 바랍니다.\n두 분석기를 비교한 결과는 아래 표로 정리되었습니다.</p>\n\n<p><img src=\"/images/es-dev/es3-1.png\" alt=\"jaso-icu-analyzer\" /></p>\n<ol>\n  <li>개발 난이도\n    <ul>\n      <li>JASO: <code class=\"language-plaintext highlighter-rouge\">\"chosung\"</code> 옵션만 추가하면 간단히 초성 검색이 가능</li>\n      <li>ICU: 직접 초성 필터를 구현해야 하는 추가 작업 필요</li>\n    </ul>\n  </li>\n  <li>유지보수 및 확장성\n    <ul>\n      <li>JASO: 커스텀 확장(extension)으로 기본 제공되지 않기 때문에, 사용하는 ES 버전과 플랜에 따라 제약이 있을 수 있음</li>\n      <li>ICU: 기본 확장(extension)으로 계속 지원되며, 다른 기능으로의 확장이 자유로움</li>\n    </ul>\n  </li>\n  <li>버전 지원\n    <ul>\n      <li>JASO: Elasticsearch 8.6.2까지만 지원. 이후 버전은 직접 설정 필요</li>\n      <li>ICU: 최신 버전까지 지원</li>\n    </ul>\n  </li>\n  <li>토큰 생성 방식\n    <ul>\n      <li>JASO: 영어 오타 교정, 쌍자음 분리 등 추가 기능 지원</li>\n      <li>ICU: 필요에 따라 초성 검색뿐만 아니라 다양한 확장 가능</li>\n    </ul>\n  </li>\n</ol>\n\n<p>JASO 가 더 많은 옵션을 제공한다는 이점이 있지만 불필요한 토큰이 생성되고 큰 <code class=\"language-plaintext highlighter-rouge\">max_gram</code>을 주어 토큰을 많이 생성해야 된다는 점,\n유지보수를 직접 해야된다는 점에서 ICU extension 을 직접 확장하여 사용하기로 하였습니다.</p>\n\n<h3 id=\"icu-analyzer\">ICU Analyzer</h3>\n<p>그럼, ICU analyzer 의 설정을 좀더 자세히 살펴보겠습니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"orderable_vendor_product_v4\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"nl\">\"aliases\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"orderable_vendor_product\"</span><span class=\"p\">:{}</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"nl\">\"mappings\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"properties\"</span><span class=\"p\">:{</span><span class=\"w\">\n                </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n                </span><span class=\"nl\">\"name\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"fields\"</span><span class=\"p\">:{</span><span class=\"w\">\n                        </span><span class=\"nl\">\"icu\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"text\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:</span><span class=\"s2\">\"icu_analyzer\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"search_analyzer\"</span><span class=\"p\">:</span><span class=\"s2\">\"icu_search_analyzer\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"similarity\"</span><span class=\"p\">:</span><span class=\"s2\">\"scripted_no_idf\"</span><span class=\"w\">\n                        </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"p\">}</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nl\">\"template\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"nl\">\"settings\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"index\"</span><span class=\"p\">:{</span><span class=\"w\">\n                </span><span class=\"nl\">\"analysis\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n                        </span><span class=\"nl\">\"ngram_filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"ngram\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"min_gram\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"max_gram\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"token_chars\"</span><span class=\"p\">:[</span><span class=\"w\">\n                                </span><span class=\"s2\">\"letter\"</span><span class=\"p\">,</span><span class=\"w\">\n                                </span><span class=\"s2\">\"digit\"</span><span class=\"w\">\n                            </span><span class=\"p\">]</span><span class=\"w\">\n                        </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"p\">},</span><span class=\"w\">\n                    </span><span class=\"nl\">\"analyzer\"</span><span class=\"p\">:{</span><span class=\"w\">\n                        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n                        </span><span class=\"nl\">\"icu_analyzer\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"custom\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                                </span><span class=\"s2\">\"lowercase\"</span><span class=\"p\">,</span><span class=\"w\">\n                                </span><span class=\"s2\">\"ngram_filter\"</span><span class=\"w\">\n                            </span><span class=\"p\">],</span><span class=\"w\">\n                            </span><span class=\"nl\">\"char_filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                                </span><span class=\"s2\">\"nfd_normalizer\"</span><span class=\"p\">,</span><span class=\"w\">\n                                </span><span class=\"s2\">\"make_chosung_filter\"</span><span class=\"w\">\n                            </span><span class=\"p\">],</span><span class=\"w\">\n                            </span><span class=\"nl\">\"tokenizer\"</span><span class=\"p\">:</span><span class=\"s2\">\"icu_tokenizer\"</span><span class=\"w\">\n                        </span><span class=\"p\">},</span><span class=\"w\">\n                        </span><span class=\"nl\">\"icu_search_analyzer\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"custom\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                                </span><span class=\"s2\">\"lowercase\"</span><span class=\"p\">,</span><span class=\"w\">\n                                </span><span class=\"s2\">\"ngram_filter\"</span><span class=\"w\">\n                            </span><span class=\"p\">],</span><span class=\"w\">\n                            </span><span class=\"nl\">\"char_filter\"</span><span class=\"p\">:[</span><span class=\"w\">\n                                </span><span class=\"s2\">\"chosung_only_filter\"</span><span class=\"p\">,</span><span class=\"w\">\n                                </span><span class=\"s2\">\"nfd_normalizer\"</span><span class=\"w\">\n                            </span><span class=\"p\">],</span><span class=\"w\">\n                            </span><span class=\"nl\">\"tokenizer\"</span><span class=\"p\">:</span><span class=\"s2\">\"icu_tokenizer\"</span><span class=\"w\">\n                        </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"p\">},</span><span class=\"w\">\n                    </span><span class=\"nl\">\"char_filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                        </span><span class=\"nl\">\"nfd_normalizer\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"mode\"</span><span class=\"p\">:</span><span class=\"s2\">\"decompose\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"nfkc\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"icu_normalizer\"</span><span class=\"w\">\n                        </span><span class=\"p\">},</span><span class=\"w\">\n                        </span><span class=\"nl\">\"make_chosung_filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"pattern_replace\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"pattern\"</span><span class=\"p\">:</span><span class=\"s2\">\"[^</span><span class=\"se\">\\u</span><span class=\"s2\">1100-</span><span class=\"se\">\\u</span><span class=\"s2\">1112^0-9a-zA-Z가-힣ㄱ-ㅎ ㅏ-ㅑ]\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"replacement\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span><span class=\"w\">\n                        </span><span class=\"p\">},</span><span class=\"w\">\n                        </span><span class=\"nl\">\"chosung_only_filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                            </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"pattern_replace\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"pattern\"</span><span class=\"p\">:</span><span class=\"s2\">\"[^ㄱ-ㅎa-zA-Z0-9]\"</span><span class=\"p\">,</span><span class=\"w\">\n                            </span><span class=\"nl\">\"replacement\"</span><span class=\"p\">:</span><span class=\"s2\">\"\"</span><span class=\"w\">\n                        </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"err\">//..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\"> </span><span class=\"err\">Tokenizer</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>위 analzyer 를 그림으로 나타내면 아래와 같습니다.</p>\n\n<p><img src=\"/images/es-dev/es3-2.png\" alt=\"icu-analzyer\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">icu</code> field 를 보시면 <code class=\"language-plaintext highlighter-rouge\">analyzer</code> 와 <code class=\"language-plaintext highlighter-rouge\">search_analyzer</code> 를 구분해서 설정해준걸 보실 수 있는데요.</p>\n<ul>\n  <li>Analyzer : 저장되는 document 에 대해서 토큰화하여 그림과 같이 역색인화 구조로 저장합니다.</li>\n  <li>Search Analyzer : 검색어에 대해서 토큰화를 수행해서 저장되어 있는 토큰을 검색해서 결과를 내는 역할을 합니다.</li>\n</ul>\n\n<p>기존엔 Analyzer 와 Search Analyzer 를 구분해서 지정해줄 필요가 없었지만 초성 검색의 경우엔 초성으로 검색 했을 때만 초성 검색이 되길 바랬었는데요.\n예를 들어 초성이 아닌 <code class=\"language-plaintext highlighter-rouge\">통베이컨</code>을 Analyzer 로 검색했을 경우, <code class=\"language-plaintext highlighter-rouge\">ㅌㅂㅇㅋ</code> 으로 초성화 될 것이고 사용자가 초성 검색을 하지 않았는데도 초성을 포함하는 품목이 많이 나오게 될 것 입니다. \n그래서 최대한 기존의 쿼리 score 에는 영향이 가지 않고 초성 검색을 했을때만 초성으로 품목을 찾기 위해서 초성을 제외한 글자는 모두 제거하는 필터를 넣는 Search Analyzer 를 따로 지정해주었습니다.\n즉, <code class=\"language-plaintext highlighter-rouge\">통베이컨</code>이 Search Analyzer 를 거치게 되면 아무 토큰도 생성되지 않게 되어 초성 검색에 대해서는 수행이 되지 않게 되는거죠.</p>\n\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-icu-normalization-charfilter.html\">ICU_Normalizer</a> 에 대한 설정은 문서를 보시면 더 자세히 볼 수 있을거예요.\n요약하자면 유니코드의 정규화(Normalization)를 수행하는 역할을 합니다.</p>\n\n<p>저희는 <code class=\"language-plaintext highlighter-rouge\">decompose</code> 옵션을 사용하여 <code class=\"language-plaintext highlighter-rouge\">통</code>이라는 글자를 <code class=\"language-plaintext highlighter-rouge\">ㅌㅗㅇ</code> 으로 문자를 분해할 수 있도록 했고, <code class=\"language-plaintext highlighter-rouge\">NFKC(Normalization Form Compatibility Composition)</code> 옵션을 사용하여 호환가능한 문자를 호환시키고, 조합 가능한 문자는 조합하도록 설정하였습니다.\n즉, <code class=\"language-plaintext highlighter-rouge\">통베이컨™①é</code>를 정규화하면 <code class=\"language-plaintext highlighter-rouge\">ㅌㅗㅇㅂㅔㅇㅣㅋㅓㄴTM1é</code>로 정규화 됩니다. \n초성검색 구현을 위해선 정규화 방식보다는 초성 분리를 위한 mode 를 잘 설정하는게 더 핵심이라고 할 수 있을거예요.</p>\n\n<p>요약하면 품목을 ICU Normalizer 를 활용하여 초성 토큰 형태로 저장하고, 초성 검색어에 대해서만 초성 검색을 수행할 수 있도록 Search Analyzer 를 구분하여 구현해주었습니다.</p>\n\n<p>ICU 는 JASO와 비교했을 때 초기 구현은 다소 복잡했지만, 유지보수와 추후 확장성 측면에서 더 적합한 선택이었으면 합니다!! (Extension 교체 작업만은 다시 하고 싶지 않아요..)</p>\n\n<h3 id=\"idf-제외\">IDF 제외</h3>\n<p>이제 마지막 개선 작업이네요.\n잘 운영하고 있던 중 아래와 같은 의견이 들어왔습니다.</p>\n\n<h3 id=\"이슈-및-원인-분석-2\">이슈 및 원인 분석</h3>\n<p><img src=\"/images/es-dev/es4-1.png\" alt=\"es-sweetcorn\" /></p>\n\n<p>사용자가 스위트콘을 검색하려 했으나 스위트곤으로 오타가 발생한 경우, 기대했던 스위트콘이 아닌 곤약이 상위에 노출되는 문제가 있었습니다.\n일반적으로 사용자가 기대하는 결과와는 다른 결과였죠.</p>\n\n<p>다행히도 로컬 테스트 환경에서 원인 분석을 해볼 수 있었는데요, 그런데 조금 충격적이게도 로컬에선 스위트콘이 더 상위노출 되었습니다. 이럴수가..</p>\n\n<p>그렇다는 것은 로컬 테스트코드와 실제 환경의 검색 결과가 다르다는 것이고, 지금까지의 테스트가 유효한게 맞을까.. 하는 생각이 들었는데요.\n<img src=\"/images/es-dev/es4-2.jpeg\" alt=\"es5\" /></p>\n\n<p>더 자세한 원인을 파악하기 위해 ES의 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html\">explain</a> API를 사용해 점수 산출 과정을 분석했습니다.</p>\n\n<p>결과를 요약하자면 아래와 같은데요.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">#곤약/면곤약</code>\n    <ul>\n      <li>N-gram Boost : 8.8</li>\n      <li><strong>IDF: 6.05</strong></li>\n      <li>TF: 0.78</li>\n      <li>8.8 * 6.05 * 0.78 = <strong>41.66</strong></li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">스위트콘/리치스/2.95kg</code>\n    <ul>\n      <li>N-gram Boost : 8.8</li>\n      <li><strong>IDF : 3.14</strong></li>\n      <li>TF : 0.81696963</li>\n      <li>8.8 * 3.14 * 0.81696963 = <strong>22.568493</strong></li>\n    </ul>\n  </li>\n</ul>\n\n<p>ES 에서 Boost * IDF * TF 계산 로직을 통해 score 를 산출하고 있었습니다. 곤약이 상위로 올라온 이유는 숫자를 보면 알수있듯 두배 가까이 차이나는 IDF 때문인 것을 파악할 수 있었는데요.</p>\n\n<p>우선 처음 보는 개념인 IDF 와 TF 가 무엇인지 알아보았습니다.</p>\n\n<ul>\n  <li>IDF(Inverse Document Frequency): 특정 단어가 <strong>전체 문서</strong>에서 얼마나 드물게 나타나는지</li>\n  <li>TF(Term Frequency): 특정 단어가 문서 내에서 얼마나 자주 나타나는지</li>\n</ul>\n\n<p>IDF 는 전체 문서를 기준으로 계산되기 때문에 테스트코드와 실제 환경의 결과가 다른 이유가 여기에 있었습니다.\n테스트코드의 테스트를 위해 생성해놓은 문서는 상대적으로 너무나도 적은 양의 데이터이기 때문에 IDF 의 값이 대부분 동일하고 TF 값으로 대부분 유사도가 정해질거예요.\n반면, 테스트코드에 비해 방대한 품목 데이터가 있는 실제 환경에선 곤약과 스위트콘처럼 IDF 의 차이가 클 수 있습니다.</p>\n\n<p>IDF 가 유의미한 결과를 내주기 위해서는 전체 문서가 모두 한 유통사의 품목으로, 품목명의 구조나 맥락이 동일해야 할 것 같은데요.\n하지만 유통사마다 품목명이 모두 제각각인데도 IDF가 모든 유통사의 데이터를 포함한 전체 품목 데이터를 기준으로 계산되면서 오히려 유사도 계산에 역효과를 내고 있었습니다.\n또한, 실제환경과 로컬 환경에서의 테스트 결과가 보장되지 않아 문제 재현 및 원인 파악이 어려워보였습니다.</p>\n\n<p>따라서, <strong>IDF 를 제외</strong>하고 score 계산하는 방법을 알아봤습니다.</p>\n\n<p>IDF를 제외한 점수 계산을 위해 크게 세 가지 방법을 검토해봤습니다.</p>\n\n<h3 id=\"1-점수-고정-constant-score\">1. 점수 고정 (Constant Score)</h3>\n\n<p>첫번째 방법은 아래와 같이 쿼리에 <code class=\"language-plaintext highlighter-rouge\">boost</code> 값을 명시하여 점수를 고정 시키는 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html\">Constant Score Query</a> 를 활용한 방법입니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"query\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"bool\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"must\"</span><span class=\"p\">:[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"bool\"</span><span class=\"p\">:{</span><span class=\"w\">\n            </span><span class=\"nl\">\"should\"</span><span class=\"p\">:[</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"constant_score\"</span><span class=\"p\">:{</span><span class=\"w\">\n                  </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"wildcard\"</span><span class=\"p\">:{</span><span class=\"w\">\n                      </span><span class=\"nl\">\"name.wildcard\"</span><span class=\"p\">:{</span><span class=\"w\">\n                        </span><span class=\"nl\">\"wildcard\"</span><span class=\"p\">:</span><span class=\"s2\">\"*스위트곤*\"</span><span class=\"w\">\n                      </span><span class=\"p\">}</span><span class=\"w\">\n                    </span><span class=\"p\">}</span><span class=\"w\">\n                  </span><span class=\"p\">},</span><span class=\"w\">\n                  </span><span class=\"nl\">\"boost\"</span><span class=\"p\">:</span><span class=\"mf\">100.0</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"p\">},</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"constant_score\"</span><span class=\"p\">:{</span><span class=\"w\">\n                  </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"match\"</span><span class=\"p\">:{</span><span class=\"w\">\n                      </span><span class=\"nl\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"스위트곤\"</span><span class=\"w\">\n                    </span><span class=\"p\">}</span><span class=\"w\">\n                  </span><span class=\"p\">},</span><span class=\"w\">\n                  </span><span class=\"nl\">\"boost\"</span><span class=\"p\">:</span><span class=\"mf\">3.0</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"p\">},</span><span class=\"w\">\n              </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"nl\">\"constant_score\"</span><span class=\"p\">:{</span><span class=\"w\">\n                  </span><span class=\"nl\">\"filter\"</span><span class=\"p\">:{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"match\"</span><span class=\"p\">:{</span><span class=\"w\">\n                      </span><span class=\"nl\">\"name.ngram\"</span><span class=\"p\">:</span><span class=\"s2\">\"스위트곤\"</span><span class=\"w\">\n                    </span><span class=\"p\">}</span><span class=\"w\">\n                  </span><span class=\"p\">},</span><span class=\"w\">\n                  </span><span class=\"nl\">\"boost\"</span><span class=\"p\">:</span><span class=\"mf\">4.0</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"p\">}</span><span class=\"w\">\n              </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n          </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n<p>결과를 봤을 때, Boost 만으로 Scoring 되기 때문에 같은 필드에서 검색된 품목은 동일한 점수를 가지는 것을 확인했습니다. \n예를 들어 <code class=\"language-plaintext highlighter-rouge\">name.ngram</code> 로 검색된 품목들은 모두 Boost 4 인 동일한 점수로 정렬이 제대로 되지 않았습니다.</p>\n\n<p>결론적으로, 이 방식은 유사도 기반 정렬이 필요한 우리의 요구사항에 적합하지 않았습니다.</p>\n\n<h3 id=\"2-유사도-모델-변경\">2. 유사도 모델 변경</h3>\n<p>기본적으로 ES는 <code class=\"language-plaintext highlighter-rouge\">Boost * IDF * TF</code> 식을 사용하는 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-similarity.html#bm25\">BM25(Best Matching 25)</a> 모델을 사용합니다. 이를 대신해 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-similarity.html#dfr\">DFR(Deviation From Randomness)</a> 모델을 사용해 보았습니다.\nDFR 은 현 document에 얼마나 드물게 등장하는지, 문서 길이에 따라 통계적 랜덤성 기반으로 검색됩니다. type 뿐만 아니라 아래처럼 옵션에 가중치나 옵션을 설정해줄수있습니다.\n아래는 DFR 모델 설정 예시입니다.</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"settings\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"similarity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"custom_similarity\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"DFR\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"basic_model\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">문서</span><span class=\"w\"> </span><span class=\"err\">내에</span><span class=\"w\"> </span><span class=\"err\">특정</span><span class=\"w\"> </span><span class=\"err\">용어가</span><span class=\"w\"> </span><span class=\"err\">얼마나</span><span class=\"w\"> </span><span class=\"err\">드물게</span><span class=\"w\"> </span><span class=\"err\">발생하는지</span><span class=\"w\">\n        </span><span class=\"nl\">\"after_effect\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">검색어가</span><span class=\"w\"> </span><span class=\"err\">얼마나</span><span class=\"w\"> </span><span class=\"err\">여러번</span><span class=\"w\"> </span><span class=\"err\">등장하는지</span><span class=\"w\">\n        </span><span class=\"nl\">\"normalization\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"h2\"</span><span class=\"w\"> </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">문서</span><span class=\"w\"> </span><span class=\"err\">길이에</span><span class=\"w\"> </span><span class=\"err\">따라</span><span class=\"w\"> </span><span class=\"err\">빈도</span><span class=\"w\"> </span><span class=\"err\">설정</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>보시다시피 DFR 모델에 대한 지식이 없으면 유지보수가 무척 어려워보입니다.\n문제가 생기거나 개선의 여지가 생겼을 때 더 복잡한 계산식을 사용하는 모델이기 때문에 쉽게 커스텀하기가 힘들어보이고, 모델의 대한 이해뿐만 아니라 옵션에 대한 각 알고리즘도 알아야하기 때문에 유지보수가 정말 쉽지 않을거라 생각이 들었죠.</p>\n\n<p>우리 팀에 검색 엔진에 대한 전문적인 지식을 가진 분이 없었기 때문에 더 복잡한 모델로 변경하는건 과감하게 제외했습니다.</p>\n\n<h3 id=\"3-scripted-similarity-사용\">3. Scripted Similarity 사용</h3>\n\n<p>IDF를 제외하고 직접 계산식을 정의하는 방법입니다. 아래는 Scripted Similarity 설정 예시입니다.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"setting\"</span><span class=\"p\">:{</span><span class=\"w\">\n    </span><span class=\"nl\">\"similarity\"</span><span class=\"p\">:{</span><span class=\"w\">\n      </span><span class=\"nl\">\"scripted_no_idf\"</span><span class=\"p\">:{</span><span class=\"w\">\n        </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"s2\">\"scripted\"</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nl\">\"script\"</span><span class=\"p\">:{</span><span class=\"w\">\n          </span><span class=\"nl\">\"source\"</span><span class=\"p\">:</span><span class=\"s2\">\"double tf = Math.sqrt(doc.freq); return query.boost * tf;\"</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>위처럼 setting 을 변경하고 쿼리의 explain 을 해보면 script 에 있는 식이 아래와 같이 <code class=\"language-plaintext highlighter-rouge\">idOrCode</code>에 들어가 scoring 되는것을 볼 수 있어요.</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">Explain</span><span class=\"w\"> </span><span class=\"err\">결과</span><span class=\"w\">\n</span><span class=\"p\">{</span><span class=\"w\">   \n    </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n    </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"sum of:\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"details\"</span><span class=\"p\">:[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nl\">\"details\"</span><span class=\"p\">:[</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"score from ScriptedSimilarity(weightScript=[null], script=[Script{type=inline, lang='painless', idOrCode='double tf = Math.sqrt(doc.freq); return query.boost * tf;', options={}, params={}}]) computed from:\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nl\">\"details\"</span><span class=\"p\">:[</span><span class=\"w\">\n                        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n                    </span><span class=\"p\">],</span><span class=\"w\">\n                    </span><span class=\"nl\">\"value\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"err\">//</span><span class=\"w\"> </span><span class=\"err\">..</span><span class=\"w\"> </span><span class=\"err\">생략</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span></code></pre></div></div>\n\n<p>위 세가지 방법 중 가장 마지막 방법인 Scripted Similarity 로 계산식을 넣기로 했어요. Scripted Similarity 를 선택한 이유는 다음과 같습니다.</p>\n\n<ol>\n  <li>유연한 계산식 사용\n    <ul>\n      <li>계산식을 직접 조정 가능</li>\n      <li>기존 BM25 모델에서 IDF만 제거할 수 있는 계산식을 직접 부여 가능</li>\n    </ul>\n  </li>\n  <li>유지보수 용이성\n    <ul>\n      <li>계산식이 명확히 노출되어 있어 비교적 수정이 간단</li>\n    </ul>\n  </li>\n  <li>쿼리와 독립적\n    <ul>\n      <li>점수 계산이 쿼리와 독립적으로 이루어져 다른 쿼리 추가 시에도 영향을 받지 않음</li>\n    </ul>\n  </li>\n</ol>\n\n<h3 id=\"scripted-similarity-계산식-결정\">Scripted Similarity 계산식 결정</h3>\n\n<p>그후에는 Scripted Similarity 에 적용할 계산식 결정이 필요했습니다.</p>\n\n<p><strong>후보 1. 단순한 TF 계산식</strong></p>\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">double</span> <span class=\"n\">tf</span> <span class=\"p\">=</span> <span class=\"nc\">Math</span><span class=\"p\">.</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">freq</span><span class=\"p\">);</span>\n<span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">boost</span> <span class=\"p\">*</span> <span class=\"n\">tf</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* freq : 문서 내의 토큰 등장 수 */</span>\n</code></pre></div></div>\n\n<p><strong>후보 2. BM 모델과 동일한 TF 계산식</strong></p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">double</span> <span class=\"n\">freq</span> <span class=\"p\">=</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">freq</span><span class=\"p\">;</span>\n<span class=\"n\">double</span> <span class=\"n\">k1</span> <span class=\"p\">=</span> <span class=\"mf\">1.2</span><span class=\"p\">;</span>\n<span class=\"n\">double</span> <span class=\"n\">b</span> <span class=\"p\">=</span> <span class=\"mf\">0.75</span><span class=\"p\">;</span>\n<span class=\"n\">double</span> <span class=\"n\">dl</span> <span class=\"p\">=</span> <span class=\"n\">doc</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span>\n<span class=\"n\">double</span> <span class=\"n\">avgdl</span> <span class=\"p\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n<span class=\"n\">double</span> <span class=\"n\">tf</span> <span class=\"p\">=</span> <span class=\"n\">freq</span> <span class=\"p\">/</span> <span class=\"p\">(</span><span class=\"n\">freq</span> <span class=\"p\">+</span> <span class=\"n\">k1</span> <span class=\"p\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"p\">-</span> <span class=\"n\">b</span> <span class=\"p\">+</span> <span class=\"n\">b</span> <span class=\"p\">*</span> <span class=\"n\">dl</span> <span class=\"p\">/</span> <span class=\"n\">avgdl</span><span class=\"p\">));</span>\n<span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">.</span><span class=\"n\">boost</span> <span class=\"p\">*</span> <span class=\"n\">tf</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/*\n    freq : 문서 내의 토큰 등장 수\n    k1: TF 영향도 가중치\n    b : 문서 길이 보정 파라미터\n    dl : 문서 길이\n    avgdl : 전체 문서의 문서 길이 평균값\n */</span>\n</code></pre></div></div>\n\n<p><img src=\"/images/es-dev/es4-3.png\" alt=\"idf\" />\n<img src=\"/images/es-dev/es4-4.png\" alt=\"idf\" />\n결과만 보았을 때 확실히 IDF 를 포함했을 때보다 IDF 를 제외했을 때 결과가 개선되긴 했지만, 여전히 단순 TF 계산식, BM 모델 계산식의 결과는 크게 차이가 없었습니다.</p>\n\n<p>하지만 위 결과의 정렬은 비슷한듯 하지만 실제 점수는 다릅니다. 단순 TF 의 경우 문서 내의 토큰 등장 수로만 TF 를 계산하기 때문에 동일한 점수를 가진 결과가 다수 나타나 매번 정렬이 달라질 수 있습니다.\n<code class=\"language-plaintext highlighter-rouge\">국산쌀</code>와 <code class=\"language-plaintext highlighter-rouge\">찰떡(쌀 국산)</code>는 단순 TF 계산식에 의하면 둘은 동일한 점수를 반환하게 됩니다.\n반면 BM 모델과 동일한 TF 계산식의 경우, 문서 내 토큰 등장 수와 문서 길이를 함께 고려하기 때문에 저희가 흔히 생각한대로 <code class=\"language-plaintext highlighter-rouge\">국산쌀</code>의 유사도가 더 높은 결과로 나오게 됩니다.</p>\n\n<p>따라서, BM 모델에서 IDF 만 제거한, 후보2 계산식을 사용하기로 결정하였습니다.</p>\n\n<p>다만, <code class=\"language-plaintext highlighter-rouge\">avgdl</code> 를 현재의 기준으로 7로 고정시켜 가중치를 조정했지만 이후 문서의 평균 길이가 변경될 경우엔 유지보수가 필요한 부분이 있을 수 있습니다.\n하지만 <code class=\"language-plaintext highlighter-rouge\">avgdl</code> 가 크게 변하지 않을 것이라는 가정과 점수 계산에 크게 영향을 주지 않는다고 생각해 고정된 계산식으로 가게 되었습니다.</p>\n\n<p>그럼에도 이후에 유지보수가 필요하거나 변경이 필요할 수 있습니다. 꽤 해석이 필요한 계산식을 가지고 있기 때문에\n어떤 계기로 IDF를 제거하게 되었는지, Scripted Similarity 를 왜 적용하게 되었는지, 계산식은 어떻게 결정되었고 어떤 의미인지를 자세히 문서화하도록 노력하였습니다.</p>\n\n<h2 id=\"결과\">결과</h2>\n<p>결과적으로, 아래와 같은 구조를 갖게 되었습니다.</p>\n\n<p><img src=\"/images/es-dev/es5-1.png\" alt=\"final\" /></p>\n\n<p>이러한 구조를 통해 현재 검색 정확도는 어떨까요?</p>\n\n<p>아래는 매장 사이드 관련 데이터입니다.</p>\n<ul>\n  <li>2025년 1월 기준\n    <ul>\n      <li>검색 결과 성공률: 검색 시 하나 이상의 품목이 결과에 노출되는 경우 → <strong>98.6%</strong></li>\n      <li>검색 목적 달성률: 검색한 품목을 선택한 후, 실제 액션(주문 등)을 수행하는 경우 → <strong>73.6%</strong></li>\n    </ul>\n  </li>\n</ul>\n\n<p>이를 통해 상당히 높은 검색 정확도와 달성률을 기록하고 있음을 확인할 수 있습니다.</p>\n\n<p>또한, 아래는 유통사에서 매장의 주문서를 생성할 때, ES 검색이 매우 편리했다는 피드백을 받은 메시지입니다.\n키친보드의 검색 기능이 타 ERP와 달리 오타가 있어도 품목을 정확하게 검색할 수 있어 큰 편리함을 느꼈다고 합니다!</p>\n\n<p><img src=\"/images/es-dev/es5-2.png\" alt=\"final\" />\n<img src=\"/images/es-dev/es5-3.png\" alt=\"final\" /></p>\n\n<p>개발 과정에서 어려움이 있었지만 결국 사용자한테 좋은 영향을 주는 기능을 개발한거 같아 아주 뿌듯하네요!</p>\n\n<h1 id=\"소소한-tip\">소소한 Tip</h1>\n<h2 id=\"중단-시간을-줄인-reindexing\">중단 시간을 줄인 Reindexing</h2>\n<p>ES 의 비용을 최소화하기 위해서 최소한의 리소스로 구동하고 있습니다. 그러다보니 인덱스에 새로운 필드가 추가되거나 설정이 변경되는 개선이 될때마다 인덱스를 새롭게 동기화해야하기 때문에 중단이 불가피했는데요.\n하지만 주문에서의 검색은 점주들이 꼭 해야만하는 중요한 기능이기 때문에 중단을 최소화하고 싶었습니다.</p>\n\n<p>알아보던 중 찾아낸 것은 별칭(Alias)를 이용한 배포입니다.</p>\n\n<p><img src=\"/images/es-dev/es6-1.png\" alt=\"final\" /></p>\n\n<ol>\n  <li><code class=\"language-plaintext highlighter-rouge\">Old Index Template</code> 을 템플릿으로 하여 생성된 <code class=\"language-plaintext highlighter-rouge\">Old Index</code>(별칭: <code class=\"language-plaintext highlighter-rouge\">Product</code>) 가 존재한다.</li>\n  <li>새로운 매핑 정보가 있는 <code class=\"language-plaintext highlighter-rouge\">New Index Template</code> 을 생성한다.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">New Index Template</code> 을 템플릿으로 하여 <code class=\"language-plaintext highlighter-rouge\">New Index</code> 를 생성한다.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Old Index</code> 의 문서를 <code class=\"language-plaintext highlighter-rouge\">New Index</code> 로 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html\">reindex</a> 한다.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Old Index</code> 를 삭제한다.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">New Index</code> 에 <code class=\"language-plaintext highlighter-rouge\">Product</code> alias 를 부여 한다.</li>\n  <li>서버에서 alias 기준으로 쿼리한다.</li>\n</ol>\n\n<p>이렇게 되면 5번과 6번 사이, <code class=\"language-plaintext highlighter-rouge\">Product</code> 를 가진 인덱스가 존재하지 않을 시에만 검색 중단이 발생하게 됩니다.\n이 방법이 가장 좋은 방법이라고 표현하기는 어렵지만 기존 20만개의 품목을 마이그레이션 하느라 10분이 넘는 중단 시간을 3초 정도의 중단 시간으로 낮출 수 있는 방법이었습니다.</p>\n\n<h2 id=\"대량-데이터-조회\">대량 데이터 조회</h2>\n<p>DB 의 품목 데이터와 ES 인덱스 동기화를 위해 하루에 한번씩 스케줄러가 실행됩니다.</p>\n\n<p>DB 품목 데이터가 삭제될 때 ES 데이터도 삭제되어야 하는데 어떠한 이유로 삭제되지 않는 경우가 있었습니다. 즉, 품목이 DB 데이터엔 없지만 ES 데이터에는 있는 경우죠.<br />\n스케줄러에서 전체 ES 인덱스 문서를 조회하고 DB 에 없으면 문서를 삭제해서 동기화해주려고 해요.</p>\n\n<p>다만 전체 문서를 조회하는 과정의 부하가 많이 걱정되긴 했는데요. 그래서 처음엔 페이징을 활용했습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"k\">fun</span> <span class=\"nf\">deleteOrphanDocuments</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">pageSize</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span>\n\n    <span class=\"kd\">var</span> <span class=\"py\">pageable</span> <span class=\"p\">=</span> <span class=\"nc\">PageRequest</span><span class=\"p\">.</span><span class=\"nf\">of</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"p\">,</span> <span class=\"nc\">Sort</span><span class=\"p\">.</span><span class=\"k\">by</span><span class=\"p\">(</span><span class=\"nc\">Sort</span><span class=\"p\">.</span><span class=\"nc\">Order</span><span class=\"p\">.</span><span class=\"nf\">asc</span><span class=\"p\">(</span><span class=\"s\">\"id.keyword\"</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">do</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">indexPage</span> <span class=\"p\">=</span> <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">findAll</span><span class=\"p\">(</span><span class=\"n\">pageable</span><span class=\"p\">)</span>\n        <span class=\"kd\">val</span> <span class=\"py\">documentProductIds</span> <span class=\"p\">=</span> <span class=\"n\">indexPage</span><span class=\"p\">.</span><span class=\"n\">content</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n\n        <span class=\"kd\">val</span> <span class=\"py\">dbProductIds</span> <span class=\"p\">=</span> <span class=\"n\">productRepository</span><span class=\"p\">.</span><span class=\"nf\">findAllById</span><span class=\"p\">(</span><span class=\"n\">documentProductIds</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n\n        <span class=\"kd\">val</span> <span class=\"py\">documentIdsNotInDB</span> <span class=\"p\">=</span> <span class=\"n\">documentProductIds</span> <span class=\"p\">-</span> <span class=\"n\">dbProductIds</span>\n        <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">deleteAllById</span><span class=\"p\">(</span><span class=\"n\">documentIdsNotInDB</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pageable</span> <span class=\"p\">=</span> <span class=\"n\">pageable</span><span class=\"p\">.</span><span class=\"nf\">next</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span> <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">indexPage</span><span class=\"p\">.</span><span class=\"nf\">hasNext</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p><img src=\"/images/es-dev/es6-2.png\" alt=\"page-query\" /></p>\n\n<p>ES야.. 죽지마.. 테스트서버에서 확인해보니 동기화 할 때마다 자꾸 ES 서버가 다운되더라고요..\n페이징보다 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/scroll-api.html\">Scroll</a> API 를 이용하는 것이 훨씬 성능상 좋다고 하여서 Scroll API 를 적용해봤습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fun</span> <span class=\"nf\">deleteOrphanDocuments</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">toDeleteProductIds</span> <span class=\"p\">=</span> <span class=\"n\">mutableListOf</span><span class=\"p\">&lt;</span><span class=\"nc\">UUID</span><span class=\"p\">&gt;()</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">batchSize</span> <span class=\"p\">=</span> <span class=\"mi\">1000</span>\n\n    <span class=\"kd\">var</span> <span class=\"py\">documentIdsWithScroll</span> <span class=\"p\">=</span> <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">findAllIdWithScroll</span><span class=\"p\">(</span><span class=\"n\">size</span> <span class=\"p\">=</span> <span class=\"n\">batchSize</span><span class=\"p\">)</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">documentIdsWithScroll</span><span class=\"p\">.</span><span class=\"n\">productDocumentIds</span><span class=\"p\">.</span><span class=\"nf\">isNotEmpty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">documentIds</span> <span class=\"p\">=</span> <span class=\"n\">documentIdsWithScroll</span><span class=\"p\">.</span><span class=\"n\">productDocumentIds</span>\n        <span class=\"kd\">val</span> <span class=\"py\">dbProductIds</span> <span class=\"p\">=</span> <span class=\"n\">productRepository</span><span class=\"p\">.</span><span class=\"nf\">findAllById</span><span class=\"p\">(</span><span class=\"n\">documentIds</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n\n        <span class=\"n\">toDeleteProductIds</span><span class=\"p\">.</span><span class=\"nf\">addAll</span><span class=\"p\">(</span><span class=\"n\">documentIds</span> <span class=\"p\">-</span> <span class=\"n\">dbProductIds</span><span class=\"p\">)</span>\n\n        <span class=\"n\">documentIdsWithScroll</span> <span class=\"p\">=</span>\n            <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">findAllIdByScrollId</span><span class=\"p\">(</span>\n                <span class=\"n\">scrollId</span> <span class=\"p\">=</span> <span class=\"n\">documentIdsWithScroll</span><span class=\"p\">.</span><span class=\"n\">nextScrollId</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">clearScroll</span><span class=\"p\">(</span><span class=\"n\">documentIdsWithScroll</span><span class=\"p\">.</span><span class=\"n\">nextScrollId</span><span class=\"p\">)</span>\n\n    <span class=\"n\">productIndexRepository</span><span class=\"p\">.</span><span class=\"nf\">deleteAllById</span><span class=\"p\">(</span><span class=\"n\">toDeleteProductIds</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>ES 에서 Scroll 을 생성할 때 설정한 시간만큼 Scroll 정보를 저장하고 있고 해당 Scroll ID 를 가지고 다음 데이터를 처리단위만큼 반환해줍니다. \n받은 데이터엔 또 다음 Scroll 조회를 위한 Scroll ID 를 반환하는 형식입니다.</p>\n\n<p>장점은 페이징 조회보다 계산과 조회가 빠르고 부하가 적은 것인데요. 다만, Scroll 정보를 저장하고 있어야한다는 단점이 있습니다.</p>\n\n<p>조회 후 <code class=\"language-plaintext highlighter-rouge\">clearScroll</code> 해주고 만료 시간을 적게 설정하면 큰 문제가 되지 않을거예요.</p>\n\n<p>변경 후엔 ES가 건강해졌습니다. 대량 조회가 필요할 땐 Scroll API 를 사용하는걸 추천드립니다.</p>\n\n<h2 id=\"검색-품질-유지하기\">검색 품질 유지하기</h2>\n<p>추가적으로 쿼리나 스코어링 방식을 변경하다보면 현재의 요구사항에는 만족했지만 이전의 요구사항에 반할 때가 생길 수 있습니다.\n그래서 테스트코드에 이전 요구사항에 관련된 테스트케이스를 꼭 남겨두고 현재 만족할 수 있는 테스트케이스를 더해서\n이전과 현재 요구사항을 모두 만족할 수 있도록 구현하는걸 목표로 했습니다.</p>\n\n<p>특정 케이스에 모두 만족하는지 일일이 확인하는 것은 현실적으로 어려울 수 있으니 테스트를 든든하게! 잘 짜두는 것이 많은 도움이 될 겁니다!</p>\n\n<h2 id=\"이후엔-어떤-것을-할-것인가\">이후엔 어떤 것을 할 것인가</h2>\n<p>Wildcard 검색, 초성 검색, IDF 제거 등 여러 개선들을 해왔는데요.\n요구사항에 맞게, 문제상황에 맞게 조치하는 형식으로 개선해나가다보니 조금은 불필요한 옵션들로 검색을 무겁게 만든 부분들이 분명 있을 수 있을것 같아요.\n또한 검색 엔진에 대한 전문적인 지식 없이 점차 학습하여 개발하다보니 초반과 후반에 대한 지식의 차이가 커서 초반에 했던 방법들이 논리보단 여러 검색어 테스트 POC 로 적용한 것들이 많아요.\n그래서 조금 뚱뚱해진 ES 의 다이어트가 필요해보입니다.</p>\n\n<p>일단 생각나는 것은 부하를 줄 수 있는 Wildcard 를 없애는 것인데요. N-gram 과 Tokenizer 의 적절한 조합으로 Wildcard 없이 포함된 단어가 잘 조회될 수 있도록 방법을 찾아봐야할 것 같아요.</p>\n\n<p>그리고 이젠 품목 데이터가 많이 쌓여서 한국 식자재의 대부분 데이터가 존재할 것인데요. 이 데이터로 사용자 사전을 만들어서 검색의 정확도를 높이는 작업을 해볼 수 있을 겁니다.\n추가되는 데이터에 맞춰 사전이 관리되어야 하기 때문에 개발자뿐만 아니라 타부서 팀원분들도 쉽게 관리하기 위한 시스템을 마련해야 할 것 같습니다.</p>\n\n<p>외래어를 포함하는 새로운 식자재를 등록하는 것도 중요하지만 “셀러드”처럼 식자재이지만 표기를 잘못한 경우도 있어서 이런 경우엔 품목명 자체의 수정이 필요합니다.\nERP에 등록된 품목명과 키친보드의 등록된 품목명의 강한 결합성을 끊을 수 있도록, 검색 엔진의 설정뿐만 아니라 키친보드 품목명의 데이터 클렌징이 필요할거예요.</p>\n\n<h1 id=\"마무리\">마무리</h1>\n<p>끝으로, 저희의 지금 검색 엔진은 완성이 아닙니다. 지금도 많이 부족할 수 있지만 사용자의 보이스를 들으며 꾸준히 발전하고 있습니다.\n키친보드를 사용하는 점주 모두가 검색이 너무 편해요! 라고 할때까지, 대충 검색해도 마음속으로 생각했던 품목이 결과에 나오는 그날까지, 발전은 계속 됩니다!</p>\n\n<p>ES 도입과 설정에 도움주시고 자기 일처럼 고민해주신 백엔드 개발자분들과 개선을 위한 데이터를 제공해주신 데이터팀분들, 검색 개선을 위해 피드백 주신 사업팀분들 모두 감사합니다!</p>\n\n<p><img src=\"/images/es-dev/chillguy.png\" alt=\"chillguy\" width=\"300\" /></p>\n",
        "contentSnippet": "안녕하세요. 스포카 백엔드팀 프로그래머 이지민입니다.\n스포카에서는 식당 점주분들이 식자재 주문을 더 편리하게 하기 위한 많은 노력들을 하고 있습니다.\n그중에서도, 주문하려는 품목을 검색하여 원하는 품목을 빠르게 찾을 수 있도록 품목 검색 기능을 제공하고 있는데요.\n검색 엔진 도입부터 지금의 검색이 되기까지의 과정들을 이야기해보려고 합니다.\n도입 초기에는 검색 엔진에 대한 이해가 깊지 않아, 논리적인 의사결정보다는 다양한 테스트를 통해 더 나은 결과를 찾는 방식으로 기능을 결정, 구현하였습니다.\n이 점을 고려해 읽어주시길 바라며, 이 글은 검색 엔진의 점진적인 발전 과정을 다루는 이야기이니, 순차적으로 읽어보시면 개선 과정이 더욱 잘 이해되실 것 같습니다!\n검색 엔진 도입 배경\n품목 검색 기능 초기에는 Database의 LIKE 질의를 통한 검색만 제공되었습니다. 이로 인해 품목명에 띄어쓰기가 다르거나 맞춤법이 정확히 일치하지 않는 경우, 사용자가 원하는 결과를 찾기가 어려웠습니다.\n예를 들어, 깐마늘을 검색했을 때 마늘/깐 이라고 저장되어 있는 유통사 품목은 검색되지 않아 점주들은 깐마늘을 유통사가 취급하지 않는다고 오해하는 상황이 발생하곤 했습니다.\n이와 같은 문제와 사용하는 점주의 수가 증가하고 품목의 종류가 다양해짐에 따라, DB 검색 기능의 한계가 더 드러나게 되었고 이를 해결하기 위해 검색 엔진 도입의 필요성이 대두되었습니다.\n이번 검색 엔진 도입이 스포카에서 최초 도입은 아닌데요.(하지만 제가 처음이에요.) (구)도도카트 서비스 운영 당시 많은 명세표 품목을 검색하는데 Elasticsearch 검색 엔진을 활용했었습니다.\n우선 별도의 검색 품질에 대한 기준이 마련되어 있지 않았기 때문에 (구)도도카트 서비스의 검색 엔진 설정을 참고해 Elasticsearch(이하 ES)를 POC 해보기로 했습니다.\n\nDB LIKE 검색과 ES 검색 비교 POC\n품목 데이터는 product 라는 인덱스에 다음과 같은 setting 으로 구성했습니다.\n\n{\n  \"product\":{\n    \"mappings\":{\n      \"properties\":{\n        // .. 생략\n        \"name\":{\n          \"type\":\"text\",\n          \"analyzer\":\"korean\",\n          \"fields\":{\n            \"ngram\":{\n              \"type\":\"text\",\n              \"analyzer\":\"korean_ngram\"\n            }\n          }\n        }\n      }\n    },\n    \"settings\":{\n      \"index\":{\n        \"analysis\":{\n          \"filter\":{\n            \"edge_ngram_back\":{\n              \"min_gram\":\"1\",\n              \"side\":\"back\",\n              \"type\":\"edge_ngram\",\n              \"max_gram\":\"5\"\n            },\n            \"edge_ngram_front\":{\n              \"min_gram\":\"1\",\n              \"side\":\"front\",\n              \"type\":\"edge_ngram\",\n              \"max_gram\":\"5\"\n            }\n          },\n          \"analyzer\":{\n            \"korean\":{\n              \"filter\":[\n                \"lowercase\",\n                \"trim\"\n              ],\n              \"type\":\"custom\",\n              \"tokenizer\":\"nori_mixed\"\n            },\n            \"korean_ngram\":{\n              \"filter\":[\n                \"lowercase\",\n                \"edge_ngram_front\",\n                \"edge_ngram_back\",\n                \"trim\"\n              ],\n              \"type\":\"custom\",\n              \"tokenizer\":\"nori_mixed\"\n            }\n          },\n          \"tokenizer\":{\n            \"nori_mixed\":{\n              \"type\":\"nori_tokenizer\",\n              \"decompound_mode\":\"mixed\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n품목명을 저장할 name field, name.ngram field 구현\n한글 검색의 정확성과 유연성을 높이기 위해 Nori Tokenizer와 Edge N-gram 필터를 활용해 띄어쓰기나 일부 단어만으로도 검색이 가능하도록 설정\n또한, LIKE 질의를 사용하는 기존 DB 검색과 ES 검색의 결과를 비교한 POC 결과는 다음과 같습니다.\n\n결과를 통해 볼 수 있듯이, 정확하지 않은 키워드로 검색했을 때도 기존 DB의 LIKE 질의보다 ES 검색이 훨씬 더 나은 결과를 제공하는 것을 확인할 수 있었습니다.\n비용 증가와 관리 포인트가 늘어남에도 불구하고 앞서 언급한 문제들이 해소되었고 검색 품질을 크게 항상시킬 수 있을거 같아 검색 엔진 도입을 최종적으로 결정하게 되었습니다!\n다만, 이번 테스트는 전체 검색어가 아닌 일부 검색어를 대상으로 진행된 POC 였기 때문에, 실제 사용자의 피드백을 바탕으로 지속적인 수정과 개선이 필요할 것으로 예상하고 있었습니다.\n이러한 부분을 미리 인지하고 마음의 준비(?)와 공부를 하고 있었죠.\n개선 작업\n1) 가중치 조절 및 N-gram 조정\n이슈 및 원인 분석\n검색 엔진을 적용한 후에 아래와 같은 피드백이 들어왔습니다.\n\n주문하려고 했던 품목은 통베이컨(에스푸드)였지만, 통베, 통베이 키워드로 검색했을 때 상위에 노출되지 않는다는 이슈였습니다.\n이 문제를 해결하기 위해, 우선 통베라는 검색어를 중심으로 원인을 분석해보았습니다.\n문제 원인 파악을 위해 _analyze API를 활용하여 name 필드에 적용된 분석기(analyzer)가 검색어를 어떻게 토큰화하는지 살펴보았습니다.\n\nGET product/_analyze\n{\n  \"field\" : \"name\",\n  \"text\" : \"통베이컨(에스푸드)\"\n}\n\nResponse\n{\n  \"response\":{\n    \"tokens\":[\n      {\n        \"token\":\"통\",\n        \"start_offset\":0,\n        \"end_offset\":1,\n        \"type\":\"word\",\n        \"position\":0\n      },\n      {\n        \"token\":\"베이컨\",\n        \"start_offset\":1,\n        \"end_offset\":4,\n        \"type\":\"word\",\n        \"position\":1\n      },\n      {\n        \"token\":\"에스\",\n        \"start_offset\":5,\n        \"end_offset\":7,\n        \"type\":\"word\",\n        \"position\":2\n      },\n      {\n        \"token\":\"푸드\",\n        \"start_offset\":7,\n        \"end_offset\":9,\n        \"type\":\"word\",\n        \"position\":3\n      }\n    ]\n  }\n}\n\n\n결과는 [통, 베이컨, 에스, 푸드] 로 예측 가능하게 나오네요.\n그러나 문제의 검색어인 통베는 다음과 같이 토큰화되었습니다:\n[통, 베, 베, 어]\n잠깐 어 는 뭐지? 라고 생각하실 수 있는데요. 통베라는 단어 어디에도 어 라는 단어는 찾아볼 수 없기 때문이죠.\n이는 ES의 Nori Tokenizer 가 한국어 문장에서 어미를 추출하는 방식을 따라 토큰화하기 때문입니다.\n예를 들어, “강아지가 밥을 먹습니다”라는 문장은 [강아지, 가, 밥, 을, 먹, 습니다]로 명사와 어미를 구분하여 토큰화됩니다.\n따라서 정확히 알기는 어렵지만 어는 Nori Tokenizer 가 베에서 어미로 분리한 결과로 예상하고 있어요.\n이런 토큰화 방식을 보고 Nori Tokenizer 의 토큰화는 단어별로 검색하는 패턴이 많은 저희 서비스에서 예측 불가능할 수 있겠다라는 깨달음을 얻었어요.\n하지만 Nori를 아예 제거하기엔 Nori 가 해주는 명사 추출의 이점이 있을 수 있어 조심스러웠습니다.\n결론적으로, Nori 기능을 완전히 제거하는 대신, 다른 접근을 시도하기로 했습니다.\n쿼리 가중치 조절 POC\n문제 해결을 위해 쿼리의 가중치를 조절해보기로 했습니다.\n기존엔 쿼리 가중치를 순수 Nori Tokenizer 가 적용된 name 필드와 Nori Tokenizer 와 N-gram filter 가 적용된 name.ngram 필드에 각각 10과 5 를 주고 있었는데요.\n따라서 N-gram 에 의해 검색된 품목보다 순수 Nori 에 의해 검색된 품목의 유사도가 높아져 상위에 올라가게 됩니다.\n통베 라고 검색했을때 통베이컨(에스푸드) 품목이 올라오기 위한 가중치 조절과 N-gram Filter 조정이 필요해보였습니다.\n\n최적의 가중치와 N-gram Filter 설정을 찾기 위해 통베이컨 품목을 기준으로 삽질을 테스트를 아래와 같이 해보았는데요.\n\n\nNori Tokenizer 에만 의존하기에는 무리가 있을거 같아 ES 기본 Tokenizer 인 Standard Tokenizer 도 추가해서 테스트 해봤습니다. \n가중치의 경우, 순수 Nori 인 nori 와 N-gram 을 적용한 ngram, standard 필드의 가중치를 조정해보며 각각 2.0, 3.0, 2.0 일 때 통베이컨(에스푸드)와 세척당근이 가장 잘 검색되는 것을 확인 했습니다.\n여기에서 Edge N-gram 에 대해서 간단히 설명드리자면요.\n\n{\n  \"min_gram\": \"1\",\n  \"max_gram\": \"3\",\n  \"side\": \"front\",\n  \"type\": \"edge_ngram\"\n}\n\n\nmin_gram : 최소 토큰 길이\nmax_gram : 최대 토큰 길이\nside : 단어의 어느 부분부터 토큰화 할지 설정(front/back)\nside 가 front 인 위 예시로 안녕하세요를 토큰화해보면 [안, 안녕, 안녕하]로 토큰화되고 side 가 back 일 경우엔 [요, 세요, 하세요]로 토큰화 됩니다.\n때문에 front 의 경우 주로 첫 글자부터 검색하는 자동완성과 같은 곳에서 사용하고 back 은 주로 뒷글자부터 검색하는 경우, 예를들면 영어로 ion 을 검색했을 때 action, station, evolution 같은 것들을 검색할 때 유용하게 사용할 수 있을거예요.\n저희는 식자재 검색라는 특성이 있어 통베, 세척당과 같이 앞글자부터 검색하는 경우가 많기 때문에 back 은 제거하고 front 만 남기기로 했습니다. max_gram 도 기존엔 5로 토큰화가 많이 되어 오히려 정확성을 떨어트리는 것을 발견했고 적절해보이는 3으로 조정했습니다.\n결론\n결론적으로 아래 조정 작업으로 문제가 되었던 품목이 검색 상위에 안정적으로 노출되도록 검색 품질을 향상시켰습니다.\nN-gram 조정: max_gram 값을 5 -> 3으로 하향 조정하고 side: front 만 사용\n가중치 조정: Nori, N-gram, Standard 분석기의 가중치를 적절히 분배\n2) Wildcard 검색\n이슈 및 원인 분석\n위 작업을 배포하고 내부에서 아래와 같은 피드백을 받았습니다.\n\n칠성사이다/355ml*24캔라는 품목이 있는데도 불구하고 사이다 라고 검색했을때 검색이 되지 않는 이슈였는데요.\n각 분석기에서 칠성사이다/355ml*24캔이 토큰화된 결과는 다음과 같았습니다.\n\nNori: 칠성사, 칠, 성사, 이, 다, 355, ml, 24, 캔\n\nN-gram: 칠, 칠성, 칠성사, 칠, 성, 성사, 이, 다, 3, 35, 355, m, ml, 2, 24, 캔\n\nStandard: 칠성사이다, 355ml, 24캔\n\n\n결과에서 확인할 수 있듯이, 사이다라는 토큰이 생성되지 않아 검색 결과에서 제외된 것입니다.\n위에서 가중치와 N-gram 을 조정했는데도 불구하고 왜 사이다로 토큰화되지 않았을까요?\n이는 N-gram 은 Filter 이기 때문에 Nori 분석기에서 생성된 토큰을 기반으로 토큰을 더 잘게 나누는 필터링을 수행하기 때문이에요.\n즉, Nori 분석기가 사이다를 하나의 단어로 인식하지 못하고 어미(이, 다)로 나누어버렸기 때문에, 사이다라는 토큰 자체가 존재하지 않았던 것이죠,,\n만약 칠성고구마였다면 어떻게 되었을까요?\n\nnori: [칠성, 고구마, 355, ml, 24, 캔]\n\nngram: [칠, 칠성, 고, 고구, 고구마, 3, 35, 355, m, ml, 2, 24, 캔]\n\nstandard: [칠성고구마, 355ml, 24캔]\n\n\n\n이처럼 명사 단위로 토큰화하기 때문에 Nori 명사 사전에 명사 존재 여부에 따라 토큰화가 다르게 됩니다. 명사 사전에 존재하는 품목의 경우, 고구마처럼 검색이 훨씬 매끄러울 수 있을거예요.\n사이다도 명사 사전에 등록되어 있었다면 칠성사이다도 [칠성, 사이다] 로 토큰할 수 있었겠죠.\nUser Dictionary\n따라서, 사용자 사전(user_dictionary) 도입을 고려했었는데요. Nori Tokenizer 에게 사이다는 명사야, 혹은 칠성사이다는 [칠성, 사이다] 라고 토큰화 해! 라고 인식할 수 있는 기준을 마련해줄수있는 방법이에요.\n하지만 몇가지 한계가 있었어요.\n관리 포인트 증가\n    \n관리해야 할 품목의 종류가 너무 많아 어려움이 발생\n농산물, 곡류, 축산물, 수산물 등 수백에서 수천 가지 품목을 주기적으로 업데이트하기 어려운 환경\n표준화되지 않은 품목명\n    \n유통사마다 다른 표기 방식으로 인해 같은 품목도 명칭이 다름\n예: “무”와 “무우”, “샐러드”와 “셀러드” 등 비표준어와 잘못된 외래어 표기\n이러한 다양한 표기법을 모두 관리하기엔 부담이 큼\n이러한 이유로 사용자 사전을 유지 관리하는 것이 현실적으로 어렵다고 판단하여 다른 접근 방식을 찾기로 했습니다.\nWildcard Field\n문제를 다시 분석한 결과, 검색어 자체가 포함된 품목을 반환하는 것이 핵심이라는 점을 확인했습니다.\n이는 마치 DB의 LIKE 쿼리처럼 검색어가 포함된 품목을 반환하는 것이죠.\nES에서는 이러한 기능을 제공하는 Wildcard 필드를 활용할 수 있었습니다.\nWildcard 필드를 추가하는 방법은 간단합니다.\n\n{\n  \"mappings\":{\n    \"properties\":{\n      \"name\":{\n        \"type\":\"text\",\n        \"analyzer\":\"korean\",\n        \"fields\":{\n          // .. 생략\n          \"wildcard\":{\n            \"type\":\"wildcard\"\n          }\n        }\n      }\n      //.. 생략\n    }\n  }\n}\n\n\nWildcard 필드는 역색인 구조가 아닌 패턴 매칭 방식을 사용하기 때문에 성능 문제가 발생할 수 있어서 신중히 사용해야 합니다. 모든 토큰을 검사해야 하기 때문에 데이터가 많아질수록 메모리 사용량이 많아지고 성능이 떨어질 수 있습니다.\n따라서 Wildcard 필드 대신 정교한 N-gram 을 사용하거나 Query-String 쿼리를 권장합니다.\n하지만 저희는 데이터량이 많지 않고, 필터를 통해 조회되는 데이터 수를 제한할 수 있었기 때문에 성능 부담이 아직까진 크지 않아 Wildcard 필드를 사용하기로 결정했습니다.\nWildcard 필드를 활용한 쿼리는 다음과 같이 구성했습니다:\n\n{\n  \"query\":{\n    \"bool\":{\n      \"must\":[\n        {\n          \"bool\":{\n            \"should\":[\n              {\n                \"wildcard\":{\n                  \"name.wildcard\":{\n                    \"boost\":100.0,\n                    \"wildcard\":\"*사이다*\"\n                  }\n                }\n              },\n              {\n                \"multi_match\":{\n                  \"fields\":[\n                    \"name^3.0\",\n                    \"name.ngram^4.0\",\n                    \"name.standard^3.0\"\n                  ],\n                  \"query\":\"사이다\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n\n\n검색어가 포함된 결과는 상단으로 올리되, 포함된 결과 내에서도 유사도에 맞게 정렬되도록 쿼리를 수정했습니다. 위처럼 할 경우 사이다가 포함된 단어는 100 점을 추가로 받고 match 되는 필드에 따라 점수를 추가로 더해지게 됩니다.\n예를들어 칠성사이다 , 칠십성사이다 , 칠성사이 라는 품목이 있을때, 사이다 라고 검색하면 wildcard 에 의해 칠성사이다, 칠십성사이다 가 가장 상단으로 나오게 될테고, 품목의 이름이 더 짧아 유사도가 더 높은 칠성사이다 가 최상단으로 나오게 될거예요.\n기존의 가중치는 유지하되 검색어가 포함된 결과만 올리기 위한 쿼리입니다.\n결론\nUser Dictionary 도입을 고려했으나 유지보수에 대한 한계로 제외\nWildcard 필드와 쿼리로 검색어가 포함된 품목의 점수를 높임\n3) 초성 검색 feat. ICU\nWildcard 검색까지 구현하고 나니 검색 되지 않는 품목 없이 꽤 안정화된 검색 결과를 제공할 수 있었는데요. 더 편리한 검색을 위한 초성 검색 니즈가 들어 왔습니다.\n어떤 extension 을 사용할 것인가\n초성검색을 위해 지금 시스템에 도입할 수 있고, 적당한 레퍼런스가 있는 두가지 extension으로 POC 를 진행해봤어요.\nelasticsearch-jaso-analyzer(이하 JASO)\nanalysis-icu(이하 ICU)\n결론적으로 ICU 를 선택했는데요, JASO 에 대한 설명이 너무 길어질거 같아 자세한 설정 방법과 설명은 위 주소에서 참고주시길 바랍니다.\n두 분석기를 비교한 결과는 아래 표로 정리되었습니다.\n\n개발 난이도\n    \nJASO: \"chosung\" 옵션만 추가하면 간단히 초성 검색이 가능\nICU: 직접 초성 필터를 구현해야 하는 추가 작업 필요\n유지보수 및 확장성\n    \nJASO: 커스텀 확장(extension)으로 기본 제공되지 않기 때문에, 사용하는 ES 버전과 플랜에 따라 제약이 있을 수 있음\nICU: 기본 확장(extension)으로 계속 지원되며, 다른 기능으로의 확장이 자유로움\n버전 지원\n    \nJASO: Elasticsearch 8.6.2까지만 지원. 이후 버전은 직접 설정 필요\nICU: 최신 버전까지 지원\n토큰 생성 방식\n    \nJASO: 영어 오타 교정, 쌍자음 분리 등 추가 기능 지원\nICU: 필요에 따라 초성 검색뿐만 아니라 다양한 확장 가능\nJASO 가 더 많은 옵션을 제공한다는 이점이 있지만 불필요한 토큰이 생성되고 큰 max_gram을 주어 토큰을 많이 생성해야 된다는 점,\n유지보수를 직접 해야된다는 점에서 ICU extension 을 직접 확장하여 사용하기로 하였습니다.\nICU Analyzer\n그럼, ICU analyzer 의 설정을 좀더 자세히 살펴보겠습니다.\n\n{\n    \"orderable_vendor_product_v4\":{\n        \"aliases\":{\n            \"orderable_vendor_product\":{}\n        },\n        \"mappings\":{\n            \"properties\":{\n                // .. 생략\n                \"name\":{\n                    \"type\":\"text\",\n                    \"fields\":{\n                        \"icu\":{\n                            \"type\":\"text\",\n                            \"analyzer\":\"icu_analyzer\",\n                            \"search_analyzer\":\"icu_search_analyzer\",\n                            \"similarity\":\"scripted_no_idf\"\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"template\":{\n        \"settings\":{\n            \"index\":{\n                \"analysis\":{\n                    \"filter\":{\n                        // .. 생략\n                        \"ngram_filter\":{\n                            \"type\":\"ngram\",\n                            \"min_gram\":1,\n                            \"max_gram\":2,\n                            \"token_chars\":[\n                                \"letter\",\n                                \"digit\"\n                            ]\n                        }\n                    },\n                    \"analyzer\":{\n                        // .. 생략\n                        \"icu_analyzer\":{\n                            \"type\":\"custom\",\n                            \"filter\":[\n                                \"lowercase\",\n                                \"ngram_filter\"\n                            ],\n                            \"char_filter\":[\n                                \"nfd_normalizer\",\n                                \"make_chosung_filter\"\n                            ],\n                            \"tokenizer\":\"icu_tokenizer\"\n                        },\n                        \"icu_search_analyzer\":{\n                            \"type\":\"custom\",\n                            \"filter\":[\n                                \"lowercase\",\n                                \"ngram_filter\"\n                            ],\n                            \"char_filter\":[\n                                \"chosung_only_filter\",\n                                \"nfd_normalizer\"\n                            ],\n                            \"tokenizer\":\"icu_tokenizer\"\n                        }\n                    },\n                    \"char_filter\":{\n                        \"nfd_normalizer\":{\n                            \"mode\":\"decompose\",\n                            \"name\":\"nfkc\",\n                            \"type\":\"icu_normalizer\"\n                        },\n                        \"make_chosung_filter\":{\n                            \"type\":\"pattern_replace\",\n                            \"pattern\":\"[^\\u1100-\\u1112^0-9a-zA-Z가-힣ㄱ-ㅎ ㅏ-ㅑ]\",\n                            \"replacement\":\"\"\n                        },\n                        \"chosung_only_filter\":{\n                            \"type\":\"pattern_replace\",\n                            \"pattern\":\"[^ㄱ-ㅎa-zA-Z0-9]\",\n                            \"replacement\":\"\"\n                        }\n                    }\n                    //.. 생략 Tokenizer\n                }\n            }\n        }\n    }\n}\n\n\n위 analzyer 를 그림으로 나타내면 아래와 같습니다.\n\nicu field 를 보시면 analyzer 와 search_analyzer 를 구분해서 설정해준걸 보실 수 있는데요.\nAnalyzer : 저장되는 document 에 대해서 토큰화하여 그림과 같이 역색인화 구조로 저장합니다.\nSearch Analyzer : 검색어에 대해서 토큰화를 수행해서 저장되어 있는 토큰을 검색해서 결과를 내는 역할을 합니다.\n기존엔 Analyzer 와 Search Analyzer 를 구분해서 지정해줄 필요가 없었지만 초성 검색의 경우엔 초성으로 검색 했을 때만 초성 검색이 되길 바랬었는데요.\n예를 들어 초성이 아닌 통베이컨을 Analyzer 로 검색했을 경우, ㅌㅂㅇㅋ 으로 초성화 될 것이고 사용자가 초성 검색을 하지 않았는데도 초성을 포함하는 품목이 많이 나오게 될 것 입니다. \n그래서 최대한 기존의 쿼리 score 에는 영향이 가지 않고 초성 검색을 했을때만 초성으로 품목을 찾기 위해서 초성을 제외한 글자는 모두 제거하는 필터를 넣는 Search Analyzer 를 따로 지정해주었습니다.\n즉, 통베이컨이 Search Analyzer 를 거치게 되면 아무 토큰도 생성되지 않게 되어 초성 검색에 대해서는 수행이 되지 않게 되는거죠.\nICU_Normalizer 에 대한 설정은 문서를 보시면 더 자세히 볼 수 있을거예요.\n요약하자면 유니코드의 정규화(Normalization)를 수행하는 역할을 합니다.\n저희는 decompose 옵션을 사용하여 통이라는 글자를 ㅌㅗㅇ 으로 문자를 분해할 수 있도록 했고, NFKC(Normalization Form Compatibility Composition) 옵션을 사용하여 호환가능한 문자를 호환시키고, 조합 가능한 문자는 조합하도록 설정하였습니다.\n즉, 통베이컨™①é를 정규화하면 ㅌㅗㅇㅂㅔㅇㅣㅋㅓㄴTM1é로 정규화 됩니다. \n초성검색 구현을 위해선 정규화 방식보다는 초성 분리를 위한 mode 를 잘 설정하는게 더 핵심이라고 할 수 있을거예요.\n요약하면 품목을 ICU Normalizer 를 활용하여 초성 토큰 형태로 저장하고, 초성 검색어에 대해서만 초성 검색을 수행할 수 있도록 Search Analyzer 를 구분하여 구현해주었습니다.\nICU 는 JASO와 비교했을 때 초기 구현은 다소 복잡했지만, 유지보수와 추후 확장성 측면에서 더 적합한 선택이었으면 합니다!! (Extension 교체 작업만은 다시 하고 싶지 않아요..)\nIDF 제외\n이제 마지막 개선 작업이네요.\n잘 운영하고 있던 중 아래와 같은 의견이 들어왔습니다.\n이슈 및 원인 분석\n\n사용자가 스위트콘을 검색하려 했으나 스위트곤으로 오타가 발생한 경우, 기대했던 스위트콘이 아닌 곤약이 상위에 노출되는 문제가 있었습니다.\n일반적으로 사용자가 기대하는 결과와는 다른 결과였죠.\n다행히도 로컬 테스트 환경에서 원인 분석을 해볼 수 있었는데요, 그런데 조금 충격적이게도 로컬에선 스위트콘이 더 상위노출 되었습니다. 이럴수가..\n그렇다는 것은 로컬 테스트코드와 실제 환경의 검색 결과가 다르다는 것이고, 지금까지의 테스트가 유효한게 맞을까.. 하는 생각이 들었는데요.\n\n더 자세한 원인을 파악하기 위해 ES의 explain API를 사용해 점수 산출 과정을 분석했습니다.\n결과를 요약하자면 아래와 같은데요.\n#곤약/면곤약\n    \nN-gram Boost : 8.8\nIDF: 6.05\nTF: 0.78\n8.8 * 6.05 * 0.78 = 41.66\n스위트콘/리치스/2.95kg\n    \nN-gram Boost : 8.8\nIDF : 3.14\nTF : 0.81696963\n8.8 * 3.14 * 0.81696963 = 22.568493\nES 에서 Boost * IDF * TF 계산 로직을 통해 score 를 산출하고 있었습니다. 곤약이 상위로 올라온 이유는 숫자를 보면 알수있듯 두배 가까이 차이나는 IDF 때문인 것을 파악할 수 있었는데요.\n우선 처음 보는 개념인 IDF 와 TF 가 무엇인지 알아보았습니다.\nIDF(Inverse Document Frequency): 특정 단어가 전체 문서에서 얼마나 드물게 나타나는지\nTF(Term Frequency): 특정 단어가 문서 내에서 얼마나 자주 나타나는지\nIDF 는 전체 문서를 기준으로 계산되기 때문에 테스트코드와 실제 환경의 결과가 다른 이유가 여기에 있었습니다.\n테스트코드의 테스트를 위해 생성해놓은 문서는 상대적으로 너무나도 적은 양의 데이터이기 때문에 IDF 의 값이 대부분 동일하고 TF 값으로 대부분 유사도가 정해질거예요.\n반면, 테스트코드에 비해 방대한 품목 데이터가 있는 실제 환경에선 곤약과 스위트콘처럼 IDF 의 차이가 클 수 있습니다.\nIDF 가 유의미한 결과를 내주기 위해서는 전체 문서가 모두 한 유통사의 품목으로, 품목명의 구조나 맥락이 동일해야 할 것 같은데요.\n하지만 유통사마다 품목명이 모두 제각각인데도 IDF가 모든 유통사의 데이터를 포함한 전체 품목 데이터를 기준으로 계산되면서 오히려 유사도 계산에 역효과를 내고 있었습니다.\n또한, 실제환경과 로컬 환경에서의 테스트 결과가 보장되지 않아 문제 재현 및 원인 파악이 어려워보였습니다.\n따라서, IDF 를 제외하고 score 계산하는 방법을 알아봤습니다.\nIDF를 제외한 점수 계산을 위해 크게 세 가지 방법을 검토해봤습니다.\n1. 점수 고정 (Constant Score)\n첫번째 방법은 아래와 같이 쿼리에 boost 값을 명시하여 점수를 고정 시키는 Constant Score Query 를 활용한 방법입니다.\n\n{\n  \"query\":{\n    \"bool\":{\n      \"must\":[\n        {\n          \"bool\":{\n            \"should\":[\n              {\n                \"constant_score\":{\n                  \"filter\":{\n                    \"wildcard\":{\n                      \"name.wildcard\":{\n                        \"wildcard\":\"*스위트곤*\"\n                      }\n                    }\n                  },\n                  \"boost\":100.0\n                }\n              },\n              {\n                \"constant_score\":{\n                  \"filter\":{\n                    \"match\":{\n                      \"name\":\"스위트곤\"\n                    }\n                  },\n                  \"boost\":3.0\n                }\n              },\n              {\n                \"constant_score\":{\n                  \"filter\":{\n                    \"match\":{\n                      \"name.ngram\":\"스위트곤\"\n                    }\n                  },\n                  \"boost\":4.0\n                }\n              }\n              // .. 생략\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n\n\n결과를 봤을 때, Boost 만으로 Scoring 되기 때문에 같은 필드에서 검색된 품목은 동일한 점수를 가지는 것을 확인했습니다. \n예를 들어 name.ngram 로 검색된 품목들은 모두 Boost 4 인 동일한 점수로 정렬이 제대로 되지 않았습니다.\n결론적으로, 이 방식은 유사도 기반 정렬이 필요한 우리의 요구사항에 적합하지 않았습니다.\n2. 유사도 모델 변경\n기본적으로 ES는 Boost * IDF * TF 식을 사용하는 BM25(Best Matching 25) 모델을 사용합니다. 이를 대신해 DFR(Deviation From Randomness) 모델을 사용해 보았습니다.\nDFR 은 현 document에 얼마나 드물게 등장하는지, 문서 길이에 따라 통계적 랜덤성 기반으로 검색됩니다. type 뿐만 아니라 아래처럼 옵션에 가중치나 옵션을 설정해줄수있습니다.\n아래는 DFR 모델 설정 예시입니다.\n\n{\n  \"settings\": {\n    \"similarity\": {\n      \"custom_similarity\": {\n        \"type\": \"DFR\",\n        \"basic_model\": \"g\", // 문서 내에 특정 용어가 얼마나 드물게 발생하는지\n        \"after_effect\": \"b\", // 검색어가 얼마나 여러번 등장하는지\n        \"normalization\": \"h2\" // 문서 길이에 따라 빈도 설정\n      }\n    }\n  }\n}\n\n\n보시다시피 DFR 모델에 대한 지식이 없으면 유지보수가 무척 어려워보입니다.\n문제가 생기거나 개선의 여지가 생겼을 때 더 복잡한 계산식을 사용하는 모델이기 때문에 쉽게 커스텀하기가 힘들어보이고, 모델의 대한 이해뿐만 아니라 옵션에 대한 각 알고리즘도 알아야하기 때문에 유지보수가 정말 쉽지 않을거라 생각이 들었죠.\n우리 팀에 검색 엔진에 대한 전문적인 지식을 가진 분이 없었기 때문에 더 복잡한 모델로 변경하는건 과감하게 제외했습니다.\n3. Scripted Similarity 사용\nIDF를 제외하고 직접 계산식을 정의하는 방법입니다. 아래는 Scripted Similarity 설정 예시입니다.\n\n{\n  \"setting\":{\n    \"similarity\":{\n      \"scripted_no_idf\":{\n        \"type\":\"scripted\",\n        \"script\":{\n          \"source\":\"double tf = Math.sqrt(doc.freq); return query.boost * tf;\"\n        }\n      }\n    }\n  }\n}\n\n\n위처럼 setting 을 변경하고 쿼리의 explain 을 해보면 script 에 있는 식이 아래와 같이 idOrCode에 들어가 scoring 되는것을 볼 수 있어요.\n\nExplain 결과\n{   \n    // .. 생략\n    \"description\":\"sum of:\",\n    \"details\":[\n        {\n            \"details\":[\n                {\n                    \"description\":\"score from ScriptedSimilarity(weightScript=[null], script=[Script{type=inline, lang='painless', idOrCode='double tf = Math.sqrt(doc.freq); return query.boost * tf;', options={}, params={}}]) computed from:\",\n                    \"details\":[\n                        // .. 생략\n                    ],\n                    \"value\":8\n                }\n            ]\n        }\n        // .. 생략\n    ]\n}\n\n\n\n위 세가지 방법 중 가장 마지막 방법인 Scripted Similarity 로 계산식을 넣기로 했어요. Scripted Similarity 를 선택한 이유는 다음과 같습니다.\n유연한 계산식 사용\n    \n계산식을 직접 조정 가능\n기존 BM25 모델에서 IDF만 제거할 수 있는 계산식을 직접 부여 가능\n유지보수 용이성\n    \n계산식이 명확히 노출되어 있어 비교적 수정이 간단\n쿼리와 독립적\n    \n점수 계산이 쿼리와 독립적으로 이루어져 다른 쿼리 추가 시에도 영향을 받지 않음\nScripted Similarity 계산식 결정\n그후에는 Scripted Similarity 에 적용할 계산식 결정이 필요했습니다.\n후보 1. 단순한 TF 계산식\n\ndouble tf = Math.sqrt(doc.freq);\nreturn query.boost * tf;\n\n/* freq : 문서 내의 토큰 등장 수 */\n\n\n후보 2. BM 모델과 동일한 TF 계산식\n\ndouble freq = doc.freq;\ndouble k1 = 1.2;\ndouble b = 0.75;\ndouble dl = doc.length;\ndouble avgdl = 7;\ndouble tf = freq / (freq + k1 * (1 - b + b * dl / avgdl));\nreturn query.boost * tf;\n\n/*\n    freq : 문서 내의 토큰 등장 수\n    k1: TF 영향도 가중치\n    b : 문서 길이 보정 파라미터\n    dl : 문서 길이\n    avgdl : 전체 문서의 문서 길이 평균값\n */\n\n\n\n\n결과만 보았을 때 확실히 IDF 를 포함했을 때보다 IDF 를 제외했을 때 결과가 개선되긴 했지만, 여전히 단순 TF 계산식, BM 모델 계산식의 결과는 크게 차이가 없었습니다.\n하지만 위 결과의 정렬은 비슷한듯 하지만 실제 점수는 다릅니다. 단순 TF 의 경우 문서 내의 토큰 등장 수로만 TF 를 계산하기 때문에 동일한 점수를 가진 결과가 다수 나타나 매번 정렬이 달라질 수 있습니다.\n국산쌀와 찰떡(쌀 국산)는 단순 TF 계산식에 의하면 둘은 동일한 점수를 반환하게 됩니다.\n반면 BM 모델과 동일한 TF 계산식의 경우, 문서 내 토큰 등장 수와 문서 길이를 함께 고려하기 때문에 저희가 흔히 생각한대로 국산쌀의 유사도가 더 높은 결과로 나오게 됩니다.\n따라서, BM 모델에서 IDF 만 제거한, 후보2 계산식을 사용하기로 결정하였습니다.\n다만, avgdl 를 현재의 기준으로 7로 고정시켜 가중치를 조정했지만 이후 문서의 평균 길이가 변경될 경우엔 유지보수가 필요한 부분이 있을 수 있습니다.\n하지만 avgdl 가 크게 변하지 않을 것이라는 가정과 점수 계산에 크게 영향을 주지 않는다고 생각해 고정된 계산식으로 가게 되었습니다.\n그럼에도 이후에 유지보수가 필요하거나 변경이 필요할 수 있습니다. 꽤 해석이 필요한 계산식을 가지고 있기 때문에\n어떤 계기로 IDF를 제거하게 되었는지, Scripted Similarity 를 왜 적용하게 되었는지, 계산식은 어떻게 결정되었고 어떤 의미인지를 자세히 문서화하도록 노력하였습니다.\n결과\n결과적으로, 아래와 같은 구조를 갖게 되었습니다.\n\n이러한 구조를 통해 현재 검색 정확도는 어떨까요?\n아래는 매장 사이드 관련 데이터입니다.\n2025년 1월 기준\n    \n검색 결과 성공률: 검색 시 하나 이상의 품목이 결과에 노출되는 경우 → 98.6%\n검색 목적 달성률: 검색한 품목을 선택한 후, 실제 액션(주문 등)을 수행하는 경우 → 73.6%\n이를 통해 상당히 높은 검색 정확도와 달성률을 기록하고 있음을 확인할 수 있습니다.\n또한, 아래는 유통사에서 매장의 주문서를 생성할 때, ES 검색이 매우 편리했다는 피드백을 받은 메시지입니다.\n키친보드의 검색 기능이 타 ERP와 달리 오타가 있어도 품목을 정확하게 검색할 수 있어 큰 편리함을 느꼈다고 합니다!\n\n\n개발 과정에서 어려움이 있었지만 결국 사용자한테 좋은 영향을 주는 기능을 개발한거 같아 아주 뿌듯하네요!\n소소한 Tip\n중단 시간을 줄인 Reindexing\nES 의 비용을 최소화하기 위해서 최소한의 리소스로 구동하고 있습니다. 그러다보니 인덱스에 새로운 필드가 추가되거나 설정이 변경되는 개선이 될때마다 인덱스를 새롭게 동기화해야하기 때문에 중단이 불가피했는데요.\n하지만 주문에서의 검색은 점주들이 꼭 해야만하는 중요한 기능이기 때문에 중단을 최소화하고 싶었습니다.\n알아보던 중 찾아낸 것은 별칭(Alias)를 이용한 배포입니다.\n\nOld Index Template 을 템플릿으로 하여 생성된 Old Index(별칭: Product) 가 존재한다.\n새로운 매핑 정보가 있는 New Index Template 을 생성한다.\nNew Index Template 을 템플릿으로 하여 New Index 를 생성한다.\nOld Index 의 문서를 New Index 로 reindex 한다.\nOld Index 를 삭제한다.\nNew Index 에 Product alias 를 부여 한다.\n서버에서 alias 기준으로 쿼리한다.\n이렇게 되면 5번과 6번 사이, Product 를 가진 인덱스가 존재하지 않을 시에만 검색 중단이 발생하게 됩니다.\n이 방법이 가장 좋은 방법이라고 표현하기는 어렵지만 기존 20만개의 품목을 마이그레이션 하느라 10분이 넘는 중단 시간을 3초 정도의 중단 시간으로 낮출 수 있는 방법이었습니다.\n대량 데이터 조회\nDB 의 품목 데이터와 ES 인덱스 동기화를 위해 하루에 한번씩 스케줄러가 실행됩니다.\nDB 품목 데이터가 삭제될 때 ES 데이터도 삭제되어야 하는데 어떠한 이유로 삭제되지 않는 경우가 있었습니다. 즉, 품목이 DB 데이터엔 없지만 ES 데이터에는 있는 경우죠.\n다만 전체 문서를 조회하는 과정의 부하가 많이 걱정되긴 했는데요. 그래서 처음엔 페이징을 활용했습니다.\n\n fun deleteOrphanDocuments() {\n    val pageSize = 1000\n\n    var pageable = PageRequest.of(0, pageSize, Sort.by(Sort.Order.asc(\"id.keyword\")))\n\n    do {\n        val indexPage = productIndexRepository.findAll(pageable)\n        val documentProductIds = indexPage.content.map { it.id }\n\n        val dbProductIds = productRepository.findAllById(documentProductIds).map { it.id }\n\n        val documentIdsNotInDB = documentProductIds - dbProductIds\n        productIndexRepository.deleteAllById(documentIdsNotInDB)\n\n        pageable = pageable.next()\n    } while (indexPage.hasNext())\n}\n\n\n\nES야.. 죽지마.. 테스트서버에서 확인해보니 동기화 할 때마다 자꾸 ES 서버가 다운되더라고요..\n페이징보다 Scroll API 를 이용하는 것이 훨씬 성능상 좋다고 하여서 Scroll API 를 적용해봤습니다.\n\nfun deleteOrphanDocuments() {\n    val toDeleteProductIds = mutableListOf<UUID>()\n\n    val batchSize = 1000\n\n    var documentIdsWithScroll = productIndexRepository.findAllIdWithScroll(size = batchSize)\n\n    while (documentIdsWithScroll.productDocumentIds.isNotEmpty()) {\n        val documentIds = documentIdsWithScroll.productDocumentIds\n        val dbProductIds = productRepository.findAllById(documentIds).map { it.id }\n\n        toDeleteProductIds.addAll(documentIds - dbProductIds)\n\n        documentIdsWithScroll =\n            productIndexRepository.findAllIdByScrollId(\n                scrollId = documentIdsWithScroll.nextScrollId,\n            )\n    }\n\n    productIndexRepository.clearScroll(documentIdsWithScroll.nextScrollId)\n\n    productIndexRepository.deleteAllById(toDeleteProductIds)\n}\n\n\nES 에서 Scroll 을 생성할 때 설정한 시간만큼 Scroll 정보를 저장하고 있고 해당 Scroll ID 를 가지고 다음 데이터를 처리단위만큼 반환해줍니다. \n받은 데이터엔 또 다음 Scroll 조회를 위한 Scroll ID 를 반환하는 형식입니다.\n장점은 페이징 조회보다 계산과 조회가 빠르고 부하가 적은 것인데요. 다만, Scroll 정보를 저장하고 있어야한다는 단점이 있습니다.\n조회 후 clearScroll 해주고 만료 시간을 적게 설정하면 큰 문제가 되지 않을거예요.\n변경 후엔 ES가 건강해졌습니다. 대량 조회가 필요할 땐 Scroll API 를 사용하는걸 추천드립니다.\n검색 품질 유지하기\n추가적으로 쿼리나 스코어링 방식을 변경하다보면 현재의 요구사항에는 만족했지만 이전의 요구사항에 반할 때가 생길 수 있습니다.\n그래서 테스트코드에 이전 요구사항에 관련된 테스트케이스를 꼭 남겨두고 현재 만족할 수 있는 테스트케이스를 더해서\n이전과 현재 요구사항을 모두 만족할 수 있도록 구현하는걸 목표로 했습니다.\n특정 케이스에 모두 만족하는지 일일이 확인하는 것은 현실적으로 어려울 수 있으니 테스트를 든든하게! 잘 짜두는 것이 많은 도움이 될 겁니다!\n이후엔 어떤 것을 할 것인가\nWildcard 검색, 초성 검색, IDF 제거 등 여러 개선들을 해왔는데요.\n요구사항에 맞게, 문제상황에 맞게 조치하는 형식으로 개선해나가다보니 조금은 불필요한 옵션들로 검색을 무겁게 만든 부분들이 분명 있을 수 있을것 같아요.\n또한 검색 엔진에 대한 전문적인 지식 없이 점차 학습하여 개발하다보니 초반과 후반에 대한 지식의 차이가 커서 초반에 했던 방법들이 논리보단 여러 검색어 테스트 POC 로 적용한 것들이 많아요.\n그래서 조금 뚱뚱해진 ES 의 다이어트가 필요해보입니다.\n일단 생각나는 것은 부하를 줄 수 있는 Wildcard 를 없애는 것인데요. N-gram 과 Tokenizer 의 적절한 조합으로 Wildcard 없이 포함된 단어가 잘 조회될 수 있도록 방법을 찾아봐야할 것 같아요.\n그리고 이젠 품목 데이터가 많이 쌓여서 한국 식자재의 대부분 데이터가 존재할 것인데요. 이 데이터로 사용자 사전을 만들어서 검색의 정확도를 높이는 작업을 해볼 수 있을 겁니다.\n추가되는 데이터에 맞춰 사전이 관리되어야 하기 때문에 개발자뿐만 아니라 타부서 팀원분들도 쉽게 관리하기 위한 시스템을 마련해야 할 것 같습니다.\n외래어를 포함하는 새로운 식자재를 등록하는 것도 중요하지만 “셀러드”처럼 식자재이지만 표기를 잘못한 경우도 있어서 이런 경우엔 품목명 자체의 수정이 필요합니다.\nERP에 등록된 품목명과 키친보드의 등록된 품목명의 강한 결합성을 끊을 수 있도록, 검색 엔진의 설정뿐만 아니라 키친보드 품목명의 데이터 클렌징이 필요할거예요.\n마무리\n끝으로, 저희의 지금 검색 엔진은 완성이 아닙니다. 지금도 많이 부족할 수 있지만 사용자의 보이스를 들으며 꾸준히 발전하고 있습니다.\n키친보드를 사용하는 점주 모두가 검색이 너무 편해요! 라고 할때까지, 대충 검색해도 마음속으로 생각했던 품목이 결과에 나오는 그날까지, 발전은 계속 됩니다!\nES 도입과 설정에 도움주시고 자기 일처럼 고민해주신 백엔드 개발자분들과 개선을 위한 데이터를 제공해주신 데이터팀분들, 검색 개선을 위해 피드백 주신 사업팀분들 모두 감사합니다!",
        "id": "https://spoqa.github.io/2025/03/04/es-dev.html",
        "isoDate": "2025-03-04T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": [
      {
        "title": "분산락 적용하기 (실전)",
        "link": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%A0%84",
        "pubDate": "Wed, 05 Mar 2025 22:44:11 GMT",
        "content": "<p>이전까지는 왜 분산락을 적용했고, 해당 코드가 어떤지에 대해서 이야기해보았다. \n이번에는 적용한 코드가 우리가 원하는 동시성에 대한 대책이 제대로 되었는지에 대한 이야기를 해볼것이다. </p>\n<h3 id=\"📌-조건은\">📌 조건은?</h3>\n<p>우선, 난 Jmeter를 활용해서 하나의 락을 거는 @DistributedLock과 여러 락을 동시에 거는@MultiDistributedLock에 대한 동시성 테스트를 진행했다. \n조건은 둘다 똑같이 설정했다.\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/849b4964-99df-4eea-a519-a322e784e4b6/image.png\" alt=\"\">\n조건을 해석해보자면, </p>\n<ul>\n<li>50개의 스레드 (동시 사용자 50명)</li>\n<li>Ramp-up 시간 50초 (1초마다 1개의 스레드가 추가됨)</li>\n<li>Loop Count: 10 (각 스레드가 10번 반복 요청)</li>\n</ul>\n<p>→ 즉, 최대 500개의 요청이 순차적으로 발생</p>\n<blockquote>\n<p>추가적으로 설명하자면, \nRamp-up Period는 <strong>모든 스레드(사용자)를 얼마나 걸쳐서 실행할지를 결정하는 값</strong>이다.\n즉, JMeter는 총 N개의 스레드를 Ramp-up Period 동안 균등하게 분배하여 시작한다.</p>\n</blockquote>\n<p>이걸 공식으로 정리하자면,\n🔹 스레드 시작 간격 (초) = Ramp-up Period / 총 스레드 개수</p>\n<blockquote>\n</blockquote>\n<p>내가 설정한 조건에 의하면, Ramp-up Period를 50초, 스레드 개수를 50으로 설정하게 되고\n50초/50쓰레드 가 되니 1초마다 1개의 스레드가 추가되는 구조가 된다. </p>\n<blockquote>\n</blockquote>\n<p>정리하자면, 50초 동안 50개의 스레드가 점진적으로 늘어나며, 매 초마다 1개의 스레드가 실행된다. 50초가 지나면 모든 스레드가 동시에 실행된 상태에서 반복(Loop Count: 10번)하면서 요청을 보내게 되는 조건이다.</p>\n<h3 id=\"📌-테스트-해볼까\">📌 테스트 해볼까?</h3>\n<p>이제 본격적으로 테스트를 해보자. </p>\n<h4 id=\"distributedlock-테스트\">@DistributedLock 테스트</h4>\n<pre><code>{\n  &quot;id&quot;: &quot;row:2&quot;\n}</code></pre><p>하나의 키를 동시에 여러번 테스트하는 것인데 한 키만을 걸었기 때문일까</p>\n<p><img src=\"https://velog.velcdn.com/images/sweet_sumin/post/d23e7a00-16c5-4c70-b5d9-921d352a8301/image.png\" alt=\"\">\n모든 요청이 동시에 보냈음에도 불구하고 성공률이 100%였다 ㅋㅋㅋ \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/aee8b3f3-7fa2-4e83-b5b2-f5dcdb045270/image.png\" alt=\"\">\n하나하나 뜯어보자면, </p>\n<ul>\n<li>Samples: 500 → 총 500개의 요청이 전송됨</li>\n<li>Average: 5006 ms → 모든 요청의 평균 응답 시간이 5006ms (5.006초)</li>\n<li>Median: 5006 ms → 응답 시간을 작은 순서대로 정렬했을 때 중간 값이 5006ms</li>\n<li>90% Line:    5010 ms    → 응답 시간이 5010ms 이하인 요청이 전체의 90%</li>\n<li>95% Line:    5012 ms    → 응답 시간이 5012ms 이하인 요청이 전체의 95%</li>\n<li>99% Line:    5015 ms    → 응답 시간이 5015ms 이하인 요청이 전체의 99%</li>\n<li>Min: 5001 ms → 가장 빠른 응답 시간이 5001ms</li>\n<li>Max: 5028 ms → 가장 느린 응답 시간이 5028ms</li>\n<li>Error %: 0.0% → 오류 없이 100% 성공</li>\n<li>Throughput: 5.0/sec → 초당 평균 5개의 요청을 처리</li>\n<li>Received KB/sec: 0.86 KB/s → 서버에서 초당 0.86KB 데이터를 받아옴</li>\n<li>Sent KB/sec: 1.03 KB/s → 서버로 초당 1.03KB 데이터를 보냄</li>\n</ul>\n<p>평균 응답시간 (Throughput)이 5초인게 아마 코드 상  Thread.sleep(5000) 영향인 듯 싶다. \n사실 어떻게 100% 성공일 수 있지? 설마 락이 안걸리나 싶어서 \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/0912875b-5fa1-4058-85bb-03112f3f1c90/image.png\" alt=\"\">\nlog를 걸어서 봤는데 락이 잘 걸려있는 것을 확인할 수 있었다. \n그렇다면 멀티로 락을 걸었을때는 어떨까?</p>\n<h4 id=\"multidistributedlock-테스트\">@MultiDistributedLock 테스트</h4>\n<p>@DistributedLock과 같은 조건으로 진행하였다. \n사실 처음에 테스트 할때는 이것도 성공률이 100%일줄 알았다. \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/ad959716-4791-4047-93df-a2d511e200a1/image.png\" alt=\"\"></p>\n<p>뭐야? 이건 왜 간간히 성공해?? 왜 실패한건 500에러야?\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/9fa1e95b-a09a-492f-9628-92adfdd3195c/image.png\" alt=\"\">\n에러 메세지를 확인해보니, 락 거는데 에러가 뜬거였다. </p>\n<h5 id=\"single-락과-multi-락-왜-같은-조건인데-결과가-다를까\">Single 락과 Multi 락 왜 같은 조건인데 결과가 다를까??</h5>\n<p>✔️ @DistributedLock (Single)\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/ccb73d20-3996-413d-8907-5390f226833d/image.png\" alt=\"\"></p>\n<ul>\n<li>요청마다 <strong>하나의 키(row:2 같은 단일 값)</strong>만 사용</li>\n<li>waitTime = 15이므로 락을 못 잡으면 최대 15초까지 대기 + 쓰레드 sleep 5초</li>\n<li>하나의 키만 처리하므로 충돌 가능성이 낮음</li>\n<li>결과적으로 스레드 간 충돌 없이 요청이 순차적으로 처리됨 → 실패율 낮음</li>\n</ul>\n<p>✔️ @MultiDistributedLock (Multi)\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/3ed86a1b-dad1-4e10-a9b7-b59bd2a56aa5/image.png\" alt=\"\"></p>\n<ul>\n<li>여러 개의 키([&quot;row:2&quot;,&quot;row:1&quot;,&quot;row:3&quot;])를 락으로 사용</li>\n<li>만약 다른 스레드가 row:1을 선점했다면, row:2와 row:3이 잠겨 있어도 락을 얻지 못함</li>\n<li>락을 얻지 못하면 실패 (대기 시간이 지나도 모든 키를 얻지 못하면 실패)</li>\n<li>일부 키만 사용 가능해도 전체가 실패하는 구조 → 충돌 가능성이 급증</li>\n</ul>\n<p>따라서 싱글락과 달리 멀티락에서 에러가 뜨는 것은 동시성 테스트에서 잘 방어를 하고 있다는 뜻이었다. </p>\n<p>참고) 나의 github 코드 : <a href=\"https://github.com/sue4869/lockPractice\">https://github.com/sue4869/lockPractice</a></p>\n",
        "contentSnippet": "이전까지는 왜 분산락을 적용했고, 해당 코드가 어떤지에 대해서 이야기해보았다. \n이번에는 적용한 코드가 우리가 원하는 동시성에 대한 대책이 제대로 되었는지에 대한 이야기를 해볼것이다. \n📌 조건은?\n우선, 난 Jmeter를 활용해서 하나의 락을 거는 @DistributedLock과 여러 락을 동시에 거는@MultiDistributedLock에 대한 동시성 테스트를 진행했다. \n조건은 둘다 똑같이 설정했다.\n\n조건을 해석해보자면, \n50개의 스레드 (동시 사용자 50명)\nRamp-up 시간 50초 (1초마다 1개의 스레드가 추가됨)\nLoop Count: 10 (각 스레드가 10번 반복 요청)\n→ 즉, 최대 500개의 요청이 순차적으로 발생\n추가적으로 설명하자면, \nRamp-up Period는 모든 스레드(사용자)를 얼마나 걸쳐서 실행할지를 결정하는 값이다.\n즉, JMeter는 총 N개의 스레드를 Ramp-up Period 동안 균등하게 분배하여 시작한다.\n이걸 공식으로 정리하자면,\n🔹 스레드 시작 간격 (초) = Ramp-up Period / 총 스레드 개수\n내가 설정한 조건에 의하면, Ramp-up Period를 50초, 스레드 개수를 50으로 설정하게 되고\n50초/50쓰레드 가 되니 1초마다 1개의 스레드가 추가되는 구조가 된다. \n정리하자면, 50초 동안 50개의 스레드가 점진적으로 늘어나며, 매 초마다 1개의 스레드가 실행된다. 50초가 지나면 모든 스레드가 동시에 실행된 상태에서 반복(Loop Count: 10번)하면서 요청을 보내게 되는 조건이다.\n📌 테스트 해볼까?\n이제 본격적으로 테스트를 해보자. \n@DistributedLock 테스트\n{\n  \"id\": \"row:2\"\n}\n하나의 키를 동시에 여러번 테스트하는 것인데 한 키만을 걸었기 때문일까\n\n모든 요청이 동시에 보냈음에도 불구하고 성공률이 100%였다 ㅋㅋㅋ \n\n하나하나 뜯어보자면, \nSamples: 500 → 총 500개의 요청이 전송됨\nAverage: 5006 ms → 모든 요청의 평균 응답 시간이 5006ms (5.006초)\nMedian: 5006 ms → 응답 시간을 작은 순서대로 정렬했을 때 중간 값이 5006ms\n90% Line:    5010 ms    → 응답 시간이 5010ms 이하인 요청이 전체의 90%\n95% Line:    5012 ms    → 응답 시간이 5012ms 이하인 요청이 전체의 95%\n99% Line:    5015 ms    → 응답 시간이 5015ms 이하인 요청이 전체의 99%\nMin: 5001 ms → 가장 빠른 응답 시간이 5001ms\nMax: 5028 ms → 가장 느린 응답 시간이 5028ms\nError %: 0.0% → 오류 없이 100% 성공\nThroughput: 5.0/sec → 초당 평균 5개의 요청을 처리\nReceived KB/sec: 0.86 KB/s → 서버에서 초당 0.86KB 데이터를 받아옴\nSent KB/sec: 1.03 KB/s → 서버로 초당 1.03KB 데이터를 보냄\n평균 응답시간 (Throughput)이 5초인게 아마 코드 상  Thread.sleep(5000) 영향인 듯 싶다. \n사실 어떻게 100% 성공일 수 있지? 설마 락이 안걸리나 싶어서 \n\nlog를 걸어서 봤는데 락이 잘 걸려있는 것을 확인할 수 있었다. \n그렇다면 멀티로 락을 걸었을때는 어떨까?\n@MultiDistributedLock 테스트\n@DistributedLock과 같은 조건으로 진행하였다. \n사실 처음에 테스트 할때는 이것도 성공률이 100%일줄 알았다. \n\n뭐야? 이건 왜 간간히 성공해?? 왜 실패한건 500에러야?\n\n에러 메세지를 확인해보니, 락 거는데 에러가 뜬거였다. \nSingle 락과 Multi 락 왜 같은 조건인데 결과가 다를까??\n✔️ @DistributedLock (Single)\n\n요청마다 하나의 키(row:2 같은 단일 값)만 사용\nwaitTime = 15이므로 락을 못 잡으면 최대 15초까지 대기 + 쓰레드 sleep 5초\n하나의 키만 처리하므로 충돌 가능성이 낮음\n결과적으로 스레드 간 충돌 없이 요청이 순차적으로 처리됨 → 실패율 낮음\n✔️ @MultiDistributedLock (Multi)\n\n여러 개의 키([\"row:2\",\"row:1\",\"row:3\"])를 락으로 사용\n만약 다른 스레드가 row:1을 선점했다면, row:2와 row:3이 잠겨 있어도 락을 얻지 못함\n락을 얻지 못하면 실패 (대기 시간이 지나도 모든 키를 얻지 못하면 실패)\n일부 키만 사용 가능해도 전체가 실패하는 구조 → 충돌 가능성이 급증\n따라서 싱글락과 달리 멀티락에서 에러가 뜨는 것은 동시성 테스트에서 잘 방어를 하고 있다는 뜻이었다. \n참고) 나의 github 코드 : https://github.com/sue4869/lockPractice",
        "guid": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%A0%84",
        "isoDate": "2025-03-05T22:44:11.000Z"
      },
      {
        "title": "분산락 적용하기 (개념)",
        "link": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EA%B0%9C%EB%85%90",
        "pubDate": "Wed, 05 Mar 2025 22:42:55 GMT",
        "content": "<h2 id=\"📌-적용-배경\">📌 적용 배경</h2>\n<p>이번에 회사에서 하는 프로젝트는 &#39;오더 상태 관리&#39;이다. &#39;오더서밋, 오더취소, 배송, 오 더컨펌&#39; 까지의 다양한 오더 상태에 대한 관리를 적용하는 프로젝트이다. </p>\n<p>우리 회사는 공급사 상품들의 묶음 단위인 딜을 이용해 주문을 한다. 상품이 있으니까 재고가 있겠지? 즉, 각 오더 상태의 역할별로 재고가 차감되거나 복원된다. </p>\n<ul>\n<li>오더 서밋시 : 재고 차감</li>\n<li>오더 취소시 : 재고 복원</li>\n<li>오더 컨펌시 : 재고 차감 / 재고 복원\n이러한 상태가 변경될때 각 딜에는 항상 중복되는 상품이 존재하기 때문에 동시성 문제가 발생하게 된다. 여기서 추가로 딜에는 여러 상품들이 있기 때문에 여러 상품을 동시에 락을 걸어야 하는 상황이다. </li>\n</ul>\n<h2 id=\"📌-동시성-문제를-해결하는-방법\">📌 동시성 문제를 해결하는 방법</h2>\n<p>여러가지 방법이 있는데 비관적락, 낙관적락, 분산락, 네임드락 등이 있다. 각각의 특징을 간단히 알아보자면,</p>\n<p>1) 비관적락(DB락)</p>\n<ul>\n<li>DB에서 직접 락을 걸어 다른 트랜잭션 차단</li>\n<li>장점 : 데이터 정합성 강하게 보장, 실시간 동시 수정 방지 가능</li>\n<li>단점 : 성능 저하(트랜잭션이 길어질수록 락 유지시간 증가), 데드락</li>\n<li>적용 예시) 은행 계좌 잔고 업데이트</li>\n</ul>\n<p>2) 낙관적락(버전 필드)</p>\n<ul>\n<li>충돌 감지 후 재시도 (rollback &amp; retry)</li>\n<li>장점 : 락을 안걸어서 성능이 좋음</li>\n<li>단점 : 충돌이 빈번할 경우 계속 재시도하여 성능 저하를 일으킴. 정합성이 다소 낮음</li>\n</ul>\n<p>3) 분산락(Redis, Zookeeper)</p>\n<ul>\n<li>여러 서버에서 동일한 리소스를 동시에 수정하지 못하도록 제어</li>\n<li>장점 : 분산 시스템에도 동기화 가능</li>\n<li>단점 : 락 관리(해제, TTL 설정 등) 신경 써야 함, 분산 환경에서 네트워크 이슈로 인해 지연 가능</li>\n</ul>\n<p>우리 회사의 경우, 멀티 인스턴스 환경에서 오더상태 변경을 해야하고 재고관리에 있어서 강한 정합성을 요구하기 때문에 분산락을 적용하기로 결정하였다.</p>\n<h2 id=\"📌-분산락\">📌 분산락</h2>\n<p>분산락이란 무엇일까?\n앞서 언급했듯이 분산락은 여러 서버에서 동일한 리소스를 동시에 접근하지 못하도록 제어하는 것을 의미한다.(비관적 락이나 낙관적 락은 하나의 DB에서만 동작하는 락) 좀 더 기술적 용어를 사용해서 설명하자면, </p>\n<blockquote>\n<p>💡 분산락\n락을 획득한 프로세스 혹은 스레드만이 공유 자원 혹은 Critical Section 에 접근할 수 있도록 하는 것</p>\n</blockquote>\n<p><strong>키(락)를 가진 사람(프로세스/스레드)만 보물이 있는 공간(공유자원)의 문을 열 수 있는 것이다</strong> 🗝</p>\n<p>분산락을 적용하는 방법은 여러가지가 있다. Redis, Zookeeper, MySql 등등.. 결론적으로 말하자면, 우린 Redis를 사용하였다.\n우선 Redis는 그동안 캐시용도로 이미 구성해놓은 반면에 Zookeeper는 추가적인 인프라 구성이 필요하기 때문에 제외하게 되었다. 그리고 알다시피 Redis는 싱글스레드로 작동하기 때문에 동시성 문제도 현저히 작다. 아 물론 Mysql도 있긴 한데, 락을 사용하기 위해 별도의 커넥션 풀을 관리해야 하고 락에 관련된 부하를 RDS에서 받으니 Redis를 사용하는 것이 더 효율적이다.</p>\n<h3 id=\"redisson을-사용한-이유는\">Redisson을 사용한 이유는?</h3>\n<p>Redis는 인메모리 데이터 저장소로 사용되지만 , 캐시 역할을 넘어서 다양한 분산 시스템 기능을 지원하는 구현제(라이브러리, 프레임워크)들이 존재한다. 그 중 난 분산락을 위한 구현체에 대해 간단히 알아보자면,</p>\n<ul>\n<li>Jedis -&gt; Lettuce가 성능이 더 좋아서 Lettuce로 대체됨</li>\n<li>Lettuce</li>\n<li>Redisson</li>\n</ul>\n<p>1) Lettuce</p>\n<ul>\n<li>Spring Data Redis에서 기본적으로 사용하는 Redis 클라이언트</li>\n<li>setnx를 활용한 스핀락 : 반복적으로 락 획득 시도 -&gt; 레디스에 많은 부하 발생. CPU를 계속 사용하면서 재시도하는 방식</li>\n<li>락 획득 방식\n(1) SET NX 명령어로 락 획득을 시도\n(2) 락이 없으면 성공 → 작업 진행 후 DEL로 락 해제\n(3) 이미 락이 있으면 실패 → 일정 시간 대기 후 재시도 (스핀락 방식)\n(4) TTL(EX)을 설정하여 데드락 방지</li>\n</ul>\n<p>2) Redisson</p>\n<ul>\n<li><p>별도의 Lock interface를 지원 : RedLock, RLock(단일 인스턴스 락) 지원</p>\n<blockquote>\n<p>💡 RedLock</p>\n<ul>\n<li>Redis 기반의 분산 락을 더 안전하게 보장하기 위한 알고리즘</li>\n<li>멀티 Redis 노드 환경에서 장애 복구가 중요한 경우</li>\n<li>데이터 정합성이 중요한 글로벌 시스템</li>\n<li>Redis 장애가 발생해도 락을 유지해야 하는 경우</li>\n<li>RedLock은 과반수 이상의 Redis 노드에서 락을 획득해야 성공</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Pub/Sub 방식을 이용하기에 락이 해제되면 락을 subscribe 하는 클라이언트는 락이 해제되었다는 신호를 받고 락 획득을 시도</p>\n</li>\n<li><p>Redisson은 락 대기 및 해제 처리를 최적화하여 불필요한 CPU 낭비 없이 안정적으로 락을 관리</p>\n</li>\n<li><p>락이 만료되기 전에 자동으로 TTL을 연장하여, 장시간 작업에서도 안정적인 락 유지가 가능\n( Lettuce는 TTL이 지나면 락이 풀릴 수 있어 작업 중 충돌 위험이 존재 )</p>\n</li>\n</ul>\n<p>결론적으로, Lettuce보다 안정적인 분산 락이 필요했고, CPU 사용을 줄이면서 TTL 자동 연장과 다양한 락 기능을 활용하기 위해 Redisson을 선택하게 된것이다. 그럼 이제, RedLock을 이용할지, RLock을 이용해서 구현할지에 대한 고민이 생긴다.</p>\n<h3 id=\"redlock-rlock--어떤-것을-이용할까\">RedLock, RLock ? 어떤 것을 이용할까</h3>\n<p>❌ RedLock이 과할 수 있는 경우\n싱글 Redis 노드 환경이거나, 락을 걸어야 하는 트랜잭션이 짧다면 RedLock은 오버헤드가 될 수도 있다</p>\n<ul>\n<li>단일 Redis 인스턴스 환경에서는 RedLock을 사용할 필요 없음</li>\n<li>과반수 노드가 죽으면 락 획득이 불가능해질 수도 있음</li>\n</ul>\n<p>현재 우리의 레디스 환경은 하나의 레디스 인스턴스에서 모든 데이터와 락을 관리하는 싱글 노드 형태이기 때문에 RedLock보다는 RLock을 선택하는 것이 낫다는 판단이 되었다.</p>\n<h3 id=\"코드내에서-주목해야-할점\">코드내에서 주목해야 할점</h3>\n<p>코드 내에서 주목해야 할 점을 난 2가지를 뽑았다. </p>\n<p>1) RLock의 내부 코드 파헤치기\n2) 트랜잭션 분리</p>\n<h4 id=\"🤔-rlock의-내부-코드-파헤치기\">🤔 RLock의 내부 코드 파헤치기</h4>\n<p>Redission을 이용한 분산락 코드는 사실 인터넷을 조금은 서칭하면 거의 비슷하게 나온다. 그런데 정작 내부의 RLock의 코드를 파헤친 기록은 없더이다. 퇴근하고 남는게 시간인데 놀면 뭐하나,, 내부 코드 뒤적거리면서 시간이나 보내야지 ⏳\n적용한 코드를 크게 보면 간단하다</p>\n<blockquote>\n<p>락 객체 생성(열쇠 가져오기) → 락 걸기(열쇠로 잠그기) → 락 해제(열쇠로 잠금 풀기) </p>\n</blockquote>\n<p>1) 락 객체 생성(열쇠 가져오기)</p>\n<p>자.. 락 객체 생성부터 알아볼까?\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/c0c778c4-6249-4dd9-b28e-272717b5ae1b/image.png\" alt=\"\">\n처음 시작은 getLock부터 시작한다. 이 코드를 따라가다보면, 최종적으로 RedissonLock 클래스의 생성자로 연결된다. \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/f3c40997-5bd3-4697-b199-ff112467f38f/image.png\" alt=\"\">\n첫번째 코드 줄을 통해, RedissonLock은 RedissonBaseLock을 상속받고, 기본적인 락 이름(name)과 명령 실행기(commandExecutor)가 초기화함을 알 수 있다. \n명령 실행기(commandExecutor)라는 것은 <strong>🎁 비동기 Redis 명령어 실행기</strong>를 의미한다. 음 Redis에 직접 명령을 보내는 역할인거다. 예를 들어 tryLock()을 호출하면, 내부적으로 SET NX PX 명령이 Redis에 전송되는 것이다. 그래서 명령 실행기를 초기화한다는 것은 commandExecutor를 통해 Redis와 통신할 준비를 한다는 거라고 생각하면 된다. </p>\n<p>internalLockLeaseTime는 자동 락 해제 시간 설정하는 것이다. 여기서 우리가 주목해야 할것은 🎁 <strong>락 워치독 (Watchdog)</strong> 기능이다. 쉽게 말하면, 자동 연장 기능이다. </p>\n<blockquote>\n<p>📌 락 워치독(Watchdog)은 왜 필요할까?\n보통 Redis에서 락을 설정할 때 TTL(만료 시간)을 지정하는데, 작업이 TTL 안에 끝나지 않으면 락이 자동으로 해제되는 문제가 있다. </p>\n<p>예를 들어 TTL이 5초인데 작업이 6초걸린다고 치자. 5초 후 락이 만료되고 자동으로 해제되면?\n다른 프로세스가 같은 락을 획득할 수 있다 → 데이터 일관성 깨짐 😨\n그래서 락을 획득한 스레드가 살아 있는 동안 TTL이 자동으로 연장된다는 기능이다. TTL을 직접 설정하지 않으면 기본 30초 동안 유지된다고 한다. </p>\n</blockquote>\n<p>마지막 줄인 pubSub은 <strong>🎁 Pub/Sub 기능</strong>을 활용하여 락 해제 이벤트를 감지하는 역할이다. \nRedis에서 분산 락을 사용할 때, 다른 클라이언트가 락을 대기하는 방식에는 2가지 방식이 있다. </p>\n<ul>\n<li>폴링(Polling) 방식: 주기적으로 Redis를 조회해서 락이 해제되었는지 확인함.</li>\n<li>이벤트 기반 방식: 락이 해제될 때 Redis가 직접 알림(Pub/Sub)을 보내서 대기 중인 클라이언트가 즉시 실행됨.</li>\n</ul>\n<p>만약 폴링 방식이라면? 락을 얻으려는 클라이언트가 주기적으로 Redis에 요청을 보내 락이 해제되었는지 확인해야한다. 듣기만 해도, 불필요한 Redis 부하가 발생하고 클라이언트가 지속적으로 Redis에 요청을 보내므로 트래픽이 많아질 거라는 단점이 느껴지지?\n그래서 Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다. <strong>언제? RLock.unlock() 이 호출될때!</strong></p>\n<p>2) 락 걸기(열쇠로 잠그기)\n이제 락을 어떻게 거는지 알아보자. 코드를 따라가다보면 Redission 클래스에서 tryLock()의 구현체를 확인할 수 있다. \n코드에 대한 내용을 간단하게 정리하자면, \n주어진 대기 시간(waitTime) 내에 락을 획득하려 시도하며, 락을 획득하면 지정된 임대 시간(leaseTime) 동안 락을 유지한다. 락을 즉시 획득하지 못한 경우, 다른 클라이언트의 락 해제 이벤트를 대기하기 위해 Pub/Sub 메커니즘을 활용하고, 대기 시간 내에 락을 획득하지 못하면 false를 반환하는 매커니즘을 확인할 수 있다. \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/942080f9-4adb-40d5-b537-e2ee4f3e0251/image.png\" alt=\"\"></p>\n<p>3) 락 해제(열쇠로 잠금 풀기)</p>\n<p>비동기적으로 락을 해제하는 모습을 볼 수 있다. 앞서 언급했듯이  Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다 -&gt; 이부분을 찾기 위해 코드를 엄청 뒤졌는데 사실 해당 역할을 하는 코드를 찾을 수가 없어서 좀 아쉽다..ㅠ\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/8aa9b100-ef12-4199-b10c-efb8cad433b0/image.png\" alt=\"\"></p>\n<h4 id=\"🤔-트랜잭션-분리\">🤔 트랜잭션 분리</h4>\n<p>코드를 살펴보면 락을 걸고 나서 트랜잭션을 분리해서 비즈니스 로직을 실행하는 역할을 하는 것을 볼 수 있다. </p>\n<p><img src=\"https://velog.velcdn.com/images/sweet_sumin/post/55536ec0-d5e8-4f62-964e-08458dbc23c2/image.png\" alt=\"\">\n음..쉽게 말하면 DistributedLock 어노테이션이 선언된 메서드를 <strong>별도의 트랜잭션으로</strong> 실행하게 만든 코드인 것이다. \n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/13dbe77e-56f1-40fc-ad98-d20acca68ccf/image.png\" alt=\"\"></p>\n<p>Propagation.REQUIRES_NEW 옵션을 지정해 부모 트랜잭션의 유무에 관계없이 별도의 트랜잭션으로 동작하게끔 설정하고 반드시 트랜잭션 커밋 이후 락이 해제되게끔 처리하고 있다. 왜 이렇게 분리를 했을까?\n해당 내용은 <a href=\"https://helloworld.kurly.com/blog/distributed-redisson-lock/\">컬리의 블로그</a>에 너무 자세히 써져있다. 내가 진행한 프로젝트도 재고를 위한 분산락인데 여기서도 재고를 예시로 들어서 너무나 적절하게 써져있으니 해당 링크 참고하길 바란다. 결론을 말하자면 데이터 정합성을 위한 방법으로 트랜잭션 커밋 이후 락이 해제되게끔 처리 해놓았다. </p>\n<h2 id=\"📌-추가된-요구사항\">📌 추가된 요구사항</h2>\n<p>실전으로 넘어가기 전에, 추가할 요구사항이 있다. 앞선 요구사항은 하나의 key 즉, 하나의 row만 락을 거는 형식으로 구현되어 있다. 하지만 우리 회사 특성상 주문시 여러 상품을 동시에 상태 변경하기 때문에 한번에 여러 상품의 재고를 변경해야한다. 따라서 하나의 row가 아닌 여러 row에 락을 걸어야 한다. </p>\n<p>그렇다면 기존에 받는 키도 하나에서 여러개를 받게 되고 락도 동시에 여러개를 건다는 말이겠지? 정리하자면, 여러 개의 락을 동시에 걸고, 하나라도 실패하면 전체 실패하도록 하고 싶다는 것이다. 이때 난 RedissonMultiLock이라는 것을 사용했다. </p>\n<p><img src=\"https://velog.velcdn.com/images/sweet_sumin/post/daf79e99-4aee-49a1-ab06-aae8528faa82/image.png\" alt=\"\"></p>\n<p>즉, 하나의 트랜잭션처럼 모든 락이 성공해야만 실행되도록 할때 사용된다. 그렇다는 말은 락을 해제할때도 한꺼번에 해제한다는 말과 동일하다. </p>\n<p>이제 추가된 요구까지 알아보았으니 본격적으로 테스트를 해볼까? 해당 내용은 다음편에 있다. </p>\n<p>참고) </p>\n<ul>\n<li><a href=\"https://velog.io/@a01021039107/%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%B4%EB%A1%A0%ED%8E%B8\">https://velog.io/@a01021039107/%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%B4%EB%A1%A0%ED%8E%B8</a></li>\n<li><a href=\"https://helloworld.kurly.com/blog/distributed-redisson-lock/\">https://helloworld.kurly.com/blog/distributed-redisson-lock/</a></li>\n<li><a href=\"https://techblog.woowahan.com/17416/\">https://techblog.woowahan.com/17416/</a></li>\n<li><a href=\"https://velog.io/@jinony/Spring-Boot-Apache-JMeter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\">https://velog.io/@jinony/Spring-Boot-Apache-JMeter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8</a></li>\n</ul>\n",
        "contentSnippet": "📌 적용 배경\n이번에 회사에서 하는 프로젝트는 '오더 상태 관리'이다. '오더서밋, 오더취소, 배송, 오 더컨펌' 까지의 다양한 오더 상태에 대한 관리를 적용하는 프로젝트이다. \n우리 회사는 공급사 상품들의 묶음 단위인 딜을 이용해 주문을 한다. 상품이 있으니까 재고가 있겠지? 즉, 각 오더 상태의 역할별로 재고가 차감되거나 복원된다. \n오더 서밋시 : 재고 차감\n오더 취소시 : 재고 복원\n오더 컨펌시 : 재고 차감 / 재고 복원\n이러한 상태가 변경될때 각 딜에는 항상 중복되는 상품이 존재하기 때문에 동시성 문제가 발생하게 된다. 여기서 추가로 딜에는 여러 상품들이 있기 때문에 여러 상품을 동시에 락을 걸어야 하는 상황이다. \n📌 동시성 문제를 해결하는 방법\n여러가지 방법이 있는데 비관적락, 낙관적락, 분산락, 네임드락 등이 있다. 각각의 특징을 간단히 알아보자면,\n1) 비관적락(DB락)\nDB에서 직접 락을 걸어 다른 트랜잭션 차단\n장점 : 데이터 정합성 강하게 보장, 실시간 동시 수정 방지 가능\n단점 : 성능 저하(트랜잭션이 길어질수록 락 유지시간 증가), 데드락\n적용 예시) 은행 계좌 잔고 업데이트\n2) 낙관적락(버전 필드)\n충돌 감지 후 재시도 (rollback & retry)\n장점 : 락을 안걸어서 성능이 좋음\n단점 : 충돌이 빈번할 경우 계속 재시도하여 성능 저하를 일으킴. 정합성이 다소 낮음\n3) 분산락(Redis, Zookeeper)\n여러 서버에서 동일한 리소스를 동시에 수정하지 못하도록 제어\n장점 : 분산 시스템에도 동기화 가능\n단점 : 락 관리(해제, TTL 설정 등) 신경 써야 함, 분산 환경에서 네트워크 이슈로 인해 지연 가능\n우리 회사의 경우, 멀티 인스턴스 환경에서 오더상태 변경을 해야하고 재고관리에 있어서 강한 정합성을 요구하기 때문에 분산락을 적용하기로 결정하였다.\n📌 분산락\n분산락이란 무엇일까?\n앞서 언급했듯이 분산락은 여러 서버에서 동일한 리소스를 동시에 접근하지 못하도록 제어하는 것을 의미한다.(비관적 락이나 낙관적 락은 하나의 DB에서만 동작하는 락) 좀 더 기술적 용어를 사용해서 설명하자면, \n💡 분산락\n락을 획득한 프로세스 혹은 스레드만이 공유 자원 혹은 Critical Section 에 접근할 수 있도록 하는 것\n키(락)를 가진 사람(프로세스/스레드)만 보물이 있는 공간(공유자원)의 문을 열 수 있는 것이다 🗝\n분산락을 적용하는 방법은 여러가지가 있다. Redis, Zookeeper, MySql 등등.. 결론적으로 말하자면, 우린 Redis를 사용하였다.\n우선 Redis는 그동안 캐시용도로 이미 구성해놓은 반면에 Zookeeper는 추가적인 인프라 구성이 필요하기 때문에 제외하게 되었다. 그리고 알다시피 Redis는 싱글스레드로 작동하기 때문에 동시성 문제도 현저히 작다. 아 물론 Mysql도 있긴 한데, 락을 사용하기 위해 별도의 커넥션 풀을 관리해야 하고 락에 관련된 부하를 RDS에서 받으니 Redis를 사용하는 것이 더 효율적이다.\nRedisson을 사용한 이유는?\nRedis는 인메모리 데이터 저장소로 사용되지만 , 캐시 역할을 넘어서 다양한 분산 시스템 기능을 지원하는 구현제(라이브러리, 프레임워크)들이 존재한다. 그 중 난 분산락을 위한 구현체에 대해 간단히 알아보자면,\nJedis -> Lettuce가 성능이 더 좋아서 Lettuce로 대체됨\nLettuce\nRedisson\n1) Lettuce\nSpring Data Redis에서 기본적으로 사용하는 Redis 클라이언트\nsetnx를 활용한 스핀락 : 반복적으로 락 획득 시도 -> 레디스에 많은 부하 발생. CPU를 계속 사용하면서 재시도하는 방식\n락 획득 방식\n(1) SET NX 명령어로 락 획득을 시도\n(2) 락이 없으면 성공 → 작업 진행 후 DEL로 락 해제\n(3) 이미 락이 있으면 실패 → 일정 시간 대기 후 재시도 (스핀락 방식)\n(4) TTL(EX)을 설정하여 데드락 방지\n2) Redisson\n별도의 Lock interface를 지원 : RedLock, RLock(단일 인스턴스 락) 지원\n💡 RedLock\nRedis 기반의 분산 락을 더 안전하게 보장하기 위한 알고리즘\n멀티 Redis 노드 환경에서 장애 복구가 중요한 경우\n데이터 정합성이 중요한 글로벌 시스템\nRedis 장애가 발생해도 락을 유지해야 하는 경우\nRedLock은 과반수 이상의 Redis 노드에서 락을 획득해야 성공\nPub/Sub 방식을 이용하기에 락이 해제되면 락을 subscribe 하는 클라이언트는 락이 해제되었다는 신호를 받고 락 획득을 시도\nRedisson은 락 대기 및 해제 처리를 최적화하여 불필요한 CPU 낭비 없이 안정적으로 락을 관리\n락이 만료되기 전에 자동으로 TTL을 연장하여, 장시간 작업에서도 안정적인 락 유지가 가능\n( Lettuce는 TTL이 지나면 락이 풀릴 수 있어 작업 중 충돌 위험이 존재 )\n결론적으로, Lettuce보다 안정적인 분산 락이 필요했고, CPU 사용을 줄이면서 TTL 자동 연장과 다양한 락 기능을 활용하기 위해 Redisson을 선택하게 된것이다. 그럼 이제, RedLock을 이용할지, RLock을 이용해서 구현할지에 대한 고민이 생긴다.\nRedLock, RLock ? 어떤 것을 이용할까\n❌ RedLock이 과할 수 있는 경우\n싱글 Redis 노드 환경이거나, 락을 걸어야 하는 트랜잭션이 짧다면 RedLock은 오버헤드가 될 수도 있다\n단일 Redis 인스턴스 환경에서는 RedLock을 사용할 필요 없음\n과반수 노드가 죽으면 락 획득이 불가능해질 수도 있음\n현재 우리의 레디스 환경은 하나의 레디스 인스턴스에서 모든 데이터와 락을 관리하는 싱글 노드 형태이기 때문에 RedLock보다는 RLock을 선택하는 것이 낫다는 판단이 되었다.\n코드내에서 주목해야 할점\n코드 내에서 주목해야 할 점을 난 2가지를 뽑았다. \n1) RLock의 내부 코드 파헤치기\n2) 트랜잭션 분리\n🤔 RLock의 내부 코드 파헤치기\nRedission을 이용한 분산락 코드는 사실 인터넷을 조금은 서칭하면 거의 비슷하게 나온다. 그런데 정작 내부의 RLock의 코드를 파헤친 기록은 없더이다. 퇴근하고 남는게 시간인데 놀면 뭐하나,, 내부 코드 뒤적거리면서 시간이나 보내야지 ⏳\n적용한 코드를 크게 보면 간단하다\n락 객체 생성(열쇠 가져오기) → 락 걸기(열쇠로 잠그기) → 락 해제(열쇠로 잠금 풀기) \n1) 락 객체 생성(열쇠 가져오기)\n자.. 락 객체 생성부터 알아볼까?\n\n처음 시작은 getLock부터 시작한다. 이 코드를 따라가다보면, 최종적으로 RedissonLock 클래스의 생성자로 연결된다. \n\n첫번째 코드 줄을 통해, RedissonLock은 RedissonBaseLock을 상속받고, 기본적인 락 이름(name)과 명령 실행기(commandExecutor)가 초기화함을 알 수 있다. \n명령 실행기(commandExecutor)라는 것은 🎁 비동기 Redis 명령어 실행기를 의미한다. 음 Redis에 직접 명령을 보내는 역할인거다. 예를 들어 tryLock()을 호출하면, 내부적으로 SET NX PX 명령이 Redis에 전송되는 것이다. 그래서 명령 실행기를 초기화한다는 것은 commandExecutor를 통해 Redis와 통신할 준비를 한다는 거라고 생각하면 된다. \ninternalLockLeaseTime는 자동 락 해제 시간 설정하는 것이다. 여기서 우리가 주목해야 할것은 🎁 락 워치독 (Watchdog) 기능이다. 쉽게 말하면, 자동 연장 기능이다. \n📌 락 워치독(Watchdog)은 왜 필요할까?\n보통 Redis에서 락을 설정할 때 TTL(만료 시간)을 지정하는데, 작업이 TTL 안에 끝나지 않으면 락이 자동으로 해제되는 문제가 있다. \n예를 들어 TTL이 5초인데 작업이 6초걸린다고 치자. 5초 후 락이 만료되고 자동으로 해제되면?\n다른 프로세스가 같은 락을 획득할 수 있다 → 데이터 일관성 깨짐 😨\n그래서 락을 획득한 스레드가 살아 있는 동안 TTL이 자동으로 연장된다는 기능이다. TTL을 직접 설정하지 않으면 기본 30초 동안 유지된다고 한다. \n마지막 줄인 pubSub은 🎁 Pub/Sub 기능을 활용하여 락 해제 이벤트를 감지하는 역할이다. \nRedis에서 분산 락을 사용할 때, 다른 클라이언트가 락을 대기하는 방식에는 2가지 방식이 있다. \n폴링(Polling) 방식: 주기적으로 Redis를 조회해서 락이 해제되었는지 확인함.\n이벤트 기반 방식: 락이 해제될 때 Redis가 직접 알림(Pub/Sub)을 보내서 대기 중인 클라이언트가 즉시 실행됨.\n만약 폴링 방식이라면? 락을 얻으려는 클라이언트가 주기적으로 Redis에 요청을 보내 락이 해제되었는지 확인해야한다. 듣기만 해도, 불필요한 Redis 부하가 발생하고 클라이언트가 지속적으로 Redis에 요청을 보내므로 트래픽이 많아질 거라는 단점이 느껴지지?\n그래서 Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다. 언제? RLock.unlock() 이 호출될때!\n2) 락 걸기(열쇠로 잠그기)\n이제 락을 어떻게 거는지 알아보자. 코드를 따라가다보면 Redission 클래스에서 tryLock()의 구현체를 확인할 수 있다. \n코드에 대한 내용을 간단하게 정리하자면, \n주어진 대기 시간(waitTime) 내에 락을 획득하려 시도하며, 락을 획득하면 지정된 임대 시간(leaseTime) 동안 락을 유지한다. 락을 즉시 획득하지 못한 경우, 다른 클라이언트의 락 해제 이벤트를 대기하기 위해 Pub/Sub 메커니즘을 활용하고, 대기 시간 내에 락을 획득하지 못하면 false를 반환하는 매커니즘을 확인할 수 있다. \n\n3) 락 해제(열쇠로 잠금 풀기)\n비동기적으로 락을 해제하는 모습을 볼 수 있다. 앞서 언급했듯이  Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다 -> 이부분을 찾기 위해 코드를 엄청 뒤졌는데 사실 해당 역할을 하는 코드를 찾을 수가 없어서 좀 아쉽다..ㅠ\n\n🤔 트랜잭션 분리\n코드를 살펴보면 락을 걸고 나서 트랜잭션을 분리해서 비즈니스 로직을 실행하는 역할을 하는 것을 볼 수 있다. \n\n음..쉽게 말하면 DistributedLock 어노테이션이 선언된 메서드를 별도의 트랜잭션으로 실행하게 만든 코드인 것이다. \n\nPropagation.REQUIRES_NEW 옵션을 지정해 부모 트랜잭션의 유무에 관계없이 별도의 트랜잭션으로 동작하게끔 설정하고 반드시 트랜잭션 커밋 이후 락이 해제되게끔 처리하고 있다. 왜 이렇게 분리를 했을까?\n해당 내용은 컬리의 블로그에 너무 자세히 써져있다. 내가 진행한 프로젝트도 재고를 위한 분산락인데 여기서도 재고를 예시로 들어서 너무나 적절하게 써져있으니 해당 링크 참고하길 바란다. 결론을 말하자면 데이터 정합성을 위한 방법으로 트랜잭션 커밋 이후 락이 해제되게끔 처리 해놓았다. \n📌 추가된 요구사항\n실전으로 넘어가기 전에, 추가할 요구사항이 있다. 앞선 요구사항은 하나의 key 즉, 하나의 row만 락을 거는 형식으로 구현되어 있다. 하지만 우리 회사 특성상 주문시 여러 상품을 동시에 상태 변경하기 때문에 한번에 여러 상품의 재고를 변경해야한다. 따라서 하나의 row가 아닌 여러 row에 락을 걸어야 한다. \n그렇다면 기존에 받는 키도 하나에서 여러개를 받게 되고 락도 동시에 여러개를 건다는 말이겠지? 정리하자면, 여러 개의 락을 동시에 걸고, 하나라도 실패하면 전체 실패하도록 하고 싶다는 것이다. 이때 난 RedissonMultiLock이라는 것을 사용했다. \n\n즉, 하나의 트랜잭션처럼 모든 락이 성공해야만 실행되도록 할때 사용된다. 그렇다는 말은 락을 해제할때도 한꺼번에 해제한다는 말과 동일하다. \n이제 추가된 요구까지 알아보았으니 본격적으로 테스트를 해볼까? 해당 내용은 다음편에 있다. \n참고) \nhttps://velog.io/@a01021039107/%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%B4%EB%A1%A0%ED%8E%B8\nhttps://helloworld.kurly.com/blog/distributed-redisson-lock/\nhttps://techblog.woowahan.com/17416/\nhttps://velog.io/@jinony/Spring-Boot-Apache-JMeter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8",
        "guid": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EA%B0%9C%EB%85%90",
        "isoDate": "2025-03-05T22:42:55.000Z"
      }
    ]
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "디지털 결제의 부상",
        "link": "https://www.thestartupbible.com/2025/03/rise-of-digital-payment.html",
        "pubDate": "Wed, 05 Mar 2025 21:38:00 +0000",
        "content:encodedSnippet": "10년마다 오는 큰 tech 물결을 잘 예측하고, 기회의 파도의 고점을 잘 타이밍 하면, 엄청나게 큰 사업을 만들 수 있다는 것을, 과거를 보면 잘 알 수 있다. 1960년대에 반도체의 미래를 보고 인텔이라는 회사가 만들어졌고, 이 반도체를 어떻게 활용할지 고민하면서 1970년대에 애플, 마이크로소프트, 오라클과 같은 회사들이 personal computer 시장을 만들면서 엄청난 기업으로 성장했다. 그 이후에 10년마다 아주 큰 기술의 물결이 출렁거렸는데, 1980년대 인터넷의 탄생, 1990년대 메인스트림 인터넷 서비스의 등장(구글, 아마존 등), 그리고 데스크탑에서 모바일로의 패러다임 변화 등이 이런 큰 물결이다. 중간 중간에 다양한 회사들이 등장했고, 이 중 성공한 곳들이 많지만, 정말 대박급으로 성공한 회사들은 모두 다 “앞으로 10년 동안 어떤 기술의 물결이 올까?”를 예측하고 여기에 베팅한 곳들이라고 난 생각한다.\n앞으로 10년은 어떤 테마가 거대한 유니콘들을 탄생시킬까? 이미 이 테마는 AI로 정해진 것 같다. 이렇게 많은 돈이 짧은 시간 동안 한 테마에 투입되는 걸 우리가 과거에 본 적이 없을 정도로 요새 AI 분야에 큰 투자와 관심이 집중되어 있다. 분명히 AI 분야에서 엄청난 혁신이 일어날 것이고, 이 혁신을 적극적으로 수용하는 회사들이 앞으로 미래를 이끌어 갈 것이다.\n여기에 나는 디지털 결제라는 테마를 하나 더 추가하고 싶다. 과거 10년 동안 세상의 모든 기술이 비약적으로 발전했다. 사람을 닮은 로봇이 등장하고, 사람 없이 스스로 운전하는 자율주행 자동차가 하늘을 날기도 하는데, 이런 변화 속에서 유독 돈이 움직이는 방법과 기술엔 큰 발전이 없었다. 아니, 디지털 결제는 오히려 여러 가지 면에서 후퇴하고 있는 것 같다. 특히, 돈이 국경을 넘어가는 과정과 이를 가능케 하는 기술을 보면, 우린 삶의 구석구석에 internet of everything을 적극적으로 도입하지만, 유독 internet of money는 구현되지 않는 것 같다.\n내가 합법적으로 열심히 번 돈을 사용하거나, 투자하거나, 또는 다른 사람에게 보낼 때, 우린 기술이 덜 발달했고, 인터넷이 없던 시절과 크게 다르지 않은 규제를 극복해야 하고, 오히려 그때보다 더 복잡한 인증 절차를 거쳐야 한다. 기술의 발전으로 우리 생활에서 많은 규제가 완화되고, 불필요한 비용을 발생시키는 중개인들이 줄었는데, 오히려 돈이 움직이는 프로세스를 보면 규제는 더 많아졌고, 아직도 불필요한 중개인들이 하는 것도 없이 수수료를 챙기고 있다. 돈세탁 방지와 고객확인제도는 디지털화가 아니라 오히려 더 아날로그화되어 가고 있다.\n이걸 내가 전혀 이해 못 하는 건 아니다. 돈은 정말 중요하고, 이 중요한 돈이 이동하면 – 특히, 국경을 넘으면 – 여러 가지를 신경 써야 한다. 통화는 나라마다 다르고, 그 통화를 지배하는 법과 규제는 가는 곳마다 다르므로, 범죄가 발생할 수 있는 구멍이 가장 많은 게 금융 쪽이다. 금융 범죄자들은 더 똑똑해지고, 악랄해지고, 대범해져서, 우리가 지금까지 경험하지 못했던 금융 범죄가 계속 등장하고, 이런 범죄를 막아야 하는 인공지능 기술이 오히려 더 많은 범죄를, 더 지능적으로 만드는데 악용되고 있기도 하다. 그러면, 정부 당국은 새로운 범죄를 차단하고 예방하기 위해서 더욱더 빡빡하고 엄격한 법과 규제를 만들 것이고, 이 과정을 거치면서 디지털 결제는 더욱더 아날로그화되면서 기술로부터 멀어질 것이다.\n나는 이 문제를 해결할 수 있는 건 블록체인 기술과 디지털 자산이라고 확신한다. 지난 10년 동안 internet of money와 digital network of money를 만들기 위해 이 분야의 다양한 이해관계자들이 노력을 많이 했는데, 솔직히 매번 규제에 부딪히거나, 인간의 탐욕에 스스로 굴복했다. 하지만, 10년 동안의 시행착오를 거치면서, 기술은 발전했고, 이 시장을 바라보는 시각도 많이 변했다는 걸 요샌 체감한다. 특히, 이번에 다 바뀐, 미국 SEC에서 디지털 자산을 담당하는 공무원들이 시장의 의견을 적극 수용해서 현실적으로 적용 가능한 법과 규제를 잘 만들면, 이게 한국을 포함한 전 세계의 표준이 되지 않을까,,,개인적으로 은근히 기대하고 있다.\n물론, 아직도 사기꾼들은 많고, 이 분야에서 일어나면 안 될 사기가 너무 많이 발생한다. 그래서, 내가 이런 이야기를 하면, 잘 모르는 분들은 코인 생각을 할 것인데 절대로 내가 밈코인이나 잡코인을 옹호하는 건 아니다. 나는 오히려 이젠 변동성의 리스크가 어느 정도 제거된 스테이블코인과 이 자산의 움직임과 투명성을 더 강화할 수 있는 기술을 연구하면서 좋은 디지털 결제 제품을 개발하는 창업가들이 앞으로 10년 동안 엄청난 사업을 만들 수 있을거라고 생각한다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/03/rise-of-digital-payment.html#respond",
        "content": "10년마다 오는 큰 tech 물결을 잘 예측하고, 기회의 파도의 고점을 잘 타이밍 하면, 엄청나게 큰 사업을 만들 수 있다는 것을, 과거를 보면 잘 알 수 있다. 1960년대에 반도체의 미래를 보고 인텔이라는 회사가 만들어졌고, 이 반도체를 어떻게 활용할지 고민하면서 1970년대에 애플, 마이크로소프트, 오라클과 같은 회사들이 personal computer 시장을 만들면서 엄청난 기업으로 성장했다. 그 이후에 10년마다 아주(...)",
        "contentSnippet": "10년마다 오는 큰 tech 물결을 잘 예측하고, 기회의 파도의 고점을 잘 타이밍 하면, 엄청나게 큰 사업을 만들 수 있다는 것을, 과거를 보면 잘 알 수 있다. 1960년대에 반도체의 미래를 보고 인텔이라는 회사가 만들어졌고, 이 반도체를 어떻게 활용할지 고민하면서 1970년대에 애플, 마이크로소프트, 오라클과 같은 회사들이 personal computer 시장을 만들면서 엄청난 기업으로 성장했다. 그 이후에 10년마다 아주(...)",
        "guid": "https://www.thestartupbible.com/?p=9385",
        "categories": [
          "비트코인",
          "bitcoin",
          "crypto curreny",
          "internet",
          "technology",
          "unicorn"
        ],
        "isoDate": "2025-03-05T21:38:00.000Z"
      }
    ]
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "토스페이 3월 할인 이벤트와 쿠폰 혜택 총정리",
        "link": "https://blog.toss.im/article/tosspay-2025-03",
        "pubDate": "Wed, 05 Mar 2025 01:11:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}완연한 봄이 시작되는 3월, 계절이 바뀌면서 필요한 것들이 많아지는 시기죠. 환절기 필수품인 .css-q3ktjb{white-space:pre-wrap;font-weight:bold;}뷰티 & 건강 케어, 가벼운 봄 패션, 새로운 시작을 위한 IT & 도서 쇼핑까지, 토스페이 할인 이벤트를 똑똑하게 이용하면 더 알뜰한 3월을 누릴 수 있어요.\n토스페이 3월 한정 혜택, 놓치지 않도록 필요한 것만 쏙쏙 정리해서 알려드립니다.\n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}토스페이 3월 주요 할인 이벤트 모아보기\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n.css-mlvj3o{white-space:pre-wrap;color:#4593fc;font-weight:bold;}토스페이로 결제하고 자동 할인받기\n아래 혜택들은 결제 시 토스페이를 선택하면 자동으로 할인이 적용돼요..css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n🛫 해외직구 | 특가로 직구할 기회\n원래 저렴한 알리에서 더 저렴하게! 생활용품을 비롯해 모든 카테고리의 상품을 알뜰하게 직구할 기회 놓치지 마세요.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n✅ 알리 익스프레스\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n$100이상 구매 시 $12 할인 \n이벤트 기간: 25.03.17.~25.03.26.\n\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}알리익스프레스 바로 가기\n👗 패션 | 봄이 오면 옷장도 새롭게\n봄에는 가볍고 산뜻한 패션으로 변신해보는 건 어떨까요? ‘봄 직잭팟’ 프로모션 시즌에 토스페이로 결제하고 가성비 좋은 패션 쇼핑을 즐겨보세요.\n\n✅ 지그재그\n\n12만원 이상 구매 시 5천원 할인 \n이벤트 기간: 25.03.24.~25.04.07.\n\n\n지그재그 바로 가기\n💻 전자기기 | 새학기 & 업무 효율 UP!\n노트북부터 태블릿, 모니터, 다양한 부품까지 각종 컴퓨터 관련 제품을 할인된 가격으로 구매할 수 있어요.\n\n✅ 컴퓨존\n\n20만원 이상 결제 시 5% 할인(최대 5만원)\n기간: 25.03.11.~25.03.31.\n\n\n컴퓨존 바로 가기\n🏠 가전 | 효율적인 생활 가전으로 집 꾸미기\n필수 디지털 가전제품을 더 합리적인 가격으로 마련하세요.\n\n✅ 롯데온\n\n제품별 최대 10% 할인\n기간: 25.03.01.~25.03.31.\n\n\n롯데온 바로 가기\n📚 도서 | 봄날의 감성을 채울 책 쇼핑\n지식과 감성을 충전할 시간, 날씨가 풀리면 책 한 권 들고 여유로운 봄날을 즐겨야 해요. 나를 위한 생산적인 소비를 합리적인 비용에 할 수 있도록 도서 프로모션을 모아왔어요!\n\n✅ 알라딘\n\n3만원 이상 결제 시 2천원 할인\n기간: 25.02.28.~25.03.19.\n\n\n알라딘 바로 가기\n\n✅ 교보문고\n\n4만원 이상 결제 시 2천원 할인\n기간: 25.03.01.~25.03.15.\n\n\n교보문고 바로 가기\n\n✅ 예스24\n\n5만원 이상 결제 시 3천원 할인\n기간: 25.03.15.~25.03.16.\n\n\n예스24 바로 가기\n\n할인 쿠폰 발급받기\n아래 혜택들은 토스 앱에서 쿠폰을 발급받고, 해당 브랜드 앱에서 토스페이로 결제하면 자동으로 적용돼요.\n💄 뷰티&헬스케어 | 봄철 피부 관리, 건강 지키기 \n환절기로 건조한 날씨, 피부 & 건강 관리가 필요할 때, 봄맞이 수분을 채워줄 뷰티, 스킨케어 아이템과 면역력 강화를 위한 건강기능식품을 특별 혜택으로 만나보세요.\n\n✅ CNP - 스킨케어 제품 추천\n\n신규 고객 20%, 모든 고객 15% 할인 쿠폰\n기간: 25.03.01.~25.03.31.\n\n\n✅ 종근당건강몰 - 락토핏 추천\n.css-hokoge{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;counter-reset:numberedList;}.css-hokoge ul,.css-hokoge ol{margin:16px 0 0;}.css-hokoge>li{counter-increment:numberedList;margin-bottom:16px;padding-left:24px;}.css-hokoge>li:last-of-type{margin-bottom:0;}.css-hokoge>li>span{position:relative;}.css-hokoge>li>span>:first-child::before{content:counter(numberedList) '.';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n최대 22% 할인 쿠폰\n\n기간: 25.03.25.~25.03.27.(3일 동안은 22% 할인)\n\n\n12% 할인 쿠폰\n\n기간: 25.03.01.~25.03.31.\n\n\n\n👗 패션 | 봄이 오면 옷장도 새롭게\n운동복부터 편안한 데일리룩까지 편안함에 스타일도 잡는 안다르, 3가지 카테고리별로 쿠폰을 각각 다운로드받아 적용할 수 있어요. 카테고리별 혜택이 다르므로 최대 혜택을 받을 수 있는 쿠폰을 확인해보세요! \n\n기간: 25.03.01.~25.03.31.\n\n✅ 안다르 여성\n\n신규 고객 12% / 모든 고객 7% 할인 쿠폰\n\n✅ 안다르 언더웨어\n\n10% 할인 쿠폰\n\n✅ 안다르 맨즈웨어\n\n12% 할인 쿠폰\n\n\n🏬 백화점 | 프리미엄 쇼핑 \n비싸게 느껴지는 백화점 쇼핑도 더 합리적으로! 롯데백화점몰에서 패션, 뷰티, 리빙까지 모든 카테고리에 할인 쿠폰을 적용해 보세요.\n\n✅ 롯데백화점몰\n\n3.5% 할인 쿠폰 + a \n10일부터 16일 롯백위크 기간에는 쿠폰과 롯데백화점 자체 혜택을 중복해서 받을 수 있어요!\n기간: 25.03.01.~25.03.31.\n\n\n토스 앱에서 쿠폰 확인하기\n3월 토스 소식 \n🏪 편의점 최대 할인 이벤트 \n\n✅ GS25 \n\n3,000원 이상 토스페이 결제 시 1,500원 할인\n햄버거/샌드위치 토스페이 결제 시 50% 토스포인트 적립\n\n\n🔖 우리 동네 복권 받기\n\n✅ 최대 100만 토스포인트 복권 우리 동네에서 찾아보세요!\n\n지도에 표시된 동네 가게 방문하면 꽝없는 토스포인트 당첨!\n가게에 있는 행운 쿼카를 눌러 방문 인증만 하면 복권을 받을 수 있어요.\n최대 당첨금은 100만 토스포인트 💫\n기간: 25.03.06. ~ 25.03.23.\n\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n필요했는데 미뤄둔 것이 있다면 이번 기회에 나를 위한 작은 선물을 해보는 것은 어떨까요? .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}3월에만 누릴 수 있는 특별한 할인 혜택을 알차게 활용해 보세요. 다음 달에도 더 합리적인 선택을 할 수 있도록 가장 필요한 혜택만 골라서 돌아올게요!",
        "content": "지그재그, GS25, 알리익스프레스 할인·적립 쿠폰까지, 토스페이 2025년 3월 혜택 확인하기",
        "contentSnippet": "지그재그, GS25, 알리익스프레스 할인·적립 쿠폰까지, 토스페이 2025년 3월 혜택 확인하기",
        "guid": "https://blog.toss.im/article/tosspay-2025-03",
        "isoDate": "2025-03-05T01:11:00.000Z"
      },
      {
        "title": "최저임금 제도 개편의 모든 것",
        "link": "https://blog.toss.im/article/friendly-economics-1",
        "pubDate": "Fri, 28 Feb 2025 02:10:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}최저임금 제도 개편에 나선 정부\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1kxrhf3{white-space:pre-wrap;}정부가 2026년 최저임금 결정을 앞두고 37년 만에 최저임금 제도 개편 논의를 시작했어요. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}최저임금은 그동안 매년 3월 말 공익위원 9명, 사용자위원 9명, 근로자위원 9명으로 구성된 최저임금위원회가 90일간의 논의를 거쳐 결정되었어요. 서로 다른 이해관계를 가진 노동계와 경영계가 협의하는 자리인 만큼, 서로의 입장 차이를 줄이고 합의를 도출하는 과정은 늘 쉽지 않았죠. 실제로 1988년 최저임금 제도가 시행된 이후 노사 합의를 통해 최저임금이 결정된 건 단 7차례에 불과해요.\n정부는 원활한 합의를 통해 최저임금을 결정하는 새 제도를 모색하기 위해 지난해 11월에 최저임금 제도개선 연구회를 출범시켰어요. 이 연구회에서 나온 결과를 토대로 2월 17일 ‘최저임금 제도개선을 위한 노사 전문가 간담회’를 개최하기도 했죠. 이 간담회에서 정부는 위원회 규모를 조정하고 노사정이 추천하는 전문가의 의견을 더 반영하겠다는 계획을 밝혔어요. 다만, 이제 본격적으로 논의가 시작된 만큼 법을 개정하고 이를 실제로 적용하기까지는 시간이 걸릴 전망입니다.\n최저임금을 둘러싼 상반된 목소리\n2025년 최저임금이 지난해 9,860원에서 10,030원으로 1.7%(170원) 오르면서 우리나라는 최저임금 1만 원 시대가 열렸죠. 최저임금은 근로자들의 기본적인 삶을 보장하기 위해 만든 제도지만, 매년 금액이 인상될 때마다 그 적정선을 놓고 논란이 이어집니다.\n한쪽에서는 근로자의 생계비, 노동생산성, 소득분배율 모두를 고려해 최저임금이 더 올라야 한다고 주장합니다. 근로자의 소득을 물가상승률 이상으로 끌어올려야 생활이 안정되고 소비도 활성화될 것이라는 의견이죠.\n반대쪽에선 가파른 최저임금 상승은 근로자와 고용주 모두에게 도움이 안된다고 주장합니다. 최저임금이 갑자기 오르면 고용주가 인건비를 감당하기 어려워져 일자리를 줄일 것이고, 결국 저임금 근로자들이 일자리를 잃게 된다는 것입니다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n다른 나라의 최저임금 제도는 어떨까?\n다른 나라들의 최저임금 제도는 각국의 경제 상황과 노동시장 특성을 반영해 저마다의 방식으로 운영되고 있어요. 독일은 9인 위원회 체계를 통해 노사 간 신속한 협의를 이루어내고, 경제 상황에 민감하게 반응하여 실질적인 최저임금 인상 효과를 도모합니다. 미국은 연방정부가 기본 기준을 마련하는 한편, 각 주가 자체적인 기준과 협의 체계를 도입해 지역별 경제 현실과 사회적 요구를 유연하게 반영하는 제도를 운영하고 있죠. 일본은 18명의 전문가가 참여하는 중앙최저임금심의위원회를 통해 지역 및 산업별 특성을 면밀히 분석하여 맞춤형 최저임금을 결정하고 있습니다.\n아무쪼록 우리나라의 최저임금 제도도 충분한 협의를 거쳐 근로자와 고용주 모두에게 실질적인 도움이 되는 방향으로 개편되길 기대합니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 윤동해 Graphic 조수희 구정현",
        "content": "최저임금을 두고 서로 생각이 다른 이유",
        "contentSnippet": "최저임금을 두고 서로 생각이 다른 이유",
        "guid": "https://blog.toss.im/article/friendly-economics-1",
        "isoDate": "2025-02-28T02:10:00.000Z"
      },
      {
        "title": "토스인사이트, 초대 연구소장에 홍기훈 홍익대학교 교수 선임",
        "link": "https://blog.toss.im/article/TOSSINSIGHTHONG",
        "pubDate": "Fri, 28 Feb 2025 01:34:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}토스(운영사 비바리퍼블리카, 대표 이승건)의 금융경영연구소 ‘토스인사이트(Toss Insight, 대표 손병두)’가 초대 연구소장으로 홍기훈 홍익대학교 경영학과 교수를 선임했다고 28일 밝혔다.\n토스인사이트는 핀테크 업권을 중심으로 금융 관련 정책을 분석하고 트렌드를 연구하는 기관이다. 금융산업 전반에 유의미한 메시지를 전달하고, 금융기관으로서 토스의 사회적 기여도를 높이기 위해 설립됐다. 토스인사이트는 이러한 취지에 맞게 지난해 11월 금융 정책 전문가인 손병두 전 한국거래소 이사장을 대표로 선임한 바 있다.\n초대 연구소장으로 선임된 홍 교수는 1980년생으로 영국 케임브리지 대학교에서 경제학 박사 학위를 취득했다. 현재 홍익대학교 경영학과 재무 전공 부교수이자 홍익대학교 메타버스금융랩 고문으로 재직 중이다. 한국은행 Money&Banking 미래포럼 자문위원, 금융위원회 테크자문단 자문위원, 금융감독원 금융감독자문위원회 자문위원, 서울특별시 4차 산업혁명 위원회 위원, 한국핀테크산업협회 핀테크 ESG 위원회 전문위원 등도 역임했다.\n홍 소장은 “토스인사이트의 초대 소장으로서 핀테크 산업의 발전과 금융정책 연구에 기여하게 되어 매우 뜻깊게 생각한다”라며 “빠르게 변화하는 금융 환경 속에서 혁신적인 분석과 연구를 통해 토스가 금융 산업 내에서 더욱 중요한 역할을 할 수 있도록 최선을 다하겠다”라고 밝혔다. \n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}.css-wgpbp3{display:block;margin-top:6px;}.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}홍기훈 토스인사이트 초대 연구소장\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}홍기훈 소장 프로필\n▲케임브리지 대학교 경제학 박사 ▲홍익대학교 경영대학 재무전공 부교수 ▲홍익대학교 메타버스금융랩 고문 ▲한국은행 Money&Banking 미래포럼 자문위원 ▲금융위원회 테크자문단 자문위원 ▲금융감독원 금융감독자문위원회 자문위원 ▲금융감독원 가상자산 리스크협의회 위원 ▲서울특별시 4차 산업혁명 위원회 위원 ▲소비자분쟁조정위원회 전문위원 ▲삼성글로벌리서치 초빙연구위원 ▲Invest Korea 자문단 자문위원 ▲한국핀테크산업협회 핀테크 자문교수단 자문위원 ▲한국핀테크산업협회 핀테크 ESG 위원회 전문위원",
        "content": "“핀테크 산업의 발전과 금융정책 연구에 기여할 것”",
        "contentSnippet": "“핀테크 산업의 발전과 금융정책 연구에 기여할 것”",
        "guid": "https://blog.toss.im/article/TOSSINSIGHTHONG",
        "isoDate": "2025-02-28T01:34:00.000Z"
      },
      {
        "title": "토스씨엑스, 토스 10주년 기념 아동・청년 대상 금융교육",
        "link": "https://blog.toss.im/article/tosscx_edu",
        "pubDate": "Fri, 28 Feb 2025 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}토스 10주년 기념 공간 ‘스퀘어 오브 토스’에서 맞춤형 금융 교육 진행\n시설 아동 및 경계선지능청년 82명 참여… 실생활 금융 역량 강화\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n비바리퍼블리카(토스)의 비대면 상담 전문 계열사 토스씨엑스(대표 강희진)가 토스 10주년 기념 공간 ‘스퀘어 오브 토스(Square of Toss)’에서 아동복지시설 및 기관위탁시설 아동과 경계선지능청년을 대상으로 맞춤형 금융교육을 진행했다고 28일 밝혔다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n이번 교육은 금융 소외 계층의 금융 접근성과 이해도를 높이고 실생활에서 필요한 금융 지식을 제공하는 목적으로 기획했다. 오전 세션은 시설 아동 32명을 대상으로, 오후 세션은 경계선지능청년 50명을 대상으로 진행했다. 토스씨엑스 직원들이 강사로 직접 나섰다.\n\n토스씨엑스는 교육 참가자들의 적극적인 참여를 유도하기 위해 체험형 프로그램도 운영했다. 아동 대상 ‘경제 놀이터’에선 가상 은행에서 통장을 발급하고 가상 마트에서 물건 구매하는 등 체험을 하며 금융 개념을 자연스럽게 익힐 수 있도록 했다. 청년들에게는 금융 사기의 다양한 유형과 예방법을 소개한 후 ‘금융 골든벨’ 프로그램을 진행해 학습 내용을 복습하고 실생활에 적용할 수 있도록 했다.\n\n행사에 참여한 한 청년은 “금융 사기에 대해 막연하게 알고 있었는데, 실제 사례와 예방법을 배우면서 경각심을 갖게 됐다”며 교육의 유익함을 강조했다.\n\n김진원 토스씨엑스 소비자보호총괄은 “사회적 책임을 실천하며 금융 소외 계층이 외면 받지 않는 세상을 만들기 위해 노력하고 있다”며 “앞으로도 금융 사각지대에 놓인 이들을 위한 실질적인 지원 방안을 고민하고 실행해 나갈 계획”이라고 말했다.\n한편 토스10주년 기념 ‘스퀘어 오브 토스(Square of Toss)’는 다음 달 2일까지 운영된다. 이곳에서는 지난 10년간 토스가 만들어온 변화를 체험할 수 있는 전시가 진행 중이다. 28일부터 3일간 금융 생활과 삶의 변화 주제로 다양한 연사들의 토크 세션도 열린다.",
        "content": "토스 10주년 기념 공간 ‘스퀘어 오브 토스’에서 맞춤형 금융 교육 진행",
        "contentSnippet": "토스 10주년 기념 공간 ‘스퀘어 오브 토스’에서 맞춤형 금융 교육 진행",
        "guid": "https://blog.toss.im/article/tosscx_edu",
        "isoDate": "2025-02-28T00:00:00.000Z"
      },
      {
        "title": "배달 라이더라면 꼭 알아야 하는 종합소득세 가이드",
        "link": "https://blog.toss.im/article/tossmoment-1",
        "pubDate": "Thu, 27 Feb 2025 11:35:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}종합소득세 신고는 할 때마다 처음처럼 새롭죠. 불과 몇 년 전까지만 해도 플랫폼 배달 노동자에 대한 납세 제도가 없었기 때문에 배달 라이더에게 종합소득세는 여전히 낯설고 복잡한 개념일 수 있어요. 하지만 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}조금만 알면 세금 부담은 줄이고 돌려받을 수 있는 돈도 잘 챙길 수 있어요.\n소중한 시간을 투자해 이 콘텐츠를 찾아오신 227만 배달 라이더분들을 위해 종합소득세에 대해 꼭 알아야 할 정보를 쉽게 정리해드릴게요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}5월의 숙제, 종합소득세\n종합소득세는 매년 5월, 직전연도에 발생한 모든 소득을 합산해 신고하는 세금이에요. 종합소득세 과세 대상 소득은 크게 근로소득, 사업소득, 금융소득, 연금소득, 기타소득으로 나뉘어요. 배달 플랫폼을 통해 창출되는 수익은 사업소득으로 분류되기 때문에 종합소득세 신고 대상입니다.\n종합소득세는 근로소득처럼 회사가 세금을 대신 신고해 주지 않기 때문에 홈택스에서 직접 신고하거나 세무 대리인을 통해 신고해야 해요. 종합소득세 신고를 하지 않으면 세금 감면 혜택을 받을 수 없을 뿐만 아니라 가산세가 부과될 수도 있어요. 그러니 5월에 꼭 챙겨야 하는 숙제라고 할 수 있죠.\n\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n라이더마다 신고 방법이 달라요\n배달 라이더의 종합소득세 신고 방법은 직전연도 수입 금액에 따라 달라져요.\n\n\n\n지난해 수입이 3,600만 원 미만이라면 단순경비율*을 적용해 신고하는 게 일반적이에요. 경비를 하나하나 입증하더라도 80%에 달하는 단순경비율보다 높게 챙기는 건 어렵기 때문이죠.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}* 지난 한 해 수입이 3,000만 원이었다면 이 금액의 79.4%인 2,382만 원이 경비로 처리됩니다. 남은 618만 원만 소득 금액으로 잡히고 그에 대한 세금이 부과되는 것이죠.\n수입이 3,600만 원 이상 7,500만 원 미만이라면 간편장부를 작성하거나 기준 경비율을 적용해 신고할 수 있어요. 이 구간의 기준 경비율은 낮은 편이라, 기준 경비율을 적용하는 추계신고보다는 간편장부를 활용한 기장신고가 유리합니다.\n수입이 7,500만 원 이상이라면 세무사에게 맡기는 게 좋아요. 이 경우에는 복식부기라는 방식으로 신고해야 하는데, 회계 지식 없이 직접 작성하는 게 많이 어렵거든요. 복식부기는 돈이 어디서 와서 어디로 갔는지를 차변과 대변으로 나누어 한눈에 볼 수 있도록 기록하는 장부 작성법이에요.\n투잡인 경우에는.css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;} 연말정산을 했더라도 이와 별개로 종합소득세 신고를 해야해요. 연말정산 때 신고했던 근로소득과 사업소득을 합쳐서 계산하게 되죠. 연말정산 때 신고한 근로소득에 대해서는 이중으로 세금이 부과되지 않으니 걱정하지 않아도 돼요. 하지만 배달로 번 돈이 적다고 신고를 건너뛰면 가산세가 부과될 수 있으니 꼭 챙기셔야 해요! 직장인의 종합소득세에 관한 안내는 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}이 콘텐츠에서 더 자세히 참고할 수 있어요.\n꼼꼼한 절세를 위한 체크리스트\n홈택스나 세금 플랫폼마다 계산된 세금이 다른 경우를 본 적 있을 거예요. 그건 플랫폼마다 기본으로 불러오는 자료가 다르기 때문이죠. 이처럼 내가 혜택받을 수 있는 자료를 최대한 많이 내는 게 중요해요. \n배달 라이더는 업무 관련 비용을 경비로 인정받아 세금 부담을 줄일 수 있어요. 특히 직전연도 수입이 3,600만 원을 넘는다면 장부를 작성해야하니 나중에 경비로 사용한 것들을 증빙할 수 있도록 카드를 사용하거나 현금영수증을 받아둬야 해요.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n배달 라이더 종합소득세 신고 시 경비 처리가 가능한 항목\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n오토바이 비용: 취득 금액을 5년간 나눠서 비용 처리 가능\n유류비: 업무 관련 사용분 인정 가능\n수리 및 유지비: 타이어, 브레이크 패드 교체 등 정비 비용 처리 가능\n통신비: 배달 업무용 휴대폰 요금, 데이터 요금 일부 경비 처리 가능\n배달 장비: 헬멧, 배달 가방 등 장비 비용 인정 가능\n보험료: 라이더 업무용 차량 보험료 인정 가능\n\n\n세액공제 제도를 적극적으로 활용하는 것도 절세에 큰 도움이 돼요. 노란우산 공제는 매달 일정 금액을 납부하면 나중에 이자와 함께 돌려받을 수 있는 사업자를 위한 퇴직금 제도에요. 이 제도를 활용하면 연 최대 500만 원까지 소득공제 받을 수 있어요.\n간편장부 대상자가 복식부기로 신고하면 세액의 20%를 감면 받을 수도 있어요. 직전연도 소득이 7,500만 원 이하라면 간편장부 신고가 가능하지만, 세무사 비용보다 20% 감면액이 더 크다면 복식부기로 신고하는 게 유리할 수 있어요.\n그리고 국세청이 자동으로 환급해 줄 때는 기본 공제 150만 원만 적용돼요. 이때는 부양가족 공제가 반영되지 않으니, 부양가족이 있다면 꼭 추가로 신청해서 공제 받아야 해요.\n필요한 경비를 빼고, 공제 혜택을 적용하면 최종적으로 내야 할 종합소득세가 산출돼요. 직전연도에 원천징수로 미리 납부한 세금보다 계산된 세금이 적다면, 초과 납부한 금액은 환급받을 수 있어요. 꼼꼼하게 체크하는 게 중요한 이유죠.\n놓쳤던 세금은 경정청구로 찾아가세요\n내가 그동안 신고했던 세금이 항상 정답은 아니었을 수도 있어요. 그동안 놓친 환급액은 없는지 궁금하다면 경정청구 제도를 이용하면 돼요. 경정청구라는 이름만 보면 어렵게 느껴질 수 있지만, 한자를 풀어보면 별 거 아니에요. 바르게 고친다는 ‘경정(更正)’과 달라고 요구한다는 ‘청구(請求)’가 합쳐진 단어로, 잘못 냈던 세금을 바로잡아 다시 신고한다는 뜻입니다. \n단, 경정청구는 세금을 납부한 날로부터 5년 이내에만 신청할 수 있어요. 신고하지 않으면 받을 수 있었던 돈도 결국 사라진다는 거겠죠.\n토스에서는 내가 환급받을 수 있는 금액을 쉽게 확인할 수 있어요. 지금 바로 아래 버튼을 눌러 놓쳤던 세금을 찾아보세요!\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}내 환급액 확인해보기\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 윤동해 Graphic 조수희 이제현",
        "content": "한 번 읽어두면 두고두고 도움 될 거예요",
        "contentSnippet": "한 번 읽어두면 두고두고 도움 될 거예요",
        "guid": "https://blog.toss.im/article/tossmoment-1",
        "isoDate": "2025-02-27T11:35:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]