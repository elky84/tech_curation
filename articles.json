[
  {
    "id": 1,
    "imageUrl": "",
    "title": "Qodana For Code Quality in STEM",
    "description": "Your code drives discovery. Keep it precise. In STEM fields, software isn’t just a product, it underpins innovation, research, and life-critical infrastructure. Qodana brings advanced static code analysis to STEM software projects, helping ensure code quality, security, and compliance where it matters most. Qodana for STEM Why code quality matters in STEM Software in science, […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/qodana/2025/04/qodana-for-code-quality-in-stem/",
    "pubDate": "Tue, 22 Apr 2025 10:37:18 +0000",
    "creator": "Kerry Beetge",
    "categories": [
      "case-study-qodana",
      "qodana",
      "code-analysis",
      "stem"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Pure Virtual C++ 2025: Pre-Conference Videos",
    "description": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It is running on 30th April. The first half of our pre-conference videos is now available on YouTube. The videos are: MSVC C++23 Conformance Simplifying your Cross-Platform Development with Visual Studio C++ Dynamic Debugging How Debuggers Work A Year in Review: […]\nThe post Pure Virtual C++ 2025: Pre-Conference Videos appeared first on C++ Team Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-pre-conference-videos/",
    "pubDate": "Wed, 23 Apr 2025 18:46:32 +0000",
    "creator": "Sy Brand",
    "categories": [
      "Announcement",
      "C++",
      "Pure Virtual C++"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "(해결됨) 유니티 광고 붙이다 빌드 무한대기 상태 / Running Gradle...",
    "description": "이건 무슨 에러일까요?\n안드로이드 빌드에 광고 붙이려다 이상태가 되어버렸습니다.\n \n광고 ID 를 붙이라는거 같아서\nAdmob 설치하고 광고ID 만들어 입력해두었습니다.\n광고는 Unity Ads 를 사용할껀데 이래도 되나....\n이것저것 만지는데 빌드가 갑자기 안되네요\n \n내용\nResolving Android Dependencies\nRunning Gradle...\nC:\\project\\pto\\unity-block-away\\Temp\\PlayServicesResolverGradle\\gradlew.bat --no-daemon -b \"C:\\project\\pto\\unity-block-away\\Temp\\PlayServicesResolverGradle\\PlayServicesResolver.scripts.download_artifacts.gradle\" \"-PANDROID_HOME=C:/Program Files/Unity/Hub/Editor/6000.0.38f1/Editor/Data/PlaybackEngines/AndroidPlayer\\SDK\" \"-PTARGET_DIR=C:\\project\\pto\\unity-block-away\\Assets\\Plugins\\Android\" \"-PMAVEN_REPOS=https://maven.google.com/\" \"-PPACKAGES_TO_COPY=cohttp://m.google.android.gms:play-services-ads:23.6.0;androidx.constraintlayout:constraintlayout:2.1.4;com.google.android.ump:user-messaging-platform:3.1.0\" \"-PUSE_JETIFIER=1\" \"-PDATA_BINDING_VERSION=8.3.0\"\nExecuting command: C:\\project\\pto\\unity-block-away\\Temp\\PlayServicesResolverGradle\\gradlew.bat --no-daemon -b \"C:\\project\\pto\\unity-block-away\\Temp\\PlayServicesResolverGradle\\PlayServicesResolver.scripts.download_artifacts.gradle\" \"-PANDROID_HOME=C:/Program Files/Unity/Hub/Editor/6000.0.38f1/Editor/Data/PlaybackEngines/AndroidPlayer\\SDK\" \"-PTARGET_DIR=C:\\project\\pto\\unity-block-away\\Assets\\Plugins\\Android\" \"-PMAVEN_REPOS=https://maven.google.com/\" \"-PPACKAGES_TO_COPY=cohttp://m.google.android.gms:play-services-ads:23.6.0;androidx.constraintlayout:constraintlayout:2.1.4;com.google.android.ump:user-messaging-platform:3.1.0\" \"-PUSE_JETIFIER=1\" \"-PDATA_BINDING_VERSION=8.3.0\"\n \nresolve 해도 해결이 안되네요\n \n해결방법\n프로젝트를 새로 만들어서 게임 관련 파일들만 옮긴후에\nGoogleMobileAds-v10.0.0.unitypackage\n유니티용 Admob 패키지를 다시 설치했습니다.\n이 패키지는 버전업이 매우 자주 일어나는군요\nAdmob 패키지를 설치하고 나면 Auto Resolver 를 켜갰냐고 물어보는데\n문제가 있을 당시에는 이창이 없었던거 같습니다.\nEnable 을 눌러 켠후엔 다 잘 되네요\n시간 낭비 갑이였던 하루였습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1289",
    "pubDate": "Sun, 27 Apr 2025 15:08:29 +0900",
    "creator": "SIDNFT",
    "categories": [
      "프로그래밍/개발메모",
      "애드몹",
      "유니티"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "박보검 미담, 이래서 모두가 사랑할 수밖에 없다",
    "description": "박보검 미담은 그가 단순한 스타가 아닌, 인간적으로도 얼마나 따뜻한 사람인지를 보여주는 증거입니다. 연예계에 수많은 스타들이 있지만, 박보검처럼 모두에게 칭찬받는 사람은 드물죠. 다양한 미담이 전해지면서 팬이 아니더라도 그의 매력에 빠질 수밖에 없습니다.\n그의 미담 중 가장 유명한 것은 촬영 스태프들을 하나하나 챙기며 직접 감사 인사를 전했다는 일화입니다. 바쁜 스케줄 중에도 일일이 눈을 맞추며 인사하는 모습은 단순한 매너를 넘어선 진심 어린 배려였죠.\n또한 박보검은 팬서비스로도 유명합니다. 팬미팅 현장에서 직접 손편지를 써오거나, 오래 기다린 팬들에게 따뜻한 말 한마디를 건네는 모습은 SNS를 통해 수없이 공유되었고, 박보검 팬서비스라는 키워드는 늘 화제가 되곤 합니다.\n박보검의 성격을 드러내는 미담은 그의 봉사활동에서도 확인할 수 있습니다. 여러 차례 익명으로 기부하거나 자원봉사에 참여하는 모습은 소속사에서도 밝히지 않았던 사실들이 나중에 알려져 더욱 감동을 주었죠.\n심지어 방송국 스태프들 사이에서도 박보검은 \"감사합니다\", \"고생 많으셨어요\"라는 말을 가장 많이 하는 배우로 꼽힙니다. 이런 모습은 우연이 아닌, 그의 진정성 있는 인성을 보여주는 상징적인 부분입니다.\n팬들은 그의 일화를 접할 때마다 “이래서 박보검을 좋아할 수밖에 없다”며 감탄을 아끼지 않습니다. 최근 인터뷰에서도 그는 “좋은 사람이 되고 싶다”는 말을 여러 번 반복했으며, 이는 그가 보여주는 모든 행동에서 그대로 드러납니다.\n이렇듯 박보검 미담은 단순한 훈훈한 이야기를 넘어서, 우리 모두가 본받고 싶은 삶의 태도이기도 합니다. 연예인을 넘어 한 사람으로서의 모범이 되는 박보검의 진짜 이야기를 계속 기대하게 되는 이유입니다.\n마무리\n박보검의 미담은 단지 유명인의 착한 일화로 끝나지 않습니다. 그는 꾸준히, 그리고 진심으로 주변 사람들을 배려하며 자신의 삶을 살아가고 있습니다. 우리가 그를 좋아하고 응원하는 이유는 바로 그런 진정성에서 비롯된 것이죠. 그의 행보를 통해 우리도 따뜻한 사람으로 성장할 수 있기를 바랍니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://app-developer.tistory.com/entry/%EB%B0%95%EB%B3%B4%EA%B2%80-%EB%AF%B8%EB%8B%B4-%EC%9D%B4%EB%9E%98%EC%84%9C-%EB%AA%A8%EB%91%90%EA%B0%80-%EC%82%AC%EB%9E%91%ED%95%A0-%EC%88%98%EB%B0%96%EC%97%90-%EC%97%86%EB%8B%A4",
    "pubDate": "Wed, 23 Apr 2025 13:37:35 +0900",
    "creator": "브리핑허브",
    "categories": [
      "미담",
      "박보검",
      "박보검 이야기",
      "박보검 인성",
      "박보검 인터뷰",
      "박보검 착한 일화",
      "박보검 팬서비스",
      "연예인 미담",
      "훈훈한 연예인"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "&ldquo;에일리 결혼했어요&rdquo;&hellip;심장 터질 듯한 입장 순간, 모두가 울컥한 이유",
    "description": "반응형\n\n    \n    (adsbygoogle = window.adsbygoogle || []).push({});\n  \n가수 에일리가 드디어 웨딩마치를 울렸습니다. 팬들에게 '보여줄게'로 다짐했던 그녀는 이제 ‘평생 함께할 사람’을 보여주며 인생 2막을 열었습니다. 배우 출신 사업가 최시훈과 법적 부부가 된 지 약 8개월, 그 사랑의 결실을 축복하는 결혼식이 지난 4월 20일 서울 모처에서 열렸습니다.\n‘Heaven’의 주인공, 현실 속 천국에 입성하다\n에일리는 2012년 ‘Heaven’으로 데뷔한 이후 ‘보여줄게’, ‘첫눈처럼 너에게 가겠다’ 등 수많은 명곡을 통해 폭발적인 가창력과 감성으로 대중을 사로잡아왔습니다. 그런 그녀가 이번엔 사랑이라는 또 다른 감동을 안겨주었습니다.\n결혼식 이후 그녀는 SNS를 통해 “여러분, (에)일리 결혼했어요”라는 글과 함께 결혼식 영상을 공개했습니다. 영상 속 그녀는 수많은 하객들의 축복 속에 환한 미소로 신부 입장을 하고 있었고, 이를 지켜보는 모두가 울컥할 수밖에 없었습니다.\n그녀는 “수많은 하객 분들의 축하를 받으며 웨딩마치를 울렸어요. 정말 감사하고 행복한 날이었어요”라고 전하며 “앞으로 서로 의지하고 존중하며 사랑하는 예쁜 부부가 되겠다”는 다짐을 남겼습니다.\n“신부 입장 순간, 심장 터지는 줄”…최시훈의 진심 고백\n최시훈 역시 자신의 SNS를 통해 결혼식을 회상했습니다. “정말 꿈 같은 하루였다. 신부 입장을 바라보는데 심장이 터지는 줄 알았다. 눈물이 날 것 같았다”고 말하며, 그의 진심 어린 고백은 보는 이들의 마음을 뭉클하게 했습니다.\n그는 “하루가 어떻게 지나갔는지도 모르겠다. 날씨도 환상적이었고, 와주신 모든 분들께 진심으로 감사드린다. 평생 잊지 않겠다”라며 결혼식을 함께한 모든 이들에게 고마움을 전했습니다.\n무엇보다 “세상에서 가장 사랑하는 나의 아내 이예진. 우리의 러브스토리는 앞으로도 계속될 것이다”라는 말에서, 두 사람의 애정이 얼마나 깊은지 느껴졌습니다.\n법적 부부에서 공식 부부로…에일리♥최시훈, 그들의 러브 스토리\n사실 두 사람은 지난해 8월 혼인신고를 먼저 마친 상태였습니다. 법적으로는 이미 부부였지만, 가족과 지인들의 축복 속에서 결혼식을 올리고자 이번 자리를 마련한 것이죠.\n결혼식은 양가 가족뿐 아니라 많은 연예계 동료, 미국·한국 친구들이 참석한 가운데 따뜻한 분위기 속에서 진행됐습니다. 연예계 활동을 쉬고 현재 식음료 사업에 집중하고 있는 최시훈과 활발히 활동 중인 에일리는, 서로의 길을 존중하며 한 팀으로서 살아가고자 합니다.\n두 사람은 그 누구보다 ‘진정성’ 있는 모습으로 사랑을 키워온 커플입니다. 서로에 대한 깊은 신뢰와 배려가 있었기에 혼인신고라는 다소 이른 결정을 내릴 수 있었고, 이제는 결혼식을 통해 그 사랑을 공식적으로 축하받게 되었습니다.\nSNS 속 ‘찐 행복’…진짜 사랑이란 이런 것\n결혼식 이후 공개된 사진과 영상 속 두 사람은 내내 웃음이 끊이질 않았습니다. 평범한 러브 스토리가 아닌, 수많은 곡으로 사람들의 마음을 울렸던 가수와 현실 속 자신만의 천국을 찾은 사업가의 이야기. 그 자체만으로도 사람들의 마음을 따뜻하게 합니다.\n그녀의 팬들은 “진심으로 축하해요”, “예쁜 사랑 오래오래 하세요”, “이제는 감성 여왕에서 사랑꾼 여왕이네요” 등 응원의 메시지를 아낌없이 보냈습니다.\n결론\n에일리와 최시훈의 결혼은 단순한 스타의 결혼이 아니라, ‘진심’이 만들어낸 사랑의 결정체였습니다. 먼저 혼인신고를 마친 뒤 결혼식을 올리는 새로운 방식은, 두 사람의 상황과 가치관을 고려한 결과이며 많은 이들에게 진정한 사랑이 무엇인지 다시금 생각하게 만듭니다.\n우리는 종종 화려한 결혼식이나 겉모습에 치우쳐 사랑을 판단하곤 합니다. 하지만 에일리와 최시훈처럼 서로를 존중하고 배려하며 사랑을 지켜나가는 모습이야말로 진짜 결혼, 진짜 사랑이 아닐까요?\n앞으로도 두 사람이 서로의 가장 큰 팬이 되어, 인생의 모든 순간을 함께하길 진심으로 응원합니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://app-developer.tistory.com/entry/%E2%80%9C%EC%97%90%EC%9D%BC%EB%A6%AC-%EA%B2%B0%ED%98%BC%ED%96%88%EC%96%B4%EC%9A%94%E2%80%9D%E2%80%A6%EC%8B%AC%EC%9E%A5-%ED%84%B0%EC%A7%88-%EB%93%AF%ED%95%9C-%EC%9E%85%EC%9E%A5-%EC%88%9C%EA%B0%84-%EB%AA%A8%EB%91%90%EA%B0%80-%EC%9A%B8%EC%BB%A5%ED%95%9C-%EC%9D%B4%EC%9C%A0",
    "pubDate": "Tue, 22 Apr 2025 22:21:54 +0900",
    "creator": "브리핑허브",
    "categories": [
      "셀럽 웨딩",
      "에일리",
      "에일리 결혼",
      "에일리 웨딩",
      "연예계 커플",
      "연예계 핫이슈",
      "연예인 결혼",
      "최시훈",
      "최시훈 사업가",
      "혼인신고"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "프로파일러의 외부 코드 디컴파일로 숨겨진 인사이트 발견하기",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/VS_20250427/",
    "pubDate": "Sun, 27 Apr 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "Discord for WebStorm: Less Noise, More Signal",
    "description": "TLDR: We’ve revamped the JetBrains Community Discord with dedicated WebStorm channels for announcements, discussions, help, and Q&As to create a more valuable community resource. We’ll have live office hours on April 23rd to connect directly with our team. Not part of our Discord community yet? Join the JetBrains Community Discord here to start connecting with […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/webstorm/2025/04/discord-for-webstorm-less-noise-more-signal/",
    "pubDate": "Tue, 22 Apr 2025 08:00:00 +0000",
    "creator": "Jan-Niklas Wortmann",
    "categories": [
      "news",
      "community",
      "discord",
      "webstorm",
      "webstorm-2025-1"
    ]
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "토끼 마을을 구해라! 로그라이트 액션 '세피리아'",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2300",
    "pubDate": "Sat, 26 Apr 2025 16:16:03 +0900",
    "creator": "｜RULIWEB｜",
    "categories": [
      "게임툰"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "챗GPT 텍스트 워터마크 감지 및 제거 도구",
    "description": "챗GPT 텍스트 워터마크 제거 도구\nLLM으로 생성한 텍스트에 포함된 워터마크를 감지하고 제거하는 도구입니다\n\n      \n      \n워터마크 감지\n        워터마크 제거\n      \n\n    \n\n  \n[\\p{Emoji}])(?[\\uFE00-\\uFE0F])/gu;\n    let match;\n    \n    while ((match = emojiWithVSPattern.exec(text)) !== null) {\n      const emojiPos = match.index;\n      const vsPos = emojiPos + match.groups.emoji.length;\n      const vsChar = match.groups.vs;\n  \n      // 이미 감지된 위치가 아닌 경우만 처리\n      if (!detectedPositions.has(vsPos)) {\n        watermarks.count++;\n        watermarks.types.add('이모지 변형 선택자');\n        detectedPositions.add(vsPos);\n  \n        const unicode = `U+${vsChar.codePointAt(0).toString(16).toUpperCase().padStart(4, '0')}`;\n        watermarks.positions.push({\n          type: '이모지 변형 선택자',\n          position: vsPos,\n          char: vsChar,\n          unicode: unicode,\n          description: '이모지에 적용된 변형 선택자',\n          context: getContext(text, vsPos)\n        });\n      }\n    }\n  \n    // 2. 단독 제어 문자 패턴 검사\n    const patterns = [\n      {\n        type: '제로 너비 문자',\n        regex: /[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g,\n        description: '보이지 않는 공백이나 제어 문자'\n      },\n      {\n        type: '특수 공백',\n        regex: /[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g,\n        description: '일반 공백과 다른 특수 공백 문자'\n      }\n    ];\n  \n    // 이미 감지되지 않은 위치의 제어 문자만 검사\n    patterns.forEach(pattern => {\n      while ((match = pattern.regex.exec(text)) !== null) {\n        const pos = match.index;\n        \n        if (!detectedPositions.has(pos)) {\n          watermarks.count++;\n          watermarks.types.add(pattern.type);\n          detectedPositions.add(pos);\n  \n          const charCode = match[0].codePointAt(0);\n          const unicode = `U+${charCode.toString(16).toUpperCase().padStart(4, '0')}`;\n          \n          watermarks.positions.push({\n            type: pattern.type,\n            position: pos,\n            char: match[0],\n            unicode: unicode,\n            description: pattern.description,\n            context: getContext(text, pos)\n          });\n        }\n      }\n    });\n  \n    // 감지된 워터마크 위치 정렬\n    watermarks.positions.sort((a, b) => a.position - b.position);\n  \n    showDetectionResult(watermarks);\n    return watermarks;\n  }\n  \n  function getContext(text, position, contextSize = 20) {\n    const start = Math.max(0, position - contextSize);\n    const end = Math.min(text.length, position + contextSize);\n    const prefix = text.substring(start, position);\n    const suffix = text.substring(position + 1, end);\n    \n    return {\n      full: text.substring(start, end),\n      position: position - start,\n      prefix: prefix,\n      suffix: suffix\n    };\n  }\n  \n  function showDetectionResult(watermarks) {\n    const resultDiv = document.getElementById('detection-result');\n    \n    if (watermarks.count > 0) {\n      // 원본 텍스트를 가져옴\n      const originalText = document.getElementById('content-input').value;\n      \n      // 워터마크 위치를 정렬\n      watermarks.positions.sort((a, b) => a.position - b.position);\n      \n      // 결과 HTML 생성\n      let html = `\n        \n워터마크 감지 결과\n발견된 워터마크 수: ${watermarks.count}개\n워터마크 종류: ${Array.from(watermarks.types).join(', ')}\n전체 텍스트 (워터마크 강조 표시)\n`;\n  \n      // 전체 텍스트에 워터마크 표시\n      let lastPos = 0;\n      watermarks.positions.forEach(mark => {\n        html += escapeHtml(originalText.substring(lastPos, mark.position));\n        html += `${mark.char}[${mark.unicode}]`;\n        lastPos = mark.position + 1;\n      });\n      html += escapeHtml(originalText.substring(lastPos));\n  \n      html += `\n`;\n      resultDiv.innerHTML = html;\n    } else {\n      resultDiv.innerHTML = '\n워터마크가 발견되지 않았습니다.\n';\n    }\n  }\n  \n  function highlightContext(context) {\n    const pos = context.position;\n    const text = context.full;\n    return `${escapeHtml(text.substring(0, pos))}${escapeHtml(text.charAt(pos))}${escapeHtml(text.substring(pos + 1))}`;\n  }\n  \n  // HTML 이스케이프 함수\n  function escapeHtml(text) {\n    return text\n      .replace(/&/g, \"&\")\n      .replace(//g, \">\")\n      .replace(/\"/g, \"\"\")\n      .replace(/'/g, \"'\");\n  }\n  \n  // 워터마크 제거 함수\n  function removeWatermark(text) {\n    let cleaned = text\n      .replace(/[\\uFE00-\\uFE0F]/g, '')\n      .replace(/[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g, '')\n      .replace(/[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g, ' ');\n  \n    document.getElementById('removal-result').innerHTML = `\n      \n워터마크 제거 결과\n${cleaned}\n        \n\n              \n\n            \n            결과 복사\n          \n        \n\n        \n        복사 완료\n      `;\n      \n      // 3초 후 버튼 상태 복원\n      setTimeout(() => {\n        copyButton.classList.remove('copied');\n        copyButton.innerHTML = `\n          \n            \n            \n\n          \n          결과 복사\n        `;\n      }, 3000);\n    } catch (err) {\n      console.error('복사 실패:', err);\n    }\n  \n    // 선택 해제\n    window.getSelection().removeAllRanges();\n  }\n  \n  // 이벤트 리스너 수정\n  document.getElementById('detect-button').onclick = function() {\n    const text = document.getElementById('content-input').value;\n    // 제거 결과 초기화\n    document.getElementById('removal-result').innerHTML = '';\n    detectWatermark(text);\n  };\n  \n  // 워터마크 제거 함수 수정\n  document.getElementById('remove-button').onclick = function() {\n    const text = document.getElementById('content-input').value;\n    const originalWatermarks = detectWatermark(text);\n    const cleaned = removeWatermark(text);\n    const remainingWatermarks = detectWatermark(cleaned);\n  \n    // 제거 작업 결과 표시\n    document.getElementById('detection-result').innerHTML = `\n      \n워터마크 제거 작업 결과\n원본 워터마크 수: ${originalWatermarks.count}개\n제거된 워터마크 수: ${originalWatermarks.count - remainingWatermarks.count}개\n 0 \n            ? `\n남은 워터마크 수: ${remainingWatermarks.count}개\n남은 워터마크 종류: ${Array.from(remainingWatermarks.types).join(', ')}\n`\n            : '\n모든 워터마크가 성공적으로 제거되었습니다!\n'\n          }\n        \n 0 \n          ? `\n제거되지 않은 워터마크 위치:\n`\n          : ''\n        }\n      \n {\n      html += escapeHtml(text.substring(lastPos, mark.position));\n      html += `${mark.char}[${mark.unicode}]`;\n      lastPos = mark.position + 1;\n    });\n    \n    html += escapeHtml(text.substring(lastPos));\n    return html;\n  }\n  \n  // content-input에 입력 이벤트 리스너 추가\n  document.getElementById('content-input').addEventListener('input', function() {\n    // 제거 결과 초기화\n    document.getElementById('removal-result').innerHTML = '';\n    // 감지 결과도 초기화 (선택사항)\n    document.getElementById('detection-result').innerHTML = '';\n  });\n  \nAI가 생성한 텍스트 속 보이지 않는 워터마크를 찾아내는 도구입니다. ChatGPT 등 LLM이 남기는 특수 문자를 쉽게 감지하고 제거할 수 있는 웹 프로그램의 작동 원리와 사용법을 알아보세요.\nAI 텍스트 워터마크 감지 및 제거 도구 소개  ️‍♂️\n최근 ChatGPT와 같은 AI 모델들이 생성하는 텍스트에 눈에 보이지 않는 워터마크가 삽입된다는 사실이 알려져 논란이 되고 있어요. 특히 GPT-o3와 GPT-o4 mini 같은 최신 모델에서 이런 현상이 발견되고 있죠. 이러한 보이지 않는 워터마크를 감지하고 제거할 수 있는 웹 프로그램입니다.\n \n워터마크란 무엇인가요?  \nAI 텍스트 워터마크는 육안으로는 보이지 않지만, 텍스트에 숨겨진 특수 유니코드 문자들입니다. 주로 다음과 같은 종류가 있어요:\n제로 너비 문자: 화면에 표시되지 않는 공백이나 제어 문자\n특수 공백: 일반 공백처럼 보이지만 다른 코드를 가진 특수 유니코드 문자\n이모지 변형 선택자: 이모지 뒤에 붙어 변형을 주는 특수 문자\n이런 특수 문자들은 일반적인 텍스트 에디터에서는 확인하기 어렵지만, 특정 도구를 사용하면 감지할 수 있습니다.\n \n워터마크 감지/제거 웹 프로그램 기능 소개  \n이 웹 프로그램은 다음과 같은 주요 기능을 제공합니다:\n1. 워터마크 감지 기능\nAI가 생성한 텍스트에 숨겨진 워터마크를 찾아냄\n발견된 워터마크의 수와 종류를 표시\n워터마크가 위치한 곳을 시각적으로 강조 표시\n2. 워터마크 제거 기능\n감지된 워터마크를 모두 제거하거나 일반 문자로 변환\n원본과 정리된 텍스트 비교 제공\n정리된 텍스트를 쉽게 복사할 수 있는 기능\n3. 상세 분석 기능\n워터마크의 유니코드 값 표시\n텍스트 내 워터마크의 정확한 위치 정보 제공\n워터마크 제거 전후 비교 분석\n \n프로그램 사용 방법  \n기본 사용법\n텍스트 입력: 워터마크가 있는지 확인하고 싶은 텍스트를 입력 창에 붙여넣습니다.\n워터마크 감지: '워터마크 감지' 버튼을 클릭하여 텍스트 내 워터마크를 찾습니다.\n워터마크 제거: '워터마크 제거' 버튼을 클릭하여 감지된 워터마크를 제거합니다.\n결과 확인: 워터마크 감지 결과와 제거 결과를 각각 확인할 수 있습니다.\n정리된 텍스트 복사: '결과 복사' 버튼을 클릭하여 워터마크가 제거된 텍스트를 클립보드에 복사합니다.\n결과 해석하기\n워터마크 감지 후에는 다음과 같은 정보를 확인할 수 있습니다:\n발견된 워터마크 수: 텍스트에서 발견된 총 워터마크 수\n워터마크 종류: 발견된 워터마크의 유형(제로 너비 문자, 특수 공백, 이모지 변형 선택자 등)\n워터마크 위치: 원본 텍스트에서 워터마크가 발견된 위치가 강조 표시됨\n유니코드 정보: 각 워터마크의 유니코드 값(예: U+200B, U+2060 등)\n워터마크 제거 후에는:\n워터마크 제거 수: 성공적으로 제거된 워터마크의 수\n정리된 텍스트: 워터마크가 제거된 깨끗한 텍스트\n남은 워터마크: 제거하지 못한 워터마크가 있다면 그 정보\nAI 발전: AI 모델의 워터마킹 기술도 계속 발전하고 있으므로, 최신 모델에서는 새로운 유형의 워터마크가 있을 수 있습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483574",
    "pubDate": "Wed, 23 Apr 2025 23:54:18 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "AI, 미래기술/AI 챗봇 및 언어 모델",
      "ai 워터마크",
      "ai 텍스트 감지",
      "chatgpt 워터마크",
      "gpt-o3 워터마크",
      "워터마크 감지 도구",
      "유니코드 워터마크",
      "제로 너비 문자",
      "텍스트 워터마크 제거",
      "특수 공백 문자",
      "특수 문자 감지"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "지드래곤, 사나 태그하고 '빛삭'? 럽스타 의혹 진짜일까",
    "description": "지드래곤 사나 태그 논란, 무엇이 문제였나?\n지드래곤 사나 관련 이슈가 온라인에서 급속도로 확산 중입니다. 지난 22일, 지드래곤은 콜드플레이 내한 공연 현장을 SNS에 공유하며 트와이스 멤버 중 유독 사나만을 태그했는데요, 이 행위가 팬들 사이에서 열애 의혹으로 번졌습니다.\n팬들의 반응, 단순 팬심일까? 럽스타 의혹일까?\n지드래곤이 남긴 일본어 멘트 \"에?\"는 단순한 감탄사로 보일 수 있지만, 사나가 일본인이라는 점과 맞물리며 오해를 불러일으켰습니다. 팬들 사이에서는 \"지드래곤 사나 럽스타그램 아니냐\", \"트와이스 다 나왔는데 왜 사나만?\"이라는 반응이 쏟아졌습니다.\nSNS 게시물 ‘빛삭’으로 더 커진 의혹\n논란이 거세지자 지드래곤은 해당 게시물을 빠르게 삭제했습니다. 이 삭제가 오히려 의혹을 더욱 키우는 결과를 낳았죠. 많은 팬들은 \"지우지 않았더라면 오히려 별일 없다고 생각했을 텐데\"라는 반응을 보였습니다.\n콜드플레이와 트와이스의 특별한 무대\n한편, 트와이스는 이번 콜드플레이 내한 공연에 게스트로 참여하여 'We Pray' 무대를 선보였습니다. 지드래곤이 공연을 관람한 후 사나만을 언급한 배경에 대해 궁금증이 커지는 이유기도 하죠.\nSNS는 연예계의 ‘무기’인가 ‘리스크’인가\n이번 지드래곤 사나 논란은 연예인들의 SNS 사용이 얼마나 큰 파장을 일으킬 수 있는지를 보여줍니다. 작은 태그 하나, 짧은 멘트 하나가 열애설로 비화할 수 있는 시대. 대중은 스타의 일거수일투족을 감시하고 해석하려 합니다.\n스타의 SNS 관리, 전략이 필요한 시대\n지금은 단순한 ‘팬 소통’의 도구를 넘어서 브랜드 전략으로 SNS가 사용됩니다. 지드래곤 사나의 사례처럼, 무심코 올린 게시물 하나도 철저한 기획과 의도가 요구되는 시대임을 실감하게 합니다.\n마무리\n지드래곤과 사나를 둘러싼 열애 의혹은 결국 해프닝으로 마무리될 가능성이 높습니다. 하지만 이번 이슈를 통해 우리는 연예인의 SNS가 얼마나 큰 영향을 미치는지를 다시금 깨닫게 됩니다. 팬과 스타가 함께 만들어가는 건강한 디지털 문화를 기대해 봅니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://app-developer.tistory.com/entry/%EC%A7%80%EB%93%9C%EB%9E%98%EA%B3%A4-%EC%82%AC%EB%82%98-%ED%83%9C%EA%B7%B8%ED%95%98%EA%B3%A0-%EB%B9%9B%EC%82%AD-%EB%9F%BD%EC%8A%A4%ED%83%80-%EC%9D%98%ED%98%B9-%EC%A7%84%EC%A7%9C%EC%9D%BC%EA%B9%8C",
    "pubDate": "Thu, 24 Apr 2025 08:32:27 +0900",
    "creator": "브리핑허브",
    "categories": [
      "럽스타그램",
      "사나",
      "사나 열애설",
      "지드래곤",
      "지드래곤 사나",
      "지드래곤 사나 럽스타",
      "지드래곤 열애설",
      "콜드플레이",
      "트와이스"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "스토커와 같이 집착해라",
    "description": "공식 라이선스 스포츠용품을 판매하는 Fanatics라는 미국 회사가 있다. 한국에서는 잘 알려지지 않았지만, 미국인이라면 Fanatics 사이트 또는 이 회사가 운영하는 수많은 이커머스 플랫폼에서 뭐라도 한 번은 사 봤을 것이다. 미국 모든 대학교의 공식 라이선스 제품을 판매하고 있고, NBA, NFL, MLB 등 프로 스포츠 공식 라이선스 제품도 다 판매하는, 기업가치 약 40조 원의 거대한 이커머스 회사이다. 나도(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/04/be-obsessed-like-a-stalker-on-your-product-and-customers.html",
    "pubDate": "Sun, 27 Apr 2025 21:36:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "competition",
      "FoundersAtWork",
      "hustle",
      "product",
      "스타트업 바이블 QA"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "Mellum: How We Trained a Model to Excel in Code Completion",
    "description": "Code completion has always been a defining strength of JetBrains products. So, when adding AI into our products, we knew it had to deliver top-tier code completion. This post covers how we trained the model behind our cloud-based completion. Initial research: What about obvious model options? We started by testing both closed-source LLMs via APIs […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/ai/2025/04/mellum-how-we-trained-a-model-to-excel-in-code-completion/",
    "pubDate": "Thu, 24 Apr 2025 12:45:44 +0000",
    "creator": "Anton Semenkin",
    "categories": [
      "jetbrains-ai",
      "ai",
      "mellum"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "이 영상은 먼데 조회수가 500만이 나오나 ... / 전설의 레전드 질문 영상",
    "description": "아니 이영상 뭐길레 조회수가 500만이지 ㄷㄷ\n영상: https://www.youtube.com/watch?v=-4zNBne9v7w\n\n\n\n50초가 안되는 영상이며\n이 곡의 제목을 묻는 영상이며\n이곡의 제목을 묻고 있는 질문 영상이다.\n \n그렇다....\n이 영상은 평범하지 않다.\n전설로 돌아다니는 이상하게 묻고 똑바로 알려주는 시리즈의 그 전개 이다.\n \n영상의 설명은 몇년전 (?) 우연히 들었던 곡의 맬로디가 생각나 \n피아노로 쳐서 영상을 올린뒤 제목을 붇고 잇다.\n \n상황을 한줄 요약한 댓글\n생각 나는건 알겠는데 몇년전껄 기억해서 피아노로 친다는 것\n\n\n아주 잘 요약한 댓글도 있는데 좋아요가 2.4만이넹 \n그런데 이 댓글이 베스트 뎃글이 아니다.\n1위는 당연히 답변이다.\n\n\n좋아요 난리낫다.\n아쉽게도 수정됨이 붙어있는걸로 봐서\n오타가 난건지 한번 고쳤다.\nAether 라고 한데 그래서 이게 뭔가 해서 찾아봤다.\n \n영상: https://www.youtube.com/watch?v=MU3u1EU182o\n\n\n\n좋네요\n좋으면 됐지",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1283",
    "pubDate": "Fri, 25 Apr 2025 11:00:01 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "충격! AI가 몰래 심는 워터마크, 직접 만든 제거 도구 공개합니다",
    "description": "충격적인 사실! OpenAI의 최신 GPT 모델이 텍스트에 숨겨진 워터마크를 남긴다고요? 육안으로 보이지 않는 특수 문자로 AI 생성 텍스트를 몰래 표시하는 방법과 이를 감지하고 제거하는 도구를 직접 만든 과정을 공유합니다.\n\n\n \n충격! AI가 몰래 남기는 흔적, 직접 제거 도구 만들었어요  ️‍♂️\n진짜 깜짝 놀랐어요. 여러분도 ChatGPT나 최신 AI로 글 쓰고 계신가요? 저는 최근에 ChatGPT로 리포트 몇 개 작성하고 블로그 글도 좀 썼었는데... 근데 뭔가 이상한 느낌이 들더라구요.\n \n그러다 우연히 발견한 뉴스 기사! Rumi라는 회사에서 GPT-o3와 GPT-o4 mini 같은 최신 ChatGPT 모델이 사용자 모르게 텍스트에 워터마크를 숨겨놓는다는 걸 발견했대요. 헐, 내가 쓴 글도...? 바로 확인해봤죠. 그랬더니 정말로 있는 거 아니겠어요? 눈에는 안 보이지만 특수 문자로 몰래 표시를 해둔 거였어요.\n \n솔직히 말해서 좀 배신감이 들었어요. 내가 냈던 리포트에도 이런 게 있었다면? 교수님이 발견했다면? 생각만 해도 끔찍하더라구요. 그래서 직접 이런 워터마크를 감지하고 제거할 수 있는 도구를 만들어보기로 했습니다.\n \n도대체 이게 뭔가요? AI의 숨겨진 워터마크  \n일단 이 워터마크가 뭔지부터 알아봤어요. 기사에 따르면 이 워터마크는 주로 긴 응답에서 발견되며, 일반 공백처럼 보이지만 다른 ASCII 코드를 가진 특수 유니코드 문자(주로 Narrow No-Break Space)를 사용한다고 해요.\n제가 알아본 바로는 이 워터마크는 주로:\n제로 너비 문자 - 눈에 보이지 않는 공백이나 제어 문자\n특수 공백 - 일반 공백처럼 보이지만 다른 ASCII 코드를 가진 유니코드 문자\n이모지 변형 선택자 - 이모지 뒤에 붙어 변형을 주는 특수 문자\n이런 것들로 구성되어 있더라구요.\n사실 OpenAI는 공식적으로 \"워터마크가 아니라 대규모 강화학습의 특이점\"이라고 변명(?)했지만... 글쎄요, 그게 그거 아닌가요?  \n \n제가 직접 만든 워터마크 감지/제거 도구 ⚒️\n저는 프론트엔드 개발자니까, 바로 웹 기반 도구를 만들기로 했어요. VS Code에서 Github Copilot의 도움을 받아 금방 만들 수 있었죠. (AI의 도움을 받아 AI 워터마크를 제거하다니, 아이러니하네요 ㅋㅋ)\n제가 만든 도구는 다음과 같은 기능을 해요:\n워터마크 감지: 텍스트에 숨겨진 워터마크를 찾아내고 어떤 종류인지 알려줌\n워터마크 위치 표시: 어디에 워터마크가 있는지 시각적으로 강조해줌\n워터마크 제거: 발견된 워터마크를 모두 삭제하고 깨끗한 텍스트로 변환\n결과 복사: 정리된 텍스트를 클립보드에 바로 복사할 수 있음\n가장 놀라웠던 건 제가 몇 달 전에 ChatGPT로 작성한 이메일과 보고서를 넣어봤더니 정말로 워터마크가 있더라구요! 주로 긴 문단 사이사이에 특수 공백 문자가 숨어 있었어요.\n \n2025.04.23 - [AI, 미래기술/AI 챗봇 및 언어 모델] - 챗GPT 텍스트 워터마크 감지 및 제거 도구\n \n \n소스 코드로 살펴보는 워터마크 감지 방법  \n제가 만든 도구의 핵심 부분을 좀 공유해드릴게요. 워터마크를 어떻게 감지하는지 코드로 보면 이해가 쉬울 것 같아서요.\nfunction detectWatermark(text) {\n  const watermarks = {\n    count: 0,\n    types: new Set(),\n    positions: []\n  };\n\n  // 1. 이모지+변형선택자 패턴 검사 (예:   + \\uFE0F)\n  const emojiWithVSPattern = /(?<emoji>[\\p{Emoji}])(?<vs>[\\uFE00-\\uFE0F])/gu;\n  \n  // 2. 제로 너비 문자 (보이지 않는 특수 문자)\n  const zeroWidthChars = /[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g;\n  \n  // 3. 특수 공백 (일반 공백처럼 보이지만 다른 코드를 가진 문자)\n  const specialSpaces = /[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g;\n  \n  // 실제 감지 로직...\n}\n\n \n워터마크를 제거하는 코드는 더 간단해요:\nfunction removeWatermark(text) {\n  let cleaned = text\n    // 이모지 변형 선택자 제거\n    .replace(/[\\uFE00-\\uFE0F]/g, '')\n    // 제로 너비 문자 제거\n    .replace(/[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g, '')\n    // 특수 공백을 일반 공백으로 변환\n    .replace(/[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g, ' ');\n\n  return cleaned;\n}\n\n \n이런 워터마크가 왜 문제가 될까요?  \n처음엔 \"그냥 보이지 않는 특수 문자일 뿐인데 뭐가 문제지?\"라고 생각했어요. 근데 좀 더 생각해보니 여러 문제가 있더라구요:\n학생들에게 특히 불공정해요 - 기사에 따르면 일부 국가에서는 ChatGPT가 5월 말까지 학생들에게 무료로 제공되는데, 워터마크의 존재를 모르는 학생들은 나중에 문제가 될 수 있어요.\n개인정보 문제 - 내 글이 AI로 작성됐다는 정보가 내 동의 없이 포함된다는 건 좀 이상하지 않나요?\n부정확한 판단 우려 - 워터마크 감지 도구가 실제 AI 생성 텍스트가 아닌데도 오탐지하면 큰 문제가 될 수 있어요.\n쉽게 우회 가능한데 의미가 있나? - 결국 이런 워터마크는 이렇게 도구만 있으면 쉽게 제거할 수 있어서 실효성이 의문이에요.\n \nAI 워터마크 없는 글쓰기, 어떻게 해야 할까요? ✍️\nRumi에서도 제안했듯이, 저는 과정 중심의 접근법이 더 중요하다고 생각해요:\n여러 초안을 만들어보세요 - AI의 결과물을 그대로 사용하지 말고, 자신의 아이디어를 섞어 발전시키세요.\n워터마크 확인 후 제거하기 - 제출 전에 워터마크를 확인하고 제거하는 습관을 들이세요.\n맞춤형 AI 활용하기 - 자신의 목적과 스타일에 맞게 AI를 조정해서 사용하세요.\n실시간 협업 활용하기 - 동료들과 함께 작업하면 AI 텍스트와 인간 텍스트의 구분이 자연스럽게 이루어져요.\n저도 이 도구를 만들었지만, 부정직하게 사용하라는 의미는 아니에요. 오히려 AI가 우리 모르게 하는 일을 투명하게 알 수 있도록 하는 게 목적이었어요.\n\n\n마치며: 투명한 AI 사용을 위하여  \nAI 기술이 발전할수록 이런 워터마킹 기술도 계속 진화할 거예요. 하지만 중요한 건 이런 기술이 투명하게 공개되고 사용자가 자신의 데이터와 텍스트에 대한 통제권을 가져야 한다는 점이라고 생각해요.\n여러분은 어떻게 생각하시나요? AI 워터마크에 대해 알고 계셨나요? 아니면 저처럼 놀라셨나요? 댓글로 의견 남겨주시면 함께 이야기해봐요!\n워터마크 관련 자주 묻는 질문 ❓\nQ: 모든 AI 텍스트에 워터마크가 있나요?\nA: 아니요, 기사에 따르면 주로 GPT-o3와 GPT-o4 mini 같은 최신 모델에서 발견되며, 이전 모델인 GPT-4o에서는 발견되지 않았습니다.\nQ: 워터마크가 있는지 쉽게 확인하는 방법은?\nA: SoSciSurvey의 문자 뷰어나 VS Code와 같은 코드 에디터에서 확인할 수 있습니다.\nQ: 워터마크를 제거하면 불법인가요?\nA: 현재까지 이를 불법으로 규정한 법률은 없습니다.\nQ: 워터마크 없이 AI 텍스트를 생성할 수 있나요?\nA: 이전 버전의 GPT 모델이나 다른 AI 모델은 워터마크가 없는 경우가 많습니다.\nQ: 워터마크 제거 도구는 어디서 구할 수 있나요?\nA: 제가 만든 도구는 곧 깃허브에 오픈소스로 공개할 예정입니다.\n\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"모든 AI 텍스트에 워터마크가 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"아니요, 기사에 따르면 주로 GPT-o3와 GPT-o4 mini 같은 최신 모델에서 발견되며, 이전 모델인 GPT-4o에서는 발견되지 않았습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"워터마크가 있는지 쉽게 확인하는 방법은?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"SoSciSurvey의 문자 뷰어나 VS Code와 같은 코드 에디터에서 확인할 수 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"워터마크를 제거하면 불법인가요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"현재까지 이를 불법으로 규정한 법률은 없습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"워터마크 없이 AI 텍스트를 생성할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"이전 버전의 GPT 모델이나 다른 AI 모델은 워터마크가 없는 경우가 많습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"워터마크 제거 도구는 어디서 구할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"제가 만든 도구는 곧 깃허브에 오픈소스로 공개할 예정입니다.\"\n    }\n  }]\n}",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483575",
    "pubDate": "Thu, 24 Apr 2025 10:33:18 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "AI, 미래기술/AI 챗봇 및 언어 모델",
      "ai 워터마크",
      "ai 텍스트 감지",
      "chatgpt 워터마크",
      "gpt-o3 워터마크",
      "워터마크 감지 도구",
      "유니코드 워터마크",
      "제로 너비 문자",
      "텍스트 워터마크 제거",
      "특수 공백 문자",
      "특수 문자 감지"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "2025-04 현재 플라자 합의 비슷한 일이 일어나고 있다.",
    "description": "영상: https://www.youtube.com/watch?v=L7W702-Z8dE\n\n\n\n \n \n플라자 합의는 1985년 9월 22일에 있었습니다.\n물론 이 당시에는 플라자 합의의 내용이 알려지지 않았고 그냥 회의했다 정도만 알려졌습니다.\n1년정도 지나 분석해보니 일본의 환율이 어마어마하게 내려가게 되었습니다.\n \n \n이번에도\n현재도 미국은 관세를 통한 엄청난 영향을 보여줬었고 90일 연기한 상태입니다.\n힘을 보여주고 이제 합의 하자는 것이죠\n \n미국의 단기채권을 장기 채권으로 전환이 시급한 문제라 이것을 진행하는게 아닌가 하는 추측을 영상에서 합니다.\n예를들어 한국이가서 우리가 채권 사줄태니 중국의 2차전지를 막아달라고 한다면 한국이 2차전지 시장을 크게 먹을 수 있을 것입니다.\n반대로 중국이 와서 한국보다 더 많은 국채를 해결해준다면 미국은 중국의 베터리도 받아들일 수 있을 것입니다.\n물론 시진핑은 그러지 않겠지만 차기 세력은 그런 결정을 할 수도 있겠죠\n현재도 시진핑은 우리는 협상같은거 안한도고 하지만\n트럼프는 현재 협의 중이라고 밝힌 상태입니다.\n바이든이 발행한 미국의 단기채권을 장기채권으로 돌려면 미국은 부채의 짐에서 탈출이 가능합니다.\n영상에서는 이 문제가 해결될 수도 있지만\n반 미국 세력이 생겨나 그들만의 단톡방을 파게될 가능성도 있다고 봅니다.\n항상 미국이 이긴다고 봐서는 안되고 다양한 자산군에 분산해 두는게 중요할 것같습니다.\n약달러로 간다면 미국주식이 오르더라도 손실이 날 수도 있으니 안심해선 안되고 \n적당히 오르면 적당히 빠진 자산을 채워넣는 일을 해야할 것입니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1286",
    "pubDate": "Fri, 25 Apr 2025 22:14:35 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브",
      "미국",
      "플라자합의"
    ]
  }
]