[
  {
    "id": 1,
    "imageUrl": "",
    "title": "From Redmond to San Diego: VS Live! Highlights, Session Examples, and What’s Next",
    "description": "There’s something special about hosting developers at Microsoft HQ — and this year’s Visual Studio Live! Redmond reminded me why I love these events. The energy in every room was electric. From the moment the first session kicked off, developers leaned in, asked smart, challenging questions, and took every opportunity to connect with the Product […]\nThe post From Redmond to San Diego: VS Live! Highlights, Session Examples, and What’s Next appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/from-redmond-to-san-diego-vs-live-highlights-session-examples-and-whats-next/",
    "pubDate": "Thu, 14 Aug 2025 00:36:07 +0000",
    "creator": "Jim Harrer",
    "categories": [
      "Visual Studio",
      "Events",
      "Training",
      "Visual Studio Live!",
      "vslive"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "New Quarter, New Qodana 2025.2 Release Highlights ",
    "description": "Following the recent rollout of our new Insights dashboard, Native mode, Self-Hosted Lite version, SSO functionality, and Visual Studio plugin, our Qodana 2025.2 update promises another round of improvements and extensions. Take a look at what we’ve been doing as we focus on providing greater access to code quality and security in your organization, and […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/qodana/2025/08/qodana-2025-2-release/",
    "pubDate": "Thu, 14 Aug 2025 13:32:29 +0000",
    "creator": "Kerry Beetge",
    "categories": [
      "features",
      "releases",
      "go",
      "kotlin",
      "owasp",
      "python",
      "qodana",
      "security-reviews"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "탁월해지기",
    "description": "2001년도에 출간된 짐 콜린스의 책 ‘Good to Great’은 당시에 아주 화제가 됐다. 웬만한 경영대학원에서 가르치는 그 어떤 수업보다 더 생생하고, 이론적이면서도 동시에 실용적인 경영 서적이었다. 한국에서는 ‘좋은 기업을 넘어 위대한 기업으로’라는 이름으로 번역되어 출간됐고, 이 책이 어떤 내용인지는 책의 제목이 그대로 설명해 준다. 좋은 기업이 되는 것도 어렵지만, 왜 어떤 기업은 그냥 좋은 기업으로 남고,(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/08/being-extraordinary.html",
    "pubDate": "Sun, 10 Aug 2025 21:34:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "FoundersAtWork"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "슈퍼앱의 허상",
    "description": "매우 적지만, 우리도 지금까지 몇 개의 엑싯을 경험한 적이 있다. 쿠팡 같이 IPO를 한 경우도 있지만, 더 큰 회사에 인수되거나 비슷한 규모의 회사와 합병하면서 M&A를 통해 엑싯 한 경우가 대부분이다. 많지 않은 M&A를 통해서 내가 배운 게 하나 있다면, 좋은 엑싯을 위해서는 회사가 팔려야지, 팔아서는 안 된다는 것이다. 이게 무슨 말이냐 하면, 좋은 회사는 엑싯을(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/08/super-apps-are-not-built-in-a-day.html",
    "pubDate": "Wed, 13 Aug 2025 21:36:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "exit",
      "FoundersAtWork",
      "product",
      "strategy",
      "Strong"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "역설계",
    "description": "소프트웨어 엔지니어로 성장하면서 \"저 사람처럼 코드를 작성하고 싶다\" 라는 생각으로 프로젝트 코드를 그대로 따라친 적이 많다.\n원어민의 발음을 쉐도잉 (Shadowing) 하듯이 그들의 프로젝트 코드를 처음 Git log부터 순서대로 따라 작성했다.\n테스트 주도 개발 책에 예제를 활용해서 JUnit을 TDD로 직접 만들어 보거나, 스프링 프레임워크를 따라치면서 로드 존슨을 비롯한 여러 개발자들이 왜 당시에 이렇게 작성했는지 고민해보곤 했다.\n직접 하이버네이트의 기본 기능을 만들어보고 하이버네이트는 내부적으로 어떻게 구현했는지 비교해보기도 했다.\n이렇게 해당 프레임워크들의 Git log대로(고민의 흐름대로) 작성하다보면 그들의 생각을 조금은 엿볼 수 있었다.\n실무에서 무언가 내 의도대로 안되었을 때, 되어야 하는데 안되는 건지, 애초에 안되야 하는게 맞는건지를 조금은 구분할 수 있게 되어 문제가 발생하면 빠르게 예상 되는 지점을 좁힐 수 있었다.\n한때는 무라카미 하루키의 글을 필사하기도 했다.\n\"달리기를 말할 때 내가 하고 싶은 이야기\", \"직업으로서의 소설가\" 같은 책들은 그 당시의 생생한 주변 풍경을 너무 잘 묘사해서 이 표현을 너무 닮고 싶었다.\n히로시마의 선발 투수는 분명 다카하시였던 것으로 알고 있습니다.\n야쿠르트의 선발은 야스다였습니다. 1회 말, 다카하시가 제1구를 던지자 힐턴은 그것을 좌중간에 깔끔하게 띄워 올려 2루타를 만들었습니다. 방망이가 공에 맞는 상쾌한 소리가 진구 구장에 울려 퍼졌습니다. 띄엄띄엄 박수 소리가 주위에서 일었습니다.\n나는 그때 아무런 맥락도 없이, 아무런 근거도 없이 문득 이렇게 생각했습니다.\n‘그래, 나도 소설을 쓸 수 있을지 모른다’라고.\n그때의 감각을 나는 아직도 확실하게 기억합니다.\n하늘에서 뭔가가 하늘하늘 천천히 내려왔고 그것을 두 손으로 멋지게 받아낸 듯한 기분이었습니다.\n어째서 그것이 때마침 내 손안에 떨어졌는지, 그 이유는 잘 모르겠습니다. 그때도 몰랐고 지금도 모릅니다. 하지만 이유야 어찌 됐건 아무튼 그것이 일어났습니다.\n그것은 뭐라고 해야 할까, 일종의 계시 같은 것이었습니다. 영어에 epiphany라는 말이 있습니다. 일본어로 번역하면 ‘본질의 돌연한 현현顯現’ ‘직감적인 진실 파악’이라는 어려운 단어입니다.\n알기 쉽게 말하자면, ‘어느 날 돌연 뭔가가 눈앞에 쓱 나타나고 그것에 의해 모든 일의 양상이 확 바뀐다’라는 느낌입니다.\n바로 그것이 그날 오후에 내 신상에 일어났습니다.\n그 일을 경계로 내 인생의 양상이 확 바뀐 것입니다.\n데이브 힐턴이 톱타자로 진구 구장에서 아름답고 날카로운 2루타를 날린 그 순간에.\n[직업으로서의 소설가 - 제 2회 소설가가 된 무렵]\n컨퍼런스에서 누군가 이목을 끄는 장표를 만들었다면 그걸 사진을 찍어두고 적절한 때에 사용하기도 하고,\n유튜브, 팟캐스트 등에서 좋은 인터뷰 질문이 있으면 그걸 기억해두고 다음 우리 촬영때 그 질문을 응용해서 사용하기도 했다.\n혼자서 창작하는데는 재능이 없다고 생각하고 주변의 많은 재료들을 최대한 흡수해서 응용하는 것을 주로 하던 입장에서는 위로와 함께 좀 더 구체적인 노하우를 얻을 수 있었다.\n1부까지는 역설계라는 말에 어울리는 내용들이였지만, 2부 부터는 탁월한 성과를 내는 사람이 되는 구체적인 방법들을 전달한다.\n그래서 2부 부터는 역설계 내용과는 조금 거리가 있다고 느껴지긴 했지만, 그럼에도 2부 역시 배울게 많았다.\n성장을 위해 선행지표, 후행지표를 제대로 정하는 방법\n최대한 실행에 대한 리스크를 줄이는 방법\n반복적 연습이 아닌 전략적 연습을 수행하는 방법\n전문가에게서 값진 조언을 얻는 법\n등등 그간 보았던 여러 탁월함에 대한 책들의 종합 개론서 같은 느낌이 2부였다.\n당장 실행해야할 액션 아이템들도 얻었다.\n연구 팀은 중간고사 일주일 전에 학생들을 세 그룹으로 나눴다.\n첫 번째 그룹에게는 중간고사에서 좋은 성적을 받는 것을 상상하라고 말했다.\n두 번째 그룹에게는 좋은 성적이 아니라 공부하는 과정을 상상하라고 했다.\n세 번째 그룹에게는 일주일 동안 공부한 시간을 기록하게 했다.\n...\n어느 그룹이 중간고사에서 가장 좋은 성적을 받았을까?\n당연히 공부하는 과정을 상상한 그룹이었다.\n이들은 실제로 더 열심히 공부했고 불안감이 줄었으며 성적도 더 높게 나왔다.\n...\n대조군과 비교할 때, 짐캐리처럼 성공을 상상한 그룹이 중간고사 성적이 가장 낮았다.\n...\n바라는 결과를 달성한 모습을 상상할 때 경험하는 감정적 보상이 성공에 필요한 작업을 수행하려는 욕구를 감소시키기 때문이다.\n[6장 - 뻔한 연습이 아니라 전략적 연습이 필요하다]\n\"결과\"에 대한 상상이 아닌 \"과정\"에 대한 상상이 훨씬 더 높은 성취를 내는데 도움이 된다는 것에 확신이 생겼다.\n프로젝트가 시작 되기 전에 \"이 프로젝트가 잘 되면 어떤 즐거운 결과가 있을 것인지\"를 이야기 했다면, 이제는 프로젝트 진행 과정 중에서 발생할만한 일을 좀 더 자주 이야기하고 팀원들이 미리 상상할 수 있도록 하는 것이 더 좋은 결과물을 낼 수 있겠다는 생각을 했다.\n예컨대 중요한 기획서를 작성하는 중이라면 동료에게 그냥 \"피드백을 달라\"고 하지말고, 첫 단락이 읽는 이의 호기심을 끌어당기는지, 또는 프로젝트 스케줄이 의욕적으로 느껴지는지 물어보라\"\n[7장 - 전문가에게서 값진 조언을 얻는 법]\n하반기 피드백 기간에는 셀프 피드백 항목에 \"동료에게 피드백을 받고 싶은 역량, 프로젝트 등이 있다면 작성해주세요\" 와 같이 어떤 피드백을 받고 싶은지 스스로가 작성하도록 해보는 것도 좋겠다는 생각을 했다.\n책의 마지막에 있는 \"반드시 기억해야 할 10가지\" 에 책의 각 챕터에서 이야기한 내용들을 요약 정리해준 것은 이 책에서 놓치지 말아야할 것들이 무엇인지 한번 더 집어준 것 같아 좀 더 기억에 오래 남을 것 같다.\n오랫만에 하루키의 책을 다시 필사해야겠다.\n책 속 문장\n\"날마다 그 책을 펴서 두 페이지를 필사했다.\n한 문장 한 문장 옮겨 적으면서 글의 리듬을 받아들이고 대화 처리 방식, 단 몇 줄로 인물의 성격을 암시하는 기법 등을 음미했다.\n'낯설게' 느껴지는 음식에서 그런 맛의 추억을 떠올리게 하는 것이 훨씬 더 강렬한 효과를 낸다.\n낯선 맥락 속에서 그런 기본 패턴을 유지하는 것이 핵심이다.\n첫째, 창의성은 고립에서 나오는 것이 아니라 여러 아이디어의 융합에서 나온다.\n...\n둘때, 독창성은 창의성과 동의어가 아니다.\n...\n비즈니스 세계에는 시장을 선점하고도 더 진취적이고 창의적인 경쟁자들에게 밀려 뒤쳐진 사례가 허다하다.\n셋째, 역설계는 창의성을 가로막는 방해물이 아니다.\n오히려 새로운 기술과 지식을 습득해 뭔가를 전과 다른 창의적인 방식으로 만들어 낼 수 있는 저력을 키워준다.\n모방을 위해서는 해당 작품을 만드는 동안 원작자가 내린 결정들에 대해 깊이 생각해보아야 한다.\n또한 모방 작업을 하다 보면 평소에는 그냥 지나쳤을 요소나 기회를 민감하게 인식하게 된다.\n모방은 새로운 관점으로 가는 길을 열어주며, 우리 자신의 작업 방식에 숨겨진 창의적 기회를 찾게 도와준다.\n로빈슨의 강연 방식은 물론 훌륭하다.\n그러나 30초마다 농담이 나오고 풍부한 일화를 곁들인 강연을 누구나 할 수 있는 것은 아니고, 또 모두가 그런 강연을 하고 싶어 하는 것도 아니다.\n본받고 싶은 강연 스타일은 사람마다 다를 수 있다.\n그러니 당신이 선호하는 유형의 다른 강연자를 찾아라. \n그의 강연을 보면서 역방향 개요를 작성하고 특성들을 수치화하고 강연의 얼개를 구성해보라.\n이것은 다양한 결과물을 해부해 효과적인 구조를 발견하는 대단히 유용한 방법이며, 당신은 그 구조와 공식을 당신만의 방식으로 활용할 수 있다\n요컨대 전문가는 비전문가와 생각하는 방식이 다르다.\n그들은 자신도 의식하지 못하는 지름길을 활용하고, 자신이 하는 행동을 깊게 생각하지 않으며, 자신이 아는 것을 모르는 상태를 상상하지 못한다.\n성공적인 작업에 필요한 행동을 분석해서 말해달라고 하면, 그들은 70퍼센트를 빼놓고 말한다.\n그리고 설명해주는 30퍼센트는? 대다수 사람들이 조금 힘겨워하거나 또는 아예 이해하기 힘든 언어로 설명한다.\n새로운 무언가를 창업하려고 하는 사람 중에서 이전의 직장에서 다니면서 하는 사람과, 직장을 관두고 전업으로 하는 사람 중에 누가 더 성공할 것인가?\n전업으로 창업을 준비하는 사람이 더 확률이 높을 것이라고 직관적인 생각이 들지만 실상은 그 반대.\n안정적인 수입이 있는 사람이 여러가지 기회와 가능성을 충분히 살피고 선택하고 결정할 수 있기 때문에, 전자인 직장인으로서 준비하는 것이 더 확률이 높다는 것이다.\n이는 바로 리스크를 선택함에 여유가 있기 때문이며, 이러한 과정에서 아래의 4가지 방법을 모두 적용할 수 있다.\n규모가 작은 청중을 상대로 테스트하고\n가명 활용하기\n먼저 아이디어부터 판매하기\n포트폴리오 다양화하기",
    "reviews": [],
    "syllabus": [],
    "link": "http://jojoldu.tistory.com/841",
    "pubDate": "Mon, 11 Aug 2025 09:50:18 +0900",
    "creator": "향로 (기억보단 기록을)",
    "categories": [
      "도서",
      "쉐도잉",
      "역설계",
      "필사"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "셀트리온 일라이 릴리 미국 공장 인수 시도",
    "description": "영상: https://www.youtube.com/watch?v=hvqc7R5p0l0&t=294s\n\n\n\n \n \n주가 더럽게 안가지만 이번엔 진짜로 갈 수도 있겠습니다.\n \n미국에서 생산을 하면 관세를 깎아주는 법안 때문에 인수 하는거 같군요\n \n앱토즈마 라는게 좋다는군요 기대 됩니다.\n \n8분14초에 앵커가 대본을 잘 못읽는거 같은데\n못알아 들었습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1373",
    "pubDate": "Fri, 8 Aug 2025 22:01:33 +0900",
    "creator": "SIDNFT",
    "categories": [
      "투자",
      "셀트리온"
    ]
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "페도라42에서 docker 오류",
    "description": "리눅스 중에 최신 버전을 사용하는 페도라 리눅스42에 docker를 설치하면 에러가 발생하면서 실행되지 않는다. 결론만 말하면 iptables-legacy 패키지를 설치하고 리부트하면 손쉽게 해결 된다. 그러면 Fedora42에서 docker 의 오류 증상과 해결법에 대해서 살펴보도록 하겠다.\n참고로 페도라 리눅스 42는 2025년 4월 16일에 출시되었다.\nDocker on Fedora 42\n\n\n \n1. Fedora Linux 42에서 docker 오류\n페도라 리눅스 42에 docker-ce를 설치하고, enable and start를 하면 다음과 같이 에러가 발생한다. 아래는 명령어 실행시 발생하는 에러 상황을 캡쳐한 것이다.\n$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n$ sudo systemctl enable --now docker\nCreated symlink '/etc/systemd/system/multi-user.target.wants/docker.service' → '/usr/lib/systemd/system/docker.service'.\nJob for docker.service failed because the control process exited with error code.\nSee \"systemctl status docker.service\" and \"journalctl -xeu docker.service\" for details.\n\n$ sudo systemctl status docker\n× docker.service - Docker Application Container Engine\n     Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/service.d\n             └─10-timeout-abort.conf\n     Active: failed (Result: exit-code) since Thu 2025-07-10 15:22:14 KST; 17s ago\n Invocation: 226f2df11c4e4b67bdd829aa732b9f1d\nTriggeredBy: × docker.socket\n       Docs: https://docs.docker.com\n    Process: 177352 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE)\n   Main PID: 177352 (code=exited, status=1/FAILURE)\n\nJul 10 15:22:14 fedora systemd[1]: docker.service: Scheduled restart job, restart counter is at 3.\nJul 10 15:22:14 fedora systemd[1]: docker.service: Start request repeated too quickly.\nJul 10 15:22:14 fedora systemd[1]: docker.service: Failed with result 'exit-code'.\nJul 10 15:22:14 fedora systemd[1]: Failed to start docker.service - Docker Application Container Engine.\n먼저 dnf로 docker-ce를 비롯한 5개의 패키지를 설치한 뒤에, systemctl enable --now docker로 실행하였다. 그런데 systemctl status docker로 확인해보니 Active 상태에 failed (Result: exit-code)로 표시되어있다.\n좀 더 자세한 정보를 얻기 위해 journalctl로 최근 30개의 docker unit 관련 로그를 살펴보았다.\n$ sudo journalctl -u docker -rn 30\nJul 10 15:22:14 fedora systemd[1]: Failed to start docker.service - Docker Application Container Engine.\nJul 10 15:22:14 fedora systemd[1]: docker.service: Failed with result 'exit-code'.\nJul 10 15:22:14 fedora systemd[1]: docker.service: Start request repeated too quickly.\nJul 10 15:22:14 fedora systemd[1]: docker.service: Scheduled restart job, restart counter is at 3.\nJul 10 15:22:12 fedora systemd[1]: Failed to start docker.service - Docker Application Container Engine.\nJul 10 15:22:12 fedora systemd[1]: docker.service: Failed with result 'exit-code'.\nJul 10 15:22:12 fedora systemd[1]: docker.service: Main process exited, code=exited, status=1/FAILURE\nJul 10 15:22:12 fedora dockerd[177352]: failed to start daemon: Error initializing network controller: error obtaining controller instance: failed to register \"bridge\" driver: failed to create NAT chain DOCKER: COMMAND_FAILED: INVALID_IPV: 'ipv4' is not a valid backend or is unavailable\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.245077759+09:00\" level=info msg=\"stopping event stream following graceful shutdown\" error=\"<nil>\" module=libcontainerd namespace=moby\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.221133353+09:00\" level=warning msg=\"failed to find iptables\" error=\"exec: \\\"iptables\\\": executable file not found in $PATH\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.219303872+09:00\" level=info msg=\"Firewalld: docker zone already exists, returning\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.185940349+09:00\" level=error msg=\"failed to load container\" container=docker-mysqld-auth.log error=\"lstat /var/lib/docker/containers/docker-mysqld-auth.log/config.v2.json: not a directory\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.185855977+09:00\" level=info msg=\"Loading containers: start.\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.179171737+09:00\" level=info msg=\"[graphdriver] using prior storage driver: overlay2\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.125838950+09:00\" level=info msg=\"Creating a containerd client\" address=/run/containerd/containerd.sock timeout=1m0s\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.117090429+09:00\" level=info msg=\"detected 127.0.0.53 nameserver, assuming systemd-resolved, so using resolv.conf: /run/systemd/resolve/resolv.conf\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.116958491+09:00\" level=info msg=\"CDI directory does not exist, skipping: failed to monitor for changes: no such file or directory\" dir=/etc/cdi\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.116944136+09:00\" level=info msg=\"CDI directory does not exist, skipping: failed to monitor for changes: no such file or directory\" dir=/var/run/cdi\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.116850954+09:00\" level=info msg=\"OTEL tracing is not configured, using no-op tracer provider\"\nJul 10 15:22:12 fedora dockerd[177352]: time=\"2025-07-10T15:22:12.116388190+09:00\" level=info msg=\"Starting up\"\nJul 10 15:22:12 fedora systemd[1]: Starting docker.service - Docker Application Container Engine...\nJul 10 15:22:12 fedora systemd[1]: docker.service: Scheduled restart job, restart counter is at 2.\nJul 10 15:22:09 fedora systemd[1]: Failed to start docker.service - Docker Application Container Engine.\nJul 10 15:22:09 fedora systemd[1]: docker.service: Failed with result 'exit-code'.\nJul 10 15:22:09 fedora systemd[1]: docker.service: Main process exited, code=exited, status=1/FAILURE\n==> 여기 아래 부분이 중요한 로그\nJul 10 15:22:09 fedora dockerd[177328]: failed to start daemon: Error initializing network controller: error obtaining controller instance: failed to register \"bridge\" driver: failed to create NAT chain DOCKER: COMMAND_FAILED: INVALID_IPV: 'ipv4' is not a valid backend or is unavailable\nJul 10 15:22:09 fedora dockerd[177328]: time=\"2025-07-10T15:22:09.980772122+09:00\" level=info msg=\"stopping event stream following graceful shutdown\" error=\"<nil>\" module=libcontainerd namespace=moby\nJul 10 15:22:09 fedora dockerd[177328]: time=\"2025-07-10T15:22:09.954760374+09:00\" level=warning msg=\"failed to find iptables\" error=\"exec: \\\"iptables\\\": executable file not found in $PATH\"\nJul 10 15:22:09 fedora dockerd[177328]: time=\"2025-07-10T15:22:09.952882578+09:00\" level=info msg=\"Firewalld: docker zone already exists, returning\"\nJul 10 15:22:09 fedora dockerd[177328]: time=\"2025-07-10T15:22:09.933501286+09:00\" level=error msg=\"failed to load container\" container=docker-mysqld-auth.log error=\"lstat /var/lib/docker/containers/docker-mysqld-auth.log/config.v2.json: not a directory\"\n뒤에서 3번째 로그에 failed to find iptables\" error=\"exec: \\\"iptables\\\": executable file not found in $PATH\" 이라는 부분이 보인다. 그대로 해석하면 $PATH에서 iptables 실행 파일을 찾지 못했다는 뜻이다. 즉 시스템에 iptables 바이너리 파일이 없는 것이다. 이는 페도라 42가 nft (netfilter) 필터 기반의 방화벽을 사용하기 때문에 iptables는 호환성을 위해서만 제공되며 기본적으로는 설치하지 않기 때문에 발생한다. 그래서 iptables-legacy 패키지를 설치하면 iptables 명령어가 제공되면서 해결되는 것이다.\n \n2. 해결방법 : iptables-legacy의 설치\n해결 방법은 앞서 서두에 밝힌 것처럼 iptables-legacy를 설치하면 된다. 설치 방법은 아래처럼 dnf 명령을 사용한다.\n$ sudo dnf -y install iptables-legacy\n설치 후 which iptables 명령을 내려서 iptables가 PATH에 걸려있는지 확인해본다. docker를 재시작하고 iptables의 초기화 같은 것들을 해줘야 하는데, 귀찮으니까 그냥 재부팅하는 것이 편하다.\n재부팅 후에 systemctl status docker로 다시 한번 Active 상태를 확인해보도록 한다. 대부분은 문제없이 잘 실행될 것이다.\n \n히스토리\n2025-08-14 처음 글 올림",
    "reviews": [],
    "syllabus": [],
    "link": "http://sunyzero.tistory.com/317",
    "pubDate": "Thu, 14 Aug 2025 00:19:40 +0900",
    "creator": "sunyzero",
    "categories": [
      "컴퓨터 관련/리눅스(유닉스) 일반",
      "docker on Fedora42",
      "Fedora42",
      "iptables",
      "iptables-legacy",
      "도커 페도라 리눅스",
      "페도라42"
    ]
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "짭 서피스 아크 마우스 주의",
    "description": "2024년 7월 16일에 병행수입이라고 서피스 아크마우스를 하나 구입했었다. 국내 유통가 대비 1/2가격이었다. 박스에 중국어만 가득했지만 박스 디자인도 똑같았고 ms로고가 확실히 박혀있었으므로 중국 내수용이겠지…라고 찝찝하지만 넘어갔다. 그리고 7월 19일에 여의도 더 현대에 서피스랩탑 스냅드래곤 버전 구경하러 갔다가 아크마우스를 떨이로 팔길래 그 때 저렴하게 하나 구입했었다. 이건 개봉하지 않고 그냥 묵혀뒀었다. 병행수입이라 주장하던 아크 마우스를 계속 사용해오다가 … More 짭 서피스 아크 마우스 주의",
    "reviews": [],
    "syllabus": [],
    "link": "https://megayuchi.com/2025/08/11/%ec%a7%ad-%ec%84%9c%ed%94%bc%ec%8a%a4-%ec%95%84%ed%81%ac-%eb%a7%88%ec%9a%b0%ec%8a%a4-%ec%a3%bc%ec%9d%98/",
    "pubDate": "Mon, 11 Aug 2025 08:30:05 +0000",
    "creator": "megayuchi",
    "categories": [
      "IT",
      "Pub",
      "마우스",
      "서피스 아크 마우스",
      "surface arc mouse"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "[NS2] 수채화처럼 그려진 한 여인의 인생, Dear me, I was...",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2345",
    "pubDate": "Wed, 13 Aug 2025 13:59:30 +0900",
    "creator": "샤말란의눈",
    "categories": [
      "리뷰"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "LINE 통화의 영상 재생 품질 개선 사례",
    "description": "들어가며LINE 앱은 전 세계 많은 사용자들이 이용하는 다양한 실시간 커뮤니케이션 서비스를 제공하고 있습니다. 저희 팀은 그중에서 1:1 통화와 그룹 통화, LINE 미팅과 같은 ...",
    "reviews": [],
    "syllabus": [],
    "link": "https://techblog.lycorp.co.jp/ko/improving-video-playback-quality-in-line-call",
    "pubDate": "Thu, 14 Aug 2025 09:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "Claude Code 101",
    "description": "<p>회사에서 AI 도구를 자유롭게 활용할 수 있도록 지원해 준 덕분에, 그동안 Cursor, Cline, Copilot 등 다양한 코딩 에이전트를 활용해 개발 생산성을 높일 수 있었습니다. 그러던 중 지난 2025년 6월 24일 Anthropic에서 터미널 기반의 코딩 에이전트인 Claude Code를 정식 출시했습니다.</p>\n\n<p>터미널은 개발자가 컴퓨터와 직접 대화를 나눌 수 있는 창구라서 떼려야 뗄 수 없지만, GUI의 도움을 받아 개발 하다보면 터미널에 익숙하지 않을 수 있습니다. GUI가 편하기도 하고요. 그래서 별도 GUI 인터페이스를 갖추고 있는 Cursor, Cline 같은 도구를 사용해 오던 입장에서, 처음에 Claude Code 컨셉만 들었을땐 마냥 불편할 것만 같았습니다.</p>\n\n<p>그런데 막상 써보니 인터페이스가 터미널이라 굉장히 가벼울 뿐 아니라, 특정 IDE에 종속되지 않고 어디서든 쓸 수 있다는 점이 장점으로 느껴졌습니다. 특히 JVM 환경에서 주로 개발하다 보니, 프로젝트 인덱싱, 컴파일, 빌드 등의 과정이 Cursor나 Cline에서는 다소 불편하게 느껴졌는데, Claude Code는 IntelliJ의 터미널에서 실행되니 마치 플러그인 하나 설치해 쓰는 듯한 경험이었습니다. 그래서 Cursor를 주로 사용하던 저는 이제 Claude Code만 쓰는 사람이 되었습니다.</p>\n\n<p>코딩 에이전트를 포함한 AI 기술은 하루가 다르게 빠르게 발전하고 있습니다. 일주일, 한 달만 지나도 새로운 기술과 모델이 나오고, 이전 것은 금세 시야에서 사라집니다. 개발자는 그때마다 새로운 경험을 맞이하게 됩니다. Cursor, Cline 같은 도구를 쓰면서 이 다음에 뭐가 나올까 궁금했는데 Claude Code가 하나의 변곡점이 될 거라는 느낌을 받았습니다.</p>\n\n<p>혼자서 스터디도 하고 사내 엔지니어들과 이야기를 나누면서 Claude Code를 더 잘 써보기 위한 방법들을 하나 둘 찾아나갔고, 지난 달 전사 테크 올핸즈에서 ‘<strong>한 번 쓰고 끝이 아니다. 끊임없이 진화하는 코딩 에이전트 활용법</strong>’ 이라는 주제로 Claude Code 사용 방법에 대해 공유했습니다.</p>\n\n<p>결국 코딩 에이전트를 사용하는 목적 중 하나는 생산성을 극대화 시키기 위함인데, 코딩 에이전트에게 무언가 시키고 나면 다시 제가 직접 수정하는 일이 생겼고 이건 목적에서 조금은 벗어난다는 생각이 들었습니다. ‘이럴 거면 내가 짜는 게 낫지‘ 라는 결론으로 이어질 수도 있고요. 그래서 Claude Code를 더 잘 활용하기 위해 Rules, Custom commands, Hooks 등을 작성했고, 머지 않아 또 다른 패러다임에 변화가 올거라 믿지만, 개인 블로그에도 간단하게 기록차 남겨봅니다.</p>\n\n<hr />\n\n<h1 id=\"claude-code-101\">Claude Code 101</h1>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-1.png\" alt=\"claude-code-101-1\" title=\"claude-code-101-1\" class=\"center-image\" /></p>\n\n<p>다들 첫 출근날과 처음으로 업무 받은 날을 기억하나요? 만약 어떤 회사에 입사를 했는데 팀에 나 혼자라고 가정해봅시다. 업무를 받았으니 무언가 해야 되는데 참고할 만한 문서가 있긴 한데 많이 부실합니다. 그리고 작성된 코드 양은 너무 많아서 어디 부터 봐야 할 지 모르는 상황입니다. 이럴때 우리는 어떻게 해야할까요?</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-2.png\" alt=\"claude-code-101-2\" title=\"claude-code-101-2\" class=\"center-image\" /></p>\n\n<p>‘어떤 것부터 알면 될까?’ 생각이 들텐데, 실제로는 내가 뭘 알아야 하는지도 모르는 상태입니다. 아는게 있어야 뭘 모르는지도 알게 될테니까요. 그렇다면 이 상황을 어떻게 해결하면 좋을까요? 간단한 방법은 2가지가 있습니다. 누군가에게 일단 물어보거나, 스스로 알아갈 때까지 고뇌하는 것입니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-3.png\" alt=\"claude-code-101-3\" title=\"claude-code-101-3\" class=\"center-image\" /></p>\n\n<p>이런 상황을 해결하기 위해 회사는 ‘신규 입사자 온보딩’ 프로그램을 운영하곤 합니다. 신규 입사자가 왔을때 여기는 어떤 문화를 가지고 있고, 시스템은 어떻고, 나는 어떤 일을 어떻게 하면 되는지 방법을 알려줍니다. 새로 온 동료가 그동안의 오래된 제품에 대한 맥락과 팀의 일하는 방식을 알아가기 까지 스스로 한다면 더 오랜 시간이 걸릴텐데, 잘 정리되어 있는 문서나 참고해야 할 요소들이 많다면 더 빠르게 알아갈 수 있을거에요.</p>\n\n<p>코딩 에이전트도 이와 크게 다르지 않습니다. 무작정 코딩 에이전트에게 ‘1000원 할인 코드 작성해줘’ 라고 하면 코딩 에이전트는 구체적인 정보를 찾기 위해 더 많은 시간을 쓰고 알지 못한다면 추측을 하기도 합니다. 그래서 코딩 에이전트가 나와 수년을 함께 한 동료가 되기 위해서는 알고 있는 모든 것을 알려줘야 합니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-4.png\" alt=\"claude-code-101-4\" title=\"claude-code-101-4\" class=\"center-image\" /></p>\n\n<p>우리 팀의 프로젝트 아키텍처는 어떤 형태로 구성되어 있는지 자세히 알려줘야 합니다. 의존성 규칙과 방향이 강제되어 있다면 이 또한 반드시 알려줘야 합니다.</p>\n\n<p>코드 컨벤션이 있다면 이 또한 자세히 가이드 해줘야 합니다. 팀에서 사용중인 코드 컨벤션이 없다면 각 언어의 공식 컨벤션이라도 알려주면 좋습니다. 저희 팀은 클래스 네이밍에 Alistair Cockburn이 언급한 원칙인 <code class=\"language-plaintext highlighter-rouge\">the name should be the goal as a short active verb phrase</code> 을 준수합니다. 이름만 보고도 그 클래스의 역할과 책임이 명확히 드러나야 하고, 역할과 책임 그리고 의미있는 접미사/접두사를 사용합니다. 그래서 대부분의 클래스는 <code class=\"language-plaintext highlighter-rouge\">동사 + 역할 + 접미사</code> 의 조합으로 이름을 짓고 있습니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-5.png\" alt=\"claude-code-101-5\" title=\"claude-code-101-5\" class=\"center-image\" /></p>\n\n<p>팀에서 사용중인 테스트 작성법이 있다면 이것도 자세히 알려줍니다. 저희 팀은 외부 의존성이 필요한 Mocking Library 사용을 지양하고, 조금 더 Production Code 변화에 유연하게 대응하기 위해 Test Double을 직접 만들어서 사용합니다. 그리고 테스트 코드를 구조화해서 가독성, 유지보수성, 일관성을 끌어 올리기 위해 AAA(Arrange, Act, Assert) 패턴을 사용합니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-6.png\" alt=\"claude-code-101-6\" title=\"claude-code-101-6\" class=\"center-image\" /></p>\n\n<p>커밋을 작성할 때에도 기본 형식이 있습니다. 커밋 메시지의 맨 앞에는 이슈 티켓을 입력하고, 그 다음에는 어떤 유형의 커밋이고 어떤 모듈의 변화인지, 그리고 마지막에는 커밋의 설명을 간단하게 작성합니다.</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">GZ-{티켓번호} {타입}({모듈}): {설명}</code></li>\n</ul>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-7.png\" alt=\"claude-code-101-7\" title=\"claude-code-101-7\" class=\"center-image\" /></p>\n\n<p>Claude Code는 우리 팀이 이렇게 일한다는 사실을 알고 있을까요? 알 수 없으면 알려주면 됩니다. 팀의 일하는 방식을 알려주면 그 순간 수년을 함께 한 동료가 될 수 있습니다. 애자일하게 일하는 조직일수록 일하는 방식은 날이 갈수록 개선됩니다. 저희 팀도 마찬가지로 일하는 방식과 가이드가 그 때의 상황에 따라 더 나은 방향으로 계속해서 개선되고 있습니다. 과거에는 맞았지만 지금은 다를 수 있으니까요. 미래에는 더 다를거고요.</p>\n\n<p>마찬가지로, 다양한 코드 작성 Rule을 통해 Claude Code는 어떻게 코드를 작성하면 되는지 알게 될텐데, 이 Rule은 계속해서 개선되고 진화해야 합니다. 개발 팀미팅에서 클래스 네이밍하는 방식이 변경됐다면 Rule에도 업데이트 하고 Claude Code에게도 이 사실을 알려줘야 합니다. 그래서 우스갯소리로 가이드 문서(Rule)가 얼마나 자주 업데이트 되는지 보면, 코딩 에이전트를 얼마나 잘 활용하고 있는지 알 수 있습니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-8.png\" alt=\"claude-code-101-8\" title=\"claude-code-101-8\" class=\"center-image\" /></p>\n\n<p>그래서 Claude Code 뿐만 아니라 코딩 에이전트에게 무언가 프롬프팅을 완료하고 나면 끝이 아니라 이제부터가 시작입니다. 코드를 원하는대로 잘 작성했다면 다음번에도 이처럼 잘 할 수 있도록 가이드 해줘야 합니다. 코딩 에이전트에게 준 피드백과 쌓여가는 Rule은 곧, 복리의 마법으로 다가올 것이라는걸 믿는게 중요하다고 생각합니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-9.png\" alt=\"claude-code-101-9\" title=\"claude-code-101-9\" class=\"center-image\" /></p>\n\n<p>발표 자료 중간에 Claude Code 기본 사용법과 소소한 팁이 있는데, 이 글에 담기엔 단순 정보라서 PDF를 참고해주시면 좋겠습니다.</p>\n\n<p>아무튼.. 가장 중요한 것은 꺾이지 않는 마음입니다. 코딩 에이전트에게 무언가 명령을 했는데 잘 알아듣지 못하고 엉뚱한 코드를 작성한다거나 내가 작성하는 스타일과 다르게 코드를 작성한다거나, 마음에 들지 않을때 있습니다. 이 때 우리는 ‘그냥 내가 하는게 낫겠다’ 라는 생각이 들면서 갈림길에 놓이게 됩니다.</p>\n\n<p>이 때 한 숨 크게 고르시고, 어떤게 잘못되었는지 어떻게 작성해야 하는지 알려주어야 합니다. 이건 마치 일을 빠르게 처리하지 못하고 있는 신규 입사자 동료에게 답답함을 느끼는 것과 같다고 생각합니다. 수정이 필요한 부분이 있다면 직접 고치지 않고, 어떤 코드를 어떻게 작성하면 되는지 알려주어야 합니다. 잘 해냈다면 다음 번에는 어떻게 하면 되는지 피드백을 통해 가이드와 Rule을 갱신합니다.</p>\n\n<p><img src=\"/images/2025/08/09/claude-code-101-10.png\" alt=\"claude-code-101-10\" title=\"claude-code-101-10\" class=\"center-image\" /></p>\n\n<p>마지막으로, 이 발표에서 전달하려고 했던 메시지 메시지입니다.</p>\n\n<ul>\n  <li>코딩 에이전트가 못하면 가르치자</li>\n  <li>코딩 에이전트가 해냈으면 회고하자</li>\n  <li>그리고 복리의 마법을 믿자</li>\n</ul>\n\n<hr />\n\n<h3 id=\"마치며\">마치며</h3>\n\n<p>코딩 에이전트를 접하고 나서 정말 많은 시간을 코드 작성법(Rule)을 만드는 일에 할애했습니다. 팀에서 수십개 서비스를 모노레포에 관리중인데, 오래전부터 아키틱체와 코드 컨벤션을 잘 유지하고 가이드를 다듬어 놓아서 초기 Rule을 작성하는데에 시간은 오래 걸렸지만 어렵지 않았습니다.</p>\n\n<p>지금은 Claude Code를 사용하면서 N개의 일을 병렬로 할 수 있는 환경이 되었습니다. 커밋 메시지를 작성한다던가, Pull Request 본문을 작성하는 등 코드를 작성하고 나서 반복적으로 하는 작업들은 더이상 제가 하지 않습니다. Claude Code가 일을 잘 해서 그런것도 있지만, 초기에 Rule 셋팅하는 시간을 많이 투자한 덕분이라고 생각합니다.</p>\n\n<p>단순한 기능을 만들 때에는 가이드 없이 Claude Code를 바로 사용해도 좋다고 생각합니다. 하지만 조금 복잡해지거나 도메인 규칙을 이해해야 한다거나, 우리 팀만의 가이드에 따라 코드 작성이 필요하다면 바로 사용하는건 멈추고 Rule 부터 정돈하기를 권장합니다.</p>\n\n<p>마지막으로, 작성된 모든 내용은 제 개인적인 의견이고 소수의 인원이 작업을 하는 곳보다 다수의 인원이 같은 Repository에 작업을 할 때에는 더 빛을 보는 방법이니 참고해주세요. 모두 복리의 마법을 믿고 코딩 대탈출 하셨으면 좋겠습니다!</p>\n\n<ul>\n  <li>P.S. 발표 자료는 일부 내용 제거된 형태로 업로드 되어 있습니다. <a href=\"https://github.com/sungjk/sungjk.github.io/tree/master/images/2025/08/09/ClaudeCode101_20250809.pdf\">ClaudeCode101_20250809.pdf</a>를 참고하시면 됩니다. 궁금하신 점이 있으면 편하게 메일로 연락 주세요.</li>\n</ul>",
    "reviews": [],
    "syllabus": [],
    "link": "https://sungjk.github.io/2025/08/09/claude-code-101.html",
    "pubDate": "2025-08-09T00:00:00+00:00",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "한강대교 북단, 노들섬 - 2025년 8월 4일",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://hodolman.tistory.com/80",
    "pubDate": "Mon, 11 Aug 2025 22:35:59 +0900",
    "creator": "호돌맨",
    "categories": [
      "사진",
      "노들섬",
      "노을",
      "야경",
      "한강대교북단"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "Rider 2025.2 Is Here with Junie, In-IDE OpenTelemetry, Game Dev Upgrades, and More",
    "description": "Rider 2025.2 delivers a big step forward in intelligent development tooling, bringing AI deeper into your workflow with Junie – our AI coding agent – along with runtime observability through the new OpenTelemetry plugin, a reworked Monitoring tool window, and improved debugging across platforms.  Let’s take a closer look at what’s new. Meet Junie, your […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/dotnet/2025/08/14/rider-2025-2-is-here-with-junie-in-ide-opentelemetry-game-dev-upgrades-and-more/",
    "pubDate": "Thu, 14 Aug 2025 10:39:57 +0000",
    "creator": "Alexander Kurakin",
    "categories": [
      "releases",
      "rider",
      "ai-agent",
      "c",
      "debugger",
      "gamedev",
      "godot",
      "junie",
      "mcp",
      "opentelemetry",
      "unity",
      "unreal-engine"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "JetBrains Academy – August Digest",
    "description": "Your August learning boost is here – with free tools, career-launching courses, practical advice from the JetBrains Academy team, and your shot at winning a MacBook Pro.",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/education/2025/08/13/jetbrains-academy-august/",
    "pubDate": "Wed, 13 Aug 2025 15:52:40 +0000",
    "creator": "Maria Sharobaeva",
    "categories": [
      "digest",
      "jetbrains-academy",
      "newsletter"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "TeamCity 2025.07.1 Is Here",
    "description": "TeamCity On-Premises 2025.07.1, the first bug-fix for the recently released TeamCity 2025.07, is ready to be installed on your On-Premises servers. This update addresses a significant number of issues, including: Bug-fix updates also include performance and security improvements, so we recommend installing them promptly. See TeamCity 2025.07.1 Release Notes for the complete list of resolved […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/teamcity/2025/08/teamcity-2025-07-1-bug-fix/",
    "pubDate": "Thu, 14 Aug 2025 12:08:03 +0000",
    "creator": "Dmitrii Korovin",
    "categories": [
      "bug-fix"
    ]
  }
]