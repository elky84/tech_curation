[
  {
    "id": 1,
    "imageUrl": "",
    "title": "2D 케릭터 에니메이션 1달러에 판매하는 곳 발견 / zegley.itch.io",
    "description": "링크: https://zegley.itch.io/strawhat\n\n \nStraw Hat by ZeggyGames\n2D Katana and Dagger wielding, pixel-art character\nzegley.itch.io\n\n좋네요 1달러에 팝니다.\n그런데 몇개 없구요 ...\nhttps://zegley.itch.io/\n\n\n아쉽",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1211",
    "pubDate": "Tue, 18 Mar 2025 17:24:57 +0900",
    "creator": "이건개발",
    "categories": [
      "프로그래밍/개발메모"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Fleet 1.47 Is Here With Folding Support for Multiline Comments, New AI Chat Functionality, and More Enhancements",
    "description": "Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this version using our Toolbox App. Let’s take a closer look at the highlights. Download Fleet 1.47 New features Improvements Bug fixes We’ve also fixed several bugs: See the full release notes for more details about […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/fleet/2025/03/fleet-1-47-is-here-with-folding-support-for-multiline-comments-new-ai-chat-functionality-and-more-enhancements/",
    "pubDate": "Fri, 21 Mar 2025 13:48:35 +0000",
    "creator": "Daniela Bentrup",
    "categories": [
      "news",
      "releases"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "What’s New in TeamCity 2025.03: Recipes, Improved Docker and Podman Integration, UI Updates, and More",
    "description": "TeamCity’s first major release of the year, version 2025.03, is now available. It’s packed with new features, including massive UI updates, a new Run in Docker build feature, and JetBrains-crafted recipes available in our Marketplace. UI updates In line with our commitment to make TeamCity easier and more intuitive to use, this release introduces significant […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/teamcity/2025/03/what-s-new-in-teamcity-2025-03-recipes-improved-docker-and-podman-integration-ui-updates-and-more/",
    "pubDate": "Thu, 20 Mar 2025 15:31:00 +0000",
    "creator": "Dmitry Mareychev",
    "categories": [
      "release",
      "teamcity"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "How the IntelliJ Infrastructure Team Cuts Build Execution Time by 30% With TeamCity",
    "description": "Introduction JetBrains is known for developing some of the world’s most popular IDEs, including IntelliJ IDEA, PyCharm, and WebStorm. Supporting this development is a dedicated infrastructure team that ensures hundreds of developers can efficiently build, test, and release these products. At the core of their workflow is TeamCity, JetBrains’ own CI/CD solution, which powers build […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/teamcity/2025/03/how-intellij-uses-teamcity/",
    "pubDate": "Mon, 17 Mar 2025 09:44:31 +0000",
    "creator": "Olga Bedrina",
    "categories": [
      "intellij",
      "teamcity-2",
      "case-study",
      "news"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "유니티 애셋 / Block Blast / 데모게임 / 유",
    "description": "영상: https://www.youtube.com/watch?v=LYECrh_MYOw&t=55s\n\n\n\n \n유니티 애셋 스토어 링크: https://assetstore.unity.com/packages/templates/packs/blast-puzzle-template-editor-313175\n\n \nBlast Puzzle | Template + Editor | 패키지 | Unity Asset Store\nUse Blast Puzzle | Template + Editor from Watermelon Games to elevate your next project. Find this & more 패키지 and templates on the Unity Asset Store.\nassetstore.unity.com\n\n \n비싸긴한데 카피게임 올리기엔 쉽겠군요\n거의 비슷하군요\n기억해 둬야겠습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1214",
    "pubDate": "Wed, 19 Mar 2025 10:58:49 +0900",
    "creator": "이건개발",
    "categories": [
      "프로그래밍/유니티 에셋 리뷰"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "프롬프트 엔지니어링(Prompt Engineering)",
    "description": "<h3 id=\"introduction\">Introduction</h3>\n\n<p>LLM Settings</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">temperature</code>: 토큰의 선택 비중을 결정. 높을수록 창의적인 결과 생성. 낮을수록 사실을 기반한 결과 생성</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">top_p</code>: 낮으면 사실적인 결과 생성.</li>\n  <li>일반적으로 temperature 나 top_p 둘 중 하나만 변경</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">max length</code>: 모델이 생성하는 토큰 수 관리. 결과 연관성 및 비용 관리.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Stop Sequence</code>\n    <ul>\n      <li>특정 문자열을 만나면 출력을 멈추기 위해 사용</li>\n      <li>모델이 불필요하게 길거나 중복된 응답을 생성하지 않게 만들기 위해 사용함</li>\n      <li>코드, 목록, 대화 스타일 같은 특정 형식을 강제할 때 유용함</li>\n    </ul>\n\n    <p>Example:</p>\n\n    <ol>\n      <li><strong>리스트 제한</strong>:\n        <ul>\n          <li>“10개의 아이템으로 이루어진 리스트”를 생성하고 싶다면, Stop Sequence로 <code class=\"language-plaintext highlighter-rouge\">\"11.\"</code>을 지정</li>\n          <li>모델이 “11.”을 생성하지 못하게 해서 10개의 아이템으로만 리스트를 제한</li>\n        </ul>\n\n        <p><strong>예시</strong>:</p>\n\n        <div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Input: Generate a list of fruits:\n Output:\n<span class=\"p\"> 1.</span> Apple\n<span class=\"p\"> 2.</span> Banana\n ...\n<span class=\"p\"> 3.</span>  Kiwi\n<span class=\"p\"> 4.</span>  (멈춤)  --&gt; \"11.\"이 Stop Sequence라면 여기서 중단됨.\n</code></pre></div>        </div>\n      </li>\n      <li><strong>대화 종료</strong>:\n        <ul>\n          <li>챗봇이 <code class=\"language-plaintext highlighter-rouge\">\"[End]\"</code>를 만나면 대화를 끝내도록 설정</li>\n        </ul>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Input: End the conversation after the farewell.\n Output:\n User: Thank you!\n Bot: You're welcome. Have a great day! [End]\n</code></pre></div>        </div>\n      </li>\n    </ol>\n  </li>\n  <li>Max Length vs. Stop Sequence\n    <ul>\n      <li>Max Length:\n        <ul>\n          <li>응답 길이의 상한선. 모델이 토큰을 생성하다가 이 길이에 도달하면 무조건 멈춤.</li>\n          <li>예) Max Length가 50이면 50개 토큰까지만 생성</li>\n        </ul>\n      </li>\n      <li>Stop Sequence:\n        <ul>\n          <li>특정 문자열을 생성하는 순간 멈춤</li>\n          <li>예) “###”라는 Stop Sequence가 있으면, 모델이 20번째 토큰에서 “###”를 생성하면 즉시 멈춤</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>Frequency Penalty vs. Presence Penalty\n    <ul>\n      <li>Frequency Penalty:\n        <ul>\n          <li>특정 토큰(단어)가 반복적으로 등장할수록 그 토큰을 선택할 확률을 낮추는 패널티</li>\n          <li>사용 목적: 단어 중복 방지, 정확성, 간결함</li>\n          <li>예시: FAQ 답변, 정보 요약 등</li>\n        </ul>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  입력: Write a sentence about cats.\n  결과 (Frequency Penalty 낮음): \"Cats are cute. Cats are playful. Cats love to sleep.\"\n  결과 (Frequency Penalty 높음): \"Cats are cute, playful, and love to sleep.\"\n</code></pre></div>        </div>\n      </li>\n      <li>Presence Penalty:\n        <ul>\n          <li>특정 토큰이 한 번이라도 등장했다면 그 토큰을 선택할 확률을 낮추는 패널티</li>\n          <li>사용 목적: 컨텐츠 다양성 확보(같은 단어를 여러 번 쓰는 대신 새로운 단어를 사용하도록 유도), 다양성</li>\n          <li>예시: 창의적 글쓰기, 스토리 생성, 광고 카피 작성 등</li>\n        </ul>\n\n        <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  입력: Write a sentence about cats.\n  결과 (Presence Penalty 낮음): \"Cats are cute. Cats are playful. Cats love to sleep.\"\n  결과 (Presence Penalty 높음): \"Cats are cute. They are playful and love to sleep.\"\n</code></pre></div>        </div>\n      </li>\n    </ul>\n\n    <table>\n      <thead>\n        <tr>\n          <th><strong>특징</strong></th>\n          <th><strong>Frequency Penalty</strong></th>\n          <th><strong>Presence Penalty</strong></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td><strong>기준</strong></td>\n          <td>등장한 토큰의 <strong>반복 횟수</strong>에 따라 적용</td>\n          <td>등장한 토큰의 <strong>존재 여부</strong>에 따라 적용</td>\n        </tr>\n        <tr>\n          <td><strong>페널티 적용 방식</strong></td>\n          <td>반복 횟수가 많을수록 페널티가 더 커짐</td>\n          <td>한 번이라도 등장하면 동일하게 페널티 부과</td>\n        </tr>\n        <tr>\n          <td><strong>목적</strong></td>\n          <td>특정 단어의 <strong>중복 사용을 줄임</strong></td>\n          <td>더 <strong>다양한 표현</strong>을 유도</td>\n        </tr>\n        <tr>\n          <td><strong>적용 효과</strong></td>\n          <td>깔끔하고 중복 없는 텍스트</td>\n          <td>창의적이고 다양한 텍스트</td>\n        </tr>\n      </tbody>\n    </table>\n  </li>\n</ul>\n\n<h3 id=\"general-tips-for-designing-prompts\">General Tips for Designing Prompts</h3>\n\n<ul>\n  <li>The more descriptive and detailed the prompt is, the better the results.</li>\n  <li>Need to experiment with a lot.</li>\n  <li>Encourage a lot of experimentation and iteration to optimize prompts.</li>\n  <li>Avoid saying what not to do but say what to do instead.</li>\n</ul>\n\n<h3 id=\"examples-of-prompts\">Examples of Prompts</h3>\n\n<ul>\n  <li>Text Summarization</li>\n  <li>Information Extraction</li>\n  <li>Question Answering</li>\n  <li>Text Classification</li>\n  <li>Conversation(Role prompting)</li>\n  <li>Code Generation</li>\n  <li>Reasoning</li>\n</ul>\n\n<hr />\n\n<h3 id=\"zero-shot-prompting\">Zero-Shot Prompting</h3>\n\n<ul>\n  <li>the prompt used to interact with the model won’t contain examples or demonstrations.</li>\n</ul>\n\n<hr />\n\n<h3 id=\"few-shot-prompting\">Few-Shot Prompting</h3>\n\n<blockquote>\n  <p>the label space and the distribution of the input text specified by the demonstrations are both important (regardless of whether the labels are correct for individual inputs).</p>\n</blockquote>\n\n<h3 id=\"label-space와-few-shot-prompting\">Label Space와 Few-shot prompting</h3>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">Label Space</code>: 주어진 문제에서 가능한 출력값(라벨)의 집합\n    <ul>\n      <li>ex) 영화 리뷰 감성 분석에서는 출력값이 <code class=\"language-plaintext highlighter-rouge\">Positive</code>, <code class=\"language-plaintext highlighter-rouge\">Negative</code> 같은 감정 라벨 사용</li>\n      <li>Label Space는 모델이 어떤 선택지를 예상해야 하는지 알려주는 역할</li>\n    </ul>\n  </li>\n  <li>모델이 학습을 잘 하려면 input &amp; label 쌍이 일관된 구조를 가져야 함.</li>\n  <li>라벨이 실제로 맞는지 틀린지는 덜 중요하고, 예시들 사이에서 입력과 출력의 관계(패턴)와 라벨 공간의 정의가 중요한 역할</li>\n  <li>Input Text Distribution(입력 텍스트의 분포): 프롬프트에 포함된 예시가 특정 스타일이나 패턴을 유지해야 모델이 더 잘 학습함.</li>\n  <li>라벨의 정확성은 덜 중요: 라벨이 틀렸더라도 형식과 구조가 명확하면 모델이 작업의 맥락을 이해할 수 있음.</li>\n  <li>Few-shot Prompting 한계: 모델이 학습한 지식으로 충분하지 않은 경우\n    <ul>\n      <li>복잡한 수학적 추론, 다단계 논리 문제, 세부적인 도메인 지식이 필요한 작업 등.</li>\n      <li>Few-shot prompting은 모델이 이미 학습한 지식을 기반으로 동작하므로, 모델의 학습 데이터에 없는 복잡한 작업에서는 한계에 부딪힐 수 있음.</li>\n    </ul>\n  </li>\n</ul>\n\n<h3 id=\"대안\">대안:</h3>\n<ul>\n  <li>Fine-tuning: 모델을 특정 작업에 맞게 추가 학습시키는 과정\n    <ul>\n      <li>특정 작업에서 더 나은 성능을 발휘할 수 있도록 모델의 파라미터를 조정</li>\n      <li>특정 도메인(예: 의학, 법률, 금융)에서 높은 정확도가 필요한 경우에 유용</li>\n    </ul>\n  </li>\n  <li>Chain-of-Thought (CoT) Prompting: 복잡한 추론 문제를 단계별로 나누어 해결하는 방식\n    <ul>\n      <li>ex) 모델이 수학 문제를 풀 때 답을 바로 생성하도록 요청하는 대신, 문제를 단계적으로 해결하는 과정을 먼저 보여주도록 설정</li>\n      <li>장점: 모델이 단계적이고 논리적 사고를 통해 더 정확한 답을 생성할 가능성이 높아짐.</li>\n    </ul>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"chain-of-thought-prompting\">Chain-of-Thought Prompting</h3>\n\n<blockquote>\n  <p>Let’s think step by step</p>\n</blockquote>\n\n<ul>\n  <li>문장 하나 추가했는데 결과가 달라지는게 신기</li>\n  <li>Demonstrations: 모델이 작업을 수행하는 방식을 학습하도록 도와주는 예시</li>\n</ul>\n\n<hr />\n\n<h3 id=\"meta-prompting\">Meta Prompting</h3>\n\n<ul>\n  <li>Structure-oriented: 특정 내용보다는 문제 해결의 전반적인 구조/형식/패턴에 초점을 맞춤</li>\n  <li>Syntax-focused: 문법적 템플릿으로 응답의 형식을 유도(ex. Let’s think step by step.)</li>\n  <li>Abstract examples: 구체적인 내용 대신 구조를 보여주는 추상적 예시를 사용하여 다양한 작업에 적용 가능</li>\n  <li>Versatile: 수학, 프로그래밍, 이론적 질문 등 여러 도메인에서 사용</li>\n</ul>\n\n<hr />\n\n<h3 id=\"self-consistency\">Self-Consistency</h3>\n\n<ul>\n  <li>Greedy Decoding: 가장 높은 확률의 답변을 한 번만 생성</li>\n  <li>모델이 다양한 추론 경로(reasoning paths)를 통해 여러 답변을 생성하고, 가장 일관성 있는 답변을 선택</li>\n  <li>산술적 문제나 상식 추론 문제에서 효과적</li>\n</ul>\n\n<hr />\n\n<h3 id=\"generate-knowledge-prompting\">Generate Knowledge Prompting</h3>\n\n<ul>\n  <li>모델이 답변을 생성하기 전에 문제와 관련된 지식을 먼저 생성</li>\n  <li>이 지식은 이후 예측 과정에서 프롬프트로 통합되어 모델의 이해와 예측 정확도를 높이는 데 사용</li>\n</ul>\n\n<hr />\n\n<h3 id=\"prompt-chaining\">Prompt Chaining</h3>\n\n<ul>\n  <li>Divide and Conquer</li>\n  <li>복잡한 작업을 여러 단계로 나누어 한 번에 하나씩 해결.</li>\n  <li>하위 작업의 결과를 다음 작업의 입력으로 사용</li>\n  <li>ex. 텍스트 요약 → 주요 정보 추출 → 답변 생성</li>\n</ul>\n\n<hr />\n\n<h3 id=\"tree-of-thoughts-tot\">Tree of Thoughts (ToT)</h3>\n\n<ul>\n  <li>CS 알고리즘 나와서 반가웠음.</li>\n  <li>복잡한 문제를 해결하기 위해 트리 구조를 사용하여 여러 사고 과정(thoughts)을 탐색</li>\n  <li>Thoughts: 문제 해결을 위한 중간 단계의 사고 과정(언어 시퀀스).\n    <ul>\n      <li>예: 산수 문제에서 각 중간 계산 과정</li>\n    </ul>\n  </li>\n  <li>각 노드: 중간 단계의 사고 과정.</li>\n  <li>루트 노드: 초기 문제 진술.</li>\n  <li>리프 노드: 최종 답변.</li>\n  <li>DFS, BFS 또는 Beam Search 알고리즘을 사용하여 탐색.</li>\n  <li>사고 과정이 트리 구조로 나타나므로 각 단계에서 무엇이 잘못되었는지 추적 가능</li>\n</ul>\n\n<hr />\n\n<h3 id=\"retrieval-augmented-generation-rag\">Retrieval Augmented Generation (RAG)</h3>\n\n<ul>\n  <li>정보 검색 (Retrieval): 외부 데이터베이스(예: Wikipedia)에서 관련 문서를 검색하여 입력과 함께 사용</li>\n  <li>텍스트 생성 (Generation): 검색된 문서를 컨텍스트로 사용하여 최종 응답을 생성</li>\n  <li>모델의 내부 지식(parametric knowledge)이 고정된 문제를 해결</li>\n</ul>\n\n<hr />\n\n<h3 id=\"automatic-reasoning-and-tool-use-art\">Automatic Reasoning and Tool-use (ART)</h3>\n\n<ul>\n  <li>LLM이 새로운 작업을 수행하기 위해 <code class=\"language-plaintext highlighter-rouge\">스스로</code> 중간 추론 단계를 생성하고 <code class=\"language-plaintext highlighter-rouge\">외부 도구</code>를 사용하는 방법</li>\n  <li><a href=\"https://youtu.be/6KEnz_Bdmcs?si=Yf5eV132YtXAvsJ_\">Youtube - 프롬프트 엔지니어링 - Automatic Reasoning and Tool-use (ART, 자동추론&amp;도구사용)</a></li>\n  <li>스스로 CoT 생성</li>\n  <li>외부 도구: 추론 과정들이 데이터셋으로 만들어져 있는 것(라이브러리, 패키지)\n    <ul>\n      <li>예) GSM8K(초등 수학 단어 문제 8,500개 세트), AQuA(딥러닝 기술의 상태를 시험하기 위한 객관식 대수 단어 문제)</li>\n    </ul>\n  </li>\n  <li>예시\n    <ul>\n      <li>사용자의 질문을 분석한다.</li>\n      <li>사용자의 요청을 해결할 최적의 추론 경로와 외부 도구가 무엇인지 탐색한다.</li>\n      <li>필요에 따라 사용자가 외부 도구 라이브러리를 추가하거나 수정한다.</li>\n    </ul>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"automatic-prompt-engineer-ape\">Automatic Prompt Engineer (APE)</h3>\n\n<ul>\n  <li>automatic instruction generation and selection</li>\n  <li>사람이 설계한 CoT Prompt 보다 더 나은 Zero-shot Cot Prompt 발견\n    <ul>\n      <li>예) 사람이 작성한 “Let’s think step by step” 프롬프트보다 “Let’s work this out in a step by step way to be sure we have the right answer.” 라는 프롬프트가 더 나은 성능</li>\n    </ul>\n  </li>\n  <li>instruction 설계 과정에서 사람의 개입을 줄이고 최적화하게 도와주는 프레임워크</li>\n</ul>\n\n<hr />\n\n<h3 id=\"active-prompt\">Active-Prompt</h3>\n\n<p>불확실한 답변에 사람이 피드백을 주고 모델 학습을 강화하는 방식. 모든 질문에 피드백을 주지 않아도 되므로 효율적임.</p>\n\n<ol>\n  <li>Uncertainty Estimation: 불확실성은 답변이 얼마나 일관되었는지로 평가. 답변이 모두 동일하면 불확실성이 낮고, 답변이 다양하면 불확실성 높음.</li>\n  <li>Selection: 모든 질문의 불확실성 점수를 정렬해서 가장 불확실한 질문 선택</li>\n  <li>Annotation: 불확실한 질문에 대해 사람이 정확한 답변 작성. 모델이 더 나은 추론을 할 수 있도록 새로운 학습 예제 추가</li>\n  <li>Inference: 새로 추가된 예제를 학습한 후 질문에 대해 추론을 수행</li>\n</ol>\n\n<p><img src=\"/images/2025/03/22/active-prompt.png\" alt=\"Active Prompt\" title=\"active-prompt\" class=\"center-image\" /></p>\n\n<hr />\n\n<h3 id=\"directional-stimulus-prompting\">Directional Stimulus Prompting</h3>\n\n<ul>\n  <li>DSP: 프롬프트에 힌트를 명시적으로 제공해서 중요한 요소를 더 쉽게 식별할 수 있게 도와주는 방식</li>\n</ul>\n\n<p>Black-box Frozen LLM:</p>\n\n<ul>\n  <li>Black-box: 내부 동작을 알거나 수정할 수 없는 시스템</li>\n  <li>Frozen LLM: LLM이 사전 학습된 상태로 고정되어 있는것. Fine-tuning이 이루어지지 않는 상태</li>\n  <li>모델의 파라미터나 학습 방식에 접근하거나 변경할 수 없어서 프롬프트 엔지니어링이 중요</li>\n  <li>장점:\n    <ul>\n      <li>사전 학습된 모델을 그대로 사용해서 추가적인 학습이나 리소스 필요하지 않음.</li>\n      <li>모델 파라미터가 고정되어 있어서 예측 가능한 동작을 수행함.</li>\n    </ul>\n  </li>\n  <li>한계:\n    <ul>\n      <li>특정 작업에 대해 최적화 되어 있지 않을 수 있음. 특정 도메인에 맞는 성능을 보장하기 어려움(Fine-tuning 불가)</li>\n      <li>프롬프트와 라이브러리에 의존이 높음.</li>\n    </ul>\n  </li>\n</ul>\n\n<hr />\n\n<h3 id=\"pal-program-aided-language-models\">PAL (Program-Aided Language Models)</h3>\n\n<p>프로그래밍 지원 모델. 코드나 수식을 사용해 논리적인 작업을 수행하는 방식</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">openai</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain_openai</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dateutil.relativedelta</span> <span class=\"kn\">import</span> <span class=\"n\">relativedelta</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s\">'gpt-3.5-turbo-instruct'</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"s\">\"Today is 27 February 2023. I was born exactly 25 years ago. What is the date I was born in MM/DD/YYYY?\"</span>\n    <span class=\"n\">DATE_UNDERSTANDING_PROMPT</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"\n    # Q: 2015년이 36시간 후에 옵니다. 오늘로부터 1주일 후의 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 2015년이 36시간 후에 오므로, 오늘은 36시간 전입니다.\n    today = datetime(2015, 1, 1) - relativedelta(hours=36)\n    # 오늘로부터 1주일 후,\n    one_week_from_today = today + relativedelta(weeks=1)\n    # %m/%d/%Y 형식으로 표시된 답은\n    one_week_from_today.strftime('%m/%d/%Y')\n    # Q: 2019년의 첫 번째 날은 화요일이고, 오늘은 2019년의 첫 번째 월요일입니다. 오늘 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 2019년의 첫 번째 날이 화요일이고, 오늘이 첫 번째 월요일이라면, 오늘은 6일 후입니다.\n    today = datetime(2019, 1, 1) + relativedelta(days=6)\n    # %m/%d/%Y 형식으로 표시된 답은\n    today.strftime('%m/%d/%Y')\n    # Q: 콘서트가 06/01/1943에 예정되어 있었지만 하루 늦게 오늘로 연기되었습니다. 오늘로부터 10일 전의 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 콘서트가 06/01/1943에 예정되었지만 하루 연기되었으므로 오늘은 하루 뒤입니다.\n    today = datetime(1943, 6, 1) + relativedelta(days=1)\n    # 오늘로부터 10일 전,\n    ten_days_ago = today - relativedelta(days=10)\n    # %m/%d/%Y 형식으로 표시된 답은\n    ten_days_ago.strftime('%m/%d/%Y')\n    # Q: 오늘은 1969년 4월 19일입니다. 24시간 후의 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 오늘은 1969년 4월 19일입니다.\n    today = datetime(1969, 4, 19)\n    # 24시간 후,\n    later = today + relativedelta(hours=24)\n    # %m/%d/%Y 형식으로 표시된 답은\n    today.strftime('%m/%d/%Y')\n    # Q: 제인은 오늘이 2002년 3월 11일이라고 생각했지만, 사실 오늘은 하루 후인 3월 12일입니다. 24시간 후의 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 제인이 오늘이 2002년 3월 11일이라고 생각했지만, 실제로 오늘은 하루 후인 3월 12일입니다.\n    today = datetime(2002, 3, 12)\n    # 24시간 후,\n    later = today + relativedelta(hours=24)\n    # %m/%d/%Y 형식으로 표시된 답은\n    later.strftime('%m/%d/%Y')\n    # Q: 제인은 2001년 2월의 마지막 날에 태어났습니다. 오늘은 제인의 16번째 생일입니다. 어제의 날짜는 MM/DD/YYYY 형식으로 무엇인가요?\n    # 제인이 2001년 2월의 마지막 날에 태어났고 오늘이 16번째 생일이라면, 오늘은 16년 후입니다.\n    today = datetime(2001, 2, 28) + relativedelta(years=16)\n    # 어제,\n    yesterday = today - relativedelta(days=1)\n    # %m/%d/%Y 형식으로 표시된 답은\n    yesterday.strftime('%m/%d/%Y')\n    # Q: {question}\n    \"\"\"</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span>\n    \n    <span class=\"n\">llm_out</span> <span class=\"o\">=</span> <span class=\"n\">llm</span><span class=\"p\">(</span><span class=\"n\">DATE_UNDERSTANDING_PROMPT</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">question</span><span class=\"o\">=</span><span class=\"n\">question</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"LLM output:\"</span><span class=\"p\">,</span> <span class=\"n\">llm_out</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">cleaned_output</span> <span class=\"o\">=</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">llm_out</span><span class=\"p\">.</span><span class=\"n\">splitlines</span><span class=\"p\">())</span>\n    <span class=\"n\">local_vars</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"n\">cleaned_output</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"n\">local_vars</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">if</span> <span class=\"s\">'today'</span> <span class=\"ow\">in</span> <span class=\"n\">local_vars</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Birth date:\"</span><span class=\"p\">,</span> <span class=\"n\">local_vars</span><span class=\"p\">[</span><span class=\"s\">'today'</span><span class=\"p\">].</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s\">'%m/%d/%Y'</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Error: Could not calculate the birth date\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">\"OPENAI_API_KEY\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<hr />\n\n<h3 id=\"react-prompting\">ReAct Prompting</h3>\n\n<p>추론(Reasoning) + 행동(Acting) + 관찰(Observation) 반복적으로 수행</p>\n\n<ul>\n  <li>Reasoning: 문제 해결을 위해 단계별 논리적 과정 생성(CoT)</li>\n  <li>Acting: 모델이 외부에 필요한 정보 검색</li>\n  <li>Observation: 외부 결과를 바탕으로 추론 또는 행동 결정</li>\n  <li>외부 정보의 품질에 따라 모델 추론이 방해받을 수 있음</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">openai</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain_openai</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">load_tools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">initialize_agent</span>\n\n    \n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"c1\"># temperature=0: 더 결정론적이고 일관된 답변을 생성\n</span>    <span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"s\">'gpt-3.5-turbo-instruct'</span><span class=\"p\">,</span> <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># tools: 에이전트가 사용할 라이브러리 로드용\n</span>    <span class=\"c1\"># google-serper: Google 검색 도구 https://serper.dev/\n</span>    <span class=\"c1\"># llm-math: 수학 계산을 수행하는 도구\n</span>    <span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">load_tools</span><span class=\"p\">([</span><span class=\"s\">\"google-serper\"</span><span class=\"p\">,</span> <span class=\"s\">\"llm-math\"</span><span class=\"p\">],</span> <span class=\"n\">llm</span><span class=\"o\">=</span><span class=\"n\">llm</span><span class=\"p\">)</span>\n    \n    <span class=\"c1\"># 위 도구와 LLM을 결합한 에이전트 생성\n</span>    <span class=\"c1\"># zero-shot-react-description: ReAct 프롬프팅 방식으로 질문 처리\n</span>    <span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">initialize_agent</span><span class=\"p\">(</span><span class=\"n\">tools</span><span class=\"p\">,</span> <span class=\"n\">llm</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"o\">=</span><span class=\"s\">\"zero-shot-react-description\"</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"s\">' '</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n                <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Please enter your query (or type 'exit' to quit): \"</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">user_input</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s\">'exit'</span><span class=\"p\">:</span>\n                    <span class=\"k\">break</span>\n            <span class=\"c1\"># 입력이 한국어인 경우 에이전트에게 한국어로 답변하도록 지시\n</span>            <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"s\">'</span><span class=\"se\">\\u3131</span><span class=\"s\">'</span> <span class=\"o\">&lt;=</span> <span class=\"n\">char</span> <span class=\"o\">&lt;=</span> <span class=\"s\">'</span><span class=\"se\">\\u3163</span><span class=\"s\">'</span> <span class=\"ow\">or</span> <span class=\"s\">'</span><span class=\"se\">\\uac00</span><span class=\"s\">'</span> <span class=\"o\">&lt;=</span> <span class=\"n\">char</span> <span class=\"o\">&lt;=</span> <span class=\"s\">'</span><span class=\"se\">\\ud7a3</span><span class=\"s\">'</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">user_input</span><span class=\"p\">):</span>\n                <span class=\"n\">user_input</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s\">\"답변을 한국어로 해주세요: </span><span class=\"si\">{</span><span class=\"n\">user_input</span><span class=\"si\">}</span><span class=\"s\">\"</span>\n            <span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">user_input</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"nb\">KeyboardInterrupt</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Exiting...\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">openai</span><span class=\"p\">.</span><span class=\"n\">api_key</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">\"OPENAI_API_KEY\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s\">\"SERPER_API_KEY\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<hr />\n\n<h3 id=\"reflexion\">Reflexion</h3>\n\n<ul>\n  <li>self-reflection 을 통해 LangChain Agent가 과거 실수를 학습하고 성과를 개선할 수 있도록 설계된 프레임워크</li>\n  <li>Verbal feedback을 활용하여 에이전트가 작업을 반복적으로 개선</li>\n  <li>Actor:\n    <ul>\n      <li>LLM이 Environment(에이전트가 목표를 달성하기 위해 상호작용하는 외부 시스템)에서 행동하고 관찰 결과를 통해 추론과 작업을 수행</li>\n      <li>행동 결과와 관찰이 단기 메모리(short-term memory)로 저장</li>\n    </ul>\n  </li>\n  <li>Evaluator:\n    <ul>\n      <li>Actor가 생성한 경로(trajectory)를 평가하여 성과 점수(reward)를 제공</li>\n      <li>평가 방식: 규칙 기반(heuristic) 평가. LLM을 활용한 질적 평가.</li>\n    </ul>\n  </li>\n  <li>Self-Reflection:\n    <ul>\n      <li>Actor의 행동과 평가 결과를 기반으로 언어적 피드백을 생성</li>\n      <li>피드백은 장기 메모리(long-term memory)에 저장되고, Actor가 다음 반복에서 더 나은 행동을 하도록 도움</li>\n    </ul>\n  </li>\n  <li>Define a task → Generate a trajectory → Evaluate → Perform reflection → Generate the next trajectory</li>\n</ul>\n\n<p><img src=\"/images/2025/03/22/reflexion.png\" alt=\"Reflexion\" title=\"Reflexion\" class=\"center-image\" /></p>\n\n<p>When to Use Reflexion?</p>\n\n<p>(전통적인 강화학습의 대체제, 세밀한 피드백, 메모리 활용)</p>\n\n<ol>\n  <li>An agent needs to learn from trial and error:\n    <ul>\n      <li>로봇이 물체를 이동시키기 위해 최적의 경로를 찾는 과정</li>\n      <li>잘못된 괄호 매칭 코드를 수정하며 올바른 코드를 도출</li>\n    </ul>\n  </li>\n  <li>Traditional reinforcement learning methods are impractical:\n    <ul>\n      <li>전통적인 RL은 대규모 학습 데이터와 긴 훈련 시간이 필요하며, 종종 비용이 많이 든다.</li>\n      <li>HotPotQA와 같은 다단계 추론 작업에서 빠르고 효율적인 해결 방식을 제공</li>\n    </ul>\n  </li>\n  <li>Nuanced feedback is required:\n    <ul>\n      <li>괄호의 개수는 맞지만 순서가 잘못되었습니다”와 같은 피드백</li>\n      <li>숫자 보상이 제공하지 못하는 세부 사항까지 전달 가능</li>\n    </ul>\n  </li>\n  <li>Interpretability and explicit memory are important:\n    <ul>\n      <li>에이전트가 이전 시도에서 잘못된 행동을 한 이유를 기록하고, 이를 기반으로 새로운 계획을 세움</li>\n      <li>예: 의사결정 작업에서 잘못된 경로를 선택한 이유를 문서화</li>\n    </ul>\n  </li>\n</ol>\n\n<hr />\n\n<h3 id=\"multimodal-cot-prompting\">Multimodal CoT Prompting</h3>\n\n<p>Text &amp; Vision 결합된 상황에서 모델이 논리적 추론 과정을 통해 답변을 도출하는 방식</p>\n\n<hr />\n\n<h3 id=\"graphprompts\">GraphPrompts</h3>\n\n<p>Graph 기반의 논리적 추론</p>\n\n<ul>\n  <li>사용자와 항목 간의 관계를 그래프로 표현하고, GraphPrompts를 사용해 개인화된 추천 생성: A 사용자가 좋아할 만한 영화는 무엇인가요?</li>\n  <li>그래프에서 최단 경로나 특정 경로를 탐색하는 작업: Node A에서 Node B로 가는 최단 경로를 알려주세요.</li>\n  <li>노드 간 연결 관계를 분석하여 네트워크의 특징 추출: 이 네트워크에서 가장 영향력 있는 노드는 누구인가요?</li>\n</ul>\n\n<hr />\n\n<h1 id=\"reference\">Reference</h1>\n\n<ul>\n  <li><a href=\"https://www.promptingguide.ai/\">Prompt Engineering Guide</a></li>\n</ul>",
    "reviews": [],
    "syllabus": [],
    "link": "https://sungjk.github.io/2025/03/22/prompt-engineering.html",
    "pubDate": "2025-03-22T00:00:00+00:00",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "토스 사내 봉사단 '토스피스', 세계 산림의 날 맞아 우면산 플로깅 진행",
    "description": "숲의 소중함과 환경 보호의 중요성을 되새기며 지역 환경 정화 활동 실시",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/plogging",
    "pubDate": "Fri, 21 Mar 2025 01:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "리눅스 절전 모드 비활성화 - systemd sleep",
    "description": "리눅스 워크스테이션이나 데스크탑 버전을 설치하면 기본적으로 절전 기능이 활성화 되어있다. 예를 들어 Fedora workstation을 설치했다면 기본으로 절전 기능이 활성화되어있을 것이다. 만일 ssh로 외부에서 접속해서 작업하다가는 아래와 같은 메시지와 함께 절전으로 전환(suspend) 될 수도 있다. 이렇게 절전 모드로 빠지면 외부 접속은 모두 끊긴다.\n$ Broadcast message from gdm@fedora on tty1:\n\nThe system will suspend now!\n이런 문제를 겪지 않으려면 다음과 같이 설정하도록 한다. (관련 매뉴얼 페이지 : systemd-sleep.conf) \n \n1. systemd/sleep.conf 설정 확인\n먼저 현재 설정을 systemd-analyze cat-config systemd/sleep.conf 명령으로 확인해본다.\n$ sudo systemd-analyze cat-config systemd/sleep.conf\n# /etc/systemd/sleep.conf\n#  This file is part of systemd.\n#\n#  systemd is free software; you can redistribute it and/or modify it under the\n#  terms of the GNU Lesser General Public License as published by the Free\n#  Software Foundation; either version 2.1 of the License, or (at your option)\n#  any later version.\n#\n# Entries in this file show the compile time defaults. Local configuration\n# should be created by either modifying this file, or by creating \"drop-ins\" in\n# the sleep.conf.d/ subdirectory. The latter is generally recommended.\n# Defaults can be restored by simply deleting this file and all drop-ins.\n#\n# See systemd-sleep.conf(5) for details.\n\n[Sleep]\n#AllowSuspend=yes\n#AllowHibernation=yes\n#AllowSuspendThenHibernate=yes\n#AllowHybridSleep=yes\n#SuspendMode=\n#SuspendState=mem standby freeze\n#HibernateMode=platform shutdown\n#HibernateState=disk\n#HybridSleepMode=suspend platform shutdown\n#HybridSleepState=disk\n#HibernateDelaySec=\n#SuspendEstimationSec=60min\n위에 보면 모든 값들이 해시문자(#)로 막혀있는데, 이는 기본값을 의미한다. 그 중에 AllowSuspend=yes로 되어있는 부분이 바로 자동 절전 모드이다. 이를 no로 바꾸면 되는데, 편집을 직접하는게 아니라 overriding config를 만드는 방법을 사용하게 된다.\n \n2. AllowSuspend=no 설정 방법\n해당 설정은 관리자인 root 계정으로 명령해야 한다. 먼저 overriding config file을 저장할 디렉토리로 /etc/systemd/sleep.conf.d를 만들어야 한다. 그리고 해당 디렉토리에 넣을 설정 파일을 vi 같은 에디터로 만들어주면 된다. 즉 아래와 같이 명령한다.\nmkdir /etc/systemd/sleep.conf.d\ncd $!\nvi nosuspend.conf\nvi nosuspend.conf 명령어를 실행한 다음에는 아래의 내용을 넣는다. 핵심 설정 부분은 AllowSuspend=no 라는 부분이다.\n[Sleep]\nAllowSuspend=no\nAllowHibernation=no\nAllowSuspendThenHibernate=no\nAllowHybridSleep=no\n설정이 제대로 되었는지 확인하기 위해 systemd-analyze cat-config systemd/sleep.conf 명령을 다시 내려본다. 만일 가장 하단에 /etc/systemd/sleep.conf.d/nosuspend.conf로부터 파일을 읽혀졌다면 제대로 설정된 것이다.\nroot user# systemd-analyze cat-config systemd/sleep.conf\n...생략...\n\n[Sleep]\n#AllowSuspend=yes\n#AllowHibernation=yes\n#AllowSuspendThenHibernate=yes\n#AllowHybridSleep=yes\n#SuspendMode=\n#SuspendState=mem standby freeze\n#HibernateMode=platform shutdown\n#HibernateState=disk\n#HybridSleepMode=suspend platform shutdown\n#HybridSleepState=disk\n#HibernateDelaySec=\n#SuspendEstimationSec=60min\n\n# /etc/systemd/sleep.conf.d/nosuspend.conf\n[Sleep]\nAllowSuspend=no\n...\n해당 설정은 즉시 적용되므로 따로 restart나 reload해줘야 하는 것은 없다. 다만 정 불안하다면 systemctl daemon-reload 명령을 한번 해주면 될 것이다.\n \n히스토리\n2025-03-21 글 작성",
    "reviews": [],
    "syllabus": [],
    "link": "https://sunyzero.tistory.com/313",
    "pubDate": "Fri, 21 Mar 2025 16:43:46 +0900",
    "creator": "sunyzero",
    "categories": [
      "컴퓨터 관련/리눅스(유닉스) 일반",
      "Fedora",
      "linux suspend",
      "systemctl",
      "systemd sleep",
      "리눅스 절전 모드 해제",
      "리눅스 하이버네이션"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "Kling AI 로 뽑은 영상 02",
    "description": "이전글 : https://serverdown.tistory.com/1213\n지난번에 반대로 회전했었고\n화전 반향을 지정해봐야 안먹힌다는 사실을 알았습니다.\n그래서 천천히 움직이라고 추가했고 \n영상이 짧으니 천천히 움직이면 당연히 조금밖에 못움직입니다.\n \n프롬프트\nMove your head slowly.\nBlink your eyes.\nMove your mouth gently.\n천천히 고개를 움직이고\n눈을 깝박이고\n입을 부드럽게 움직여라\n이렇게 적은것입니다.\n결과물\n \n\n\n\n눈을 깜박임이 과하군요 횟수 까지 지정해줘야겠군요",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1218",
    "pubDate": "Fri, 21 Mar 2025 01:41:26 +0900",
    "creator": "이건개발",
    "categories": [
      "유튜브"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "데드락 기록 - 2025.03.05",
    "description": "https://github.com/boyism80/fb/commit/36d155582b85733f95c559f11b5824b025052a96",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.naver.com/boyism/223805433497?fromRss=true&trackingCode=rss",
    "pubDate": "Sat, 22 Mar 2025 00:19:11 +0900",
    "creator": "boyism",
    "categories": [
      "동기화"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "왜 더 열심히 일하지 않을까",
    "description": "*악플을 쓰시려면, 기분이 태도가 되지 않게 특히 주의 바랍니다. 내가 쓴 악플은 세상 누구도 안 읽을 수도 있지만, 쓰시는 분은 반드시 읽습니다. 이 악플은 남을 향하기 전에 자기 자신에게 먼저 향합니다. 2월에 ‘더 열심히 일하지 않으면’이라는 글을 썼다. 솔직히 나는 그냥 내가 평소에 하던 생각을 그냥 포스팅했는데, 시장에서 꽤 많은 반응이 있었다. 한 달 만에(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/03/korea-needs-to-work-harder-and-longer.html",
    "pubDate": "Sun, 23 Mar 2025 21:25:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "FoundersAtWork",
      "general",
      "korea"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "토스, 자동차보험 비교추천 서비스 2.0 오픈",
    "description": "보험사와 동일한 보험료 안내",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/carinsurance2",
    "pubDate": "Thu, 20 Mar 2025 02:12:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "The Impact of Code Analysis in STEM: Protecting Work That Affects the World",
    "description": "At Qodana, we champion code quality for businesses and enterprise development teams, but it has other crucial applications, and implications. Not only can good (and bad!) code be felt in the digital products we all know and use every day, but its impact also extends to science, technology, engineering, and mathematics (STEM). As STEM disciplines […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/qodana/2025/03/code-analysis-in-stem/",
    "pubDate": "Sat, 22 Mar 2025 08:25:25 +0000",
    "creator": "Kerry Beetge",
    "categories": [
      "code-review",
      "code-analysis",
      "inellij",
      "learning",
      "science",
      "stem"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "선을 긋기",
    "description": "이 공간을 통해서도 과거에 몇 번 글을 쓴 적이 있는데, 내가 2012년에 스트롱을 시작하고 첫 2년 동안 투자자로서 가장 스트레스를 많이 받았던 건, 우리가 투자한 회사의 창업가보다 내가 그 사업에 대해서 더 많이 알고, 내가 그 사업을 하면 더 잘할 수 있을 것 같은데, 대표가 항상 내 생각과 말과 다르게 생각하고 행동할 때였다. 아마도 이걸(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/03/where-to-draw-the-line.html",
    "pubDate": "Wed, 19 Mar 2025 21:33:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "inspiring",
      "people",
      "Strong",
      "vc"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "Kotlin 2.1.20 Released",
    "description": "The Kotlin 2.1.20 release is out! This version includes performance improvements and bug fixes for Kotlin 2.1.0. Here are some highlights from this release: For the complete list of changes, refer to What’s new in Kotlin 2.1.20 or the release notes on GitHub. How to install Kotlin 2.1.20 Starting from IntelliJ IDEA 2023.3 and Android […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/kotlin/2025/03/kotlin-2-1-20-released-2/",
    "pubDate": "Thu, 20 Mar 2025 11:59:00 +0000",
    "creator": "Daniel Csorba",
    "categories": [
      "releases"
    ]
  }
]