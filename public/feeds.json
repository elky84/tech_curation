[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": [
      {
        "creator": "박명근",
        "title": "파운데이션 모델이란?",
        "link": "https://ppss.kr/archives/269222",
        "pubDate": "Wed, 30 Apr 2025 03:32:08 +0000",
        "content:encodedSnippet": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 답변 등과 같은 작업을 수행할 수 있습니다. 이러한 파인튜닝을 통해 새로운 AI 애플리케이션을 더 빠르고 저렴하게 개발할 수 있습니다.\n파운데이션 모델과 그 내부 작동 방식과 학습 과정, 그리고 실제 적용 사례에 대해 자세히 소개하도록 하겠습니다.\n출처: XENOSTACK\n \n파운데이션 모델은 어떻게 작동되는가?\nGPT나 BERT와 같은 트랜스포머 아키텍처 기반 모델과 같은 파운데이션 모델은 다양한 데이터 세트에 대한 광범위한 사전 학습과 특정 작업에 대한 파인튜닝을 통해 작동됩니다. 다음은 이러한 모델이 어떻게 작동되는지에 대해 소개하도록 하겠습니다.\n사전 훈련(Pre-Training)\n데이터 수집(Data Collection): 파운데이션 모델은 책, 웹사이트, 기사를 비롯한 다양한 텍스트 소스로부터 대규모의 다양한 데이터 세트를 학습하게 됩니다. 이를 통해 모델은 다양한 언어 패턴, 스타일 및 정보를 학습할 수 있습니다.\n학습 목표(Learning Objectives): 사전 훈련 과정에서 모델은 일반적으로 텍스트의 다른 부분이 주어지면 그 부분을 예측하도록 훈련되는데요, 예를 들어, GPT의 경우 모델은 이전 단어가 주어지면 문장의 다음 단어를 예측하게 됩니다 (자동 회귀 훈련(Autoregressive Training)이라고 알려진 프로세스). 반면에 BERT는 입력의 일부 단어가 무작위로 마스킹되고, 모델은 마스킹되지 않은 다른 단어가 제공하는 문맥을 기반으로 이러한 마스킹된 단어를 예측하는 방법을 학습하는 마스크 언어 모델 접근 방식을 사용합니다.\n모델 아키텍처(Model Architecture): 이 모델에 사용되는 트랜스포머 아키텍처는 셀프 어텐션(Self-attention) 메커니즘에 크게 의존하게 됩니다. 이를 통해 모델은 문장이나 문서에서 단어의 위치에 관계없이 각 단어의 중요도를 평가하여 문맥과 단어 간의 관계를 효과적으로 이해할 수 있습니다.\n파인튜닝(Fine-Tuning)\n작업별 특화된 데이터(Task-Specific Data): 사전 학습 후, 더 작은 작업별로 특화된 데이터 세트로 모델을 파인튜닝할 수 있습니다. 예를 들어, 감정 분석 작업의 경우 감정으로 레이블이 지정된 텍스트 샘플의 데이터 세트에 대해 모델을 파인튜닝할 수 있습니다.\n모델 조정(Adjusting the Model:): 파인튜닝 중에 특정 작업에서 더 나은 성능을 발휘하도록 전체 모델 또는 일부가 약간 조정될 수 있습니다. 이 과정에는 모델을 더 훈련시키는 작업이 포함되지만, 위 경우에는 감정 분류나 질문에 대한 답변과 같은 작업별 목표를 염두에 두고 진행됩니다.\n전문화(Specialization): 이 단계에서는 사전 학습 중에 습득한 일반적인 능력을 특정 작업 또는 도메인의 특정 요구 사항과 뉘앙스에 맞게 조정하여 동일한 작업에 대해 처음부터 모델을 학습하는 것에 비해 성능을 크게 향상시킵니다.\n배포(Deployment)\n사용 배포(Deployment for Use): 파인튜닝이 완료되면 가상 비서와 챗봇부터 시작해서 자동 번역, 콘텐츠 생성 도구에 이르기까지 다양한 애플리케이션에 파운데이션 모델을 배포할 수 있습니다.\n \n파운데이션 모델의 유형과 예시\n파운데이션 모델은 아키텍처, 훈련 목표와 애플리케이션이 매우 다양하며, 각 모델은 학습과 데이터와의 상호 작용의 다양한 측면을 활용하도록 맞춤화되어 있습니다. 다음은 다양한 유형의 파운데이션 모델에 대한 자세한 설명입니다.\n자동 회귀 모델(Autoregressive Model)\nGPT 시리즈(GPT-2, GPT-3, GPT-4)와 XLNet과 같은 자동 회귀 모델은 이전의 모든 단어가 주어진 시퀀스에서 다음 단어를 예측하는 훈련 방식을 사용합니다. 이 훈련 방법을 통해 이러한 모델은 일관성 있고 맥락에 맞는 텍스트를 생성할 수 있으며, 이는 특히 창의적인 글쓰기, 챗봇과 개인화된 고객 서비스 상호 작용에 유용합니다.\n오토인코딩 모델(Autoencoding Models)\nBERT와 RoBERTa를 포함한 오토인코딩 모델은 일반적으로 훈련 중에 모델에서 임의의 토큰을 숨기는 마스크드 언어 모델링(Masked Language Modeling)이라는 기술을 사용하여 먼저 입력을 손상시켜 입력을 이해하고 재구성하도록 훈련합니다. 그런 다음 모델은 문맥만을 기반으로 누락된 단어를 예측하는 방법을 학습합니다. 이러한 능력은 언어 구조를 이해하고 텍스트 분류, 개체 인식, 질문 답변과 같은 애플리케이션을 이해하는 데 매우 효과적입니다.\n인코더-디코더 모델(Encoder-Decoder Models)\nT5 (Text-to-Text Transfer Transformer) 및 BART와 같은 인코더-디코더 모델은 입력 텍스트를 출력 텍스트로 변환할 수 있는 다목적 툴입니다. 이러한 모델은 입력 시퀀스를 잠재 공간으로 인코딩한 다음 출력 시퀀스로 디코딩하는 방법을 학습하여 요약, 번역, 텍스트 수정과 같은 복잡한 작업을 처리하는 데 특히 능숙합니다. 이러한 학습에는 다양한 텍스트 to 텍스트 변환 작업이 포함되는 경우가 많기 때문에 여러 도메인에 걸쳐 폭넓게 적용할 수 있습니다.\n멀티모달 모델(Multimodal Models)\nCLIP(OpenAI의)와 DALL-E와 같은 멀티모달 모델은 텍스트와 이미지 등 다양한 데이터 유형에 걸쳐 있는 콘텐츠를 처리하고 생성하도록 설계되었습니다. 이러한 모델은 멀티모달 콘텐츠를 이해하고 생성함으로써 이미지 캡션, 텍스트 기반 이미지 검색, 텍스트 설명에서 이미지 생성 등 이미지와 텍스트 설명 간의 관계를 해석하는 작업에 매우 유용하게 활용됩니다.\n검색 증강 모델(Retrieval-Augmented Models)\n검색 증강 모델(예: RETRO (Retrieval-Enhanced Transformer))은 외부 지식 검색 프로세스를 통합하여 기존 언어 모델의 기능을 향상시키게 됩니다. 이 접근 방식을 사용하면 예측 단계에서 모델이 대규모 데이터베이스나 말뭉치에서 관련 데이터를 가져와 더 많은 정보를 바탕으로 정확한 결과를 도출할 수 있습니다. 이 모델은 특히 질문 답변이나 콘텐츠 검증과 같이 사실에 대한 정확성과 깊이가 필요한 애플리케이션에 효과적입니다.\n시퀀스 투 시컨스 모델(Sequence-to-Sequence Models)\nGoogle의 트랜스포머나 Facebook의 BART와 같은 시퀀스 투 시퀀스 (seq2seq) 모델은 입력 시퀀스를 밀접하게 관련된 출력 시퀀스로 변환해야 하는 작업을 처리합니다. 이러한 모델은 전체 콘텐츠 또는 그 의미를 정확하게 파악하여 다른 형태로 전달해야 하는 기계 번역이나 문서 요약의 기초가 됩니다.\n이같이 각 유형의 파운데이션 모델은 각각의 고유한 학습이나 운영 설계 덕분에 특정 작업에 고유하게 적합합니다. 다음 섹션에서는 몇 가지 사용 사례를 통해 파운데이션 모델의 기능에 대해 자세히 살펴보겠습니다.\n \n파운데이션 모델의 활용 사례\n파운데이션 모델은 대규모 데이터 세트에서 학습할 수 있는 적응성과 역량으로 다양한 산업을 변화시키고 있습니다. 다음은 몇 가지 흥미로운 예시입니다:\n자연어 처리(NLP): 파운데이션 모델은 많은 NLP 애플리케이션의 근간이 되는데요, 기계 번역을 구동하여 여러 언어 간에 원활한 커뮤니케이션을 가능하게 합니다. 또한 감정 분석(텍스트의 감정적 어조 이해)이나 챗봇 개발과 같은 작업에서 인간과 컴퓨터 간의 보다 자연스러운 상호 작용을 위해 사용할 수도 있습니다.\n콘텐츠 제작(Content Creation): 파운데이션 모델은 시와 대본에서 마케팅 카피에 이르기까지 다양한 텍스트를 창작하여 콘텐츠 제작자와 마케터를 지원할 수 있습니다.\n이미지 및 비디오 분석(Image and Video Analysis): 시각적 영역에서 파운데이션 모델은 이미지 및 비디오 분석에 탁월합니다. 보안 카메라의 물체 감지, 의사를 돕기 위한 의료 이미지 분석, 영화에서 사실적인 특수 효과를 생성하는 등의 작업에 사용할 수 있습니다.\n과학적 발견(Scientific Discovery): 이 모델은 대규모 데이터 세트를 분석하여 기존 방법으로는 놓칠 수 있는 패턴과 관계를 파악함으로써 과학적 연구를 가속화할 수 있습니다. 이러한 기능은 신약 개발, 재료 과학 또는 기후 변화 연구에 도움이 될 수 있습니다.\n자동화(Automation): 파운데이션 모델은 문서 요약이나 데이터 입력과 같은 반복적인 작업을 자동화하여 더 복잡한 작업을 위한 시간을 확보할 수 있습니다.\n이는 파운데이션 모델의 활용 사례 중 일부에 불과하며, 연구자들이 새로운 가능성을 모색함에 따라 잠재적인 응용 분야는 지속적으로 확장되고 있습니다. 파운데이션 모델은 다양한 산업과 일상생활을 변화시킬 수 있는 엄청난 가능성을 지니고 있습니다.\n \n파운데이션 모델 훈련 방법\n파운데이션 모델 훈련은 상당한 컴퓨팅 리소스와 전문 지식이 필요한 복잡한 작업입니다. 주요 단계를 간단하게 아래와 같이 소개합니다.\n데이터 수집과 준비(Data Collection and Preparation): 그 기반은 데이터를 기반으로 합니다. 원하는 작업과 관련된 방대한 양의 레이블이 지정되지 않은 데이터가 수집됩니다. 이러한 데이터는 거대 언어 모델 (LLM)의 경우 텍스트, 컴퓨터 비전 모델의 경우에는 이미지, 그리고 멀티모달 모델의 경우 텍스트와 이미지들의 조합일 수 있습니다. 데이터의 품질과 일관성을 보장하기 위해 데이터를 정리하고 전처리하는 것이 매우 중요합니다.\n모델 아키텍처와 선택(Model Architecture and Selection): 선택하는 파운데이션 모델 유형은 데이터와 작업에 따라 다릅니다. 일단 선택하면 모델 아키텍처는 대규모 데이터 집합을 효과적으로 처리하도록 파이뉸됩니다.\n자기 주도 학습(Self-Supervised Learning): 바로 여기서 마법이 일어납니다. 레이블이 지정된 데이터를 사용하는 지도 학습과 달리 파운데이션 모델은 자기 지도 학습 기법을 활용합니다. 이 경우에는 모델 자체가 레이블이 지정되지 않은 데이터에서 작업과 레이블을 생성하여 학습하게 되는데요, 여기에는 텍스트 데이터의 시퀀스에서 다음 단어를 예측하거나 이미지에서 누락된 부분을 식별하는 등의 작업이 포함됩니다.\n훈련과 최적화(Training and Optimization): 모델은 GPU 또는 TPU와 같은 강력한 컴퓨팅 리소스를 사용하여 준비된 데이터에 대해 학습됩니다. 모델 크기와 데이터 세트의 복잡성에 따라 이 훈련 과정은 며칠 또는 몇 주가 걸릴 수 있는데요, 모델의 성능을 최적화하기 위해 Gradient descent과 같은 기법이 사용됩니다.\n평가와 향상(Evaluation and Refinement): 학습 후에는 벤치마크 데이터 세트나 특정 작업에서 모델의 성능을 평가합니다. 결과가 이상적이지 않은 경우, 하이퍼파라미터를 조정하거나 품질 개선을 위해 데이터 준비 단계로 돌아가 모델을 더욱 세분화할 수 있습니다.\n파운데이션 모델을 훈련하는 것은 지속적인 과정이라는 점에 유의해야 합니다. 연구원들은 모델 성능과 성숙도를 향상시키기 위해 데이터 처리, 모델 아키텍처, 자기 지도 학습 작업에 대한 새로운 기술을 끊임없이 탐구하고 있습니다.\n \n파운데이션 모델의 장점\n파운데이션 모델은 다양한 영역에서 널리 채택되고 사용되는 데 기여하는 상당한 이점을 제공합니다. 몇 가지 주요 장점을 자세히 살펴보세요:\n다용도성과 적응성(Versatility and Adaptability): 기존의 좁게 초점을 맞춘 AI 모델과 달리 파운데이션 모델은 다용도로 사용할 수 있습니다. 해당 도메인(텍스트, 이미지 등) 내에서 다양한 작업에 맞게 미세 조정할 수 있으며, 심지어 멀티모달 모델의 경우 여러 도메인에 걸쳐 조정할 수도 있습니다. 이러한 유연성은 각 특정 작업에 대해 처음부터 새 모델을 구축하는 것에 비해 시간과 리소스를 절약할 수 있습니다.\n효율성과 비용 효율성(Efficiency and Cost-Effectiveness): 사전 학습된 파운데이션 모델은 개발자에게 확실한 출발점을 제공합니다. 특정 작업에 맞게 모델을 미세 조정하는 것이 완전히 새로운 모델을 처음부터 학습시키는 것보다 더 빠르고 계산 비용이 적게 드는 경우가 많습니다. 이러한 효율성은 비용 절감과 개발 주기 단축으로 이어집니다.\n향상된 성능(Improved Performance): 파운데이션 모델은 대량의 데이터 세트에 대한 대규모 학습으로 인해 다양한 작업에서 기존 모델보다 뛰어난 성능을 발휘하는 경우가 많습니다. 기계 번역, 이미지 인식 또는 텍스트 요약 작업에서 더 높은 정확도를 달성할 수 있습니다.\nAI의 민주화(Democratization of AI): 사전 학습된 파운데이션 모델을 사용할 수 있으므로 AI 개발의 진입 장벽이 낮아집니다. 대규모 컴퓨팅 리소스에 액세스할 수 없는 소규모 기업이나 연구원도 이러한 모델을 활용하여 혁신적인 AI 애플리케이션을 개발할 수 있습니다.\n과학적 발견의 가속화(Acceleration of Scientific Discovery): 파운데이션 모델은 방대한 과학 데이터 세트를 분석하여 기존 방법으로는 놓칠 수 있는 숨겨진 패턴과 그 관계를 발견할 수 있습니다. 이 기능은 신약 개발, 재료 과학 또는 기후 변화 연구와 같은 분야에서 과학적 진보를 크게 가속화할 수 있습니다.\n \n파운데이션 모델이 맞닥뜨린 과제\n파운데이션 모델은 뛰어난 기능에도 불구하고 전 세계 연구자들이 적극적으로 해결하기 위해 노력하고 있는 몇 가지 과제를 안고 있습니다. 다음은 몇 가지 주요 과제들입니다.\n데이터 편향성과 공정성(Data Bias and Fairness): 파운데이션 모델은 학습된 기존 데이터에 존재했던 편향성을 그대로 이어받을 수 있습니다. 이로 인해 차별적이거나 불공정한 결과가 나올 수 있는데요, 이러한 편향성을 완화하려면 신중한 데이터 선택, 큐레이션, 보다 공정한 학습 알고리즘 개발이 필요합니다.\n설명 가능성과 해석 가능성(Explainability and Interpretability): 파운데이션 모델이 어떻게 결과물에 도달하는지 이해하는 것은 어려울 수 있습니다. 이러한 투명성 부족은 잠재적인 오류나 편견을 식별하고 해결하기 어렵게 만듭니다. 이러한 모델을 보다 해석하기 쉽게 만드는 방법을 개발하기 위한 연구가 진행 중입니다.\n연산 리소스(Computational Resources): 파운데이션 모델을 훈련하고 실행하려면 GPU나 TPU와 같은 상당한 연산 능력과 리소스가 필요합니다. 따라서 이러한 인프라에 액세스할 수 없는 소규모 기업이나 연구자에게는 접근성이 제한될 수 있습니다.\n보안과 개인 정보 관련 이슈(Security and Privacy Concerns): 파운데이션 모델을 학습하는 데 사용되는 방대한 양의 데이터는 데이터 유츌에 대한 보안과 개인정보 보호 문제를 야기합니다. 악의적인 공격자는 학습 데이터나 모델 자체의 취약점을 악용할 수 있습니다. 강력한 보안 조치와 책임감 있는 데이터 처리 관행을 보장하는 것이 중요합니다.\n환경 영향(Environmental Impact): 이러한 모델을 훈련하는 데는 상당한 양의 에너지가 소모될 수 있습니다. 보다 에너지 효율적인 훈련 방법을 개발하고 재생 가능한 에너지원을 사용하는 것은 파운데이션 모델을 지속 가능하게 배포하기 위한 중요한 고려 사항입니다.\n출처: NVIDIA 블로그\n \n결론\n파운데이션 모델은 AI 기능의 획기적인 도약을 가져다줍니다. 다용도성, 효율성, 방대한 양의 데이터를 통한 학습 능력은 다양한 산업과 일상생활을 변화시킬 차세대 지능형 애플리케이션의 기반을 닦고 있습니다.\n원문: Digital Marketing Curation\n이 필자의 다른 글 읽기\n검색 엔진 마케팅(SEM)에서 해야 할 것과 하지 말아야 할 것\n가독성을 높이는 7가지 이메일 디자인 팁\n당장 그만두어야 하는 구식 SEO 전략 7가지",
        "enclosure": {
          "type": "image/jpeg",
          "length": "0",
          "url": "https://ppss.kr/wp-content/uploads/2025/04/1-7.jpg"
        },
        "dc:creator": "박명근",
        "content": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 [&#8230;]",
        "contentSnippet": "파운데이션 모델은 방대한 양의 일반 데이터로 학습된 강력한 인공 지능(AI)의 유형으로, 광범위한 작업을 처리할 수 있습니다. OpenAI의 GPT(Generative Pre-trained Transformer) 시리즈나 Google의 BERT (Bidirectional Encoder Representations from Transformers)와 같은 파운데이션 모델은 인터넷의 다양한 소스에서 일반적인 언어 패턴과 지식을 수집하도록 설계되었습니다. 그런 다음 이러한 모델을 소규모의 작업별 데이터 세트에 맞게 파인튜닝하여 텍스트 분류, 요약, 번역, 질문 […]",
        "guid": "https://ppss.kr/?p=269222",
        "categories": [
          "IT",
          "개발"
        ],
        "isoDate": "2025-04-30T03:32:08.000Z"
      }
    ]
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Augustin Popa",
        "title": "What’s New in vcpkg (April 2025)",
        "link": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/",
        "pubDate": "Fri, 02 May 2025 21:44:09 +0000",
        "content:encodedSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg also no longer have to build the vcpkg tool from source when they install vcpkg.\nSome stats for this period:\nThere are now 2,587 total ports available in the vcpkg curated registry. A port is a versioned recipe for building a package from source, such as a C or C++ library.\n23 new ports were added to the curated registry.\n234 ports were updated. As always, we validate each change to a port by building all other ports that depend on or are depended by the library that is being updated for our 15 main triplets.\n92 community contributors made commits.\nThe main vcpkg repo has over 6,800 forks and 24,600 stars on GitHub.\nvcpkg changelog (2025.04.09 release)\nThe following notable changes were made in April:\nArm64 Linux users of vcpkg now receive a prebuilt binary when they bootstrap, rather than having to wait for a source build (PR: Microsoft/vcpkg-tool#1599).\nImproved vcpkg output to clearly state relative paths to files that are being downloaded (PR: Microsoft/vcpkg-tool#1618).\nFixed a crash on Windows when curl is used to download assets (PR: Microsoft/vcpkg-tool#1639, thanks @autoantwort!).\nFixed some bugs with SPDX files generated by vcpkg (PR: Microsoft/vcpkg-tool#1607, thanks @Thomas1664!).\nFixed some bugs with how vcpkg interacts with curl (PRs: Microsoft/vcpkg-tool#1440, Microsoft/vcpkg-tool#1598, Microsoft/vcpkg-tool#1630, thanks @moritz-h, @AndreyAlifanov, and @Osyotr!).\nOther bug fixes (thanks @autoantwort!).\nDocumentation changes\nNew concepts article: Offline Usage of vcpkg. Details two methods on how to deploy vcpkg in environments without live Internet connectivity (PR: Microsoft/vcpkg-docs#457).\nAdded entry for VCPKG_LOCK_FIND_PACKAGE_<Pkg> to vcpkg in CMake projects concepts article. When this option is set, non-nested calls to CMake’s find_package can be required or disabled (PR: Microsoft/vcpkg-docs#344).\nAdded entry for MAYBE_UNUSED_VARIABLES to the Maintainer guide. This can be used to silence a warning during the CMake configuration step (PR: Microsoft/vcpkg-docs#468).\nRevised vcpkg FAQ entry for how to use custom compiler flags to rebuild libraries by providing more specific and actionable advice (PR: Microsoft/vcpkg-docs#465).\nRevised usage and copyright instructions in Tutorial: Package a library with vcpkg and Provide usage documentation for your ports articles (PR: Microsoft/vcpkg-docs#463, thanks @dg0yt!).\nSorted Concepts table of contents entries alphabetically (PR: Microsoft/vcpkg-docs#471).\nIf you have any suggestions for our documentation, please submit an issue in our GitHub repo or see the box at the bottom of a particular article.\n\nTotal ports available for tested triplets\nTriplet\nPorts available\n\n\nx86-windows\n2366\n\n\nx64-windows\n2489\n\n\nx64-windows-release\n2489\n\n\nx64-windows-static\n2352\n\n\nx64-windows-static-md\n2405\n\n\nx64-uwp\n1387\n\n\narm64-windows\n2078\n\n\narm64-windows-static-md\n2056\n\n\narm64-uwp\n1351\n\n\nx64-osx\n2352\n\n\narm64-osx\n2271\n\n\nx64-linux\n2472\n\n\narm-neon-android\n1827\n\n\nx64-android\n1884\n\n\narm64-android\n1851\n\n\n\nWhile vcpkg supports a much larger variety of target platforms and architectures (as community triplets), the list above is validated exhaustively to ensure updated ports don’t break other ports in the catalog.\nThank you to our contributors\nvcpkg couldn’t be where it is today without contributions from our open-source community. Thank you for your continued support! The following people contributed to the vcpkg, vcpkg-tool, or vcpkg-docs repos in this release (listed alphabetically by GitHub username):\na4z\ngian21391\nowent\n\n\nAaronVanGeffen\nguillermocalvo\nPolarGoose\n\n\nadolfos94\ngwaldron\nrremilian\n\n\nAlex-PLACET\nhelynranta\nRippeR37\n\n\nalfredh\nHexDecimal\nrmisev\n\n\naluaces\nhosseinmoein\nRT2Code\n\n\naminya\nJAicewizard\nrtzoeller\n\n\nautoantwort\njalegido\nsaschanaz\n\n\nazure-sdk\njeremy-rifkin\nSidneyCogdill\n\n\nAenBleidd\njglanz\nsinfomicien\n\n\nbgsuello\njonahbeckford\nskypjack\n\n\nbraindigitalis\njreichel-nvidia\nsnnn\n\n\nbuck-yeh\nk-wojcik\nsorokin\n\n\nBurningEnlightenment\nlbartoletti\nstarfishmod\n\n\nc8ef\nlongnguyen2004\nstrega-nil\n\n\ncenit\nluncliff\nSunBlack\n\n\nchrismile\nm7913d\nswebb2066\n\n\nculhatsker\nm-kuhn\ntalregev\n\n\nDarkx32\nmathgeekcoder\ntartanpaint\n\n\ndaschuer\nMarkus87\ntghviking\n\n\nderchr\nmiyanyan\nThomas1664\n\n\ndg0yt\nmussorgsky\nThomsonTan\n\n\nDryvnt\nmvieth\ntimheeg\n\n\ndunhor\nMysvac\ntoge\n\n\neao197\nNeumann-A\nTradias\n\n\nEnzoMassyle\nnickdademo\nVuYeK\n\n\nErik-White\nNiproblema\nwalbourn\n\n\newertons\nnlogozzo\nweirddan455\n\n\nF-I-D-O\noleg-derevenetz\nyanzixiang\n\n\nFidelxyz\nolizit\nytnuf\n\n\ng-maxime\nOsyotr\n\n\n\n\nLearn more\nYou can find the main release notes on GitHub. Recent updates to the vcpkg tool can be viewed on the vcpkg-tool Releases page. To contribute to vcpkg documentation, visit the vcpkg-docs repo. If you’re new to vcpkg or curious about how a package manager can make your life easier as a C/C++ developer, check out the vcpkg website – vcpkg.io.\nIf you would like to contribute to vcpkg and its library catalog, or want to give us feedback on anything, check out our GitHub repo. Please report bugs or request updates to ports in our issue tracker or join more general discussion in our discussion forum.\n \nThe post What’s New in vcpkg (April 2025) appeared first on C++ Team Blog.",
        "dc:creator": "Augustin Popa",
        "comments": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/#respond",
        "content": "<p>This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-april-2025/\">What’s New in vcpkg (April 2025)</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2025.04.09 registry release, 2025-03-22, 2025-04-01, and 2025-04-07 tool releases, as well as changes to vcpkg documentation throughout April. This release contains bug fixes, a new documentation article on offline usage of vcpkg, and other minor improvements. Arm64 Linux users of vcpkg […]\nThe post What’s New in vcpkg (April 2025) appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35441",
        "categories": [
          "C++",
          "Vcpkg",
          "vcpkg"
        ],
        "isoDate": "2025-05-02T21:44:09.000Z"
      },
      {
        "creator": "Sinem Akinci",
        "title": "There’s a Linux File Explorer built into Visual Studio!?!",
        "link": "https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/",
        "pubDate": "Thu, 01 May 2025 15:44:39 +0000",
        "content:encodedSnippet": "The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It’s a powerful tool for managing remote environments without leaving your development workflow.\nScott Hanselman published a new YouTube video to his channel, taking us on the journey of discovering and using the Remote File Explorer to interact with his personal PiDP-11 through shell scripts stored on the minicomputer.\nCheck out Scott’s video and his thoughts about using the Remote File Explorer below:\n\nUsing the Remote File Explorer and remote development capabilities from Visual Studio\nTo learn more about utilizing the Remote File Explorer, please see our announcement blog post and our updates blog post.\nVisual Studio delivers a comprehensive suite of remote development capabilities, empowering developers to build, run, and debug applications on remote Linux systems with the same experience they enjoy locally. From the Integrated Terminal, which offers direct access to the remote shell, to full support for the build system, project system, language services, and debugging tools, every part of the development workflow is designed to work remotely. Whether you’re using MSBuild or CMake-based projects, Visual Studio enables true cross-platform development – allowing you to stay productive across environments without leaving the IDE. To learn more, visit our remote Linux development docs for Visual Studio.\nWant to learn more?\nCheck out our playlist of remote Linux videos for C++ development on YouTube to discover more of our remote tooling:\nhttps://www.youtube.com/playlist?list=PLReL099Y5nRc6a6gTmir60KUABlPtAodZ\nThe Microsoft C++ team is continuously looking to improve the remote Linux experience with the IDE and would love to hear from any enterprise that works with Visual Studio. Please reach out to us via email at visualcpp@microsoft.com.\nThe post There’s a Linux File Explorer built into Visual Studio!?! appeared first on C++ Team Blog.",
        "dc:creator": "Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/#comments",
        "content": "<p>The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It&#8217;s a powerful tool for managing remote environments without leaving your development workflow. Scott Hanselman published a new YouTube video to his channel, taking us on the journey of [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/theres-a-linux-file-explorer-built-into-visual-studio/\">There’s a Linux File Explorer built into Visual Studio!?!</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "The Remote File Explorer in Visual Studio provides developers with a convenient way to browse, view, and edit files on remote machines—directly from within the IDE. It’s a powerful tool for managing remote environments without leaving your development workflow. Scott Hanselman published a new YouTube video to his channel, taking us on the journey of […]\nThe post There’s a Linux File Explorer built into Visual Studio!?! appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35410",
        "categories": [
          "C++"
        ],
        "isoDate": "2025-05-01T15:44:39.000Z"
      },
      {
        "creator": "Alexandra Kemper, Sinem Akinci",
        "title": "VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths",
        "link": "https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/",
        "pubDate": "Wed, 30 Apr 2025 23:31:17 +0000",
        "content:encodedSnippet": "The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on your preferences. \n Experience these new features for yourself by updating to version 1.25.  \nCopilot Hover\nWant to understand your unfamiliar codebases like undocumented library code quicker without having to navigate around files and read several lines of code? Looking for easy-to-digest information in the middle of your coding task to help get you started? \nGitHub Copilot now leverages C++ language services to provide summaries of symbols that you would like to learn more about or are lacking documentation. This requires an active GitHub Copilot subscription, now available to try for free. \nWhen you hover over any symbol, you’ll now have an option to Generate Copilot summary. \n\nCopilot will leverage context provided by C++ language services to generate more information on a given symbol for you no matter where you are in your codebase, using its declaration or definition information. For example, see how it helps understand the ctx_server struct from llama.cpp, an LLM inference written in C/C++. \n\nPlease let us know any feedback on the user experience by commenting on our open issue tracking this. \nCustomize Recursive #include Processing  \nHave you ever worked on a project that wasn’t configured and had issues with recursive #includes? With this release, we have introduced three new settings to give you more control over how recursive include paths are processed. This lets you tune IntelliSense for better correctness and performance in your project.  \nThe ideal way to configure the C++ Extension is with a configuration provider (such as CMake Tools) or a compile_commands.json file, which will provide the configuration for IntelliSense. Otherwise, the C++ extension, by default, adds a ‘recursive’ include path to your configuration which searches all subdirectories of your workspace as if they were #include paths. Recursion is indicated by appending /** to your include path in your c_cpp_properties.json file: \n\nWhile using recursive includes saves you from having to list every include path individually, the process of resolving recursive includes can be resource and time intensive, especially for large projects.   \nTo better tailor this process to your project’s structure and your performance needs, you can now optimize with three new configuration options in c_cpp_properties.json:\n1. recursiveIncludes.reduce\nBy default, the C++ extension avoids passing unneeded include paths to the IntelliSense process. When the extension opens and parses a source file, it recursively follows each #include to track every directory that contains a header. Only these relevant directories are used in the final configuration passed to the IntelliSense process. However, the process of identifying directories to reduce can add additional overhead. \nWith the new “recursiveIncludes.reduce” setting, you can choose to skip this reduction step. By setting reduce to “never”, all recursive include paths will be passed to the IntelliSense process. In some situations, depending on the sub-directory layout, header file structure, and other project characteristics, this can lead to performance improvements. \nFor example, when setting reduce to “never” for the PyTorch source code, there was an average 3.1x speedup in the time to generate the initial semantic colorization for a file on first open. For this project, it is faster to pass all include paths to the IntelliSense process rather than spend time reducing include paths to relevant directories.  This speedup was 1.5x on MacOS, 2x on Linux, and 5.8x on Windows. Testing was done using version 1.99 of VS Code, comparing the C++ extension version 1.23 to 1.25. \n  \nNote that performance gains may vary depending on the machine and project used. To learn more, please reference the recursive include path documentation.\n2. recursiveIncludes.priority\nHave you ever opened a large project for the first time, opened a file that uses  #include “string.h” and IntelliSense finds the wrong string.h? It turns out one of your project’s sub directories contains a header file named “string.h” that conflicts with the system header for “string.h”. With the new priority setting, you can now determine which of these two to choose. \nAlways prioritize your own header file? Choose “beforeSystemIncludes”.  This process mimics a compiler’s resolution order, which ensures IntelliSense results match the compiler’s results and allows for more predictability. For example, if you create a “string.h” locally, you probably want IntelliSense to pick up that file in the same way a compiler would. \nAlways prioritize the system header? Choose “afterSystemIncludes”. For example, if your code contains the sysroots for multiple IoT devices, you want to pick up system includes from your compiler and not from the first sysroot found in your workspace.  \n3. recursiveIncludes.order\nCustomize further by specifying the search order so relevant header files are found first. If your workspace has multiple files of the same name, and the incorrect file is chosen, try switching to “breadthFirst” instead of the default “depthFirst” so headers closer to the root of the recursive include path have higher priority.   \nTry it out \nTo experiment with these new settings and experience the performance improvements yourself, open your workspace in VS Code, then: \nOpen the Command Palette (Ctrl+Shift+P on Windows or Cmd+Shift+P on Mac) and open the editor for c_cpp_properties.json by running: `C/C++: Edit Configurations (JSON)`\nConfirm you’re using a recursive path ending in /** under “includePath”: \n\n      3. Add or modify the fields in the recursiveIncludes section:\n \nSave your changes and reopen a file in your project to see them take effect. You can toggle these settings to determine which configuration provides the best performance for your project.  \nWhat do you think?  \nDownload the C/C++ extension for Visual Studio Code  today, give it a try, and let us know what you think.  \nIf you have any questions around this release, feel free to start a discussion in our GitHub repository. Otherwise, if you run into any issues, please report them in the issues section. We can be reached via the comments below, per email at  visualcpp@microsoft.com, or through our team on X/Twitter at  @VisualC. \n \nThe post VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths appeared first on C++ Team Blog.",
        "dc:creator": "Alexandra Kemper, Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/#respond",
        "content": "<p>The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/vs-code-c-extension-1-25-release-explain-c-symbols-using-copilot-customize-recursive-include-paths/\">VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot &#038; Customize recursive include paths</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "The 1.25 release of the C++ extension in Visual Studio Code introduces a new way to understand your code faster with GitHub Copilot-powered symbol summaries, as well as new customization options for recursive #include path processing. With these enhancements, you gain AI-powered insights into unfamiliar or undocumented code and can optimize IntelliSense performance based on […]\nThe post VS Code C++ Extension 1.25 Release:  Explain C++ symbols using Copilot & Customize recursive include paths appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35419",
        "categories": [
          "C++",
          "Copilot",
          "performance",
          "Visual Studio Code"
        ],
        "isoDate": "2025-04-30T23:31:17.000Z"
      },
      {
        "creator": "Sy Brand",
        "title": "Pure Virtual C++ 2025 is Tomorrow",
        "link": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/",
        "pubDate": "Tue, 29 Apr 2025 09:07:40 +0000",
        "content:encodedSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It’s running live tomorrow, 30th April, from 14:00 to 16:30 UTC.\nRegister for Free\n\nThe talks are:\n14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi\n14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang\n15:00 UTC: Making unfamiliar C++ code familiar with GitHub Copilot with Sinem Akinci\n15:30 UTC: C++ Modules Myth Busting with Cameron DaCamara\n16:00 UTC: constexpr everything?! with Hana Dusíková\nWe also have a host of pre-conference content available on YouTube.\nWe look forward to seeing you there!\nThe post Pure Virtual C++ 2025 is Tomorrow appeared first on C++ Team Blog.",
        "dc:creator": "Sy Brand",
        "comments": "https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/#respond",
        "content": "<p>Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It&#8217;s running live tomorrow, 30th April, from 14:00 to 16:30 UTC. The talks are: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making unfamiliar C++ code familiar with [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/pure-virtual-cpp-2025-is-tomorrow/\">Pure Virtual C++ 2025 is Tomorrow</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "Pure Virtual C++ is our free, one-day, virtual conference for the whole C++ community. It’s running live tomorrow, 30th April, from 14:00 to 16:30 UTC. The talks are: 14:00 UTC: Welcome to v1.0 of the meta::[[verse]]! with Inbal Levi 14:30 UTC: Proxy: Next Generation Polymorphism with Mingxin Wang 15:00 UTC: Making unfamiliar C++ code familiar with […]\nThe post Pure Virtual C++ 2025 is Tomorrow appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=35414",
        "categories": [
          "Announcement",
          "C++",
          "Pure Virtual C++"
        ],
        "isoDate": "2025-04-29T09:07:40.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "Taking the plunge: The engineering journey of building a subsea cable",
        "link": "https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/",
        "pubDate": "Thu, 01 May 2025 18:48:02 +0000",
        "content:encodedSnippet": "Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – are critical for Meta to serve people wherever they are in the world. In fact, more than 95% of the world’s intercontinental traffic goes through subsea cables. \nMeta’s engineering team prioritizes both innovation and quality when designing and deploying these cables. In the latest Meta Tech Podcast, Andy Palmer-Felgate and Pascal Pecci, both subsea cable systems engineers, join Pascal Hartig on the Meta Tech podcast to discuss the latest in subsea engineering technology. This episode dives deeper into the engineering nuances of large-scale subsea cable projects like the recently announced Project Waterworth. \nLearn more about Meta’s work on these engineering feats. Download or listen to the episode below:\n\nThe Meta Tech Podcast is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features.\nSend us feedback on Instagram, Threads, or X.\n\nAnd if you’re interested in learning more about career opportunities at Meta, visit the Meta Careers page.\nThe post Taking the plunge: The engineering journey of building a subsea cable appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Taking the plunge: The engineering journey of building a subsea cable</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – [...]\nRead More...\nThe post Taking the plunge: The engineering journey of building a subsea cable appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22481",
        "categories": [
          "Connectivity",
          "Networking & Traffic",
          "Meta Tech Podcast"
        ],
        "isoDate": "2025-05-01T18:48:02.000Z"
      },
      {
        "creator": "",
        "title": "Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes",
        "link": "https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/",
        "pubDate": "Tue, 29 Apr 2025 17:15:17 +0000",
        "content:encodedSnippet": "We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing.\nBy providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems. \nThis initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community to address the critical challenge of software vulnerability repair.\nAutoPatchBench is available now on GitHub.\nAI is increasingly being applied to solve security challenges, including repairing vulnerabilities identified through fuzzing. However, the lack of a standardized benchmark for objectively assessing AI-driven bug repair agents specific to fuzzing has impeded progress in academia and the broader community. Today, we are publicly releasing AutoPatchBench, a benchmark designed to evaluate AI program repair systems. AutoPatchBench sits within CyberSecEval 4, Meta’s new benchmark suite for evaluating AI capabilities to support defensive use cases. It features 136 fuzzing-identified C/C++ vulnerabilities in real-world code repos along with verified fixes sourced from the ARVO dataset. \nAutoPatchBench provides a standardized evaluation framework for assessing the effectiveness of AI-assisted vulnerability repair tools. This benchmark aims to facilitate a comprehensive understanding of the capabilities and limitations of various AI-driven approaches to repairing fuzzing-found bugs. By offering a consistent set of evaluation criteria, AutoPatchBench fosters transparency and reproducibility in research, enabling both academic and industry professionals to identify best practices and areas for improvement.\nFixing fuzzing-found vulnerabilities with AI\nFuzzing is a cornerstone in automated testing, renowned for its effectiveness in uncovering security vulnerabilities. By bombarding a target program with vast amounts of pseudo-random input data, fuzz testing exposes critical security and reliability issues, such as memory corruption, invalid pointer dereference, integer overflow, and parsing errors. \nHowever, resolving a fuzzing crash is often a labor intensive task, demanding intricate debugging and thorough code review to pinpoint and rectify the underlying cause. This process can be both time-consuming and resource-intensive. Unlike regular test failures, fuzzing bugs frequently reveal security vulnerabilities that pose severe threats to system integrity and user data. Given these stakes, automating the repair of fuzzing bugs with AI becomes not just advantageous but essential. AI’s ability to swiftly analyze patterns and propose solutions significantly reduces the time and effort required for repairs, making it an invaluable ally in safeguarding our digital environments.\nLet’s explore the process of addressing bugs identified through fuzzing by examining a demonstrative example. Consider the following C function, which harbors a read/write buffer overflow vulnerability:\n#include <stdio.h>\r\n#include <string.h>\r\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strcpy(buffer, input); // Potential buffer overflow\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\nIn this scenario, a fuzzing harness might supply an input that surpasses the buffer’s capacity, leading to a crash due to buffer overflow. A typical stack trace from such a crash might appear as follows:\n== Fuzzer Crash Report ==\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff7af1223 in strcpy () from /lib/x86_64-linux-gnu/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff7af1223 in strcpy ()\r\n#1  0x0000555555555140 in process_input (input=0x7fffffffe695 \"AAAAAA...\")\r\n#2  0x0000555555555162 in main (argc=2, argv=0x7fffffffe5f8)\nHere, the process_input function invokes strcpy on a string that exceeds the eight-character buffer, causing a segmentation fault. A straightforward patch involves ensuring the copy operation remains within the buffer’s limits. This can be achieved by using a bounded copy function like strncpy or implementing a length check before copying:\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strncpy(buffer, input, sizeof(buffer) - 1);\r\n    buffer[sizeof(buffer) - 1] = '\\0';\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\nThis patch ensures that the string remains within the buffer’s limits, effectively preventing out-of-bounds writes. Its correctness can be confirmed by verifying that the fuzzing input, which previously caused the crash, no longer does so. Additional checks can be conducted to ensure the patch doesn’t introduce any unintended side effects.\nAs illustrated, fixing a fuzzing crash involves:\nAnalyzing the crash stack trace and the target code. \nPinpointing the root cause. \nPatching the vulnerable code. \nVerifying the fix’s accuracy. \nAn AI-based solution can automate these steps by utilizing an LLM’s capability to understand and generate code.\nWhy we developed AutoPatchBench\nAutoPatchBench is informed by key advancements in the field of AI-driven program repair, particularly those focusing on fuzzing-found vulnerabilities. Among the notable contributions is Google’s tech report on AI-powered patching, which pioneered the use of LLMs for addressing fuzzing crashes, achieving a 15% fix rate with their proprietary dataset. Subsequently, Google’s study on generic program repair agents introduced the GITS-Eval benchmark, encompassing 178 bugs across various programming languages. \nIn the realm of AI software engineering agents, benchmarks like SWE-Bench and SWE-Bench Verified have gained widespread acceptance for evaluating generic AI SWE agents. However, these benchmarks do not specifically tackle the unique challenges posed by fuzzing-found vulnerabilities, which demand specialized approaches that utilize fuzzing-specific artifacts and address security concerns. \nAutoPatchBench addresses this gap by offering a dedicated benchmark focused on a wide variety of C/C++ vulnerabilities of 11 crash types identified through fuzzing with automated verification capability. Unlike the broader focus of GITS-Eval and SWE-Bench, AutoPatchBench is specifically designed to assess the effectiveness of AI-driven tools in repairing security-critical bugs typically uncovered by fuzzing. This targeted approach enables a more precise evaluation of AI capabilities in meeting the complex requirements of fuzzing-found vulnerabilities, thereby advancing the field of AI-assisted program repair in a focused manner.\nInside AutoPatchBench\nWe’re making AutoPatchBench publicly available as part of CyberSecEval 4 to encourage community collaboration in tackling the challenge of automating fuzzing crash repairs. This benchmark is specifically designed for AI program repair agents focusing on C/C++ bugs identified through fuzzing. It includes real-world C/C++ vulnerabilities with verified fixes sourced from the ARVO dataset, and incorporates additional verification of AI-generated patches through fuzzing and white-box differential testing.\nARVO dataset\nThe ARVO dataset serves as the foundation for AutoPatchBench, offering a comprehensive collection of real-world vulnerabilities that are essential for advancing AI-driven security research. Sourced from C/C++ projects identified by Google’s OSS-Fuzz, ARVO includes over 5,000 reproducible vulnerabilities across more than 250 projects. Each entry is meticulously documented with a triggering input, a canonical developer-written patch, and the capability to rebuild the project in both its vulnerable and patched states. \nHowever, there are notable challenges when using the ARVO dataset as a benchmark for AI patch generation:\nWhile reproducibility is vital for a reliable benchmark, the ARVO dataset includes samples where crashes are not consistently reproducible. Some samples lack crash stack traces, making it exceedingly difficult to address the crash.\nAlthough ARVO provides a ground-truth fix for each identified vulnerability, it lacks an automated mechanism to verify the correctness of a generated patch. Objective automated verification is essential for a benchmark focused on patch generation.\nAutoPatchBench addresses these challenges by creating a curated subset and by employing a comprehensive and automated verification process.\nSelection criteria\nTo ensure the reliability and effectiveness of AutoPatchBench, we meticulously filtered the ARVO dataset samples based on the following criteria:\nValid C/C++ vulnerability: The ground-truth fix shall edit one or more C/C++ source files that are not fuzzing harnesses.\nDual-container setup: Each vulnerability is accompanied by two containers—one that contains vulnerable code and another for the fixed code—that build without error.\nReproducibility: The crash must be consistently reproducible within the vulnerable container.\nValid stack trace: A valid stack trace must be present within the vulnerable container to facilitate accurate diagnosis and repair.\nSuccessful compilation: The vulnerable code must compile successfully within its designated container, ensuring that the environment is correctly set up for testing.\nFixed code verification: The fixed code must also compile successfully within its respective container, confirming that the patch does not introduce new build issues.\nCrash resolution: The crash must be verified as resolved within the fixed container, demonstrating the effectiveness of the patch.\nFuzzing pass: The fixed code must pass a comprehensive fuzzing test without finding new crashes, ensuring that the ground-truth patch maintains the integrity and functionality of the software.\nAfter applying these rigorous selection criteria, we retained 136 samples for AutoPatchBench that fulfill the necessary conditions for both patch generation and verification. From this refined set, we created a down-sampled subset of 113 AutoPatchBench-Lite samples to provide a focused benchmark for testing AI patch generation tools. These subsets preserves the diversity and complexity of real-world vulnerabilities including 11 distinct crash types, offering a solid foundation for advancing AI-driven security solutions.\nPatch verification\nIn the process of patch generation, the patch generator utilizes two automated methods to verify the viability of a generated patch before submitting it for evaluation. The first method involves attempting to build the patched program, which checks for syntactic correctness. The second method involves attempting to reproduce the crash by running the input that initially triggered it. If the crash no longer occurs, it suggests that the issue has been resolved. However, these steps alone are insufficient to guarantee the correctness of the patch, as a patch might not maintain the program’s intended functionality, rendering it incorrect despite resolving the crash.\nTo address this issue, AutoPatchBench adopts a comprehensive approach to automate the evaluation of generated patches. This involves subjecting the patched code to further fuzz testing using the original fuzzing harness that initially detected the crash. Additionally, white-box differential testing compares the runtime behavior of the patched program against the ground truth repaired program, confirming that the patch has effectively resolved the underlying bug without altering the program’s intended functionality. Since a patch can potentially be made in multiple places, we cannot assume that the LLM will patch the same function as the groundtruth patch does. Instead we find all the callstacks for each call to a patched function. Then we find the lowest common ancestor (LCA) across all pairs of stacktraces offered by the groundtruth patch and the LLM patch. We then utilize debug information to inspect arguments, return values, and local variables at the first function above the LCA, differential testing offers a detailed view of the patch’s impact on the program state. \nThis process evaluates whether the generated patch produces a program state identical to the ground truth program after the patched function returns. By using a diverse set of inputs obtained from fuzzing, this gives higher confidence that the bug is fixed without changing the visible behavior of the patched functions. This differential testing is implemented using a Python script that leverages LLDB APIs to dump all visible states and identify differences between the ground truth and the patched program. \nHowever, as with all attempts to solve provably undecidable problems (in this case: program equivalence), there are some failure modes for this verification step. For example, sometimes the analysis fails with timeouts, in which case we consider the semantics to be preserved if both the ground truth and the LLM patch timed out. Programs might also behave non-deterministically, and we run each input three times to identify nondeterministic struct fields and values. Such fields will not be compared to avoid false alarms from noisy, random values. Additionally, we strip any fields that contain the substring “build” or “time” as we’ve observed false positives from build-ids (that happen to be deterministic within a program, but not across different patches). \nIt should also be noted that on a number of examples, the crashing PoC never actually triggered the breakpoints on the ground truth patch, making comparison of the resulting states impossible. However, our case study showed that white-box differential testing is still effective in filtering out a majority of incorrect patches despite its limitation, which will be discussed in the case study.\nAutoPatchBench and AutoPatchBench-Lite\nAutoPatchBench is a comprehensive benchmark dataset of 136 samples. It encompasses a wide range of real-world vulnerabilities, providing a robust framework for assessing the capabilities of automated patch generation systems. \nWithin this benchmark, we have also created a subset called AutoPatchBench-Lite that consists of 113 samples. AutoPatchBench-Lite focuses on a simpler subset of vulnerabilities where the root cause of the crash is confined to a single function. This version is designed to cater to scenarios where the complexity of the bug is relatively low, making it more accessible for tools that are in the early stages of development or for those that specialize in handling straightforward issues.\nThe rationale for creating AutoPatchBench-Lite stems from the observation that when root causes are distributed across multiple locations within the code, the difficulty of generating a correct patch increases significantly. Addressing such “hard” crashes requires a tool to possess advanced reasoning capabilities to analyze larger codebases and apply patches to multiple areas simultaneously. This complexity not only challenges the tool’s design but also demands a higher level of sophistication in its algorithms to ensure accurate and effective patching.\nBy offering both AutoPatchBench and AutoPatchBench-Lite, we provide a tiered approach to benchmarking, allowing developers to progressively test and refine their tools. This structure supports the development of more advanced solutions capable of tackling both simple and complex vulnerabilities, ultimately contributing to the enhancement of AI-assisted bug repair techniques.\nExpected use cases\nAutoPatchBench offers significant value to a diverse range of users. Developers of auto-patch tools can leverage our open-sourced patch generator to enhance their tools and assess their effectiveness using the benchmark. Software projects employing fuzzing can incorporate our open-sourced patch generator to streamline vulnerability repair. Additionally, model developers can integrate the benchmark into their development cycles to build more robust and specialized expert models for bug repair. The tooling around the patch generator provided here can also be used in reinforcement learning as a reward signal during training. This data helps train models to better understand the nuances of bug repair, enabling them to learn from past fixes and improve their ability to generate accurate patches. \nReference implementation\nWe developed a basic patch generator to establish a baseline performance using AutoPatchBench. This generator is specifically designed to address simple crashes that involve patching a single function. We have open-sourced this reference implementation to encourage the community to build and expand upon it.\nFigure 1 shows a high-level overview of its design. The patch generator takes crash stack trace and target source code as input. It identifies the source locations from the stack trace and extracts every function that contains those locations. It then asks the LLM to identify the root cause and repair the crash by patching one of the functions. Upon receiving a response from the LLM, the patch generator extracts the revised code, applies the patch, compiles the program, and tests it against the original input that caused the crash. If the build or test fails, we re-engage the LLM with the error message from the build or test output, requesting it to attempt a solution again until the crash is resolved. If a fix trajectory fails to reach a valid solution that passes build and crash reproduction within a finite number of steps, we start a new trajectory to reset the context window, preventing prolonged entrapment in an incorrect path.\nFigure 1: Patch generation flowchart.\nThe example prompt below also captures the essence of our approach. Note that the actual prompt is more detailed and divided into multiple segments to promote chain-of-thought reasoning.\nAs an experienced Security Engineer at Meta, your task is to address the following security-critical fuzzing crash. Below is the stack trace of the crash:\r\n\r\n== Fuzzer Crash Report ==\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00007ffff7af1223 in strcpy () from /lib/x86_64-linux-gnu/libc.so.6\r\n(gdb) bt\r\n#0  0x00007ffff7af1223 in strcpy ()\r\n#1  0x0000555555555140 in process_input (input=0x7fffffffe695 \"AAAAAA...\")\r\n#2  0x0000555555555162 in main (argc=2, argv=0x7fffffffe5f8)\r\n\r\nHere is the source code for the functions involved in the stack trace:\r\n\r\nstrcpy() {...}\r\n\r\nvoid process_input(const char *input) {\r\n    char buffer[8];\r\n    strcpy(buffer, input); // Potential buffer overflow\r\n    printf(\"Processed: %s\\n\", buffer);\r\n}\r\n\r\nint main() {...}\r\n\r\nAssuming the root cause of the crash is within one of these functions, generate a patched version of the faulty function to resolve the fuzzing crash. Ensure that you provide a complete rewrite of the function so that the patch can be applied and the code compiled without errors.\r\n\nA case study with AutoPatchBench-Lite\nIn the case study, we demonstrate the use of AutoPatchBench by evaluating our reference patch generator with several LLM models. Given that our reference implementation is limited to addressing simple issues, we conducted our evaluation with AutoPatchBench-Lite, which contains 113 samples. To prevent fix trajectories from becoming excessively prolonged, we capped the maximum length of each trajectory at five. Additionally, we set the maximum number of retries to 10. \nPlease note that the case study is not intended to provide a statistically rigorous comparison of model performance. Instead, it aims to present preliminary results to establish a baseline expectation. We encourage future research to build upon these findings.\nEffectiveness of patch generation and verification\nWe evaluated the effectiveness of the patch generator and our automated verification processes while using different LLM models as back-end. The figure below illustrates the effectiveness of patch generation and verification by presenting the percentage of samples that successfully passed each sequential verification step: (1) patch validity: build and crash reproducibility check, (2) fuzzing pass: passes 10-minute fuzzing, and (3) testing pass: passes white-box differential testing. It is important to note that the patch generation process only utilizes step (1) to verify the build and crash reproducibility. The fuzzing and differential testing are conducted post-generation to assess correctness.\nFigure 2: Patch generation and verification success rate.\nFigure 2 shows that all models achieved similar generation success rates of around 60% and similar post-verification success rates of around 5-11% with overlapping confidence intervals, and therefore, we do not draw any conclusion about their relative performance. The graph does, however, reveal that a substantial portion of the generated patches are found to be incorrect when subjected to fuzzing and white-box differential testing. For instance, Gemini 1.5 Pro achieved a 61.1% patch generation success rate, yet fewer than 15% of these patches (5.3% out of total set) were found to be correct. This gap highlights that build and crash reproduction are not good enough signals to infer the correctness of generated patches, and that future patch generation approaches should scrutinize the semantic preservation of generated patches more thoroughly. This gap also underscores the vital role of the comprehensive verification processes that checks semantic equivalence, a distinctive contribution of AutoPatchBench.\nEffect of inference-time computation\nTo assess the impact of inference-time computation on improving the patch generation success rate, we present the distribution of retry counts among the 73 patches produced by Llama 4 Maverick.\n\nFigure 3: Percentage of generated patches per number of iterations.\nFigure 3 shows that 44 out of 73 patches, or 60.2%, were successfully generated on the first attempt. The remaining 40% of the samples required more than two iterations, with no evident plateau until the 10th iteration. This outcome demonstrates that allocating more computational resources during inference-time leads to a higher success rate and suggests that increasing the number of retries could yield better results.\nManual validation\nIn our investigation of the precision and recall of white-box differential testing, we conducted a manual validation of 44 patches that passed 10-minute fuzzing against human-written ground truth fixes with the help of security experts. These patches were selected from a pool of 73 generated by Llama 4 Maverick. The following table shows the confusion matrix.\nTable 1: Confusion matrix between human judgement and differential testing\n\nTest pass\nTest fail\nSum\n\n\nHuman pass\n5\n0\n5\n\n\nHuman reject\n7\n32\n39\n\n\nSum\n12\n32\n44\n\n\n\n \nThe results showed that the differential testing achieved an accuracy of 84.1% for this sample (5 + 32 / 44), indicating a high overall agreement with the human assessment. However, a closer examination of the confusion matrix revealed a notable discrepancy between precision and recall. Specifically, the testing method demonstrated 100.0% recall in this case study, correctly identifying all 5 instances that humans judged as correct. In contrast, precision was relatively low (41.7%), with 7 false positives out of 12 total positive predictions. This suggests that differential testing reported success on some incorrect patches as well, highlighting the need for manual validation of patch correctness. Despite this shortcoming, the result clearly shows the utility of differential testing in automatically rejecting a substantial number of incorrect patches, which will substantially save the manual validation effort.\nKey insights\nOur case study revealed several limitations of the current patch generator.\nThe root cause may not exist in the stack trace\nFrequently, crashes are the result of state contamination that occurs prior to the crash being triggered. Consequently, none of the functions within the stack frames may include the code responsible for the root cause. Since our current implementation requires the LLM to assume that the root cause is located within one of the functions in the stack trace, it is unable to generate an accurate patch in such cases. Solving this problem would require a more autonomous agent which can reason about the root cause on its own with a code browsing capability.\nCheating\nIn some instances, the LLM resorted to “cheating” by producing patches that superficially resolved the issue without addressing the underlying problem. This can occur when the generator modifies or removes code in a way that prevents the crash from occurring, but does not actually fix the root cause of the issue. We observed that cheating happens more frequently when we request the LLM to retry within the same trajectory. A potential solution to this could be to empower the LLM to say “I cannot fix it,” which may come with a tradeoff with success rate. However, note that most of the cheating was caught in the verification step, highlighting the utility of differential testing.\nNeed for enhanced patch verification methods\nFuzzing and white-box differential testing have shown that a large majority of generated patches are incorrect when compared to the ground-truth patches. This finding highlights the challenge of generating accurate patches without enhanced verification capabilities. To address this gap, several approaches can be considered:\nA patch generator could provide additional code context when querying the LLM for a patch so that LLM can better understand the consequence of a code patch.\nA patch generator could make additional LLM queries to verify the perseverance of existing functionality.\nA patch generator can attempt to generate multiple valid patches by exploring multiple trajectories in parallel, and let LLM choose the best option that is most likely to be correct.\nIn a well-tested real-world codebase, a patch generator can utilize existing tests to validate the patches it creates. This process complements building the code and checking for crash reproduction, allowing the patch generator to retry if a patch fails the tests. The accuracy of the generated patches is largely dependent on the thoroughness of the existing tests.\nIn conclusion, while our study has identified several challenges with the current patch generation process, it also opens up opportunities for improvement. By addressing these limitations with innovative solutions, we can enhance the accuracy and reliability of patch generation, paving the way for more robust and effective automated tools.\nGet started with AutoPatchBench\nAutoPatchBench is now available on GitHub. We welcome pull requests to integrate new/additional agent architectures into the framework, and look forward to seeing how well they perform on AutoPatchBench.\nThe post Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing. By providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems.  This initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/04/29/ai-research/autopatchbench-benchmark-ai-powered-security-fixes/\">Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are introducing AutoPatchBench, a benchmark for the automated repair of vulnerabilities identified through fuzzing. By providing a standardized benchmark, AutoPatchBench enables researchers and practitioners to objectively evaluate and compare the effectiveness of various AI program repair systems.  This initiative facilitates the development of more robust security solutions, and also encourages collaboration within the community [...]\nRead More...\nThe post Introducing AutoPatchBench: A Benchmark for AI-Powered Security Fixes appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22391",
        "categories": [
          "AI Research"
        ],
        "isoDate": "2025-04-29T17:15:17.000Z"
      },
      {
        "creator": "",
        "title": "Building Private Processing for AI tools on WhatsApp",
        "link": "https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/",
        "pubDate": "Tue, 29 Apr 2025 17:15:00 +0000",
        "content:encodedSnippet": "We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way.\nWe’re sharing an early look into Private Processing, an optional capability that enables users to initiate a request to a confidential and secure environment and use AI for processing messages where no one — including Meta and WhatsApp — can access them.\nTo validate our implementation of these and other security principles, independent security researchers will be able to continuously verify our privacy and security architecture and its integrity.\nAI has revolutionized the way people interact with technology and information, making it possible for people to automate complex tasks and gain valuable insights from vast amounts of data. However, the current state of AI processing — which relies on large language models often running on servers, rather than mobile hardware — requires that users’ requests are visible to the provider. Although that works for many use cases, it presents challenges in enabling people to use AI to process private messages while preserving the level of privacy afforded by end-to-end encryption.\nWe set out to enable AI capabilities with the privacy that people have come to expect from WhatsApp, so that AI can deliver helpful capabilities, such as summarizing messages, without Meta or WhatsApp having access to them, and in the way that meets the following principles:\nOptionality: Using Meta AI through WhatsApp, including features that use Private Processing, must be optional. \nTransparency: We must provide transparency when our features use Private Processing.\nUser control: For people’s most sensitive chats that require extra assurance, they must be able to prevent messages from being used for AI features like mentioning Meta AI in chats, with the help of WhatApp’s Advanced Chat Privacy feature.\nIntroducing Private Processing\nWe’re excited to share an initial overview of Private Processing, a new technology we’ve built to support people’s needs and aspirations to leverage AI in a secure and privacy-preserving way. This confidential computing infrastructure, built on top of a Trusted Execution Environment (TEE), will make it possible for people to direct AI to process their requests — like summarizing unread WhatsApp threads or getting writing suggestions — in our secure and private cloud environment. In other words, Private Processing will allow users to leverage powerful AI features, while preserving WhatsApp’s core privacy promise, ensuring no one except you and the people you’re talking to can access or share your personal messages, not even Meta or WhatsApp. \nTo uphold this level of privacy and security, we designed Private Processing with the following foundational requirements:\nConfidential processing: Private Processing must be built in such a way that prevents any other system from accessing user’s data — including Meta, WhatsApp or any third party — while in processing or in transit to Private Processing.\nEnforceable guarantees: Attempts to modify that confidential processing guarantee must cause the system to fail closed or become publicly discoverable via verifiable transparency.\nVerifiable transparency: Users and security researchers must be able to audit the behavior of Private Processing to independently verify our privacy and security guarantees.\nHowever, we know that technology platforms like ours operate in a highly adversarial environment where threat actors continuously adapt, and software and hardware systems keep evolving, generating unknown risks. As part of our defense-in-depth approach and best practices for any security-critical system, we’re treating the following additional layers of requirements as core to Private Processing on WhatsApp:\nNon-targetability: An attacker should not be able to target a particular user for compromise without attempting to compromise the entire Private Processing system.\nStateless processing and forward security: Private Processing must not retain access to user messages once the session is complete to ensure that the attacker can not gain access to historical requests or responses.\nThreat modeling for Private Processing\nBecause we set out to meet these high-security requirements, our work to build Private Processing began with developing a threat model to help us identify potential attack vectors and vulnerabilities that could compromise the confidentiality, integrity, or availability of user data. We’ve worked with our peers in the security community to audit the architecture and our implementation to help us continue to harden them. \nBuilding in the open\nTo help inform our industry’s progress in building private AI processing, and to enable independent security research in this area, we will be publishing components of Private Processing, expanding the scope of our Bug Bounty program to include Private Processing, and releasing a detailed security engineering design paper, as we get closer to the launch of Private Processing in the coming weeks. \nWhile AI-enabled processing of personal messages for summarization and writing suggestions at users’ direction is the first use case where Meta applies Private Processing, we expect there will be others where the same or similar infrastructure might be beneficial in processing user requests. We will continue to share our learnings and progress transparently and responsibly.\nHow Private Processing works\nPrivate Processing creates a secure cloud environment where AI models can analyze and process data without exposing it to unauthorized parties. \nHere’s how it works:\nAuthentication: First, Private Processing obtains anonymous credentials to verify that the future requests are coming from authentic WhatsApp clients.\nThird-party routing and load balancing: In addition to these credentials, Private Processing fetches HPKE encryption public keys from a third-party CDN in order to support Oblivious HTTP (OHTTP).\nWire session establishment: Private Processing establishes an OHTTP connection from the user’s device to a Meta gateway via a third-party relay which hides requester IP from Meta and WhatsApp.\nApplication session establishment: Private Processing establishes a Remote Attestation + Transport Layer Security (RA-TLS) session between the user’s device and the TEE. The attestation verification step cross-checks the measurements against a third-party ledger to ensure that the client only connects to code which satisfies our verifiable transparency guarantee.\nRequest to Private Processing: After the above session is established, the device makes a request to Private Processing (e.g., message summarization request), that is encrypted end-to-end between the device and Private Processing with an ephemeral key that Meta and WhatsApp cannot access. In other words, no one except the user’s device or the selected TEEs can decrypt the request.\nPrivate Processing: Our AI models process data in a confidential virtual machine (CVM), a type of TEE, without storing any messages, in order to generate a response. CVMs may communicate with other CVMs using the same RA-TLS connection clients use to complete processing. \nResponse from Private Processing: The processed results are then returned to the user’s device, encrypted with a key that only the device and the pre-selected Private Processing server ever have access to. Private Processing does not retain access to messages after the session is completed.\nThe threat model\nIn designing any security-critical system, it is important to develop a threat model to guide how we build its defenses. Our threat model for Private Processing includes three key components:\nAssets: The sensitive data and systems that we need to protect.\nThreat actors: The individuals or groups that may attempt to compromise our assets.\nThreat scenarios: The ways in which our assets could be compromised, including the tactics, techniques, and procedures (TTPs) that threat actors might use.\nAssets\nIn the context of applying Private Processing to summarizing unread messages or providing writing suggestions at users’ direction, we will use Private Processing to protect messaging content, whether they have been received by the user, or still in draft form. We use the term “messages” to refer to these primary assets in the context of this blog.\nIn addition to messages, we also include additional, secondary assets which help support the goal of Private Processing and may interact with or directly process assets: the Trusted Computing Base (TCB) of the Confidential Virtual Machine (CVM), the underlying hardware, and the cryptographic keys used to protect data in transit.\nThreat actors\nWe have identified three threat actor types that could attack our system to attempt to recover assets.\nMalicious or compromised insiders with access to our infrastructure.\nA third party or supply chain vendor with access to components of the infrastructure.\nMalicious end users targeting other users on the platform.\nThreat scenarios\nWhen building Private Processing to be resilient against these threat actors, we consider relevant threat scenarios that may be pursued against our systems, including (but not limited to) the following:\nExternal actors directly exploit the exposed product attack surface or compromise the services running in Private Processing CVMs to extract messages.\nAnywhere the system processes untrusted data, there is potentially an attack surface for a threat actor to exploit. Examples of these kinds of attacks include exploitation of zero-day vulnerabilities or attacks unique to AI such as prompt injection. \nPrivate Processing is designed to reduce such an attack surface through limiting the exposed entry points to a small set of thoroughly reviewed components which are subject to regular assurance testing. The service binaries are hardened and run in a containerized environment to mitigate the risks of code execution and limit a compromised binary’s ability to exfiltrate data from within the CVM to an external party.\nInternal or external attackers extract messages exposed through the CVM.\nObservability and debuggability remains a challenge in highly secure environments as they can be at odds with the goal of confidential computing, potentially exposing side channels to identify data and in the worst case accidentally leaking messages themselves. However, deploying any service at scale requires some level of observability to identify failure modes, since they may negatively impact many users, even when the frequency is uncommon. We implement a log-filtering system to limit export to only allowed log lines, such as error logs.\nLike any complex system, Private Processing is built of components to form a complex supply chain of both hardware and software. Internally, our CVM build process occurs in restricted environments that maintain provenance and require multi-party review. Transparency of the CVM environment, which we’ll provide through publishing a third-party log of CVM binary digests and CVM binary images, will allow external researchers to analyze, replicate, and report instances where they believe logs could leak user data.\nInsiders with physical or remote access to Private Processing hosts interfere with the CVM at boot and runtime, potentially bypassing the protections in order to extract messages.\nTEE software exploitation is a growing area of security research, and vulnerability researchers have repeatedly demonstrated the ability to bypass TEE guarantees. Similarly, physical attacks on Private Processing hosts may be used to defeat TEE guarantees or present compromised hosts as legitimate to an end user.\nTo address these unknown risks, we built Private Processing on the principle of defense-in-depth by actively tracking novel vulnerabilities in this space, minimizing and sanitizing untrusted inputs to the TEE, minimizing attack surface through CVM hardening and enabling abuse detection through enhanced host monitoring.\nBecause we know that defending against physical access introduces significant complexity and attack surface even with industry-leading controls, we continuously pursue further attack surface hardening. In addition, we reduce these risks through measures like encrypted DRAM and standard physical security controls to protect our datacenters from bad actors.\nTo further address these unknown risks, we seek to eliminate the viability of targeted attacks via routing sessions through a third-party OHTTP relay to prevent an attacker’s ability to route a specific user to a specific machine.\nDesigning Private Processing\nHere is how we designed Private Processing to meet these foundational security and privacy requirements against the threat model we developed. \n(Further technical documentation and security research engagements updates are coming soon).\nConfidential processing\nData shared to Private Processing is processed in an environment which does not make it available to any other system. This protection is further upheld by encrypting data end-to-end between the client and the Private Processing application, so that only Private Processing, and no one in between – including Meta, WhatsApp, or any third-party relay – can access the data.\nTo prevent possible user data leakage, only limited service reliability logs are permitted to leave the boundaries of CVM.\nSystem software\nTo prevent privileged runtime access to Private Processing, we prohibit remote shell access, including from the host machine, and implement security measures including code isolation. Code isolation ensures that only designated code in Private Processing has access to user data. Prohibited remote shell access ensures that neither the host nor a networked user can gain access to the CVM shell.\nWe defend against potential source control and supply chain attacks by implementing established industry best practices. This includes building software exclusively from checked-in source code and artifacts, where any change requires multiple engineers to modify the build artifacts or build pipeline.\nAs another layer of security, all code changes are auditable. This allows us to ensure that any potential issues are discovered — either through our continuous internal audits of code, or by external security researchers auditing our binaries.\nSystem hardware\nPrivate Processing utilizes CPU-based confidential virtualization technologies, along with Confidential Compute mode GPUs, which prevent certain classes of attacks from the host operating system, as well as certain physical attacks.\nEnforceable guarantees\nPrivate Processing utilizes CPU-based confidential virtualization technologies which allow attestation of software based in a hardware root of trust to guarantee the security of the system prior to each client-server connection. Before any data is transmitted, Private Processing checks these attestations, and confirms them against a third-party log of acceptable binaries.\nStateless and forward secure service\nWe operate Private Processing as a stateless service, which neither stores nor retains access to messages after the session has been completed.\nAdditionally, Private Processing does not store messages to disk or external storage, and thus does not maintain durable access to this data.\nAs part of our data minimization efforts, requests to Private Processing only include data that is useful for processing the prompt — for example, message summarization will only include the messages the user directed AI to summarize.\nNon-targetability\nPrivate Processing implements the OHTTP protocol to establish a secure session with Meta routing layers. This ensures that Meta and WhatsApp do not know which user is connecting to what CVM. In other words, Meta and WhatsApp do not know the user that initiated a request to Private Processing while the request is in route, so that a specific user cannot be routed to any specific hardware.\nPrivate Processing uses anonymous credentials to authenticate users over OHTTP. This way, Private Processing can authenticate users to the Private Processing system, but remains unable to identify them. Private Processing does not include any other identifiable information as part of the request during the establishment of a system session. We limit the impact of small-scale attacks by ensuring that they cannot be used to target the data of a specific user.\nVerifiable transparency\nTo provide users visibility into the processing of their data and aid in validation of any client-side behaviors, we will provide capabilities to obtain an in-app log of requests made to Private Processing, data shared with it, and details of how that secure session was set up. \nIn order to provide verifiability, we will make available the CVM image binary powering Private Processing. We will make these components available to researchers to allow independent, external verification of our implementation.\nIn addition, to enable deeper bug bounty research in this area, we will publish source code for certain components of the system, including our attestation verification code or load bearing code.\nWe will also be expanding the scope of our existing Bug Bounty program to cover Private Processing to enable further independent security research into Private Processing’s design and implementation. \nFinally, we will be publishing a detailed technical white paper on the security engineering design of Private Processing to provide further transparency into our security practices, and aid others in the industry in building similar systems.\nGet Involved\nWe’re deeply committed to providing our users with the best possible messaging experience while ensuring that only they and the people they’re talking to can access or share their personal messages. Private Processing is a critical component of this commitment, and we’re excited to make it available in the coming weeks.\nWe welcome feedback from our users, researchers, and the broader security community through our security research program:\nMore details: Meta Bug Bounty\nContact us\nThe post Building Private Processing for AI tools on WhatsApp appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way. We’re sharing an early look into Private Processing, an optional capability [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/04/29/security/whatsapp-private-processing-ai-tools/\">Building Private Processing for AI tools on WhatsApp</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are inspired by the possibilities of AI to help people be more creative, productive, and stay closely connected on WhatsApp, so we set out to build a new technology that allows our users around the world to use AI in a privacy-preserving way. We’re sharing an early look into Private Processing, an optional capability [...]\nRead More...\nThe post Building Private Processing for AI tools on WhatsApp appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22434",
        "categories": [
          "Security & Privacy",
          "WhatsApp"
        ],
        "isoDate": "2025-04-29T17:15:00.000Z"
      },
      {
        "creator": "",
        "title": "How Meta understands data at scale",
        "link": "https://engineering.fb.com/2025/04/28/security/how-meta-understands-data-at-scale/",
        "pubDate": "Mon, 28 Apr 2025 16:30:19 +0000",
        "content:encodedSnippet": "Managing and understanding large-scale data ecosystems is a significant challenge for many organizations, requiring innovative solutions to efficiently safeguard user data. Meta’s vast and diverse systems make it particularly challenging to comprehend its structure, meaning, and context at scale.\nTo address these challenges, we made substantial investments in advanced data understanding technologies, as part of our Privacy Aware Infrastructure (PAI). Specifically, we have adopted a “shift-left” approach, integrating data schematization and annotations early in the product development process. We also created a universal privacy taxonomy, a standardized framework providing a common semantic vocabulary for data privacy management across Meta’s products that ensures quality data understanding and provides developers with reusable and efficient compliance tooling.\nWe discovered that a flexible and incremental approach was necessary to onboard the wide variety of systems and languages used in building Meta’s products. Additionally, continuous collaboration between privacy and product teams was essential to unlock the value of data understanding at scale.\nWe embarked on the journey of understanding data across Meta a decade ago with millions of assets in scope ranging from structured and unstructured, processed by millions of flows across many of the Meta App offerings. Over the past 10 years, Meta has cataloged millions of data assets and is classifying them daily, supporting numerous privacy initiatives across our product groups. Additionally, our continuous understanding approach ensures that privacy considerations are embedded at every stage of product development. \nAt Meta, we have a deep responsibility to protect the privacy of our community. We’re upholding that by investing our vast engineering capabilities into building cutting-edge privacy technology. We believe that privacy drives product innovation. This led us to develop our Privacy Aware Infrastructure (PAI), which integrates efficient and reliable privacy tools into Meta’s systems to address needs such as purpose limitation—restricting how data can be used while also unlocking opportunities for product innovation by ensuring transparency in data flows \nData understanding is an early step in PAI. It involves capturing the structure and meaning of data assets, such as tables, logs, and AI models. Over the past decade, we have gained a deeper understanding of our data, by embedding privacy considerations into every stage of product development, ensuring a more secure and responsible approach to data management.\n\nWe embarked on our data understanding journey by employing heuristics and classifiers to automatically detect semantic types from user-generated content. This approach has evolved significantly over the years, enabling us to scale to millions of assets. However, conducting these processes outside of developer workflows presented challenges in terms of accuracy and timeliness. Delayed classifications often led to confusion and unnecessary work, while the results were difficult to consume and interpret.\nData understanding at Meta using PAI\nTo address shortcomings, we invested in data understanding by capturing asset structure (schematization), describing meaning (annotation), and inventorying it into OneCatalog (Meta’s system that discovers, registers, and enumerates all data assets) across all Meta technologies. We developed tools and APIs for developers to organize assets, classify data, and auto-generate annotation code. Despite significant investment, the journey was not without challenges, requiring innovative solutions and collaboration across the organization.\nChallenge\nApproach\n\n\nUnderstanding at scale (lack of foundation)\nAt Meta, we manage hundreds of data systems and millions of assets across our family of apps.\nEach product features its own distinct data model, physical schema, query language, and access patterns. This diversity created a unique hurdle for offline assets: the inability to reuse schemas due to the limitations of physical table schemas in adapting to changing definitions. Specifically, renaming columns or making other modifications had far-reaching downstream implications, rendering schema evolution challenging, thus propagation required careful coordination to ensure consistency and accuracy across multiple systems and assets. \nWe introduced a shared asset schema format as a logical representation of the asset schema that can be translated back and forth with the system-specific format. Additionally, it offers tools to automatically classify data and send out annotation changes to asset owners for review, effectively managing long-tail systems.\n\n\nInconsistent definitions (lack of shared understanding)\nWe encountered difficulties with diverse data systems that store data in various formats, and customized data labels that made it challenging to recognize identical data elements when they are stored across multiple systems.\nWe introduced a unified taxonomy of semantic types, which are compiled into different languages. This ensured that all systems can share the same canonical set of labels.\n\n\nMissing annotations (lack of quality)\nA solution that relied solely on data scanning and pattern matching was prone to false positives due to limited contextual information. For instance, a 64-bit integer could be misclassified as either a timestamp or a user identifier without additional context. Moreover, manual human labeling is not feasible at scale because it relies heavily on individual developers’ expertise and knowledge.\nWe shifted left by combining schematization together with annotations in code, in addition improving and utilizing multiple classification signals. Strict measurements provided precision/recall guarantees. Protection was embedded in everything we built, without requiring every developer to be a privacy expert.\n\n\nOrganizational barriers (lack of a unified approach)\nMeta’s data systems, with their bespoke schematization and practices, posed significant challenges in understanding data across the company. As we navigated complex interactions and with ever evolving privacy requirements, it became clear that fragmented approaches to data understanding hindered our ability to grasp data comprehensively.\nBy collaborating with asset owners to develop intuitive tooling and improve coverage, we tackled adoption barriers such as poor developer experience and inaccurate classification. This effort laid the groundwork for a unified data understanding foundation, which was seamlessly integrated into the developer workflow. As a result, we drove a cultural shift towards reusable and efficient privacy practices, ultimately delivering value to product teams and fostering a more cohesive approach to data management.\n\n\n\n\nWalkthrough: Understanding user data for the “Beliefs” feature in Facebook Dating \nTo illustrate our approach and dive into the technical solution, let’s consider a scenario involving structured user data. When creating a profile on the Facebook Dating app, users have the option to include their religious views to help match with others who share similar values.\n\nOn Facebook Dating, religious views are subject to purpose limitation requirements. Our five-step approach to data understanding provides a precise, end-to-end view of how we track and protect sensitive data assets, including those related to religious views:\n\nEven a simple feature can involve data being processed by dozens of heterogenous systems, making end-to-end data protection critical. To ensure comprehensive protection, it is essential to apply the necessary steps to all systems that store or process data, including distributed systems (web systems, chat, mobile and backend services) and data warehouses.\nConsider the data flow from online systems to the data warehouse, as shown in the diagram below. To ensure that religious belief data is identified across all these systems, we have implemented measures to prevent its use for any purpose other than the stated one.\n\nStep 1 – Schematizing\nAs part of the PAI initiative, Meta developed DataSchema, a standard format that is used to capture the structure and relationships of all data assets, independent of system implementation. Creating a canonical representation for compliance tools. Understanding DataSchema requires grasping schematization, which defines the logical structure and relationships of data assets, specifying field names, types, metadata, and policies.\nImplemented using the Thrift Interface Description Language, DataSchema is compatible with Meta systems and languages. It describes over 100 million schemas across more than 100 data systems, covering granular data units like database tables, key-value stores, data streams from distributed systems (such as those used for logging), processing pipelines, and AI models. Essentially, a data asset is like a class with annotated attributes. \nLet’s examine the source of truth (SoT) for a user’s dating profile schema, modeled in DataSchema. This schema includes the names and types of fields and subfields:\n  - user_id (uint)\r\n  - name (string)\r\n  - age (uint)\r\n  - religious_views (enum)\r\n  - photos (array<struct>):\r\n     - url (url)\r\n     - photo (blob)\r\n     - caption (string)\r\n     - uploaded_date (timestamp)\r\nDating profile DataSchema\nThe canonical SoT schema serves as the foundation for all downstream representations of the dating profile data. In practice, this schema is often translated into system-specific schemas (source of record – “SoR”), optimized for developer experience and system implementation in each environment. \nStep 2 – Predicting metadata at scale\nBuilding on this schematization foundation, we used annotations to describe data, enabling us to quickly and reliably locate user data, such as religious beliefs, across Meta’s vast data landscape. This is achieved through a universal privacy taxonomy, a framework that provides a common semantic vocabulary for data privacy management across Meta’s apps. It offers a consistent language for data description and understanding, independent of specific programming languages or technologies.\nThe universal privacy taxonomy works alongside data classification, which scans systems across Meta’s product family to ensure compliance with privacy policies. These systems use taxonomy labels to identify and classify data elements, ensuring privacy commitments are met and data is handled appropriately according to its classification.\nPrivacy annotations are represented by taxonomy facets and their values. For example, an asset might pertain to an Actor.Employee, with data classified as SemanticType.Email and originating from DataOrigin.onsite, not a third party. The SemanticType annotation is our standard facet for describing the meaning, interpretation, or context of data, such as user names, email addresses, phone numbers, dates, or locations. \nBelow, we illustrate the semantic type taxonomy node for our scenario, Faith Spirituality:\n\nAs data models and collected data evolve, annotations can become outdated or incorrect. Moreover, new assets may lack annotations altogether. To address this, PAI utilizes various techniques to continuously verify our understanding of data elements and maintain accurate, up-to-date annotations:\n\nOur classification system leverages machine learning models and heuristics to predict data types by sampling data, extracting features, and inferring annotation values. Efficient data sampling, such as Bernoulli sampling, and processing techniques enable scaling to billions of data elements with low-latency classifications. \nKey components include:\nScheduling component: manages the set of data assets to scan, accommodating different data system architectures by either pulling data via APIs or receiving data pushed directly into the scanning service.\nScanning service: processes and analyzes data from various sources by accumulating samples in memory, deserializing rows (e.g., JSON) into fields and sub-fields, and extracting features using APIs available in multiple languages (C++, Python, Hack). It ensures comprehensive data capture, even for ephemeral data.\nClassification service: utilizes heuristic rules and machine learning models to classify data types with high accuracy.\n\nHeuristic rules: handle straightforward, deterministic cases by identifying specific data formats like dates, phone numbers, and user IDs.\nMachine learning models: trained on labeled datasets using supervised learning and improved through unsupervised learning to identify patterns and anomalies in unlabeled data.\nGround truth calibration and verification: ensures system accuracy and reliability, allowing for model fine-tuning and improved classification performance.\nLineage and propagation: We integrate classification rules with high-confidence lineage signals to ensure accurate data tracking and management. Our propagation mechanism enables the seamless annotation of data as needed, ensuring that exact copies of data across systems receive equivalent classification. This approach not only maintains data integrity but also optimizes the developer experience by streamlining the process of managing data classifications across our diverse systems.\nStep 3 – Annotating\nThe integration of metadata predictions and developer input creates a comprehensive picture of a data asset’s structure (schema) and its meaning (annotation). This is achieved by attaching these elements to individual fields in data assets, providing a thorough understanding of the data.\nBuilding on the predicting data at scale initiative (step 2), where we utilize the universal privacy taxonomy and classification systems to identify and classify data elements, the generated metadata predictions are then used to help developers annotate their data assets efficiently and correctly.\nPortable annotation APIs: seamlessly integrate into developer workflows ensuring:\nConsistent representation of data across all systems at Meta.\nAccurate understanding of data, enabling the application of privacy safeguards at scale.\nEfficient evidencing of compliance with regulatory requirements.\nMetadata predictions and developer input: Two key components work together to create a comprehensive data asset picture:\nMetadata predictions: Classifiers generate predictions to aid developers in annotating data assets efficiently and correctly. If the confidence score exceeds a certain threshold, assignment can be automated, saving developer time.\nDeveloper input: Developers manually refine and verify annotations, ensuring that the data’s context and privacy requirements are accurately captured. Human oversight guarantees the accuracy and reliability of the data asset picture.\n- user_id (enum) \t\t→ SemanticType::id_userID\r\n  - name (string) \t\t\t→ SemanticType::identity_name\r\n  - age (uint) \t\t\t→ SemanticType::age\r\n  - religious_views (enum) \t→ SemanticType::faithSpirituality\r\n  - photos (array<struct>):\r\n     - url (url) \t\t\t→ SemanticType::electronicID_uri_mediaURI_imageURL\r\n     - photo (blob) \t\t→ SemanticType::media_image\r\n     - caption (string) \t\t→ SemanticType::media_text_naturalLanguageText\r\n     - uploaded_date (timestamp) → SemanticType::uploadedTime\r\n\nEnsuring complete schemas with annotations: To maintain a high standard of data understanding, we have integrated data understanding into our data model lifecycle. This includes auto-generating code to represent the schema of newly created assets when missing, ensuring that no new assets are created without a proper schema.\nFor example, in the context of our religious beliefs in Facebook Dating, we have defined its structure, including fields like ‘Name,’ ‘EmailAddress,’ and ‘Religion.’ Furthermore, we have annotated the asset with Actor::user(), signifying that the data pertains to a user of our products. This level of detail enables us to readily identify fields containing privacy-related data and implement appropriate protective measures, such as applying the applicable purpose limitation policy.\nIn the case of the “dating profile” data asset, we have defined its structure, including fields like ‘Name’: \nfinal class DatingProfileSchema extends DataSchemaDefinition {\r\n\r\n <<__Override>>\r\n public function configure(ISchemaConfig $config): void {\r\n   $config->metadataConfig()->description('Represents a dating profile);\r\n   $config->annotationsConfig()->annotations(Actor::user());\r\n }\r\n\r\n <<__Override>>\r\n public function getFields(): dict<string, ISchemaField> {\r\n   return dict[\r\n     'Name' => StringField::create(\"name\")\r\n        ->annotations(SemanticType::identity_name())\r\n        ->example('John Doe'),\r\n     'Age' => StringInt::create('age')\r\n        ->description(“The age of the user.”)\r\n        ->annotations(SemanticType::age())\r\n        ->example('24'),\r\n     'ReligiousViews' => EnumStringField::create('religious_views')\r\n        ->annotations(SemanticType::faithSpirituality())\r\n        ->example('Atheist'),\r\n   ];\r\n }\r\n}\r\n\nIn order to optimize for developer experience, the details of the schema representation differ in each environment. For example, in the data warehouse, it’s represented as a Dataset – an in-code Python class capturing the asset’s schema and metadata. Datasets provide a native API for creating data pipelines. \nHere is an example of such a schema:\n​​@hive_dataset(\r\n\t\"dim_all_dating_users\", // table name\r\n\t\"dating\", // namespace\r\n\toncall=\"dating_analytics\",\r\n\tdescription=\"This is the primary Dating user dimension table containing one row per Dating user per day along with their profile, visitation, and key usage information.\",\r\n\tmetadata=Metadata(Actor.User),\r\n)\r\nclass dim_all_dating_users(DataSet):\r\nds: Varchar = Partition(\"datestamp\")\r\nuserid: DatingUserID = Column(\"User id of the profile\")\r\nemail: EmailAddress = Column(\"User's email address\"),\r\n\tage: PersonAge = Column(\"User's stated age on date ds\")\r\n\treligious_views: ReligionOptions = Column(\"User's provided religious views\")\r\n\nOur warehouse schema incorporates rich types, a privacy-aware type system designed to enhance data understanding and facilitate effective data protection. Rich types, such as DatingUserID, EmailAddress, PersonAge, and ReligionOptions, are integrated into the schema, offering a comprehensive approach to data management while encoding privacy metadata. They provide a developer-friendly way to annotate data and enable the enforcement of data quality rules and constraints at the type level, ensuring data consistency and accuracy across the warehouse. For instance, they can detect issues like joining columns with different types of user IDs or mismatched enums before code execution. \nHere is an example definition:\nReligionOptions = enum_from_items(\r\n    \"ReligionOptions\",\r\n    items=[\r\n        EnumItem(\"Atheist\", \"Atheist\"),\r\n        EnumItem(\"Buddhist\", \"Buddhist\"),\r\n        EnumItem(\"Christian\", \"Christian\"),\r\n        EnumItem(\"Hindu\", \"Hindu\"),\r\n        EnumItem(\"Jewish\", \"Jewish\"),\r\n        EnumItem(\"Muslim\", \"Muslim\"),\r\n  ...\r\n    ],\r\n    annotations=(SemanticType.faithSpirituality,),\r\n)\r\n\nStep 4 – Inventorying assets and systems\nA central inventory system is crucial for managing data assets and their metadata, offering capabilities like search and compliance tracking. Meta’s OneCatalog is a comprehensive system that discovers, registers, and enumerates all data assets across Meta’s apps, providing inventory for easier management and tracking. \nKey functions of OneCatalog:\nRegistering all data systems: OneCatalog defines a data system as a logical abstraction over resources that persist data for a common purpose. It exhaustively examines resources across Meta’s environments to discover and register all data systems hosting data assets.\nEnumerating all data assets: Eligible data systems must enumerate their assets through the asset enumeration platform, generating a comprehensive list of assets and their metadata in the central inventory. These assets are grouped by “asset classes” based on shared patterns, enabling efficient management and understanding of data assets.\n\nGuarantees provided by OneCatalog:\nCompleteness: The system regularly checks for consistency between the data defined in its configuration and the actual data stored in the inventory. This ongoing comparison ensures that all relevant data assets are accurately accounted for and up-to-date.\nFreshness: In addition to regularly scheduled pull-based enumeration, the system subscribes to changes in data systems and updates its inventory in real time.\nUniqueness of asset ID (XID): Each asset is assigned a globally unique identifier, similar to URLs, which facilitates coordination between multiple systems and the exchange of information about assets by providing a shared key. The globally unique identifier follows a human-readable structure, e.g., asset://[asset-class]/[asset-name].\n\nUnified UI: On top of the inventory, OneCatalog provides a unified user interface that consolidates all asset metadata, serving as the central hub for asset information. This interface offers a single point of access to view and manage assets, streamlining the process of finding and understanding data.\nFor example, in the context of our “religious beliefs in the Dating app” scenario, we can use OneCatalog’s unified user interface to view the warehouse dating profile table asset, providing a comprehensive overview of its metadata and relationships.\n\nCompliance and privacy assurance: OneCatalog’s central inventory is utilized by various privacy teams across Meta to ensure that data assets meet requirements. With its completeness and freshness guarantees, OneCatalog serves as a reliable source of truth for privacy and compliance efforts.\nBy providing a single view of all data assets, OneCatalog enables teams to efficiently identify and address potential risks or vulnerabilities, such as unsecured data or unauthorized access.\nStep 5 – Maintaining data understanding\nTo maintain high coverage and quality of schemas and annotations across Meta’s diverse apps, we employed a robust process that involves measuring precision and recall for both predicted metadata and developer-provided annotations. This enables us to guide the implementation of our privacy and security controls and ensure their effectiveness.\nBy leveraging data understanding, tooling can quickly build end-to-end compliance solutions. With schema and annotations now front and center, we’ve achieved continuous understanding, enabling our engineers to easily track and protect user data, implement various security and privacy controls, and build new features at scale.\nOur strategy for maintaining data understanding over time includes:\nShifting left on creation time: We provided intuitive APIs for developers to provide metadata at asset creation time, ensuring that schemas and annotations were applied consistently in downstream use cases.\nDetecting and fixing annotation gaps: We surfaced prediction signals to detect coverage and quality gaps and evolved our prediction and annotation capabilities to ensure new systems and workflows were covered.\nCollecting ground truth: We established a baseline to measure automated systems against, with the help of subject matter experts, to continuously measure and improve them.\nProviding canonical consumption APIs: We developed canonical APIs for common compliance usage patterns, such as detecting user data, to ensure consistent interpretation of metadata and low entry barriers.\nPutting it all together\nComing back to our scenario: As developers on the Facebook Dating team collect or generate new data, they utilize familiar APIs that help them schematize and annotate their data. These APIs provide a consistent and intuitive way to define the structure and meaning of the data.\nWhen collecting data related to “Faith Spirituality,”the developers use a data classifier that confirms their semantic type annotations once the data is scanned during testing. This ensures that the data is accurately labeled and can be properly handled by downstream systems.\nTo ensure the quality of the classification system, ground truth created by subject matter experts is used to measure its accuracy. A feedback loop between the product and PAI teams keeps the unified taxonomy updated, ensuring that it remains relevant and effective.\nBy using canonical and catalogued metadata, teams across Meta can implement privacy controls that are consistent and effective. This enables the company to maintain user trust and meet requirements.\nIn this scenario, the developers on the Facebook Dating team are:\n\nSchematizing and annotating their data using familiar APIs.\nUsing a data classifier to confirm semantic type annotations.\nLeveraging ground truth to measure the quality of the classification system.\nUtilizing a feedback loop to keep the unified taxonomy updated.\nImplementing privacy controls using canonical and catalogued metadata.\nLearnings and takeaways\nBuilding an understanding of all data at Meta was a monumental effort that not only required novel infrastructure but also the contribution of thousands of engineers across all teams at Meta, and years of investment.\nCanonical everything: Data understanding at scale relies on a canonical catalog of systems, asset classes, assets, and taxonomy labels, each with globally unique identifiers. This foundation enables an ecosystem of compliance tooling, separating the concerns of data understanding from consuming canonical metadata.\nIncremental and flexible approach: To tackle the challenge of onboarding hundreds of systems across Meta, we developed a platform that supports pulling schemas from existing implementations. We layered solutions to enhance existing untyped APIs, meeting developers where they are—whether in code, configuration, or a UI defining their use case and data model. This incremental and flexible approach delivers value at every step.\nCollaborating for data classification excellence: Building the platform was just the beginning. The infrastructure and privacy teams also collaborated with subject matter experts to develop best-in-class classifiers for our data, addressing some of the most challenging problems. These include detecting user-generated content, classifying data embedded in blobs, and creating a governed taxonomy that allows every developer to describe their data with the right level of detail.\nCommunity engagement with a tight feedback loop: Our success in backfilling schemas and integrating with the developer experience was made possible by a strong partnership with product teams. By co-building solutions and establishing an immediate feedback loop, we refined our approach, addressed misclassifications, and improved classification quality. This collaboration is crucial to our continued evolution and refinement of data understanding. \nThe future of data understanding\nData understanding has become a crucial component of Meta’s PAI initiative, enabling us to protect user data in a sustainable and effective manner. By creating a comprehensive understanding of our data, we can address privacy challenges durably and more efficiently than traditional methods.\nOur approach to data understanding aligns closely with the developer workflow, involving the creation of typed data models, collection of annotated data, and processing under relevant policies. At Meta’s scale, this approach has saved significant engineering effort by automating annotation on millions of assets (i.e., fields, columns, tables) with specific labels from an inventory that are deemed commitment-critical. This automation has greatly reduced the manual effort required for annotation, allowing teams to focus on higher-priority tasks. \nAs data understanding continues to evolve, it is expected to have a significant impact on various aspects of operations and product offerings. Here are some potential future use cases:\nImproved AI and machine learning: leveraging data understanding to improve the accuracy of AI-powered content moderation and recommendation systems.\nStreamlined developer workflows: integrating data understanding into Meta’s internal development tools to provide clear data context and reduce confusion.\nOperational and developer efficiency: By automating data classification and annotation for millions of assets across Meta’s platforms, we can significantly improve operational efficiency. This automation enables us to leverage metadata for various use cases, such as accelerating product innovation. For instance, we’re now utilizing this metadata to help developers efficiently find the right data assets, streamlining their workflow and reducing the time spent on manual searches.\nProduct innovation: With a comprehensive understanding of data, Meta can drive product innovation by leveraging insights to create personalized and engaging user experiences.\nWhile there is still more work to be done, such as evolving taxonomies to meet future compliance needs and developing novel ways to schematize data, we are excited about the potential of data understanding. By harnessing canonical metadata, we can deepen our shared understanding of data, unlocking unprecedented opportunities for innovation not only at Meta, but across the industry.\nAcknowledgements\nThe authors would like to acknowledge the contributions of many current and former Meta employees who have played a crucial role in developing data understanding over the years. In particular, we would like to extend special thanks to (in alphabetical order) Aaron Morris, Adrian Zgorzalek, Alex Gorelik, Alex Kalinin, Alex Uslontsev, Ali Fakeri Tabrizi, Amit Sarkar, Anchit Arora, Andras Belokosztolszki, Anthony O’Sullivan, Archit Jain, Aygun Aydin, Ayoade Adeniyi, Ben Warren, Bob Baldwin, Brani Stojkovic, Brian Romanko, Can Lin, Carrie (Danning) Jiang, Chao Yang, Chris Ventura, Daniel Ohayon, Danny Gagne, David Taieb, Dmitry Ponomarev, Dong Jia, Dong Zhao, Eero Neuenschwander, Fang Wang, Ferhat Sahinkaya, Ferdi Adeputra, Fred Liu, Gayathri Aiyer, George Stasa, Guoqiang Jerry Chen, Haiyang Han, Haydar Imren, Henry Swanson, Ian Carmichael, Jared Greene, Jerry Pan, Jiang Wu, Johnnie Ballentyne, Joanna Jiang, Jonathan Bergeron, Joseph Li, Jun Fang, Kaustubh Karkare, Komal Mangtani, Kuldeep Chaudhary, Lea Li, Lei Zhang, Liu Yang, Loka Potnuru, Luiz Ribeiro, Marc Celani, Matthieu Martin, Max Mazzeo, Meg Dymek, Mellany Flores, Mike Tarasyuk, Mital Mehta, Nevzat Sevim, Nick Gardner, Nikolay Kondratyev, Oliver Dodd, Pankaj Landge, Perry Stoll, Peter Nieuwenhuizen, Pranet Verma, Prashanth Bandaru, Piyush Khemka, Rahul Nambiar, Rajesh Nishtala, Rituraj Kirti, Roger (Wei) Li, Rujin Cao, Sahil Garg, Satish Sampath, Sean Wang, Seth Silverman, Shridhar Iyer, Simran Patil, Sriguru Chakravarthi, Sushaant Mujoo, Susmit Biswas, Taha Bekir Eren, Tejas Kudrimoti, Tony Harper, Vineet Chaudhary, Vishal Jain, Vitali Haravy, Vlad Fedorov, Vlad Gorelik, Wolfram Schuttle, Xiaotian Guo, Yatu Zhang, Yi Huang, Yuxi Zhang, Zejun Zhang, and Zhaohui Zhang. We would also like to express our gratitude to all reviewers of this post, including (in alphabetical order) Aleksandar Ilic, Avtar Brar, Brianna O’Steen, Chloe Lu, Chris Wiltz, Imogen Barnes, Jason Hendrickson, Rituraj Kirti, Xenia Habekoss and Yuri Claure. We would like to especially thank Jonathan Bergeron for overseeing the effort and providing all of the guidance and valuable feedback, and Ramnath Krishna Prasad for pulling required support together to make this blog post happen.\nThe post How Meta understands data at scale appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Managing and understanding large-scale data ecosystems is a significant challenge for many organizations, requiring innovative solutions to efficiently safeguard user data. Meta&#8217;s vast and diverse systems make it particularly challenging to comprehend its structure, meaning, and context at scale. To address these challenges, we made substantial investments in advanced data understanding technologies, as part of [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/04/28/security/how-meta-understands-data-at-scale/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/04/28/security/how-meta-understands-data-at-scale/\">How Meta understands data at scale</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Managing and understanding large-scale data ecosystems is a significant challenge for many organizations, requiring innovative solutions to efficiently safeguard user data. Meta’s vast and diverse systems make it particularly challenging to comprehend its structure, meaning, and context at scale. To address these challenges, we made substantial investments in advanced data understanding technologies, as part of [...]\nRead More...\nThe post How Meta understands data at scale appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22393",
        "categories": [
          "Security & Privacy"
        ],
        "isoDate": "2025-04-28T16:30:19.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Maria Sharobaeva",
        "title": "JetBrains Academy – April Digest",
        "link": "https://blog.jetbrains.com/education/2025/05/02/jetbrains-academy-april/",
        "pubDate": "Fri, 02 May 2025 16:29:25 +0000",
        "content:encodedSnippet": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.\nAI updates\nLearning to code in the AI era – still worth it?\nWondering if learning to code is still worthwhile in the age of AI? In this blog post, Clara tackles three key questions to help you decide.\nRead now\n                                                    \nFree AI course\nIf you can’t beat it, lead it. Take our AI-Assisted Programming course to learn how to collaborate with AI, improve AI-generated code, and build apps from scratch using AI-powered tools. Write better code, faster.\nStart learning\n                                                    \nAI features for in-IDE learning\nLearning in an IDE with the JetBrains Academy plugin just got smoother. With machine translation in 10 languages and the new Theory Lookup feature for quick explanations of key terms, understanding tasks is now easier than ever.\nLearn more\n                                                    \nTech events \nIntelliJ IDEA Conf – free virtual event\nJoin us online on June 3–4 to explore sessions on Java, Kotlin, AI, Spring Boot, Gradle, and more. Get ready to learn from the best!\nSign up now\n                                                    \nPython courses\nHands-on Python course\n Designed for beginners with no prior experience, this course will show you how to build a solid Python foundation and create your first portfolio-ready app – all within 15 hours.\nStart learning\n                                                    \nAMazing course for you\nStrengthen your algorithmic thinking by generating a 2D maze using depth-first search (DFS). This course is best suited for learners with basic Python knowledge.\nTry now",
        "dc:creator": "Maria Sharobaeva",
        "content": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.",
        "contentSnippet": "This month brings new opportunities to support your learning and development – from AI-powered features in your IDE and a new AI course with Nebius to practical Python training. Additionally, don’t miss the upcoming free online IntelliJ IDEA Conf. Read on for more details.",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=564610",
        "categories": [
          "digest",
          "jetbrains-academy",
          "newsletter"
        ],
        "isoDate": "2025-05-02T16:29:25.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "Qodana 2025.1 Release",
        "link": "https://blog.jetbrains.com/qodana/2025/05/qodana-2025-1-release/",
        "pubDate": "Fri, 02 May 2025 12:47:29 +0000",
        "content:encodedSnippet": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release!\nTry Qodana\nOWASP Top 10: covering even more categories\nAt Qodana, we take security very seriously, and recently discussed inspections that commonly make it to the OWASP Top 10. \nWe also know that configuring taint rules for the security analyzers can be a difficult and time-consuming task, often requiring manual effort to detect rules and correctly configure it.\nTo simplify this process, we provide predefined taint configuration, built on various benchmarks and external providers, automatically covering common sources and sinks. \nQodana now includes predefined taint rules for the most common categories of OWASP Top 10:2021 vulnerabilities: (A01, A03, A07, A08, A10). This significantly improves issue detection out of the box, minimizing user effort while ensuring broad security coverage.\nTo address issues with the problem’s trace reconstruction, we had to rethink the way issue propagation being shown to the user. Now we’re capable of showing even more complex cases including tricky aliasing.\n\n\n\n\nFeedback received and addressed: for those who need deeper customization, taint rules can be configured using KTS files, allowing users to define both library and user codes as sources or sinks. This flexibility ensures that security analysis adapts to project-specific needs without unnecessary complexity.\n\n\n\n\nTL;DR\nAutomatic detection for common security flaws.\n700+ new configuration entries covering common frameworks and libraries.\nThe ability to add configuration on your own: customize via KTS files to define sources and sinks.\nEnhanced Azure & GitLab CI/CD Integrations\nTo improve adoption beyond GitHub, we’ve made major enhancements to Azure and GitLab integrations. These changes streamline workflows and enable better visibility into analysis results.\nAzure improvements\nIn Azure, it’s now possible to reduce the time spent on PR analysis by only analyzing files that were changed using pr-mode. Also, instead of getting results in the build log, the Qodana extension provides you with a summary in the Extensions tab. \nThis release also integrates the powerful Qodana Quick Fix feature into your analysis. This allows you to fix some problems in your code and apply them to the branch you’ve analyzed or create a pull request with suggested fixes. To use this feature you will need to update the Qodana pipeline configuration.\nTL;DR\nGet faster PR analysis by checking only modified files.\nResults now appear in the Extensions tab instead of cluttering the build log.\nAuto-apply fixes to the analyzed branch or create a PR with suggested changes.\n\n\n\n\n\n\n\n\n\n\n\n\nGitLab enhancements\nNow you can use the new Qodana component to perform analysis in your repository. This means that instead of using the linter container directly, you can configure Qodana with a predefined set of needed arguments (there is no need to understand all the steps to launch Qodana; the component does it for you). \nThe new component supports mr-mode (the same as pr-mode in Azure) for fast analysis in merge requests, which analyses only the changed files, summary comments in merge requests and quick fixes. To use it you’ll need to include the Qodana component in your pipeline configuration file. \nTL;DR\nUse the new Qodana component for simplified configuration.\nIt supports merge request (MR) mode to analyze only changed files.\nit provides summary comments and quick fixes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPro C++ Linter [EAP]\nBased on demand, especially from our .NET, and Rider communities, we’re introducing Qodana for C/C++. This advanced linter goes beyond Clang-Tidy to detect critical issues like memory leaks, null dereferences, and uninitialized memory usage to name a few.\nThe old community-licensed linter that was previously known under this name is now called “Qodana Community for C/C++”.\nWhy upgrade?\nThe new C++ paid linter for professional teams: \nIncludes MISRA, and Data Flow Analysis for error tracking during value propagation.\nIs a more powerful option than Clang-Tidy for bug detection.\nHas easy integration with Qodana CLI and Docker.\nExample of a DFA analysis inspection catching a memory leak.\n\n\n\nWould you have caught this in a normal code review?\n\n\n\n\n\n\n\n\nWhat are DFA inspections?\nDFA (or data flow) inspections are based on a more thorough code analysis, such as tracking possible variable states through possible execution paths. Such introspection allows DFA to catch some of the more sneaky errors in your code. For example, these inspections are capable of finding nullptr dereferences, memory leaks, out of bounds memory accesses, and more.\nYou can try this new linter using Qodana CLI or by manually running the jetbrains/qodana-cpp docker image with a token from Qodana Cloud.\nSwitching to Kotlin K2 Mode\nWe’ve enabled K2 mode for qodana-jvm and qodana-jvm-community linters. This update aligns with JetBrains’ move towards K2 in IntelliJ IDEA 2025.1 and offers improved performance and stability, along with support for new Kotlin 2.1 features.\nPotential issues to be aware of:\nThird-party plugins might not support K2 yet.\nSome inspections are still being implemented (see details).\nNeed to switch back? \nThere are a number of way to do this depending on the way linter is configured. But you could simply set the property “idea.kotlin.plugin.use.k2” to “false” in your linter configuration.\nView Documentation\nWhat to do next\n\nIf you’re using the latest tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2025.1 release. If not, please change from 2024.4 to 2025.1 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension here.\nWith these new enhancements, you have greater potential to substantially improve your coding experience. For further information, including detailed setup instructions for each feature, please refer to our official documentation. \nWe’re continuously improving Qodana to provide better inspections, integrations, and security features. Stay tuned for more updates in upcoming releasesYou can also stay up to date with Qodana by joining our communities on Reddit, LinkedIn, and X.\nOther Qodana releases this month\nInsights Dashboard\nNative Mode\nVisual Studio Plugin\nSSO\nQodana On-Prem Lite",
        "dc:creator": "Kerry Beetge",
        "content": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories [&#8230;]",
        "contentSnippet": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=564423",
        "categories": [
          "releases",
          "azure-integrations",
          "eap",
          "github-integrations",
          "k2-mode",
          "qodana",
          "release"
        ],
        "isoDate": "2025-05-02T12:47:29.000Z"
      },
      {
        "creator": "Jan-Niklas Wortmann",
        "title": "Streamline Database Management With WebStorm’s Database Tool",
        "link": "https://blog.jetbrains.com/webstorm/2025/05/streamline-database-management-with-webstorm-s-database-tool/",
        "pubDate": "Thu, 01 May 2025 14:00:00 +0000",
        "content:encodedSnippet": "Here’s something that might surprise you: if you’re using WebStorm, you already have access to a professional-grade database IDE. That’s right, the full-featured DataGrip database toolset isn’t just a separate product or an additional paid plugin anymore; it’s bundled into WebStorm. Even if you’re comfortable with other IDEs and their database extensions, you might find some compelling features here that could enhance your database workflow.\nTL;DR\nThe powerful features of DataGrip, JetBrains’ database IDE, are included in WebStorm for free. Highlights include smart schema-aware code completion, query plan analyzer, an optimized data editor, automatic documentation writing, and an AI query assistant. Try this enterprise-grade database support in your JavaScript and TypeScript IDE to enjoy smoother and more streamlined database work.\nEssential database features you might have missed\n1. Smart code completion that understands your schema\nLook, we’ve all been there – typing out table names like it’s 1999. But here’s the thing: WebStorm’s database tools don’t just autocomplete; they understand your entire database schema.\nSELECT u.* FROM us--\nBefore you even finish typing, WebStorm knows you probably mean users and that you’ll want to join it with user_preferences based on your schema. It’s like having a really smart pair programmer who actually remembers the database schema.\n\n2. Query plans that explain issues with your database\nThe visual query plan analyzer is a powerful tool that helps you understand and optimize your database queries. Here’s how to use it:\nWrite your query in the database console:\nSELECT * FROM users \nJOIN orders ON users.id = orders.user_id \nWHERE orders.status = 'processing'\nRight-click on the query, then select Explain Plan.\nIn the Explain Plan window, you’ll see:\n\nA visual execution plan showing how the database processes your query.\nA cost associated with the operation. \n\n\n\n\nThe associated cost is a useful metric that helps you identify costly operations and enables you to further optimize them. \n3. Data editor that makes database updates surprisingly effortless\nWe’ve all been there. The product demo is in 15 minutes, and someone notices a typo in the production database – that important customer of yours should be named “Whole Foods”, not “Hole Foods”! You need to quickly update a status flag on several test accounts. Your options: Craft a precise UPDATE statement and triple-check it, or just… fix it directly.\nForget writing tedious UPDATE statements – the integrated data editor gives you spreadsheet-like powers over your precious data for those “just need to fix this one thing real quick” moments:\nDirect cell editing for the impatient pragmatists:\nDouble-click any cell to edit values directly.\nChanges get highlighted until you commit them.\nPress Tab to move through cells like a spreadsheet pro.\nHit Enter to save, Escape to cancel, and submit with ⌘Enter / Ctrl+Enter.\nBulk edits for when repetitive tasks threaten your zen:\nSelect multiple cells to edit similar values simultaneously.\nCopy-paste directly from Excel (yes, they thought of that).\nConstraint-aware edits for avoiding that 3:00 am production emergency call:\nForeign key constraints are actively enforced while editing.\nData type validation before you commit the change.\nColor-coding for modified, invalid, and conflicting values.\nWhat you’d write without the data editor:\nUPDATE users SET status = 'premium', trial_ends_at = NULL WHERE id IN (1043, 1044, 1045, 1046);\nUPDATE users SET email = 'sarah.jones@newdomain.com' WHERE id = 2967;\nWith the data editor, these become mouse clicks and keyboard shortcuts. And because WebStorm knows you occasionally try to save invalid data, it warns you before submitting changes that would violate constraints.\n4. Documentation that writes itself\nBecause, let’s face it, you weren’t going to write it anyway. The automated documentation generator creates comprehensive schema diagrams and details all document relationships and constraints.\nDiagrams are extremely useful to document the current status quo of a system and use as a baseline for discussing changes. By right-clicking on the database and selecting Diagrams | Show Diagram, you can get an accurate ER diagram of the existing system in place.\n\n\n\n\n5. AI query assistant (for when SQL syntax makes your brain hurt)\nLet’s be honest – not everyone dreams in SQL, and that’s okay. Instead of wrestling with JOIN and PARTITION BY clauses at 3:00 am, you can now just tell JetBrains AI Assistant what you want in plain English, like you’re ordering a coffee:\n“Show me active users who haven’t placed an order in the last 30 days”.\nMuch better than trying to remember if it’s LEFT JOIN or RIGHT JOIN for the fifth time in one day, right? The AI query assistant understands your database schema and translates your human thoughts into proper SQL – no more copy-paste roulette.\n\n\n\n\n\n\n\n\nAI Assistant just got better when working with databases in the 2025.1 release, and we highly recommend giving it another look!\nWhy should JavaScript developers care?\nIf we’re building modern web applications, let’s be honest with ourselves. We’re probably dealing with databases whether we like it or not. Sure, your ORM handles most cases, but when it doesn’t, you need real database tools. And switching between your IDE and a separate database editor is about as efficient as using Internet Explorer 6 for development.\nThe bottom line\nWebStorm isn’t just an IDE for handling JavaScript and TypeScript – it’s a complete development environment that includes one of the best database tools in the industry. Having your database tools integrated directly into your development workflow means less context switching, better productivity, and a more streamlined development experience.",
        "dc:creator": "Jan-Niklas Wortmann",
        "content": "Here&#8217;s something that might surprise you: if you&#8217;re using WebStorm, you already have access to a professional-grade database IDE. That&#8217;s right, the full-featured DataGrip database toolset isn&#8217;t just a separate product or an additional paid plugin anymore; it&#8217;s bundled into WebStorm. Even if you&#8217;re comfortable with other IDEs and their database extensions, you might find [&#8230;]",
        "contentSnippet": "Here’s something that might surprise you: if you’re using WebStorm, you already have access to a professional-grade database IDE. That’s right, the full-featured DataGrip database toolset isn’t just a separate product or an additional paid plugin anymore; it’s bundled into WebStorm. Even if you’re comfortable with other IDEs and their database extensions, you might find […]",
        "guid": "https://blog.jetbrains.com/?post_type=webstorm&p=564288",
        "categories": [
          "tips-tricks",
          "database-support",
          "webstorm"
        ],
        "isoDate": "2025-05-01T14:00:00.000Z"
      },
      {
        "creator": "Anton Arhipov",
        "title": "Structuring Ktor Projects Using Domain-Driven Design (DDD) Concepts: A Step-by-Step Guide With a Minimalistic CRM",
        "link": "https://blog.jetbrains.com/kotlin/2025/04/domain-driven-design-guide/",
        "pubDate": "Wed, 30 Apr 2025 12:29:16 +0000",
        "content:encodedSnippet": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system.\nSample code for the article: https://github.com/antonarhipov/ktor-ddd-example \nKtor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), Ktor does not enforce a predefined project structure, which can be both an advantage and a challenge. Many developers, especially those new to Ktor, often wonder:\nHow should I structure my Ktor project for scalability, maintainability, and long-term growth?\nIn this guide, we’ll answer that question step by step by building a minimalistic CRM system. This CRM will start as a simple Ktor application and gradually evolve into a well-structured, scalable project following best practices inspired by domain-driven design (DDD) and feature-based modularization.\nHow we’ll approach this\nWe’ll start with a simple, unstructured Ktor project and progressively refine it to have a well-structured, scalable architecture. Each step will introduce new concepts and improvements:\nIntroduce domain models to define entities like Customer, Note, and Reminder.\nDefine repositories and services to separate the business logic from the routes.\nAdd a presentation layer with Ktor routes.\nDefining the domain model: Entities and value objects\nOur first step is to define the core domain model for our minimalistic CRM. In domain-driven design (DDD), we structure the domain layer around entities, value objects, and aggregates to model real-world concepts effectively.\nDefining entities\nSince we’re building a minimalistic CRM system, we need to define the fundamental building blocks:\nCustomer: Represents a client with whom you interact.\nContact: Represents a method to reach a customer. One customer can have multiple contacts.\nNote: Represents business information or interactions (can be tied to a customer or an order).\nReminder: Represents an alert associated with a contact (and optionally linked to a note) to help you remember promises or follow-ups.\n// domain/customer/Customer.kt\n\nimport java.time.LocalDateTime\nimport java.util.UUID\n\n// A simple Value Object for unique identifiers\n@JvmInline\nvalue class CustomerId(val value: Long)\n@JvmInline\nvalue class ContactId(val value: Long)\n@JvmInline\nvalue class NoteId(val value: Long)\n\n\ndata class Contact(\n   val id: ContactId? = null,\n   val name: String,\n   val email: Email, \n   val phone: String\n)\n\ndata class Note(\n   val id: NoteId? = null,\n   val content: String,\n   val createdAt: LocalDateTime = LocalDateTime.now()\n)\n\ndata class Customer(\n   val id: CustomerId? = null,\n   val name: String,\n   val contacts: List<Contact> = emptyList(),\n   val notes: List<Note> = emptyList()\n) {\n   fun withContact(contact: Contact): Customer {\n      return copy(contacts = contacts + contact)\n   }\n\n   fun withNote(note: Note): Customer {\n      return copy(notes = notes + note)\n   }\n}\nDefining value objects\nValue objects are immutable and are defined solely by their attributes. They help encapsulate concepts such as identifiers or more complex attributes (e.g., an Email object with validation). In our example, the unique identifiers (like CustomerId) are implemented as value objects, ensuring immutability and encapsulation of identity details.\nYou can further extend this idea by encapsulating additional business rules. For example:\n// Example: a more complex value object for \n// Email might include validation logic.\n@JvmInline\nvalue class Email(val address: String) {\n    init {\n        require(address.contains(\"@\")) { \"Invalid email address\" }\n    }\n}\nRelationships and aggregates\nIn domain-driven design (DDD), an aggregate is a cluster of domain objects that should be treated as a single unit when enforcing business rules. Each aggregate has a clearly defined boundary and a single aggregate root, which serves as the only entry point for modifying the aggregate’s state.\nIn our initial model:\nCustomer is the aggregate root, ensuring consistency and encapsulating its associated contacts and notes. All modifications to these related entities must go through the customer.\nReminder is a separate entity linked to a customer (and optionally a note), but it has its own lifecycle and behaviors, making it an independent aggregate.\nUsing aggregates helps enforce business rules and invariants. For example, defining customer as the aggregate root ensures that contacts are always managed in the context of their customer, preventing orphaned or inconsistent data.\nThis is what the project structure looks like so far with the two aggregations defined above:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         ├─ Application.kt  // Ktor application entry point\n         └─ domain/\n            ├─ customer/\n            │  └─ Customer.kt  // Customer, Contact, Note \n            └─ reminder/\n               └── Reminder.kt  // Reminder\nIn this first step of our guide, we defined the core domain elements for our minimalistic CRM:\nEntities: Customer, Contact, Note, and Reminder\nValue objects: CustomerId, ContactId, NoteId, and ReminderId (and potentially others like Email)\nThese definitions set the stage for further expansion, such as implementing business logic within domain services, setting up repositories for persistence, and eventually wiring up these components in our Ktor application.\nNext, we can look at how to encapsulate business behaviors, and later, how these domain elements interact with the application layer in a modularized Ktor structure.\nEncapsulating business behaviors: Repositories, services, and domain events.\nIn a DDD-inspired design, repositories, domain services, and domain events work together to implement your CRM’s use cases while maintaining clear separation of concerns.\nRepositories\nRepositories act as an abstraction layer between your domain model and the data persistence mechanism (like a database). They provide simple methods for retrieving, storing, and updating domain entities without exposing the underlying data access logic.\ninterface CustomerRepository {\n   fun findById(id: CustomerId): Customer?\n   fun save(customer: Customer)\n\n   // Additional methods like delete, update, list, etc.\n}\nThe repository encapsulates all the queries and transactions needed to work with the domain model. For instance, when adding a new contact, the repository can ensure that the updated customer aggregate is properly stored.\nOur demo project uses a mock in-memory implementation of the repository interface. The real implementation depends on the technology and infrastructure used by your organization. In Ktor projects, you often see the Exposed database library used to implement this functionality. However, Ktor does not enforce any constraints on repository implementations, so you can choose to use any other data access libraries.\nDomain services\nDomain services encapsulate business logic that doesn’t naturally belong to an entity or value object. They coordinate complex operations that might involve multiple domain objects or aggregates.\nclass CustomerService(\n   private val customerRepository: CustomerRepository,\n   private val eventPublisher: EventPublisher\n) {\n\n   fun createCustomer(name: String): Customer {\n       val customer = Customer(name = name)\n       customerRepository.save(customer)\n       return customer\n   }\n\n   fun getCustomer(id: Long): Customer? {\n       return customerRepository.findById(CustomerId(id))\n   }\n\n   fun addContact(customerId: CustomerId, contact: Contact): Customer? {\n       val customer = customerRepository.findById(customerId)\n           ?: return null\n\n       // Business logic to add a contact (could be a method on Customer entity)\n       val updatedCustomer = customer.withContact(contact)\n       customerRepository.save(updatedCustomer)\n\n       // Publish a domain event to signal that a new contact has been added\n       eventPublisher.publish(ContactAddedEvent(customerId, contact))\n\n       return updatedCustomer\n   }\n\n\n   fun addNote(customerId: CustomerId, note: Note): Customer? {\n       val customer = customerRepository.findById(customerId)\n           ?: return null\n\n       val updatedCustomer = customer.withNote(note)\n       customerRepository.save(updatedCustomer)\n\n       // Publish a domain event to signal about a new note\n       eventPublisher.publish(NoteAddedEvent(customerId, note))\n\n       return updatedCustomer\n   }\n}\nThe service:\nFetches the current state of the customer.\nApplies business rules (e.g., adding a contact or note).\nPersists the updated state via the repository.\nPublishes a domain event to notify other parts of the system of the change.\nDomain events\nDomain events are messages that indicate something significant has occurred within the domain. They help decouple the direct consequences of a business operation from the triggering action. Other components can listen to these events and perform additional tasks (e.g., sending notifications, updating search indexes) without cluttering the core business logic.\n// DomainEvents.kt\nsealed interface DomainEvent\n\ndata class ContactAddedEvent(\n   val customerId: CustomerId,\n   val contact: Contact\n): DomainEvent\n\ndata class NoteAddedEvent(\n   val customerId: CustomerId,\n   val note: Note\n): DomainEvent\nEvent publishing\nAn EventPublisher interface can be used to publish these events. In a real-world application, this can be integrated with an event bus or messaging system:\ninterface EventPublisher {\n   fun publish(event: DomainEvent)\n}\nBenefits:\nDecoupling: Other parts of your application can subscribe to these events without the service needing to know about them.\nExtensibility: As your application evolves, additional behavior can be attached to these events without modifying the core business logic.\nBringing it all together\nIn our minimalistic CRM, when a user action triggers a use case (e.g., adding a new contact or note), the flow might look like this:\nUser action:\nThe client makes an API call to add a contact to a customer.\nService coordination:\nThe CustomerService retrieves the customer using the CustomerRepository, applies the business logic to add the contact, and saves the updated customer.\nEvent publication:\nAfter saving, the service publishes a ContactAddedEvent through the EventPublisher. Other parts of the system (like notification modules or logging services) can listen to this event and react accordingly.\nThis approach ensures that your domain logic remains clean, well-organized, and focused on business rules while delegating infrastructure and cross-cutting concerns to dedicated components.\nNow the project structure looks as follows:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         └─ com/\n            └─ example/\n               ├─ Application.kt\n               ├─ domain/\n               │  ├─ customer/\n               │  │  ├─ Customer.kt\n               │  │  ├─ CustomerRepository.kt\n               │  │  └─ CustomerService.kt\n               │  └─ reminder /\n               │     ├─ Reminder.kt\n               │     ├─ ReminderRepository.kt\n               │     └─ ReminderService.kt\n               └─ events/ \n                  ├─ DomainEvents.kt\n                  └─ EventPublisher.kt\nBuilding the presentation layer with Ktor\nThe code samples above didn’t use any external libraries or Ktor APIs because these are just implementation details. The conceptual framework of domain-driven design allowed us to structure the code so that we can plug in the necessary dependencies to create the application.\nNow we can move on and wire the services into the web server, exposing the REST API as a presentation layer. For this purpose, we will add the corresponding route definitions into the domain subpackages.\n// domain/customer/CustomerRoutes.kt\nfun Application.customerRoutes() {\n   routing {\n       val repository = InMemoryCustomerRepository() \n       val eventPublisher = EventPublisherImpl()\n\n       //TODO: use the service in the routes below\n       val service = CustomerService(repository, eventPublisher)\n\n       route(\"/customers\") {\n           // Create customer\n           post {\n               val customer = call.receive<Customer>()\n               val createdCustomer = service.createCustomer(customer.name)\n               call.respond(HttpStatusCode.Created, createdCustomer)\n           }\n\n           // Get customer by ID\n           get(\"/{id}\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@get call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val customer = service.getCustomer(id)\n               if (customer != null) {\n                   call.respond(customer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Add contact to customer\n           post(\"/{id}/contacts\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@post call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val contact = call.receive<Contact>()\n               val updatedCustomer = service.addContact(CustomerId(id), contact)\n\n               if (updatedCustomer != null) {\n                   call.respond(updatedCustomer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Add note to customer\n           post(\"/{id}/notes\") {\n               val id = call.parameters[\"id\"]?.toLongOrNull() ?: return@post call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val note = call.receive<Note>()\n               val updatedCustomer = service.addNote(CustomerId(id), note)\n\n               if (updatedCustomer != null) {\n                   call.respond(updatedCustomer)\n               } else {\n                   call.respondText(\"Customer not found\", status = HttpStatusCode.NotFound)\n               }\n           }\n       }\n   }\n}\n\n\n\n// domain/reminder/ReminderRoutes.kt\nfun Application.reminderRoutes() {\n   routing {\n       val repository = InMemoryReminderRepository()\n       val service = ReminderService(repository)\n\n       route(\"/reminders\") {\n           // Create a reminder\n           post {\n               val reminder = call.receive<Reminder>()\n               val createdReminder = service.createReminder(\n                   customerId = reminder.customerId,\n                   noteId = reminder.noteId?.value,\n                   remindAt = reminder.remindAt,\n                   message = reminder.message\n               )\n               call.respond(HttpStatusCode.Created, createdReminder)\n           }\n\n           // Get reminder by ID\n           get(\"/{id}\") {\n               val id = call.parameters[\"id\"] ?: return@get call.respondText(\n                   \"Missing or malformed id\",\n                   status = HttpStatusCode.BadRequest\n               )\n\n               val reminder = service.getReminder(id)\n               if (reminder != null) {\n                   call.respond(reminder)\n               } else {\n                   call.respondText(\"Reminder not found\", \nstatus = HttpStatusCode.NotFound)\n               }\n           }\n\n           // Get reminders for a customer\n           get(\"/customer/{customerId}\") {\n               val customerId = call.parameters[\"customerId\"] \n?: return@get call.respondText(\n                 \t  \"Missing or malformed customerId\",\n               \t    status = HttpStatusCode.BadRequest\n             \t\t  )\n\n               val reminders = service.getRemindersForCustomer(CustomerId(customerId))\n               call.respond(reminders)\n           }\n       }\n   }\n}\nYou might have noticed that the repository and event publisher implementations are created manually. However, as the project grows, it might be more convenient to implement this using the dependency injection (DI) pattern instead.\nThe subroutes for the corresponding domain objects and aggregates are defined as extension functions in their respective files. This is a common pattern when working with Ktor projects. These functions are called from within the Application.kt module function on the application startup:\n// Application.kt\nfun main() {\n   embeddedServer(Netty, port = 8080, module = Application::module)\n       .start(wait = true)\n}\n\nfun Application.module() {\n   install(ContentNegotiation) {\n       json()\n   }\n\n   routing {\n       // Register routes from the domain subpackages\n       customerRoutes() \n       reminderRoutes()\n   }\n}\nWith the routing files, our project structure looks as follows:\nktor-crm/\n└─ src/\n   └─ main/\n      └─ kotlin/\n         └─ com/\n            └─ example/\n               ├─ Application.kt\n               ├─ domain/\n               │  ├─ customer/\n               │  │  ├─ Customer.kt\n               │  │  ├─ CustomerRepository.kt\n               │  │  ├─ CustomerRoutes.kt\n               │  │  └─ CustomerService.kt\n               │  └─ reminder /\n               │     ├─ Reminder.kt\n               │     ├─ ReminderRepository.kt\n               │     ├─ ReminderRoutes.kt\n               │     └─ ReminderService.kt\n               └─ events/ \n                  ├─ DomainEvents.kt\n                  └─ EventPublisher.kt \nAt this point, we have integrated the business logic into the Ktor application, and the next step ise adding the infrastructural aspects, such as database configuration, authentication, etc. \nSummary\nThis article introduced key domain-driven design (DDD) concepts – like entities, value objects, repositories, and domain services – and demonstrated how to apply them in a Ktor project. We built a simple CRM system, organizing the code into well-defined domain subpackages (customers, reminders) with dedicated value classes and modular routes. This approach creates a clear, scalable, and maintainable codebase for your Ktor applications.\nThe source code for the sample presented in this article is available at: https://github.com/antonarhipov/ktor-ddd-example",
        "dc:creator": "Anton Arhipov",
        "content": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system. Sample code for the article: https://github.com/antonarhipov/ktor-ddd-example&#160; Ktor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), [&#8230;]",
        "contentSnippet": "In this guide, we’ll show you how to structure a project using domain-driven design (DDD) concepts, step by step, by building a minimalistic CRM system. Sample code for the article: https://github.com/antonarhipov/ktor-ddd-example  Ktor is a highly flexible framework that allows developers to structure their applications however they see fit. Unlike some opinionated frameworks (like Spring Boot), […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=563791",
        "categories": [
          "kotlin",
          "guide"
        ],
        "isoDate": "2025-04-30T12:29:16.000Z"
      },
      {
        "creator": "Anton Semenkin",
        "title": "Mellum Goes Open Source: A Purpose-Built LLM for Developers, Now on Hugging Face",
        "link": "https://blog.jetbrains.com/ai/2025/04/mellum-goes-open-source-a-purpose-built-llm-for-developers-now-on-hugging-face/",
        "pubDate": "Wed, 30 Apr 2025 11:10:27 +0000",
        "content:encodedSnippet": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth.\nBut code completion is just the start.\nMellum will grow into a family of focal models, each specialized for different coding tasks – from code completion to diff prediction and beyond.\nNow, the base model is open-sourced and available on Hugging Face. Whether you’re building tools, running research experiments, or just curious, you’ll have full access to a fast, multilingual model*.\n*Mellum supports code completion for Java, Kotlin, Python, Go, PHP, C, C++, C#, JavaScript, TypeScript, CSS, HTML, Rust, Ruby. \n🤔 Why open-source Mellum?\nThis question was the subject of a big internal discussion.\nMellum is not just a fine-tuned version of an open-source model. It’s a model we trained from scratch to power cloud-based code completion in JetBrains IDEs, and it was released to the public last year. It’s also the first in a planned family of code-specialized models.\nSo why open-source it?\nBecause we believe in transparency, collaboration, and the power of shared progress. From Linux and Git to Node.js and Docker, open source has driven some of the biggest leaps in technology. With open-source LLMs now outperforming some industry leaders, it’s reasonable to assume that AI’s general evolution might follow a similar trajectory.\nMellum isn’t a plug-and-play solution. By releasing it on Hugging Face, we are offering researchers, educators, and advanced teams the opportunity to explore how a purpose-built model works under the hood. \nWhat is a focal model?\nIn machine learning, specialization isn’t new – it’s a core approach that has guided model design for decades, with models built to solve specific tasks efficiently and effectively. Somewhere along the way, the AI conversation shifted towards general-purpose models that aim to do everything, often at a massive computational and environmental cost. \nFocal models return to that original principle: build models to excel in one area.\nThink of it like T-shaped skills – a concept where a person has a broad understanding across many topics (the horizontal top bar or their breadth of knowledge), but deep expertise in one specific area (the vertical stem or depth). Focal models follow this same idea: they aren’t built to handle everything. Instead, they specialize and excel at a single task where depth truly delivers value. \nMellum is a clear example. It’s a small, efficient model designed specifically for code-related tasks, starting with code completion.\nWhy did we take this approach? Because not every problem demands a generalist solution, and not every team has the resources or need to run large, catch-all models.\nFocal models like Mellum offer clear advantages:\nPurpose-built precision for domain-specific tasks\nCost efficiency when it comes to running and deploying them\nLower computation and carbon footprints\nGreater accessibility for researchers, educators, and smaller teams\nThis isn’t a step backward – it’s applying proven principles of specialization to modern AI problems. We see that as a smarter way forward.\nHow does Mellum perform?\nMellum is a multilingual, 4B parameter model optimized specifically for code completion. We benchmarked it on several datasets across multiple languages, and also ran extensive human evaluations in JetBrains IDEs. In this post, we’ll provide some evaluation data for Mellum compared to some bigger models. Full details, results, and comparisons are available on the model card.\n\nHumanEval InfillingRepoBench 1.1 (2K context, py)SAFIM (avg)\nsingle-linemulti-line\nMellum-4B-base66.238.528.238.1\nInCoder-6B69.038.6—33.8\nCodeLlama-7B-base83.050.834.145.0\nCodeLlama-13B-base85.656.136.252.8\nDeepSeek-Coder-6.7B80.7——63.4\n\n\n\n\n\nWho Mellum is (and isn’t) for\nLet’s be real – the average developer probably won’t fine-tune or deploy Mellum. That’s okay.\nInstead, the current version of Mellum on Hugging Face is meant for:\nAI/ML researchers: Especially those exploring AI’s role in software development, benchmarking, or model interpretability.\nAI/ML engineers and educators: As a foundation for learning how to build, fine-tune, and adapt domain-specific language models, or to support educational programs focused on LLM architecture and specialization.\nTry Mellum today\nMellum is now live on Hugging Face. This is just the beginning. We’re not chasing generality – we’re building focus. If Mellum sparks even one meaningful experiment, contribution, or collaboration, we would consider it a win.\nWe’d love for you to join us by trying Mellum for yourself.\nExplore Mellum on Hugging Face",
        "dc:creator": "Anton Semenkin",
        "content": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth. But code completion is just the start. Mellum will grow into a family of focal models, each specialized for different coding tasks [&#8230;]",
        "contentSnippet": "Mellum doesn’t try to know everything. It’s designed to do one thing really well: code completion. We call it a focal model – built with purposeful depth and not concerned with chasing breadth. But code completion is just the start. Mellum will grow into a family of focal models, each specialized for different coding tasks […]",
        "guid": "https://blog.jetbrains.com/?post_type=ai&p=563872",
        "categories": [
          "jetbrains-ai",
          "ai",
          "mellum"
        ],
        "isoDate": "2025-04-30T11:10:27.000Z"
      },
      {
        "creator": "Aleksandra Aganezova",
        "title": "Jens Oliver Meiert: How WebStorm and AI Assistant Fit Right Into My Workflow",
        "link": "https://blog.jetbrains.com/webstorm/2025/04/jens-oliver-meiert-how-webstorm-and-ai-assistant-fit-right-into-my-workflow/",
        "pubDate": "Tue, 29 Apr 2025 17:04:46 +0000",
        "content:encodedSnippet": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens shares what keeps him coming back to JetBrains IDEs, his experience with WebStorm, and how AI is reshaping modern development.\nHi Jens, we’re excited to chat with you! To kick things off, let’s go back to where it all started. You’ve been using JetBrains products for over 20 years. How did your journey with them begin?\nI started using JetBrains products in 2001 when I worked for a Java-focused company. IntelliJ IDEA was a cutting-edge editor, offering features that felt ahead of their time. While my focus has always been on frontend development, I found IntelliJ IDEA to be a great fit for my work even back then. Over the years, I’ve tried other editors — Sublime Text, Eclipse, and also VS Code at certain points — but I always came back to JetBrains IDEs because they consistently offer a well-thought-out developer experience.\nA few years ago, I switched to WebStorm, and it has been my go-to editor ever since. The design, coding assistance, and integrations make it a natural choice for my projects. It just works the way I expect an IDE to work, supporting my projects seamlessly and staying out of my way when I need to focus.\nWhat makes WebStorm stand out from other editors?\nWebStorm has a level of polish and reliability that’s hard to find elsewhere. It’s not just about features — it’s about how those features work together to make development smoother. The experience feels well-structured, and even when I return after trying other tools, I don’t feel like I’m missing anything.\nOne of the things I appreciate most is how JetBrains editors stay true to their philosophy of supporting developers without interfering. Features like autosave, intelligent refactoring, and a consistent UI make coding more efficient. It’s clear that JetBrains puts thought into every aspect of the developer experience, and that’s why I continue using their tools after all these years.\nYou’ve recently started using AI Assistant in WebStorm. How has it impacted your workflow?\nAI Assistant has been a very useful addition. While I wouldn’t say I’m using 100% of its capabilities yet, the features I do use have already had a noticeable impact on my daily work. One of the areas where it helps me the most is with commit messages — with more than 10,000 commits a year, generating clear, meaningful messages saves me a lot of time. It also integrates well with GitHub Copilot and other AI coding tools I use, allowing me to experiment with different AI-assisted workflows.\nAdditionally, AI Assistant provides great support for debugging and code explanations. When I come across a piece of code that isn’t working as expected, instead of searching through documentation, I can ask AI Assistant for insights. It often provides a quick, helpful answer, making my debugging process significantly faster.\nHow does AI Assistant compare to other AI coding tools?\nOne of the key advantages of AI Assistant is how seamlessly it integrates into WebStorm. Unlike external AI tools that feel like an add-on, AI Assistant is built directly into the IDE, making it a natural extension of my workflow. I don’t have to switch between different applications or browser tabs — it’s always there when I need it.\nAnother aspect I appreciate is its contextual understanding. AI Assistant provides recommendations that align with the JetBrains way of working, which means its suggestions are often more relevant than those from generic AI-powered tools. It’s designed to enhance my existing workflow rather than disrupt it, which makes a big difference in usability.\nHave you encountered any challenges using AI Assistant?\nThere was a period when it was necessary to re-authenticate every day to use AI Assistant, which was a little frustrating. However, JetBrains quickly addressed the issue, and it has been working smoothly since then.\nAside from that, my main challenge is making sure I’m getting the most out of AI Assistant. It’s a powerful tool, and I know I’ve only scratched the surface. There’s probably a lot more I could be doing with it to improve my efficiency.\nAs someone who has been in the industry for more than 20 years, what are your thoughts on AI’s role in the future of development?\nAI is undeniably reshaping software development. I believe it would be foolish not to embrace it in some capacity. However, I don’t think AI will replace developers — it will augment our capabilities. AI excels at automating repetitive tasks, generating boilerplate code, and assisting with debugging, but it still requires human oversight, especially when it comes to architectural decisions, code maintainability, and creative problem-solving.\nOne area where AI is already making a big impact is code reviews. It can help spot patterns, enforce best practices, and speed up the review process, though I don’t see it fully replacing human reviewers anytime soon. The key is learning how to leverage AI effectively rather than relying on it blindly.\nWhat advice would you give to developers considering AI-powered tools like AI Assistant?\nTry it out, but don’t just accept AI-generated code without thinking critically. Use it as a way to enhance your workflow. Also, experiment with different features — even if you don’t use AI Assistant for everything, you may find certain capabilities that save you a significant amount of time.\nFinally, stay open to how AI evolves. We’re in the early stages of AI integration in development tools, and the landscape is changing rapidly. Developers who take the time to understand and adapt to these tools will have a significant advantage in the long run.\nNo interview is complete without this question: what’s your favorite shortcut?\nWithout a doubt, double Shift (Search Everywhere). It’s such a simple yet powerful feature that lets me quickly find files, actions, and settings. It’s one of those things that just feels right, and I use it constantly.\nFinal thoughts?\nI’m excited to see where AI-powered development goes next. WebStorm and AI Assistant — as well as Junie, which I just got to evaluate — are already making a big difference in my workflow, and I expect that over time, these tools will only become more powerful and intuitive. But more broadly, I keep coming back to JetBrains because of the reliability and care they put into their products. With WebStorm, I know I’m working with a tool that supports me rather than gets in my way.\nWe’d like to thank Jens for taking part in this interview!\nIf you haven’t tried AI Assistant yet, you can now explore it with the new free tier. Give it a spin and see how it works for you.\nThe WebStorm team",
        "dc:creator": "Aleksandra Aganezova",
        "content": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens [&#8230;]",
        "contentSnippet": "For more than two decades, Jens Oliver Meiert has been at the forefront of web development, working with industry giants like Google and Miro, as well as leading engineering teams across various companies. With extensive experience in frontend development, he has witnessed firsthand how tools and workflows have evolved over time. In this interview, Jens […]",
        "guid": "https://blog.jetbrains.com/?post_type=webstorm&p=563763",
        "categories": [
          "interviews",
          "ai",
          "ai-in-ides"
        ],
        "isoDate": "2025-04-29T17:04:46.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "The First Set of Bug Fixes for ReSharper and Rider 2025.1 Is Here!",
        "link": "https://blog.jetbrains.com/dotnet/2025/04/29/2025-1-1-hot-fix/",
        "pubDate": "Tue, 29 Apr 2025 06:53:33 +0000",
        "content:encodedSnippet": "Hello everyone,\nThe ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts:\nReSharper 2025.1: Comprehensive improvements to C# language support, including initial support for C# 14 preview features, performance enhancements, and more.\nRider 2025.1: A major upgrade to AI Assistant, remote development on Windows host machines, numerous enhancements to .NET and C++ debugging, and a whole host of other improvements. \n\n\n\n\nAnd now, let’s go over the most important fixes in 2025.1.1.\nReSharper 2025.1.1 \nThe first bug-fix update fixes the issue in dotTrace. Copying a tab in dotTrace Viewer now correctly clones the tab along with its selected filters. [DTRC-31677]\nDownload ReSharper 2025.1.1\n                                                    \nRider 2025.1.1\nThis update includes the following fixes:\nCorrect syntax highlighting for Unity identifiers and classes has been fixed. [RIDER-124907] \nRider no longer freezes when editing Razor .cshtml files in .NET 8 MVC applications. [RIDER-124864]\n\n\n\n    \nDownload Rider 2025.1.1\n                                                    \nYou can download the latest builds from our website (Rider, ReSharper) or via the Toolbox App. You can also update Rider as a snap.",
        "dc:creator": "Sasha Ivanova",
        "content": "Hello everyone, The ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts: And now, let’s go over the most important fixes in 2025.1.1. ReSharper 2025.1.1&#160; The first bug-fix update fixes the issue [&#8230;]",
        "contentSnippet": "Hello everyone, The ReSharper and Rider 2025.1.1 bug-fix updates have just been released! If you haven’t upgraded to the 2025.1 versions of our products, we highly recommend that you check out these two blog posts: And now, let’s go over the most important fixes in 2025.1.1. ReSharper 2025.1.1  The first bug-fix update fixes the issue […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=563498",
        "categories": [
          "net-tools",
          "bugfix",
          "news",
          "releases",
          "resharper",
          "rider"
        ],
        "isoDate": "2025-04-29T06:53:33.000Z"
      },
      {
        "creator": "Anna Maltseva",
        "title": "JetBrains AI Assistant: Smarter, More Capable, and a New Free Tier",
        "link": "https://blog.jetbrains.com/ai/2025/04/jetbrains-ai-assistant-2025-1/",
        "pubDate": "Mon, 28 Apr 2025 15:45:42 +0000",
        "content:encodedSnippet": "This release introduces major enhancements to boost productivity and reduce repetitive work. Updates include smarter code completion, support for new cloud models like OpenAI GPT-4.1, Claude 3.7 Sonnet, and Gemini 2.5 Pro, advanced RAG-based context awareness, and a new edit mode for multi-file edits directly from the chat. Plus, our revamped subscription model includes both AI Assistant and Junie under one plan across the Free, Pro, and Ultimate tiers. \nGet Started\n                                                    \nAccess JetBrains AI features in your IDE with the new free tier\nTo make JetBrains AI accessible to all, we’ve redesigned our subscription model, bringing both AI Assistant and Junie, our coding agent, under a single subscription. With the 2025.1 release, all JetBrains AI features are accessible for free in JetBrains IDEs. This includes unlimited code completion and local model support, with limited quota-based access to features powered by third-party cloud models. The new subscription model makes it easy to scale up as needed with the AI Pro and AI Ultimate tiers. See pricing for more details.\nJetBrains AI Pro now included in All Products Pack and dotUltimate subscriptions\nIf you’re subscribed to the All Products Pack or the dotUltimate bundle, you now get JetBrains AI Pro at no extra cost. This plan unlocks a larger quota for AI features powered by external cloud models, like AI chat, multi-file edits, code generation, and smart workflows for refactoring, unit test creation, and commit message suggestions.\nTo help you manage usage, your remaining cloud quota is displayed as a progress bar in the JetBrains AI widget, covering both AI Assistant and Junie usage. \nWhat if you’ve already paid for AI Pro separately? You can double your AI Pro quota by switching between your purchased license and your All Products Pack or dotUltimate license. If you’re eligible, you can request a refund. You can find more details in this post. Please contact JetBrains Support if you need any help.\nNeed a higher quota? You can purchase AI Ultimate as a separate subscription. Please note that there’s currently no upgrade path from AI Pro to AI Ultimate, but we are considering possible solutions.\nAI Assistant just got smarter – here’s what’s new:\n[Beta] Multi-file changes in edit mode \nEditing multiple files has never been easier! AI Assistant now supports multi-file edits in the chat, suggesting changes across your project while leveraging retrieval-augmented generation (RAG) to locate the most relevant files. Reduce repetitive tasks and implement modifications across multiple files with a single interaction.\n\n\n\n\nApply snippets from chat\nNow, when the AI chat suggests a code snippet, you can use the Apply button to automatically find the optimal place to insert the newly generated code – no more manual copy-pasting. This feature significantly streamlines your workflow.\n\n[Beta] Model Context Protocol: Smarter AI with external context \nAI Assistant can now securely access external data sources and tools via the Model Context Protocol (MCP). By configuring MCP servers, you can provide the assistant with additional context from sources such as third-party tools, file systems, and APIs.\nYou can connect external tools right from the AI chat using the / command. From the context menu that appears, select Add Command…\n\n\n\n\nOffline mode: work with local models\nAI Assistant gives you the flexibility to work with local models offline or leverage cloud-based AI processing. With the new offline mode, you can now work without an internet connection while still benefiting from AI-powered coding assistance. Use local models via Ollama or LM Studio for chat, code generation, commit messages, inline documentation, and more.\n\n\n\n\nWeb search from chat\nWith the new /web command, AI Assistant can now fetch documentation, troubleshooting tips, and the latest technical resources directly from the web – right inside your chat window. No more switching tabs or searching manually!\n\n\n\n\nSmarter AI context awareness\nAI Assistant now understands your entire project better, using advanced RAG to surface the most relevant files, methods, and classes. In addition, the context now includes recently accessed files, making interactions even more relevant to your workflow. Because you can now also add or remove attachments sent as context, you maintain full control over the AI’s context. \n\nExpanded selection of LLMs in chat\nThe AI model selection in the chat has just been expanded! Now, you can take full control of your AI experience by choosing from the latest and most advanced language models, including:\nClaude 3.7 Sonnet\nGemini 2.5 Pro\nOpenAI GPT-4.1\nAnd we’re not stopping here! JetBrains is committed to continuously integrating AI models to ensure you have access to the most up-to-date AI technologies.\nExclude files from AI context\nYou can further enhance your control over what AI Assistant sees by configuring an .aiignore file. This allows you to prevent JetBrains AI from accessing specific files or folders, ensuring that sensitive information is never processed. \n\nExplore AI Assistant and share your feedback\nGetting started with JetBrains AI Assistant is easy – open the JetBrains AI widget in your JetBrains IDE version 2025.1, start the installation, and follow the on-screen instructions. You can also customize your experience directly from the JetBrains AI widget, for example, by enabling offline mode, setting your code completion preferences, or accessing extended settings. Check out the installation guide for more details.\n\nAs always, we look forward to hearing your feedback. You can also tell us about your experience via the Share your feedback link in the AI Chat tool window or by submitting feature requests or bug reports in YouTrack.\nHappy developing!",
        "dc:creator": "Anna Maltseva",
        "content": "This release introduces major enhancements to boost productivity and reduce repetitive work. Updates include smarter code completion, support for new cloud models like OpenAI GPT-4.1, Claude 3.7 Sonnet, and Gemini 2.5 Pro, advanced RAG-based context awareness, and a new edit mode for multi-file edits directly from the chat. Plus, our revamped subscription model includes both [&#8230;]",
        "contentSnippet": "This release introduces major enhancements to boost productivity and reduce repetitive work. Updates include smarter code completion, support for new cloud models like OpenAI GPT-4.1, Claude 3.7 Sonnet, and Gemini 2.5 Pro, advanced RAG-based context awareness, and a new edit mode for multi-file edits directly from the chat. Plus, our revamped subscription model includes both […]",
        "guid": "https://blog.jetbrains.com/?post_type=ai&p=563275",
        "categories": [
          "ai-assistant",
          "ai-in-ides"
        ],
        "isoDate": "2025-04-28T15:45:42.000Z"
      },
      {
        "creator": "Ilya Muradyan",
        "title": "How to Use Kotlin Notebooks for Productive Development ",
        "link": "https://blog.jetbrains.com/idea/2025/04/how-to-use-kotlin-notebooks-for-productive-development/",
        "pubDate": "Mon, 28 Apr 2025 15:02:45 +0000",
        "content:encodedSnippet": "Kotlin Notebook is a new interactive environment for JVM developers. This article will cover the main Notebook features and how you can utilize them to improve your productivity. \nHow to use Kotlin Notebook\nKotlin Notebook is bundled with IntelliJ IDEA starting from the 2025.1 release, and it is easier than ever to start working with notebooks across various contexts. You can create notebooks in three main ways:\nCreating a notebook in a project\nFrom within a project, right-click the source root or a folder in the Project view, then choose New | Kotlin Notebook.\nThis will create an .ipynb file inside your project. Notebooks are generally placed in notebooks or samples subdirectories, but you can place them anywhere within your project.\n\n\n\n\nCreating a scratch notebook\nImagine you want to experiment with code without having to add new files to your project. The Scratch notebook should come in handy for this. To create a notebook that isn’t part of a specific project, follow these steps:\nUse the New Scratch File action (Cmd+Shift+N on macOS or Ctrl+Alt+Shift+Insert on Windows/Linux).\nSelect Kotlin Notebook from the list.\n\n\n\n\nThis creates a file in the Scratches and Consoles | Kotlin Notebooks directory, and the notebook can be accessed across all projects, making it easy to store random pieces of code and refer to them whenever you need to.\n\n\n\n\nCreating a notebook from the Welcome screen\nYou can open or create a Kotlin notebook directly from the Welcome screen without even opening a project. Navigate to the Kotlin Notebooks tab and click New Notebook. You’ll be prompted to name the notebook and choose whether it should be saved as a scratch file or within a specified folder.\n\n\n\n\nBasics: Interactive cell execution and kernel control\nKotlin Notebook provides a familiar notebook interface within IntelliJ IDEA, making it easy to run code and manage the execution state. Each notebook consists of cells that can be executed independently or in sequence. The toolbar at the top of the notebook includes controls for running cells and managing the Kotlin kernel:\n\n\n\n\n\nRun a single cell: Click the Run button on the left of a code cell or press Ctrl+Enter/ Cmd+Enter. The cell’s code will run, and the output will appear directly beneath the cell. \nRun multiple cells: Click Run All to execute every cell in the notebook from top to bottom. If you want to run all cells below a certain point (for example, to resume from the middle of a notebook), you can right-click that cell and choose Run All Below. This flexibility lets you rerun the entire notebook or just a section without having to run each cell manually.\nInterrupt execution: If a cell is taking too long or has entered an infinite loop, click the Interrupt button (⏹). This stops the currently running cell without affecting the state of the already executed ones. It’s useful for pausing long-running computations or canceling mistaken operations.\nRestart or stop the session: Use the Restart Kernel button (🔄) to reset the Kotlin kernel. Restarting will terminate the current session and clear the runtime state, so all variables and imports become unresolved. This is helpful to ensure a clean slate (for example, if you want to run the notebook from scratch or recover from a bad state). You can also stop the session entirely by closing the notebook or using the standard Stop action in the Kotlin Notebook tool window, which shuts down the kernel process.\nConfigure Kotlin notebook: The gear icon on the toolbar opens the Kotlin Notebook settings, where you can adjust the notebook’s configuration. This settings panel lets you control the Kotlin kernel environment, such as the JDK or kernel version used.\nUsing these controls, you can execute code interactively and manage the notebook’s state, with each executed cell getting a number. \nThis is important because the notebook’s state depends on execution order, not just the linear order of cells. For example, if one cell defines a variable and a later cell uses it, you must run them in the correct sequence. Kotlin Notebook will help by marking cells with an asterisk if they haven’t been run yet, and by updating the execution count on each cell as you run it.\nSharing notebooks via Gist and Datalore\nOne of the advantages of using the standard .ipynb notebook format is the ease with which you can share your work. Kotlin Notebook provides convenient ways to share notebooks with others or publish your results online:\nGitHub Gist: You can quickly share your current notebook as a GitHub Gist. Simply click the Create Gist button (the icon with the GitHub logo) on the toolbar. The IDE will export your notebook to a Gist on your GitHub account and provide you with the URL, which you send to colleagues, knowing they can view the notebook on GitHub or download it. This is perfect for sharing a quick example or including notebook content in issues and forums. The Gist will contain the notebook in JSON format, which GitHub can render for preview. All code, output, and markdown from your Kotlin notebook are preserved.\n\n\n\n\n\nJetBrains Datalore: Because Kotlin Notebook uses the same file format and Kotlin Jupyter kernel as Datalore, JetBrains’ online data science notebook platform, your notebooks are fully compatible with it. You can simply upload the .ipynb file to Datalore to share it or continue working in the cloud. This means you can collaborate with others by simply moving the notebook to Datalore – no conversion needed. \nBy leveraging Gists for quick snippets and Datalore for cloud collaboration, Kotlin Notebook makes sharing results and prototypes effortless. Whether you’re posting a code snippet publicly or working on data analysis with a teammate, you can move from IntelliJ IDEA to the web and back without missing a beat.\nTesting REST APIs\nKotlin Notebook provides a powerful tool for backend and API developers: the ability to call and test RESTful APIs directly from your notebook, with full support for HTTP methods, JSON serialization, and IDE-based code completion. This is enabled through integration with Kotlin’s HTTP client, powered by Ktor.\nTo get started, simply add %use ktor-client to a code cell. This command pulls in a Ktor-based HTTP client and the kotlinx.serialization library, both of which are ready to use. After that, you have access to a pre-configured HTTP client instance in your notebook, available through the http variable.\nStrongly-typed HTTP calls: With the HTTP client integration, you can perform HTTP requests with Kotlin code and get typed results. For example, to fetch JSON data from an API, you might write:\nval response = http.get(\"https://jsonplaceholder.typicode.com/todos/1\")\n\nresponse.bodyAsText()\nThis will perform a GET request and return the response as pretty-printed and highlighted JSON output.\n\n\n\n\nAutomatic JSON serialization: The notebook’s HTTP client is integrated with Kotlin Serialization, and your responses can be automatically deserialized:\n\n\n\n\nThe Ktor client integration will automatically handle class generation and JSON deserialization itself. This means you get a typed Kotlin object with proper fields, instead of manually dealing with JSON parsing. If you have a pre-defined data class, you can also call the body() method of a response with the appropriate type argument.\nUnder the hood, this feature relies on the open-source kotlin-jupyter-http-util library, which brings together the Ktor client and serialization for use in notebooks. In practice, it means your Kotlin notebook can act like a full-fledged HTTP client tool (akin to Postman or a REST client), but with the added benefit of being able to script and assert on the responses in Kotlin. This is extremely handy for trying out endpoints, testing microservices, or scraping web APIs – all within the comfort of IntelliJ IDEA.\nWorking with data: Tables and visualizations\nData explorers will feel at home in Kotlin Notebook. The 2025.1 release enhances how data is displayed and plotted, through tight integration with the Kotlin DataFrame library for tabular data and Kandy for charts. These integrations turn your notebook into an interactive data exploration tool.\nDataFrame integration – interactive tables\nWhen you add the DataFrame library, simply by putting %use dataframe in a cell, you gain access to a powerful DSL for data manipulation. It builds type information from the runtime the same way HTTP integration logic does, for example:\n\n\n\n\nAny time you display a DataFrame (for example, by evaluating a variable holding a table or by calling df.head()), Kotlin Notebook will render it using a special UI component rather than plain text. It offers:\nScrollable pagination: Large datasets are handled gracefully. Instead of trying to dump thousands of rows, the table output shows a limited number of rows per page and offers navigation controls.\nSortable columns: You can sort the table by a column with a single click on its header.\nHierarchical data drilling: If your DataFrame has nested data (for example, a column that contains another table or complex objects), you can expand that data inline. Click on cells that contain nested structures to drill down into sub-tables. This approach to exploration is great for hierarchical JSON datasets loaded into DataFrames.\nOpen in separate tabs: Sometimes you want to compare two tables side by side. You can now move a DataFrame output into its own tab within the notebook interface. Each table you open in a new tab stays accessible, so you can switch between multiple data views.\nExport to file: The output panel now has an Export button (💾). With a couple of clicks, you can export the displayed DataFrame to a file in common formats like CSV, JSON, or XML. This is useful if you’ve transformed some data and want to save the results. By default, the DataFrame will be saved to your project directory, but you can choose any location. The exported data respects the currently displayed state (for instance, if you’ve sorted the view by a column, the export will follow that sorted order, so you get exactly what you see).\n\n\n\n\nIt’s also possible to just drop a CSV onto your notebook: necessary code will be automatically generated and executed. You’ll be able to work with the loaded dataframe right away.\nWith Kotlin DataFrame, you can load CSV and JSON files, as well as SQL query results, into tables and then filter, aggregate, and transform them with Kotlin code. Kotlin Notebook will back you up by displaying each step’s result in a user-friendly way. It’s like having a mini data grid inside your IDE for instant feedback on your data manipulations.\nCheck out the official documentation to learn more about Kotlin DataFrame’s full capabilities.\nVisualizing data with Kandy\nNo data science notebook is complete without visualization. Kotlin Notebook integrates with Kandy, a plotting library built on LetsPlot by JetBrains and created by the Kotlin team to deliver the best experience when working with Kotlin DataFrame and Kotlin Notebook. Run %use kandy in a cell to load the Kandy library and enable its rendering support in the notebook. This allows you to create charts using Kandy’s simple, type-safe DSL and have them appear right below your code.\nFor example, you can quickly produce a line chart for a DataFrame, df, with the columns Year and Population:\n%use kandy\n\ndf.plot {\n\n    line {\n\n        x(Year)\n\n        y(Population)\n\n  width = 3.5\n\n  color = Color.LIGHT_BLUE\n\n    } \n\nlayout.title = \"Population Growth\"\n\n}\nWhen you execute this cell, a chart will be displayed in the notebook output area.\n\n\n\n\nYou can see many examples of charts in the Kandy documentation and gallery.\nExporting and copying plots: You can easily save your charts or copy them. Every plot output has an output menu (accessible via a small icon that appears at the top-right of the output when you hover over it). From this menu, select Export Plot As… to save the chart as an image file. \nIf you need to use the plot in another application immediately, you can choose Copy Plot, which will copy the chart image to your clipboard so you can paste it into a document or chat. This workflow makes sharing visual insights from your data trivial: run a cell to create a chart, then export or copy that visualization in just a couple of clicks.\n\n\n\n\nKandy’s plotting capabilities, combined with DataFrame, enable a smooth data exploration experience. You can load and prepare data in a table and then visualize patterns with a chart – all in Kotlin. You can even iterate, adjusting your data transformation and re-running the plot cell to see updates instantly. Kotlin Notebook ensures the charts render efficiently inside the IDE, so you don’t have to switch to an external browser for interactive visuals. For more advanced usage (like interactive plots or complex layouts), refer to the Kandy documentation, but for most needs, a few lines of Kotlin code will produce the desired chart.\nUsing JVM libraries and project code\nKotlin has a rich ecosystem of libraries and integrates seamlessly with Java. Kotlin Notebook embraces these strengths by allowing you to bring in external libraries or your project’s own code into a notebook session easily.\nAdding external libraries with %use and USE {}\nYou have two primary options when it comes to using a third-party JVM library (for example, an HTTP client, a CSV parser, or a machine learning toolkit) in your notebook:\nIntegrated libraries via %use: Kotlin Notebook comes with a collection of pre-defined library descriptors for many popular libraries (Kotlin DataFrame, Kandy, Ktor, KotlinDL, etc.). You can import these libraries with the magical  %use libraryName, without the need to think about dependencies! For example, as we saw, %use dataframe brings in the Kotlin DataFrame library and sets up its renderer, and %use ktor-client brings in Ktor and related utilities. We maintain a list of supported libraries and their descriptors on GitHub, and many community libraries are already integrated.\n\n\n\n\nUnintegrated libraries via Gradle syntax: If %use doesn’t support a given library, or you need to specify the version, you can still add it manually using a Gradle-style dependency block. Kotlin Notebook supports a special USE { ... } code block where you can declare repositories and dependencies, for example:\nUSE {\n\n    repositories {\n\n        maven(\"https://my.repo/url\")\n\n    }\n\n    dependencies {\n\n        implementation(\"com.example:my-library:1.2.3\")\n\n        implementation(\"org.apache.commons:commons-text:1.10.0\")\n\n    }\n\n}\nThis will fetch the specified Maven artifacts and add them to the notebook’s classpath. To fine-tune how libraries are resolved, use Kotlin Notebook options.\n\n\n\n\nWhen you use either of these methods to load a library, the Kotlin Notebook kernel may perform additional integration steps if a descriptor or integration class is present. Read more about defining your own library integration.\nIf you add a library in one cell, code in subsequent cells can use it, but code in the same cell may not see it until after that cell is executed. A best practice is to put your %use commands or USE {} blocks at the top of the notebook or at least in their own cells. Also, if you ever restart the kernel, you’ll need to re-run those dependency cells to re-establish the classpath.\nPrototyping with project code and module dependencies\nKotlin Notebook can also interact with the code in your project, making it incredibly useful for prototyping and debugging. For example, if you have a large codebase, you can create a scratch notebook to experiment with your own APIs or data models interactively, without having to write a temporary main function or unit test.\nIn the 2025.1 release, using project code in notebooks has become easier, and there are more configuration options:\nModule classpath selection: By default, when you open a notebook file in an IntelliJ IDEA project, the notebook’s classpath will not include any project dependencies. However, you can also set the notebook up to depend on all project libraries or on a particular project module with all the dependencies inside it. Switch between these options using the combobox in the notebook’s toolbar.\n\n\n\n\n\nUp-to-date code: Notebooks use the compiled classes from your project. To ensure that the latest compiled .class files are available, you should build your project before running a notebook. If you edit a source file in your project while the notebook is open, a notification will remind you to rebuild the module and restart the notebook to see the changes take effect in the notebook’s output.\nIntegrations: If your project defines any integration classes for a Kotlin notebook in the module your notebook depends on, those integrations will also be loaded.\nKotlin Notebook’s approach to libraries and dependencies allows you to incorporate whatever you need – be it a well-known library or your own code – and use it interactively. Because Kotlin notebooks have access to your project code, you can do things like instantiate your application’s classes, call functions from your business logic, or run quick experiments on your data models. You can even use notebooks to write exploratory tests against your APIs, since notebooks allow you to run code in any order and inspect the results, which can be more flexible than a fixed unit test.\nWhat’s next?\nThe next article will tell you about Kotlin Notebook’s advanced features. Stay tuned!\nIf you have any questions or suggestions, you can:\nAsk them right under this post.\nYouTrack: Create a #ktnb ticket to report bugs or suggest features.\nSlack: Check out #notebooks for discussions and questions.\nEmail: Email teodor.irkhin@jetbrains.com with any suggestions or requests for functionality that would allow you to incorporate Kotlin Notebook into your workflow.",
        "dc:creator": "Ilya Muradyan",
        "content": "Kotlin Notebook is a new interactive environment for JVM developers. This article will cover the main Notebook features and how you can utilize them to improve your productivity.&#160; How to use Kotlin Notebook Kotlin Notebook is bundled with IntelliJ IDEA starting from the 2025.1 release, and it is easier than ever to start working with [&#8230;]",
        "contentSnippet": "Kotlin Notebook is a new interactive environment for JVM developers. This article will cover the main Notebook features and how you can utilize them to improve your productivity.  How to use Kotlin Notebook Kotlin Notebook is bundled with IntelliJ IDEA starting from the 2025.1 release, and it is easier than ever to start working with […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=563391",
        "categories": [
          "kotlin",
          "tutorials",
          "intellij-idea",
          "kotlin-notebook"
        ],
        "isoDate": "2025-04-28T15:02:45.000Z"
      }
    ]
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Mark Downie",
        "title": "Set the default file encoding",
        "link": "https://devblogs.microsoft.com/visualstudio/set-the-default-file-encoding/",
        "pubDate": "Mon, 28 Apr 2025 14:50:31 +0000",
        "content:encodedSnippet": "Have you ever encountered unexpected issues due to file encoding when working in cross-platform environments? These frustrating problems can disrupt your workflow and consume valuable time. Visual Studio addresses these concerns with a new feature – the Default File Encoding option.\nYou can now specify the encoding Visual Studio should use when saving files. This ensures that files are saved with the correct encoding, minimizing potential issues.\nDevelopers often work on projects across different platforms, each requiring specific file encodings. Incorrectly managed encodings can lead to various issues, from corrupted files to unreadable text. The Default File Encoding feature helps mitigate this issue by allowing you to set a default encoding, ensuring consistency and reducing the risk of character display issues or data corruption.\nSetting the default file encoding\nTo configure the default file encoding, navigate to Tools > Options > Environment > Documents. You’ll find an option labeled Save files with the following encoding. If this option is checked, Visual Studio will attempt to save files using the encoding specified in the adjacent combo box. If unchecked, Visual Studio will revert to its default behavior for managing file encodings.\n\nThis feature is useful for maintaining consistency across projects and minimizing encoding-related issues. It’s a straightforward tool that enhances productivity and preserves file integrity.\nHandling encoding conflicts\nIn cases where Visual Studio cannot save a file with the specified encoding, such as attempting to save a file with Unicode characters in ASCII format, a dialog will notify you of the issue. This proactive notification helps prevent data loss or file corruption, allowing you to address problems promptly.\nAs always, we appreciate your continuous feedback, which drives us to make Visual Studio better with each release. Happy coding!\nThe post Set the default file encoding appeared first on Visual Studio Blog.",
        "dc:creator": "Mark Downie",
        "comments": "https://devblogs.microsoft.com/visualstudio/set-the-default-file-encoding/#comments",
        "content": "<p>Have you ever encountered unexpected issues due to file encoding when working in cross-platform environments? These frustrating problems can disrupt your workflow and consume valuable time. Visual Studio addresses these concerns with a new feature – the Default File Encoding option. You can now specify the encoding Visual Studio should use when saving files. This [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/set-the-default-file-encoding/\">Set the default file encoding</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Have you ever encountered unexpected issues due to file encoding when working in cross-platform environments? These frustrating problems can disrupt your workflow and consume valuable time. Visual Studio addresses these concerns with a new feature – the Default File Encoding option. You can now specify the encoding Visual Studio should use when saving files. This […]\nThe post Set the default file encoding appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=253104",
        "categories": [
          "Cross-Platform",
          "Visual Studio"
        ],
        "isoDate": "2025-04-28T14:50:31.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": [
      {
        "creator": "charsyam",
        "title": "Redis 와 Valkey 무엇을 선택해야 할까?",
        "link": "https://charsyam.wordpress.com/2025/05/03/redis-%ec%99%80-valkey-%eb%ac%b4%ec%97%87%ec%9d%84-%ec%84%a0%ed%83%9d%ed%95%b4%ec%95%bc-%ed%95%a0%ea%b9%8c/",
        "pubDate": "Sat, 03 May 2025 08:16:52 +0000",
        "content:encodedSnippet": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다.\n 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 싸진다는 장점만 있다고 보시면 됩니다.) 왜냐하면 클라우드에서 쓸 수 있는 Redis 버전은 기본적으로 7.2.4 의 이전 버전들이라, 그 시점은 Valkey가 Fork 되면서 그대로 이전했기 때문입니다. 즉, 기존 Redis 를 제공하는 클라우드의 내부 버전이 다르더라도 그냥 제품명만 Redis -> Valkey로 바꿔서 그대로 제공이 됩니다. 그냥 바꾸면 변경이 되는 수준입니다.\n 그럼, 실제로 문제가 되는 것은 어떤 상황일까요? 현재 우리가 Redis를 자체적으로 운영하고 있는데, Valkey로 바꾸어야 되는가 입니다. 이 이야기를 하기 전에 Redis와 Valkey가 이제 차이가 나는가? 라는 주제 부터 얘기를 해야 합니다. Redis 8과 Valkey 8이 2025년에 나오면서 조금씩 큰 차이가 벌어지고 있습니다. \n Redis Module 이야 대부분이 원래 RSAL 라이센스라, 클라우드에서 제공이 안되었지만, Redis 는 사용자의 편의성 기능과 AI쪽에 좀 더 집중하고 있는 모습입니다. \n Redis는 7 버전 이후에 Hash 에 서브 Key를 Expire 하는 기능이 들어갔지만, Valkey에는 들어가지 않았습니다.(포크가 되는 시점에, 개발되고 있다가, 포크되고 반영된…) Redis 8에는 VectorSet 이나 AutoComplete 등 AI 지원 기능이나 편의성 기능이 이번에 많이 추가 되었습니다.(내부적으로 콜렉션등에 성능개선도 있었다고…)\n Valkey 는 8 버전부터, CPU Cache Line을 맞추거나, 포인터 접근 횟수를 줄여서, 좀더 메모리를 아끼거나, 성능을 높이는 쪽으로 가고 있습니다. 그래서 8부터는 명령이나 이런 부분에서 어느정도 차이가 나고 있습니다.(다만 아직 기본 명령 보다는, 모듈쪽에서 차이가 나는거 같습니다.)\n 그럼 발전성은 어떨까요? Redis 8이 AGPLv3가 추가되면서 기업에서 뭔가 사용하기가 어려워졌지만, 여전히 Redis(회사) 가 많은 지원을 하고 있고, 가장 많은 컨트리뷰션을 하고 있습니다. 반대로 Valkey는 리눅스 파운데이션과 AWS, 알리바바 등 지원이 있지만, Redis 보다는 조금 덜 활성화 된걸로 보입니다.\n 결국 선택의 우리의 몫입니다. 다만 정말 특별한 기능을 사용하지 않고, 기존 흐름을 따르는 형태에서는 뭘 선택해도 당장은 큰 문제는 없어보입니다. 하지만, 새로운 Redis 기능을 써야 한다면, 이제 좀 고민을 하셔야 될듯 합니다.",
        "dc:creator": "charsyam",
        "comments": "https://charsyam.wordpress.com/2025/05/03/redis-%ec%99%80-valkey-%eb%ac%b4%ec%97%87%ec%9d%84-%ec%84%a0%ed%83%9d%ed%95%b4%ec%95%bc-%ed%95%a0%ea%b9%8c/#respond",
        "content": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다. 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 [&#8230;]",
        "contentSnippet": "2024년에 Redis 7.2.4 부터 라이센스 이슈로 Valkey 가 fork 되면서 많은 사람들이 Redis와 Valkey 중에 무엇을 사용해야 하는가? 그럼 어떤 차이가 있는지에 대한 질문이 꽤 많습니다. 그래서 거기에 대한 간단한 의견(답정너) 를 소개하려고 합니다. 일반적으로 클라우드 기반에서 사용하던 분들 특히 AWS의 ElastiCache 를 쓰는 분들은 그냥 Redis 쓰는 것보다 Valkey로 가셔도 전혀 문제가 없습니다.(비용이 더 […]",
        "guid": "http://charsyam.wordpress.com/?p=3568",
        "categories": [
          "Uncategorized"
        ],
        "isoDate": "2025-05-03T08:16:52.000Z"
      },
      {
        "creator": "charsyam",
        "title": "Redis 8 에서의 AGPLv3 추가의 의미(오픈소스로의 리턴?)",
        "link": "https://charsyam.wordpress.com/2025/05/02/redis-8-%ec%97%90%ec%84%9c%ec%9d%98-agplv3-%ec%b6%94%ea%b0%80%ec%9d%98-%ec%9d%98%eb%af%b8%ec%98%a4%ed%94%88%ec%86%8c%ec%8a%a4%eb%a1%9c%ec%9d%98-%eb%a6%ac%ed%84%b4/",
        "pubDate": "Fri, 02 May 2025 14:12:59 +0000",
        "content:encodedSnippet": "지금부터의 의견은 100% 내 개인적인 의견이다.\n 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다.\n 먼저 RSALv2 와 SSPLv1 라이센스에 대해서 먼저 알아보자. 이 두 해당 라이센스는 공식적인 오픈소스 라이센스로 인정받지 못한다. 즉 기본적으로 Redis는 더 이상 오픈소스로 인정 되지 않는다는 얘기였다.(그래서 각 종 리눅스 배포판에서 빠지게 되었다.)\n 일단 각 라이센스 부터 정리하면. 아래와 같다.\n\n라이센스비고\nRSALv2비상업적 또는 자체 내부 서비스 용도로는 사용 가능.\nSaaS(서비스형 소프트웨어) 형태로 Redis를 제공하는 것은 금지.\n예: AWS, GCP 같은 클라우드 벤더가 Redis를 서비스로 제공하는 것 제한.\n수정 및 배포는 가능하지만, 상업적 Redis-as-a-Service 제공은 불허.\nSSPLv1기본적으로 GPLv3 기반이지만, 클라우드 제공자에게 훨씬 더 엄격함.\nRedis를 서비스로 제공하고 싶다면, 해당 서비스 전체의 소스코드를 공개해야 함.\n예: Redis와 함께 사용하는 관리 도구, 오케스트레이션 시스템 등도 모두 공개해야 함.\n사실상 대기업의 SaaS 제공을 어렵게 만드는 라이선스입니다.\n\n\n\n\n\n 딱 살펴보면 알겠지만, Redis를 그냥 사용하는 것은 되지만, Redis As a Service 를 못하게 하는 라이센스라고 보면 된다. 여기서 타겟이 되는 것은 AWS Elasticach 나 GCP 같은 클라우드 업체이며, 더 이상 Redis 를 서비스 할 수 없게 된다.(정확히는 Redis 7.2.4 부터이고 그 이전까지는 여전히 BSDv3 이므로 상관없다.)\n Redis(회사) 에서 말하는 것은 오픈소스 레디스에 우리는 이렇게 투자를 많이하는데, 클라우드 업체에서는 과실만 따먹고, 여기에 대한 투자를 하지 않는다라는 것이다.(물론, 알리바바 클라우드나 AWS에서도 꽤 공헌이 있었다.)\n 여기서 재미있는 것은 Redis(회사) 의 엔터프라이즈 버전이나, AWS의 Elasticash 같은 경우 Open Source Redis의 엄청난 개조버전이라는 것이다.(여기서, Redis 엔터프라이즈 버전은 오픈소스 Redis를 앞에서 Redis(회사)에서 만든 Proxy가 붙어서 다른 형태로 동작하게 하는 걸로 알고 있다.) 즉, 이렇게 수정한 버전을 서비스를 할려면, 소스를 공개하라는 뜻이다.\n 그런데 몇일전에, Redis 8을 릴리즈하면서 이제 AGPLv3 를 라이센스에 추가했다. 관련 글에는 고객들이 오픈소스 라이센스일때 더 적용하기 쉽다고 해서, AGPLv3를 추가했다는 것이다. 그리고 AGPLv3는 인정 받는 오픈소스 라이센스가 맞다. \n 그럼 AGPLv3는 어떤 특징이 있을까?\n가장 “자유로운” 라이선스처럼 보일 수 있으나, 기업 입장에서는 부담이 큼.\n네트워크 상에서 Redis를 서비스 형태로 제공할 경우, 소스코드 전체를 공개해야 함.\nRedis를 커스터마이징하거나 변경한 버전을 서비스로 제공하면, 해당 서비스 전체 소스도 공개해야 함.\n 살펴보면 SSPLv1 과 유사하다는 것을 알 수 있다. 즉, 결국 Redis 오픈 소스 버전을 쓰고 싶다면, 결과물을 공개하라는 의지가 계속 들어가 있는 것이다.\n 당연히 오픈소스 Redis 로 다시 돌아왔지만, 그 목적이 예전처럼 더 자유로웠던 BSDv3가 아닌 것은, 그 목적이 어느 정도 명확해서라고 생각한다.",
        "dc:creator": "charsyam",
        "comments": "https://charsyam.wordpress.com/2025/05/02/redis-8-%ec%97%90%ec%84%9c%ec%9d%98-agplv3-%ec%b6%94%ea%b0%80%ec%9d%98-%ec%9d%98%eb%af%b8%ec%98%a4%ed%94%88%ec%86%8c%ec%8a%a4%eb%a1%9c%ec%9d%98-%eb%a6%ac%ed%84%b4/#respond",
        "content": "지금부터의 의견은 100% 내 개인적인 의견이다. 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다. 먼저 RSALv2 와 SSPLv1 라이센스에 [&#8230;]",
        "contentSnippet": "지금부터의 의견은 100% 내 개인적인 의견이다. 2024년 Redis 생태계에서 아주 충격적인 일이 일어났다. Redis 7.2.4 부터 Redis 의 오픈소스 라이센스가 기존의 BSDv3 에서 Redis Source Available License v2 (RSALv2) 와 Server Side Public License v1 (SSPLv1) 로 바꿔버린 것이다. 그러면서 Valkey 라는 Redis Fork 프로젝트가 새롭게 생겨나게 된 계기가 되었다. 먼저 RSALv2 와 SSPLv1 라이센스에 […]",
        "guid": "http://charsyam.wordpress.com/?p=3554",
        "categories": [
          "Uncategorized"
        ],
        "isoDate": "2025-05-02T14:12:59.000Z"
      }
    ]
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": [
      {
        "creator": "KwonGyo",
        "title": "해외주식 백트래킹 사이트.",
        "link": "http://kwongyo.tistory.com/46",
        "pubDate": "Fri, 2 May 2025 01:04:21 +0900",
        "author": "KwonGyo",
        "comments": "http://kwongyo.tistory.com/46#entry46comment",
        "content": "<h2 data-ke-size=\"size26\">안녕하세요. 최근 주식 백트래킹 사이트를 운영하고 있습니다.</h2>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\"><a href=\"https://deepquant.app\">https://deepquant.app</a></h2>\n<figure id=\"og_1746115488767\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"DeepQuant - 나만의 전략을 위한 주식 백테스팅\" data-og-description=\"DeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!\" data-og-host=\"deepquant.app\" data-og-source-url=\"https://deepquant.app\" data-og-url=\"https://deepquant.app/\" data-og-image=\"\"><a href=\"https://deepquant.app\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://deepquant.app\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">DeepQuant - 나만의 전략을 위한 주식 백테스팅</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">DeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!</p>\n<p class=\"og-host\" data-ke-size=\"size16\">deepquant.app</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">아직 제공하고 있는 기능은 많이 없지만, 점차 늘려갈 예정입니다!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1378\" data-origin-height=\"942\"><span data-url=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" data-alt=\"사이트 접속시 노출되는 화면.\"><img src=\"https://blog.kakaocdn.net/dn/bQNnBX/btsNHPv8Vuf/zfshIt1ay4nBktJPuUNVSK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbQNnBX%2FbtsNHPv8Vuf%2FzfshIt1ay4nBktJPuUNVSK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1378\" height=\"942\" data-origin-width=\"1378\" data-origin-height=\"942\"/></span><figcaption>사이트 접속시 노출되는 화면.</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">원하는 해외주식 종목을 선택해서 그동안 생각했던 매수/매도조건을 테스트 해볼 수 있도록 제작 하였습니다.</p>\n<p data-ke-size=\"size16\">저는 이평선과 볼린저밴드를 주로 많이 보는 편인데요. 이를 바탕으로 제작 해보았습니다.</p>\n<p data-ke-size=\"size16\">추후 기능들을 더 넣을 예정입니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"923\" data-origin-height=\"510\"><span data-url=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" data-alt=\"트레이딩 안전 설정\"><img src=\"https://blog.kakaocdn.net/dn/bp5ggS/btsNIMS56Q6/kRQyIFIgsgLLewF9fuzV0K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbp5ggS%2FbtsNIMS56Q6%2FkRQyIFIgsgLLewF9fuzV0K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"923\" height=\"510\" data-origin-width=\"923\" data-origin-height=\"510\"/></span><figcaption>트레이딩 안전 설정</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">트레이딩 안전 설정을 사용하시면, 상승채널일때만 매매하는 테스트도 진행해볼 수 있습니다.&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"430\" data-origin-height=\"248\"><span data-url=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" data-alt=\"i 마크에 마우스 올리면 노출되는 안내문구.\"><img src=\"https://blog.kakaocdn.net/dn/cAkPuN/btsNHynR3e3/vF3dp1NaEtx5Xik2nIW430/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcAkPuN%2FbtsNHynR3e3%2FvF3dp1NaEtx5Xik2nIW430%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"430\" height=\"248\" data-origin-width=\"430\" data-origin-height=\"248\"/></span><figcaption>i 마크에 마우스 올리면 노출되는 안내문구.</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">기능 이해가 잘 안 되시는 경우에는 i 버튼에 마우스 올리시면 설명이 노출되도록 해두었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"888\" data-origin-height=\"975\"><span data-url=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" data-alt=\"백테스트 결과\"><img src=\"https://blog.kakaocdn.net/dn/cMqME1/btsNHdjYMeP/IOCOEiH2apQyZRqk1rGF40/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcMqME1%2FbtsNHdjYMeP%2FIOCOEiH2apQyZRqk1rGF40%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"888\" height=\"975\" data-origin-width=\"888\" data-origin-height=\"975\"/></span><figcaption>백테스트 결과</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">백테스트 히스토리는 위와 같이 나오는데요. 어떤 전략으로 인하여 매수/매도가 발생했는지 알 수 있게 매매 히스토리를 제공합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">어느 기능을 더 추가해야할지 잘 감이 안 옵니다. 행잉맨, 해머, 슈티스타, 반전 해머, 비석형, 드래건플라이, 긴십자형, 상승장악형 등등 다양한 캔들 패턴이 있는데, 이를 어떤 패턴으로 제공하면 좋을지 잘 모르겠습니다. 어떤 패턴들을 잘 보시는지 모르겠습니다. 댓글을 통하여 알려주시면 다음 기능 추가시에 적극 반영하겠습니다.</p>\n<p data-ke-size=\"size16\">이런식으로 알려주시면 더 좋은 참고가 될 거 같습니다.</p>\n<p data-ke-size=\"size16\">상승장악형 - 전 하락캔들이 3%일때, 5%이상 상승장악 캔들이 나오면 매수 ( 혹은 반대의 케이스에 매도 )</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">감사합니다!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<p data-ke-size=\"size16\">서비스를 바탕으로 기능을 정리 해보았습니다. 사용시 참고하시면 될 거 같습니다. 사이트에 기재된 글이기도 합니다.</p>\n<h2 data-ke-size=\"size26\">1. DeepQuant: 주요 기능 살펴보기</h2>\n<p data-ke-size=\"size16\">DeepQuant는 사용자가 코딩 없이 자신만의 주식 투자 전략을 과거 데이터로 검증해볼 수 있는 웹 기반 백테스팅 서비스입니다. 제공된 프론트엔드 코드를 통해 다음과 같은 기능들을 확인할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\">핵심 기능: 주식 백테스팅</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>전략 시뮬레이션:</b> 사용자가 설정한 매수/매도 조건에 따라 특정 주식(티커)의 과거 데이터를 기반으로 가상 투자를 실행하고 그 결과를 확인합니다.</li>\n<li><b>웹 기반 인터페이스:</b> 별도의 프로그램 설치 없이 웹 브라우저에서 모든 기능을 이용할 수 있습니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\">백테스팅 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>기본 정보 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>티커 검색:</b> 분석할 주식의 티커 심볼 또는 회사 이름을 입력하면 관련 주식이 자동으로 추천됩니다</li>\n<li><b>초기 예수금 설정:</b> 백테스팅을 시작할 가상 투자금을 달러($) 단위로 입력합니다</li>\n<li><b>조회 기간 설정:</b> 백테스팅을 수행할 시작 년/월과 종료 년/월을 'YYYY.MM' 형식으로 입력하거나 달력 UI를 통해 선택합니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>분봉 매매 옵션:</b> (베타/옵션 기능으로 추정) '분봉으로 매매하기' 체크 시 더 짧은 시간 간격으로 테스트할 수 있으며, 이 경우 조회 기간이 제한될 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>매수 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>상세 조건 추가:</b> '+' 버튼을 눌러 매수 신호를 발생시킬 조건을 동적으로 추가할 수 있습니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이동평균선(SMA) 우상향:</b> 단기 이동평균선이 장기 이동평균선을 상향 돌파하는 시점을 조건으로 설정합니다 (예: 5일선이 20일선을 돌파)</li>\n<li><b>볼린저 밴드:</b> 가격이 볼린저 밴드 하단에 근접하거나 특정 %B 값(%B &lt; 임계값) 이하일 때를 조건으로 설정합니다 (기간, 표준편차 배수 K, %B 임계값 설정)</li>\n<li><b>(준비중) RSI, MACD, 스토캐스틱:</b> 향후 추가될 지표로 UI 상에 표시되어 있습니다</li>\n</ul>\n</li>\n<li><b>매수 투자 조건:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>투자 단위:</b> 매수 시 투자할 금액을 현재 보유 예수금의 <b>비율(%)</b> 또는 <b>고정 금액(달러)</b>으로 설정할 수 있습니다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>매도 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>상세 조건 추가:</b> '+' 버튼으로 매도 신호 조건을 추가합니다\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이동평균선(SMA) 우하향:</b> 단기 이동평균선이 장기 이동평균선을 하향 돌파하는 시점을 조건으로 설정합니다</li>\n<li><b>볼린저 밴드:</b> 가격이 볼린저 밴드 상단에 근접하거나 특정 %B 값(%B &gt; 임계값) 이상일 때를 조건으로 설정합니다</li>\n<li><b>수익/손실률 기준:</b> 목표 수익률(%) 또는 손절 기준(%)을 설정하여 매도할 수 있습니다. (체크박스로 활성화)</li>\n<li><b>(준비중) RSI, MACD, 스토캐스틱:</b> 향후 추가될 지표로 UI 상에 표시되어 있습니다</li>\n</ul>\n</li>\n<li><b>매도 투자 조건:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>매도 단위:</b> 매도 시 매도할 수량을 현재 보유 주식의 <b>비율(%)</b> 또는 <b>고정 수량(주)</b>으로 설정할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><b>트레이딩 안전 설정 (선택 사항):</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>활성화 토글:</b> 전체 안전 설정을 켜고 끌 수 있는 스위치가 제공됩니다</li>\n<li><b>세부 규칙:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>최소 보유 기간:</b> 매수 후 최소 N일(캔들 수) 동안 매도를 금지합니다 (수익/손실률 기준 제외).</li>\n<li><b>재진입 쿨다운:</b> 매도 후 최소 N일 동안 재매수를 금지합니다.</li>\n<li><b>최소 가격 변동:</b> 마지막 매도 가격 대비 N% 이상 가격 변동 시에만 다음 매수가 가능합니다.</li>\n<li><b>최대 연속 거래:</b> 같은 방향(매수 또는 매도)으로 연속 N회까지만 거래를 허용합니다.</li>\n<li><b>채널 감지:</b> 특정 조건(기간, 상승 기울기%, 유효성 임계값)을 만족하는 가격 채널 패턴이 감지될 때만 거래를 실행하도록 필터링할 수 있습니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>이 기능 활성화 시, 설정된 매수/매도 조건 외에 추가적으로 채널 조건을 만족해야 거래가 실행됩니다. (툴팁 설명 참고)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">결과 확인 및 분석</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>요약 정보:</b> 백테스팅 실행 시 설정된 티커, 기간, 조건 등 주요 설정값을 요약하여 보여줍니다. 이 영역은 접고 펼 수 있습니다.</li>\n<li><b>상세 거래 내역:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>날짜별 매매 활동(매수, 매도, 보유), 실행 조건, 보유 주식 수, 거래별 수익률(금액 및 %), 예수금 변화, 총 평가금액(예수금+주식 평가액)을 표 형태로 제공합니다</li>\n<li>수익률은 상승 시 빨간색(▲), 하락 시 파란색(▼)으로 시각적으로 구분됩니다.</li>\n</ul>\n</li>\n<li><b>로딩 상태 표시:</b> 백테스팅 실행 중에는 로딩 스피너와 함께 '분석 중...' 메시지가 표시됩니다.</li>\n</ul>\n<h3 data-ke-size=\"size23\">커뮤니티 및 추가 정보</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>실시간 백테스팅 현황:</b> 다른 사용자들이 최근 실행한 백테스팅 정보(티커, 수익률 등)를 사이드바에서 실시간으로 확인할 수 있습니다. 상세 전략은 접기/펼치기로 볼 수 있습니다.</li>\n<li><b>Top 백테스팅 결과:</b> 높은 수익률을 기록한 백테스팅 결과 상위 N개를 사이드바에서 보여줍니다. 상세 전략 확인이 가능합니다.</li>\n<li><b>서비스 소개 페이지:</b> 서비스 기능, 사용 가이드, 백테스팅 개념, 사용되는 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 별도 페이지에서 탭 형식으로 제공합니다.</li>\n<li><b>게시판:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용자 간 소통을 위한 게시판 기능을 제공합니다.</li>\n<li><b>글쓰기:</b> 제목, 닉네임, 비밀번호, 내용(Toast UI 에디터 사용)을 입력하여 게시글을 작성할 수 있습니다. 이미지 첨부(업로드 토큰 필요, 진행률 표시) 기능이 포함된 위지윅/마크다운 에디터를 제공합니다.</li>\n<li><b>글 목록:</b> 게시글 목록을 제목, 글쓴이(IP 일부 표시), 작성시간, 댓글 수와 함께 보여주며, 공지 기능 및 페이지네이션을 지원합니다.</li>\n<li><b>글 상세 보기:</b> 게시글 내용, 작성자 정보(닉네임, IP 일부, 작성시간, 고유번호)를 보여주며, 비밀번호를 이용한 게시글 삭제 기능을 제공합니다.</li>\n<li><b>댓글:</b> 닉네임, 비밀번호, 내용을 입력하여 댓글을 작성하고, 작성된 댓글 목록(작성자, IP 일부, 시간)을 볼 수 있습니다. 비밀번호를 이용한 댓글 삭제 기능을 제공합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 data-ke-size=\"size23\">기타</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>반응형 디자인:</b> 데스크톱, 태블릿, 모바일 등 다양한 화면 크기에 맞춰 레이아웃이 조절됩니다 (CSS 파일 확인).</li>\n<li><b>투자 유의사항 안내:</b> 모든 페이지 하단에 백테스팅 결과는 과거 데이터 기반이며 미래 수익을 보장하지 않고, 투자 결정 책임은 사용자에게 있다는 면책 조항이 명시되어 있습니다.</li>\n</ul>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\">2. DeepQuant 백테스팅, 이렇게 사용해보세요! (단계별 가이드)</h2>\n<p data-ke-size=\"size16\">DeepQuant 서비스를 이용하여 나만의 주식 매매 전략을 백테스팅하는 방법은 다음과 같습니다.</p>\n<h3 data-ke-size=\"size23\">1단계: 기본 정보 입력</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>티커 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'티커' 입력란에 분석하고 싶은 주식의 <b>티커 심볼</b>(예: AAPL) 또는 <b>회사 이름</b>을 입력 시작합니다.</li>\n<li>입력과 동시에 관련 주식 목록이 자동으로 나타나면, 원하는 주식을 <b>클릭하여 선택</b>합니다.</li>\n</ul>\n</li>\n<li><b>예수금 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'예수금' 입력란에 백테스팅을 시작할 <b>초기 가상 투자금</b>을 <b>달러($)</b> 단위 숫자로 입력합니다. (예: 10000)</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">2단계: 매수 조건 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>매수 상세 조건 추가:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매수상세조건' 섹션에서 <b>[+ 조건 추가]</b> 버튼을 클릭합니다.</li>\n<li>나타나는 드롭다운 메뉴에서 원하는 매수 조건(예: '이평선 우상향', '볼린저 밴드')을 선택합니다.</li>\n<li>선택한 조건에 필요한 <b>파라미터 값</b>을 입력합니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이평선 우상향:</b> 단기 N일선 값과 장기 M일선 값을 입력합니다. (예: 5, 20)</li>\n<li><b>볼린저 밴드:</b> 기간(예: 20), 표준편차 배수 K(예: 2.0), 매수할 %B 임계값(예: 0.2)을 입력합니다.</li>\n</ul>\n</li>\n<li>필요한 만큼 조건을 더 추가할 수 있습니다.</li>\n</ul>\n</li>\n<li><b>매수 투자 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매수투자조건' 섹션에서 매수 시 투자할 <b>금액 또는 비율</b>을 입력합니다.</li>\n<li>숫자 입력 후, 옆의 <b>단위 토글 버튼</b>을 클릭하여 <b>'%'</b>(예수금 비율) 또는 <b>'달러'</b>(고정 금액)를 선택합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">3단계: 매도 조건 설정</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>매도 상세 조건 추가:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매도상세조건' 섹션에서 <b>[+ 조건 추가]</b> 버튼을 클릭합니다.</li>\n<li>드롭다운 메뉴에서 원하는 매도 조건(예: '이평선 우하향', '볼린저 밴드', '수익/손실률 기준')을 선택합니다.</li>\n<li>선택한 조건에 필요한 <b>파라미터 값</b>을 입력합니다.\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>이평선 우하향:</b> 단기 N일선 값과 장기 M일선 값을 입력합니다.</li>\n<li><b>볼린저 밴드:</b> 기간, K값, 매도할 %B 임계값(예: 0.8)을 입력합니다.</li>\n<li><b>수익/손실률 기준:</b> 해당 조건을 추가하면 '목표 수익률'과 '손절 기준' 입력란이 나타납니다. 사용하려는 항목 앞의 <b>체크박스를 선택</b>하고 원하는 <b>비율(%)</b>을 입력합니다. (둘 중 하나 또는 둘 다 활성화 가능)</li>\n</ul>\n</li>\n<li>필요한 만큼 조건을 더 추가할 수 있습니다. ('수익/손실률 기준'은 하나만 추가 가능)</li>\n</ul>\n</li>\n<li><b>매도 투자 조건 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'매도투자조건' 섹션에서 매도 시 매도할 <b>수량 또는 비율</b>을 입력합니다.</li>\n<li>숫자 입력 후, 옆의 <b>단위 토글 버튼</b>을 클릭하여 <b>'%'</b>(보유량 비율) 또는 <b>'주'</b>(고정 수량)를 선택합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">4단계: 트레이딩 안전 설정 (선택 사항)</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>안전 설정 활성화:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'트레이딩 안전 설정' 섹션 우측의 <b>토글 스위치</b>를 클릭하여 기능을 활성화합니다.</li>\n</ul>\n</li>\n<li><b>세부 규칙 설정:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>사용하려는 안전 규칙 앞의 <b>체크박스를 선택</b>합니다.</li>\n<li>선택된 규칙에 필요한 <b>숫자 값</b>을 입력합니다 (예: 최소 보유 기간 '5'일, 재진입 쿨다운 '3'일 등).</li>\n<li><b>채널 감지</b>를 활성화하면, 추가적으로 '감지 기간', '상승 기울기', '유효성 임계값'을 설정하는 입력란이 나타납니다. 필요한 값을 입력합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">5단계: 조회 기간 설정 및 실행</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>조회 기간 입력:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'조회기간' 섹션에서 백테스팅을 시작할 년/월과 종료할 년/월을 <b>'YYYY.MM' 형식</b>으로 직접 입력하거나, 입력란 옆의 <b>달력 아이콘( )</b>을 클릭하여 원하는 년도와 월을 선택합니다.</li>\n<li><b>주의:</b> 시작 날짜는 종료 날짜보다 반드시 이전이어야 합니다.</li>\n<li><b>(선택) 분봉 매매:</b> '분봉으로 매매하기' 체크박스를 선택하면 분 단위 데이터로 테스트합니다. 이 경우 조회 기간이 자동으로 조절될 수 있습니다.</li>\n</ul>\n</li>\n<li><b>결과 보기:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>모든 설정이 완료되면 <b>[결과 보기]</b> 버튼을 클릭합니다. 버튼이 '분석 중...'으로 바뀌며 로딩 스피너가 나타납니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">6단계: 결과 해석</h3>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>요약 정보 확인:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>결과 영역 상단에 설정했던 티커, 기간, 주요 조건들이 요약되어 표시됩니다. '상세조건' 부분을 클릭하여 접거나 펼 수 있습니다.</li>\n</ul>\n</li>\n<li><b>상세 거래 내역 확인:</b>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>'결과' 섹션에 상세한 거래 내역이 표 형태로 나타납니다.</li>\n<li><b>날짜:</b> 거래 발생 시점</li>\n<li><b>매매:</b> 매수 / 매도 / 보유 상태</li>\n<li><b>조건:</b> 해당 거래를 발생시킨 조건</li>\n<li><b>소유 주식 수:</b> 해당 시점 보유 주식 수</li>\n<li><b>수익률:</b> 해당 거래로 인한 수익/손실 금액</li>\n<li><b>수익률(%):</b> 해당 거래로 인한 수익/손실률 (%)</li>\n<li><b>예수금:</b> 해당 시점 보유 현금</li>\n<li><b>총 평가금액:</b> 보유 현금과 보유 주식의 평가 가치를 합한 총 자산. 이 값의 추세가 전략의 전반적인 성과를 나타냅니다.</li>\n<li>표를 통해 전략의 진입/청산 시점, 수익/손실 발생 패턴 등을 분석할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<h3 data-ke-size=\"size23\">추가 팁</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>초기화:</b> 설정값을 모두 지우고 처음부터 다시 시작하려면 <b>[초기화]</b> 버튼을 사용하세요.</li>\n<li><b>다른 사용자 결과 참고:</b> 메인 페이지 우측의 '실시간 백테스팅 현황'과 'Top 백테스팅 결과'를 참고하여 다른 사용자들은 어떤 전략을 테스트하는지 살펴보세요. 클릭하면 상세 조건을 확인할 수 있습니다.</li>\n<li><b>지표/용어 이해:</b> '서비스 소개' 페이지의 '백테스팅이란?', '지표 설명' 탭에서 관련 용어와 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 참고하면 전략 수립에 도움이 됩니다.</li>\n<li><b>커뮤니티 활용:</b> 궁금한 점이나 전략 아이디어는 '게시판'을 통해 다른 사용자들과 공유하고 토론해 보세요.</li>\n</ul>\n<p data-ke-size=\"size16\"><b>주의:</b> DeepQuant는 정보 제공 및 교육 목적으로 제공되며, 백테스팅 결과는 과거 데이터에 기반한 시뮬레이션으로 미래 수익을 보장하지 않습니다. 모든 투자 결정의 책임은 사용자 본인에게 있습니다.</p>",
        "contentSnippet": "안녕하세요. 최근 주식 백트래킹 사이트를 운영하고 있습니다.\nhttps://deepquant.app\n\n \nDeepQuant - 나만의 전략을 위한 주식 백테스팅\nDeepQuant에서 이동평균선, 볼린저밴드 등 다양한 지표를 활용하여 나만의 주식 투자 전략을 만들고 과거 데이터로 성과를 검증해보세요. 쉽고 빠른 무료 백테스팅을 경험하세요!\ndeepquant.app\n\n아직 제공하고 있는 기능은 많이 없지만, 점차 늘려갈 예정입니다!\n사이트 접속시 노출되는 화면.\n\n\n원하는 해외주식 종목을 선택해서 그동안 생각했던 매수/매도조건을 테스트 해볼 수 있도록 제작 하였습니다.\n저는 이평선과 볼린저밴드를 주로 많이 보는 편인데요. 이를 바탕으로 제작 해보았습니다.\n추후 기능들을 더 넣을 예정입니다.\n트레이딩 안전 설정\n\n\n트레이딩 안전 설정을 사용하시면, 상승채널일때만 매매하는 테스트도 진행해볼 수 있습니다. \n \ni 마크에 마우스 올리면 노출되는 안내문구.\n\n\n기능 이해가 잘 안 되시는 경우에는 i 버튼에 마우스 올리시면 설명이 노출되도록 해두었습니다.\n \n백테스트 결과\n\n\n백테스트 히스토리는 위와 같이 나오는데요. 어떤 전략으로 인하여 매수/매도가 발생했는지 알 수 있게 매매 히스토리를 제공합니다.\n \n어느 기능을 더 추가해야할지 잘 감이 안 옵니다. 행잉맨, 해머, 슈티스타, 반전 해머, 비석형, 드래건플라이, 긴십자형, 상승장악형 등등 다양한 캔들 패턴이 있는데, 이를 어떤 패턴으로 제공하면 좋을지 잘 모르겠습니다. 어떤 패턴들을 잘 보시는지 모르겠습니다. 댓글을 통하여 알려주시면 다음 기능 추가시에 적극 반영하겠습니다.\n이런식으로 알려주시면 더 좋은 참고가 될 거 같습니다.\n상승장악형 - 전 하락캔들이 3%일때, 5%이상 상승장악 캔들이 나오면 매수 ( 혹은 반대의 케이스에 매도 )\n \n감사합니다!\n \n \n서비스를 바탕으로 기능을 정리 해보았습니다. 사용시 참고하시면 될 거 같습니다. 사이트에 기재된 글이기도 합니다.\n1. DeepQuant: 주요 기능 살펴보기\nDeepQuant는 사용자가 코딩 없이 자신만의 주식 투자 전략을 과거 데이터로 검증해볼 수 있는 웹 기반 백테스팅 서비스입니다. 제공된 프론트엔드 코드를 통해 다음과 같은 기능들을 확인할 수 있습니다.\n핵심 기능: 주식 백테스팅\n전략 시뮬레이션: 사용자가 설정한 매수/매도 조건에 따라 특정 주식(티커)의 과거 데이터를 기반으로 가상 투자를 실행하고 그 결과를 확인합니다.\n웹 기반 인터페이스: 별도의 프로그램 설치 없이 웹 브라우저에서 모든 기능을 이용할 수 있습니다.\n백테스팅 설정\n기본 정보 입력:\n\n티커 검색: 분석할 주식의 티커 심볼 또는 회사 이름을 입력하면 관련 주식이 자동으로 추천됩니다\n초기 예수금 설정: 백테스팅을 시작할 가상 투자금을 달러($) 단위로 입력합니다\n조회 기간 설정: 백테스팅을 수행할 시작 년/월과 종료 년/월을 'YYYY.MM' 형식으로 입력하거나 달력 UI를 통해 선택합니다\n\n분봉 매매 옵션: (베타/옵션 기능으로 추정) '분봉으로 매매하기' 체크 시 더 짧은 시간 간격으로 테스트할 수 있으며, 이 경우 조회 기간이 제한될 수 있습니다.\n매수 조건 설정:\n\n상세 조건 추가: '+' 버튼을 눌러 매수 신호를 발생시킬 조건을 동적으로 추가할 수 있습니다\n\n이동평균선(SMA) 우상향: 단기 이동평균선이 장기 이동평균선을 상향 돌파하는 시점을 조건으로 설정합니다 (예: 5일선이 20일선을 돌파)\n볼린저 밴드: 가격이 볼린저 밴드 하단에 근접하거나 특정 %B 값(%B < 임계값) 이하일 때를 조건으로 설정합니다 (기간, 표준편차 배수 K, %B 임계값 설정)\n(준비중) RSI, MACD, 스토캐스틱: 향후 추가될 지표로 UI 상에 표시되어 있습니다\n매수 투자 조건:\n\n투자 단위: 매수 시 투자할 금액을 현재 보유 예수금의 비율(%) 또는 고정 금액(달러)으로 설정할 수 있습니다\n매도 조건 설정:\n\n상세 조건 추가: '+' 버튼으로 매도 신호 조건을 추가합니다\n\n이동평균선(SMA) 우하향: 단기 이동평균선이 장기 이동평균선을 하향 돌파하는 시점을 조건으로 설정합니다\n볼린저 밴드: 가격이 볼린저 밴드 상단에 근접하거나 특정 %B 값(%B > 임계값) 이상일 때를 조건으로 설정합니다\n수익/손실률 기준: 목표 수익률(%) 또는 손절 기준(%)을 설정하여 매도할 수 있습니다. (체크박스로 활성화)\n(준비중) RSI, MACD, 스토캐스틱: 향후 추가될 지표로 UI 상에 표시되어 있습니다\n매도 투자 조건:\n\n매도 단위: 매도 시 매도할 수량을 현재 보유 주식의 비율(%) 또는 고정 수량(주)으로 설정할 수 있습니다.\n트레이딩 안전 설정 (선택 사항):\n\n활성화 토글: 전체 안전 설정을 켜고 끌 수 있는 스위치가 제공됩니다\n세부 규칙:\n\n최소 보유 기간: 매수 후 최소 N일(캔들 수) 동안 매도를 금지합니다 (수익/손실률 기준 제외).\n재진입 쿨다운: 매도 후 최소 N일 동안 재매수를 금지합니다.\n최소 가격 변동: 마지막 매도 가격 대비 N% 이상 가격 변동 시에만 다음 매수가 가능합니다.\n최대 연속 거래: 같은 방향(매수 또는 매도)으로 연속 N회까지만 거래를 허용합니다.\n채널 감지: 특정 조건(기간, 상승 기울기%, 유효성 임계값)을 만족하는 가격 채널 패턴이 감지될 때만 거래를 실행하도록 필터링할 수 있습니다.\n\n이 기능 활성화 시, 설정된 매수/매도 조건 외에 추가적으로 채널 조건을 만족해야 거래가 실행됩니다. (툴팁 설명 참고)\n결과 확인 및 분석\n요약 정보: 백테스팅 실행 시 설정된 티커, 기간, 조건 등 주요 설정값을 요약하여 보여줍니다. 이 영역은 접고 펼 수 있습니다.\n상세 거래 내역:\n\n날짜별 매매 활동(매수, 매도, 보유), 실행 조건, 보유 주식 수, 거래별 수익률(금액 및 %), 예수금 변화, 총 평가금액(예수금+주식 평가액)을 표 형태로 제공합니다\n수익률은 상승 시 빨간색(▲), 하락 시 파란색(▼)으로 시각적으로 구분됩니다.\n로딩 상태 표시: 백테스팅 실행 중에는 로딩 스피너와 함께 '분석 중...' 메시지가 표시됩니다.\n커뮤니티 및 추가 정보\n실시간 백테스팅 현황: 다른 사용자들이 최근 실행한 백테스팅 정보(티커, 수익률 등)를 사이드바에서 실시간으로 확인할 수 있습니다. 상세 전략은 접기/펼치기로 볼 수 있습니다.\nTop 백테스팅 결과: 높은 수익률을 기록한 백테스팅 결과 상위 N개를 사이드바에서 보여줍니다. 상세 전략 확인이 가능합니다.\n서비스 소개 페이지: 서비스 기능, 사용 가이드, 백테스팅 개념, 사용되는 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 별도 페이지에서 탭 형식으로 제공합니다.\n게시판:\n\n사용자 간 소통을 위한 게시판 기능을 제공합니다.\n글쓰기: 제목, 닉네임, 비밀번호, 내용(Toast UI 에디터 사용)을 입력하여 게시글을 작성할 수 있습니다. 이미지 첨부(업로드 토큰 필요, 진행률 표시) 기능이 포함된 위지윅/마크다운 에디터를 제공합니다.\n글 목록: 게시글 목록을 제목, 글쓴이(IP 일부 표시), 작성시간, 댓글 수와 함께 보여주며, 공지 기능 및 페이지네이션을 지원합니다.\n글 상세 보기: 게시글 내용, 작성자 정보(닉네임, IP 일부, 작성시간, 고유번호)를 보여주며, 비밀번호를 이용한 게시글 삭제 기능을 제공합니다.\n댓글: 닉네임, 비밀번호, 내용을 입력하여 댓글을 작성하고, 작성된 댓글 목록(작성자, IP 일부, 시간)을 볼 수 있습니다. 비밀번호를 이용한 댓글 삭제 기능을 제공합니다.\n기타\n반응형 디자인: 데스크톱, 태블릿, 모바일 등 다양한 화면 크기에 맞춰 레이아웃이 조절됩니다 (CSS 파일 확인).\n투자 유의사항 안내: 모든 페이지 하단에 백테스팅 결과는 과거 데이터 기반이며 미래 수익을 보장하지 않고, 투자 결정 책임은 사용자에게 있다는 면책 조항이 명시되어 있습니다.\n2. DeepQuant 백테스팅, 이렇게 사용해보세요! (단계별 가이드)\nDeepQuant 서비스를 이용하여 나만의 주식 매매 전략을 백테스팅하는 방법은 다음과 같습니다.\n1단계: 기본 정보 입력\n티커 입력:\n\n'티커' 입력란에 분석하고 싶은 주식의 티커 심볼(예: AAPL) 또는 회사 이름을 입력 시작합니다.\n입력과 동시에 관련 주식 목록이 자동으로 나타나면, 원하는 주식을 클릭하여 선택합니다.\n예수금 입력:\n\n'예수금' 입력란에 백테스팅을 시작할 초기 가상 투자금을 달러($) 단위 숫자로 입력합니다. (예: 10000)\n2단계: 매수 조건 설정\n매수 상세 조건 추가:\n\n'매수상세조건' 섹션에서 [+ 조건 추가] 버튼을 클릭합니다.\n나타나는 드롭다운 메뉴에서 원하는 매수 조건(예: '이평선 우상향', '볼린저 밴드')을 선택합니다.\n선택한 조건에 필요한 파라미터 값을 입력합니다.\n\n이평선 우상향: 단기 N일선 값과 장기 M일선 값을 입력합니다. (예: 5, 20)\n볼린저 밴드: 기간(예: 20), 표준편차 배수 K(예: 2.0), 매수할 %B 임계값(예: 0.2)을 입력합니다.\n필요한 만큼 조건을 더 추가할 수 있습니다.\n매수 투자 조건 설정:\n\n'매수투자조건' 섹션에서 매수 시 투자할 금액 또는 비율을 입력합니다.\n숫자 입력 후, 옆의 단위 토글 버튼을 클릭하여 '%'(예수금 비율) 또는 '달러'(고정 금액)를 선택합니다.\n3단계: 매도 조건 설정\n매도 상세 조건 추가:\n\n'매도상세조건' 섹션에서 [+ 조건 추가] 버튼을 클릭합니다.\n드롭다운 메뉴에서 원하는 매도 조건(예: '이평선 우하향', '볼린저 밴드', '수익/손실률 기준')을 선택합니다.\n선택한 조건에 필요한 파라미터 값을 입력합니다.\n\n이평선 우하향: 단기 N일선 값과 장기 M일선 값을 입력합니다.\n볼린저 밴드: 기간, K값, 매도할 %B 임계값(예: 0.8)을 입력합니다.\n수익/손실률 기준: 해당 조건을 추가하면 '목표 수익률'과 '손절 기준' 입력란이 나타납니다. 사용하려는 항목 앞의 체크박스를 선택하고 원하는 비율(%)을 입력합니다. (둘 중 하나 또는 둘 다 활성화 가능)\n필요한 만큼 조건을 더 추가할 수 있습니다. ('수익/손실률 기준'은 하나만 추가 가능)\n매도 투자 조건 설정:\n\n'매도투자조건' 섹션에서 매도 시 매도할 수량 또는 비율을 입력합니다.\n숫자 입력 후, 옆의 단위 토글 버튼을 클릭하여 '%'(보유량 비율) 또는 '주'(고정 수량)를 선택합니다.\n4단계: 트레이딩 안전 설정 (선택 사항)\n안전 설정 활성화:\n\n'트레이딩 안전 설정' 섹션 우측의 토글 스위치를 클릭하여 기능을 활성화합니다.\n세부 규칙 설정:\n\n사용하려는 안전 규칙 앞의 체크박스를 선택합니다.\n선택된 규칙에 필요한 숫자 값을 입력합니다 (예: 최소 보유 기간 '5'일, 재진입 쿨다운 '3'일 등).\n채널 감지를 활성화하면, 추가적으로 '감지 기간', '상승 기울기', '유효성 임계값'을 설정하는 입력란이 나타납니다. 필요한 값을 입력합니다.\n5단계: 조회 기간 설정 및 실행\n조회 기간 입력:\n\n'조회기간' 섹션에서 백테스팅을 시작할 년/월과 종료할 년/월을 'YYYY.MM' 형식으로 직접 입력하거나, 입력란 옆의 달력 아이콘( )을 클릭하여 원하는 년도와 월을 선택합니다.\n주의: 시작 날짜는 종료 날짜보다 반드시 이전이어야 합니다.\n(선택) 분봉 매매: '분봉으로 매매하기' 체크박스를 선택하면 분 단위 데이터로 테스트합니다. 이 경우 조회 기간이 자동으로 조절될 수 있습니다.\n결과 보기:\n\n모든 설정이 완료되면 [결과 보기] 버튼을 클릭합니다. 버튼이 '분석 중...'으로 바뀌며 로딩 스피너가 나타납니다.\n6단계: 결과 해석\n요약 정보 확인:\n\n결과 영역 상단에 설정했던 티커, 기간, 주요 조건들이 요약되어 표시됩니다. '상세조건' 부분을 클릭하여 접거나 펼 수 있습니다.\n상세 거래 내역 확인:\n\n'결과' 섹션에 상세한 거래 내역이 표 형태로 나타납니다.\n날짜: 거래 발생 시점\n매매: 매수 / 매도 / 보유 상태\n조건: 해당 거래를 발생시킨 조건\n소유 주식 수: 해당 시점 보유 주식 수\n수익률: 해당 거래로 인한 수익/손실 금액\n수익률(%): 해당 거래로 인한 수익/손실률 (%)\n예수금: 해당 시점 보유 현금\n총 평가금액: 보유 현금과 보유 주식의 평가 가치를 합한 총 자산. 이 값의 추세가 전략의 전반적인 성과를 나타냅니다.\n표를 통해 전략의 진입/청산 시점, 수익/손실 발생 패턴 등을 분석할 수 있습니다.\n추가 팁\n초기화: 설정값을 모두 지우고 처음부터 다시 시작하려면 [초기화] 버튼을 사용하세요.\n다른 사용자 결과 참고: 메인 페이지 우측의 '실시간 백테스팅 현황'과 'Top 백테스팅 결과'를 참고하여 다른 사용자들은 어떤 전략을 테스트하는지 살펴보세요. 클릭하면 상세 조건을 확인할 수 있습니다.\n지표/용어 이해: '서비스 소개' 페이지의 '백테스팅이란?', '지표 설명' 탭에서 관련 용어와 기술적 지표(이동평균선, 볼린저밴드)에 대한 설명을 참고하면 전략 수립에 도움이 됩니다.\n커뮤니티 활용: 궁금한 점이나 전략 아이디어는 '게시판'을 통해 다른 사용자들과 공유하고 토론해 보세요.\n주의: DeepQuant는 정보 제공 및 교육 목적으로 제공되며, 백테스팅 결과는 과거 데이터에 기반한 시뮬레이션으로 미래 수익을 보장하지 않습니다. 모든 투자 결정의 책임은 사용자 본인에게 있습니다.",
        "guid": "http://kwongyo.tistory.com/46",
        "categories": [
          "주식백테스트",
          "주식시뮬레이션",
          "주식테스트",
          "해외주식",
          "해외주식백테스트",
          "해외주식백트래킹"
        ],
        "isoDate": "2025-05-01T16:04:21.000Z"
      }
    ]
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "Beat processors - 7th",
        "link": "https://kangmyounghun.blogspot.com/2025/05/beat-processors-7th.html",
        "pubDate": "2025-05-02T08:42:00.003Z",
        "author": "강명훈",
        "content": "<div>audit.log 연동.</div>\n<div><pre><code><span style=\"font-family: courier;\"><div>processors:</div><div>&nbsp; - include_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message\"</div><div>&nbsp; - copy_fields:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - from: message</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; to: message2</div><div>&nbsp; - replace:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - field: \"message2\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"\\\"\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replacement: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div><span><a name='more'></a></span>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var list = evt.Get(\"message2\").split(\" \");</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var i in list) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var key = list[i].split(\"=\")[0];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var val = list[i].split(\"=\")[1];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(key, val)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; - drop_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message2\"</div><div>&nbsp; - dissect:</div><div>&nbsp; &nbsp; &nbsp; field: \"msg\"</div><div>&nbsp; &nbsp; &nbsp; tokenizer: \"%{}(%{timestamp}:%{}\"</div><div>&nbsp; &nbsp; &nbsp; target_prefix: \"\"</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T08:39:45.009Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"timestamp\": \"1745768855.270\",</div><div>&nbsp; \"type\": \"NETFILTER_CFG\",</div><div>&nbsp; \"msg\": \"audit(1745768855.270:63):\",</div><div>&nbsp; \"table\": \"filter\",</div><div>&nbsp; \"family\": \"10\",</div><div>&nbsp; \"entries\": \"0\",</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T08:39:45.009Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"arch\": \"c000003e\",</div><div>&nbsp; \"pid\": \"1336\",</div><div>&nbsp; \"exe\": \"/usr/bin/kmod\",</div><div>&nbsp; \"key\": \"(null)\",</div><div>&nbsp; \"success\": \"yes\",</div><div>&nbsp; \"a0\": \"1e2da20\",</div><div>&nbsp; \"a1\": \"1d75\",</div><div>&nbsp; \"exit\": \"0\",</div><div>&nbsp; \"ppid\": \"1335\",</div><div>&nbsp; \"ses\": \"4294967295\",</div><div>&nbsp; \"subj\": \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; \"auid\": \"4294967295\",</div><div>&nbsp; \"gid\": \"0\",</div><div>&nbsp; \"fsuid\": \"0\",</div><div>&nbsp; \"egid\": \"0\",</div><div>&nbsp; \"sgid\": \"0\",</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",</div><div>&nbsp; \"syscall\": \"175\",</div><div>&nbsp; \"a3\": \"1e2a500\",</div><div>&nbsp; \"uid\": \"0\",</div><div>&nbsp; \"timestamp\": \"1745768855.720\",</div><div>&nbsp; \"type\": \"SYSCALL\",</div><div>&nbsp; \"a2\": \"41a2d8\",</div><div>&nbsp; \"items\": \"0\",</div><div>&nbsp; \"euid\": \"0\",</div><div>&nbsp; \"suid\": \"0\",</div><div>&nbsp; \"msg\": \"audit(1745768855.720:63):\",</div><div>&nbsp; \"fsgid\": \"0\",</div><div>&nbsp; \"tty\": \"(none)\",</div><div>&nbsp; \"comm\": \"modprobe\"</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>unixtime을 date 포맷으로 바꿔야 한다. 예전 같으면 한참 헤맸겠지?</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhF64x8lt-QRRH4WJP2wZQblS0Gw-Ir33-LNvDJqix4jSihtLadojgT9poSXaiIJgwcOCfMTrWknerkpG1M3qTwSsaGDMo32seKoTwrsgEBmL0PTB_sQNbNNzDU-RLjMKw78nGx62DPtTPdpwViRbPGnU5JBNtewruysGvXTsw1fQ3FYhivYivt4QDj-iEQ/s1012/unixtime2date.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1012\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhF64x8lt-QRRH4WJP2wZQblS0Gw-Ir33-LNvDJqix4jSihtLadojgT9poSXaiIJgwcOCfMTrWknerkpG1M3qTwSsaGDMo32seKoTwrsgEBmL0PTB_sQNbNNzDU-RLjMKw78nGx62DPtTPdpwViRbPGnU5JBNtewruysGvXTsw1fQ3FYhivYivt4QDj-iEQ/s16000/unixtime2date.png\" /></a></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>processors:</div><div>&nbsp; - include_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message\"</div><div>&nbsp; - copy_fields:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - from: message</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; to: message2</div><div>&nbsp; - replace:</div><div>&nbsp; &nbsp; &nbsp; fields:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - field: \"message2\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern: \"\\\"\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; replacement: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var list = evt.Get(\"message2\").split(\" \");</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (var i in list) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var key = list[i].split(\"=\")[0];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var val = list[i].split(\"=\")[1];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(key, val)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; - drop_fields:</div><div>&nbsp; &nbsp; &nbsp; fields: \"message2\"</div><div>&nbsp; - dissect:</div><div>&nbsp; &nbsp; &nbsp; field: \"msg\"</div><div>&nbsp; &nbsp; &nbsp; tokenizer: \"%{}(%{timestamp}:%{}\"</div><div>&nbsp; &nbsp; &nbsp; target_prefix: \"\"</div><div>&nbsp; - script:</div><div>&nbsp; &nbsp; &nbsp; lang: javascript</div><div>&nbsp; &nbsp; &nbsp; source: &gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function process(evt) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; var timestamp = new Date(evt.Get(\"timestamp\") * 1000)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; evt.Put(\"@timestamp\", timestamp)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div></span></code></pre></div>\n<div><pre><code><span style=\"font-family: courier;\"><div>{</div><div>&nbsp; \"@timestamp\": \"2025-04-27T15:47:35.270Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\",</div><div>&nbsp; \"timestamp\": \"1745768855.270\",</div><div>&nbsp; \"type\": \"NETFILTER_CFG\",</div><div>&nbsp; \"msg\": \"audit(1745768855.270:63):\",</div><div>&nbsp; \"table\": \"filter\",</div><div>&nbsp; \"family\": \"10\",</div><div>&nbsp; \"entries\": \"0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-04-27T15:47:35.720Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"arch\": \"c000003e\",</div><div>&nbsp; \"items\": \"0\",</div><div>&nbsp; \"pid\": \"1336\",</div><div>&nbsp; \"sgid\": \"0\",</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",</div><div>&nbsp; \"auid\": \"4294967295\",</div><div>&nbsp; \"uid\": \"0\",</div><div>&nbsp; \"exit\": \"0\",</div><div>&nbsp; \"a0\": \"1e2da20\",</div><div>&nbsp; \"fsgid\": \"0\",</div><div>&nbsp; \"key\": \"(null)\",</div><div>&nbsp; \"timestamp\": \"1745768855.720\",</div><div>&nbsp; \"a1\": \"1d75\",</div><div>&nbsp; \"a3\": \"1e2a500\",</div><div>&nbsp; \"euid\": \"0\",</div><div>&nbsp; \"fsuid\": \"0\",</div><div>&nbsp; \"type\": \"SYSCALL\",</div><div>&nbsp; \"ppid\": \"1335\",</div><div>&nbsp; \"ses\": \"4294967295\",</div><div>&nbsp; \"comm\": \"modprobe\",</div><div>&nbsp; \"msg\": \"audit(1745768855.720:63):\",</div><div>&nbsp; \"success\": \"yes\",</div><div>&nbsp; \"egid\": \"0\",</div><div>&nbsp; \"exe\": \"/usr/bin/kmod\",</div><div>&nbsp; \"subj\": \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; \"syscall\": \"175\",</div><div>&nbsp; \"a2\": \"41a2d8\",</div><div>&nbsp; \"gid\": \"0\",</div><div>&nbsp; \"suid\": \"0\",</div><div>&nbsp; \"tty\": \"(none)\"</div><div>}</div></span></code></pre></div>\n<div><br /></div><div>참고로 <a href=\"https://docs.splunk.com/Documentation/Splunk/9.4.2/SearchReference/DateandTimeFunctions#strftime.28.26lt.3Btime.26gt.3B.2C.26lt.3Bformat.26gt.3B.29\" target=\"_blank\">스플렁크는 이렇게</a>.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3ZdvWoxgm2ms2EGHm1KtqhIjk6wXHFWTQcCvAKu5kcTj6CoTbGlFSqimlGc44KhJZA0PChTeHRa7rpV_ldaR3A_ySfLX-QlRubcYEkxkLdpHCC8b9SZWCOvX3zWaUq967d4kKLTtDISUguynHooUUVqALgEimX5CqWxz79vzhmXtvgY8oCVkCv0_f9bGy/s1393/splunk_unixtime.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"753\" data-original-width=\"1393\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj3ZdvWoxgm2ms2EGHm1KtqhIjk6wXHFWTQcCvAKu5kcTj6CoTbGlFSqimlGc44KhJZA0PChTeHRa7rpV_ldaR3A_ySfLX-QlRubcYEkxkLdpHCC8b9SZWCOvX3zWaUq967d4kKLTtDISUguynHooUUVqALgEimX5CqWxz79vzhmXtvgY8oCVkCv0_f9bGy/s16000/splunk_unixtime.png\" /></a></div><div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/02/filebeat-processors-6th.html\">Beat processors - 6th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/04/logstash-ruby-8th.html\">Logstash 필터 ruby - 8th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/05/filebeat-90.html\">Filebeat 9.0의 변화</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/09/convert-ip-to-decimal.html\">convert ip to decimal</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/10/key-value.html\" target=\"\">엘라스틱의 key-value 처리</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/09/filebeat.html\">Filebeat 웹 로그 모듈 버그?</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/06/processors-registereddomain.html\" target=\"\">도메인 정규화 Processor: registered_domain</a></li></ul></div></div>",
        "contentSnippet": "audit.log 연동.\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n  - copy_fields:\n      fields:\n        - from: message\n          to: message2\n  - replace:\n      fields:\n        - field: \"message2\"\n          pattern: \"\\\"\"\n          replacement: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var list = evt.Get(\"message2\").split(\" \");\n          for (var i in list) {\n            var key = list[i].split(\"=\")[0];\n            var val = list[i].split(\"=\")[1];\n            evt.Put(key, val)\n          }\n        }\n  - drop_fields:\n      fields: \"message2\"\n  - dissect:\n      field: \"msg\"\n      tokenizer: \"%{}(%{timestamp}:%{}\"\n      target_prefix: \"\"\n\n\n\n\n{\n  \"@timestamp\": \"2025-05-02T08:39:45.009Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"timestamp\": \"1745768855.270\",\n  \"type\": \"NETFILTER_CFG\",\n  \"msg\": \"audit(1745768855.270:63):\",\n  \"table\": \"filter\",\n  \"family\": \"10\",\n  \"entries\": \"0\",\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"\n}\n{\n  \"@timestamp\": \"2025-05-02T08:39:45.009Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"arch\": \"c000003e\",\n  \"pid\": \"1336\",\n  \"exe\": \"/usr/bin/kmod\",\n  \"key\": \"(null)\",\n  \"success\": \"yes\",\n  \"a0\": \"1e2da20\",\n  \"a1\": \"1d75\",\n  \"exit\": \"0\",\n  \"ppid\": \"1335\",\n  \"ses\": \"4294967295\",\n  \"subj\": \"system_u:system_r:insmod_t:s0\",\n  \"auid\": \"4294967295\",\n  \"gid\": \"0\",\n  \"fsuid\": \"0\",\n  \"egid\": \"0\",\n  \"sgid\": \"0\",\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",\n  \"syscall\": \"175\",\n  \"a3\": \"1e2a500\",\n  \"uid\": \"0\",\n  \"timestamp\": \"1745768855.720\",\n  \"type\": \"SYSCALL\",\n  \"a2\": \"41a2d8\",\n  \"items\": \"0\",\n  \"euid\": \"0\",\n  \"suid\": \"0\",\n  \"msg\": \"audit(1745768855.720:63):\",\n  \"fsgid\": \"0\",\n  \"tty\": \"(none)\",\n  \"comm\": \"modprobe\"\n}\n\n\n\n\nunixtime을 date 포맷으로 바꿔야 한다. 예전 같으면 한참 헤맸겠지?\n\n\n\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n  - copy_fields:\n      fields:\n        - from: message\n          to: message2\n  - replace:\n      fields:\n        - field: \"message2\"\n          pattern: \"\\\"\"\n          replacement: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var list = evt.Get(\"message2\").split(\" \");\n          for (var i in list) {\n            var key = list[i].split(\"=\")[0];\n            var val = list[i].split(\"=\")[1];\n            evt.Put(key, val)\n          }\n        }\n  - drop_fields:\n      fields: \"message2\"\n  - dissect:\n      field: \"msg\"\n      tokenizer: \"%{}(%{timestamp}:%{}\"\n      target_prefix: \"\"\n  - script:\n      lang: javascript\n      source: >\n        function process(evt) {\n          var timestamp = new Date(evt.Get(\"timestamp\") * 1000)\n          evt.Put(\"@timestamp\", timestamp)\n        }\n\n\n\n\n{\n  \"@timestamp\": \"2025-04-27T15:47:35.270Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\",\n  \"timestamp\": \"1745768855.270\",\n  \"type\": \"NETFILTER_CFG\",\n  \"msg\": \"audit(1745768855.270:63):\",\n  \"table\": \"filter\",\n  \"family\": \"10\",\n  \"entries\": \"0\"\n}\n{\n  \"@timestamp\": \"2025-04-27T15:47:35.720Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"arch\": \"c000003e\",\n  \"items\": \"0\",\n  \"pid\": \"1336\",\n  \"sgid\": \"0\",\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\",\n  \"auid\": \"4294967295\",\n  \"uid\": \"0\",\n  \"exit\": \"0\",\n  \"a0\": \"1e2da20\",\n  \"fsgid\": \"0\",\n  \"key\": \"(null)\",\n  \"timestamp\": \"1745768855.720\",\n  \"a1\": \"1d75\",\n  \"a3\": \"1e2a500\",\n  \"euid\": \"0\",\n  \"fsuid\": \"0\",\n  \"type\": \"SYSCALL\",\n  \"ppid\": \"1335\",\n  \"ses\": \"4294967295\",\n  \"comm\": \"modprobe\",\n  \"msg\": \"audit(1745768855.720:63):\",\n  \"success\": \"yes\",\n  \"egid\": \"0\",\n  \"exe\": \"/usr/bin/kmod\",\n  \"subj\": \"system_u:system_r:insmod_t:s0\",\n  \"syscall\": \"175\",\n  \"a2\": \"41a2d8\",\n  \"gid\": \"0\",\n  \"suid\": \"0\",\n  \"tty\": \"(none)\"\n}\n\n\n\n\n참고로 스플렁크는 이렇게.\n\n\n\n\n\n관련 글\n\nBeat processors - 6th\nLogstash 필터 ruby - 8th\nFilebeat 9.0의 변화\nconvert ip to decimal\n엘라스틱의 key-value 처리\nFilebeat 웹 로그 모듈 버그?\n도메인 정규화 Processor: registered_domain",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-981124766619140623",
        "isoDate": "2025-05-02T08:42:00.003Z"
      },
      {
        "title": "Filebeat 9.0의 변화",
        "link": "https://kangmyounghun.blogspot.com/2025/05/filebeat-90.html",
        "pubDate": "2025-05-02T03:42:00.005Z",
        "author": "강명훈",
        "content": "<div>audit.log 연동.</div><div><br /></div><div><div style=\"background-color: #f6f9fc; color: #1d2a3e; font-family: &quot;Roboto Mono&quot;, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 21px; white-space: pre;\"><div><span style=\"color: #a11262;\">filebeat.inputs:</span></div><div><span style=\"color: #a11262;\">-</span> <span style=\"color: #047471;\">type: filestream</span></div><div>&nbsp; <span style=\"color: #111c2c;\">id:</span> <span style=\"color: #111c2c;\">my-filestream-id</span></div><div>&nbsp; <span style=\"color: #111c2c;\">enabled:</span> <span style=\"color: #111c2c;\">true</span></div><div>&nbsp; <span style=\"color: #111c2c;\">paths:</span></div><div>&nbsp; &nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">d:\\test.log</span></div><br /><div><span style=\"color: #a11262;\">output.console:</span></div><div>&nbsp; <span style=\"color: #047471;\">pretty: true</span></div><br /><div><span style=\"color: #a11262;\">processors:</span></div><div>&nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">include_fields:</span></div><div>&nbsp; &nbsp; &nbsp; <span style=\"color: #111c2c;\">fields:</span> <span style=\"color: #111c2c;\">\"message\"</span></div></div></div><div><br /></div><div><span><a name='more'></a></span>실행은 됐는데 데이터를 가져오지 못한다.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhoR7SEyH4u7OPnhrrKh1rBTVuUUtHkEG7s_EjBsQnFrzD9rsxkuADdbIUyo2HhM_K9rh-7Itm-5uNlOXOKt8sR1FOVj3v2quJrhCOjnJPlBZH8e0gewX-ebsOLFJLkaNmagwMIuYLb4LDDkZu4c0Ud7DkusroAA_0V-pUhU8-rjgktGWgwX5CpUHGDv5AW/s1280/filebeat_log.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhoR7SEyH4u7OPnhrrKh1rBTVuUUtHkEG7s_EjBsQnFrzD9rsxkuADdbIUyo2HhM_K9rh-7Itm-5uNlOXOKt8sR1FOVj3v2quJrhCOjnJPlBZH8e0gewX-ebsOLFJLkaNmagwMIuYLb4LDDkZu4c0Ud7DkusroAA_0V-pUhU8-rjgktGWgwX5CpUHGDv5AW/s16000/filebeat_log.png\" /></a></div><div><br /></div><div><a href=\"https://www.elastic.co/docs/reference/beats/filebeat/command-line-options#global-flags\" target=\"_blank\">디버그 모드</a><span style=\"font-size: x-small;\">(<span style=\"font-family: courier;\">filebeat.exe -e -d \"*\"</span>)</span> 실행.</div><div><br /></div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFJCvQ5RJUkY-qJumLvUwq8Fvv4Vf3NF-G-Cft3TyqNRx5WaW-BViWwVcGxXk5n6fZ5zZ-k9OucuqUsmxJF3zAC3LXY-Z-arG-2fhHOwX2KAQ3irZ5vB6kd6ELJDOsmRtrB_NPuhvxbAR26Jf9S-UCi4KbOtfepnIsXZBDhzy5rpIWPmUTgAULbk1HDa0N/s1280/filebeat_debug.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgFJCvQ5RJUkY-qJumLvUwq8Fvv4Vf3NF-G-Cft3TyqNRx5WaW-BViWwVcGxXk5n6fZ5zZ-k9OucuqUsmxJF3zAC3LXY-Z-arG-2fhHOwX2KAQ3irZ5vB6kd6ELJDOsmRtrB_NPuhvxbAR26Jf9S-UCi4KbOtfepnIsXZBDhzy5rpIWPmUTgAULbk1HDa0N/s16000/filebeat_debug.png\" /></a></div><br />파일 사이즈가 너무 작다고? 8.18까지 잘 되던 게 안 되는 거 보니 9.0에서 변화가 있는 모양. 릴리즈 노트를 살펴보니 파일 수집 방식이 변경됐다. <a href=\"https://www.elastic.co/docs/release-notes/beats/breaking-changes\" target=\"_blank\">1MB 이상일 때만 수집 가능</a>하다고.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVoS-b3Qfa8YDGw-DVmaXSA8uh3v4vwvYwlcN6J1oW_XLTpdkQIP3-ELipMu404etZ9WgygimY8oehq9GYwWklZc2rdJu23vVktHv6O06c1PIH08cOjYaZeiihpnrd6obo3U7YWQDVKtp6mHeEQ5uZhbdLm2z3lFLNQC0xmb0r66B31ctuyNHr6uwUgDU6/s1280/beat9_release.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"676\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVoS-b3Qfa8YDGw-DVmaXSA8uh3v4vwvYwlcN6J1oW_XLTpdkQIP3-ELipMu404etZ9WgygimY8oehq9GYwWklZc2rdJu23vVktHv6O06c1PIH08cOjYaZeiihpnrd6obo3U7YWQDVKtp6mHeEQ5uZhbdLm2z3lFLNQC0xmb0r66B31ctuyNHr6uwUgDU6/s16000/beat9_release.png\" /></a></div><div><br /></div>설정 변경.<br /><div><br /></div><div><div style=\"color: #1d2a3e; font-family: &quot;Roboto Mono&quot;, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; white-space: pre;\"><div style=\"background-color: #f6f9fc; line-height: 21px;\"><div><span style=\"color: #a11262;\">filebeat.inputs:</span></div><div><span style=\"color: #a11262;\">-</span> <span style=\"color: #047471;\">type: filestream</span></div><div>&nbsp; <span style=\"color: #111c2c;\">id:</span> <span style=\"color: #111c2c;\">my-filestream-id</span></div><div>&nbsp; <span style=\"color: #111c2c;\">enabled:</span> <span style=\"color: #111c2c;\">true</span></div><div>&nbsp; <span style=\"color: #111c2c;\">paths:</span></div><div>&nbsp; &nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">d:\\test.log</span></div><div>&nbsp; <span style=\"color: #111c2c;\">prospector.scanner.fingerprint.enabled:</span> <span style=\"color: #111c2c;\">false</span></div><br /><div><span style=\"color: #a11262;\">output.console:</span></div><div>&nbsp; <span style=\"color: #047471;\">pretty: true</span></div><br /><div><span style=\"color: #a11262;\">processors:</span></div><div>&nbsp; <span style=\"color: #111c2c;\">-</span> <span style=\"color: #111c2c;\">include_fields:</span></div><div>&nbsp; &nbsp; &nbsp; <span style=\"color: #111c2c;\">fields:</span> <span style=\"color: #111c2c;\">\"message\"</span></div></div></div></div>\n<div><pre><code><div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T03:41:27.182Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"</div><div>}</div><div>{</div><div>&nbsp; \"@timestamp\": \"2025-05-02T03:41:27.182Z\",</div><div>&nbsp; \"@metadata\": {</div><div>&nbsp; &nbsp; \"beat\": \"filebeat\",</div><div>&nbsp; &nbsp; \"type\": \"_doc\",</div><div>&nbsp; &nbsp; \"version\": \"9.0.0\"</div><div>&nbsp; },</div><div>&nbsp; \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\"</div><div>}</div></div></code></pre></div>\n<div><br /></div><div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/04/elasticsearch-90.html\">Elasticsearch 9.0의 변화</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/05/beat-processors-7th.html\">Beat processors - 7th</a></li></ul></div></div>",
        "contentSnippet": "audit.log 연동.\n\n\n\nfilebeat.inputs:\n- type: filestream\n  id: my-filestream-id\n  enabled: true\n  paths:\n    - d:\\test.log\n\noutput.console:\n  pretty: true\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n\n\n\n실행은 됐는데 데이터를 가져오지 못한다.\n\n\n\n\n\n디버그 모드(filebeat.exe -e -d \"*\") 실행.\n\n\n\n파일 사이즈가 너무 작다고? 8.18까지 잘 되던 게 안 되는 거 보니 9.0에서 변화가 있는 모양. 릴리즈 노트를 살펴보니 파일 수집 방식이 변경됐다. 1MB 이상일 때만 수집 가능하다고.\n\n\n\n\n설정 변경.\n\n\n\nfilebeat.inputs:\n- type: filestream\n  id: my-filestream-id\n  enabled: true\n  paths:\n    - d:\\test.log\n  prospector.scanner.fingerprint.enabled: false\n\noutput.console:\n  pretty: true\n\nprocessors:\n  - include_fields:\n      fields: \"message\"\n\n\n\n\n{\n  \"@timestamp\": \"2025-05-02T03:41:27.182Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=NETFILTER_CFG msg=audit(1745768855.270:63): table=filter family=10 entries=0\"\n}\n{\n  \"@timestamp\": \"2025-05-02T03:41:27.182Z\",\n  \"@metadata\": {\n    \"beat\": \"filebeat\",\n    \"type\": \"_doc\",\n    \"version\": \"9.0.0\"\n  },\n  \"message\": \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\"\n}\n\n\n\n\n관련 글\n\nElasticsearch 9.0의 변화\nBeat processors - 7th",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-1446608482965908543",
        "isoDate": "2025-05-02T03:42:00.005Z"
      },
      {
        "title": "Logstash 필터 ruby - 8th",
        "link": "https://kangmyounghun.blogspot.com/2025/04/logstash-ruby-8th.html",
        "pubDate": "2025-04-28T09:02:00.002Z",
        "author": "강명훈",
        "content": "<div>audit.log 연동.</div>\n<div><pre><code><div>filter {</div><div><span style=\"white-space: normal;\">&nbsp;mutate {</span></div><div><span style=\"white-space: normal;\">&nbsp; remove_field =&gt; [\"@timestamp\", \"@version\", \"path\", \"host\"]</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;kv {}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;dissect {</span></div><div><span style=\"white-space: normal;\">&nbsp; mapping =&gt; {\"msg\" =&gt; \"%{}(%{timestamp}:%{}\"}</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div>}</div></code></pre></div><span><a name='more'></a></span>\n<div><pre><code><div>{</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"family\" =&gt; \"10\",</div><div>&nbsp; &nbsp; &nbsp; \"message\" =&gt; \"type=NETFILTER_CFG msg=audit(1745768855.720:63): table=filter family=10 entries=0\\r\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"type\" =&gt; \"NETFILTER_CFG\",</div><div>&nbsp; &nbsp; &nbsp; \"entries\" =&gt; \"0\\r\",</div><div>&nbsp; &nbsp; \"timestamp\" =&gt; \"1745768855.720\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"table\" =&gt; \"filter\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"msg\" =&gt; \"audit(1745768855.720:63):\"</div><div>}</div><div>{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"gid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"a2\" =&gt; \"41a2d8\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"a0\" =&gt; \"1e2da20\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ppid\" =&gt; \"1335\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"key\" =&gt; \"(null)\\r\",</div><div>&nbsp; &nbsp; \"timestamp\" =&gt; \"1745768855.720\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"a1\" =&gt; \"1d75\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"fsgid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"tty\" =&gt; \"none\",</div><div>&nbsp; &nbsp; &nbsp; \"message\" =&gt; \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\\r\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"items\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"suid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"auid\" =&gt; \"4294967295\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"sgid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"pid\" =&gt; \"1336\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"egid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"exe\" =&gt; \"/usr/bin/kmod\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"uid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ses\" =&gt; \"4294967295\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"a3\" =&gt; \"1e2a500\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"euid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"fsuid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"comm\" =&gt; \"modprobe\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"exit\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; \"success\" =&gt; \"yes\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"msg\" =&gt; \"audit(1745768855.720:63):\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"arch\" =&gt; \"c000003e\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"subj\" =&gt; \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; &nbsp; &nbsp; \"syscall\" =&gt; \"175\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"type\" =&gt; \"SYSCALL\"</div><div>}</div></code></pre></div>\n<div><br /></div>\n<div>그런데 시간 정보가 unixtime 포맷이다. stackoverflow 형님들이 가르쳐준대로 date 포맷으로 변경.</div>\n<div><pre><code><div>filter {</div><div><span style=\"white-space: normal;\">&nbsp;mutate {</span></div><div><span style=\"white-space: normal;\">&nbsp; remove_field =&gt; [\"@timestamp\", \"@version\", \"path\", \"host\"]</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;kv {}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;dissect {</span></div><div><span style=\"white-space: normal;\">&nbsp; mapping =&gt; {\"msg\" =&gt; \"%{}(%{timestamp}:%{}\"}</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;ruby {</span></div><div><span style=\"white-space: normal;\">&nbsp; code =&gt; \"event.set('@timestamp', DateTime.strptime(event.get('timestamp'), '%s'))\"</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div>}</div></code></pre></div>\n<pre><code><div>[2025-04-28T17:52:41,760][ERROR][logstash.filters.ruby&nbsp; &nbsp; ][main][7cefa12dcafdc101f42a5bda6812294cab6405d0864ef044fe35a2cc66392ce4] </div><div>Ruby exception occurred: wrong argument type DateTime (expected LogStash::Timestamp)</div></code></pre>\n<div><br /></div><div>안 된다. 제미나이한테 물어봄.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiGeOvSsV-noI1Rwoxwxq5x8-pdYXn5lNuIW8E2m-KCnmBmYB_BOVdDnhyphenhyphen125gPdMNB7Do1iR5nkMd0qAc0OFQZ7CQQm1mFwXEhiwmdsLCzTPrW4CjZzPN4GJq9BLZlTbfAiF-iIfOk2mWuJJ_DgzkUWvCxZ6s2FCDEKzQUmG4ouKRGbPnVuHVRln7UJ0nR/s1004/gemini.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1004\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiGeOvSsV-noI1Rwoxwxq5x8-pdYXn5lNuIW8E2m-KCnmBmYB_BOVdDnhyphenhyphen125gPdMNB7Do1iR5nkMd0qAc0OFQZ7CQQm1mFwXEhiwmdsLCzTPrW4CjZzPN4GJq9BLZlTbfAiF-iIfOk2mWuJJ_DgzkUWvCxZ6s2FCDEKzQUmG4ouKRGbPnVuHVRln7UJ0nR/s16000/gemini.png\" /></a></div><pre><code><div>[2025-04-28T17:57:02,837][ERROR][logstash.filters.ruby&nbsp; &nbsp; ][main][d35de4494869054b8277f75d5c334da579e561ff0060cc7554ec4beb7dd79661] </div><div>Ruby exception occurred: wrong argument type DateTime (expected Time)</div></code></pre>\n<div><br /></div><div>안 되잖아<span style=\"font-size: x-small;\">(..)</span></div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0wICj6cEEXc16f5xI2nOtfZFuNztd72PGFkeJpridAmrQhvyeDtExoPRGi6JbX4TI_RqYmeAn9KxlBViEUJTntI7C0-n3tE8MQ8x5q07z5rhkk5a0zZbIqn4rOG9zT2icLbwoVxIgIHcNx5M_LpC3r2oiV12cisIK6qdjY8jWDKIXe4z_976hf5PJ1M8v/s1054/gemini2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"1054\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi0wICj6cEEXc16f5xI2nOtfZFuNztd72PGFkeJpridAmrQhvyeDtExoPRGi6JbX4TI_RqYmeAn9KxlBViEUJTntI7C0-n3tE8MQ8x5q07z5rhkk5a0zZbIqn4rOG9zT2icLbwoVxIgIHcNx5M_LpC3r2oiV12cisIK6qdjY8jWDKIXe4z_976hf5PJ1M8v/s16000/gemini2.png\" /></a></div><br /><div>아무래도 로그스태시 구문이 따로 있는 것 같은데 ruby 구문을 계속 그대로 사용하는 게 이상하다. gpt는 다를까?</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_WWp5Pf0JmDF3aqeoyy5aHvibuQD6cOFzhBquTaAcy51b6hIZ1sG2zDA2i3SSGv2w5dBnRHrvE9oHnD-ftO8pFngHpHjIG013Giz9eMDnAbM4k8WQWB5yoTfMxpmGlIqYxE20KVSaFeqdgJhtVnGoflB-RRhjqTVKpoqDoK6vx18Xy-KlFiGsj58Qu8aO/s939/chatgpt.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"939\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEi_WWp5Pf0JmDF3aqeoyy5aHvibuQD6cOFzhBquTaAcy51b6hIZ1sG2zDA2i3SSGv2w5dBnRHrvE9oHnD-ftO8pFngHpHjIG013Giz9eMDnAbM4k8WQWB5yoTfMxpmGlIqYxE20KVSaFeqdgJhtVnGoflB-RRhjqTVKpoqDoK6vx18Xy-KlFiGsj58Qu8aO/s16000/chatgpt.png\" /></a></div>\n<div><pre><code><div>filter {</div><div><span style=\"white-space: normal;\">&nbsp;mutate {</span></div><div><span style=\"white-space: normal;\">&nbsp; remove_field =&gt; [\"@timestamp\", \"@version\", \"path\", \"host\"]</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;kv {}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;dissect {</span></div><div><span style=\"white-space: normal;\">&nbsp; mapping =&gt; {\"msg\" =&gt; \"%{}(%{timestamp}:%{}\"}</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div><br /></div><div><span style=\"white-space: normal;\">&nbsp;ruby {</span></div><div><span style=\"white-space: normal;\">&nbsp; code =&gt; \"event.set('@timestamp', LogStash::Timestamp.new(Time.at(event.get('timestamp').to_i)))\"</span></div><div><span style=\"white-space: normal;\">&nbsp;}</span></div><div>}</div></code></pre></div>\n<div><pre><code><div>{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; \"family\" =&gt; \"10\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"message\" =&gt; \"type=NETFILTER_CFG msg=audit(1745768855.720:63): table=filter family=10 entries=0\\r\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\" =&gt; \"NETFILTER_CFG\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"entries\" =&gt; \"0\\r\",</div><div>&nbsp; &nbsp; &nbsp;\"timestamp\" =&gt; \"1745768855.720\",</div><div>&nbsp; &nbsp; \"@timestamp\" =&gt; 2025-04-27T15:47:35.000Z,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"table\" =&gt; \"filter\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"msg\" =&gt; \"audit(1745768855.720:63):\"</div><div>}</div><div>{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"gid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"a2\" =&gt; \"41a2d8\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"a0\" =&gt; \"1e2da20\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ppid\" =&gt; \"1335\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"key\" =&gt; \"(null)\\r\",</div><div>&nbsp; &nbsp; &nbsp;\"timestamp\" =&gt; \"1745768855.720\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"a1\" =&gt; \"1d75\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"fsgid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"tty\" =&gt; \"none\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"message\" =&gt; \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\\r\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"items\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"suid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"auid\" =&gt; \"4294967295\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"sgid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"pid\" =&gt; \"1336\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"egid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"exe\" =&gt; \"/usr/bin/kmod\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"uid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"ses\" =&gt; \"4294967295\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"a3\" =&gt; \"1e2a500\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"euid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"fsuid\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"comm\" =&gt; \"modprobe\",</div><div>&nbsp; &nbsp; \"@timestamp\" =&gt; 2025-04-27T15:47:35.000Z,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"exit\" =&gt; \"0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"success\" =&gt; \"yes\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;\"msg\" =&gt; \"audit(1745768855.720:63):\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"arch\" =&gt; \"c000003e\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"subj\" =&gt; \"system_u:system_r:insmod_t:s0\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp;\"syscall\" =&gt; \"175\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"type\" =&gt; \"SYSCALL\"</div><div>}</div></code></pre></div>\n<div><br /></div><div>아이고 구글<span style=\"font-size: x-small;\">(..)</span></div><div><br /></div><div><b style=\"font-family: inherit;\">관련&nbsp;글</b><br /><ul><li><a href=\"https://kangmyounghun.blogspot.com/2025/03/logstash-ruby-7th.html\">Logstash 필터 ruby - 7th</a></li><li><span style=\"font-family: inherit;\"><a href=\"http://kangmyounghun.blogspot.kr/2017/10/logstash-ruby.html\" target=\"\">Logstash 필터 ruby</a></span></li><li><span style=\"font-family: inherit;\"><a href=\"http://kangmyounghun.blogspot.com/2017/06/elasticsearch-grok.html\" target=\"_blank\">Logstash 필터 grok</a></span></li><li><span style=\"font-family: inherit;\"><a href=\"http://kangmyounghun.blogspot.com/2017/07/logstash-mutate.html\" target=\"_blank\">Logstash 필터 mutate</a></span></li><li><span style=\"font-family: inherit;\"><a href=\"http://kangmyounghun.blogspot.kr/2018/02/logstash-geoip.html\" target=\"_blank\">Logstash 필터&nbsp;geoip</a></span></li><li><span style=\"font-family: inherit;\"><a href=\"http://kangmyounghun.blogspot.kr/2018/04/logstash-dissect.html\" target=\"_blank\">Logstash 필터 dissect</a></span></li><li><a href=\"http://kangmyounghun.blogspot.com/2018/09/logstash-kv.html\" target=\"_blank\">Logstash 필터&nbsp;kv</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2019/01/logstash-date.html\" target=\"_blank\">Logstash 필터 date</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2019/02/logstash-translate.html\" target=\"_blank\">Logstash 필터 translate</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2019/08/logstash-drop.html\" target=\"_blank\">Logstash 필터 drop</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2019/11/logstash-useragent.html\" target=\"_blank\">Logstash 필터 useragent</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2020/02/logstash-elapsed.html\" target=\"_blank\">Logstash 필터 elapsed</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2020/04/logstash-fingerprint.html\" target=\"_blank\">Logstash 필터 fingerprint</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2022/12/logstash-csv.html\" target=\"_blank\">Logstash 필터 csv</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/11/logstash-dns.html\">Logstash 필터 dns</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2025/01/logstash-split.html\">Logstash 필터 split</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2020/02/logstash-codec-multiline.html\" target=\"_blank\">Logstash codec 플러그인 multiline</a></li></ul></div>",
        "contentSnippet": "audit.log 연동.\n\nfilter {\n mutate {\n  remove_field => [\"@timestamp\", \"@version\", \"path\", \"host\"]\n }\n\n\n kv {}\n\n\n dissect {\n  mapping => {\"msg\" => \"%{}(%{timestamp}:%{}\"}\n }\n}\n\n\n\n\n{\n       \"family\" => \"10\",\n      \"message\" => \"type=NETFILTER_CFG msg=audit(1745768855.720:63): table=filter family=10 entries=0\\r\",\n         \"type\" => \"NETFILTER_CFG\",\n      \"entries\" => \"0\\r\",\n    \"timestamp\" => \"1745768855.720\",\n        \"table\" => \"filter\",\n          \"msg\" => \"audit(1745768855.720:63):\"\n}\n{\n          \"gid\" => \"0\",\n           \"a2\" => \"41a2d8\",\n           \"a0\" => \"1e2da20\",\n         \"ppid\" => \"1335\",\n          \"key\" => \"(null)\\r\",\n    \"timestamp\" => \"1745768855.720\",\n           \"a1\" => \"1d75\",\n        \"fsgid\" => \"0\",\n          \"tty\" => \"none\",\n      \"message\" => \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\\r\",\n        \"items\" => \"0\",\n         \"suid\" => \"0\",\n         \"auid\" => \"4294967295\",\n         \"sgid\" => \"0\",\n          \"pid\" => \"1336\",\n         \"egid\" => \"0\",\n          \"exe\" => \"/usr/bin/kmod\",\n          \"uid\" => \"0\",\n          \"ses\" => \"4294967295\",\n           \"a3\" => \"1e2a500\",\n         \"euid\" => \"0\",\n        \"fsuid\" => \"0\",\n         \"comm\" => \"modprobe\",\n         \"exit\" => \"0\",\n      \"success\" => \"yes\",\n          \"msg\" => \"audit(1745768855.720:63):\",\n         \"arch\" => \"c000003e\",\n         \"subj\" => \"system_u:system_r:insmod_t:s0\",\n      \"syscall\" => \"175\",\n         \"type\" => \"SYSCALL\"\n}\n\n\n\n\n그런데 시간 정보가 unixtime 포맷이다. stackoverflow 형님들이 가르쳐준대로 date 포맷으로 변경.\n\nfilter {\n mutate {\n  remove_field => [\"@timestamp\", \"@version\", \"path\", \"host\"]\n }\n\n\n kv {}\n\n\n dissect {\n  mapping => {\"msg\" => \"%{}(%{timestamp}:%{}\"}\n }\n\n\n ruby {\n  code => \"event.set('@timestamp', DateTime.strptime(event.get('timestamp'), '%s'))\"\n }\n}\n\n\n\n[2025-04-28T17:52:41,760][ERROR][logstash.filters.ruby    ][main][7cefa12dcafdc101f42a5bda6812294cab6405d0864ef044fe35a2cc66392ce4] \nRuby exception occurred: wrong argument type DateTime (expected LogStash::Timestamp)\n\n\n안 된다. 제미나이한테 물어봄.\n\n\n\n\n[2025-04-28T17:57:02,837][ERROR][logstash.filters.ruby    ][main][d35de4494869054b8277f75d5c334da579e561ff0060cc7554ec4beb7dd79661] \nRuby exception occurred: wrong argument type DateTime (expected Time)\n\n\n안 되잖아(..)\n\n\n\n\n아무래도 로그스태시 구문이 따로 있는 것 같은데 ruby 구문을 계속 그대로 사용하는 게 이상하다. gpt는 다를까?\n\n\n\n\nfilter {\n mutate {\n  remove_field => [\"@timestamp\", \"@version\", \"path\", \"host\"]\n }\n\n\n kv {}\n\n\n dissect {\n  mapping => {\"msg\" => \"%{}(%{timestamp}:%{}\"}\n }\n\n\n ruby {\n  code => \"event.set('@timestamp', LogStash::Timestamp.new(Time.at(event.get('timestamp').to_i)))\"\n }\n}\n\n\n\n\n{\n        \"family\" => \"10\",\n       \"message\" => \"type=NETFILTER_CFG msg=audit(1745768855.720:63): table=filter family=10 entries=0\\r\",\n          \"type\" => \"NETFILTER_CFG\",\n       \"entries\" => \"0\\r\",\n     \"timestamp\" => \"1745768855.720\",\n    \"@timestamp\" => 2025-04-27T15:47:35.000Z,\n         \"table\" => \"filter\",\n           \"msg\" => \"audit(1745768855.720:63):\"\n}\n{\n           \"gid\" => \"0\",\n            \"a2\" => \"41a2d8\",\n            \"a0\" => \"1e2da20\",\n          \"ppid\" => \"1335\",\n           \"key\" => \"(null)\\r\",\n     \"timestamp\" => \"1745768855.720\",\n            \"a1\" => \"1d75\",\n         \"fsgid\" => \"0\",\n           \"tty\" => \"none\",\n       \"message\" => \"type=SYSCALL msg=audit(1745768855.720:63): arch=c000003e syscall=175 success=yes exit=0 a0=1e2da20 a1=1d75 a2=41a2d8 a3=1e2a500 items=0 ppid=1335 pid=1336 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=\\\"modprobe\\\" exe=\\\"/usr/bin/kmod\\\" subj=system_u:system_r:insmod_t:s0 key=(null)\\r\",\n         \"items\" => \"0\",\n          \"suid\" => \"0\",\n          \"auid\" => \"4294967295\",\n          \"sgid\" => \"0\",\n           \"pid\" => \"1336\",\n          \"egid\" => \"0\",\n           \"exe\" => \"/usr/bin/kmod\",\n           \"uid\" => \"0\",\n           \"ses\" => \"4294967295\",\n            \"a3\" => \"1e2a500\",\n          \"euid\" => \"0\",\n         \"fsuid\" => \"0\",\n          \"comm\" => \"modprobe\",\n    \"@timestamp\" => 2025-04-27T15:47:35.000Z,\n          \"exit\" => \"0\",\n       \"success\" => \"yes\",\n           \"msg\" => \"audit(1745768855.720:63):\",\n          \"arch\" => \"c000003e\",\n          \"subj\" => \"system_u:system_r:insmod_t:s0\",\n       \"syscall\" => \"175\",\n          \"type\" => \"SYSCALL\"\n}\n\n\n\n\n아이고 구글(..)\n\n\n관련 글\n\nLogstash 필터 ruby - 7th\nLogstash 필터 ruby\nLogstash 필터 grok\nLogstash 필터 mutate\nLogstash 필터 geoip\nLogstash 필터 dissect\nLogstash 필터 kv\nLogstash 필터 date\nLogstash 필터 translate\nLogstash 필터 drop\nLogstash 필터 useragent\nLogstash 필터 elapsed\nLogstash 필터 fingerprint\nLogstash 필터 csv\nLogstash 필터 dns\nLogstash 필터 split\nLogstash codec 플러그인 multiline",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-3450014825867194011",
        "isoDate": "2025-04-28T09:02:00.002Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": [
      {
        "title": "Gradle Build Cache에 S3 활용하기",
        "link": "https://sungjk.github.io/2025/05/01/gradle-build-remote-cache.html",
        "pubDate": "2025-05-01T00:00:00+00:00",
        "content": "\n            \n            &lt;p&gt;팀에서 Kotlin, Spring Boot 기반의 수십개의 마이크로서비스를 모노레포에 운영하고 있습니다. 멀티 레포 프로젝트에 비해 방대한 맥락과 코드가 한 곳에 모여있다보니 작성한 코드를 빌드하는 과정에서 병목이 생기기도 합니다. 그리고 CI 머신의 리소스를 여러 서비스가 공유하고 있다면 빌드 시간이 길어지는건, 다른 서비스의 빌드 시간에도 영향을 주는 구조가 됩니다. 결국 이 문제는 &lt;em&gt;사용자에게 더 빠르게 가치를 제공해야 한다&lt;/em&gt;는 팀의 개발 철학과 멀어지는 결과를 야기한다.&lt;/p&gt;\n\n&lt;p&gt;이렇듯 빌드 속도가 제품 개발에 영향을 미치고 있다면, 간단한 설정만으로 빌드 결과물을 캐싱해놓고 재사용할 수 있는 Gradle Build Cache를 도입해보면 좋다. 이 플러그인은 Gradle Build Cache를 AWS S3에 저장해놓고 재사용함으로써 빌드 시간을 단축시킬 수 있게 도와줍니다. 적용 결과 적게는 2배, 많게는 10배 이상까지 빌드 시간이 단축되었습니다.&lt;/p&gt;\n\n&lt;p&gt;(CI를 Github Action에서 수행한다고 가정하고 작성하였습니다.)&lt;/p&gt;\n\n&lt;h3 id=&quot;awss3buildcache-적용하기&quot;&gt;AwsS3BuildCache 적용하기&lt;/h3&gt;\n\n&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;settings.gradle.kts&lt;/code&gt; 파일에 아래와 같이 Github Action에서 빌드 수행시 Remote(S3) 저장소로 빌드 결과물이 저장될 수 있도록 설정한다. Gradle Build Task 수행 단계에서 빌드 결과물을 자동으로 Local 또는 Remote로 저장할 수 있다.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.burrunan.s3-build-cache&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.9.0&quot;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행되었으면 &quot;true&quot;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;nf&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행된 경우가 아니면 Local Cache 사용&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// GITHUB ACTION 에서 수행되었으면 Remote Cache(S3) 사용&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;isPush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;Groovy를 사용중이라면 아래와 같이 적용하면 된다.&lt;/p&gt;\n\n&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.github.burrunan.s3-build-cache&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.9.0&quot;&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;\n        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;선택-gradle-build-cache-옵션-활성화하기&quot;&gt;(선택) Gradle Build Cache 옵션 활성화하기&lt;/h3&gt;\n\n&lt;p&gt;Gradle 6.0 이상부터는 빌드시 Cache가 기본적으로 활성화되어 있는데, 하위 버전을 사용하고 있다면 빌드 커맨드에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--build-cache&lt;/code&gt; 옵션을 추가해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build --build-cache&lt;/code&gt; 로 실행하면 된다.&lt;/p&gt;\n\n&lt;p&gt;아니면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; 파일에 아래 설정을 추가하면 Gradle의 캐시 사용을 명시적으로 표현할 수 있다.&lt;/p&gt;\n\n&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;org.gradle.caching=true\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;선택-로컬-환경에서-build-cache-활성화하기&quot;&gt;(선택) 로컬 환경에서 Build Cache 활성화하기&lt;/h3&gt;\n\n&lt;p&gt;만약 로컬 환경에서도 S3 Build Cache를 사용하고 싶다면, 관리와 비용 측면에서 Cache Push는 CI에서만 호도록 아래 설정처럼 사용하기를 권장합니다. 빈번한 캐시 업로드와 다운로드로 인해 S3 사용량 증가로 인해 트래픽과 과금에 영향을 줄 수 있습니다.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isGithubAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GITHUB_ACTIONS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;\n\n&lt;span class=&quot;nf&quot;&gt;buildCache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// CI는 로컬 캐시 비활성화&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isEnabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;burrunan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s3cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AwsS3BuildCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-region&quot;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;your-aws-s3-bucket&quot;&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gradle/build/$YourProjectName/&quot;&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 로컬은 pull-only, CI만 push 허용&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;isPush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isGithubAction&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;lookupDefaultAwsCredentials&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;https://github.com/burrunan/gradle-s3-build-cache&quot;&gt;burrunan/gradle-s3-build-cache&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure&quot;&gt;Configure the Build Cache&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables&quot;&gt;Store information in variables - GitHub Docs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n            \n          ",
        "contentSnippet": "<p>팀에서 Kotlin, Spring Boot 기반의 수십개의 마이크로서비스를 모노레포에 운영하고 있습니다. 멀티 레포 프로젝트에 비해 방대한 맥락과 코드가 한 곳에 모여있다보니 작성한 코드를 빌드하는 과정에서 병목이 생기기도 합니다. 그리고 CI 머신의 리소스를 여러 서비스가 공유하고 있다면 빌드 시간이 길어지는건, 다른 서비스의 빌드 시간에도 영향을 주는 구조가 됩니다. 결국 이 문제는 <em>사용자에게 더 빠르게 가치를 제공해야 한다</em>는 팀의 개발 철학과 멀어지는 결과를 야기한다.</p>\n\n<p>이렇듯 빌드 속도가 제품 개발에 영향을 미치고 있다면, 간단한 설정만으로 빌드 결과물을 캐싱해놓고 재사용할 수 있는 Gradle Build Cache를 도입해보면 좋다. 이 플러그인은 Gradle Build Cache를 AWS S3에 저장해놓고 재사용함으로써 빌드 시간을 단축시킬 수 있게 도와줍니다. 적용 결과 적게는 2배, 많게는 10배 이상까지 빌드 시간이 단축되었습니다.</p>\n\n<p>(CI를 Github Action에서 수행한다고 가정하고 작성하였습니다.)</p>\n\n<h3 id=\"awss3buildcache-적용하기\">AwsS3BuildCache 적용하기</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">settings.gradle.kts</code> 파일에 아래와 같이 Github Action에서 빌드 수행시 Remote(S3) 저장소로 빌드 결과물이 저장될 수 있도록 설정한다. Gradle Build Task 수행 단계에서 빌드 결과물을 자동으로 Local 또는 Remote로 저장할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">plugins</span> <span class=\"p\">{</span>\n    <span class=\"nf\">id</span><span class=\"p\">(</span><span class=\"s\">\"com.github.burrunan.s3-build-cache\"</span><span class=\"p\">)</span> <span class=\"n\">version</span> <span class=\"s\">\"1.9.0\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// GITHUB ACTION 에서 수행되었으면 \"true\"</span>\n<span class=\"c1\">// https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables</span>\n<span class=\"kd\">val</span> <span class=\"py\">isGithubAction</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"GITHUB_ACTIONS\"</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"s\">\"true\"</span>\n\n<span class=\"nf\">buildCache</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// GITHUB ACTION 에서 수행된 경우가 아니면 Local Cache 사용</span>\n    <span class=\"nf\">local</span> <span class=\"p\">{</span>\n        <span class=\"n\">isEnabled</span> <span class=\"p\">=</span> <span class=\"n\">isGithubAction</span><span class=\"p\">.</span><span class=\"nf\">not</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// GITHUB ACTION 에서 수행되었으면 Remote Cache(S3) 사용</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">isGithubAction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">remote</span><span class=\"p\">&lt;</span><span class=\"n\">com</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">burrunan</span><span class=\"p\">.</span><span class=\"n\">s3cache</span><span class=\"p\">.</span><span class=\"nc\">AwsS3BuildCache</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n            <span class=\"n\">region</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-region\"</span>\n            <span class=\"n\">bucket</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-s3-bucket\"</span>\n            <span class=\"n\">prefix</span> <span class=\"p\">=</span> <span class=\"s\">\"gradle/build/$YourProjectName/\"</span>\n            <span class=\"n\">isPush</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n            <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Groovy를 사용중이라면 아래와 같이 적용하면 된다.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n    <span class=\"n\">id</span> <span class=\"s2\">\"com.github.burrunan.s3-build-cache\"</span> <span class=\"n\">version</span> <span class=\"s2\">\"1.9.0\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"kt\">def</span> <span class=\"n\">isGithubAction</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">getenv</span><span class=\"o\">(</span><span class=\"s2\">\"GITHUB_ACTIONS\"</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"n\">buildCache</span> <span class=\"o\">{</span>\n    <span class=\"n\">local</span> <span class=\"o\">{</span>\n        <span class=\"n\">enabled</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">isGithubAction</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isGithubAction</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">remote</span><span class=\"o\">(</span><span class=\"n\">com</span><span class=\"o\">.</span><span class=\"na\">github</span><span class=\"o\">.</span><span class=\"na\">burrunan</span><span class=\"o\">.</span><span class=\"na\">s3cache</span><span class=\"o\">.</span><span class=\"na\">AwsS3BuildCache</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"s2\">\"your-aws-region\"</span>\n            <span class=\"n\">bucket</span> <span class=\"o\">=</span> <span class=\"s2\">\"your-aws-s3-bucket\"</span>\n            <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"s2\">\"gradle/build/$YourProjectName/\"</span>\n            <span class=\"n\">push</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n            <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"선택-gradle-build-cache-옵션-활성화하기\">(선택) Gradle Build Cache 옵션 활성화하기</h3>\n\n<p>Gradle 6.0 이상부터는 빌드시 Cache가 기본적으로 활성화되어 있는데, 하위 버전을 사용하고 있다면 빌드 커맨드에 <code class=\"language-plaintext highlighter-rouge\">--build-cache</code> 옵션을 추가해서 <code class=\"language-plaintext highlighter-rouge\">./gradlew build --build-cache</code> 로 실행하면 된다.</p>\n\n<p>아니면 <code class=\"language-plaintext highlighter-rouge\">gradle.properties</code> 파일에 아래 설정을 추가하면 Gradle의 캐시 사용을 명시적으로 표현할 수 있다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>org.gradle.caching=true\n</code></pre></div></div>\n\n<h3 id=\"선택-로컬-환경에서-build-cache-활성화하기\">(선택) 로컬 환경에서 Build Cache 활성화하기</h3>\n\n<p>만약 로컬 환경에서도 S3 Build Cache를 사용하고 싶다면, 관리와 비용 측면에서 Cache Push는 CI에서만 호도록 아래 설정처럼 사용하기를 권장합니다. 빈번한 캐시 업로드와 다운로드로 인해 S3 사용량 증가로 인해 트래픽과 과금에 영향을 줄 수 있습니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">val</span> <span class=\"py\">isGithubAction</span> <span class=\"p\">=</span> <span class=\"nc\">System</span><span class=\"p\">.</span><span class=\"nf\">getenv</span><span class=\"p\">(</span><span class=\"s\">\"GITHUB_ACTIONS\"</span><span class=\"p\">)</span> <span class=\"p\">==</span> <span class=\"s\">\"true\"</span>\n\n<span class=\"nf\">buildCache</span> <span class=\"p\">{</span>\n    <span class=\"nf\">local</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// CI는 로컬 캐시 비활성화</span>\n        <span class=\"n\">isEnabled</span> <span class=\"p\">=</span> <span class=\"p\">!</span><span class=\"n\">isGithubAction</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">remote</span><span class=\"p\">&lt;</span><span class=\"n\">com</span><span class=\"p\">.</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">burrunan</span><span class=\"p\">.</span><span class=\"n\">s3cache</span><span class=\"p\">.</span><span class=\"nc\">AwsS3BuildCache</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"n\">region</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-region\"</span>\n        <span class=\"n\">bucket</span> <span class=\"p\">=</span> <span class=\"s\">\"your-aws-s3-bucket\"</span>\n        <span class=\"n\">prefix</span> <span class=\"p\">=</span> <span class=\"s\">\"gradle/build/$YourProjectName/\"</span>\n        <span class=\"c1\">// 로컬은 pull-only, CI만 push 허용</span>\n        <span class=\"n\">isPush</span> <span class=\"p\">=</span> <span class=\"n\">isGithubAction</span>\n        <span class=\"n\">lookupDefaultAwsCredentials</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n  <li><a href=\"https://github.com/burrunan/gradle-s3-build-cache\">burrunan/gradle-s3-build-cache</a></li>\n  <li><a href=\"https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure\">Configure the Build Cache</a></li>\n  <li><a href=\"https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables\">Store information in variables - GitHub Docs</a></li>\n</ul>",
        "guid": "https://sungjk.github.io/2025/05/01/gradle-build-remote-cache.html",
        "isoDate": "2025-05-01T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Lael's World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "Suno v4.5 주요 업데이트 소개, 프로급 음악 제작이 더 쉬워졌다!",
        "link": "http://muzbox.tistory.com/483577",
        "pubDate": "Fri, 2 May 2025 09:43:15 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483577#entry483577comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;음악 창작의 새 역사를 쓰는 Suno v4.5가 드디어 공개됐어요! 더 풍부한 장르, 감성적인 보컬, 복잡한 사운드까지... 여러분의 음악적 상상력이 현실이 되는 마법 같은 경험을 함께 해볼까요?</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1280\" data-origin-height=\"853\"><span data-url=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\" data-phocus=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\"><img src=\"https://blog.kakaocdn.net/dn/ojiOZ/btsNIP98I8X/otAALfFFw6QxLJEU3W7TU0/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FojiOZ%2FbtsNIP98I8X%2FotAALfFFw6QxLJEU3W7TU0%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"Suno v4.5 주요 업데이트 소개\" loading=\"lazy\" width=\"1280\" height=\"853\" data-origin-width=\"1280\" data-origin-height=\"853\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">여러분, 혹시 머릿속에서 맴도는 멜로디가 있으신가요? 어떤 특별한 순간에 떠오르는 그 음악, 그냥 흘려보내기 아쉽지 않으셨어요? 저도 그랬어요. 음악을 전공하지 않았지만 항상 제 감정을 표현할 수 있는 노래를 만들고 싶었거든요.</p>\n<p data-ke-size=\"size16\">솔직히 말해서, 음악 제작은 전문가들의 영역이라고만 생각했어요. 작곡, 편곡, 믹싱... 이런 단어들만 들어도 진입장벽이 느껴지잖아요. 그런데 Suno의 새로운 v4.5 모델을 경험하고 나서 제 생각이 완전히 바뀌었어요. 진짜로요!  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>Suno v4.5, 무엇이 달라졌을까? ✨</b></span></h2>\n<p data-ke-size=\"size16\">Suno v4.5는 이전 버전에서 한 단계 더 진화했어요. 제가 직접 사용해본 결과, 몇 가지 놀라운 변화를 발견했답니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">확장된 장르와 장르 믹스업  </span></h3>\n<p data-ke-size=\"size16\">장르 옵션이 크게 확장되었고, v4.5는 이전보다 장르를 더 정확하게 따라갑니다. 예전에는 'EDM'이라고 하면 뭔가 비슷비슷한 느낌이었는데, 이제는 확실히 다양한 EDM 하위 장르의 특징을 잘 살려주더라고요.</p>\n<p data-ke-size=\"size16\">제가 한번 \"펑크 록\"과 \"재즈 하우스\"를 입력했는데, 와... 진짜 그 장르의 특성이 잘 살아있었어요! 심지어 \"그레고리안 성가\"까지 도전해봤는데, 마치 중세 수도원에 있는 것 같은 경험이었죠.</p>\n<p data-ke-size=\"size16\">더 신기한 건 장르 조합도 훨씬 잘 작동한다는 거예요. 미드웨스트 이모와 네오소울을 섞거나 EDM과 포크를 조합하면 더 일관되고 창의적인 음악이 만들어집니다. 전에는 뭔가 어색했던 결합들이 이제는 마치 원래부터 존재했던 장르처럼 자연스럽게 들려요.</p>\n<blockquote data-ke-style=\"style3\">Start&nbsp;with&nbsp;Rap&nbsp;,&nbsp;transition&nbsp;to&nbsp;R&amp;B&nbsp;Vocals&nbsp;&nbsp;&nbsp;for&nbsp;the&nbsp;hook,&nbsp;then&nbsp;switch&nbsp;the&nbsp;beat&nbsp;to&nbsp;a&nbsp;Stereo&nbsp;Bounce&nbsp;and&nbsp;finally&nbsp;into&nbsp;a&nbsp;Soul&nbsp;Sample<br /><br />랩으로&nbsp;시작하여&nbsp;후크를&nbsp;위해&nbsp;R&amp;B&nbsp;보컬로&nbsp;전환한&nbsp;다음&nbsp;비트를&nbsp;스테레오&nbsp;바운스로&nbsp;전환하고&nbsp;마지막으로&nbsp;소울&nbsp;샘플로&nbsp;전환합니다.</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">향상된 보컬 퀄리티  </span></h3>\n<p data-ke-size=\"size16\">보컬은 이제 더 넓은 음역대와 감정적 깊이를 갖추게 되었습니다. 섬세하고 친밀한 퍼포먼스부터 비브라토가 있는 강력한 전달력까지 모든 것을 만들 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">실제로 감정을 담은 가사를 작성하고 그에 맞는 보컬 스타일을 지정하니, 마치 진짜 가수가 부른 것처럼 느껴졌어요. 예전에는 뭔가 기계적인 느낌이 살짝 있었는데, 이제는 진짜 사람이 감정을 담아 부르는 것 같아요. 저는 개인적으로 이 부분이 가장 마음에 들었답니다!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 복잡한 사운드 구현  </span></h3>\n<p data-ke-size=\"size16\">v4.5는 자연스러운 톤 변화부터 악기 레이어링, 섬세한 사운드 디테일까지 깊이를 더하는 미묘한 음악적 요소를 포착합니다. 예전에는 기본적인 느낌만 전달됐다면, 이제는 섬세한 뉘앙스까지 표현돼요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">\"기분 좋은 노스텔직한 톤\", \"나뭇잎 질감\", \"멜로딕한 휘파람\" 같은 설명이 이제 직접 음악에 반영될 수 있습니다. 제가 \"숲속에서 들리는 새소리와 함께 잔잔한 피아노 멜로디\"라고 입력했더니, 정말 그 분위기가 생생하게 담긴 음악이 만들어졌어요. 마치 제 상상력이 그대로 음악이 된 느낌이었달까요?</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"suno4.5.jpg\" data-origin-width=\"1093\" data-origin-height=\"609\"><span data-url=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bqGIS0/btsNHuzarV6/gqkvOlKf7LmKFP8e53sIaK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbqGIS0%2FbtsNHuzarV6%2FgqkvOlKf7LmKFP8e53sIaK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"SUNO 4.5\" loading=\"lazy\" width=\"1093\" height=\"609\" data-filename=\"suno4.5.jpg\" data-origin-width=\"1093\" data-origin-height=\"609\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>더 똑똑해진 Suno, 더 직관적인 경험  </b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 스마트한 프롬프트 해석 능력</span></h3>\n<p data-ke-size=\"size16\">v4.5는 여러분의 설명을 더 잘 이해하고 번역합니다. 여러분이 지정한 세부 사항, 분위기, 악기를 더 잘 포착합니다. 이제 감정적 뉘앙스와 기술적 음악 요소 모두 노래에 더 잘 반영됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">전에는 \"슬프면서도 희망적인 느낌\"이라고 하면 뭔가 어중간한 결과물이 나왔는데, 이제는 진짜 슬픔에서 시작해 점점 희망적인 분위기로 변해가는 섬세한 감정 전환까지 표현해내요. 진짜 사람이 작곡한 것 같은 느낌이랄까요?</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">프롬프트 향상 도우미</span></h3>\n<p data-ke-size=\"size16\">v4.5의 새로운 복잡성을 최대한 활용하기 위해 프롬프트 향상 도우미를 활용해보세요. 여러분의 장르 아이디어가 그대로 사용하거나 원하는 대로 수정할 수 있는 풍부하고 상세한 스타일 설명으로 발전하는 것을 볼 수 있습니다.</p>\n<p data-ke-size=\"size16\">이건 정말 유용한 기능이에요! 제가 \"힙합\"이라고만 입력했을 때, 프롬프트 향상 도우미는 \"90년대 붐뱁 비트와 재즈 샘플이 결합된 올드스쿨 힙합, 유려한 래핑과 소울풀한 후렴구\" 같은 상세한 설명으로 확장해주더라고요. 덕분에 더 정확한 음악을 만들 수 있었답니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>더 다양한 창작 기능들, 한계는 없다!  </b></span></h2>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">업그레이드된 커버와 페르소나</span></h3>\n<p data-ke-size=\"size16\">커버와 페르소나가 큰 향상을 받았습니다. 커버곡을 만들면 더 많은 멜로디 디테일을 유지해야 합니다. 장르 전환도 개선되었습니다&mdash;좋아하는 록 음악을 하우스 리믹스로 바꾸어 변화를 들어보세요.</p>\n<p data-ke-size=\"size16\">제가 좋아하는 팝송을 재즈 버전으로 커버해봤는데, 원곡의 멜로디는 그대로 유지하면서도 완전히 다른 분위기로 재탄생했어요. 이전에는 원곡의 느낌이 많이 사라졌었는데, 이제는 \"아, 이 노래구나!\" 하고 바로 알아차릴 수 있더라고요.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">커버와 페르소나의 결합</span></h3>\n<p data-ke-size=\"size16\">커버와 페르소나를 함께 사용하여 목소리, 스타일, 구조를 한 번에 리믹스하세요. 함께 사용하면 무한한 창의적 가능성을 열어줍니다.</p>\n<p data-ke-size=\"size16\">이건 정말 혁명적인 기능이에요! 제 취향의 아티스트 목소리로 좋아하는 노래를 부르게 하고, 동시에 장르까지 바꿀 수 있다니... 상상만 해도 설레지 않나요? 저는 팝송을 메탈 버전으로 바꾸고 완전 다른 보컬로 커버해봤는데, 그 결과물이 너무 신선했어요!</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">더 빠른 생성 속도와 긴 곡 길이</span></h3>\n<p data-ke-size=\"size16\">생성 속도가 크게 향상되어 실험하고 개선할 시간이 더 많아졌습니다. 이제 기다리는 시간이 훨씬 줄어들어서 창작 과정이 중단되지 않고 아이디어가 떠오르는 대로 바로바로 시도해볼 수 있어요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그리고 이제 최대 8분 길이의 노래를 만들 수 있으며, 긴 구성에서도 처음부터 끝까지 품질과 일관성을 유지할 수 있습니다. 전에는 긴 곡을 만들면 후반부로 갈수록 퀄리티가 떨어지는 경우가 있었는데, 이제는 8분짜리 대곡도 처음부터 끝까지 완성도 있게 만들 수 있어요!</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">개선된 오디오 품질</span></h3>\n<p data-ke-size=\"size16\">v4.5는 더 균형 잡히고 풍부한 믹스를 제공하며, 오디오 열화와 시머 효과를 모두 감소시킵니다. 더 긴 구성에서도 처음부터 끝까지 일관된 사운드 품질을 유지합니다.</p>\n<p data-ke-size=\"size16\">이전 버전에서는 가끔 사운드가 울리거나 지직거리는 현상이 있었는데, v4.5에서는 이런 문제가 확실히 개선되었어요. 마치 프로 스튜디오에서 녹음한 것처럼 깔끔한 사운드를 경험할 수 있었답니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1360\" data-origin-height=\"768\"><span data-url=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/GVxPW/btsNIAZF0cP/zOewIEBpO3bI6mSElYQBi1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FGVxPW%2FbtsNIAZF0cP%2FzOewIEBpO3bI6mSElYQBi1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"SUNO 4.5 업데이트 요약\" loading=\"lazy\" width=\"1360\" height=\"768\" data-origin-width=\"1360\" data-origin-height=\"768\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>나만의 음악 세계를 열어보세요  </b></span></h2>\n<p data-ke-size=\"size16\">음악 창작은 더 이상 전문가들만의 영역이 아니에요. Suno v4.5와 함께라면 누구나 자신만의 음악적 상상력을 현실로 만들 수 있어요. 복잡한 장비나 전문 지식 없이도, 그저 여러분의 아이디어를 글로 표현하는 것만으로 멋진 음악이 탄생합니다.</p>\n<p data-ke-size=\"size16\">저는 Suno v4.5를 써보고 정말 놀랐어요. 제 머릿속에서만 울리던 그 멜로디, 제가 느끼던 그 감정들이 실제 음악으로 표현된다는 게 얼마나 신기한지 몰라요. 지금 당장 여러분도 <a href=\"https://suno.com/create\">Suno에서 v4.5 노래를 만들어보세요</a>. 더 많은 기능들이 곧 출시될 예정이니 귀 기울여 주세요!</p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>FAQ</b></span></h2>\n<p data-ke-size=\"size16\"><b>Q: Suno v4.5는 무료인가요?</b></p>\n<p data-ke-size=\"size16\">A: 기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro &amp; Premier 구독 옵션이 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 음악 전문가가 아니어도 사용할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 만든 음악의 저작권은 누구에게 있나요?</b></p>\n<p data-ke-size=\"size16\">A: Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.</p>\n<p data-ke-size=\"size16\"><b>Q: 몇 분 길이의 음악까지 만들 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 외국어 노래도 만들 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.</p>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"Suno v4.5는 무료인가요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"음악 전문가가 아니어도 사용할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"만든 음악의 저작권은 누구에게 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"몇 분 길이의 음악까지 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"외국어 노래도 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\"\n    }\n  }]\n}\n</script>",
        "contentSnippet": "음악 창작의 새 역사를 쓰는 Suno v4.5가 드디어 공개됐어요! 더 풍부한 장르, 감성적인 보컬, 복잡한 사운드까지... 여러분의 음악적 상상력이 현실이 되는 마법 같은 경험을 함께 해볼까요?\n\n\n \n여러분, 혹시 머릿속에서 맴도는 멜로디가 있으신가요? 어떤 특별한 순간에 떠오르는 그 음악, 그냥 흘려보내기 아쉽지 않으셨어요? 저도 그랬어요. 음악을 전공하지 않았지만 항상 제 감정을 표현할 수 있는 노래를 만들고 싶었거든요.\n솔직히 말해서, 음악 제작은 전문가들의 영역이라고만 생각했어요. 작곡, 편곡, 믹싱... 이런 단어들만 들어도 진입장벽이 느껴지잖아요. 그런데 Suno의 새로운 v4.5 모델을 경험하고 나서 제 생각이 완전히 바뀌었어요. 진짜로요!  \n \nSuno v4.5, 무엇이 달라졌을까? ✨\nSuno v4.5는 이전 버전에서 한 단계 더 진화했어요. 제가 직접 사용해본 결과, 몇 가지 놀라운 변화를 발견했답니다.\n확장된 장르와 장르 믹스업  \n장르 옵션이 크게 확장되었고, v4.5는 이전보다 장르를 더 정확하게 따라갑니다. 예전에는 'EDM'이라고 하면 뭔가 비슷비슷한 느낌이었는데, 이제는 확실히 다양한 EDM 하위 장르의 특징을 잘 살려주더라고요.\n제가 한번 \"펑크 록\"과 \"재즈 하우스\"를 입력했는데, 와... 진짜 그 장르의 특성이 잘 살아있었어요! 심지어 \"그레고리안 성가\"까지 도전해봤는데, 마치 중세 수도원에 있는 것 같은 경험이었죠.\n더 신기한 건 장르 조합도 훨씬 잘 작동한다는 거예요. 미드웨스트 이모와 네오소울을 섞거나 EDM과 포크를 조합하면 더 일관되고 창의적인 음악이 만들어집니다. 전에는 뭔가 어색했던 결합들이 이제는 마치 원래부터 존재했던 장르처럼 자연스럽게 들려요.\nStart with Rap , transition to R&B Vocals   for the hook, then switch the beat to a Stereo Bounce and finally into a Soul Sample\n랩으로 시작하여 후크를 위해 R&B 보컬로 전환한 다음 비트를 스테레오 바운스로 전환하고 마지막으로 소울 샘플로 전환합니다.\n \n향상된 보컬 퀄리티  \n보컬은 이제 더 넓은 음역대와 감정적 깊이를 갖추게 되었습니다. 섬세하고 친밀한 퍼포먼스부터 비브라토가 있는 강력한 전달력까지 모든 것을 만들 수 있습니다.\n \n실제로 감정을 담은 가사를 작성하고 그에 맞는 보컬 스타일을 지정하니, 마치 진짜 가수가 부른 것처럼 느껴졌어요. 예전에는 뭔가 기계적인 느낌이 살짝 있었는데, 이제는 진짜 사람이 감정을 담아 부르는 것 같아요. 저는 개인적으로 이 부분이 가장 마음에 들었답니다!\n \n더 복잡한 사운드 구현  \nv4.5는 자연스러운 톤 변화부터 악기 레이어링, 섬세한 사운드 디테일까지 깊이를 더하는 미묘한 음악적 요소를 포착합니다. 예전에는 기본적인 느낌만 전달됐다면, 이제는 섬세한 뉘앙스까지 표현돼요.\n \n\"기분 좋은 노스텔직한 톤\", \"나뭇잎 질감\", \"멜로딕한 휘파람\" 같은 설명이 이제 직접 음악에 반영될 수 있습니다. 제가 \"숲속에서 들리는 새소리와 함께 잔잔한 피아노 멜로디\"라고 입력했더니, 정말 그 분위기가 생생하게 담긴 음악이 만들어졌어요. 마치 제 상상력이 그대로 음악이 된 느낌이었달까요?\n\n\n \n더 똑똑해진 Suno, 더 직관적인 경험  \n더 스마트한 프롬프트 해석 능력\nv4.5는 여러분의 설명을 더 잘 이해하고 번역합니다. 여러분이 지정한 세부 사항, 분위기, 악기를 더 잘 포착합니다. 이제 감정적 뉘앙스와 기술적 음악 요소 모두 노래에 더 잘 반영됩니다.\n \n전에는 \"슬프면서도 희망적인 느낌\"이라고 하면 뭔가 어중간한 결과물이 나왔는데, 이제는 진짜 슬픔에서 시작해 점점 희망적인 분위기로 변해가는 섬세한 감정 전환까지 표현해내요. 진짜 사람이 작곡한 것 같은 느낌이랄까요?\n프롬프트 향상 도우미\nv4.5의 새로운 복잡성을 최대한 활용하기 위해 프롬프트 향상 도우미를 활용해보세요. 여러분의 장르 아이디어가 그대로 사용하거나 원하는 대로 수정할 수 있는 풍부하고 상세한 스타일 설명으로 발전하는 것을 볼 수 있습니다.\n이건 정말 유용한 기능이에요! 제가 \"힙합\"이라고만 입력했을 때, 프롬프트 향상 도우미는 \"90년대 붐뱁 비트와 재즈 샘플이 결합된 올드스쿨 힙합, 유려한 래핑과 소울풀한 후렴구\" 같은 상세한 설명으로 확장해주더라고요. 덕분에 더 정확한 음악을 만들 수 있었답니다.\n \n더 다양한 창작 기능들, 한계는 없다!  \n업그레이드된 커버와 페르소나\n커버와 페르소나가 큰 향상을 받았습니다. 커버곡을 만들면 더 많은 멜로디 디테일을 유지해야 합니다. 장르 전환도 개선되었습니다—좋아하는 록 음악을 하우스 리믹스로 바꾸어 변화를 들어보세요.\n제가 좋아하는 팝송을 재즈 버전으로 커버해봤는데, 원곡의 멜로디는 그대로 유지하면서도 완전히 다른 분위기로 재탄생했어요. 이전에는 원곡의 느낌이 많이 사라졌었는데, 이제는 \"아, 이 노래구나!\" 하고 바로 알아차릴 수 있더라고요.\n커버와 페르소나의 결합\n커버와 페르소나를 함께 사용하여 목소리, 스타일, 구조를 한 번에 리믹스하세요. 함께 사용하면 무한한 창의적 가능성을 열어줍니다.\n이건 정말 혁명적인 기능이에요! 제 취향의 아티스트 목소리로 좋아하는 노래를 부르게 하고, 동시에 장르까지 바꿀 수 있다니... 상상만 해도 설레지 않나요? 저는 팝송을 메탈 버전으로 바꾸고 완전 다른 보컬로 커버해봤는데, 그 결과물이 너무 신선했어요!\n더 빠른 생성 속도와 긴 곡 길이\n생성 속도가 크게 향상되어 실험하고 개선할 시간이 더 많아졌습니다. 이제 기다리는 시간이 훨씬 줄어들어서 창작 과정이 중단되지 않고 아이디어가 떠오르는 대로 바로바로 시도해볼 수 있어요.\n \n그리고 이제 최대 8분 길이의 노래를 만들 수 있으며, 긴 구성에서도 처음부터 끝까지 품질과 일관성을 유지할 수 있습니다. 전에는 긴 곡을 만들면 후반부로 갈수록 퀄리티가 떨어지는 경우가 있었는데, 이제는 8분짜리 대곡도 처음부터 끝까지 완성도 있게 만들 수 있어요!\n개선된 오디오 품질\nv4.5는 더 균형 잡히고 풍부한 믹스를 제공하며, 오디오 열화와 시머 효과를 모두 감소시킵니다. 더 긴 구성에서도 처음부터 끝까지 일관된 사운드 품질을 유지합니다.\n이전 버전에서는 가끔 사운드가 울리거나 지직거리는 현상이 있었는데, v4.5에서는 이런 문제가 확실히 개선되었어요. 마치 프로 스튜디오에서 녹음한 것처럼 깔끔한 사운드를 경험할 수 있었답니다.\n \n\n\n나만의 음악 세계를 열어보세요  \n음악 창작은 더 이상 전문가들만의 영역이 아니에요. Suno v4.5와 함께라면 누구나 자신만의 음악적 상상력을 현실로 만들 수 있어요. 복잡한 장비나 전문 지식 없이도, 그저 여러분의 아이디어를 글로 표현하는 것만으로 멋진 음악이 탄생합니다.\n저는 Suno v4.5를 써보고 정말 놀랐어요. 제 머릿속에서만 울리던 그 멜로디, 제가 느끼던 그 감정들이 실제 음악으로 표현된다는 게 얼마나 신기한지 몰라요. 지금 당장 여러분도 Suno에서 v4.5 노래를 만들어보세요. 더 많은 기능들이 곧 출시될 예정이니 귀 기울여 주세요!\nFAQ\nQ: Suno v4.5는 무료인가요?\nA: 기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\nQ: 음악 전문가가 아니어도 사용할 수 있나요?\nA: 네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\nQ: 만든 음악의 저작권은 누구에게 있나요?\nA: Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\nQ: 몇 분 길이의 음악까지 만들 수 있나요?\nA: v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\nQ: 외국어 노래도 만들 수 있나요?\nA: 네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [{\n    \"@type\": \"Question\",\n    \"name\": \"Suno v4.5는 무료인가요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"기본 기능은 무료로 사용 가능하지만, 프리미엄 기능을 위한 Pro & Premier 구독 옵션이 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"음악 전문가가 아니어도 사용할 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네! 음악적 배경 없이도 직관적으로 사용 가능합니다. 원하는 분위기나 장르를 설명하기만 하면 됩니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"만든 음악의 저작권은 누구에게 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"Suno로 만든 음악은 비상업적 용도로 자유롭게 사용 가능합니다. 상업적 이용에 관해서는 Suno의 라이선스 정책을 확인하세요.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"몇 분 길이의 음악까지 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"v4.5에서는 최대 8분 길이의 곡을 만들 수 있습니다.\"\n    }\n  }, {\n    \"@type\": \"Question\",\n    \"name\": \"외국어 노래도 만들 수 있나요?\",\n    \"acceptedAnswer\": {\n      \"@type\": \"Answer\",\n      \"text\": \"네, 다양한 언어로 가사를 입력하면 해당 언어로 노래를 만들 수 있습니다.\"\n    }\n  }]\n}",
        "guid": "http://muzbox.tistory.com/483577",
        "categories": [
          "AI, 미래기술/AI 비디오 및 멀티미디어",
          "ai 음악 생성",
          "suno v4.5",
          "보컬 향상",
          "음악 창작 도구",
          "음악 커버",
          "음악 테크놀로지",
          "음악 페르소나",
          "음악 프롬프트",
          "인공지능 작곡",
          "장르 믹스업"
        ],
        "isoDate": "2025-05-02T00:43:15.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "GPT 4o로 완벽한 한글 유튜브 썸네일 만들기, 무료 GPTS 공개",
        "link": "http://muzbox.tistory.com/483576",
        "pubDate": "Mon, 28 Apr 2025 07:06:01 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483576#entry483576comment",
        "content": "<p data-ke-size=\"size16\">드디어 한글로 깔끔한 유튜브 썸네일을 만들 수 있게 됐어요! GPT 4o의 한글 렌더링 기능으로 더 이상 깨진 한글 썸네일과 작별할 시간. 썸네일 제작의 새로운 시대가 열렸습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"GPT 4o로 썸네일만들기.png\" data-origin-width=\"1530\" data-origin-height=\"1020\"><span data-url=\"https://blog.kakaocdn.net/dn/mYFCs/btsNAYUYu4U/Lz7xqEjmlhJy1kjYke8VE1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/mYFCs/btsNAYUYu4U/Lz7xqEjmlhJy1kjYke8VE1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/mYFCs/btsNAYUYu4U/Lz7xqEjmlhJy1kjYke8VE1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FmYFCs%2FbtsNAYUYu4U%2FLz7xqEjmlhJy1kjYke8VE1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1530\" height=\"1020\" data-filename=\"GPT 4o로 썸네일만들기.png\" data-origin-width=\"1530\" data-origin-height=\"1020\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">안녕하세요! 오늘은 정말 기대하고 있던 소식을 들고 왔어요. 여러분, GPT 4o 이미지 생성 기능으로 드디어 깔끔한 한글 렌더링이 가능한 유튜브 썸네일을 만들 수 있게 됐다는 소식!  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">여러분도 유튜브 콘텐츠 만들면서 썸네일 때문에 고생 좀 하셨죠? 특히 기존의 DALL-E에서는 한글이 제대로 나오지 않아서 포토샵이나 별도 디자인 툴을 써야 했던 불편함이 있었잖아요. 저도 처음에 유튜브 시작했을 때 썸네일 만드는 데만 몇 시간씩 쏟아부었던 기억이 나네요.  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>GPT 4o로 바뀐 썸네일 생성, 뭐가 달라졌을까?  </b></span></h2>\n<p data-ke-size=\"size16\">GPT 4o 모델은 텍스트 생성 능력만 뛰어난 게 아니라, 이미지 생성 분야에서도 혁신적인 변화를 가져왔어요. 제가 직접 써보니까 가장 눈에 띄는 차이점은 바로 <b>완벽한 한글 가독성</b>이에요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이전에는 한글을 넣으면 대부분 깨지거나 이상한 글자로 나오곤 했는데, 이제는 마치 전문 디자이너가 만든 것처럼 깔끔하게 한글이 렌더링됩니다. 특히 썸네일에서 가장 중요한 텍스트 부분이 제대로 표현된다는 건 정말 혁명적인 변화죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">제가 어제 테스트해 봤는데, \"2025년 최신 아이폰 비교 리뷰\"라는 제목의 썸네일을 만들었을 때 정말 깔끔하게 텍스트가 들어갔어요. 폰트도 테크 리뷰에 어울리는 걸로 자동 선택해 주더라고요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>롱폼? 숏폼? 상황에 맞는 비율 선택  </b></span></h2>\n<p data-ke-size=\"size16\">요즘은 유튜브도 다양한 형태의 콘텐츠가 있잖아요. 일반 영상용 썸네일이 필요할 수도 있고, 쇼츠용 세로형 썸네일이 필요할 수도 있죠. 이 GPTS는 정말 친절하게도 처음부터 \"롱폼(가로비율, 16:9)이 필요하신가요, 아니면 숏폼(세로비율, 9:16)이 필요하신가요?\"라고 물어봐요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">제가 숏폼을 많이 올리는 편인데, 이전에는 세로형 썸네일 만들기가 정말 까다로웠거든요. 하지만 이제는 비율 선택만 해주면 알아서 최적화된 이미지를 만들어주니 얼마나 편한지 몰라요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>장르별 최적화 기능은 진짜 똑똑해요  </b></span></h2>\n<p data-ke-size=\"size16\">여러분, 이 썸네일 생성기가 얼마나 똑똑한지 알아요? 그냥 \"게임 리뷰 썸네일 만들어줘\"라고 하면 게임 콘텐츠에 맞는 요소들을 자동으로 넣어준다니까요! 예를 들어 게임 콘텐츠면 극적인 게임 장면이나 캐릭터 액션을 강조해 주고, 요리 콘텐츠라면 음식의 맛있어 보이는 표현과 김이나 증기 같은 동적 효과를 넣어준다고 해요.</p>\n<p data-ke-size=\"size16\">제가 지난주에 요리 채널 운영하는 친구를 위해 \"초간단 부대찌개 레시피\" 썸네일을 만들어줬는데, 정말 맛있어 보이는 부대찌개 이미지에 김이 모락모락 나는 효과까지 넣어줬어요. 친구가 그 썸네일 사용한 영상의 조회수가 평소보다 30% 이상 올랐다고 하더라고요!  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>시각적 임팩트를 높이는 디자인 요소들 ✨</b></span></h2>\n<p data-ke-size=\"size16\">썸네일의 성공 비결은 결국 '클릭을 유도하는 시각적 임팩트'에 있잖아요. 이 GPTS는 디자인 측면에서도 정말 세심하게 신경 썼더라고요:</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>고해상도 실사 이미지를 기본으로 사용</li>\n<li>강렬한 색상 대비와 높은 채도로 눈길 끌기</li>\n<li>텍스트는 이미지 전체 면적의 40%를 차지하도록 설계</li>\n<li>텍스트 뒷면에 30% 투명도의 배경 박스나 음영 처리로 가독성 확보</li>\n</ul>\n<p data-ke-size=\"size16\">특히 주목할 만한 점은 텍스트 배치인데요, 화면의 중앙이나 전략적 삼등분 위치를 활용해서 정말 프로페셔널한 느낌이 나요. 예전에 제가 직접 만들던 썸네일은 왜 그렇게 아마추어 같았는지 이제 알겠어요...  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>이런 상황에서 특히 유용해요  </b></span></h2>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>개인 유튜버</b>라면: 디자인 툴 따로 배울 시간 없이 빠르게 퀄리티 있는 썸네일 제작 가능</li>\n<li><b>기업 마케팅 담당자</b>라면: 일관된 브랜드 이미지를 유지하면서도 다양한 썸네일 빠르게 생성</li>\n<li><b>교육 콘텐츠 제작자</b>라면: 학습 주제와 목표를 명확히 전달하는 전문적인 썸네일 손쉽게 제작</li>\n<li><b>게임 스트리머</b>라면: 게임의 하이라이트 장면을 강조한 매력적인 썸네일로 시청자 유입 증가</li>\n</ol>\n<p data-ke-size=\"size16\">솔직히 말해서, 유튜브 썸네일은 영상 못지않게 중요하잖아요. 아무리 좋은 콘텐츠라도 썸네일이 매력적이지 않으면 클릭률이 떨어지니까요. 그래서 이 GPTS가 더 반가운 것 같아요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>사용 꿀팁! 더 좋은 결과를 얻으려면...  </b></span></h2>\n<p data-ke-size=\"size16\">제가 며칠간 이 GPTS를 열심히 사용해본 결과, 몇 가지 꿀팁을 발견했어요:</p>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b>키워드를 구체적으로 입력</b>하세요: \"게임 썸네일\"보다는 \"배틀그라운드 에란겔 맵 하이라이트 장면 썸네일\"처럼 구체적으로!</li>\n<li><b>장르를 명시</b>하면 더 특화된 결과를 얻을 수 있어요: \"IT\", \"요리\", \"게임\" 등</li>\n<li><b>수정 요청도 자유롭게</b>: \"한국인으로 수정해줘\", \"노트북을 추가해줘\" 등 추가 디테일 요청 가능</li>\n<li><b>비율 문제 발생 시</b>: GPT-4o가 가끔 1:1 비율을 고집할 때는 \"16:9 비율로 다시 그려줘\"라고 요청하세요</li>\n</ol>\n<p data-ke-size=\"size16\">가끔 첫 번째 결과가 마음에 들지 않아도 너무 실망하지 마세요. 몇 가지 디테일을 추가해서 다시 요청하면 훨씬 더 좋은 결과물이 나오더라고요. 저도 처음에는 \"이게 뭐야?\" 싶었다가 두세 번 수정 요청하니 \"와, 이거 진짜 프로급이네!\"라는 생각이 들었어요.  </p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"유튜브 썸네일.jpg\" data-origin-width=\"1156\" data-origin-height=\"767\"><span data-url=\"https://blog.kakaocdn.net/dn/ceK103/btsNA7Lg31n/4HEK7TqhVJIFOHKhLmhGPK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/ceK103/btsNA7Lg31n/4HEK7TqhVJIFOHKhLmhGPK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/ceK103/btsNA7Lg31n/4HEK7TqhVJIFOHKhLmhGPK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FceK103%2FbtsNA7Lg31n%2F4HEK7TqhVJIFOHKhLmhGPK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1156\" height=\"767\" data-filename=\"유튜브 썸네일.jpg\" data-origin-width=\"1156\" data-origin-height=\"767\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이제 더 이상 썸네일 때문에 고민하지 마세요! 여러분의 창의적인 콘텐츠에 어울리는 매력적인 썸네일을 GPT 4o로 쉽고 빠르게 만들어보세요. 혹시 이 GPTS를 사용해보신 분들 계신가요? 어떤 결과물이 나왔는지 댓글로 공유해주세요! 저도 더 좋은 썸네일 만드는 팁이 있다면 배우고 싶네요.  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>FAQ</b></span></h2>\n<p data-ke-size=\"size16\"><b>Q: 이 GPTS는 무료인가요?</b></p>\n<p data-ke-size=\"size16\">A: ChatGPT Plus 구독자라면 별도 비용 없이 사용 가능합니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 한 번에 몇 개의 썸네일을 생성할 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 한 번에 하나씩 생성 가능하며, 수정 요청을 통해 개선할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 생성된 이미지의 저작권은 어떻게 되나요?</b></p>\n<p data-ke-size=\"size16\">A: OpenAI의 정책에 따라 생성된 이미지는 사용자가 저작권을 가집니다.</p>\n<p data-ke-size=\"size16\"><b>Q: 텍스트가 깨지면 어떻게 해야 하나요?</b></p>\n<p data-ke-size=\"size16\">A: \"텍스트를 더 크게\" 또는 \"텍스트를 선명하게\" 등으로 수정 요청을 해보세요.</p>\n<p data-ke-size=\"size16\"><b>Q: 특정 브랜드 로고를 넣을 수 있나요?</b></p>\n<p data-ke-size=\"size16\">A: 저작권 문제로 인해 정확한 브랜드 로고 생성은 제한될 수 있습니다.</p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=aoZtRwJB1v4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/RDLAu/hyYM06NRZc/5K9w3eBxaVAJ3QvWYdh4k1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/bHofH8/hyYIbWgIei/rUfOy7P3S4UKbnvyTSWvlK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"유튜브 썸네일 고민하지 말고 챗 GPT에게 맡기세요! | 무료 GPTS 공개\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/aoZtRwJB1v4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 id=\"section-9\" style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b> &nbsp;GPTS&nbsp;무료배포</b></span></h2>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;약간의 지식과 시간만 투자하면 누구나 직접 제작하고 활용할 수 있는 유용한 GPTs가 이미 많이 존재합니다. 그러나 여전히 AI 기술에 대한 낯선 접근을 두려워하거나 IT 초보자, 또는 시간적 여유가 없거나 수익화에 대한 절실함 때문에 올바른 정보를 얻지 못하는 사람들이 많습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이러한&nbsp;심리를&nbsp;악용해&nbsp;과도한&nbsp;가격으로&nbsp;유료&nbsp;강의를&nbsp;판매하며&nbsp;불필요한&nbsp;부담을&nbsp;주는&nbsp;사례들이&nbsp;늘어나고&nbsp;있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;<span style=\"color: #ee2323;\"><b>이에 본 블로그에서는 모든 사람이 AI의 혜택을 공정하고 자유롭게 누릴 수 있도록 GPTs를 무료로 배포하며, 불합리한 강의 판매 행위를 단호히 배척하고자 합니다. (당연히 저도 무료 그 이상의 가치가 있는 챗봇이라면 유료화를 검토중입니다.)</b></span></p>\n<div class=\"revenue_unit_wrap\">\n  <div class=\"revenue_unit_item adsense responsive\">\n    <div class=\"revenue_unit_info\">반응형</div>\n    <script src=\"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\" async=\"async\"></script>\n    <ins class=\"adsbygoogle\" style=\"display: block;\" data-ad-host=\"ca-host-pub-9691043933427338\" data-ad-client=\"ca-pub-8195497734535830\" data-ad-format=\"auto\"></ins>\n    <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>\n  </div>\n</div>\n<center>\n<figure id=\"og_1745751842275\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"ChatGPT - 챗GPT 유튜브 썸네일 생성기\" data-og-description=\"사용자의 키워드로 클릭을 유도하는 16:9 비율의 유튜브 썸네일을 생성합니다.\" data-og-host=\"chatgpt.com\" data-og-source-url=\"https://chatgpt.com/g/g-67a2bddeecb881918aec05ad2c82c7d0-caesgpt-yutyubeu-sseomneil-saengseonggi\" data-og-url=\"https://chatgpt.com/g/g-67a2bddeecb881918aec05ad2c82c7d0-caesgpt-yutyubeu-sseomneil-saengseonggi\" data-og-image=\"https://scrap.kakaocdn.net/dn/czkIWH/hyYFzQXyLX/kZOpNj5FUndFgsaPS756K1/img.png?width=512&amp;height=512&amp;face=0_0_512_512\"><a href=\"https://chatgpt.com/g/g-67a2bddeecb881918aec05ad2c82c7d0-caesgpt-yutyubeu-sseomneil-saengseonggi\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://chatgpt.com/g/g-67a2bddeecb881918aec05ad2c82c7d0-caesgpt-yutyubeu-sseomneil-saengseonggi\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/czkIWH/hyYFzQXyLX/kZOpNj5FUndFgsaPS756K1/img.png?width=512&amp;height=512&amp;face=0_0_512_512');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">ChatGPT - 챗GPT 유튜브 썸네일 생성기</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">사용자의 키워드로 클릭을 유도하는 16:9 비율의 유튜브 썸네일을 생성합니다.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">chatgpt.com</p>\n</div>\n</a></figure>\n</center>\n<script type=\"application/ld+json\">\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"이 GPTS는 무료인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT Plus 구독자라면 별도 비용 없이 사용 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"한 번에 몇 개의 썸네일을 생성할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"한 번에 하나씩 생성 가능하며, 수정 요청을 통해 개선할 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지의 저작권은 어떻게 되나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI의 정책에 따라 생성된 이미지는 사용자가 저작권을 가집니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"텍스트가 깨지면 어떻게 해야 하나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"\\\"텍스트를 더 크게\\\" 또는 \\\"텍스트를 선명하게\\\" 등으로 수정 요청을 해보세요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"특정 브랜드 로고를 넣을 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"저작권 문제로 인해 정확한 브랜드 로고 생성은 제한될 수 있습니다.\"\n      }\n    }\n  ]\n}\n</script>",
        "contentSnippet": "드디어 한글로 깔끔한 유튜브 썸네일을 만들 수 있게 됐어요! GPT 4o의 한글 렌더링 기능으로 더 이상 깨진 한글 썸네일과 작별할 시간. 썸네일 제작의 새로운 시대가 열렸습니다.\n\n\n \n안녕하세요! 오늘은 정말 기대하고 있던 소식을 들고 왔어요. 여러분, GPT 4o 이미지 생성 기능으로 드디어 깔끔한 한글 렌더링이 가능한 유튜브 썸네일을 만들 수 있게 됐다는 소식!  \n \n여러분도 유튜브 콘텐츠 만들면서 썸네일 때문에 고생 좀 하셨죠? 특히 기존의 DALL-E에서는 한글이 제대로 나오지 않아서 포토샵이나 별도 디자인 툴을 써야 했던 불편함이 있었잖아요. 저도 처음에 유튜브 시작했을 때 썸네일 만드는 데만 몇 시간씩 쏟아부었던 기억이 나네요.  \n \nGPT 4o로 바뀐 썸네일 생성, 뭐가 달라졌을까?  \nGPT 4o 모델은 텍스트 생성 능력만 뛰어난 게 아니라, 이미지 생성 분야에서도 혁신적인 변화를 가져왔어요. 제가 직접 써보니까 가장 눈에 띄는 차이점은 바로 완벽한 한글 가독성이에요.\n \n이전에는 한글을 넣으면 대부분 깨지거나 이상한 글자로 나오곤 했는데, 이제는 마치 전문 디자이너가 만든 것처럼 깔끔하게 한글이 렌더링됩니다. 특히 썸네일에서 가장 중요한 텍스트 부분이 제대로 표현된다는 건 정말 혁명적인 변화죠.\n \n제가 어제 테스트해 봤는데, \"2025년 최신 아이폰 비교 리뷰\"라는 제목의 썸네일을 만들었을 때 정말 깔끔하게 텍스트가 들어갔어요. 폰트도 테크 리뷰에 어울리는 걸로 자동 선택해 주더라고요!\n \n롱폼? 숏폼? 상황에 맞는 비율 선택  \n요즘은 유튜브도 다양한 형태의 콘텐츠가 있잖아요. 일반 영상용 썸네일이 필요할 수도 있고, 쇼츠용 세로형 썸네일이 필요할 수도 있죠. 이 GPTS는 정말 친절하게도 처음부터 \"롱폼(가로비율, 16:9)이 필요하신가요, 아니면 숏폼(세로비율, 9:16)이 필요하신가요?\"라고 물어봐요.\n \n제가 숏폼을 많이 올리는 편인데, 이전에는 세로형 썸네일 만들기가 정말 까다로웠거든요. 하지만 이제는 비율 선택만 해주면 알아서 최적화된 이미지를 만들어주니 얼마나 편한지 몰라요.\n \n장르별 최적화 기능은 진짜 똑똑해요  \n여러분, 이 썸네일 생성기가 얼마나 똑똑한지 알아요? 그냥 \"게임 리뷰 썸네일 만들어줘\"라고 하면 게임 콘텐츠에 맞는 요소들을 자동으로 넣어준다니까요! 예를 들어 게임 콘텐츠면 극적인 게임 장면이나 캐릭터 액션을 강조해 주고, 요리 콘텐츠라면 음식의 맛있어 보이는 표현과 김이나 증기 같은 동적 효과를 넣어준다고 해요.\n제가 지난주에 요리 채널 운영하는 친구를 위해 \"초간단 부대찌개 레시피\" 썸네일을 만들어줬는데, 정말 맛있어 보이는 부대찌개 이미지에 김이 모락모락 나는 효과까지 넣어줬어요. 친구가 그 썸네일 사용한 영상의 조회수가 평소보다 30% 이상 올랐다고 하더라고요!  \n \n시각적 임팩트를 높이는 디자인 요소들 ✨\n썸네일의 성공 비결은 결국 '클릭을 유도하는 시각적 임팩트'에 있잖아요. 이 GPTS는 디자인 측면에서도 정말 세심하게 신경 썼더라고요:\n고해상도 실사 이미지를 기본으로 사용\n강렬한 색상 대비와 높은 채도로 눈길 끌기\n텍스트는 이미지 전체 면적의 40%를 차지하도록 설계\n텍스트 뒷면에 30% 투명도의 배경 박스나 음영 처리로 가독성 확보\n특히 주목할 만한 점은 텍스트 배치인데요, 화면의 중앙이나 전략적 삼등분 위치를 활용해서 정말 프로페셔널한 느낌이 나요. 예전에 제가 직접 만들던 썸네일은 왜 그렇게 아마추어 같았는지 이제 알겠어요...  \n \n이런 상황에서 특히 유용해요  \n개인 유튜버라면: 디자인 툴 따로 배울 시간 없이 빠르게 퀄리티 있는 썸네일 제작 가능\n기업 마케팅 담당자라면: 일관된 브랜드 이미지를 유지하면서도 다양한 썸네일 빠르게 생성\n교육 콘텐츠 제작자라면: 학습 주제와 목표를 명확히 전달하는 전문적인 썸네일 손쉽게 제작\n게임 스트리머라면: 게임의 하이라이트 장면을 강조한 매력적인 썸네일로 시청자 유입 증가\n솔직히 말해서, 유튜브 썸네일은 영상 못지않게 중요하잖아요. 아무리 좋은 콘텐츠라도 썸네일이 매력적이지 않으면 클릭률이 떨어지니까요. 그래서 이 GPTS가 더 반가운 것 같아요.\n \n사용 꿀팁! 더 좋은 결과를 얻으려면...  \n제가 며칠간 이 GPTS를 열심히 사용해본 결과, 몇 가지 꿀팁을 발견했어요:\n키워드를 구체적으로 입력하세요: \"게임 썸네일\"보다는 \"배틀그라운드 에란겔 맵 하이라이트 장면 썸네일\"처럼 구체적으로!\n장르를 명시하면 더 특화된 결과를 얻을 수 있어요: \"IT\", \"요리\", \"게임\" 등\n수정 요청도 자유롭게: \"한국인으로 수정해줘\", \"노트북을 추가해줘\" 등 추가 디테일 요청 가능\n비율 문제 발생 시: GPT-4o가 가끔 1:1 비율을 고집할 때는 \"16:9 비율로 다시 그려줘\"라고 요청하세요\n가끔 첫 번째 결과가 마음에 들지 않아도 너무 실망하지 마세요. 몇 가지 디테일을 추가해서 다시 요청하면 훨씬 더 좋은 결과물이 나오더라고요. 저도 처음에는 \"이게 뭐야?\" 싶었다가 두세 번 수정 요청하니 \"와, 이거 진짜 프로급이네!\"라는 생각이 들었어요.  \n\n\n \n이제 더 이상 썸네일 때문에 고민하지 마세요! 여러분의 창의적인 콘텐츠에 어울리는 매력적인 썸네일을 GPT 4o로 쉽고 빠르게 만들어보세요. 혹시 이 GPTS를 사용해보신 분들 계신가요? 어떤 결과물이 나왔는지 댓글로 공유해주세요! 저도 더 좋은 썸네일 만드는 팁이 있다면 배우고 싶네요.  \nFAQ\nQ: 이 GPTS는 무료인가요?\nA: ChatGPT Plus 구독자라면 별도 비용 없이 사용 가능합니다.\nQ: 한 번에 몇 개의 썸네일을 생성할 수 있나요?\nA: 한 번에 하나씩 생성 가능하며, 수정 요청을 통해 개선할 수 있습니다.\nQ: 생성된 이미지의 저작권은 어떻게 되나요?\nA: OpenAI의 정책에 따라 생성된 이미지는 사용자가 저작권을 가집니다.\nQ: 텍스트가 깨지면 어떻게 해야 하나요?\nA: \"텍스트를 더 크게\" 또는 \"텍스트를 선명하게\" 등으로 수정 요청을 해보세요.\nQ: 특정 브랜드 로고를 넣을 수 있나요?\nA: 저작권 문제로 인해 정확한 브랜드 로고 생성은 제한될 수 있습니다.\n\n\n\n \n  GPTS 무료배포\n 약간의 지식과 시간만 투자하면 누구나 직접 제작하고 활용할 수 있는 유용한 GPTs가 이미 많이 존재합니다. 그러나 여전히 AI 기술에 대한 낯선 접근을 두려워하거나 IT 초보자, 또는 시간적 여유가 없거나 수익화에 대한 절실함 때문에 올바른 정보를 얻지 못하는 사람들이 많습니다. \n이러한 심리를 악용해 과도한 가격으로 유료 강의를 판매하며 불필요한 부담을 주는 사례들이 늘어나고 있습니다.\n \n 이에 본 블로그에서는 모든 사람이 AI의 혜택을 공정하고 자유롭게 누릴 수 있도록 GPTs를 무료로 배포하며, 불합리한 강의 판매 행위를 단호히 배척하고자 합니다. (당연히 저도 무료 그 이상의 가치가 있는 챗봇이라면 유료화를 검토중입니다.)\n반응형\n\n    \n    (adsbygoogle = window.adsbygoogle || []).push({});\n  \n\n \nChatGPT - 챗GPT 유튜브 썸네일 생성기\n사용자의 키워드로 클릭을 유도하는 16:9 비율의 유튜브 썸네일을 생성합니다.\nchatgpt.com\n\n\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"이 GPTS는 무료인가요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"ChatGPT Plus 구독자라면 별도 비용 없이 사용 가능합니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"한 번에 몇 개의 썸네일을 생성할 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"한 번에 하나씩 생성 가능하며, 수정 요청을 통해 개선할 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"생성된 이미지의 저작권은 어떻게 되나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"OpenAI의 정책에 따라 생성된 이미지는 사용자가 저작권을 가집니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"텍스트가 깨지면 어떻게 해야 하나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"\\\"텍스트를 더 크게\\\" 또는 \\\"텍스트를 선명하게\\\" 등으로 수정 요청을 해보세요.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"특정 브랜드 로고를 넣을 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"저작권 문제로 인해 정확한 브랜드 로고 생성은 제한될 수 있습니다.\"\n      }\n    }\n  ]\n}",
        "guid": "http://muzbox.tistory.com/483576",
        "categories": [
          "AI, 미래기술/무료 GPTS 공개",
          "AI 이미지 생성",
          "gpt 4o 이미지 생성",
          "롱폼 썸네일",
          "숏폼 썸네일",
          "썸네일 디자인",
          "유튜브 마케팅",
          "유튜브 썸네일 생성",
          "콘텐츠 최적화",
          "클릭률 향상",
          "한글 렌더링"
        ],
        "isoDate": "2025-04-27T22:06:01.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": []
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "C++ - Mimalloc:Free List Sharding in Action 을 읽고 정리",
        "link": "https://jacking75.github.io/Cpp_20250430/",
        "pubDate": "Wed, 30 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vRaj95MhE1bMYF30dVP-xSbiJrASaFlF693zgj_nK5kmIzK8R5AJU1SHNh2RWfcFqz2OgoFHAIaax2V/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/Cpp_20250430/",
        "isoDate": "2025-04-29T15:00:00.000Z"
      },
      {
        "title": "C# - 의존성 주입 방법의 라이프 사이클 AddTransient, AddScoped, AddSingleton",
        "link": "https://jacking75.github.io/NET_20250429/",
        "pubDate": "Tue, 29 Apr 2025 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vRFi_2Z6yMOWNwWfILDXGsbqYS3aJfiO6aO2u22Awy-pQ5XEEz0GpIOjehif47noYsR06jT6z_pD6Mr/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/NET_20250429/",
        "isoDate": "2025-04-28T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "짜치는 일들",
        "link": "https://jeho.page/essay/2025/05/02/petty-stuff.html",
        "pubDate": "2025-05-02T12:39:00.000Z",
        "author": "김재호",
        "content": "<blockquote>\n  <p>사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다.<br />\n짜치는 일을 안 하기는 어렵다. 견뎌야 한다. 그런데 그런 일들을 견디기 위해서는 본인이 생각했을 때 의미있는 사업을 해야 한다. 적어도 내게 의미있는 이야기 이어야 한다.</p>\n\n  <p><em><a href=\"https://www.linkedin.com/feed/update/urn:li:activity:7322830400169328640\">링크드인 게시글에서</a></em></p>\n</blockquote>\n\n<p>저도 여전히 짜치는 일들을 합니다.<br />\n의미 있는 일이라 생각해서라기보다는…<br />\n내가 할 수 있는 것들은 다 해보고 싶은 마음(그래야 후회하지 않을 테니까)</p>\n\n<p>쪽팔린 것은 정말 싫은데… 그 쪽팔린 것들을 안 해보고 포기하면 그게 더 쪽팔려서.<br />\n내 안의 쪽팔림과 싸워서 이겨보고 싶은 마음이 있습니다.</p>\n\n<p>스테이 헝그리라는 게 참 힘든 일입니다.</p>\n\n<p>가만히 생각해 보면 인생에서 제가 성취했다고 할 만한 것은 네카라쿠배에서 일해봤다는 거.<br />\n<a href=\"https://withcoffee.app/\">커피한잔이란 서비스</a> 만들어서 회사 없이 스스로 돈 벌고 있다는 거.</p>\n\n<p>이거 딱 2개밖에 없는 거 같습니다.<br />\n생각해 보니 별 보잘것없는 성취입니다.</p>\n\n<p>웃기는 것은 겨우 이 정도 성취에도 <strong>이만하면 됐지</strong> 하는 생각이 든다는 것입니다.</p>\n\n<p>훨씬 큰 성취를 이룬 사람들이 계속 Stay Hungry 마음가짐을 유지하고 있는 걸 보면 큰 존경심이 우러나옵니다.</p>\n\n<p>짜치는 일들을 계속하고 싶습니다.<br />\n배고플 때의 마음을 잊고 싶지가 않습니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2023/10/06/acquisition-is-hard.html\">전단지 돌리는 게 뭐 어때서</a></li>\n  <li><a href=\"/essay/2021/11/15/LG전자-앞에서-전단지를-돌리던-개발자.html\">LG전자 앞에서 전단지를 돌리던 개발자</a></li>\n</ul>",
        "contentSnippet": "사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다.\n링크드인 게시글에서\n저도 여전히 짜치는 일들을 합니다.\n쪽팔린 것은 정말 싫은데… 그 쪽팔린 것들을 안 해보고 포기하면 그게 더 쪽팔려서.\n스테이 헝그리라는 게 참 힘든 일입니다.\n가만히 생각해 보면 인생에서 제가 성취했다고 할 만한 것은 네카라쿠배에서 일해봤다는 거.\n커피한잔이란 서비스 만들어서 회사 없이 스스로 돈 벌고 있다는 거.\n이거 딱 2개밖에 없는 거 같습니다.\n웃기는 것은 겨우 이 정도 성취에도 이만하면 됐지 하는 생각이 든다는 것입니다.\n훨씬 큰 성취를 이룬 사람들이 계속 Stay Hungry 마음가짐을 유지하고 있는 걸 보면 큰 존경심이 우러나옵니다.\n짜치는 일들을 계속하고 싶습니다.\n\n함께 읽으면 좋은 글:\n전단지 돌리는 게 뭐 어때서\nLG전자 앞에서 전단지를 돌리던 개발자",
        "summary": "사업 초기에는 짜치는 일들을 할 수 밖에 없게 된다. 오픈채팅방을 찾아 들어가서 강퇴 당하지 않게 조심스럽게 글을 올리고, 커뮤니티에 계정을 만들어 글을 올린다. 짜치는 일을 안 하기는 어렵다. 견뎌야 한다. 그런데 그런 일들을 견디기 위해서는 본인이 생각했을 때 의미있는 사업을 해야 한다. 적어도 내게 의미있는 이야기 이어야 한다. 링크드인 게시글에서",
        "id": "https://jeho.page/essay/2025/05/02/petty-stuff",
        "isoDate": "2025-05-02T12:39:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "시진핑 내려온다는 설이 있습니다.",
        "link": "http://serverdown.tistory.com/1300",
        "pubDate": "Sat, 3 May 2025 13:06:01 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1300#entry1300comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"970\" data-origin-height=\"647\"><span data-url=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\" data-phocus=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\"><img src=\"https://blog.kakaocdn.net/dn/bieO5I/btsNJKvDMEe/z5OARPkCy0Kn3Mr3KEo1Mk/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbieO5I%2FbtsNJKvDMEe%2Fz5OARPkCy0Kn3Mr3KEo1Mk%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"970\" height=\"647\" data-origin-width=\"970\" data-origin-height=\"647\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">2025-05-02 현재 이런 영상들이 올라왔습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=0cYeltObgZ4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=0cYeltObgZ4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=0cYeltObgZ4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/rwz1G/hyYMRQpmnE/tujdJC5FkdTd7NZqnNY8CK/img.jpg?width=1280&amp;height=720&amp;face=296_88_622_444,https://scrap.kakaocdn.net/dn/cbSjPb/hyYMTU2STJ/1rJJWqGFCSL5zww8AcZFX0/img.jpg?width=1280&amp;height=720&amp;face=296_88_622_444\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"【시사포커스】 충격! 습근평 연금설!그가 전권 행사?! (태산 보도)\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/0cYeltObgZ4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=y-lr8RIHj_4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=y-lr8RIHj_4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=y-lr8RIHj_4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bkrbOp/hyYM0fyeXe/1lC7X5lwm0uOsyiOu0eu51/img.jpg?width=1280&amp;height=720&amp;face=232_46_972_324,https://scrap.kakaocdn.net/dn/bg3xNt/hyYMSaJWAT/rVVBTbgLpBz7aD86gQk6O1/img.jpg?width=1280&amp;height=720&amp;face=232_46_972_324\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"[지식뉴스] &quot;미 국채 붕괴? 아무도 못 던져요&quot; 버티던 시진핑, 결국 굴복하나..트럼프가 중국 흔드\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/y-lr8RIHj_4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근 이상한 뉴스들도 있었습니다.</p>\n<p data-ke-size=\"size16\">트럼프는 중국과 협상중이라고 하고<br />시진핑은 협상하지 않았다고 하는 뉴스죠</p>\n<p data-ke-size=\"size16\">이때 그럼 다른 사람이랑 협상 중이겠거니 했는데</p>\n<p data-ke-size=\"size16\">아예 차기정권이랑 협상 중인거 같군요</p>\n<p data-ke-size=\"size16\">시진핑이 내려온다면 중국은 근본적으로 바뀔 수 있기 때문에<br />중국 투자에 고려해봐야합니다.</p>\n<p data-ke-size=\"size16\">한국 IMF 맞았을대 처럼 그런 상황이 아닐까 싶네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근 할투에서도 중국 투자를 권유하고 있고&nbsp;<br />서재형 또한 여러나라에 분산하라는 방향을 제시하고 있습니다.</p>\n<p data-ke-size=\"size16\">모든 사람 말이 맞으려면 단 한가지 결과로 모이게 됩니다.</p>\n<p data-ke-size=\"size16\">시진핑이 내려고 중국은 이전과 다르게 된다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">아마도 트럼프의 미친짓이 차기 중국 정권을 움직인거 같습니다.<br />이대로만 망한다는 공감대를 형성 한걸로 보입니다.</p>\n<p data-ke-size=\"size16\">저는</p>\n<p data-ke-size=\"size16\">CWEB - 중국 인터넷 기업 2배</p>\n<p data-ke-size=\"size16\">항셍 테크&nbsp;</p>\n<p data-ke-size=\"size16\">곧 나올 중국 테크 TOP10 ETF 등에 자금을 옮길 예정입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">존버나드 신규 중국 ETF: <a href=\"https://www.youtube.com/watch?v=69aVRSuI14o&amp;t=960s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=69aVRSuI14o&amp;t=960s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=69aVRSuI14o\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/dBHP8N/hyYPg9EYOz/g7dkzMd9O81hsiiwvgKgp1/img.jpg?width=1280&amp;height=720&amp;face=52_128_382_256,https://scrap.kakaocdn.net/dn/bj17WG/hyYMZ1Y6M8/N8SRfPBrJgQ4iTObT7VnO1/img.jpg?width=1280&amp;height=720&amp;face=52_128_382_256\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"드디어 중국ETF들이 대거 상장합니다. 중국주식이 요즘 주목받는 이유 슈카월드도 소개 ( TIGER 차\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/69aVRSuI14o\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">할투 중국 중계: <a href=\"https://www.youtube.com/watch?v=Cpwoz5PV1wc\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=Cpwoz5PV1wc</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Cpwoz5PV1wc\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bYTxH9/hyYMWxrxBT/uFuAYDbsu7KuDB1S5vldm0/img.jpg?width=1280&amp;height=720&amp;face=892_90_1016_226,https://scrap.kakaocdn.net/dn/L2ahS/hyYM2YJSai/7KnlyM5vzbtI9k0d4kuIpk/img.jpg?width=1280&amp;height=720&amp;face=892_90_1016_226\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"1433. 중국 경제 무너지는 중? 현장에 가봤더니 충격!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Cpwoz5PV1wc\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근에 중국 투자를 권유하는 내용이 점점 늘고 있습니다.</p>",
        "contentSnippet": "2025-05-02 현재 이런 영상들이 올라왔습니다.\n \n영상: https://www.youtube.com/watch?v=0cYeltObgZ4\n\n\n\n \n \n \n영상: https://www.youtube.com/watch?v=y-lr8RIHj_4\n\n\n\n \n최근 이상한 뉴스들도 있었습니다.\n트럼프는 중국과 협상중이라고 하고\n시진핑은 협상하지 않았다고 하는 뉴스죠\n이때 그럼 다른 사람이랑 협상 중이겠거니 했는데\n아예 차기정권이랑 협상 중인거 같군요\n시진핑이 내려온다면 중국은 근본적으로 바뀔 수 있기 때문에\n중국 투자에 고려해봐야합니다.\n한국 IMF 맞았을대 처럼 그런 상황이 아닐까 싶네요\n \n최근 할투에서도 중국 투자를 권유하고 있고 \n서재형 또한 여러나라에 분산하라는 방향을 제시하고 있습니다.\n모든 사람 말이 맞으려면 단 한가지 결과로 모이게 됩니다.\n시진핑이 내려고 중국은 이전과 다르게 된다.\n \n아마도 트럼프의 미친짓이 차기 중국 정권을 움직인거 같습니다.\n이대로만 망한다는 공감대를 형성 한걸로 보입니다.\n저는\nCWEB - 중국 인터넷 기업 2배\n항셍 테크 \n곧 나올 중국 테크 TOP10 ETF 등에 자금을 옮길 예정입니다.\n \n존버나드 신규 중국 ETF: https://www.youtube.com/watch?v=69aVRSuI14o&t=960s\n\n\n\n \n할투 중국 중계: https://www.youtube.com/watch?v=Cpwoz5PV1wc\n\n\n\n \n최근에 중국 투자를 권유하는 내용이 점점 늘고 있습니다.",
        "guid": "http://serverdown.tistory.com/1300",
        "categories": [
          "투자",
          "중국투자"
        ],
        "isoDate": "2025-05-03T04:06:01.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "2025-05-01 살질 일기 / 시간낭비",
        "link": "http://serverdown.tistory.com/1299",
        "pubDate": "Thu, 1 May 2025 14:35:04 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1299#entry1299comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cdUlpx/btsNGsPJP2Z/vZoYEgEqlDlK7s1vz0sHC1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcdUlpx%2FbtsNGsPJP2Z%2FvZoYEgEqlDlK7s1vz0sHC1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">블록분해 프로젝트의 프로덕션이 진행되었다.</p>\n<p data-ke-size=\"size16\">이제 광고를 붙이려고 작업하였는데</p>\n<p data-ke-size=\"size16\">Unity Ads 의 banner 를 기기에 붙이는데 실패했다.</p>\n<p data-ke-size=\"size16\">에디터에서는 나오지만 장비에서는 에러로그와 함께 실패하였다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">c# 에서&nbsp;</p>\n<p data-ke-size=\"size16\">Advertisement.Banner.Load(unit_id,&nbsp;options);</p>\n<p data-ke-size=\"size16\">를 호출하면</p>\n<p data-ke-size=\"size16\">05-01 14:16:19.146 21562 29909 E Unity&nbsp;&nbsp;&nbsp;: AndroidJavaException: java.lang.RuntimeException: Can't create handler inside thread Thread[Thread-4,10,main] that has not called Looper.prepare()</p>\n<p data-ke-size=\"size16\">에러 로그가 나온다.</p>\n<p data-ke-size=\"size16\">내용만 봐선 쓰레드 문제인거 같은데 메인쓰레드에서 돌렸는데도 발생한다.</p>\n<p data-ke-size=\"size16\">아예 모듈이 잘못된거 같다는 생각이 들지만 해결 방법은 없다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">같은 문제로 고생하는 글도 찾았다.<br />도움은 안되었다.</p>\n<p data-ke-size=\"size16\"><a href=\"https://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">여기에 game_id 를 넣어야할꺼 같은데 클릭이 안되서 입력할 수가 없다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"705\" data-origin-height=\"874\"><span data-url=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bhnOao/btsNGGz9olk/G4nTpcGEyDdSLKKlHpcWMk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhnOao%2FbtsNGGz9olk%2FG4nTpcGEyDdSLKKlHpcWMk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"705\" height=\"874\" data-origin-width=\"705\" data-origin-height=\"874\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">왜이러는 걸까...</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">unlink 후 다시 link 를 하니 자동으로 입력되었다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"569\" data-origin-height=\"658\"><span data-url=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bf0k0C/btsNHqC4NxU/FlsKYPyuJ7hKRVOx6Y6sW1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbf0k0C%2FbtsNHqC4NxU%2FFlsKYPyuJ7hKRVOx6Y6sW1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"569\" height=\"658\" data-origin-width=\"569\" data-origin-height=\"658\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">unlink /&nbsp; link 는 여기서 한다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"570\" data-origin-height=\"616\"><span data-url=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/rlrzk/btsNG0EVAtA/4l3vIitRot5sE3KskaRahK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Frlrzk%2FbtsNG0EVAtA%2F4l3vIitRot5sE3KskaRahK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"570\" height=\"616\" data-origin-width=\"570\" data-origin-height=\"616\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">모듈이 뭔가 부족해서 그런건가 싶어서 관련있을꺼 같은 모듈도 추가해봤다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"708\" data-origin-height=\"440\"><span data-url=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/kzAZa/btsNHdYkEJ1/MqKqp5BZCR3ftWmcTwKnx0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkzAZa%2FbtsNHdYkEJ1%2FMqKqp5BZCR3ftWmcTwKnx0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"708\" height=\"440\" data-origin-width=\"708\" data-origin-height=\"440\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">돌아라 얍 !</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">조금 바꾸고 다시 시도 조금 바꾸고 다시 시도<br />하다보니 시간이 너무 많이 소모되네요<br />시간낭비 갑인거 같습니다.</p>\n<h2 data-ke-size=\"size26\">결론</h2>\n<p data-ke-size=\"size16\">쥐뿔도 되는거 없습니다.</p>\n<p data-ke-size=\"size16\">Admob 으로 갑니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">3시간 더 소비해서 배너 붙였습니다.</p>\n<p data-ke-size=\"size16\">시작이 잘못되면 시간이 낭비되는군요.</p>\n<p data-ke-size=\"size16\">익숙한걸 해야겠습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1108\" data-origin-height=\"1477\"><span data-url=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bDFjmJ/btsNG1cQmDI/Gmb4ZUmISL6O282OHQYmak/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbDFjmJ%2FbtsNG1cQmDI%2FGmb4ZUmISL6O282OHQYmak%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1108\" height=\"1477\" data-origin-width=\"1108\" data-origin-height=\"1477\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "블록분해 프로젝트의 프로덕션이 진행되었다.\n이제 광고를 붙이려고 작업하였는데\nUnity Ads 의 banner 를 기기에 붙이는데 실패했다.\n에디터에서는 나오지만 장비에서는 에러로그와 함께 실패하였다.\n \nc# 에서 \nAdvertisement.Banner.Load(unit_id, options);\n를 호출하면\n05-01 14:16:19.146 21562 29909 E Unity   : AndroidJavaException: java.lang.RuntimeException: Can't create handler inside thread Thread[Thread-4,10,main] that has not called Looper.prepare()\n에러 로그가 나온다.\n내용만 봐선 쓰레드 문제인거 같은데 메인쓰레드에서 돌렸는데도 발생한다.\n아예 모듈이 잘못된거 같다는 생각이 들지만 해결 방법은 없다.\n \n같은 문제로 고생하는 글도 찾았다.\n도움은 안되었다.\nhttps://discussions.unity.com/t/unity-monetization-java-lang-runtimeexception/783764\n \n여기에 game_id 를 넣어야할꺼 같은데 클릭이 안되서 입력할 수가 없다.\n\n\n왜이러는 걸까...\n \n \nunlink 후 다시 link 를 하니 자동으로 입력되었다.\n\n\n \nunlink /  link 는 여기서 한다.\n\n\n \n모듈이 뭔가 부족해서 그런건가 싶어서 관련있을꺼 같은 모듈도 추가해봤다.\n\n\n돌아라 얍 !\n \n조금 바꾸고 다시 시도 조금 바꾸고 다시 시도\n하다보니 시간이 너무 많이 소모되네요\n시간낭비 갑인거 같습니다.\n결론\n쥐뿔도 되는거 없습니다.\nAdmob 으로 갑니다.\n \n3시간 더 소비해서 배너 붙였습니다.\n시작이 잘못되면 시간이 낭비되는군요.\n익숙한걸 해야겠습니다.",
        "guid": "http://serverdown.tistory.com/1299",
        "categories": [
          "프로그래밍/개발메모",
          "AdMob",
          "unity"
        ],
        "isoDate": "2025-05-01T05:35:04.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "(만드는중) Admob 유럽 규정 메시지 만들기",
        "link": "http://serverdown.tistory.com/1298",
        "pubDate": "Thu, 1 May 2025 10:26:11 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1298#entry1298comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"321\" data-origin-height=\"186\"><span data-url=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cnBnYe/btsNGzBcZ9d/SfizrxF1YBsO3q9XXNHMvk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcnBnYe%2FbtsNGzBcZ9d%2FSfizrxF1YBsO3q9XXNHMvk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"321\" height=\"186\" data-origin-width=\"321\" data-origin-height=\"186\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">유럽은 무슨 규정이 있나봅니다. 광고 표시 매시지를 만들라고 하네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1057\" data-origin-height=\"244\"><span data-url=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/TYNE5/btsNGDQSy2L/c4L1PY06ZDfKtJEqNAIYOK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FTYNE5%2FbtsNGDQSy2L%2Fc4L1PY06ZDfKtJEqNAIYOK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1057\" height=\"244\" data-origin-width=\"1057\" data-origin-height=\"244\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"702\" data-origin-height=\"484\"><span data-url=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bCv73g/btsNG9IfJRM/CDHhGS52RkxSA7B8KPJOp0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCv73g%2FbtsNG9IfJRM%2FCDHhGS52RkxSA7B8KPJOp0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"702\" height=\"484\" data-origin-width=\"702\" data-origin-height=\"484\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">진행해봐야겠습니다.</p>\n<p data-ke-size=\"size16\">들어가서 봤는데 별게 없었습니다.</p>\n<p data-ke-size=\"size16\">이미 메시지가 있고 그 글자를 바꿀 수 있는 정도 였습니다.</p>\n<p data-ke-size=\"size16\">만들어진 메시지는 [옵션 관리] 와 [동의] 였습니다.</p>\n<p data-ke-size=\"size16\">그냥 광고 붙이면 될꺼 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "유럽은 무슨 규정이 있나봅니다. 광고 표시 매시지를 만들라고 하네요\n \n\n\n \n\n\n진행해봐야겠습니다.\n들어가서 봤는데 별게 없었습니다.\n이미 메시지가 있고 그 글자를 바꿀 수 있는 정도 였습니다.\n만들어진 메시지는 [옵션 관리] 와 [동의] 였습니다.\n그냥 광고 붙이면 될꺼 같습니다.",
        "guid": "http://serverdown.tistory.com/1298",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-05-01T01:26:11.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "블록 분해 게임 - 아이디어",
        "link": "http://serverdown.tistory.com/1297",
        "pubDate": "Wed, 30 Apr 2025 13:24:43 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1297#entry1297comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/P4bFn/btsNEDjpjYV/y93mj4s7A8HLhuGGpDD4G0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FP4bFn%2FbtsNEDjpjYV%2Fy93mj4s7A8HLhuGGpDD4G0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">블록 분해 게임</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/_EVuM-JzcMw\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/_EVuM-JzcMw</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=_EVuM-JzcMw\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/baKKvT/hyYIcBcZDR/GcLxtaCiuMNWkNAxajpkZk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/ZcB5w/hyYIaDolnG/ltMLSXY2NNdfAVxk3zHHHK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Brick Away v2 play\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/_EVuM-JzcMw\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">상자대신 물고기</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/dPZPeKa-1ws\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/dPZPeKa-1ws</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=dPZPeKa-1ws\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/oeyKZ/hyYH5PEkTR/fnJGf7kXE8YnkfrIGtAuXk/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/czZaeo/hyYMfDVKag/cso5y4KSBMJ63IkMhMKu3k/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"물고기상자\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/dPZPeKa-1ws\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">한칸애 물고기 하나를 너으면 찌그러트려야하고</p>\n<p data-ke-size=\"size16\">3칸짜리 상자를 상어 한마리에 대입하는건 왜곡이 덜하겠군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "블록 분해 게임\n영상: https://youtu.be/_EVuM-JzcMw\n\n\n\n \n상자대신 물고기\n영상: https://youtu.be/dPZPeKa-1ws\n\n\n\n한칸애 물고기 하나를 너으면 찌그러트려야하고\n3칸짜리 상자를 상어 한마리에 대입하는건 왜곡이 덜하겠군요",
        "guid": "http://serverdown.tistory.com/1297",
        "categories": [
          "프로그래밍/개발메모",
          "게임",
          "아이디어"
        ],
        "isoDate": "2025-04-30T04:24:43.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "vue motion-v defineComponent export 예제",
        "link": "http://serverdown.tistory.com/1296",
        "pubDate": "Wed, 30 Apr 2025 13:16:16 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1296#entry1296comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"627\" data-origin-height=\"246\"><span data-url=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bnlovK/btsNGvjAZhK/zXk1RGWGiXlrDbiQzDQX7k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbnlovK%2FbtsNGvjAZhK%2FzXk1RGWGiXlrDbiQzDQX7k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"627\" height=\"246\" data-origin-width=\"627\" data-origin-height=\"246\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">독립된 버튼 하나를 완성한 컴포넌트 소스이다.</p>\n<p data-ke-size=\"size16\">setup 방식 말고 <span style=\"text-align: start;\">defineComponent 방식이 없어서 하나 올려본다.</span></p>\n<p data-ke-size=\"size16\">특징</p>\n<p data-ke-size=\"size16\">to 를 받아서 페이지 이동시켜주는데</p>\n<p data-ke-size=\"size16\">press 애니메이션을 볼 수 있도록 setTimeout 으로 0.5초 딜레이를 줬다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">CODE</h2>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">template</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">class</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"mt-8\"</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">motion.button</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; :</span><span style=\"color: #9cdcfe;\">while-hover</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #ffffff;\">{ </span><span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">1.5</span><span style=\"color: #ffffff;\">, </span><span style=\"color: #9cdcfe;\">x</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">50</span><span style=\"color: #ffffff;\"> }</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; :</span><span style=\"color: #9cdcfe;\">while-press</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #ffffff;\">{ </span><span style=\"color: #9cdcfe;\">scale</span><span style=\"color: #ffffff;\">: </span><span style=\"color: #b5cea8;\">0.8</span><span style=\"color: #ffffff;\"> }</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; @</span><span style=\"color: #9cdcfe;\">click</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ffffff;\">\"</span><span style=\"color: #dcdcaa;\">delay_push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">to</span><span style=\"color: #ffffff;\">)</span><span style=\"color: #ffffff;\">\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #9cdcfe;\">class</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"tw_btn_detail\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; more detail</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">motion.button</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">div</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">template</span><span style=\"color: #808080;\">&gt;</span></div>\n<br />\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">lang</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"ts\"</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #7ca668;\">// components\\DetailButton.vue</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">motion</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"motion-v\"</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">defineComponent</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"vue\"</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"> { </span><span style=\"color: #9cdcfe;\">useRouter</span><span style=\"color: #ffffff;\"> } </span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"vue-router\"</span><span style=\"color: #ffffff;\">;</span></div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #c586c0;\">default</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #dcdcaa;\">defineComponent</span><span style=\"color: #ffffff;\">({</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">name</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #ce9178;\">\"DetailButton\"</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">props</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #4ec9b0;\">to</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #4ec9b0;\">String</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">components</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #ce9178;\">\"motion.button\"</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">motion</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #4ec9b0;\">button</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #dcdcaa;\">data</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> () </span><span style=\"color: #569cd6;\">=&gt;</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #569cd6;\">const</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #dcdcaa;\">useRouter</span><span style=\"color: #ffffff;\">();</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #c586c0;\">return</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\">,</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; };</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #9cdcfe;\">methods</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; </span><span style=\"color: #dcdcaa;\">delay_push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">_to</span><span style=\"color: #d4d4d4;\">:</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #4ec9b0;\">string</span><span style=\"color: #ffffff;\">) {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; </span><span style=\"color: #dcdcaa;\">setTimeout</span><span style=\"color: #ffffff;\">(() </span><span style=\"color: #569cd6;\">=&gt;</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; </span><span style=\"color: #569cd6;\">this</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #9cdcfe;\">router</span><span style=\"color: #ffffff;\">.</span><span style=\"color: #dcdcaa;\">push</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">_to</span><span style=\"color: #ffffff;\">);</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; }, </span><span style=\"color: #b5cea8;\">500</span><span style=\"color: #ffffff;\">);</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; },</span></div>\n<div><span style=\"color: #ffffff;\">});</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">script</span><span style=\"color: #808080;\">&gt;</span></div>\n<br />\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">style</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">scope</span><span style=\"color: #808080;\">&gt;</span></div>\n<div><span style=\"color: #d7ba7d;\">.tw_btn_detail</span><span style=\"color: #ffffff;\"> {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; </span><span style=\"color: #c586c0;\">@apply</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">rounded-full</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">border-2</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">px-4</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #d7ba7d;\">py-2</span><span style=\"color: #ffffff;\">;</span></div>\n<div><span style=\"color: #ffffff;\">}</span></div>\n<div><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">style</span><span style=\"color: #808080;\">&gt;</span></div>\n</div>\n<h2 data-ke-size=\"size26\">import&nbsp;</h2>\n<p data-ke-size=\"size16\"><span style=\"color: #c586c0;\">import</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">DetailButton</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #c586c0;\">from</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #ce9178;\">\"@/components/DetailButton.vue\"</span><span style=\"color: #ffffff;\">;</span></p>\n<h2 data-ke-size=\"size26\">template&nbsp;</h2>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #808080;\">&lt;</span><span style=\"color: #569cd6;\">DetailButton</span><span style=\"color: #ffffff;\"> </span><span style=\"color: #9cdcfe;\">to</span><span style=\"color: #ffffff;\">=</span><span style=\"color: #ce9178;\">\"/af\"</span><span style=\"color: #808080;\">&gt;</span><span style=\"color: #ffffff;\">more detail</span><span style=\"color: #808080;\">&lt;/</span><span style=\"color: #569cd6;\">DetailButton</span><span style=\"color: #808080;\">&gt;</span></div>\n</div>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/SKlJDIWingw\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/SKlJDIWingw</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=SKlJDIWingw\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cydSP2/hyYMZ8eElS/6BypzFhcz0EUQQ2RrEUDKk/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/cPwUeQ/hyYIiuFBoY/veza3ixUUiohKZSn4kRmK1/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"motion v exmaple\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/SKlJDIWingw\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">블링블링</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "독립된 버튼 하나를 완성한 컴포넌트 소스이다.\nsetup 방식 말고 defineComponent 방식이 없어서 하나 올려본다.\n특징\nto 를 받아서 페이지 이동시켜주는데\npress 애니메이션을 볼 수 있도록 setTimeout 으로 0.5초 딜레이를 줬다.\n \nCODE\n<template>\n  <div class=\"mt-8\">\n    <motion.button\n      :while-hover=\"{ scale: 1.5, x: 50 }\"\n      :while-press=\"{ scale: 0.8 }\"\n      @click=\"delay_push(to)\"\n      class=\"tw_btn_detail\"\n    >\n      more detail\n    </motion.button>\n  </div>\n</template>\n<script lang=\"ts\">\n// components\\DetailButton.vue\nimport { motion } from \"motion-v\";\nimport { defineComponent } from \"vue\";\nimport { useRouter } from \"vue-router\";\nexport default defineComponent({\n  name: \"DetailButton\",\n  props: {\n    to: String,\n  },\n  components: {\n    \"motion.button\": motion.button,\n  },\n  data: () => {\n    const router = useRouter();\n    return {\n      router,\n    };\n  },\n  methods: {\n    delay_push(_to: string) {\n      setTimeout(() => {\n        this.router.push(_to);\n      }, 500);\n    },\n  },\n});\n</script>\n<style scope>\n.tw_btn_detail {\n  @apply rounded-full border-2 px-4 py-2;\n}\n</style>\nimport \nimport DetailButton from \"@/components/DetailButton.vue\";\ntemplate \n<DetailButton to=\"/af\">more detail</DetailButton>\n \n영상: https://youtu.be/SKlJDIWingw\n\n\n\n블링블링",
        "guid": "http://serverdown.tistory.com/1296",
        "categories": [
          "프로그래밍/개발메모",
          "motion-v",
          "VUE"
        ],
        "isoDate": "2025-04-30T04:16:16.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "Google Play 서명키를 잃어버려서 교채해 봤습니다.",
        "link": "http://serverdown.tistory.com/1295",
        "pubDate": "Tue, 29 Apr 2025 22:03:11 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1295#entry1295comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"520\" data-origin-height=\"166\"><span data-url=\"https://blog.kakaocdn.net/dn/MIIdZ/btsNFqiIn5N/7ZJFGqLkgvdlKcU2YkBXo1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/MIIdZ/btsNFqiIn5N/7ZJFGqLkgvdlKcU2YkBXo1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/MIIdZ/btsNFqiIn5N/7ZJFGqLkgvdlKcU2YkBXo1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMIIdZ%2FbtsNFqiIn5N%2F7ZJFGqLkgvdlKcU2YkBXo1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"520\" height=\"166\" data-origin-width=\"520\" data-origin-height=\"166\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이게 되나 싶어서 안쓰는 프로젝트도 있고 하니 진행해봤습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"288\" data-origin-height=\"481\"><span data-url=\"https://blog.kakaocdn.net/dn/JVzxH/btsNFxvgpMW/KEBdpQlJlQq0sLrhvxVh4k/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/JVzxH/btsNFxvgpMW/KEBdpQlJlQq0sLrhvxVh4k/img.png\"><img src=\"https://blog.kakaocdn.net/dn/JVzxH/btsNFxvgpMW/KEBdpQlJlQq0sLrhvxVh4k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FJVzxH%2FbtsNFxvgpMW%2FKEBdpQlJlQq0sLrhvxVh4k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"288\" height=\"481\" data-origin-width=\"288\" data-origin-height=\"481\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">메뉴위치는 앱선택 -&gt; 테스트 및 출시 -&gt; 설정 -&gt; 앱 서명 -&gt; 업로드키 재설 정 요청</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"520\" data-origin-height=\"166\"><span data-url=\"https://blog.kakaocdn.net/dn/HOkUS/btsNFPbw0HO/376cID5YHkyGoA9OYZcMwk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/HOkUS/btsNFPbw0HO/376cID5YHkyGoA9OYZcMwk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/HOkUS/btsNFPbw0HO/376cID5YHkyGoA9OYZcMwk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHOkUS%2FbtsNFPbw0HO%2F376cID5YHkyGoA9OYZcMwk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"520\" height=\"166\" data-origin-width=\"520\" data-origin-height=\"166\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">누릅니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">keystore -&gt; pem 파일 얻기</h2>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=1zDpt341R7s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=1zDpt341R7s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=1zDpt341R7s\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bQsl7i/hyYMTfNpZw/W7lquCCJFSBnCgsVuzmnzK/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/XyQUr/hyYIkeRwNh/LCa4uYBRYwYsdd7mEEdi50/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"How to Set Unity Keystore and Export to PEM for Reset\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/1zDpt341R7s\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">keystore 가 버전업이 된거 같아서 인터넷에 떠도는 명령어로는 pem 파일을 얻을 수 없었습니다.</p>\n<p data-ke-size=\"size16\">영상에 보시면 keystore explorer 라는 프로그램을 사용하라길레</p>\n<p data-ke-size=\"size16\">안전이 좀 걱정되서 집에 잘 안쓴느 저사양 컴퓨터에 설치해서 실행해봤습니다.</p>\n<p data-ke-size=\"size16\">1. 설치하고</p>\n<p data-ke-size=\"size16\">2. 실행하고</p>\n<p data-ke-size=\"size16\">3. keystore 파일 드롭 하고</p>\n<p data-ke-size=\"size16\">4. 화면에보이는 keystore 를 더블 클릭하고</p>\n<p data-ke-size=\"size16\">5. 하단에 PEM 이라는 버튼을 눌러 pem 파일을 얻었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">pem 올리는 곳에 업로드 합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1109\" data-origin-height=\"637\"><span data-url=\"https://blog.kakaocdn.net/dn/boCBd6/btsNFvEadDU/iBgWNikz7vLKXdx6o8qlnK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/boCBd6/btsNFvEadDU/iBgWNikz7vLKXdx6o8qlnK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/boCBd6/btsNFvEadDU/iBgWNikz7vLKXdx6o8qlnK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FboCBd6%2FbtsNFvEadDU%2FiBgWNikz7vLKXdx6o8qlnK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1109\" height=\"637\" data-origin-width=\"1109\" data-origin-height=\"637\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">우측 하단에&nbsp; 요청 버튼이 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"273\" data-origin-height=\"122\"><span data-url=\"https://blog.kakaocdn.net/dn/bahw02/btsND6lGgv6/JMVIfD2L5kWJY3JPOHTbzk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bahw02/btsND6lGgv6/JMVIfD2L5kWJY3JPOHTbzk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bahw02/btsND6lGgv6/JMVIfD2L5kWJY3JPOHTbzk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbahw02%2FbtsND6lGgv6%2FJMVIfD2L5kWJY3JPOHTbzk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"273\" height=\"122\" data-origin-width=\"273\" data-origin-height=\"122\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">요청해봤습니다. 어떻게 되려나</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"756\" data-origin-height=\"283\"><span data-url=\"https://blog.kakaocdn.net/dn/bmme2h/btsNFWO5tKh/elN0Yvbm0dqhDOSrauzKR0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bmme2h/btsNFWO5tKh/elN0Yvbm0dqhDOSrauzKR0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bmme2h/btsNFWO5tKh/elN0Yvbm0dqhDOSrauzKR0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbmme2h%2FbtsNFWO5tKh%2FelN0Yvbm0dqhDOSrauzKR0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"756\" height=\"283\" data-origin-width=\"756\" data-origin-height=\"283\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">다시와서 보니 진행중이라고 나오네요</p>\n<p data-ke-size=\"size16\">(기다리는 중)</p>",
        "contentSnippet": "이게 되나 싶어서 안쓰는 프로젝트도 있고 하니 진행해봤습니다.\n\n\n메뉴위치는 앱선택 -> 테스트 및 출시 -> 설정 -> 앱 서명 -> 업로드키 재설 정 요청\n\n\n누릅니다.\n \n \n \nkeystore -> pem 파일 얻기\n영상: https://www.youtube.com/watch?v=1zDpt341R7s\n\n\n\nkeystore 가 버전업이 된거 같아서 인터넷에 떠도는 명령어로는 pem 파일을 얻을 수 없었습니다.\n영상에 보시면 keystore explorer 라는 프로그램을 사용하라길레\n안전이 좀 걱정되서 집에 잘 안쓴느 저사양 컴퓨터에 설치해서 실행해봤습니다.\n1. 설치하고\n2. 실행하고\n3. keystore 파일 드롭 하고\n4. 화면에보이는 keystore 를 더블 클릭하고\n5. 하단에 PEM 이라는 버튼을 눌러 pem 파일을 얻었습니다.\n \n \n \npem 올리는 곳에 업로드 합니다.\n\n\n우측 하단에  요청 버튼이 있습니다.\n\n\n요청해봤습니다. 어떻게 되려나\n \n\n\n다시와서 보니 진행중이라고 나오네요\n(기다리는 중)",
        "guid": "http://serverdown.tistory.com/1295",
        "categories": [
          "프로그래밍/개발메모",
          "앱서명",
          "플레이스토어"
        ],
        "isoDate": "2025-04-29T13:03:11.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "작업 상황 결과",
        "link": "http://serverdown.tistory.com/1294",
        "pubDate": "Tue, 29 Apr 2025 18:10:39 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1294#entry1294comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"274\" data-origin-height=\"149\"><span data-url=\"https://blog.kakaocdn.net/dn/bRg6gq/btsNFuSz78m/4IWPkwGESTzFDJT0PuzP40/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bRg6gq/btsNFuSz78m/4IWPkwGESTzFDJT0PuzP40/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bRg6gq/btsNFuSz78m/4IWPkwGESTzFDJT0PuzP40/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbRg6gq%2FbtsNFuSz78m%2F4IWPkwGESTzFDJT0PuzP40%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"274\" height=\"149\" data-origin-width=\"274\" data-origin-height=\"149\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><br /><br /></p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<h2 data-ke-size=\"size26\">1. 블록 분해 게임</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/Fg20e/btsNEE9ILLs/hYzyOYo2laYRFRl3WimWvK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/Fg20e/btsNEE9ILLs/hYzyOYo2laYRFRl3WimWvK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Fg20e/btsNEE9ILLs/hYzyOYo2laYRFRl3WimWvK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFg20e%2FbtsNEE9ILLs%2FhYzyOYo2laYRFRl3WimWvK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">블록 분해 게임을 빨리 올리려고 스토어에 스크린샷을 올릴때</p>\n<p data-ke-size=\"size16\">저의 다른 게임 스샷을 쓴게 있는데</p>\n<p data-ke-size=\"size16\">그게 정책위반으로 걸렸습니다.</p>\n<p data-ke-size=\"size16\">해명 절차에 들어갔지만 이것은 시간이 너무 많이 걸려서&nbsp;</p>\n<p data-ke-size=\"size16\">앱을 새로 만들어 출시를 눌러놓은 상태입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">2. 수조관 시계</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/b6FoxN/btsND1dhajl/WcKcRw6xkrtrQyZCF9UvZK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b6FoxN/btsND1dhajl/WcKcRw6xkrtrQyZCF9UvZK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b6FoxN/btsND1dhajl/WcKcRw6xkrtrQyZCF9UvZK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb6FoxN%2FbtsND1dhajl%2FWcKcRw6xkrtrQyZCF9UvZK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">설정 UI 를 추가해서 출시 눌렀습니다.</p>\n<p data-ke-size=\"size16\">유료로 1달러 정도 이며</p>\n<p data-ke-size=\"size16\">유료게임은 어떻게 돌아가는지 확인하고 싶었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">데모 영상: <a href=\"https://www.youtube.com/watch?v=KKUx71DhFAA\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=KKUx71DhFAA</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=KKUx71DhFAA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bnCNiH/hyYMPdmt44/tRG97O6kAqdINVDdWugBr1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/eM1dU/hyYH8k8mWM/WuFFhSlY8siKdJlasI6otK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"ac_1\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/KKUx71DhFAA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">3. 블록 깨기 게임</h2>\n<p data-ke-size=\"size16\">공동작업중이라 제가 정보를 올릴순 없고 말로 하자면</p>\n<p data-ke-size=\"size16\">출시하려고 했으나 테스터로 14 일 + 14일 테스트 기간을 채워야합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"580\" data-origin-height=\"191\"><span data-url=\"https://blog.kakaocdn.net/dn/b3P6RZ/btsNFSeCwgp/MWCUfZWDpRsuE1NpHC7faK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b3P6RZ/btsNFSeCwgp/MWCUfZWDpRsuE1NpHC7faK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b3P6RZ/btsNFSeCwgp/MWCUfZWDpRsuE1NpHC7faK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb3P6RZ%2FbtsNFSeCwgp%2FMWCUfZWDpRsuE1NpHC7faK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"580\" height=\"191\" data-origin-width=\"580\" data-origin-height=\"191\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">이 작업을 자발 적인 노력으로 끝내려면 상당히 완성도 있는 게임을 만들고</p>\n<p data-ke-size=\"size16\">배포해야 서로 해보겠다고 테스트를 해줄 것입니다.</p>\n<p data-ke-size=\"size16\">여러사람이 지인 찬스로 이 문제를 해결하고 있지만</p>\n<p data-ke-size=\"size16\">내가 좋아하는 게임도 아닌데 게임 테스트를 자발적으로 참여하는 일은 쉽지 않습니다.</p>\n<p data-ke-size=\"size16\">더군다나 완성도도 높지 않은 상황이라</p>\n<p data-ke-size=\"size16\">법인 계정은 이 절차를 거칠 필요가 없고 개인 사업자들은 해야하는 것으로 보입니다.</p>\n<p data-ke-size=\"size16\">제 계정은 오래전에 뚫어놓은거라 이절차가 없군요</p>\n<p data-ke-size=\"size16\">완성도를 높여야할 시간인거 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">잡다한 추가 작업</h2>\n<p data-ke-size=\"size16\">게임들의 홈페이지 작업을 해야합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "1. 블록 분해 게임\n\n\n블록 분해 게임을 빨리 올리려고 스토어에 스크린샷을 올릴때\n저의 다른 게임 스샷을 쓴게 있는데\n그게 정책위반으로 걸렸습니다.\n해명 절차에 들어갔지만 이것은 시간이 너무 많이 걸려서 \n앱을 새로 만들어 출시를 눌러놓은 상태입니다.\n \n \n2. 수조관 시계\n\n\n설정 UI 를 추가해서 출시 눌렀습니다.\n유료로 1달러 정도 이며\n유료게임은 어떻게 돌아가는지 확인하고 싶었습니다.\n \n데모 영상: https://www.youtube.com/watch?v=KKUx71DhFAA\n\n\n\n \n \n \n3. 블록 깨기 게임\n공동작업중이라 제가 정보를 올릴순 없고 말로 하자면\n출시하려고 했으나 테스터로 14 일 + 14일 테스트 기간을 채워야합니다.\n\n\n이 작업을 자발 적인 노력으로 끝내려면 상당히 완성도 있는 게임을 만들고\n배포해야 서로 해보겠다고 테스트를 해줄 것입니다.\n여러사람이 지인 찬스로 이 문제를 해결하고 있지만\n내가 좋아하는 게임도 아닌데 게임 테스트를 자발적으로 참여하는 일은 쉽지 않습니다.\n더군다나 완성도도 높지 않은 상황이라\n법인 계정은 이 절차를 거칠 필요가 없고 개인 사업자들은 해야하는 것으로 보입니다.\n제 계정은 오래전에 뚫어놓은거라 이절차가 없군요\n완성도를 높여야할 시간인거 같습니다.\n \n잡다한 추가 작업\n게임들의 홈페이지 작업을 해야합니다.",
        "guid": "http://serverdown.tistory.com/1294",
        "categories": [
          "프로그래밍/개발메모",
          "1인개발",
          "요약"
        ],
        "isoDate": "2025-04-29T09:10:39.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "수조관 시계 (관상용) / Unity Play",
        "link": "http://serverdown.tistory.com/1293",
        "pubDate": "Mon, 28 Apr 2025 17:54:12 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1293#entry1293comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"512\" data-origin-height=\"512\"><span data-url=\"https://blog.kakaocdn.net/dn/b0lre6/btsNEeovENS/1PxILkv9O5KyKgAvpprrsK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/b0lre6/btsNEeovENS/1PxILkv9O5KyKgAvpprrsK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/b0lre6/btsNEeovENS/1PxILkv9O5KyKgAvpprrsK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb0lre6%2FbtsNEeovENS%2F1PxILkv9O5KyKgAvpprrsK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"512\" height=\"512\" data-origin-width=\"512\" data-origin-height=\"512\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">거금 80달러를 써서 만든 시계 입니당.</p>\n<p data-ke-size=\"size16\">그냥 관산용</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">링크: <a href=\"https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc</a></p>\n<figure id=\"og_1745830375778\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"SIDNFT on Unity Play\" data-og-description=\"The place for aspiring game creators to share their latest Unity creation. Gain inspiration and find thousands of FPS, Karting, 2D Platformer and other creations with Unity. No experience needed, just jump in for the chance to be featured!\" data-og-host=\"play.unity.com\" data-og-source-url=\"https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\" data-og-url=\"https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\" data-og-image=\"https://scrap.kakaocdn.net/dn/C4oKA/hyYMZz4aHY/kcF6wWW2fDRs7WX1tEAmIK/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080,https://scrap.kakaocdn.net/dn/bBwgKi/hyYIcVbc6c/e5Rq8JhwZTE3J9NCHvikj1/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080\"><a href=\"https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/C4oKA/hyYMZz4aHY/kcF6wWW2fDRs7WX1tEAmIK/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080,https://scrap.kakaocdn.net/dn/bBwgKi/hyYIcVbc6c/e5Rq8JhwZTE3J9NCHvikj1/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">SIDNFT on Unity Play</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">The place for aspiring game creators to share their latest Unity creation. Gain inspiration and find thousands of FPS, Karting, 2D Platformer and other creations with Unity. No experience needed, just jump in for the chance to be featured!</p>\n<p class=\"og-host\" data-ke-size=\"size16\">play.unity.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=KKUx71DhFAA\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=KKUx71DhFAA</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=KKUx71DhFAA\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/daWWAj/hyYH5Wa4Ag/jYo1MUu5b5nUedrMg1s911/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/NZqn3/hyYL3JOWtZ/09VpQVLDzcgKzO2FBxALr0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"ac_1\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/KKUx71DhFAA\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "거금 80달러를 써서 만든 시계 입니당.\n그냥 관산용\n \n링크: https://play.unity.com/en/user/5ea53514-df56-4e49-9931-a08d1813a7cc\n\n \nSIDNFT on Unity Play\nThe place for aspiring game creators to share their latest Unity creation. Gain inspiration and find thousands of FPS, Karting, 2D Platformer and other creations with Unity. No experience needed, just jump in for the chance to be featured!\nplay.unity.com\n\n \n영상: https://www.youtube.com/watch?v=KKUx71DhFAA",
        "guid": "http://serverdown.tistory.com/1293",
        "categories": [
          "프로그래밍/자작"
        ],
        "isoDate": "2025-04-28T08:54:12.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "연예인들때문에 안티들이 붙어버린 10분짜리 우주여행 상품의 위기",
        "link": "http://serverdown.tistory.com/1292",
        "pubDate": "Mon, 28 Apr 2025 17:13:56 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1292#entry1292comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1202\" data-origin-height=\"664\"><span data-url=\"https://blog.kakaocdn.net/dn/ceRQIj/btsNDqQHtVB/usSRxN12nOGrDqKKYM7TE0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/ceRQIj/btsNDqQHtVB/usSRxN12nOGrDqKKYM7TE0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/ceRQIj/btsNDqQHtVB/usSRxN12nOGrDqKKYM7TE0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FceRQIj%2FbtsNDqQHtVB%2FusSRxN12nOGrDqKKYM7TE0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1202\" height=\"664\" data-origin-width=\"1202\" data-origin-height=\"664\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=mVXcdOcXOMI\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=mVXcdOcXOMI</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=mVXcdOcXOMI\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bH0Z5B/hyYMaPz7x6/yaglL1IFrDgDNPzh0M6JSK/img.jpg?width=1280&amp;height=720&amp;face=244_32_1234_524,https://scrap.kakaocdn.net/dn/bXE7r5/hyYFD0hcZ7/PB1v4ytoC8ojBj8Mtm1TNk/img.jpg?width=1280&amp;height=720&amp;face=244_32_1234_524\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"미국인들은 왜 이렇게 화가 났을까\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/mVXcdOcXOMI\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이게 과학자들이나 군인들이 갈 때는 별 지적이 없었는데</p>\n<p data-ke-size=\"size16\">여성들로 100% 뽑고&nbsp;연예인들이 섞이기 시작하니까<br />안티가 섞이고 있다고 합니다.</p>\n<p data-ke-size=\"size16\">지적사항은 여행 시간이 짧은데 대단한거냐</p>\n<p data-ke-size=\"size16\">엄청 위험하고 어려운거 같은데 알고보니 안전벨트 매고 버튼 한개 누르는 정도다</p>\n<p data-ke-size=\"size16\">옷이 이상하다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">아무튼 홍보는 꼬여버렸고 우주산업에는 위기가 올 수도 있습니다.</p>\n<p data-ke-size=\"size16\">여러번 하다보면 이런식으로 오렴되나 봅니다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=mVXcdOcXOMI\n\n\n\n \n \n이게 과학자들이나 군인들이 갈 때는 별 지적이 없었는데\n여성들로 100% 뽑고 연예인들이 섞이기 시작하니까\n안티가 섞이고 있다고 합니다.\n지적사항은 여행 시간이 짧은데 대단한거냐\n엄청 위험하고 어려운거 같은데 알고보니 안전벨트 매고 버튼 한개 누르는 정도다\n옷이 이상하다.\n \n아무튼 홍보는 꼬여버렸고 우주산업에는 위기가 올 수도 있습니다.\n여러번 하다보면 이런식으로 오렴되나 봅니다.",
        "guid": "http://serverdown.tistory.com/1292",
        "categories": [
          "유튜브",
          "미국",
          "우주여행"
        ],
        "isoDate": "2025-04-28T08:13:56.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "132일차 요약 / 1인 게임 개발",
        "link": "http://serverdown.tistory.com/1291",
        "pubDate": "Mon, 28 Apr 2025 10:51:51 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1291#entry1291comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"831\" data-origin-height=\"299\"><span data-url=\"https://blog.kakaocdn.net/dn/OZFvO/btsNDb6xbEI/usUkQJnWiO836P3uwjYkTk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/OZFvO/btsNDb6xbEI/usUkQJnWiO836P3uwjYkTk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/OZFvO/btsNDb6xbEI/usUkQJnWiO836P3uwjYkTk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FOZFvO%2FbtsNDb6xbEI%2FusUkQJnWiO836P3uwjYkTk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"831\" height=\"299\" data-origin-width=\"831\" data-origin-height=\"299\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">질러버린 애셋 두개</p>\n<p data-ke-size=\"size16\">원화로는 14만5천원이군요</p>\n<p data-ke-size=\"size16\">물고기는 할인이 아니라 비싸게 느껴지네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=BMSG0VyT_-E\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=BMSG0VyT_-E</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=BMSG0VyT_-E\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/c2oYIN/hyYMPjVszg/K4Td9x6lUPC7kdmFu5cU81/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360,https://scrap.kakaocdn.net/dn/Ouqnn/hyYJtwt4dL/Pyzuqkwoi6DCjrVoKq71f1/img.jpg?width=480&amp;height=360&amp;face=0_0_480_360\" data-video-width=\"480\" data-video-height=\"360\" data-video-origin-width=\"480\" data-video-origin-height=\"360\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"132일차 / 개발 진행 상황\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/BMSG0VyT_-E\" width=\"480\" height=\"360\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">요약:&nbsp;</h2>\n<h3 data-ke-size=\"size23\">1. 블록 분해 게임 작업</h3>\n<p data-ke-size=\"size16\">링크: <a href=\"https://serverdown.tistory.com/1290\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://serverdown.tistory.com/1290</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\">2. Add Force 1 히어로 추가 작업</h3>\n<p data-ke-size=\"size16\">글 링크: <a href=\"https://blog.sidnft.com/1279\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://blog.sidnft.com/1279</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\">3 테스트 하려고 샀던 수이 코인이 떡상한 사연</h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"869\" data-origin-height=\"497\"><span data-url=\"https://blog.kakaocdn.net/dn/1SDaY/btsNBEoh5FK/5X2q4sg03m008pvb3J0NS0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/1SDaY/btsNBEoh5FK/5X2q4sg03m008pvb3J0NS0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/1SDaY/btsNBEoh5FK/5X2q4sg03m008pvb3J0NS0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F1SDaY%2FbtsNBEoh5FK%2F5X2q4sg03m008pvb3J0NS0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"869\" height=\"497\" data-origin-width=\"869\" data-origin-height=\"497\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">우연히 얻은 수익 좀 팔아봤습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">4. &nbsp;유니티 애셋 구매 (수이 팔아서)</p>\n<p data-ke-size=\"size16\">- 물고기 3D<br />영상: <a href=\"https://www.youtube.com/watch?time_continue=4&amp;v=OOzC3r0pBCo&amp;embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&amp;embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&amp;source_ve_path=MjM4NTE\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?time_continue=4&amp;v=OOzC3r0pBCo&amp;embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&amp;embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&amp;source_ve_path=MjM4NTE</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=OOzC3r0pBCo\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/2TAOJ/hyYM0FKMFZ/VGZbkvoSfyMD7RrjEPOF0K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/b9XTf1/hyYFB2ofK9/QIl9QP4eEWRIbo2KxVz79K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"3D Fish\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/OOzC3r0pBCo\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">- text to voice (글자를 음성으로 변환)<br />글 링크: <a href=\"https://blog.sidnft.com/1285\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://blog.sidnft.com/1285</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">코인을 팔아서&nbsp;제일위에 그림처럼 애샛을 구매했습니다.</p>\n<p data-ke-size=\"size16\">다 나은 결과가 있기를</p>",
        "contentSnippet": "질러버린 애셋 두개\n원화로는 14만5천원이군요\n물고기는 할인이 아니라 비싸게 느껴지네요\n \n영상: https://www.youtube.com/watch?v=BMSG0VyT_-E\n\n\n\n \n요약: \n1. 블록 분해 게임 작업\n링크: https://serverdown.tistory.com/1290\n \n2. Add Force 1 히어로 추가 작업\n글 링크: https://blog.sidnft.com/1279\n \n3 테스트 하려고 샀던 수이 코인이 떡상한 사연\n\n\n우연히 얻은 수익 좀 팔아봤습니다.\n \n4.  유니티 애셋 구매 (수이 팔아서)\n- 물고기 3D\n영상: https://www.youtube.com/watch?time_continue=4&v=OOzC3r0pBCo&embeds_referring_euri=https%3A%2F%2Fassetstore.unity.com%2F&embeds_referring_origin=https%3A%2F%2Fassetstore.unity.com&source_ve_path=MjM4NTE\n\n\n\n \n- text to voice (글자를 음성으로 변환)\n글 링크: https://blog.sidnft.com/1285\n \n \n \n \n코인을 팔아서 제일위에 그림처럼 애샛을 구매했습니다.\n다 나은 결과가 있기를",
        "guid": "http://serverdown.tistory.com/1291",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2025-04-28T01:51:51.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": [
      {
        "creator": "megayuchi",
        "title": "GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing 성능비교",
        "link": "https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/",
        "pubDate": "Thu, 01 May 2025 09:35:21 +0000",
        "content:encodedSnippet": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. \nhttps://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/\n스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다.\n\n\n\n\ngpu바꾼 김에 성능 비교를 좀 해봤다.\nRTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다.\n해상도 : 512×512 , voxel 오브젝트 개수 : 54000개, 1×1 복셀로 환산 voxel 개수 : 714만개\n[i3-12100, GTX 1660ti]\nST – 2710.8518 ms\nMT – 584.7888 ms\nCUDA – 3.3825 ms\n[i7-13800H, RTX 4050]\nST – 2558.8728 ms\nMT – 313.6158 ms\nCUDA – 1.4541 ms\n[i7-13700K, RTX 5070]\nST – 2165.4072 ms\nMT – 242.3115 ms\nCUDA – 0.6885 ms",
        "dc:creator": "megayuchi",
        "comments": "https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/#respond",
        "content": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. https://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/ 스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다. gpu바꾼 김에 성능 비교를 좀 해봤다.RTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다. 해상도 : 512&#215;512 , voxel 오브젝트 개수 : 54000개, 1&#215;1 복셀로 환산 voxel 개수 : 714만개 [i3-12100, &#8230; <a class=\"more-link\" href=\"https://megayuchi.com/2025/05/01/gtx1660ti-vs-rtx4050-vs-rtx5070-cuda-raytracing-%ec%84%b1%eb%8a%a5%eb%b9%84%ea%b5%90/\">More <span class=\"screen-reader-text\">GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing&#160;성능비교</span></a>",
        "contentSnippet": "voxel horizon에선 보이는 voxel오브젝트를 선별하기 위해 cuda를 사용해서 실시간으로 raytracing을 수행한다. https://megayuchi.com/2021/09/15/cuda-raytracing%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%9c-voxel-%ec%98%a4%eb%b8%8c%ec%a0%9d%ed%8a%b8-%ea%b0%80%ec%8b%9c%ec%84%b1-%ed%85%8c%ec%8a%a4%ed%8a%b8/ 스샷의 상단 화면이 cuda raytracing결과로 얻은 depth buffer와 보이는 오브젝트 목록이다. gpu바꾼 김에 성능 비교를 좀 해봤다.RTX4050이 GTX1660Ti보다 2.3배 정도 빠르고, RTX5070이 RTX4050보다 2.1배 정도 빠르다. 해상도 : 512×512 , voxel 오브젝트 개수 : 54000개, 1×1 복셀로 환산 voxel 개수 : 714만개 [i3-12100, … More GTX1660ti vs RTX4050 vs RTX5070 cuda raytracing 성능비교",
        "guid": "http://megayuchi.com/?p=7101",
        "categories": [
          "Development",
          "CUDA",
          "Game Engine Development",
          "Voxel Horizon"
        ],
        "isoDate": "2025-05-01T09:35:21.000Z"
      }
    ]
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "MCP 개념 및 LINE Messaging API를 활용한 MCP 서버 구축 사례 소개",
        "link": "https://techblog.lycorp.co.jp/ko/introduction-to-mcp-and-building-mcp-server-using-line-messaging-api",
        "pubDate": "Fri, 02 May 2025 02:00:00 GMT",
        "content": "들어가며최근 Anthropic에서 Claude LLM을 통해 모델 컨텍스트 프로토콜(Model Context Protocol, 이하 MCP)을 발표했습니다. MCP는 대형 언어 모...",
        "contentSnippet": "들어가며최근 Anthropic에서 Claude LLM을 통해 모델 컨텍스트 프로토콜(Model Context Protocol, 이하 MCP)을 발표했습니다. MCP는 대형 언어 모...",
        "guid": "https://techblog.lycorp.co.jp/ko/introduction-to-mcp-and-building-mcp-server-using-line-messaging-api",
        "isoDate": "2025-05-02T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": [
      {
        "creator": "호돌맨",
        "title": "신용산역에서 바라본 남산타워",
        "link": "https://hodolman.tistory.com/72",
        "pubDate": "Thu, 1 May 2025 20:06:21 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/72#entry72comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000355x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bOmc1j/btsNGTe6jvf/pI34ULLziyVkiycD5JXklK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbOmc1j%2FbtsNGTe6jvf%2FpI34ULLziyVkiycD5JXklK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000355x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000535x4.jpg\" data-origin-width=\"2000\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PyWSY/btsNHtzYLf5/lLWj4jc0tbh0ylcH1P0Tuk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPyWSY%2FbtsNHtzYLf5%2FlLWj4jc0tbh0ylcH1P0Tuk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2000\" height=\"3000\" data-filename=\"edited_DSC000535x4.jpg\" data-origin-width=\"2000\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000635x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/blI5l2/btsNIvYbPa7/VjqCpM03WGFkcPTtPaAnG1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FblI5l2%2FbtsNIvYbPa7%2FVjqCpM03WGFkcPTtPaAnG1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000635x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000685x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/4l9FU/btsNGTzrIbK/KLwETFn3DCoK2ghhEu1Ru1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4l9FU%2FbtsNGTzrIbK%2FKLwETFn3DCoK2ghhEu1Ru1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2400\" height=\"3000\" data-filename=\"edited_DSC000685x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000735x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/PIRpl/btsNGT0xmM9/pIJgBWgF8s1xIFyO97zKWK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPIRpl%2FbtsNGT0xmM9%2FpIJgBWgF8s1xIFyO97zKWK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2400\" height=\"3000\" data-filename=\"edited_DSC000735x4.jpg\" data-origin-width=\"2400\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSC000645x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"><span data-url=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/9YJsH/btsNIASGcEi/riLX60KuFL3zFrPM1Mo0zK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F9YJsH%2FbtsNIASGcEi%2FriLX60KuFL3zFrPM1Mo0zK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"1800\" height=\"1440\" data-filename=\"edited_DSC000645x4.jpg\" data-origin-width=\"1800\" data-origin-height=\"1440\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">남산타워라고 하면 너무 아재같나</p>",
        "contentSnippet": "남산타워라고 하면 너무 아재같나",
        "guid": "https://hodolman.tistory.com/72",
        "categories": [
          "사진",
          "남산타워",
          "신용산",
          "용산"
        ],
        "isoDate": "2025-05-01T11:06:21.000Z"
      },
      {
        "creator": "호돌맨",
        "title": "배드맨",
        "link": "https://hodolman.tistory.com/71",
        "pubDate": "Tue, 29 Apr 2025 22:16:49 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/71#entry71comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"DSC000155x4.jpg\" data-origin-width=\"2420\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/cHRQdA/btsNECdf4si/IdYkGkmGrg1Yaz1X8cxg2k/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcHRQdA%2FbtsNECdf4si%2FIdYkGkmGrg1Yaz1X8cxg2k%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" loading=\"lazy\" width=\"2420\" height=\"3000\" data-filename=\"DSC000155x4.jpg\" data-origin-width=\"2420\" data-origin-height=\"3000\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">기변하고</p>\n<p data-ke-size=\"size16\">소사역 부근에서 촬영했습니다.</p>",
        "contentSnippet": "기변하고\n소사역 부근에서 촬영했습니다.",
        "guid": "https://hodolman.tistory.com/71",
        "categories": [
          "사진",
          "배드맨",
          "빛과어둠"
        ],
        "isoDate": "2025-04-29T13:16:49.000Z"
      }
    ]
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": [
      {
        "title": "63,000건 배치 처리 중 락 유발 이슈 회고",
        "link": "https://velog.io/@sweet_sumin/63000%EA%B1%B4-%EB%B0%B0%EC%B9%98-%EC%B2%98%EB%A6%AC-%EC%A4%91-%EB%9D%BD-%EC%9C%A0%EB%B0%9C-%EC%9D%B4%EC%8A%88-%ED%9A%8C%EA%B3%A0",
        "pubDate": "Fri, 02 May 2025 08:02:37 GMT",
        "content": "<p>운영 서버에서 63,000건의 이미지 배치 작업 중 락이 발생하며 장애가 발생했다. 처음 겪는 규모 있는 데이터 처리 이슈였고, 원인은 단순하지만 치명적이었다. 이 글은 그 문제의 원인, 해결, 그리고 회고를 정리한 실무 경험 공유이다.</p>\n<h2 id=\"배경\">배경</h2>\n<p>이번에 회사에서 진행했던 프로젝트는 승인서버 프로젝트이다. 승인서버 프로젝트는 외부 연동으로 들어온 데이터를 우리 관리 시스템으로 들어오기 전에 검수하는 시스템을 구축하는 프로젝트다.\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/6fed5c7c-cb69-47db-b20a-22c575e9de44/image.png\" alt=\"\"></p>\n<p>크게 보면 이렇게 볼 수 있다. </p>\n<p>여기서 내가 한 일 중 하나는 이미지 배치 처리 기능의 설계 및 구현이다. 주요 작업은 다음과 같다.</p>\n<h4 id=\"s3-이미지-업로드를-위한-비동기-배치-모듈-개발\">S3 이미지 업로드를 위한 비동기 배치 모듈 개발</h4>\n<ul>\n<li>1시간 단위로 실행되는 이미지 배치 작업: INIT, FAIL 상태이며 재시도 횟수가 1 이하인 프로덕트/아이템 이미지를 대상으로 처리</li>\n<li>특정 프로덕트 단위의 재연동 기능 구현: 선택된 프로덕트의 INIT, FAIL 상태 이미지만 재처리하며, 재시도 제한 없음<h4 id=\"이미지-업로드-후-상태-및-재시도-관리\">이미지 업로드 후 상태 및 재시도 관리</h4>\n</li>\n<li>업로드 성공 시: retry 횟수 증가 + 상태 COMPLETE로 변경</li>\n<li>업로드 실패 시: retry 횟수 증가 + 상태 FAIL 유지 및 슬랙 알림 전송</li>\n</ul>\n<h3 id=\"배치를-적용한-이유\">배치를 적용한 이유</h3>\n<p>2차 승인 단계에서 등록되는 각 프로덕트/아이템은 여러 개의 이미지를 포함하고 있으며, 이 이미지들은 모두 AWS S3에 업로드되어야 한다. 초기에는 등록 시점에 실시간으로 이미지를 업로드하는 방식도 고려했지만, 아래와 같은 이유로 배치 처리 방식을 도입하게 되었다.</p>\n<h4 id=\"성능-이슈\">성능 이슈</h4>\n<p>이미지 업로드는 네트워크 I/O와 S3 API 호출이 포함된 작업으로, 처리 시간이 길다. 이를 실시간으로 수행할 경우 등록 속도가 느려지고, 사용자 경험에도 부정적인 영향을 줄 수 있다.</p>\n<h4 id=\"처리-안정성-확보\">처리 안정성 확보</h4>\n<p>등록 도중 이미지 업로드에 실패하면 전체 등록이 실패할 수 있다. 배치로 처리하면 실패한 이미지에 한해 재처리할 수 있어 안정적인 처리가 가능하다.</p>\n<h4 id=\"s3-요청-비용-최적화\">S3 요청 비용 최적화</h4>\n<p>AWS S3는 요청 건수에 따라 비용이 발생한다. 실시간으로 이미지를 업로드할 경우, 이미지 수만큼 S3 요청이 발생하고, 트래픽이 많아질수록 비용도 크게 증가한다.\n배치 처리 방식은 요청을 모아서 처리하기 때문에 네트워크 연결 및 클라이언트 설정을 재사용할 수 있고, 요청 효율을 높여 비용 절감과 처리 흐름 단순화에 기여한다.</p>\n<p>이러한 이유로 이미지 업로드 작업을 프로덕트/아이템 등록 시점이 아닌 배치 처리로 전환하게 되었고, 해당 로직의 설계와 구현은 내가 직접 맡아 수행하였다.</p>\n<h2 id=\"장애-발생-및-대응\">장애 발생 및 대응</h2>\n<p>시원한 음료 한 잔 마시며 한숨 돌리고 있던 그 때\n경고가 떴다!!!!!!\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/ef11a743-65ba-4ee4-bca4-897c62e68487/image.png\" alt=\"\">\n락이 걸린다고? 갑자기?? 배치에서??? 왜???\n범인은 나였다. 나야 나...(내가 그 주인공이 될 줄은 몰랐다)</p>\n<h4 id=\"원인\">원인</h4>\n<p>이미지 업로드를 시키는 과정은 사실 단순하다. </p>\n<p>1) INIT,FAIL 상태 &amp; 재시도 1 이하인 임시이미지 조회\n2) 해당 이미지 S3에 업로드\n3) 해당 이미지 상태, 재시도 개수 수정 저장</p>\n<p>근데 문제는 내가 데이터의 규모를 예상치 못하고 조회시 관련 모든 데이터를 가져오게 만들었다는 것이다. 사실 이것만 봤을때는 뭐가 문제인데 할 수 있다. 관련 모든 데이터를 가져오는게 맞잖아?\n그러나.. 데이터의 양이 6만 3천개라면?\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/5e3ed05d-2227-4f5f-8b61-37225eea1f6f/image.png\" alt=\"\"></p>\n<h4 id=\"왜-락이-걸렸을까\">왜 락이 걸렸을까?</h4>\n<p>쉽게 말하면 6만개의 데이터를 수정하면서도 저장(flush)를 미루니까 트랜잭션이 너무 길어지고 락이 오래 유지되는 상황에서 동시에 같은 row에 접근하려는 다른 트랜잭션과 충돌이 발생하게 된것이다. </p>\n<blockquote>\n<p>정리하면, 다음 세 가지가 문제의 핵심이었다:</p>\n</blockquote>\n<ol>\n<li>한 번에 모든 데이터를 불러옴 (6만 건)</li>\n<li>처리 중간에 flush 없이 트랜잭션을 유지</li>\n<li>DB 업데이트가 지연되면서 row-level lock 충돌 발생</li>\n</ol>\n<h4 id=\"해결법\">해결법</h4>\n<p>page 단위로 chunk 100개씩 가져와서 락을 빨리 빨리 해제하도록 수정하였다. </p>\n<ul>\n<li><p>AS_IS <img src=\"https://velog.velcdn.com/images/sweet_sumin/post/0493b66f-93fa-4415-a80a-3bbff7f8dc0b/image.png\" alt=\"\"></p>\n</li>\n<li><p>TO_BE\n<img src=\"https://velog.velcdn.com/images/sweet_sumin/post/07dd7da4-25ee-46d6-af76-baca4dff96c7/image.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"후기\">후기</h2>\n<p>해결 방법은 단순했다. 데이터를 페이지 단위로 나눠서 처리하면 되는 일이었다. 하지만 처음에는 그 방식이 떠오르지 않았다. 테스트 환경에서는 문제없이 동작했고, 실제 운영에서 63,000건이 넘는 데이터가 한 번에 들어올 거라고는 예상하지 못했기 때문이다.</p>\n<p>이번 일을 통해 대규모 데이터 처리에서의 사소한 설계 차이가 시스템 안정성에 큰 영향을 줄 수 있다는 점을 몸소 깨달았다. 특히 다음 두 가지를 깊이 체감했다:</p>\n<ul>\n<li><p>운영 환경 데이터를 기준으로 사고할 것</p>\n</li>\n<li><p>트랜잭션은 짧고 명확하게 유지할 것</p>\n</li>\n</ul>\n<p>실제 장애는 대량 데이터를 한꺼번에 처리하면서 트랜잭션이 길어지고, 그로 인해 DB 락 충돌이 발생한 것이 원인이었다. 이후 100건 단위로 나눠 처리하는 방식으로 개선하면서 락 점유 시간을 줄일 수 있었다.</p>\n<p>단순한 설계 실수도 큰 장애로 이어질 수 있다는 점을 다시금 느꼈고, 앞으로는 더 철저하게 사고하고 검증해야겠다는 다짐을 하게 된 경험이었다.</p>\n",
        "contentSnippet": "운영 서버에서 63,000건의 이미지 배치 작업 중 락이 발생하며 장애가 발생했다. 처음 겪는 규모 있는 데이터 처리 이슈였고, 원인은 단순하지만 치명적이었다. 이 글은 그 문제의 원인, 해결, 그리고 회고를 정리한 실무 경험 공유이다.\n배경\n이번에 회사에서 진행했던 프로젝트는 승인서버 프로젝트이다. 승인서버 프로젝트는 외부 연동으로 들어온 데이터를 우리 관리 시스템으로 들어오기 전에 검수하는 시스템을 구축하는 프로젝트다.\n\n크게 보면 이렇게 볼 수 있다. \n여기서 내가 한 일 중 하나는 이미지 배치 처리 기능의 설계 및 구현이다. 주요 작업은 다음과 같다.\nS3 이미지 업로드를 위한 비동기 배치 모듈 개발\n1시간 단위로 실행되는 이미지 배치 작업: INIT, FAIL 상태이며 재시도 횟수가 1 이하인 프로덕트/아이템 이미지를 대상으로 처리\n특정 프로덕트 단위의 재연동 기능 구현: 선택된 프로덕트의 INIT, FAIL 상태 이미지만 재처리하며, 재시도 제한 없음\n이미지 업로드 후 상태 및 재시도 관리\n업로드 성공 시: retry 횟수 증가 + 상태 COMPLETE로 변경\n업로드 실패 시: retry 횟수 증가 + 상태 FAIL 유지 및 슬랙 알림 전송\n배치를 적용한 이유\n2차 승인 단계에서 등록되는 각 프로덕트/아이템은 여러 개의 이미지를 포함하고 있으며, 이 이미지들은 모두 AWS S3에 업로드되어야 한다. 초기에는 등록 시점에 실시간으로 이미지를 업로드하는 방식도 고려했지만, 아래와 같은 이유로 배치 처리 방식을 도입하게 되었다.\n성능 이슈\n이미지 업로드는 네트워크 I/O와 S3 API 호출이 포함된 작업으로, 처리 시간이 길다. 이를 실시간으로 수행할 경우 등록 속도가 느려지고, 사용자 경험에도 부정적인 영향을 줄 수 있다.\n처리 안정성 확보\n등록 도중 이미지 업로드에 실패하면 전체 등록이 실패할 수 있다. 배치로 처리하면 실패한 이미지에 한해 재처리할 수 있어 안정적인 처리가 가능하다.\nS3 요청 비용 최적화\nAWS S3는 요청 건수에 따라 비용이 발생한다. 실시간으로 이미지를 업로드할 경우, 이미지 수만큼 S3 요청이 발생하고, 트래픽이 많아질수록 비용도 크게 증가한다.\n배치 처리 방식은 요청을 모아서 처리하기 때문에 네트워크 연결 및 클라이언트 설정을 재사용할 수 있고, 요청 효율을 높여 비용 절감과 처리 흐름 단순화에 기여한다.\n이러한 이유로 이미지 업로드 작업을 프로덕트/아이템 등록 시점이 아닌 배치 처리로 전환하게 되었고, 해당 로직의 설계와 구현은 내가 직접 맡아 수행하였다.\n장애 발생 및 대응\n시원한 음료 한 잔 마시며 한숨 돌리고 있던 그 때\n경고가 떴다!!!!!!\n\n락이 걸린다고? 갑자기?? 배치에서??? 왜???\n범인은 나였다. 나야 나...(내가 그 주인공이 될 줄은 몰랐다)\n원인\n이미지 업로드를 시키는 과정은 사실 단순하다. \n1) INIT,FAIL 상태 & 재시도 1 이하인 임시이미지 조회\n2) 해당 이미지 S3에 업로드\n3) 해당 이미지 상태, 재시도 개수 수정 저장\n근데 문제는 내가 데이터의 규모를 예상치 못하고 조회시 관련 모든 데이터를 가져오게 만들었다는 것이다. 사실 이것만 봤을때는 뭐가 문제인데 할 수 있다. 관련 모든 데이터를 가져오는게 맞잖아?\n그러나.. 데이터의 양이 6만 3천개라면?\n\n왜 락이 걸렸을까?\n쉽게 말하면 6만개의 데이터를 수정하면서도 저장(flush)를 미루니까 트랜잭션이 너무 길어지고 락이 오래 유지되는 상황에서 동시에 같은 row에 접근하려는 다른 트랜잭션과 충돌이 발생하게 된것이다. \n정리하면, 다음 세 가지가 문제의 핵심이었다:\n한 번에 모든 데이터를 불러옴 (6만 건)\n처리 중간에 flush 없이 트랜잭션을 유지\nDB 업데이트가 지연되면서 row-level lock 충돌 발생\n해결법\npage 단위로 chunk 100개씩 가져와서 락을 빨리 빨리 해제하도록 수정하였다. \nAS_IS \nTO_BE\n\n후기\n해결 방법은 단순했다. 데이터를 페이지 단위로 나눠서 처리하면 되는 일이었다. 하지만 처음에는 그 방식이 떠오르지 않았다. 테스트 환경에서는 문제없이 동작했고, 실제 운영에서 63,000건이 넘는 데이터가 한 번에 들어올 거라고는 예상하지 못했기 때문이다.\n이번 일을 통해 대규모 데이터 처리에서의 사소한 설계 차이가 시스템 안정성에 큰 영향을 줄 수 있다는 점을 몸소 깨달았다. 특히 다음 두 가지를 깊이 체감했다:\n운영 환경 데이터를 기준으로 사고할 것\n트랜잭션은 짧고 명확하게 유지할 것\n실제 장애는 대량 데이터를 한꺼번에 처리하면서 트랜잭션이 길어지고, 그로 인해 DB 락 충돌이 발생한 것이 원인이었다. 이후 100건 단위로 나눠 처리하는 방식으로 개선하면서 락 점유 시간을 줄일 수 있었다.\n단순한 설계 실수도 큰 장애로 이어질 수 있다는 점을 다시금 느꼈고, 앞으로는 더 철저하게 사고하고 검증해야겠다는 다짐을 하게 된 경험이었다.",
        "guid": "https://velog.io/@sweet_sumin/63000%EA%B1%B4-%EB%B0%B0%EC%B9%98-%EC%B2%98%EB%A6%AC-%EC%A4%91-%EB%9D%BD-%EC%9C%A0%EB%B0%9C-%EC%9D%B4%EC%8A%88-%ED%9A%8C%EA%B3%A0",
        "isoDate": "2025-05-02T08:02:37.000Z"
      }
    ]
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "스토커와 같이 집착해라",
        "link": "https://www.thestartupbible.com/2025/04/be-obsessed-like-a-stalker-on-your-product-and-customers.html",
        "pubDate": "Sun, 27 Apr 2025 21:36:00 +0000",
        "content:encodedSnippet": "공식 라이선스 스포츠용품을 판매하는 Fanatics라는 미국 회사가 있다. 한국에서는 잘 알려지지 않았지만, 미국인이라면 Fanatics 사이트 또는 이 회사가 운영하는 수많은 이커머스 플랫폼에서 뭐라도 한 번은 사 봤을 것이다. 미국 모든 대학교의 공식 라이선스 제품을 판매하고 있고, NBA, NFL, MLB 등 프로 스포츠 공식 라이선스 제품도 다 판매하는, 기업가치 약 40조 원의 거대한 이커머스 회사이다.\n나도 여기서 돈을 꽤 많이 썼는데, 운동용품과 굿즈를 좋아하는 사람이라면 Fanatics.com에서 한 시간은 거뜬히 체류할 수 있다. 그만큼 다양한 제품이 있고, 사이트도 잘 만들었다. 얼마 전에 이 회사의 창업가 마이클 루빈의 인터뷰를 들었는데, 다른 모든 창업가들의 이야기와 비슷하게, 이분의 인터뷰도 너무 재미있게 들었다.\n감명 깊게 들었던 건 이 창업가의 집착이었는데, 뭐를 하던지 고객과 제품에 대한 거의 스토킹 수준의 집착으로 남보다 더 빠른 학습 커브를 만든 내용이 머릿속에 남는다. 특히 기억에 남는 부분은, 시장에 어떤 신발을 판매하면 가장 인기 있고, 가장 많이 팔 수 있을지를 판단하기 위해서 아침부터 저녁까지 하루 종일 밖에서 길거리에 다니는 사람들이 뭘 신고 다니는지, 그리고 어떤 신발을 신는지 관찰했다고 한다. 이렇게 하루 종일 신발만 보니 시장에 대한 감이 생기고, 어떤 발/다리 모양이 어떤 신발을 많이 착용하는지 직관적으로 이해했다고 한다. 이 짓을 수개월 동안 해서 목디스크가 생겼다는 웃픈 이야기를 했는데, 이 일화는 내가 평생 기억할 것 같다.\n몇 달 전에 ‘고객에게 미친 사람들’이라는 글에서 이와 비슷하게 고객의 목소리에 집착하는 창업가에 대한 이야기를 한 적이 있는데, 솔직히 이런 창업가들이 점점 희귀해진다는 생각을 최근에 많이 한다. 요새 내가 만나는 창업가들은 과거 대비 학벌도 더 좋고, 영어도 더 잘하고, 개발도 더 잘하고, 펀딩도 더 잘해서 확실히 high quality 창업가들이긴 하지만, Fanatics 창업가와 같은 스토커 수준의 집착은 오히려 점점 더 찾아보기 힘들다.\n스타트업은 처음부터 기울어진 운동장에서 무서운 상대방과 불공평한 경기를 해야 한다. 이 우승 확률이 낮은 경기에서 그나마 확률을 높이기 위해선, 완벽한 제품을 만들어야 하고, 이 제품을 사업으로 키우기 위한 자금을 확보해야 하고, 이 사업으로 기울어진 운동장에서 이기기 위해 좋은 인재를 확보해야 한다. 이 모든 걸 운동장의 반대편에 있는 상대방이 현재의 일등 위치에 도달하기 위해 걸렸던 시간보다 훨씬 더 빨리 압축해서 해야 한다. 결론은 매사에 열심히 해야 하고, 매사에 집착해야 한다. Fanatics 대표가 하루 종일 대가리를 땅에 처박고 사람들의 신발만 봤던 그 자세로 스토커같이 집착해야 한다.\n우리 회사 임직원들은 우리가 만드는 제품에 대해서 이렇게 하루 종일 생각하는가? 우리 고객이 뭘 원하는지 알아내기 위해서 스토커와 같은 마인드로 집착하고 있나? 날이 갈수록 경쟁이 심화되고, 기울어진 운동장의 경사는 더 가팔라지는데, 스토커와 같은 마인드로 우리 제품, 고객, 직원, 성공에 집착하지 않으면 매번 지는 경기를 할 것이다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2025/04/be-obsessed-like-a-stalker-on-your-product-and-customers.html#respond",
        "content": "공식 라이선스 스포츠용품을 판매하는 Fanatics라는 미국 회사가 있다. 한국에서는 잘 알려지지 않았지만, 미국인이라면 Fanatics 사이트 또는 이 회사가 운영하는 수많은 이커머스 플랫폼에서 뭐라도 한 번은 사 봤을 것이다. 미국 모든 대학교의 공식 라이선스 제품을 판매하고 있고, NBA, NFL, MLB 등 프로 스포츠 공식 라이선스 제품도 다 판매하는, 기업가치 약 40조 원의 거대한 이커머스 회사이다. 나도(...)",
        "contentSnippet": "공식 라이선스 스포츠용품을 판매하는 Fanatics라는 미국 회사가 있다. 한국에서는 잘 알려지지 않았지만, 미국인이라면 Fanatics 사이트 또는 이 회사가 운영하는 수많은 이커머스 플랫폼에서 뭐라도 한 번은 사 봤을 것이다. 미국 모든 대학교의 공식 라이선스 제품을 판매하고 있고, NBA, NFL, MLB 등 프로 스포츠 공식 라이선스 제품도 다 판매하는, 기업가치 약 40조 원의 거대한 이커머스 회사이다. 나도(...)",
        "guid": "https://www.thestartupbible.com/?p=9435",
        "categories": [
          "Uncategorized",
          "competition",
          "FoundersAtWork",
          "hustle",
          "product",
          "스타트업 바이블 QA"
        ],
        "isoDate": "2025-04-27T21:36:00.000Z"
      }
    ]
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "개인정보가 불안할 때, 토스 쓰면 안전한 이유",
        "link": "https://blog.toss.im/article/toss-guide-safety",
        "pubDate": "Fri, 02 May 2025 10:21:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}최근 개인정보 유출 사고가 자주 일어나면서 관련 우려가 커지고 있습니다. 언제나 안심하고 쓸 수 있도록, .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}토스가 고객들의 개인정보를 지키는 기술과 정책, 또 토스를 활용해 더 안전하게 금융생활하는 법을 알려드릴게요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}토스가 미리 지켜드려요\n🔒 토스 피싱제로\n토스에는 악성 앱 탐지 솔루션이 탑재되어 있습니다. 토스 보안기술팀이 자체 개발한 ‘악성 앱 분석 자동화 시스템’을 활용해 휴대폰에 설치된 앱의 악성 여부를 감지해내죠. 내 휴대폰에 악성 앱이 깔려 있으면 빠르게 알아채고 앱 삭제를 권합니다. 의심스러운 앱 설치나 접근도 감지하고 경고해요.\n토스 피싱제로는 지난 2023년 출시 이후 1년 반 동안 악성 앱 86만 건을 잡았습니다.\n🔒 FDS(이상거래 탐지 시스템)\n토스는 365일 24시간 고객의 거래 패턴을 실시간으로 분석하고 있습니다. 이상 징후를 감지해 즉시 차단하기 위해서예요. 그래서 만약 평소와 다른 환경이나 시도가 발생하면 위험을 조기에 차단해드립니다. 이때, 토스가 수년간 축적한 데이터와 머신러닝 기반 탐지 로직 등을 복합적으로 활용합니다.\n🔒 안심보상제\n이처럼 단단한 시스템에도 불구하고 보이스피싱 등 사고가 발생했다면? 즉시 토스에 신고하세요. 토스가 피해 사례를 검토한 뒤 최대 5,000만 원까지 보상해드립니다.\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}안심보상제 자세히 보기\n지금 신청해두면 더 든든해요\n🔒 금융명의보호 서비스\n개인정보가 유출되면 누군가 내 명의를 도용해 대출을 받거나 카드를 개설하려고 할 수 있죠. 하지만 이런 시도를 할 때 꼭 필요한 절차가 바로 내 신용을 조회하는 것입니다. \n지금 토스에서 금융명의보호 서비스를 신청해두면, 누가, 언제 내 신용을 조회했는지 확인할 수 있습니다. 새로 신용조회가 발생하면 즉시 알림도 보내드려요. 기록 중에 내가 모르는 신용조회 내역이 있다면, 명의 도용 시도가 있었을 수 있으니 꼭 확인해보시기를 바랍니다.\n금융명의보호 신청하기\n🔒 가족보안지킴이 서비스\n금융 범죄의 주요 타깃은 고연령층입니다. 가족보안지킴이 서비스에서 부모님을 가족으로 등록해두면 의심스러운 거래가 감지될 때 자녀에게 알림을 보내드립니다. \n예를 들어 72세 아버지 휴대폰에서 갑자기 사기 의심 계좌로 송금 시도가 일어나면 바로 알림이 오기 때문에 피해가 더 커지는 것을 막을 수 있습니다. \n✱토스 앱 > 전체 > 🔍 ‘가족 보안 지킴이’ 검색\n가족보안지킴이 신청하기\n개인정보가 불안할 때, 토스를 쓰면 안전해요\n금융 사기가 늘고 있다는 뉴스를 접할 때마다 우리는 불안해지지만, 토스의 보안은 사전에 감지하고, 실시간으로 대응하고, 끝까지 책임지는 시스템을 갖추고 있습니다. 앞으로도 모든 고객의 일상 속 안심, 정교한 기술로 지켜나가겠습니다.",
        "content": "명의 도용 방지, 악성 앱 탐지, 가족 보안 지킴이 등 토스로 내 정보 지키는 법",
        "contentSnippet": "명의 도용 방지, 악성 앱 탐지, 가족 보안 지킴이 등 토스로 내 정보 지키는 법",
        "guid": "https://blog.toss.im/article/toss-guide-safety",
        "isoDate": "2025-05-02T10:21:00.000Z"
      },
      {
        "title": "2025 활기찬 노후를 위한 중장년 시니어 정책 총정리: 중장년경력지원제부터 치매안심센터까지",
        "link": "https://blog.toss.im/article/money-policies-41",
        "pubDate": "Fri, 02 May 2025 01:02:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}중장년경력지원제\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1kxrhf3{white-space:pre-wrap;}50대 이상 사무직 등 주된 업무에서 퇴직한 중장년이 경력전환에 도움이 되는 일경험을 통해 취업 가능성을 높이도록 도와주는 취업 지원 프로그램입니다.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n지원 대상: 퇴직 후 경력전환을 위해 자격을 취득했거나 직업훈련을 이수한 50대 이상 중장년\n지원 내용\n\n1~3개월간 일경험 참여기업에서 직무교육과 현장직무를 수행할 기회 제공\n참여수당으로 월 최대 150만 원 지급\n\n\n참여 및 지원절차: 자격취득 또는 훈련이수 > 참여신청서 제출 > 참여기업과 약정 체결 > 일경험 참여\n신청 방법: 중장년 내일센터 기관에 신청\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*(서울) 02-6350-1500/(인천·경기·강원) 032-421-8301/ (부산·울산·경남)051 -860-1300/(대구·경북) 054-461-5520/ (광주·전남·전북·제주)062-531-5712/(대전·충남·충북·세종) 042-489-3820\n\n\n고령 운전자 교통안전교육\n65세 이상 운전자에게 인지능력 측정과 교통안전교육을 해드립니다.\n\n\n지원 대상: 65세 이상 운전자 (75세 이상 운전자 중 면허 취득/갱신 대상자는 의무)\n지원 내용: 운전능력 자가진단 및 교통 안전교육\n\n교육 이수 시 자동차보험 할인(할인 조건은 보험사마다 다름)\n\n\n신청 방법: .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}한국도로교통공단 고객센터(1577-1120) 및 홈페이지\n\n\n농지이양 은퇴 직불사업\n고령 농업인의 은퇴 이후 생활안정을 위해 농지이양을 조건으로 월 최대 200만 원을 최장 10년간 지급합니다.\n\n\n지원 대상: 10년 이상 계속 농업경영을 하고 있는 고령 농업인(65~79세)이 3년 이상 소유한 농지를 청년농업인 등에게 이양하는 경우 최대 10년간(~84세까지) 직불금 지급\n지원 내용\n1) 매도\n-농업인이 소유한 농지를 한국농어촌공사 등에 매도하는 방식\n-농지이양 은퇴직불금 + (공사 매도 시) 농지 매도대금 지급\n-지원 단가는 1ha당 매월 50만 원(연간 600만 원)\n2)매도 조건부 임대\n-농업인이 소유 농지를 농지은행에 임대 후 농지연금 지급기간 종료 시 매도하는 은퇴직불형 농지연금에 가입하는 방식\n- 농지이양 은퇴직불금 + 은퇴직불형 농지 연금 + 농지임대료 + 농지 매도대금(농지 연금 채무액제외)\n-지원 단가는 1ha당 매월 40만 원(연간 480만 원)\n\n신청 방법: 한국농어촌공사 관할 지사에 신청\n문의: 농지은행 상담센터(1577-7770)\n\n\n의료급여수급자 노인 틀니 지원\n65세 이상 어르신들 틀니에 급여를 적용하고, 무상 수리도 지원합니다.\n\n\n지원대상: 65세 이상 의료급여 수급자\n지원내용:\n\n완전 틀니(금속상, 레진상) 및 부분 틀니 급여 적용\n*본인 부담: 1종 수급권자 5%, 2종 수급권자 15%\n부분 틀니 지대치: 별도 본인 부담(비급여)\n틀니 급여 주기: 동일 부위, 동일 종류의 틀니 7년 1회\n*틀니 제작 도중 병원을 옮기거나, 7년 이내에 환자 부주의로 새로 틀니를 제작할 경우에는 비급여 적용\n*틀니 장착 후 무상 수리: 3개월 이내 6회까지 가능(진찰료만 부담)\n\n\n신청 방법: 주소지 관할 시군구, 읍면동 행정복지센터 또는 의료급여기관에서 전산 등록 신청 대행\n\n\n치매안심센터\n치매 예방, 상담, 조기진단, 교육 등 치매통합관리서비스를 제공합니다.\n\n\n지원 대상: 지역주민, 지역 내에 거주하는 치매환자 및 가족\n지원 내용: 치매 예방, 상담, 조기진단, 보건복지 자원 연계 및 교육 등\n신청 방법: 가까운 치매안심센터\n\n\n치매상담 콜센터\n보건복지부와 중앙치매센터가 운영하는 콜센터로, 365일(7:00~22:00) 전문상담사들이 맞춤형 치매상담 서비스를 제공합니다.\n\n\n지원 대상: 치매에 관심 있는 누구나\n지원 내용: 전문상담사의 전화상담, 치매 관련 최신 정보 제공, 치매환자의 치료와 보호 및 관리에 관한 정보 제공, 치매환자 가족의 심리 상담 등\n문의: 치매상담 콜센터(1899-9988)",
        "content": "대표적인 중중년 시니어 정책 모아보기 ",
        "contentSnippet": "대표적인 중중년 시니어 정책 모아보기",
        "guid": "https://blog.toss.im/article/money-policies-41",
        "isoDate": "2025-05-02T01:02:00.000Z"
      },
      {
        "title": "토스페이 혜택, 사용법 총정리 2025년 5월",
        "link": "https://blog.toss.im/article/tosspay-2025-02",
        "pubDate": "Wed, 30 Apr 2025 15:05:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}3분만 시간 내면 \n✔️ 토스페이에 카드나 계좌를 등록하고 결제하는 방법을 알 수 있어요. \n✔️ 컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스, SSFSHOP 등 5월 할인·적립 혜택을 알 수 있어요. \n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}토스로도 간편결제 하세요\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}복잡한 인증 절차나 정보 입력 없이 빠르고 간편하게 결제할 수 있는 간편결제, 토스로도 할 수 있는 것 알고 계셨나요? 미리 등록한 카드나 계좌를 선택해 몇 번의 클릭만으로 편리한 결제를 경험해보세요. \n토스페이 사용법 \n한 번만 카드나 계좌를 등록해두면, 결제 시 선택하여 바로 사용할 수 있습니다. 또한, 토스페이 결제 시 포인트 적립 및 다양한 혜택도 받을 수 있어요. 예를 들어, 토스페이로 간편결제 하면 다양한 금융사의 카드/계좌에서 돈이 출금되었더라도, 모든 결제에 대해 토스페이 포인트가 쌓이는 장점이 있어요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n토스페이에 카드, 계좌 등록하기 \n.css-hokoge{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;counter-reset:numberedList;}.css-hokoge ul,.css-hokoge ol{margin:16px 0 0;}.css-hokoge>li{counter-increment:numberedList;margin-bottom:16px;padding-left:24px;}.css-hokoge>li:last-of-type{margin-bottom:0;}.css-hokoge>li>span{position:relative;}.css-hokoge>li>span>:first-child::before{content:counter(numberedList) '.';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n토스 홈에서 [결제]를 클릭해주세요. ‘결제수단’을 클릭하고, ‘추가하기’로 이동하면 추가할 결제수단(카드나 계좌)을 선택할 수 있어요. \n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n카드는 카드앱을 통해 몇 번의 클릭만으로 연결할 수 있고, 직접 번호를 입력하거나 스캔할 수도 있어요.\n계좌는 계좌번호와 은행명만 입력하면 5초 만에 연결할 수 있어요.\n\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}📌 Tip. 신용카드도 등록 가능해요\n자주 쓰는 신용카드로도 토스페이 결제가 가능해요! 카드 실적, 카드 할부 모두 다 동일한 혜택을 받을 수 있어요.\n토스페이로 결제하기 \n토스페이는 온라인과 오프라인 결제가 모두 가능해요. \n\n📌 온라인 결제\n\n쇼핑몰 결제창에서 결제수단으로 토스페이를 선택하고 결제를 진행해주세요. \n결제 진행 시, 토스앱으로 곧장 연결되어 간편하게 결제를 진행할 수 있어요. 등록해둔 수단 중 출금될 수단을 선택해 결제하면 돼요.  \n\n📌 오프라인 결제\n\n토스 홈에서 [결제]를 클릭해주세요.\nQR코드를 클릭하면 출금될 카드·계좌를 선택할 수 있어요. \n바코드 리더기에 QR코드를 스캔하면 결제가 완료돼요.\n\n토스페이 5월 혜택 모아보기\n5월은 연휴부터 어버이날, 어린이날 등 챙길 일도 많고 지출도 많아지는 시기죠. 이럴 때 무심코 지나쳤던 ‘결제혜택’이 생각보다 꽤 큰 절약이 된다는 사실, 알고 계셨나요? 토스페이는 매월 패션, 뷰티, 여행, 식품, 인테리어 등 생활 밀접 업종 중심으로 실질적인 혜택을 제공합니다. 이번 5월 가성비 쇼핑을 도와줄 혜택 리스트, 지금 바로 확인해보세요! \n토스페이 5월 결제혜택 모아보기\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n.css-mlvj3o{white-space:pre-wrap;color:#4593fc;font-weight:bold;}토스페이로 결제하고 자동 할인받기 \n아래 혜택들은 결제 시 토스페이를 선택하면 자동으로 할인이 적용돼요. .css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n✈️ 여행 \n소중한 사람과의 여행, 떠나기 전에 면세 혜택으로 알뜰하게 시작하세요.\n\n✅ 신세계면세점\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n20만 원 이상 결제 시 2만 원 즉시 할인\n40만 원 이상 결제 시 4만 원 즉시 할인\n이벤트 기간: 25.05.09~25.05.16\n\n.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}신세계면세점 바로 가기\n🍽️ 식품 \n우리 가족 집밥 준비, 컬리에서 토스페이로 결제하면 재료비를 아낄 수 있어요.\n\n✅ 컬리\n\n6만 원 이상 결제 시 2천 원 즉시 할인\n이벤트 기간: 25.05.19~25.06.01\n컬리 첫 결제 고객은 4만 원 이상 결제 시 즉시 3천 원 할인해드려요.(05.01~05.31)\n\n\n컬리 바로 가기\n👗 패션\n선물용 옷이 고민이라면? 백화점 브랜드 패션 플랫폼 포스티에서 할인받고 구매하세요.\n\n✅  포스티\n\n계좌 혹은 토스페이머니로 3만 원 이상 결제 시 1천 원 즉시 할인\n이벤트 기간: 25.05.21~25.05.31\n\n\n포스티 바로 가기\n🛍️ 종합몰 \n11번가 그랜드십일절 행사 기간 중 토스페이 결제 시 매일 쏠쏠한 혜택이 쏟아집니다. \n\n✅ 11번가\n\n5.1 파리바게뜨 1천 원 이상 결제 시 7% 즉시 할인 \n5.2 메가MCG커피 1천 원 이상 결제 시 7% 즉시 할인 \n5.2~3 웨이브 3,000원 즉시 할인\n5.4 쉐이크쉑 1천 원 이상 결제 시 7% 즉시 할인 \n5.5 버거킹 1천 원 이상 결제 시 7% 즉시 할인 \n5.6 이디야 1천 원 이상 결제 시 7% 즉시 할인 \n\n\n11번가 바로 가기\n💻 전자\n예산을 넘어가는 전자기기만 눈에 들어온다면, 토스페이 할인으로 예산에 딱 맞게 준비하세요.\n\n✅ 컴퓨존\n\n계좌로 60만 원 이상 결제 시 5% 즉시 할인 \n매일 9시 선착순으로 제공합니다. 놓치지 마세요!\n이벤트 기간: 25.05.07~25.05.31\n\n\n컴퓨존 바로 가기\n할인 쿠폰 발급 받기\n아래 혜택들은 토스 앱에서 쿠폰을 발급받고 토스페이로 결제하면 자동으로 적용돼요.\n👗 패션\n선물할 옷도, 내 옷도 필요한 5월, 쿠폰으로 현명하게 챙겨보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ 아디다스\n\n5% 할인 쿠폰 \n\n✅ SSFSHOP\n\n7% 할인 쿠폰\n\n\n🍽️ 식품\n건강기능식품부터 일상 속 음료까지, 온 가족을 위한 소비를 실천해보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ 종근당건강몰\n\n10% 할인 쿠폰 \n\n✅ 코크플레이 (코카콜라)\n\n15% 할인 쿠폰\n\n\n🛍️ 종합몰\n필요한 것, 사고 싶은 것 모두 GSSHOP 쿠폰으로 부담 없이 챙겨보세요.\n\n기간: 25.05.01~25.05.31\n\n✅ GSSHOP\n\n10% 할인 쿠폰\n\n\n혹시 여행 계획 있으신가요?\n특히 중국으로 떠나는 분이라면, 이 소식은 꼭 알아두세요. 중국에서도 토스페이로 간편하게 결제할 수 있고, 5월에는 할인 혜택까지 받을 수 있습니다!\n\n기간: 25.04.28~25.05.31\n\n3만 원 이상 결제 시 3천 원 할인\n\n\n\n지출이 많은 5월, 토스페이와 함께 부담은 줄이고 알뜰함은 더하세요. 다가오는 초여름에도 실속 있는 혜택으로 다시 찾아올게요.",
        "content": "컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스 등 할인·적립 쿠폰 확인하기",
        "contentSnippet": "컬리, 신세계면세점, 11번가, 컴퓨존, 아디다스 등 할인·적립 쿠폰 확인하기",
        "guid": "https://blog.toss.im/article/tosspay-2025-02",
        "isoDate": "2025-04-30T15:05:00.000Z"
      },
      {
        "title": "명의 도용 방지하는 법, 금융명의보호 서비스",
        "link": "https://blog.toss.im/article/toss-guide-credit-change",
        "pubDate": "Wed, 30 Apr 2025 05:22:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}나도 모르게 명의 도용되지 않도록 방지하려면?\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n빈번해지는 해킹 사고, 다양한 피싱 수법 등 개인정보 탈취를 걱정해야 하는 일이 늘어갑니다. 개인정보가 유출되면 특히 ‘내가 모르는 사이 명의를 도용당해 금융 거래가 일어나지 않을까’ 불안해지죠. \n명의 도용을 예방하고 싶은 분들을 위해 토스에서 .css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;}금융명의보호 서비스를 준비했어요. 1) 그동안 나도 모르게 조회된 대출·카드 기록이 있었는지 확인하고, 2) 앞으로 대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 카카오 알림톡을 받아볼 수 있습니다.  \n✅ 토스 금융명의보호 서비스 쓰는 법 \n(1) 모바일에서 아티클 하단 ‘금융명의보호 시작하기’ 버튼을 클릭하세요. \n(2) 아래 화면에서 ‘조회 내역 바로 확인하기’를 클릭하세요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n(3) 신용점수가 나오면, 아래로 스크롤해서 ‘신용조회· 변동’ 기록을 확인하세요. \n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}✱토스 앱 > 전체 > ‘내 신용점수’ 검색 > 신용점수 숫자를 클릭해도 같은 화면을 만날 수 있어요. \n\n(4) 앞으로는 내 명의의 대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 카카오 알림톡을 보내드립니다.\n\n✅ 토스 신용조회 서비스가 처음인 경우 \n(1) 모바일에서 아티클 하단 ‘금융명의보호 시작하기’ 버튼을 클릭하세요.\n(2) 꼭 필요한 사항에 동의해야 대출·카드 조회 기록을 확인할 수 있어요.\n\n대출·카드 개설을 위한 조회가 발생할 때마다 실시간으로 알려주는 ‘토스 금융명의보호 서비스’와 함께 안전한 금융생활 하시기를 바랍니다.",
        "content": "대출·카드 정보가 조회되면 실시간 알림톡을 보내드려요",
        "contentSnippet": "대출·카드 정보가 조회되면 실시간 알림톡을 보내드려요",
        "guid": "https://blog.toss.im/article/toss-guide-credit-change",
        "isoDate": "2025-04-30T05:22:00.000Z"
      },
      {
        "title": "토스, <머니 코드 콘서트: 아웃 오브 방구석> 개최",
        "link": "https://blog.toss.im/article/moneychordconcert",
        "pubDate": "Wed, 30 Apr 2025 03:26:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}머니그라피 대표 시리즈 ‘머니 코드’ 시즌 2, 콘서트 개최하며 여정 마무리\n더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n토스(운영사 비바리퍼블리카, 대표 이승건)는 유튜브 채널 '머니그라피(Moneygraphy)' 대표 시리즈 '머니 코드(Money chord)' 시즌2의 마지막 여정으로 콘서트를 개최한다. 오는 5월 31일 서울대학교 제 1파워플랜트에서 열린다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n‘머니 코드’는 대중문화의 최전선에서 활동하는 아티스트들과 함께 음악, 예술, 그리고 금융에 대한 진솔한 이야기를 나누는 토스의 유튜브 콘텐츠다. 음악 산업 속 다양한 질문과 고민들을 던지며 깊이 있는 대화를 전하는 것이 특징이다. 시즌 2에서는 시즌 1의 ‘방구석 리스너’로 활약했던 우키팝과 룩삼이 진행을 맡았으며, 다양한 장르의 아티스트들과 함께 문화적 공감대를 형성하면서도 산업 현장의 현실을 생생하게 담아냈다.\n이번 공연 <머니 코드 콘서트: 아웃 오브(Out of) 방구석>은 ‘방구석을 벗어나 세상과 마주한다’는 시즌 2의 주제를 콘서트로 확장한 형태로, 머니 코드의 철학을 공유한 아티스트들이 한자리에 모여 음악으로 소통하는 자리가 될 예정이다. 콘서트 라인업으로는 래퍼 더콰이엇을 비롯해 기타리스트 겸 DJ 하세가와 요헤이, 싱어송라이터 김뜻돌, 얼터너티브 케이팝 그룹 바밍타이거, 전자 음악 아티스트 키라라가 출연을 확정지었다.\n티켓은 5월 9일 금요일 오후 12시부터 멜론티켓을 통해 예매 가능하다. 동행 관객을 위한 1+1 티켓 옵션도 함께 마련했다. 공연에 대한 자세한 정보는 공식 웹사이트를 통해 확인할 수 있다. 웹사이트는 30일 오후 12시 오픈 예정이다.\n머니그라피 채널 연출을 총괄하는 토스 백순도 PD는 “이번 콘서트는 방구석이라는 한계를 깨고 세상을 마주한다는 ‘머니 코드’ 시즌 2의 서사를 현실에서 완성짓는 무대가 될 것”이라며 “머니그라피가 추구해온 정체성을 오프라인이라는 물리적 공간 안에서 가장 밀도 높게 보여줄 수 있는 순간이 되기를 기대한다”고 전했다. 이어 “‘머니 코드’를 통해 소개해온 아티스트들의 진정성이 이번 콘서트를 계기로 더 많은 사람들에게 닿기를 바란다”고 덧붙였다.\n한편, 머니그라피는 2021년 9월 첫 영상을 시작으로 취향과 경제를 잇는 콘텐츠를 선보여왔다. 음악 산업을 다루는 ‘머니 코드’를 비롯해 소비문화의 이면을 탐구하는 ‘B주류경제학’,  한국의 소비문화와 트렌드를 분석하는 ‘K’s스터디’ 등 다양한 시리즈가 사랑을 받으며, 채널 개설 약 3년 반 만에 구독자 수 39만 명을 돌파했다. (끝)",
        "content": "더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈",
        "contentSnippet": "더콰이엇·김뜻돌·바밍타이거 등 출연 예정… 5월 9일 멜론티켓 통해 예매 오픈",
        "guid": "https://blog.toss.im/article/moneychordconcert",
        "isoDate": "2025-04-30T03:26:00.000Z"
      },
      {
        "title": "가정의 달 콘텐츠 ➁ 혼자여도, 여럿이어도. 모든 가족에게 필요한 살림의 셈법",
        "link": "https://blog.toss.im/article/2025may-curation2",
        "pubDate": "Tue, 29 Apr 2025 01:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}다양성은 세상을 구합니다. 유전적 다양성 덕분에 인류는 질병과 기후 변화에 잘 적응할 수 있었고, 생물의 다양성 덕분에 생태계는 무너지지 않고 균형을 유지해 왔어요.\n그렇다면 ‘가족의 다양성’은 어떨까요? 이제는 꼭 엄마, 아빠, 아이가 있어야 가족이라 말하지 않습니다. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}함께 사는 친구들, 아이를 함께 키우는 공동체, 다양한 형태의 동거 가족까지. 가족의 모습은 점점 다채로워지고 있습니다. 예전처럼 가족 구성원 한 사람이 모든 돌봄 노동을 떠안지 않고, 서로 돌봄을 나누고 함께 하는 방식도 조금씩 자리 잡고 있습니다.\n초고령화, 저출산 같은 문제들이 코앞까지 밀려온 지금, 다양한 가족은 어쩌면 우리의 생존 전략이 되어줄지도 모릅니다. 가정의 달을 맞아, 혼자든, 둘이든, 다섯이든. 세상 모든 가족의 생활을 굴리기 위한 토스피드의 콘텐츠를 모아 소개합니다.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}1. 1인 가구의 생활비는 4인 가구의 4분의 1일까?\n10년 넘게 1인 가구로 살아온 홍인혜(루나파크)와 노윤주(노난). 나를 잘 먹여 살리기 위한 생활비 관리부터, 미래 자산 계획, 혼자라 때때로 찾아오는 노년에 대한 불안은 어떻게 다루는지까지. 혼자 사는 일, 그중에서도 가장 현실적인 돈 이야기를 물었습니다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}각자의 속도로 가장이 되는 '충분한 혼자'들\n2. 여성 2인가구 생활의 공동 목표는 재테크\n전 직장 동료였던 토끼와 핫도그는, 2인 가구로 함께 생활하는 사이가 되었습니다. ‘일주일 생활비 10만 원’에 도전하고, 부동산 경매 공부로 전세 계약을 1억 원 넘게 절약해낸 이들. 재테크라는 공통의 목표를 향해, 하나의 경제 공동체로 살기 위해 가장 중요한 것은 무엇일까요?\n\n돈 공부를 하고 나니 보인 것들\n3. 초고령사회, 공동 주거는 가족을 대체할 수 있을까?\n‘나이 들면 마음 맞는 사람들과 집 짓고 살기’ 같은 로망은 지금부터 열심히 돈을 모으면 이루어질까요? 경제적 가치 위주로 돌아가는 부동산 시장에서 인간성과 관계 회복을 고민하는 건축가 박창현과 공인중개사 전명희를 만났습니다. \n\n초고령사회, 도시와 집은 이렇게 달라져야한다 \n4. 공동체로 살면서 돈 욕심이 더욱 커져가요\n도봉산 자락의 4층 집. 이곳에서 20여 가구가 함께 살아갑니다. 1인 가구, 딩크 부부, 아이를 둔 가족가지. 모양은 달라도 생활은 하나로 엮입니다. 야채와 과일을 ‘공구’하고, 아이를 함께 돌보는 이 공동체. 혼자가 익숙한 시대에, 이들이 함께 살기로 한 이유는 무엇일까요?\n\n20가구가 한 집에 살면 어떤 모습일까?\n5. 동거가구의 경제생활에는 무엇이 필요할까?\n동거 가구가 마주하는 경제적 어려움에 대해 생각해본 적 있나요? 동거 가족은 공동명의로 대출을 받거나, 집을 계약하기 어렵습니다. 서로 경제적 분쟁이 생기면, 각자의 권리를 법적으로 지키기도 쉽지 않죠. 가족이라는 이름이 닿지 않는 사각지대에 대해 생각해봅니다.\n\n혼인과 혈연이 아니어도 가족이 될 수 있을까?",
        "content": "다양한 경제공동체를 위한 콘텐츠 큐레이션",
        "contentSnippet": "다양한 경제공동체를 위한 콘텐츠 큐레이션",
        "guid": "https://blog.toss.im/article/2025may-curation2",
        "isoDate": "2025-04-29T01:00:00.000Z"
      },
      {
        "title": "토스, 서울시 밈센터·프리웨일과 경계선지능청년 금융 교육 진행",
        "link": "https://blog.toss.im/article/edu_",
        "pubDate": "Tue, 29 Apr 2025 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}4월부터 6개월간 ‘토스의 찾아가는 경제 교육’ 진행… 일상 속 금융 이해력 향상과 피해 예방 지원에 집중\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n토스(운영사 비바리퍼블리카, 대표 이승건)가 서울시 경계선지능인 평생교육 지원센터(이하 밈센터), 사회적 기업 ‘프리웨일’과 경계선지능청년을 대상으로 금융 교육을 진행한다고 29일 밝혔다. 토스는 향후 6개월간 교육을 지속하면서 ‘느린 학습자’라 불리는 경계선지능청년들이 올바른 금융 습관을 길러 스스로 자립할 수 있도록 도울 예정이다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n28일 프리웨일 본사에서 진행된 첫 번째 ‘토스의 찾아가는 경제 교육’에는 프리웨일에서 바리스타로 근무 중인 경계선지능청년 10명이 참여했다. 수업은 초년기 재무 관리의 필요성, 이자의 개념, 신용 관리의 중요성을 다루는 ‘금융 기초 교육’과 최신 피해 사례를 바탕으로 한 ‘금융 사기 예방 교육’으로 구성했다.\n특히 참여자 및 주돌봄자와의 1대1 사전 면담과 설문조사를 통해 실질적으로 도움이 필요했던 내용을 교육에 반영했다는 점에서 호평을 받았다. 실제로 경계선지능청년 대상 금융 사기 피해는 일반인 대비 높은 수준이다. 이에 따라 토스는 교육 전 측정한 참여자의 금융 이해력을 올해 9월까지 50% 상향해 안전한 금융 생활을 이어갈 수 있도록 지원하는 것을 목표로 한다.\n이번 프로그램은 지난해 토스가 12월 서울시 밈센터와 체결한 업무 협약의 연장선으로 기획했으며, 교육은 토스씨엑스가 담당했다. 토스씨엑스는 토스의 비대면 상담 전문 계열사로 취약계층 청년을 위한 다양한 금융 교육 프로그램을 개발해 성공적인 경제적 자립을 지원해 왔다. 그간 축적해 온 노하우를 바탕으로 이번 교육 참여자들에게 개별 컨설팅 및 소그룹 교육, 행동기반평가 등을 통한 맞춤형 금융 관리 솔루션을 제공할 계획이다.\n토스 관계자는 “경계선지능청년은 사회 적응에 어려움을 겪지만, 법적 장애 기준에는 해당하지 않아 필요한 지원을 받기 힘든 사각지대에 놓여 있다”며 “이번 프로그램을 통해 누구나 쉽고 평등한 금융 생활을 영위할 수 있도록 돕고자 하는 토스의 노력이 실질적인 변화를 이끌어내길 기대한다”고 밝혔다.",
        "content": "4월부터 6개월간 ‘토스의 찾아가는 경제 교육’ 진행",
        "contentSnippet": "4월부터 6개월간 ‘토스의 찾아가는 경제 교육’ 진행",
        "guid": "https://blog.toss.im/article/edu_",
        "isoDate": "2025-04-29T00:00:00.000Z"
      },
      {
        "title": "토스, 온라인 디자인 컨퍼런스 ‘심플리시티’ 시즌 4 공개",
        "link": "https://blog.toss.im/article/simplicity4",
        "pubDate": "Mon, 28 Apr 2025 23:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}사용자 경험 개선 사례 공유하는 총 14개 세션, 디자이너 등 다양한 직군 참여\n모바일에 최적화 된 시청 환경 구현, AI 아바타와 숏폼으로 시청 재미 더해\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n토스(운영사 비바리퍼블리카, 대표 이승건)가 온라인 디자인 컨퍼런스 ‘심플리시티(Simplicity)’의 네 번째 시즌을 공개했다고 29일 밝혔다. 심플리시티는 ‘누구나 직관적으로 이해할 수 있는 디자인’이라는 토스의 디자인 철학을 바탕으로, 그 원칙을 실현해 온 과정과 성과를 공유하기 위해 2021년부터 개최해 왔다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n이번 시즌에서는 ‘현실 너머, 이상을 그리는 여정(Vision-Driven Design)’을 주제로 토스 사용자 경험(User eXperience, UX)을 개선한 사례를 공유했다. 총 14개의 세션에 디자이너, 리서처, 라이터, 엔지니어 등 토스 UX와 직결되는 다양한 직군의 연사자가 참여해 서비스 개선 과정에서 마주한 문제와 해결 방법을 직접 소개했다. 발표에서는 3초 만에 토스 그래픽을 자동 생성하는 디자인 툴 ‘토스트(Tosst)’ 제작 과정, 시각장애인을 위한 앱 접근성 개선 사례 등을 폭넓게 다뤘으며, 토스의 디자인 철학이 실제 제품에 어떻게 적용됐는지 등을 확인할 수 있다.\n특히 올해는 모바일에 최적화된 시청 환경을 구현해 편의성을 더했다. 전체 발표는 5~6분 이내의 ‘숏폼’ 형식으로 구성해 시청자가 언제 어디서든 부담 없이 콘텐츠를 접할 수 있도록 했으며, 화면과 직접 상호 작용할 수 있는 인터랙션 기능을 더해 몰입도를 높였다. 또한 연사자의 모습과 목소리를 AI 아바타로 제작해 보는 재미도 더했다. 각 세션은 심플리시티 시즌 4 웹사이트에서 확인할 수 있다.\n한편, 세션 시청자는 연사자와 이야기를 나눌 수 있는 ‘커피챗 신청하기’ 이벤트에 참여할 수 있다. 오는 5월 11일까지 각 세션 영상의 마지막 화면에서 ‘커피챗 신청하기’ 버튼을 눌러 신청할 수 있으며, 추첨 결과는 대상자에게 개별 안내한다. 토스 관계자는 “토스 앱의 디자인은 직관적인 사용자 경험의 열쇠”라며 “심플리시티가 UX 문제를 디자인적으로 해결하는 모든 사람에게 도움이 되기를 바란다”고 밝혔다.",
        "content": "사용자 경험 개선 사례 공유하는 총 14개 세션, 디자이너 등 다양한 직군 참여",
        "contentSnippet": "사용자 경험 개선 사례 공유하는 총 14개 세션, 디자이너 등 다양한 직군 참여",
        "guid": "https://blog.toss.im/article/simplicity4",
        "isoDate": "2025-04-28T23:00:00.000Z"
      },
      {
        "title": "토스뱅크가 ‘쉬운 근로계약서’에 주목하는 이유",
        "link": "https://blog.toss.im/article/tossbank-contract",
        "pubDate": "Mon, 28 Apr 2025 02:57:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}이 콘텐츠는 토스뱅크 CSR Manager 문유진 님, Brand Designer 최민수 님과 나현주 님, Brand Marketer 방성은 님, Product Foundation Tribe Leader 조은별 님, Product Designer 김혜미 님, 소윤의 님과의 인터뷰를 재구성하여 만들어졌습니다.\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n근로계약서를 안 써본 사람은 있어도, 써본 사람 중 그 과정에서 막막함을 느껴본 적 없는 분은 드물 겁니다. 특히 첫 아르바이트를 시작하는 청소년이나 사회초년생은 더욱이요. 계약서를 써야 하는 건 알겠지만 어떻게 말을 꺼내야 할지, 어디서 무엇을 써야 하는지 쉽지 않습니다. 이 당연한 과정이 여전히 어렵고 불편한 현실에 토스뱅크는 질문을 던졌습니다. \n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n.css-1odxvuk{white-space:pre-wrap;font-style:italic;}“이 문제, 우리가 해결하면 어떨까?”.css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n그렇게 은행의 CSR(사회공헌 활동)로는 이례적인 ‘쉬운 근로계약서’ 서비스가 탄생했어요. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}누군가의 노동을 더 안전하고 당당하게 만들어가는 이 서비스는 단지 디지털 편의의 차원이 아닙니다. 일하는 모든 이들에게 “계약은 나를 지키는 시작”이라는 메시지를 전하고 있어요. ‘근로계약서’라는 익숙하지만 어려운 문제를 토스뱅크가 어떻게 바꿔나가고 있는지 살펴봤습니다.\n\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}Q. 토스뱅크 ‘쉬운 근로계약서’ 서비스, 어떻게 시작하게 되었나요?\n토스뱅크에는 CSR을 담당하는 길드(guild) 조직이 있어요. 토스뱅크가 많은 사용자분들에게 사랑받는 서비스인 만큼, 사회공헌 활동도 필요하다는 목적으로 운영되고 있는데요. 커뮤니케이션 팀에서 CSR의 일환으로 ‘쉬운 근로계약서’ 서비스 아이디어를 제안해주셔서 시작했습니다.\n주요 사용자는 근로계약서 작성이 필요한 청소년분들과 사회초년생, 그리고 고용주예요. 지금까지 약 5만 명이 가입했고 1천 건 넘는 계약이 진행됐어요. 쌍방이 함께 이용해야 하는 계약 서비스인 만큼 근로자와 사장님 비중은 반반 정도로 비슷합니다.\n\nQ. CSR의 일환으로 시작한 서비스였군요. 은행이라는 금융권에서 ‘계약’ 서비스에 주목한 것이 신기하게 느껴졌어요.\n대부분 사회공헌 활동을 떠올리면 기부와 봉사활동 같은 자선적인 활동을 떠올리는데요. 저희는 고객들에게 진짜로 필요한 서비스를 제공해 세상의 문제를 해결하는 방식 또한, 꼭 필요하고 의미있는 CSR이 될 수 있을거라 생각했습니다.\n무엇보다 토스뱅크가 특히 일하는 환경에 주목한 이유는 ‘일’이 본격적인 금융생활의 시작점이라 보기 때문입니다. 근로소득은 가장 기본적인 소득원 중 하나고요. 일하면서 버는 돈은 은행 계좌에 보관하고, 투자하고, 소비하는 등 금융 활동과 밀접한 연관을 맺고 있죠. 또한 일하는 과정에서 발생할 수 있는 다양한 문제를 사전에 예방하고, 문제가 생기더라도 원만히 해결할 수 있도록 돕는 장치가 바로 ‘계약’입니다. 앞으로도 토스뱅크는 누구나 쉽게 활용할 수 있는 ‘쉬운 근로계약서’ 서비스를 제공하려 해요.\n\nQ. 고객들에게 꼭 필요한 서비스를 제공하는 방식으로 CSR을 한다, 신선한 방향 같아요. 처음 아이디어가 나왔을 때 팀 내부 반응은 어땠나요?\n정말 좋았어요. 토스뱅크 동료들은 금융의 영역이 아닌 곳에서도 새로운 도전을 할 수 있는 사람들인 만큼 팀 내에서 이런 방향성에 대해 공감대가 잘 형성되기도 했고요. 서비스 만들 길드 구성원을 모집할 때에도, 거의 모든 동료들이 자발적으로 지원해주셔서 빠르게 만들어낼 수 있었어요.\n가장 고민됐던 지점은 ‘법률적인 문제가 없을지’였어요. 서비스를 쉽게 제공하면서도 은행에게 허용되는 범위를 지켜야 했거든요. 법무팀에서 꼼꼼하게 검토해주시고 노무 담당자분도 의견을 다양하게 전해주셔서, 쉽고 간편하면서도 안전하고 문제 없는 서비스를 만드는 데에 큰 도움이 되었습니다.\n\nQ. 서비스 만드는 과정에서 발견한 근로계약서 작성 과정의 문제점은 무엇이었나요? 어떤 방향으로 해결했는지 궁금해요.\n.css-120saye{white-space:pre-wrap;font-style:italic;font-weight:bold;}첫째, 근로계약서 요청이 자연스러운 문화가 되게 하자.\n보통 근로계약의 사각지대에 놓인 아르바이트생들은, 고용주에게 “근로계약서를 작성하고 싶다”고 요청하는 단계에서부터 어려움을 느낍니다. 근로계약서를 작성하는 것이 당연한 고용주분들도 계시지만, 그렇지 않은 분들도 있거든요. 이런 환경에게는 근로자가 고용주에게 먼저 근로계약서를 작성하자고 하는 과정이 어려울 수 있어요. 근로자분들이 먼저 요청하는 과정이 조금이라도 덜 민망하도록, 토스뱅크를 통해 고용주에게 계약서 작성을 자연스럽게 요청할 수 있는 경로를 만들었습니다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n둘째, 모바일 환경에 친숙한 계약서 서비스를 만들자.\n기존에 근로계약서를 작성할 수 있는 서비스는 대부분 유료로 운영되고, 데스크탑 환경에 최적화되어 있었어요. 접근성이 떨어지다보니 근로계약서 작성 과정이 더더욱 쉽지 않았겠죠.\n저희는 전국민이 사용하는 모바일 환경을 이용해 접근성을 최대한 좋은 쪽으로 제공하고자 했어요. 아무래도 모바일 화면에 담을 수 있는 정보는 데스크탑 대비 제한적이다 보니, 기존에 존재하던 서비스들과 전혀 다른 방식으로 설계했고요.\n\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}[사장님이라면?] 업무 내용, 근로 일정, 임금 정보 등을 입력해서 근로계약서를 만들고, 직원의 정보를 입력하면 만든 근로계약서를 직원에게 보낼 수 있어요.\n* 토스 앱 내 경로: 전체 탭 > 우 상단 돋보기(검색) > ‘근로계약서’ 검색 > ‘토스뱅크 쉬운 근로계약서’\n무엇보다 계약서 작성 시작부터 계약 완료까지 중간에 서비스를 이탈하지 않고 끝낼 수 있도록 만들었어요. 보통의 토스뱅크 서비스에서는 본인 인증 과정에서 토스인증서를 꼭 필요로 하는데요. 이 과정에서 토스인증서를 발급받지 않은 분들이 이탈하면서 계약서 작성 과정이 흐지부지 되어버릴 수 있기 때문에, 화면에 서명을 그리는 직접서명 방식을 도입했어요. 계약 과정에서 이탈이 생길 수 있는 부분을 원천 봉쇄한 것이죠. 법무팀, 보안팀에서 많은 도움을 주셔서 구현할 수 있었습니다.\n\n[근로자라면?] 사장님이 작성해서 보낸 근로계약서를 잘 읽어보고, 잘못된 부분이 없다면 서명하면 돼요.\n* 토스 앱 내 경로: 전체 탭 > 우 상단 돋보기(검색) > ‘근로계약서’ 검색 > ‘토스뱅크 쉬운 근로계약서’\n셋째, 근로계약서 작성이 어렵고 두려운 일로 느껴지지 않게 만들자.\n근로계약서에는 익숙지 않은 개념이나 용어도 많고, 계약서라는 문서 특성상 문장도 전체적으로 어렵잖아요. 계약서 작성이 더이상 어렵고 두려운 일이 아닌 것으로 만들고 싶었어요. ‘쉬운 근로계약서’ 서비스를 따라가다 보면, 계약의 의미를 자연스럽게 이해하고 계약서 내용을 부담스럽지 않게 검토·작성할 수 있도록 곳곳에 장치를 두었습니다.\n\nQ. 사용자분들의 반응도 궁금해요. 기억에 남는 코멘트가 있을까요?\n브랜드 캠페인 영상에 감동적인 댓글이 많았던 게 기억에 남아요. “이것이 진정한 사회 기여다” 같은 취지의 댓글이 꽤 많이 보였거든요.\n조금 의외였지만 반가웠던 점은 사장님 고객들의 반응이 좋았다는 점이에요. 캠페인 타겟은 아르바이트생이었지만 사장님들의 반응도 만만치 않았던 거죠. 실제로 계약서 내 항목은 사장님이 작성해야 하는 부분이 더 많거든요. 특히 작은 사업을 1~2개 운영하는 분들의 긍정 목소리가 많았던 것 같아요. 사업자 번호를 여러 개 등록하고 싶다거나, 사업자 정보를 쉽게 수정하고 싶다는 반응을 보고, 바로 검토 후 의견을 반영하는 버전으로 서비스를 개선하기도 했어요.\n\nQ. ‘쉬운 근로계약서 서비스’를 더 많은 사람들에게 알리기 위해 두 번의 브랜드 캠페인을 진행하셨죠. 캠페인을 통해 전달하고자 했던 메시지가 궁금해요.\n토스뱅크 ‘쉬운 근로계약서’ 서비스 슬로건은 “일하는 누구나, 토스뱅크에서 안전하게” 입니다. 여기서 ‘누구’에는 근로자, 고용주 뿐 아니라 프리랜서도 포함되는데요. ‘쉬운 근로계약서’ 서비스로 가능한 정당한 계약을 통해, 모두가 마음놓고 안전하게 일할 수 있는 근로환경이 마련되어야 한다는 메시지를 전하고 싶었어요.\n\nQ. 각 브랜드 캠페인은 어떤 배경에서 기획되었고, 무엇을 목표로 진행되었나요?\n첫번째 사회공헌 프로젝트 ‘일하는 청소년 with Toss Bank’ 캠페인은 현실 속 청소년들이 근로 현장에서 맞닥뜨리게 되는 갈등에 주목했어요. 근로계약서 미작성, 청소년 노동법 위반 등의 갈등 원인은 근로계약 문화에 있다는 데 착안했고, 이를 바꾸겠다는 취지를 담았습니다.\n.css-oni540{position:relative;width:100%;height:0;padding-bottom:56.25%;}\n.css-122y91a{position:absolute;top:0;left:0;width:100%;height:100%;}\n\n보통 청소년이 일한다고 하면 영 케어러(Young Carer: 가족돌봄청년), 문제아를 떠올리는데요. 공부를 해야 할 나이에 돈을 번다고 하니 피치 못할 사정이 있다고 생각하는 겁니다. 또 드라마나 광고 등 미디어를 통해 일하는 청소년의 이미지가 이런 방식으로 소비되었기 때문이에요.\n하지만 일하는 청소년들의 이야기를 직접 들어보니, 일하는 이유가 참 다양합니다. 가족을 위해 일하는 청소년 뿐 아니라, 원하는 신발을 사고 싶어서인 경우도 있고 꿈을 좇기 위해 강습비를 벌기도 해요. 이처럼 일하는 청소년에 대해 선입견을 가지지 않으려 노력했고, 이들이 겪는 근로 문제에만 집중했습니다. 실제 청소년 근로자들의 목소리를 반영하기 위한 노력이었어요.\n‘일하는 청소년’ 캠페인의 성공을 통해 근로계약 문제에 대한 대중의 공감대를 확인할 수 있었는데요. 그러던 중 서울시와의 협업을 통해 서울시에서 만든 간병인, 웹툰 보조작가 표준계약서가 ‘쉬운 근로계약서 서비스’에 탑재됐어요. 그 중에서 웹툰 보조작가가 겪는 문제에 공감해 두 번째 캠페인 소재로 선정하게 되었습니다.\n\n\n\n웹툰 보조작가는 계약서 미작성 건수가 77%에 달했어요. (2019 웹툰 보조작가 실태조사 기준: 한국콘텐츠진흥원) 웹툰 보조작가를 위한 표준계약서가 없었기 때문에, 대부분 구두 계약을 통해 일하고 있거나 계약서를 작성하더라도 불공정한 계약 조항에 노출되는 경우가 많았습니다. 그래서 계약 범위를 넘어서는 과도한 업무를 요구받기도 하고, 입금 체불도 빈번히 일어났어요. 또 다른 노동자와 다르게, 창작자임에도 크레딧(작품 내 이름 표기)에 포함되지 않아 향후 경력을 인정받거나 발전시키기 어려운 환경이었습니다.\n계약서만 잘 작성해도 막을 수 있는 문제인데, 계약서가 잘 작성되지 않는 환경에서 겪는 문제가 컸기에 ‘쉬운 근로계약서 서비스’를 통해 문제를 해결하고, 브랜드 캠페인을 통해 문제를 세상에 알리고자 했어요.\n\nQ. 광고 캠페인이었던 ‘일하는 청소년’과 달리, ‘웹툰노동’은 다큐멘터리로 제작되었는데요. 특별한 이유가 있을까요?\n처음엔 서울시에서 개발한 표준계약서가 토스뱅크 ‘쉬운 근로계약서 서비스’에 탑재되었다는걸 잘 알리는 수준으로 접근했어요. 그런데 왜 표준계약서가 개발됐고, 웹툰 보조작가분들이 어떤 어려움을 겪고 있는지 조사하다 보니 간단히 다룰 수 있는 소재가 아니라는 생각이 들더라고요.\n웹툰의 노동 문제는 플랫폼, 제작사, 웹툰작가, 웹툰 보조작가로 이어지는 제작 시스템 전반에서 비롯되며 이해관계가 복잡하게 얽혀있습니다. 이를 단편적으로 다룰 경우, 메시지가 왜곡될 우려가 있고 대중이 심각성을 충분히 공감하지 못할 가능성도 있다 생각했어요.\n또한 웹툰 보조작가들이 겪은 감정적인 상처가 깊어, 가벼운 접근은 오히려 그들의 아픔을 자극할 수 있다 생각했습니다. 정공법을 선택하자는 목표로 다큐멘터리 형식을 채택했어요. 메시지의 의미를 더욱 효과적으로 전달하기 위해 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}무비랜드 팝업, 캠페인 페이지, 한정판 굿즈도 추가로 기획했고요.\n\n\n특히 민감한 소재인 만큼 객관성 확보에 중점을 뒀어요. 20분 분량의 다큐멘터리에 10명의 출연진을 구성하는 것이 다소 많아보일 수 있지만, 소수의 주관적인 의견으로 비춰지는 것을 방지하고 다양한 시각을 담기 위해 가능한 많은 출연진을 섭외했습니다.\n웹툰 보조작가, 현역 웹툰작가, 웹툰작가노조위원장, 웹툰플랫폼사 대표, 변호사 등 해당 문제를 직간접적으로 경험하고, 실태를 면밀히 파악하고 있는 인물들이 참여했습니다. 많은 섭외 후보들이 출연을 고사했으나, 용기내어 주신 출연진분들 덕분에 목소리를 낼 수 있었습니다. 감사한 마음이 커요.\n\nQ. ‘웹툰노동’ 브랜드 캠페인 준비 과정에서 특별히 기억에 남는 순간이 있을까요?\n다큐멘터리 사전 인터뷰 과정에서 다큐멘터리에 나온 분들 외에도 수많은 보조작가분들과 업계 관계자분들을 만나 이야기를 들었거든요. 웹툰 업계에 분노하는 분, 어쩔 수 없다며 체념한 분, 우울증과 대인기피증을 가지게 된 분, 저마다의 방식으로 이 환경을 개선하려는 분들까지.\n그중 “제가 더 잘 했다면 이런 일은 없지 않았을까요?”라고 말하는 웹툰 보조작가들의 자책 어린 목소리가 유독 기억에 남습니다. 어려운 현실 속에서 많은 웹툰 보조작가들이 스스로를 탓하며 좌절하고 있었어요. 희망이 보이지 않는 상황에서, 그들이 비난할 수 있는 마지막 대상이 결국 자신뿐이 아니었을까 싶기도 했어요.\n이들을 위해 무비랜드 팝업에서 ‘블루 칼라(Blue-collar: 생산직 노동자)의 시인’으로 불리는 켄 로치 감독의 노동 영화 2편을 상영했는데요. 영화 ⟨나, 다니엘 블레이크⟩ ⟨미안해요, 리키⟩에 나오는 “It’s not your fault(당신의 잘못이 아닙니다).”라는 대사를 통해 위로를 전하고 싶었어요.\n\n켄 로치 감독은 칸 영화제에서 황금종려상 수상 후, “우리는 희망의 메시지를 사람들에게 보여줘야 한다. 다른 세상이 가능하다고 말해야 한다”라는 소감을 전했어요. ‘웹툰노동’ 다큐멘터리가 웹툰 보조작가분들께 희망의 메시지가 됐으면 하는 바람입니다.\n\nQ. 캠페인 공개 후 반응은 어땠나요?\n웹툰 보조작가분들이 본인의 이야기를 직접 유튜브 영상 댓글에 남겨주고 계세요. 다큐멘터리 내용에 공감하며 억울했던 감정을 쏟아내기도 하고, 더 적나라한 경험을 고발하거나 해결책을 제안하는 이들도 있습니다. 이런 다큐멘터리를 만들어줘서 고맙다는 분들도 많고요. 정성스레 남긴 장문의 댓글에서는 웹툰을 향한 애정과 하루 빨리 문제가 개선되길 바라는 마음이 느껴졌어요.\n웹툰 독자분들의 반응도 흥미로웠습니다. 그동안 웹툰을 문화 콘텐츠로 소비해 왔지만, 이면에 존재하는 문제에 대해서는 전혀 알지 못했다는 의견이 많았어요. 더 좋은 작품을 오랫동안 즐기기 위해서라도 웹툰 산업의 노동 환경이 개선되길 바란다는 목소리도 이어지고 있습니다.\n웹툰 관계자와 팬덤이 활발히 활동하는 X(구 트위터)에서는 현역 웹툰 작가들이 직접 다큐멘터리에 대한 글을 게시하고, 팬들이 이를 리트윗하며 바이럴이 확산되고 있어요. 노동 환경을 실질적으로 개선할 수 있는 당사자들에게까지 메시지가 닿아 현실적으로 문제를 해결할 수 있는 실마리가 되기를 기대합니다.\n\nQ. 캠페인이 콘텐츠 그 이상의 변화를 만들어내는 역할을 해온 것은 물론, 토스뱅크 CSR의 정체성 또한 잘 보여준 것 같아요.\n실질적인 변화를 만들기 위한 해결책을 제안하려 했기 때문인 것 같아요. 단순히 인식 개선을 위한 캠페인이 아니라, 토스뱅크가 가장 잘할 수 있는 제품(서비스) 역량을 활용해 문제를 해결하고자 했습니다. 그 결과물이 바로 ‘쉬운 근로계약서’ 서비스고요.\n\nQ. 실제로 ‘쉬운 근로계약서’ 서비스가 사회적으로 긍정적인 영향을 미칠 수 있을 것으로 기대되는데요.\n맞아요, 우선 계약에 대한 심리적/물리적 장벽이 줄어드니까요. 토스뱅크를 활용하면 언제 어디서든 계약 요청부터 체결까지 손쉽게 할 수 있고, 계약 과정을 쉬운 언어로 전달하고 이해할 수 있잖아요. 그동안 공정한 계약문화 사각지대에 놓여있던 사람들이 가지고 있던 장벽을 낮춰줄 수 있으리라 기대합니다. 궁극적으로는 모두가 안전하게 계약을 체결하며 일하는 환경이 되는 데에 기여하길 바라고요.\n‘계약’에 대한 사회적 인식 변화 또한 필요한데요. 계약서를 작성하고 일하는 것이 필수적이고 자연스러운 문화로 자리매김하기 위해서는 계약이 어느 한 쪽의 이익을 대변하는 것이 아니라, 근로자와 고용주 모두를 위한 일종의 ‘약속’이라는 사회적인 인식이 꼭 필요하다 생각합니다. 그러면 사회적으로 근로계약 문화가 더욱 개선될 수 있을 거예요.\n\nQ. 캠페인 영상에 달린 댓글을 보면 “이런 게 진짜 세상에 필요한 혁신이다”, “사회에 꼭 필요한 이야기를 토스뱅크가 해준다”는 반응이 있더라고요.\nCSR의 일환으로 시작한 ‘쉬운 근로계약서’ 서비스가 ‘토스뱅크다운 혁신적인 시도’로 인식되는 것 같아요. 이제 기업이 문제를 해결하는 중요한 주체가 된 시대라 생각해요. 특히 고객의 어려움을 해결하는 것과 사회적 문제를 해결하는 것의 경계가 흐려질 때, 더 큰 브랜드 신뢰도를 가질 수 있다 생각합니다.\n은행의 사회적 책임 범위를 한정짓지 않고 사회적 문제를 해결하려 한 시도는, 그동안 당연하게 여겨져 왔던 불편함에 질문을 던지고 혁신적인 서비스를 만들어왔던 토스뱅크의 접근 방식과 다르지 않아요. CSR 활동이 기업의 본질적인 가치와 철학에 밀접해 있을 때, 더 큰 울림을 만들어내는 것 같습니다.\n\nQ. ‘쉬운 근로계약서 서비스’, 앞으로 어떻게 더 발전될까요?\n지금은 계약서를 작성하는 기능에 초점을 맞춘 서비스인데요. 더 나아가 고용주와 피고용인 간 계약서를 작성하는 상황 내 여러 맥락을 파악해, 근로자 고용 관련 서류까지 편리하게 발송할 수 있는 방향으로 발전시킬 예정이에요.\n그리고 이번 캠페인을 경험으로 생각해보면, 정부와 기업 간 유의미한 협업이 이어질 수 있지 않을까요. 그간 서울시는 운동트레이너, 간병인, 웹툰 보조작가와 같이 계약 문화의 사각지대에 놓인 프리랜서를 위한 표준계약서를 만들고 있었지만 확산에 어려움이 있었어요. 반면 토스뱅크는 전자계약 서비스를 제공할 뿐, 계약 당사자에게 법률적인 조언이나 가이드를 줄 수 없었고요. \n서울시가 만든 표준계약서를 토스뱅크 서비스에 탑재하니, 더 많은 사람들이 쉽고 간편하게 이용할 수 있게 되었잖아요. 이와 비슷하게 정부는 계속해서 사각지대에 놓여있는 직업군을 위한 기준이 되는 표준계약서를 발전시켜 나가고, 기업은 사용자에게 잘 전달할 수 있는 역할을 할 수 있기를 기대해 봅니다.",
        "content": "“일하는 누구나, 안전하게” - 토스뱅크가 바꿔나가는 계약 문화",
        "contentSnippet": "“일하는 누구나, 안전하게” - 토스뱅크가 바꿔나가는 계약 문화",
        "guid": "https://blog.toss.im/article/tossbank-contract",
        "isoDate": "2025-04-28T02:57:00.000Z"
      },
      {
        "title": "가정의 달 콘텐츠➀ 함께 살아가기 위해서는 계산이 필요하다",
        "link": "https://blog.toss.im/article/2025may-curation",
        "pubDate": "Mon, 28 Apr 2025 00:30:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}가정을 꾸리는 일은 치밀하고도 이타적인 ‘계산’이 필요합니다..css-1kxrhf3{white-space:pre-wrap;} 부부가 된다는 건 경제생활을 함께 영위해 나가는 공동체로 거듭난다는 뜻이니까요.\n두 경제적 주체가 하나의 배에 올라, 노를 젓는 것을 상상해 봅니다. 순풍을 타고 여유롭게 풍경을 즐기는 날도 있지만, 고요한 물살 위에서 쉬지 않고 노를 저어야 할 때도, 갑작스레 몰아치는 급류에 온 힘을 다해 균형을 잡아야 할 때도 있을 겁니다. 그 모든 순간을 함께 헤쳐 나가는 일이 바로 ‘가계’라는 항해겠지요.\n날씨와 풍향, 바람의 세기를 계산하며 노를 젓다보면 언젠가는 너와 내가 소망하는 목적지에 닿게 될 거예요. 가정의 달을 맞아 각자의 항로를 따라 나아가고 있는 모든 항해자에게 도움이 될 토스피드의 콘텐츠를 모아 전합니다.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}1. 부부 돈 관리, 같이 하는 게 좋을까 따로 하는 게 좋을까?\n부부 돈 관리 방법은 크게 두 가지로 나뉩니다. ‘오픈형’과 ‘블라인드형’. 경제적 정보를 서로 얼마나 공유할지에 따라 관리법이 달라지는데요. 15년 동안 수많은 부부를 만나 멘토링을 해온 김경필 머니 트레이너는 말합니다. ‘돈 관리를 잘 하는 부부’는 모두 이 관리법을 택한다고요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}.css-1lvcgm8{padding:22px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;border-radius:20px;}\n.css-13ko30i{width:375px;}전문가가 말하는 부부 돈 관리 필승법\n2. 부모가 되면 은퇴 계획이 달라질까?\n김성미, 이상형 부부는 결혼 직후, ‘55세 은퇴’ 목표를 세웠습니다. 몇 해 전 사랑스러운 아이가 태어났지만, 목표로 한 은퇴 시점은 밀리지 않고 그대로 입니다. 계획에 따르면, 2035년부터는 돈을 더 모으지 않아도 원금에서 나오는 자산소득으로 생활비를 충당할 수 있게 돼죠. 이토록 확실하고도 체계적인 계획은 어디서부터, 어떻게 세울 수 있었을까요?\n\n양육비 쇼크 없이 노후 생활비 준비하는 법\n3. 주말마다 부동산 데이트를 했습니다\n김성진 안정호 부부는 주말이면 부동산 데이트에 나섰습니다. 왕십리, 종로와 같은 강북 구도심을 중심으로 부부의 보금자리를 고민했죠. 오랜 준비 기간을 거친 부부의 선택은 대지와 오래된 건물을 구입해 12평짜리 협소주택을 세우는 것이었습니다. 집을 보는 관점이 달랐던 두 사람은 어떤 계산과 타협을 거쳐 가장 ‘우리다운’ 집을 갖게 되었을까요?\n\n현실 속에서 꿈꾸는 집을 찾는 여정\n4. 2025 일하는 부모의 임신·출산·육아 부담을 덜어줄 제도 10가지\n커리어와 부모로서의 삶이 맞물리기 시작할 때, 부부는 큰 도전에 나서게 됩니다. 그 여정이 덜 막막하도록, 지금 알아두면 돈이 되는 출산과 육아 지원 정책을 모아 소개합니다.\n\n임신·출산·육아 정책 모아보기",
        "content": "부부를 위한 콘텐츠 큐레이션",
        "contentSnippet": "부부를 위한 콘텐츠 큐레이션",
        "guid": "https://blog.toss.im/article/2025may-curation",
        "isoDate": "2025-04-28T00:30:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]