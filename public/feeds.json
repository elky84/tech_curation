[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Sinem Akinci",
        "title": "GitHub Copilot Extensions for C++ developers and beyond now available in VS Code",
        "link": "https://devblogs.microsoft.com/cppblog/github-copilot-extensions-for-c-developers-and-beyond-now-available-in-vs-code/",
        "pubDate": "Wed, 07 Aug 2024 09:00:57 +0000",
        "content:encodedSnippet": "GitHub Copilot is now more extensible than ever for extension authors in VS Code.\nAt the Microsoft Build conference, we announced that VS Code extensions can now leverage APIs for Copilot to build custom chat participants that users can interact with in the GitHub Copilot Chat view in VS Code. To learn more, please watch the Build session on the new extensibility and read more on the VS Code blog.  Some notable extensions that have developed chat participants for public consumption include Microsoft Dev Box and Parallels.\nAnother API that extensions can leverage LLMs with is the language model API. It enables you to integrate AI-powered features and natural language processing in your Visual Studio Code extension. To learn more about this API, please visit our VS Code docs.\nWhat are chat participants?\nYou can read more in the VS Code docs for more specifics on how chat participants work. These are specified by the user in the Copilot chat window, with queries using @<participant>.\n\nSome existing chat participants available in VS Code Copilot Chat that you may be familiar with include @workspace and @vscode.\nFor example, @workspace dynamically looks at all the code in your open workspace to provide relevant code snippets as context to Copilot Chat.\n\nOn the other hand, @vscode dynamically indexes VS Code settings to provide an answer.\n\nWith the latest release, you now have access to build your own chat participant for your VS Code extensions, allowing you to provide domain knowledge to Copilot that would be relevant to your users.\nAs a consumer, there are some chat participants to look forward to that utilized this API and are in the pipeline. For example, for users who have containerized development, there is a Docker Copilot extension that is currently in limited public beta that allows users to learn more about containerization with regards to their app.\nWhat are language models?\nWith the Language Model API, you can directly access and take advantage of LLMs contributed by GitHub Copilot in your own extensions, by specifying prompts, relevant context, and how requests should be sent to the model. You can utilize this API to enhance developer experiences beyond the Copilot Chat view.\nFor example, one feature that utilizes the Language Model API is AI-powered rename suggestions, that allow you to dynamically rename symbols in your C++ code. These will automatically invoke suggestions when you go to rename a symbol in VS code when you have the Copilot Chat extension installed.\nAdditionally, the source control view utilizes the Language Model API to prompt how to automatically generate commit messages using AI for users that invoke it, based on the source code changes.\n\nWhat’s next in VS Code Copilot Chat?\nWe are committed to enhancing the extensibility, quality, and customizability of Copilot Chat in VS Code. Stay tuned for exciting updates to make your experience with Chat.\nSome things coming up to look forward to in VS Code, which can be found in the original blog post announcement from the VS Code team, include the variable resolving API, which allows extensions to contribute chat variables (via # sign) which provide context from the extension’s domain. Additionally, VS Code expects improvements to intent detection, so that these chat participants are automatically invoked, and to provide GPT-4o language model support.\nPlease file any issues or feedback in the VS Code Copilot repo, try out building your own developments using Copilot for your extensions, or let us know any VS Code extensions you’d like to see leveraging these APIs.\nTo learn more about using GitHub Copilot in VS Code with C++, watch our introduction YouTube video and others on the VS Code Channel.\nThe post GitHub Copilot Extensions for C++ developers and beyond now available in VS Code appeared first on C++ Team Blog.",
        "dc:creator": "Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/github-copilot-extensions-for-c-developers-and-beyond-now-available-in-vs-code/#respond",
        "content": "<p>GitHub Copilot is now more extensible than ever for extension authors in VS Code.<br />\nAt the Microsoft Build conference, we announced that VS Code extensions can now leverage APIs for Copilot to build custom chat participants that users can interact with in the GitHub Copilot Chat view in VS Code.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/github-copilot-extensions-for-c-developers-and-beyond-now-available-in-vs-code/\">GitHub Copilot Extensions for C++ developers and beyond now available in VS Code</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "GitHub Copilot is now more extensible than ever for extension authors in VS Code.\nThe post GitHub Copilot Extensions for C++ developers and beyond now available in VS Code appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34409",
        "categories": [
          "C++",
          "CMake",
          "Copilot",
          "Visual Studio Code"
        ],
        "isoDate": "2024-08-07T09:00:57.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "RoCE networks for distributed AI training at scale",
        "link": "https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/",
        "pubDate": "Mon, 05 Aug 2024 16:00:26 +0000",
        "content:encodedSnippet": "AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B.\nThis week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta over the past few years to support our large-scale distributed AI training workload. \nOur paper, “RDMA over Ethernet for Distributed AI Training at Meta Scale,” provides the details on how we design, implement, and operate one of the world’s largest AI networks at scale.\nThe growing prevalence of AI has introduced a new era of communication demands. Distributed training, in particular, imposes the most significant strain on data center networking infrastructure. For instance, a typical generative AI (GenAI) job may necessitate tight coordination of tens of thousands of GPUs over the course of several weeks. Constructing a reliable, high-performance network infrastructure capable of accommodating this burgeoning demand necessitates a reevaluation of data center network design.\nWhen Meta introduced distributed GPU-based training, we decided to construct specialized data center networks tailored for these GPU clusters. We opted for RDMA Over Converged Ethernet version 2 (RoCEv2) as the inter-node communication transport for the majority of our AI capacity. \nWe have successfully expanded our RoCE networks, evolving from prototypes to the deployment of numerous clusters, each accommodating thousands of GPUs. These RoCE clusters support an extensive range of production distributed GPU training jobs, including ranking, content recommendation, content understanding, natural language processing, and GenAI model training, among other workloads.\nTopology\nWe built a dedicated backend network specifically for distributed training. This allowed us to evolve, operate, and scale independently from the rest of the data center network. To support large language models (LLMs), we expanded the backend network towards the DC-scale, e.g., incorporating topology-awareness into the training job scheduler.\nThe separation\nThe training cluster relies on two independent networks: the frontend (FE) network for tasks such as data ingestion, checkpointing, and logging, and the backend (BE) network for training, as depicted below.\nA training rack is connected to both the FE and BE of the data center network. The FE has a hierarchy of network layers – rack switches (RSWs), fabric switches (FSWs), and higher – that houses the storage warehouse, which provides GPUs with the necessary input data for training workloads. We ensure that there is enough ingress bandwidth on the rack switch to not hinder the training workload.\nThe BE is a specialized fabric that connects all RDMA NICs in a non-blocking architecture, providing high bandwidth, low latency, and lossless transport between any two GPUs in the cluster, regardless of their physical location. This backend fabric utilizes the RoCEv2 protocol, which encapsulates the RDMA service in UDP packets for transport over the network.\nAI Zone\nOur BE networks have undergone several transformations. Initially, our GPU clusters used a simple star topology with a few AI racks connected to a central Ethernet switch running the non-routable RoCEv1 protocol. This setup had clear limitations in GPU scale and switch redundancy. Therefore, we swiftly transitioned to a fabric-based architecture for extended scalability and higher availability. \nWe designed a two-stage Clos topology for AI racks, known as an AI Zone. The rack training switch (RTSW), serving as the leaf switch, offers scale-up connectivity for GPUs within the rack using copper-based DAC cables. The spine tier, composed of modular cluster training switches (CTSW), provides scale-out connectivity among all racks in the cluster. The CTSW has deep buffers statically divided over the ports in the chassis. The RTSWs connect to CTSWs via single-mode fiber and 400G pluggable transceivers.\n\nThe AI Zones are designed to support a large number of interconnected GPUs in a non-blocking manner. However, emerging AI advancements, such as LLMs like Llama, demand a GPU scale larger than what a single AI zone provides. To accommodate this, we designed an aggregator training switch (ATSW) layer that connects the CTSWs in a data center building, expanding the RoCE domain beyond a single AI Zone. \nNote, the cross-AI Zone connectivity is oversubscribed by design, with network traffic balanced using ECMP. To mitigate the performance bottleneck for cross-AI Zone traffic, we enhanced the training job scheduler to find a “minimum cut” when dividing the training nodes into different AI Zones, reducing the cross-AI Zone traffic and thus collective completion time. The scheduler does this by learning the position of GPU servers in the logical topology to recommend a rank assignment. \nRouting\nThe scaling of compute power and network topology discussed above led to the question of how to efficiently balance and route the massive training traffic. Specifically, the AI training workloads had several challenging characteristics: \nLow entropy: Compared to traditional data center workloads, the number and the diversity of flows for AI workloads are much smaller and the flow patterns are usually repetitive and predictable. \nBurstiness: On the time dimension, the flows usually exhibit the “on and of”’ nature in the time granularity of milliseconds. \nElephant flows: For each burst, the intensity of each flow could reach up to the line rate of NICs. \nECMP and path pinning\nWe initially considered the widely adopted ECMP, which places flows randomly based on the hashes on the five-tuple: source and destination IPs, source and destination UDP ports, and protocol. However, and as expected, ECMP rendered poor performance for the training workload due to the low flow entropy. \nAlternatively, we designed and deployed a path-pinning scheme in the initial years of our deployment. This scheme routed packets to specific paths based on the destination “slice” (the index of the RTSW downlink). This worked well if each rack was fully assigned to the same job and there was no failure in the network. However, this was seldom true. We saw that the rack can be partially allocated to a job, with only one of the two hosts in the rack using the uplink bandwidth. This fragmented job placement caused uneven traffic distribution and congestion on the uplinks of the particular RTSW and degraded the training performance up to more than 30%. Further, network failures on a uplink or a CTSW caused the affected flows to be unevenly reassigned to other CTSWs by ECMP. Those reassigned flows collided with other existing flows and slowed down the whole training job.\nWe mitigated the immediate impact of these flow collisions by upgrading the bandwidth of the RTSW uplinks bandwidth by 2x. Hence we allowed for the RTSW uplink capacity to be 1:2 under-subscribed compared to the RTSW downlink capacity. While this mitigated the immediate performance impact, this was an expensive solution as it required 2x network capacity. Thus, we recognized this as a short-term mitigation and proceeded to further stages of routing evolution. \nQueue pair scaling\nWe next revisited ECMP with an intent to increase the number of flows for hierarchical collectives through the queue pair (QP) scaling software feature in the collective library. \nTo account for this, we configured switches to perform Enhanced ECMP (E-ECMP) to additionally hash on the destination QP field of a RoCE packet using the UDF capability of the switch ASIC. This increased entropy and, compared to baseline ECMP without QP scaling, we observed that E-ECMP along with QP scaling showed performance improvement of up to 40% for the AllReduce collective.\n\nWe evaluated two QP scaling strategies. The first involved splitting each message meant to be posted over a single QP, instead onto multiple QPs resulting in multiple flows. But it also produced smaller message sizes on fabric as well as multiple ACKs. The second approach involved posting each message to a different queue, in a round-robin fashion. For the NIC message sizes demonstrated in our production with NCCL, we observed the latter to be performing well. This feature has been important for ECMP scalability by increasing the network flows for hierarchical collectives like AllReduce.\nWhile we improved ECMP performance with QP scaling, the underlying probabilistic nature of hashing was a persistent downside of this routing scheme. Also, the need to customize the QP scaling factor and methodology based on the workload type, while workable in the short-term, presented long-term operational complexity.\nCongestion control\nAs we transitioned to 400G deployments, we attempted to tune DCQCN to adapt to new network speeds and topology. However, with default DCQCN settings and doubled ECN thresholds compared to 200G networks, performance was degraded. Further investigation revealed that DCQCN implementation in firmware has changed, introducing bugs and reduced visibility with problems relating to correct CNP counting. \nWe proceeded without DCQCN for our 400G deployments. At this time, we have had over a year of experience with just PFC for flow control, without any other transport-level congestion control. We have observed stable performance and lack of persistent congestion for training collectives. \nReceiver-driven traffic admission\nTo mitigate the congestion for 400G and beyond, we co-designed the collective library and RoCE transport to enforce receiver-driven traffic admission for better performance. The diagram below shows that the GPU-to-GPU communication architecture in our production training clusters predominantly uses two-stage copy and receiver-initiated communication via the NCCL collective library. Each GPU’s high bandwidth memory (HBM) maintains multiple channels for parallel transmission of chunked collective messages. The sender GPU threads first copy data from the compute buffer to an available channel buffer. The sender CPU proxy thread can only post an RDMA write request after receiving a clear-to-send (CTS) packet from the receiver, which includes the size and memory information. The receiver’s GPU threads then copy the channel buffer contents to the destination compute buffer. Finally, CPU proxy threads on both sides recycle the channel buffer, and the receiver CPU proxy sends another CTS packet once the channel buffer is ready.\n\nWe effectively leverage this mechanism as a receiver-driven traffic admission to limit the amount of in-flight traffic on the network, especially when congestion starts to build up. However, configuring the right setting can be challenging as: \nThe number of channels is limited due to the resource contention on GPU threads with concurrent compute operations; \nSetting the channel buffer size requires a more careful balance between congestion spreading and bandwidth under-utilization than Infiniband due to RoCE’s more coarse-grained flow control and possible end-host slowness. \nThus, we took two steps to improve the performance. First, we experimentally determined the right parameter settings for the number of channels and channel buffer size across various training job sizes and collective types. Second, we implemented high priority queuing at switches for CTS packets to expedite the notifications and mitigate potential bandwidth starvation.\nCongestion control has been a focal point of research in RDMA networks. DCQCN has been the gold standard for storage-focused networks. However, our experience with distributed AI training workloads provides a different perspective on tailoring the congestion control algorithms. Despite turning off DCQCN and multiple instances of RTSW sending PFC to a deep-buffer CTSW, we have not encountered a scenario over the last four years where production AI training traffic causes the CTSW to send PFCs to RTSWs persistently. \nOur current solution depends on careful coordination between the collective communication library and the network. It may depend on the relative throughput between GPU and network, which may not be applicable to all scenarios. We encourage the research community to put more focus on this topic.\nMoving forward\nThe design and operation of large-scale RoCE networks for distributed AI training workloads have evolved to meet the increasing demands of computational density and scale. By segregating FE and BE networks, employing various routing schemes, and optimizing collective traffic patterns, we have been able to build a performant and reliable network infrastructure. These designs and insights underline the importance of deeply understanding the training workload and translating these implications into network component design, ultimately contributing to the advancement of distributed AI training infrastructure.\nWith the fast growing trend of GenAI workload, our network infrastructure will evolve rapidly. \nRead the paper\nRDMA over Ethernet for Distributed AI Training at Meta Scale\nAcknowledgements\nWe would like to thank all contributors to the paper, including Rui Miao, Shengbao Zheng, Sai Jayesh Bondu, Guilherme Goes, Hany Morsy, Rohit Puri, Adi Mohammad Riftadi, Ashmitha Jeevaraj Shetty, Jingyi Yang, Shuqiang Zhang, Mikel Jimenez Fernandez, Shashi Gandham, Omar Baldonado. Many current and former people in the Network Infrastructure team at Meta have contributed to productionizing RoCE networks for AI training over the years. In particular, we would like to acknowledge Srinivas Sridharan, Petr Lapukhov, Jose Leitao, and Brandon Taylor. This work is a close collaboration with our partners in Meta’s AI Production Engineering, AI and Systems Co-design, and AI Hardware Systems teams.\nThe post RoCE networks for distributed AI training at scale appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B. This week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/\">RoCE networks for distributed AI training at scale</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B. This week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta [...]\nRead More...\nThe post RoCE networks for distributed AI training at scale appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21522",
        "categories": [
          "AI Research",
          "Data Center Engineering",
          "ML Applications",
          "Networking & Traffic"
        ],
        "isoDate": "2024-08-05T16:00:26.000Z"
      },
      {
        "creator": "",
        "title": "DCPerf: An open source benchmark suite for hyperscale compute applications",
        "link": "https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/",
        "pubDate": "Mon, 05 Aug 2024 15:55:14 +0000",
        "content:encodedSnippet": "We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments.\nWe hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products.\nDCPerf is available now on GitHub.\nHyperscale and cloud datacenter deployments constitute the largest market share of server deployments in the world today. Workloads developed by large-scale internet companies running in their datacenters have very different characteristics than those in high performance computing (HPC) or traditional enterprise market segments. Therefore, server design considerations, trade-offs and objectives for datacenter use cases are also significantly different from other market segments and require a different set of benchmarks and evaluation methodology. Existing benchmarks fall short of capturing these characteristics and hence do not provide a reliable avenue to design and optimize modern server and datacenter designs.\nIntroducing DCPerf\nMeta developed DCPerf, a collection of benchmarks to represent the diverse categories of workloads that run in cloud deployments. Each benchmark within DCPerf is designed by referencing a large application within Meta’s production server fleet. \nWe used several new techniques to ensure benchmark representativeness, ranging from low-level hardware microarchitecture features to application and library usage profiles, to analyze production workloads and capture the important characteristics of these workloads in DCPerf. Designing and optimizing hardware and software on future server platforms using these benchmarks willmore closely translate into improved efficiency of hyperscaler  production deployments. \nDCPerf’s design process.\nOver the past few years, we have continuously enhanced these benchmarks to make them compatible with different instruction set architectures, including x86 and ARM. We also validated that the benchmarks can be used to evaluate emerging industry trends, (e.g., chiplet-based architectures), and added support for multi-tenancy so that benchmarks can scale and make use of rapidly increasing core counts on modern server platforms. \n\nUsing DCPerf to improve Meta’s compute server designs\nWe have been using DCPerf internally, in addition to the SPEC CPU benchmark suite, for product evaluation at Meta to make the right configuration choices for our data center deployments. DCPerf also helps us make early performance projections that are used for capacity planning, identify performance bugs in hardware and system software, and jointly optimize the platform with our hardware industry collaborators. \nDCPerf provides a much richer set of application software diversity and helps get better coverage signals on platform performance versus existing benchmarks such as SPEC CPU. Due to these benefits, we have also started using DCPerf to assist with our decision making process on which platforms to deploy in our data centers. \nDCPerf captures the core and SOC microarchitecture characteristics of data center applications. Graph compares  Instruction-Per-Cycle of production applications, DCPerf and SPEC CPU. Red circles highlight that DCPerf more accurately represents IPC of production applications.\nDCPerf more closely captures the power and frequency characteristics of data center applications. This graph compares the average core frequency of production applications, DCPerf and SPEC CPU. Red circles highlight that DCPerf more accurately represents the frequency characteristics of production applications.\nImproving state-of-the-art computing platforms with our hardware industry collaborators using DCPerf\nOver the last two years we have collaborated with leading CPU vendors to further validate DCPerf on pre silicon and/or early silicon setups to debug performance issues and identify hardware and system software optimizations on their roadmap products. There have been multiple instances where we have been able to identify  performance optimizations in areas such as CPU core microarchitecture settings and SOC power management optimizations. \nThe graphic below shows areas of HW/SW design where we have seen DCPerf being representative of production usage and being beneficial for delivering relevant performance signals and help with optimizations as well as areas of future work.\n\nWe are thankful for our collaborators’ support and contributions using DCPerf to drive innovation in such an important and complex area and expect to continue improving the benchmarks with new version releases over time to adapt to emerging technologies. \nEnabling innovations through open collaboration\nToday, we are open-sourcing DCPerf with the goal to create a collaborative and open source reference benchmark that can be used to design, develop, debug, optimize, and improve state-of-the-art in compute platform designs for hyperscale. \nAs an open source benchmark suite, DCPerf has the potential to become an industry standard method to capture important workload characteristics of compute workloads that run in hyperscale datacenter deployments. \nGet DCPerf on GitHub\nDCPerf is available now on GitHub\nThe post DCPerf: An open source benchmark suite for hyperscale compute applications appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments. We hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products. DCPerf is available now on GitHub. Hyperscale and cloud datacenter [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/\">DCPerf: An open source benchmark suite for hyperscale compute applications</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments. We hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products. DCPerf is available now on GitHub. Hyperscale and cloud datacenter [...]\nRead More...\nThe post DCPerf: An open source benchmark suite for hyperscale compute applications appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21502",
        "categories": [
          "Data Center Engineering",
          "Open Source"
        ],
        "isoDate": "2024-08-05T15:55:14.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Prerna Dubey, Avital Derazon, Harshal Parikh and Kimi Robertson",
        "title": "eBay Introduces Intuitive Search Redesign to Elevate Shopper Experience",
        "link": "https://innovation.ebayinc.com/tech/features/ebay-introduces-intuitive-search-redesign-to-elevate-shopper-experience/",
        "pubDate": "Thu, 08 Aug 2024 00:00:00 -0700",
        "dc:creator": "Prerna Dubey, Avital Derazon, Harshal Parikh and Kimi Robertson",
        "content": "<div style=\"margin-bottom: 10px;\"><img src=\"https://static.ebayinc.com/static/assets/Uploads/Blog/Posts/_resampled/FitWzIwMCwxMTNd/SRP-1-Still-Image-1600px.jpg?fs=584489adc0e1b0b0\" width=\"200\" height=\"113\" alt=\"eBay Introduces Intuitive Search Redesign to Elevate Shopper Experience\" /></div><div>Introducing a more seamless and visually rich shopping experience. </div>",
        "contentSnippet": "Introducing a more seamless and visually rich shopping experience.",
        "guid": "https://innovation.ebayinc.com/tech/features/ebay-introduces-intuitive-search-redesign-to-elevate-shopper-experience/",
        "categories": [
          "article"
        ],
        "isoDate": "2024-08-08T07:00:00.000Z"
      }
    ]
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": [
      {
        "creator": "Netflix Technology Blog",
        "title": "Investigation of a Cross-regional Network Performance Issue",
        "link": "https://netflixtechblog.com/investigation-of-a-cross-regional-network-performance-issue-422d6218fdf1?source=rss----2615bd06b42e---4",
        "pubDate": "Mon, 05 Aug 2024 22:18:00 GMT",
        "content:encodedSnippet": "Hechao Li, Roger Cruz\nCloud Networking Topology\nNetflix operates a highly efficient cloud computing infrastructure that supports a wide array of applications essential for our SVOD (Subscription Video on Demand), live streaming and gaming services. Utilizing Amazon AWS, our infrastructure is hosted across multiple geographic regions worldwide. This global distribution allows our applications to deliver content more effectively by serving traffic closer to our customers. Like any distributed system, our applications occasionally require data synchronization between regions to maintain seamless service delivery.\nThe following diagram shows a simplified cloud network topology for cross-region traffic.\n\nThe Problem At First Glance\nOur Cloud Network Engineering on-call team received a request to address a network issue affecting an application with cross-region traffic. Initially, it appeared that the application was experiencing timeouts, likely due to suboptimal network performance. As we all know, the longer the network path, the more devices the packets traverse, increasing the likelihood of issues. For this incident, the client application is located in an internal subnet in the US region while the server application is located in an external subnet in a European region. Therefore, it is natural to blame the network since packets need to travel long distances through the internet.\nAs network engineers, our initial reaction when the network is blamed is typically, “No, it can’t be the network,” and our task is to prove it. Given that there were no recent changes to the network infrastructure and no reported AWS issues impacting other applications, the on-call engineer suspected a noisy neighbor issue and sought assistance from the Host Network Engineering team.\nBlame the Neighbors\nIn this context, a noisy neighbor issue occurs when a container shares a host with other network-intensive containers. These noisy neighbors consume excessive network resources, causing other containers on the same host to suffer from degraded network performance. Despite each container having bandwidth limitations, oversubscription can still lead to such issues.\nUpon investigating other containers on the same host — most of which were part of the same application — we quickly eliminated the possibility of noisy neighbors. The network throughput for both the problematic container and all others was significantly below the set bandwidth limits. We attempted to resolve the issue by removing these bandwidth limits, allowing the application to utilize as much bandwidth as necessary. However, the problem persisted.\nBlame the Network\nWe observed some TCP packets in the network marked with the RST flag, a flag indicating that a connection should be immediately terminated. Although the frequency of these packets was not alarmingly high, the presence of any RST packets still raised suspicion on the network. To determine whether this was indeed a network-induced issue, we conducted a tcpdump on the client. In the packet capture file, we spotted one TCP stream that was closed after exactly 30 seconds.\nSYN at 18:47:06\n\nAfter the 3-way handshake (SYN,SYN-ACK,ACK), the traffic started flowing normally. Nothing strange until FIN at 18:47:36 (30 seconds later)\n\nThe packet capture results clearly indicated that it was the client application that initiated the connection termination by sending a FIN packet. Following this, the server continued to send data; however, since the client had already decided to close the connection, it responded with RST packets to all subsequent data from the server.\nTo ensure that the client wasn’t closing the connection due to packet loss, we also conducted a packet capture on the server side to verify that all packets sent by the server were received. This task was complicated by the fact that the packets passed through a NAT gateway (NGW), which meant that on the server side, the client’s IP and port appeared as those of the NGW, differing from those seen on the client side. Consequently, to accurately match TCP streams, we needed to identify the TCP stream on the client side, locate the raw TCP sequence number, and then use this number as a filter on the server side to find the corresponding TCP stream.\nWith packet capture results from both the client and server sides, we confirmed that all packets sent by the server were correctly received before the client sent a FIN.\nNow, from the network point of view, the story is clear. The client initiated the connection requesting data from the server. The server kept sending data to the client with no problem. However, at a certain point, despite the server still having data to send, the client chose to terminate the reception of data. This led us to suspect that the issue might be related to the client application itself.\nBlame the Application\nIn order to fully understand the problem, we now need to understand how the application works. As shown in the diagram below, the application runs in the us-east-1 region. It reads data from cross-region servers and writes the data to consumers within the same region. The client runs as containers, whereas the servers are EC2 instances.\nNotably, the cross-region read was problematic while the write path was smooth. Most importantly, there is a 30-second application-level timeout for reading the data. The application (client) errors out if it fails to read an initial batch of data from the servers within 30 seconds. When we increased this timeout to 60 seconds, everything worked as expected. This explains why the client initiated a FIN — because it lost patience waiting for the server to transfer data.\n\nCould it be that the server was updated to send data more slowly? Could it be that the client application was updated to receive data more slowly? Could it be that the data volume became too large to be completely sent out within 30 seconds? Sadly, we received negative answers for all 3 questions from the application owner. The server had been operating without changes for over a year, there were no significant updates in the latest rollout of the client, and the data volume had remained consistent.\nBlame the Kernel\nIf both the network and the application weren’t changed recently, then what changed? In fact, we discovered that the issue coincided with a recent Linux kernel upgrade from version 6.5.13 to 6.6.10. To test this hypothesis, we rolled back the kernel upgrade and it did restore normal operation to the application.\nHonestly speaking, at that time I didn’t believe it was a kernel bug because I assumed the TCP implementation in the kernel should be solid and stable (Spoiler alert: How wrong was I!). But we were also out of ideas from other angles.\nThere were about 14k commits between the good and bad kernel versions. Engineers on the team methodically and diligently bisected between the two versions. When the bisecting was narrowed to a couple of commits, a change with “tcp” in its commit message caught our attention. The final bisecting confirmed that this commit was our culprit.\nInterestingly, while reviewing the email history related to this commit, we found that another user had reported a Python test failure following the same kernel upgrade. Although their solution was not directly applicable to our situation, it suggested that a simpler test might also reproduce our problem. Using strace, we observed that the application configured the following socket options when communicating with the server:\n[pid 1699] setsockopt(917, SOL_IPV6, IPV6_V6ONLY, [0], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_SNDBUF, [131072], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_RCVBUF, [65536], 4) = 0\n[pid 1699] setsockopt(917, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nWe then developed a minimal client-server C application that transfers a file from the server to the client, with the client configuring the same set of socket options. During testing, we used a 10M file, which represents the volume of data typically transferred within 30 seconds before the client issues a FIN. On the old kernel, this cross-region transfer completed in 22 seconds, whereas on the new kernel, it took 39 seconds to finish.\nThe Root Cause\nWith the help of the minimal reproduction setup, we were ultimately able to pinpoint the root cause of the problem. In order to understand the root cause, it’s essential to have a grasp of the TCP receive window.\nTCP Receive Window\nSimply put, the TCP receive window is how the receiver tells the sender “This is how many bytes you can send me without me ACKing any of them”. Assuming the sender is the server and the receiver is the client, then we have:\n\nThe Window Size\nNow that we know the TCP receive window size could affect the throughput, the question is, how is the window size calculated? As an application writer, you can’t decide the window size, however, you can decide how much memory you want to use for buffering received data. This is configured using SO_RCVBUF socket option we saw in the strace result above. However, note that the value of this option means how much application data can be queued in the receive buffer. In man 7 socket, there is\nSO_RCVBUF\nSets or gets the maximum socket receive buffer in bytes.\n The kernel doubles this value (to allow space for\n bookkeeping overhead) when it is set using setsockopt(2),\n and this doubled value is returned by getsockopt(2). The\n default value is set by the\n /proc/sys/net/core/rmem_default file, and the maximum\n allowed value is set by the /proc/sys/net/core/rmem_max\n file. The minimum (doubled) value for this option is 256.\nThis means, when the user gives a value X, then the kernel stores 2X in the variable sk->sk_rcvbuf. In other words, the kernel assumes that the bookkeeping overhead is as much as the actual data (i.e. 50% of the sk_rcvbuf).\nsysctl_tcp_adv_win_scale\nHowever, the assumption above may not be true because the actual overhead really depends on a lot of factors such as Maximum Transmission Unit (MTU). Therefore, the kernel provided this sysctl_tcp_adv_win_scale which you can use to tell the kernel what the actual overhead is. (I believe 99% of people also don’t know how to set this parameter correctly and I’m definitely one of them. You’re the kernel, if you don’t know the overhead, how can you expect me to know?).\nAccording to the sysctl doc,\ntcp_adv_win_scale — INTEGER\nObsolete since linux-6.6 Count buffering overhead as bytes/2^tcp_adv_win_scale (if tcp_adv_win_scale > 0) or bytes-bytes/2^(-tcp_adv_win_scale), if it is <= 0.\nPossible values are [-31, 31], inclusive.\nDefault: 1\nFor 99% of people, we’re just using the default value 1, which in turn means the overhead is calculated by rcvbuf/2^tcp_adv_win_scale = 1/2 * rcvbuf. This matches the assumption when setting the SO_RCVBUF value.\nLet’s recap. Assume you set SO_RCVBUF to 65536, which is the value set by the application as shown in the setsockopt syscall. Then we have:\n\nSO_RCVBUF = 65536\nrcvbuf = 2 * 65536 = 131072\noverhead = rcvbuf / 2 = 131072 / 2 = 65536\nreceive window size = rcvbuf — overhead = 131072–65536 = 65536\n\n(Note, this calculation is simplified. The real calculation is more complex.)\nIn short, the receive window size before the kernel upgrade was 65536. With this window size, the application was able to transfer 10M data within 30 seconds.\nThe Change\nThis commit obsoleted sysctl_tcp_adv_win_scale and introduced a scaling_ratio that can more accurately calculate the overhead or window size, which is the right thing to do. With the change, the window size is now rcvbuf * scaling_ratio.\nSo how is scaling_ratio calculated? It is calculated using skb->len/skb->truesize where skb->len is the length of the tcp data length in an skb and truesize is the total size of the skb. This is surely a more accurate ratio based on real data rather than a hardcoded 50%. Now, here is the next question: during the TCP handshake before any data is transferred, how do we decide the initial scaling_ratio? The answer is, a magic and conservative ratio was chosen with the value being roughly 0.25.\nNow we have:\n\nSO_RCVBUF = 65536\nrcvbuf = 2 * 65536 = 131072\nreceive window size = rcvbuf * 0.25 = 131072 * 0.25 = 32768\n\nIn short, the receive window size halved after the kernel upgrade. Hence the throughput was cut in half, causing the data transfer time to double.\nNaturally, you may ask, I understand that the initial window size is small, but why doesn’t the window grow when we have a more accurate ratio of the payload later (i.e. skb->len/skb->truesize)? With some debugging, we eventually found out that the scaling_ratio does get updated to a more accurate skb->len/skb->truesize, which in our case is around 0.66. However, another variable, window_clamp, is not updated accordingly. window_clamp is the maximum receive window allowed to be advertised, which is also initialized to 0.25 * rcvbuf using the initial scaling_ratio. As a result, the receive window size is capped at this value and can’t grow bigger.\nThe Fix\nIn theory, the fix is to update window_clamp along with scaling_ratio. However, in order to have a simple fix that doesn’t introduce other unexpected behaviors, our final fix was to increase the initial scaling_ratio from 25% to 50%. This will make the receive window size backward compatible with the original default sysctl_tcp_adv_win_scale.\nMeanwhile, notice that the problem is not only caused by the changed kernel behavior but also by the fact that the application sets SO_RCVBUF and has a 30-second application-level timeout. In fact, the application is Kafka Connect and both settings are the default configurations (receive.buffer.bytes=64k and request.timeout.ms=30s). We also created a kafka ticket to change receive.buffer.bytes to -1 to allow Linux to auto tune the receive window.\nConclusion\nThis was a very interesting debugging exercise that covered many layers of Netflix’s stack and infrastructure. While it technically wasn’t the “network” to blame, this time it turned out the culprit was the software components that make up the network (i.e. the TCP implementation in the kernel).\nIf tackling such technical challenges excites you, consider joining our Cloud Infrastructure Engineering teams. Explore opportunities by visiting Netflix Jobs and searching for Cloud Engineering positions.\nAcknowledgments\nSpecial thanks to our stunning colleagues Alok Tiagi, Artem Tkachuk, Ethan Adams, Jorge Rodriguez, Nick Mahilani, Tycho Andersen and Vinay Rayini for investigating and mitigating this issue. We would also like to thank Linux kernel network expert Eric Dumazet for reviewing and applying the patch.\n\nInvestigation of a Cross-regional Network Performance Issue was originally published in Netflix TechBlog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Netflix Technology Blog",
        "guid": "https://medium.com/p/422d6218fdf1",
        "categories": [
          "tcp",
          "debugging",
          "kernel",
          "network",
          "linux"
        ],
        "isoDate": "2024-08-05T22:18:00.000Z"
      }
    ]
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Vaclav Pech",
        "title": "MPS 2024.1 Is Out!",
        "link": "https://blog.jetbrains.com/mps/2024/08/mps-2024-1-is-out/",
        "pubDate": "Thu, 08 Aug 2024 15:19:12 +0000",
        "content:encodedSnippet": "In this release, you’ll find a new asynchronous implementation of the Logical View tool window, substantial improvements to Kotlin support for different platforms, and a noticeably faster test run time. You can also look forward to conditional forks in generator plans, deprecation of project paths in TestInfo, improvements to the new UI, and numerous platform updates.\nDOWNLOAD MPS 2024.1\nBefore we go over the specific features, we have two quick announcements for you:\nThe time has come for a new UI in MPS\nMPS is moving towards a new UI, which brings a more modern look and increases user productivity. The new UI has been fully enabled in MPS 2023.3. In 2024.1 it is set as the default for new MPS users, and in 2024.2 we plan to abandon the old UI altogether. We may keep it around as a separate plugin, but not for long.\nSettings | Appearance & Behavior | New UI.\n-Dide.experimental.ui – This option switches the new UI on or off for new users of your IDE. It is set to false for standalone IDE build scripts in 2023.3 and 2024.1.\n-Dexperimental.ui.used.once – When this is present, it will disable an automatic in-tool promotion that advertises the new UI to the users. This option is enabled by default for standalone IDE build scripts in 2023.3 and 2024.1.\nThe MPS IDEA plugin has been discontinued\nWith the user base for the IDEA plugin decreasing, we decided to discontinue the plugin and to invest our efforts into features that bring more value to customers and help make their work more enjoyable. The plugin is no longer available for download.\nThe new features\nHaving covered these two important announcements, now it’s time to check out the most exciting new features we’ve prepared for you in this release.\nEnhanced platform support for Kotlin\nThe Kotlin support in MPS was initially designed to support only common code. However, the only possible use case in MPS was compilation to the JVM, and the distinction between common code and JVM code was unclear.\nIn this release, we’re introducing platform source set configuration for Kotlin nodes. This allows you to identify which target platforms a piece of code supports and hide declarations from incompatible code.\n\nImproved Kotlin readability without the Coderules type system\nKotlin code in MPS used to raise a lot of typesystem and scope errors when the Kotlin Typesystem plugin, based on CodeRules, was not available. In order to improve readability and testability, these checks and errors are now muted when the Coderules-based typesystem plugin is not available.\n\nReimplementation of the Logical View pane\nThe Logical View pane is now based on an asynchronous architecture, which helps keep the UI responsive and contributes to the overall performance of the IDE. The new implementation also allows for easier extensions and modifications. For more details, refer to our article in the knowledge base entitled ProjectPane implementation on top of ProjectViewTree.\nThis new implementation has resulted in a few notable changes:\nShow Descriptor Models option affects all descriptor models.\nLogical View pane have been reorganized slightly.\n\nPlaceholder cells\nWe’ve introduced a new style into BaseLanguage that allows constant cells to serve as placeholders if there’s a missing value (a child node or a reference). For example, when no constructor is present in a class, a <no default constructor> placeholder cell can be displayed instead. The style causes constant cells to exhibit the behavior you would expect from such placeholder cells. The cursor can only be placed on the first position, and it is not possible to edit the value. Only modifications provided by attached transformation menus are permitted.\n\nEnable conditional fork in generation plans\nA small experimental new feature enables you to add a fork for a generation plan without actually modifying the original plan that is being forked. A generation plan can be marked as a fork of another generation plan. The marked plan will be treated as if it were referred to explicitly with the standard fork statement inserted at the very beginning of the forked generation plan.\nAdditionally, when defining a fork, you can use a string modifier that will serve as a trigger. The fork will only happen if the model being generated is owned by a module that has a generation target facet with a facet ID matching the string trigger.\n\nJUnit5 xml report in MPS\nJUnit tests in MPS can now generate test reports not only in the vintage and jupiter formats, but also in the Open Test report format. A new option is available in the build language’s test options to control whether the Open Test report is included in the generated reports. If the option is set to true, report files named junit-platform-events*-$BUILD_NAME$.xml are created in the project directory.\n\nIf the option is set to false, the legacy reports for vintage and jupiter engines are created.\nThe project paths in TestInfo are no longer needed\nTestInfo declarations are no longer required for tests that need an MPS project to be open. This applies to all approaches to executing the JUnit tests:\n<launchtests> task, the project path can be specified as an additional project path option of the task. If left unspecified, ${basedir} is used, which corresponds to the home directory of the current project.\n-Dmps.test.project.path system property.\nExisting TestInfo declarations are still supported and can be kept.\nMore new features…\nCheck out the What’s New page to learn all about the new features we’ve added for you.\nYou can find a full list of fixed issues here.\nYour JetBrains MPS team",
        "dc:creator": "Vaclav Pech",
        "content": "In this release, you’ll find a new asynchronous implementation of the Logical View tool window, substantial improvements to Kotlin support for different platforms, and a noticeably faster test run time. You can also look forward to conditional forks in generator plans, deprecation of project paths in TestInfo, improvements to the new UI, and numerous platform [&#8230;]",
        "contentSnippet": "In this release, you’ll find a new asynchronous implementation of the Logical View tool window, substantial improvements to Kotlin support for different platforms, and a noticeably faster test run time. You can also look forward to conditional forks in generator plans, deprecation of project paths in TestInfo, improvements to the new UI, and numerous platform […]",
        "guid": "https://blog.jetbrains.com/?post_type=mps&p=496473",
        "categories": [
          "releases",
          "release"
        ],
        "isoDate": "2024-08-08T15:19:12.000Z"
      },
      {
        "creator": "Matthias Koch",
        "title": "Equality Analysis, Ref Structs, Culture Previews, Using Directives – C# Language Support in 2024.2",
        "link": "https://blog.jetbrains.com/dotnet/2024/08/08/equality-analysis-ref-structs-culture-previews-using-directives-csharp-language-support-in-2024-2/",
        "pubDate": "Thu, 08 Aug 2024 14:35:17 +0000",
        "content:encodedSnippet": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as well!\nIn this series, we will cover features around:\nEscape Character, Extract Common Code, Params Modifier, Out Vars\nEquality Analysis, Ref Structs, Culture Previews, Using Directives\nCast Expressions, Primary Constructors, Collection Expressions, List Patterns\nMake sure to download the latest ReSharper or Rider EAP builds to follow along:\nDownload Rider EAP\nEnhanced Equality Analysis\nStruct types have been available since the very first .NET Framework. If you’re taking advantage of them, you may have heard that it’s good practice to override Equals and GetHashCode for performance reasons, because the default runtime implementation suffers from  boxing and reflection overhead. This is particularly relevant in hot paths that call equality members. Furthermore, the default implementation of GetHashCode works in a way that it takes the hash of the first non-null reference type field, which may lead to a bad distribution.\nIn 2024.2, we are introducing a set of new inspections to identify such performance issues where equality is checked under the hood. You can fix these issues by generating equality members, or by turning it into a record struct and letting the compiler generate implementations for you:\nFixing inefficient runtime equality check\n\n\n\n\nWe have also added a new attribute [DefaultEqualityUsage] to our JetBrains Annotations NuGet package, which allows you to mark types or parameters as being used for equality checks:\npublic class Equality\r\n{\r\n    object N() => M(new MyPoint()); // warning\r\n\r\n    object M<T>([DefaultEqualityUsage] T obj) => null;\r\n\r\n    // no Equals/GetHashCode overrides\r\n    public struct MyPoint;\r\n}\nCopy to clipboard\n\n            \nAs part of this feature, we also annotated the BCL with the new [DefaultEqualityUsage] attribute and discovered surprising details about some APIs. For example, you might assume that in a ConcurrentDictionary the equality is only checked for the TKey type. That is true until you use AddOrUpdate, which can also check TValue for being equal on update:\nvar idToData = new ConcurrentDictionary<int, Data>();\r\n\r\n// ConcurrentDictionary<TKey, TValue>.AddOrUpdate implementation\r\n// actually checks TValue for being equal on update:\r\nidToData.AddOrUpdate(\r\n    key: id,\r\n    // compute what to add\r\n    addValueFactory: static id => default,\r\n    // do the update\r\n    updateValueFactory: static (id, data) => data);\r\n\r\n// no Equals/GetHashCode overrides\r\npublic struct Data\r\n{\r\n    // members\r\n}\nCopy to clipboard\n\n            \nLast but not least, our analysis also catches suspicious non-structurally comparable types in record types. In the following example, two Payload objects would only be considered equal if they share the same byte[] array reference – this is very likely not the intended behavior. You would rather call SequenceEqual in your custom equality members:\nType with suspicious equality\n\n\n\n\nNote that this inspection will only be checked if the record type is being used in equality-relevant APIs in your solution.\nRef Struct Interfaces\nThe introduction of ref struct types in C# 7.2 (Span<T> and ReadOnlySpan<T>) has enabled many new high-performance scenarios. Those benefits came with limitations in a few aspects though. They could not be boxed, could not appear as fields in reference types, could not be stored as array elements, and did not allow interface inheritance. Some limitations are by design, but some could be relaxed during language evolution. One of those relaxations is interface inheritance.\nIn the following example, we’ve got a generic algorithm PrintArrayLike to print all items of an object of the type IArrayLike. With C# 13, we  can make our ref struct ArrayLikeSpan implement that interface. However, invoking the method on that object is still not possible yet! Can you guess why?\nvar obj = new ArrayLikeSpan([1, 2, 3]);\r\nPrintArrayLike(obj); // error\r\n\r\nvoid PrintArrayLike<TArrayLike>(TArrayLike arrayLike)\r\n    where TArrayLike : IArrayLike\r\n{\r\n    for (var index = 0; index < arrayLike.Length; index++)\r\n        Console.WriteLine(arrayLike[index]);\r\n}\r\n\r\npublic readonly ref struct ArrayLikeSpan(Span<int> span)\r\n    : IArrayLike // now allowed in C# 13!\r\n{\r\n    private readonly Span<int> span = span; // can store `ref struct` inside `ref struct`\r\n\r\n    public int Length => span.Length;\r\n    public int this[int index] => span[index];\r\n}\r\n\r\npublic interface IArrayLike\r\n{\r\n    int Length { get; }\r\n    int this[int index] { get; }\r\n}\nCopy to clipboard\n\n            \nIn the method PrintArrayLike, you could theoretically add the following line, which would essentially break the “no boxing” rule:\n// cannot box ref struct!\r\nvar reference = (object)arrayLike;\nCopy to clipboard\n\n            \nTherefore, the compiler requires you to make an explicit decision that the generic method can handle ref struct types and disallows boxing. This is achieved with the allows ref struct anti-constraint, which you can easily add through a quick-fix from the error:\nAdding allows ref struct through a quick-fix\n\n\n\n\nThe allows ref struct constraint will also show up in code completion with the shorthand aref:\nCode completion for allows ref struct\n\n\n\n\nCulture Previews\nSince ReSharper 8, we’ve been helping you choose the correct formatting specifiers in code completion. However, for types like DateTime or DateOnly, we could only guess which culture will eventually be set when your code executes and how ToString renders, so we chose CultureInfo.Invariant as the default.\nWith 2024.2, we are adding a new tooltip that shows how a value would render in different popular cultures, including the current OS culture:\nCulture preview tooltip\n\n\n\n\nSorting Using Directives\nAre you in the team of developers that just feels good about their using directives at the top of the file to be minimal and in order? In ReSharper and Rider, we are making sure that all file modifications make use of the same internal API which ensures exactly that. You may also know, that our code cleanup profiles have an option to optimize using directives on a shortcut or save operation. Despite all this effort, files can still end up with unordered and redundant lists of imports, mainly explained by manual edits like merge operations.\nIn 2024.2, we are making it complete by adding a Sort ‘using’ directives context action that can be triggered independently from all other cleanup steps:\nSorting using directives\n\n\n\n\nConclusion\nGive it a go with the latest ReSharper 2024.2 and Rider 2024.2, and let us know if you have any questions or suggestions in the comments section below.",
        "dc:creator": "Matthias Koch",
        "content": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as [&#8230;]",
        "contentSnippet": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=500693",
        "categories": [
          "net-tools",
          "how-tos",
          "net",
          "c",
          "inspections",
          "vb-net"
        ],
        "isoDate": "2024-08-08T14:35:17.000Z"
      },
      {
        "creator": "Vitaly Bragilevsky",
        "title": "Fleet Plugins Launched – Themes First",
        "link": "https://blog.jetbrains.com/fleet/2024/08/fleet-plugins-themes-first/",
        "pubDate": "Thu, 08 Aug 2024 12:58:35 +0000",
        "content:encodedSnippet": "Fleet is engineered for ultimate extensibility, offering a dynamic and customizable experience. Virtually every feature of Fleet is already powered by plugins pre-packaged with the Fleet distribution. Now, we are happy to announce the rollout of the Fleet Plugins SDK to the broader developer community. As an exciting first step, we are enabling the creation and sharing of custom color themes for Fleet. Let’s start crafting a unique Fleet experience!\nHow to publish a custom color theme in three steps\nIt is now possible to publish your own custom color themes. Themes for Fleet are distributed via JetBrains Marketplace as Fleet plugins, so a theme must be packaged accordingly. The process of creating and distributing color themes consists of the following three steps:\nDesigning a custom color theme (as a JSON file).\nPackaging the theme as a Fleet plugin.\nPublishing the plugin on JetBrains Marketplace.\nLet’s look at these steps a bit more closely.\nStep 1: designing a custom color theme\nThe easiest way to start designing a custom color theme is by using the Edit Color Theme… action (it can be invoked from the Actions popup launched via Cmd/Ctrl-Shift-K). This action creates a JSON file with a copy of the current theme and makes this copy the current one. Any changes to this file are applied in the UI automatically on save. \nTo demonstrate, let’s have some fun with tab header backgrounds. My favorite Fleet Light theme has the following color definitions:\n\"tab.background.default\": \"Gray 110\",\n\"tab.background.hovered\": \"Gray 100\",\n\"tab.background.selected\": \"White\",\nIt may not be the most exciting tab background, though. The following seems a bit more visually appealing to me:\n\n\n\n\nThe colors used here are defined in the “palette” section of the theme’s JSON file (closer to the end of this long file):\n\t\"Red 70\": \"#f3b4bf\",\n\t\"Green 70\": \"#91d2b8\",\n\t\"Blue 70\": \"#a2c8f7\", \nLet’s also give this theme a new name by editing the theme.name key in the beginning of the file and renaming the file itself to light-improved.json:\n{\n  \"meta\": {\n\t\"theme.name\": \"Fleet Light - Improved\",\nYou can find more details regarding editing theme JSON files in the documentation.\nNow we’re almost ready to share the theme with the rest of the world and start racking up download numbers. But before that, we need to package the theme as a plugin.\nStep 2: packaging your theme as a Fleet plugin\nDeveloping Fleet plugins requires a working installation of JDK 17, which can be obtained here (JDKs from other vendors are also supported). Then, we should create a new project from the dedicated theme plugin template on GitHub. There are several things which must be adjusted in the project before the theme plugin is ready. \nFirst, we need to replace the sample theme JSON file in my-theme-plugin/frontendImpl/src/jvmMain/resources/ with the file we prepared in the previous step. \nSecond, we need to register the theme in Fleet. This is where we have to start writing some real code, as opposed to just editing JSONs. Our code will be executed when the plugin is loaded in the running Fleet instance. To do this, we edit the my-theme-plugin/frontendImpl/src/jvmMain/kotlin/fleet/sample/frontendImpl/MyThemePlugin.kt file:\npackage fleet.sample.frontendImpl\n\nimport fleet.dock.api.ThemeId\nimport fleet.frontend.theme.registerTheme\nimport fleet.kernel.plugins.ContributionScope\nimport fleet.kernel.plugins.Plugin\nimport fleet.kernel.plugins.PluginScope\n\nclass MyThemePlugin : Plugin<Unit> {\n\tcompanion object : Plugin.Key<Unit>\n\n\toverride val key: Plugin.Key<Unit> = MyThemePlugin\n\n\toverride fun ContributionScope.load(pluginScope: PluginScope) {\n\t\tregisterTheme(ThemeId(id = \"light-improved\"))\n\t}\n}\nThe only line that needs to be edited is the call to the registerTheme function. The theme id must be the same as the name of the theme JSON file (without an extension). Note that theme registration doesn’t enable the theme automatically, but adds the theme to the list of available themes.\nThird, we need to do some bookkeeping for the plugin configuration. The plugin should have a unique id, a readable name, and a description. The name and the description are visible both on Marketplace and in Fleet’s Plugins tab (use the Plugins… action to open it). These parameters are set in the my-theme-plugin/build.gradle.kts file, for example:\nfleetPlugin {\n\t// STEP 1: chose an ID for your plugin, it must be unique\n\tid = \"pro.bravit.great.theme\"\n\n\t// STEP 2: set up the sensible metadata for your plugin\n \tmetadata {\n\t\treadableName = \"Fleet Light - Improved\"\n\t\tdescription = \"Great light theme for Fleet\"\n\t}\n\n\tfleetRuntime {\n\t\tversion = libs.versions.fleet.runtime\n\t}\n}\nPlugins are compiled against a fixed Fleet version. We can set the Fleet version in the  gradle/libs.versions.toml file as follows: \nfleet-runtime = \"1.38.89\"\nThis line also means that the plugin is supposed to work with Fleet versions from 1.38.89 onward (until it breaks – remember, that Fleet is still in Preview and we don’t provide any API stability guarantees).\nOnce we are done with editing the files, we can launch Fleet with the plugin in development by opening the Run dialog and choosing the Run Fleet with local plugin run configuration. The Fleet instance will be launched after a bit of compilation and will have our theme available in the Color Theme… dialog, so we can select it and make sure that it works as expected. We can also check out the Plugins tab to make sure that the plugin has been loaded:\n\n\n\n\nThere’s still one last problem we need to address – our plugin is not yet available for other users to install. Let’s fix that!\nStep 3: publishing your plugin on Marketplace\nFleet uses JetBrains Marketplace for distributing its plugins. To be able to upload plugins, plugin developers need to meet the following requirements: \nThey should have a JetBrains account (can be created at JetBrains Account Center).\nThey should register as vendors on JetBrains Marketplace (can be done at this page).\nThey should get a personal token (can be generated here).\nThe personal token from Marketplace should be a value of the org.jetbrains.fleet-plugin.marketplaceUploadToken Gradle property. This property can be set in multiple ways. The easiest way is to add it to the gradle.properties file in the Gradle User Home Directory (defaulted to $HOME/.gradle/ on macOS and Linux, or C:\\Users\\<USERNAME>\\.gradle\\ on Windows):\norg.jetbrains.fleet-plugin.marketplaceUploadToken=perm:...\nWhen publishing a plugin for the first time, we need to prepare a zip-file distribution by running the following command in the terminal:\n./gradlew distZip\nThis command creates the my-theme-plugin/build/pluginDistribution/my-theme-plugin-0.1.0.zip file. Then we go to the Upload plugin page, select Plugin For Fleet, fill all the other required fields, and press the Upload Plugin button. \nThe freshly uploaded plugin requires approval from the Marketplace team. Once the plugin is approved, anyone can install it from the Plugins tab in Fleet. Hooray!\n\n\n\n\nFor the subsequent uploads of the newer versions of a plugin, we can use the uploadPlugin Gradle task:\n./gradlew uploadPlugin\nNow that we’ve published our first plugin, let’s get a bird’s-eye view of the Fleet Plugins SDK and Fleet plugins in general.\nWhat is the Fleet Plugins SDK\nAs pieces of software, Fleet plugins require specialized tooling to be developed. We use Gradle as the foundation for that tooling. From a technical perspective, the main component of the Fleet Plugins SDK is the Fleet plugin for Gradle. This plugin manages the entire process, including preparing the plugin source code for building, downloading the necessary dependencies, building the plugin project, assembling the plugin artifact, and uploading it to JetBrains Marketplace.\nThe Fleet Plugins SDK also includes a collection of APIs and their implementations, which provide access to the underlying Fleet functionalities. We aim to design their APIs to be robust and versatile, enabling developers to seamlessly integrate and extend various aspects of Fleet.\nWhat is a Fleet plugin\nFleet plugins are developed as Kotln Multiplatform Gradle-based projects. Only one Kotlin Multiplatform target is supported at this time: Kotlin/JVM. \nPlugin projects consist of layers that reflect Fleet’s architecture and replicate Gradle source sets. The simplest plugin might have only one layer that provides an implementation of a contributed frontend-only functionality. More sophisticated plugins might also implement some functionality for Fleet workspaces, provide common code for both frontends and workspaces, and also define additional APIs other plugins can depend on.\nFor example, here’s the structure of a sample theme plugin project, as described in settings.gradle.kts:\nrootProject.name = \"my-theme-plugin-project\"\ninclude(\":my-theme-plugin\")\ninclude(\":my-theme-plugin:frontendImpl\")\nThere are also several build.gradle.kts files in the project, describing the whole project, a contributed plugin, and each layer respectively:\nbuild.gradle.kts\nmy-theme-plugin/build.gradle.kts\nmy-theme-plugin/frontendImpl/build.gradle.kts\nAs yet another level of modularization, Fleet leverages the Java Platform Modules system. Java modules are used to describe module dependencies and exported packages and to represent a plugin as a service provider (loadable via the Java ServiceLoader API). The my-theme-plugin/frontendImpl/src/jvmMain/java/module-info.java file describes the theme plugin’s module:\nmodule fleet.sample.frontendImpl {\n\trequires fleet.frontend;\n\trequires fleet.kernel;\n\trequires fleet.util.logging.api;\n\trequires fleet.rhizomedb;\n\trequires fleet.frontend.ui;\n\n\texports fleet.sample.frontendImpl;\n\tprovides fleet.kernel.plugins.Plugin \n\t\twith fleet.sample.frontendImpl.MyThemePlugin;\n}\nIn Kotlin terms, a Fleet plugin is a class that implements the  fleet.kernel.plugins.Plugin<API> interface. The ContributionScope.load extension method defined as part of this class serves as an entry point for all the functionality provided by a plugin. In the sample theme plugin, we’ve registered a theme in this method. To do something else, we need to know how to approach other pieces of Fleet functionality from a plugin.\nFleet Plugins roadmap\nIn the coming months, we aim to gradually publish various parts of the Fleet Plugins API to enable the extension and customization of the following Fleet functionalities:\nKeymaps: This will allow users to customize keyboard shortcuts, creating a more personalized and efficient workflow. Users can map commands to specific key combinations to suit their individual preferences and streamline their development process.\nSyntax highlighting: By enabling customization of syntax highlighting, developers can tailor the way code is displayed based on their personal preferences or project-specific requirements. This can enhance readability and help in quickly identifying different parts of the code, such as keywords, variables, and function names.\nSupporting language servers via LSPs (language server protocols): This feature will support the integration of existing language servers, enabling advanced code editing features like auto-completion, error checking, and refactoring across various programming languages. It will facilitate a more robust and versatile development environment within Fleet.\nRunning external tools: Users will have the ability to integrate and execute external tools directly from within the Fleet environment. This can include anything from build tools and linters to custom scripts and automation processes, enhancing the flexibility and power of the development workflow.\nExtending the UI: This functionality will provide options for users to modify and extend the user interface of Fleet. Whether it’s adding new panels, customizing existing ones, or creating entirely new UI components, users will be able to tailor the interface to better fit their needs and preferences.\nAnd many more: In addition to the aforementioned functionalities, a wide range of other extension and customization options will be made available. This may include features like version control integration, debugging tools, project management enhancements, and more, all designed to make Fleet a more powerful and adaptable development environment.\nStay tuned!",
        "dc:creator": "Vitaly Bragilevsky",
        "content": "Fleet is engineered for ultimate extensibility, offering a dynamic and customizable experience. Virtually every feature of Fleet is already powered by plugins pre-packaged with the Fleet distribution. Now, we are happy to announce the rollout of the Fleet Plugins SDK to the broader developer community. As an exciting first step, we are enabling the creation [&#8230;]",
        "contentSnippet": "Fleet is engineered for ultimate extensibility, offering a dynamic and customizable experience. Virtually every feature of Fleet is already powered by plugins pre-packaged with the Fleet distribution. Now, we are happy to announce the rollout of the Fleet Plugins SDK to the broader developer community. As an exciting first step, we are enabling the creation […]",
        "guid": "https://blog.jetbrains.com/?post_type=fleet&p=500358",
        "categories": [
          "plugin-development",
          "news",
          "plugins",
          "color-themes",
          "fleet",
          "sdk"
        ],
        "isoDate": "2024-08-08T12:58:35.000Z"
      },
      {
        "creator": "Alena Gupaisova",
        "title": "JetBrains is a Proud Sponsor of the International Olympiad in Informatics",
        "link": "https://blog.jetbrains.com/blog/2024/08/08/jetbrains-is-a-proud-sponsor-of-the-international-olympiad-in-informatics/",
        "pubDate": "Thu, 08 Aug 2024 08:53:56 +0000",
        "content:encodedSnippet": "At JetBrains, we’re committed to fostering education and nurturing young programming talents. Our support extends to various educational initiatives, such as scholarships for bachelor’s degrees in Germany and Cyprus, the Algorithm and Code Training School in Romania, and the International Collegiate Programming Contest (ICPC). \nThis year, we’re excited to announce our sponsorship of the International Olympiad in Informatics (IOI), which will take place early September in Alexandria, Egypt. As part of our sponsorship, we’re providing IOI participants with free access to our software tools, including CLion for C and C++ development.\n\n\n\n\nWhat is IOI?\n\n“IOI is an algorithmic programming competition that allows the best and brightest young students from across the globe to compete against one another. Besides the competition, we also aim to provide an environment where those leaders of tomorrow can learn from each other, make new friends, and get introduced to different cultures. The support from JetBrains is very important and helps with both the competitive side as well as the social program.”, states Eljakim Schrijvers, member of the International Committee of the International Olympiad in Informatics (IOI).\nThe IOI is among the most prestigious international science Olympiads for high school students. This annual event brings together exceptional talents from over 100 countries to compete in an algorithmic challenge that tests their informatics skills, including problem analysis, design of algorithms and data structures, programming, and testing. Each participating country selects a team of up to four contestants to represent their nation. Competitors work individually to solve three algorithmic problems within five hours, striving to maximize their scores.\n\n“For over two decades, we’ve focused on nurturing talented individuals, beginning with local schools and universities. Last year, we started supporting top talents on the international stage,” says Andrey Ivanov, SVP of Investments, Research, and Education at JetBrains. “At IOI contestants can use our cutting-edge product, CLion, to solve their tasks. We hope this helps them get comfortable with the tools professional programmers use and sets them up for future career success.”\n\n\n\n\nCome join us in Alexandria on September 2 – 7 at the JetBrains Booth!\nAnd good luck to IOI 2024 participants!",
        "dc:creator": "Alena Gupaisova",
        "content": "At JetBrains, we&#8217;re committed to fostering education and nurturing young programming talents. Our support extends to various educational initiatives, such as scholarships for bachelor’s degrees in Germany and Cyprus, the Algorithm and Code Training School in Romania, and the International Collegiate Programming Contest (ICPC).&#160; This year, we&#8217;re excited to announce our sponsorship of the International [&#8230;]",
        "contentSnippet": "At JetBrains, we’re committed to fostering education and nurturing young programming talents. Our support extends to various educational initiatives, such as scholarships for bachelor’s degrees in Germany and Cyprus, the Algorithm and Code Training School in Romania, and the International Collegiate Programming Contest (ICPC).  This year, we’re excited to announce our sponsorship of the International […]",
        "guid": "https://blog.jetbrains.com/?post_type=blog&p=500179",
        "categories": [
          "news"
        ],
        "isoDate": "2024-08-08T08:53:56.000Z"
      },
      {
        "creator": "Daria Voronina",
        "title": "Kotlin Roundup: Ktor in Focus",
        "link": "https://blog.jetbrains.com/kotlin/2024/08/kotlin-roundup-ktor-in-focus/",
        "pubDate": "Thu, 08 Aug 2024 08:49:44 +0000",
        "content:encodedSnippet": "Welcome to this special edition of Kotlin Roundup, where we shine the spotlight on Ktor, our framework for building asynchronous servers and clients in connected systems! \nThis issue is packed with the latest updates, insightful news, and exciting developments in the Ktor ecosystem, appealing to everyone from seasoned Ktor enthusiasts to those just getting started. Plus, we have a few other exciting stories about Kotlin you won’t want to miss!\nKtor Updates\nKtor 3.0.0 Beta-2 is here!\nLast month, we announced Ktor 3.0.0 Beta-2. The key features of this release include:\n– Kotlin 2.0 support\nClick below to see the full list of changes.\nGive it a try\n                                                    \nUpdated Ktor generator\nWe have updated the Ktor generator, a tool that allows you to easily create a new Ktor application and configure the required functionality. Part of the Ktor generator’s new look and feel includes the easy project configuration and a one-click preview. Additionally, you can now add your plugins to the Ktor plugin registry. Be sure to take this opportunity to contribute to the Ktor ecosystem!\nSee it in action\n                                                    \nRevamped Ktor tutorials\nWe have refreshed our Get Started with Ktor Server tutorials to provide a more streamlined and user-friendly experience. These refreshed tutorials now offer more precise instructions, improved examples, and enhanced guidance to help you quickly master the fundamentals of building applications with Ktor. Dive in and explore the new content to kickstart your Ktor journey with ease.\nCheck out the tutorials\n                                                    \nThe Managing Complexity With Ktor talk recording\nUnlock the full potential of Ktor! The recording of the KotlinConf talk Managing Complexity With Ktor by Garth Gilmour is now available for you to watch and enjoy. Discover how to leverage server-sent events and WebSockets. Plus, master dependency injection with Koin, Kodein, and Hilt.\nWatch now\n                                                    \nNew Kotlin RPC tutorial\nExplore our new tutorial to learn more about Kotlin RPC (remote procedure call). An exciting new addition to the Kotlin ecosystem, Kotlin RPC builds on well-established foundations and runs on the kotlinx.rpc library. Read the tutorial to understand the core Kotlin RPC concepts and discover how to build a simple application with the technology.\nExplore further\n                                                    \nDid you know that the JetBrains team regularly publishes a newsletter featuring major Kotlin ecosystem news? Sign up to stay up to date with all things Kotlin.\n\n\n\n            \nMore Stories and News\nThe kotlinx.rpc library\nThe kotlinx.rpc library is live! Now, you can add asynchronous remote procedure call (RPC) services to your Kotlin Multiplatform applications. Visit our GitHub page and share your feedback and feature requests.\nGo to the GitHub page\n                                                    \nKotlinConf 2025 tickets are now on sale!\nThe countdown to KotlinConf 2025 has officially begun, and we’re excited to announce that tickets are now on sale for this premier event, which will take place from May 21–23, 2025, in Copenhagen, Denmark! The Super Early Bird tickets have already sold out, so don’t miss the opportunity to get one of the remaining Early Bird tickets. Book early and save!\nGet your tickets now\n                                                    \nKotzilla joins the Kotlin Foundation\nKotzilla has joined the Kotlin Foundation as a Silver member. This new partnership will advance the ecosystem and enrich the Kotlin community. The Kotzilla team has put significant effort into the advancement of Kotlin, especially with the creation of Koin, an open-source dependency injection (DI) framework.\nRead the news\n                                                    \nKotlin 2.0.10 released\nKotlin 2.0.10 is now available. This is a bug-fix release for Kotlin 2.0.0. For more details, click the link below to check out the release notes on GitHub.\nLearn more\n                                                    \nKotlin 2.0.20-RC released\nWe’ve also released Kotlin 2.0.20-RC. The highlights of this release include:\n– Language: Data class copy function to have the same visibility as constructor\nGet more details\n                                                    \nAmper update: standalone projects, settings tracing, and more\nThe latest release of Amper, version 0.4.0, is now available! In this update, we introduce a clear definition for the project root, provide a first look at settings tracing in Amper, and include various bug fixes and improvements.\nRead the blog post\n                                                    \nEnhanced Column Selection DSL in Kotlin DataFrame\nThe Kotlin DataFrame library simplifies the process of extracting values from structured data. Our recent blog post unveils the power and versatility of the Column Selection DSL. Explore new functions and improved syntax for selecting values from structured data in Kotlin DataFrame.\nRead on",
        "dc:creator": "Daria Voronina",
        "content": "Welcome to this special edition of Kotlin Roundup, where we shine the spotlight on Ktor, our framework for building asynchronous servers and clients in connected systems!&#160; This issue is packed with the latest updates, insightful news, and exciting developments in the Ktor ecosystem, appealing to everyone from seasoned Ktor enthusiasts to those just getting started. [&#8230;]",
        "contentSnippet": "Welcome to this special edition of Kotlin Roundup, where we shine the spotlight on Ktor, our framework for building asynchronous servers and clients in connected systems!  This issue is packed with the latest updates, insightful news, and exciting developments in the Ktor ecosystem, appealing to everyone from seasoned Ktor enthusiasts to those just getting started. […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=499404",
        "categories": [
          "news",
          "ktor"
        ],
        "isoDate": "2024-08-08T08:49:44.000Z"
      },
      {
        "creator": "Irina Mariasova",
        "title": "Java Annotated Monthly – August 2024",
        "link": "https://blog.jetbrains.com/idea/2024/08/java-annotated-monthly-august-2024/",
        "pubDate": "Thu, 08 Aug 2024 07:40:21 +0000",
        "content:encodedSnippet": "Welcome to this month’s Java Annotated Monthly! \nAs always, we bring you the latest Java news and updates on related technologies. This edition features a special section with Sebastian Daschner, who shares his favorite picks for July. You’ll also find helpful articles on Java 23, a snapshot of Java in today’s tech landscape, and much more. \nDive in to stay informed and inspired!\nFeatured Content\nSebastian Daschner is a self-employed consultant, author, and trainer who is enthusiastic about programming and Java. He is the author of the book Architecting Modern Java EE Applications. Sebastian participates in open-source standardization processes such as the JCP or the Eclipse Foundation and collaborates on various open-source projects. He is a Java Champion, Oracle Developer Champion, and JavaOne Rockstar. Sebastian evangelizes computer science practices on his blog, in his newsletter, on his podcast, in videos, and on X (formerly Twitter) via @DaschnerS.\nAs a JetBrains Community Contributor, I’m happy and honored to contribute to this month’s edition of the Java Annotated Monthly newsletter. In the following paragraphs, you’ll find my biased views on what is interesting in the Java world this month, why you definitely should use Quarkus and IntelliJ IDEA, as well as care about developer productivity. Oh, speaking of Why You Should Use Quarkus for Your Next Project, that’s the title of my talk at this year’s JavaZone conference, happening in September in Oslo.\nLet’s start with a shameless plug for a recent video I published on 13 Cool IntelliJ IDEA features that you probably didn’t know about. I’ve mentioned a few times that there is probably no single person on the planet who knows every single IntelliJ IDEA feature, including the developers at JetBrains. Our favorite Java IDE is packed with cool features, and in this video, I showcase some of them that provoked an “oh wow” reaction. Especially if you don’t know about the structural search and replace (SSR), Hippie completion, HTTP Client, or Dependency Structure Matrix (DSM) features, you should definitely have a look.\nAnother interesting topic that I’ve played around with is generative AI/LLMs, especially with local deployments and retrieval-augmented generation (RAG) that enables very interesting scenarios, both on internal tools and potentially on production applications, too. I was inspired by Guillaume Laforge’s session at Devoxx Poland about Gemini, the LangChain4j library, and the possibilities of RAG. Guillaume built a chatbot website on top of the Groovy documentation that knows the docs and can accurately generate responses, which, thanks to RAG, produces a much better quality output than your typical LLM chatbot. I’m curious to see what additional use cases the industry will come up with that can be helpful for developers, and of course, it shows that Java is a great fit for GenAI applications.\nAnother insight that I had recently was how much Quarkus is a win-win-win for the Java community, from developers’, managers’, and ecological perspectives. What I mean is that the technologies that are typically chosen from a budget or cost perspective might not have the best developer experience, nor effectiveness in terms of resource consumption. Quarkus, however, makes our applications greener thanks to its lower footprint and for the same reason saves money by being more cost-effective – especially in cloud deployments. Still, the developer experience is also outstanding, which is why pretty much all developers I talk to enjoy its quick turnaround and build times, especially its dev mode. That’s what I’d consider a win-win-win for managers, developers, and the environment. Holly Cummins also has a few great talks about Quarkus’ eco-friendliness, for example in her Voxxed Days talk Faster, greener, and happier- why Quarkus should be your next tech stack.\nJava News\nJava News Roundup 1, 2, 3, 4, 5 – Stay informed on the latest Java news with this weekly selection. \nJava and AI? – Inside Java Newscast #72 – Nicolai Parlog talks about Java’s strengths and weaknesses in AI development. He highlights its competitive edge in integrating AI features into larger projects, thanks to projects like Valhalla, Panama, and Babylon. \nIntegrity by Default – Inside Java Newscast #73 – The article introduces new security measures in OpenJDK that restrict certain operations like deep reflection and native code by default. \nJava 23: What’s New? – Loïc Mathieu details the new features in Java 23, including the removal of string templates, support for primitive types in patterns, and Markdown for Javadoc comments. He also covers the deprecation of unsafe memory-access methods, enhancements to the ZGC Garbage Collector, and the introduction of module import declarations.\nJava Tutorials and Tips\nJava 21 Virtual Threads – Dude, Where’s My Lock? – Check out how the implementation of virtual threads in Java 21 helped to enhance performance in Netflix’s microservices.\nFoojay Podcast #55: Embedded Java, Part 2 – The episode explores the history of Java Micro Edition and highlights how modern embedded systems can run the same Java runtime as larger systems.\nJava Language Futures – Spring 2024 Edition – Gavin Bierman discusses the rapid evolution of the Java programming language, highlighting recent changes and upcoming features expected in Java.\nThe power of embeddings: How numbers unlock the meaning of data – Guillaume Laforge explains how vector embeddings convert data into numerical codes that capture meaning, improving search and analysis. He covers the creation process, storage in vector databases, and applications like semantic search and anomaly detection.\nJava: Demystifying The Stream API – Part 3 – Mahendra Rao B explains the Java Stream API, highlighting how it uses functional programming techniques like map, filter, and reduce for efficient data processing.\nFoojay Podcast #56: Vectors in Java Code, Databases, and LLMs – In this podcast, Frank Delporte and guests Jonathan Ellis and Alexander Chatzizacharias discuss how vectors enhance AI and machine learning, looking at their practical application in the tech industry.\nJava and AI – A Structured Analysis – Nicolai Parlog discusses Java’s strengths and limitations for AI development, highlighting enhancements from OpenJDK projects like Panama, Babylon, and Valhalla, and its competitive edge for large AI projects.\nProject Loom – Structured Concurrency – Structured concurrency treats groups of related tasks as a single unit, improving error handling, cancellation, reliability, and observability, and it pairs well with virtual threads. This session by Alan Bateman introduces the concept and the preview API supporting it.\nPASSED! Scott’s Experience Taking the Java 21 Certification Exam 1Z0-830 – If you’re planning to take this exam, this article might be helpful. \nNew video series “JavaFX In Action”, Part 1 – Check out the recent interviews with JavaFX developers. It showcases their projects, insights, and the benefits of using JavaFX for creating responsive, feature-rich applications.\nEffective Java Logging – Muaath Bin Ali explains how developers and operations teams can leverage the Simple Logging Facade for Java (SLF4J) and Logback to turn logs into strategic resources for application management and incident resolution. \nImproving Maven build times – Check out helpful tips on speeding up Maven builds. Learn to optimize dependencies, use parallel builds, and leverage build caches. \nKotlin Corner\nKotlinConf 2025 Tickets Are Now on Sale! – The conference will be held from May 21–23, 2025, in Copenhagen, Denmark, featuring various workshops and sessions on Kotlin-related topics. Early bird and regular tickets are available, with workshops covering asynchronous programming, Kotlin Multiplatform, Ktor, and Compose Multiplatform.\nEnhanced Column Selection DSL in Kotlin DataFrame – Garth Gilmour and Jolan Rensen detail new functions for easier column selection in Kotlin DataFrame. These enhancements include handling nested data, selecting columns by index, and using predicates.\nCoroutine Essentials – Dave Leeds introduces the basics of Kotlin coroutines such as coroutine builders, suspending functions, and suspension points. \nCoroutines: Concurrency in Kotlin by Dave Leeds – If you prefer a video format for the previous topic, check out this presentation.\nUltimate Kotlin TDD FizzBuzz by Duncan McGregor – Find out what the FizzBuzz kata is all about. \nXcode-Kotlin 2.0 Release by Touchlab – Xcode-Kotlin 2.0 offers up to five times faster debugging performance, expanded variable information, and support across Swift, Kotlin, and Objective-C code. The blog post provides installation instructions and showcases the improved debugging experience.\nLanguages, Frameworks, Libraries, and Technologies\nThis Week in Spring 1, 2, 3, 4, 5 – Don’t miss the recent Spring news! \nWhat’s wrong with createDirectories() – A Beginner’s Guide to IntelliJ Profiler – Igor Kulakov explains how to use the IntelliJ Profiler to make Java applications run faster. He covers basic profiling and finding performance issues, and he also offers optimization tips with an example.\nOpenTelemetry Tracing on Spring Boot, Java Agent vs. Micrometer Tracing – Nicolas Fränkel explains how to implement OpenTelemetry tracing in a microservices setup using Spring Boot and Flask applications.\n9 Best Java Profilers to Use in 2024 – Lee Sheinberg reviews the top nine Java profilers for 2024, including tools like YourKit, JProfiler, and the IntelliJ Profiler. She explains their features, use cases, and how they help developers improve performance and manage memory.\nReduce Maven Plugin logging – Maarten Mulders offers tips to reduce excessive logging from Maven plugins, specifically the OpenAPI Generator Maven plugin. He suggests using SLF4J to suppress unnecessary log messages, resulting in significantly cleaner build logs.\nEnhancing the Visibility of Integration Tests – Anton Belyaev provides practical tips for improving the visibility of integration tests, focusing on interactions with external services. He recommends using DSL wrappers, JsonAssert, and storing specifications in JSON files to make tests more readable and maintainable.\nBetter ‘printf’ Debugging – Igor Kulakov demonstrates how to use logpoints in IntelliJ IDEA to enhance traditional printf debugging. He covers the usage of live templates for logging method parameters, values, and entries, setting logging breakpoints to avoid manual log management, and managing frequent events to prevent console flooding.\nPrompt Engineering – Basic Concepts For Developers – Marco Behler invites you to learn about essential concepts for writing non-trivial applications on top of LLMs.\nHow to use symbolic links to move the DB data folder – Vlad Mihalcea explains how to use symbolic links to move a database data folder to a different partition to free up space. \nHave you ever considered just not writing bugs? by Tagir Valeev – This talk examines several Java code snippets with common mistakes and explores some tools and approaches that can prevent these bugs.\nGet Started With Allocation Profiling – Igor Kulakov explains how to diagnose and fix a memory leak in a Java application using allocation profiling tools. \nConferences and Events\nCheck what events are available in August: \nLondon Java Community (LJC) Live with Trisha Gee – London, United Kingdom, August 5\nBangalore JUG Meetup – Bangalore, India, August 10\nMoving Java Forward Together – Online, August 21\nSpringOne – Online, August 26–28\nJUG.CH Sommerparty 2024 – Zurich, Switzerland, August 30\nCulture and Community\nFAQ: What’s a @KevlinHenney? – Find out what a @KevlinHenney screen is and why people are terrified when they see one. \nBeing a Responsible Developer in the Age of AI Hype – Justin Sheehy discusses the need for responsible AI development, emphasizing the importance of avoiding hype and creating ethical systems. He offers guidance on assessing AI technologies critically to ensure they are used responsibly and ethically.\nBuilding a Culture of Continuous Experimentation – Sarah Aslanifar discusses leveraging continuous learning to drive efficiency, eliminate waste, and significantly improve product outcomes, covering the crucial role of minimum viable products (MVPs).\nAnd Finally…\nThe New UI Becomes the Default in 2024.2 – Don’t miss this update if you are still using the classic UI and haven’t updated to the new one yet. \nTop Tools for Java Developers in 2024 – Check out a convenient list with helpful links about the tools you might need for productive work with Java.\nUsing Dev Containers in JetBrains IDEs – Part 1 – Yuri Trukhin explains how dev containers streamline development in JetBrains IDEs by creating isolated, consistent environments with all the necessary tools and dependencies. This first part of the series covers the basics of dev containers, their advantages, and how to set them up for your projects.\nIs Java Still Relevant Nowadays? – Despite new languages emerging, does Java remain widely used in various sectors? Find out in this blog post. \nThat’s all for today!\nWe’re gathering ideas for the next Java Annotated Monthly. Share your suggestions via email or X (formerly Twitter) by August 20. Don’t forget to explore our archive of past JAM issues to catch up on any posts or articles you might have missed.",
        "dc:creator": "Irina Mariasova",
        "content": "Welcome to this month&#8217;s Java Annotated Monthly!&#160; As always, we bring you the latest Java news and updates on related technologies. This edition features a special section with Sebastian Daschner, who shares his favorite picks for July. You&#8217;ll also find helpful articles on Java 23, a snapshot of Java in today&#8217;s tech landscape, and much [&#8230;]",
        "contentSnippet": "Welcome to this month’s Java Annotated Monthly!  As always, we bring you the latest Java news and updates on related technologies. This edition features a special section with Sebastian Daschner, who shares his favorite picks for July. You’ll also find helpful articles on Java 23, a snapshot of Java in today’s tech landscape, and much […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=500092",
        "categories": [
          "java",
          "news",
          "ai",
          "intellij-idea",
          "java-annotated",
          "spring"
        ],
        "isoDate": "2024-08-08T07:40:21.000Z"
      },
      {
        "creator": "Márton Braun",
        "title": "Amper Update August 2024 – Standalone Projects, Settings Tracing, and More",
        "link": "https://blog.jetbrains.com/amper/2024/08/amper-update-august-2024/",
        "pubDate": "Thu, 08 Aug 2024 07:20:08 +0000",
        "content:encodedSnippet": "The latest release of Amper, version 0.4.0, is now available! In this release, we’re introducing a clear definition for the project root and providing a first look at settings tracing in Amper, alongside bug fixes and other improvements.\nTo get support for Amper’s latest features, use Fleet 1.38 and IntelliJ IDEA 2024.2 (or later versions).\nProject file in standalone projects\nUntil now, projects using the standalone version of Amper didn’t have a strong definition of what the project contains. In this release, we’re introducing a new project-level configuration file. This clarifies the root and contents of the project, and provides a consistent experience whether you’re working in the IDE or invoking Amper from the command line.\nThis is a significant design decision, and we’d like to know what you think of it. Please read the details below and share your thoughts on this approach for project definitions.\nSingle-module Amper projects can still be defined with just a module.yaml file, allowing you to start new projects quickly, with minimal configuration.\nMulti-module projects must now contain a project.yaml file in their root directory, listing all included modules. This list can contain individual module paths or glob patterns, for example:\nmodules:\n - app\n - util\n - features/*\nEstablishing this project file also lays the groundwork for adding more features and possible improvements in later releases.\nFor example:\nThis file can serve as a location for project-wide configuration options.\nDependencies and versioning information could be stored in this file (similarly to version catalogs).\nPath references could be relative to the project root instead of relative to each configuration file (as it is currently implemented).\n\n\n\n\nFor Gradle-based Amper projects, the settings.gradle.kts file continues to serve as the project definition file. However, starting in this version, it must now explicitly list all included Amper modules.\nTo learn more about configuring the project root, see the Basics section of the documentation.\nSettings tracing\nAs your project grows, it becomes increasingly important to know what’s happening in its build configuration. To help you inspect and understand your build, Amper has facilities for settings tracing to keep track of how and where settings values are specified, and when they’re overridden. In this release, we are sharing a first preview of features built on settings tracing, with more to come later.\nYou can check the tooltip of the settings block (or its nested blocks) to see all effective values and where they’re defined:\n\n\n\n\nWhen looking at an individual setting, you can see when it overrides a value that’s already set:\n\n\n\n\nInspections can warn you if a setting is redundant as it doesn’t actually change a value. This can happen when the same value has already been configured elsewhere or when you’re trying to set a value that’s identical to the default:\n\n\n\n\nPlatform-specific configuration\nAs Amper is built with Kotlin Multiplatform in mind, it understands multiplatform projects, and it can tailor your configuration experience to the set of platforms you’re actually using.\nWith the latest tooling, you will only receive completion for configuration options that are relevant to the set of platforms you’re working with in the given module:\n\n\n\n\nYou also get a warning if a setting you’ve specified is invalid given your current platform configuration, with a suggestion of which platform you’re missing:\n\n\n\n\nUpdate your existing projects\nStarting with this release, Amper builds are shipped in a new repository, which contains both public releases and dev builds. This makes it easier to switch between different versions. If you are using Amper in a Gradle-based project, make sure to update the old repository URL to the new one:\n// Remove\nmaven(\"https://maven.pkg.jetbrains.space/public/p/amper/amper\")\n\n// Add\nmaven(\"https://packages.jetbrains.team/maven/p/amper/amper\")\nTo use the latest version in an existing Gradle-based project, update your plugin version as follows:\nplugins {\n    id(\"org.jetbrains.amper.settings.plugin\").version(\"0.4.0\")\n}\nIf you need to update a project using the standalone version of Amper, update your amper scripts by following the download instructions on the Usage page of the documentation.\nTry Amper\nTo get started with Amper, check out the sample projects with standalone Amper and the samples with Gradle-based projects, which have all been updated to the new version. For the full list of changes and bug fixes in Amper 0.4.0, see the release notes.\nFor full support of the latest Amper features, use Fleet 1.38 and IntelliJ IDEA 2024.2 (or later versions).\nTry Amper\n                                                    \nShare your feedback\nAmper is still experimental and under active development. You can provide feedback about your experience by joining the discussion in the Kotlinlang Slack’s #amper channel or sharing your suggestions and ideas in a YouTrack issue. Your input and your use cases help shape the future of Amper!",
        "dc:creator": "Márton Braun",
        "content": "The latest release of Amper, version 0.4.0, is now available! In this release, we’re introducing a clear definition for the project root and providing a first look at settings tracing in Amper, alongside bug fixes and other improvements. To get support for Amper’s latest features, use Fleet 1.38 and IntelliJ IDEA 2024.2 (or later versions). [&#8230;]",
        "contentSnippet": "The latest release of Amper, version 0.4.0, is now available! In this release, we’re introducing a clear definition for the project root and providing a first look at settings tracing in Amper, alongside bug fixes and other improvements. To get support for Amper’s latest features, use Fleet 1.38 and IntelliJ IDEA 2024.2 (or later versions). […]",
        "guid": "https://blog.jetbrains.com/?post_type=amper&p=498162",
        "isoDate": "2024-08-08T07:20:08.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "The ReSharper and the .NET tools 2024.2 Release Candidates Are Now Available",
        "link": "https://blog.jetbrains.com/dotnet/2024/08/07/resharper-2024-2-release-candidate/",
        "pubDate": "Wed, 07 Aug 2024 16:28:32 +0000",
        "content:encodedSnippet": "Get a preview of all the latest features and improvements set to be shipped with the next major ReSharper and .NET tools releases by downloading the Release Candidate builds that have just landed.\nDownload ReSharper 2024.2 RC\n                                                    \nHere are the major improvements in each of the new builds:\n\n\n\n\nThe ReSharper 2024.2 Release Candidate\nExtended support for C# 12 features, including primary constructors and enhanced collection expressions.\nInitial support for C# 13, featuring ref struct interface implementation, the new \\e escape sequence, and a params modifier refactoring.\nAsynchronous typing for improved typing performance.\nLocalization into Chinese, Korean, and Japanese.\nNumerous AI Assistant enhancements, including updated language models, in-editor code suggestions, and Explain with AI for exceptions and DPA issues.\nEnhanced decompiler support for lambdas and protected assemblies.\nSupport for navigating external sources in the decompiler.\n\n\n\n\nThe ReSharper C++ 2024.2 Release Candidate\nSupport for additional C++23 features, including the multidimensional subscript operator, #elifdef and #elifndef preprocessor directives, and the [[assume]] attribute.\nTooltips and the quick documentation popup now provide detailed information about type layout for classes and class fields, including size, alignment, offset, and padding.\nIn Unreal Engine projects, ReSharper C++ recognizes struct traits, ensuring that your structs have the required methods and quickly generating them if they are missing. A new inspection detects missing calls to base class methods.\nThe Rename refactoring adds new options to rename related files and types when renaming a file.\nImprovements to code analysis include an update to Clang-Tidy 18 and support for IWYU pragmas.\n\n\n\n\nThe dotMemory 2024.2 Release Candidate\nImproved instance search with new filtering options.\nThe following features are now available on Linux and macOS:\nAutomatic memory inspections in the Inspections view.\nCross-workspace snapshot comparison.\nA Call Tree view in standalone and Rider versions.\nA Sunburst chart visualization for the Call Tree, highlighting memory allocation functions.\n\n\n\n\nThe dotTrace 2024.2 Release Candidate\nImproved performance with faster processing of Timeline snapshots.\nA new rendering engine in dotTrace Viewer on all platforms.\nAn Options window added to the standalone version for macOS and Linux.\nFixed missing kernel events in Timeline snapshots on Windows.\nVarious minor improvements and bug fixes.\n\n\n\n\nThe dotCover 2024.2 Release Candidate\nStability improvements and bug fixes.\n\n\n\n\nThe dotPeek 2024.2 Release Candidate\nGeneral enhancements\nSupport for decompiling lambdas with optional and parameter-array parameters.\nImproved handling of attributes on lambda expressions.\nThe ability to decompile protected assemblies.\n\n\n\n\nHandling of external sources\nSupport for navigating to sources from PDB files containing SrcSrv and SourceLink.\nCorrect recognition of preprocessor directives for accurate code representation.\nAn Open in Browser action to navigate to source code in repositories for types or NuGet packages.\n\n\n\n\nBuild configuration detection\nThe Assembly Explorer tool window detects and presents the build configuration of assemblies.\nJust a reminder: You can download the latest build right now from the ReSharper 2024.2 EAP page or install it via the JetBrains Toolbox App.\nDownload ReSharper 2024.2 RC\n                                                    \nIt’s not too late to share your feedback on the newest features! Our developers are still putting the final touches on the upcoming release. Tell us what you think in the comments below or by reaching out to us on X.",
        "dc:creator": "Sasha Ivanova",
        "content": "Get a preview of all the latest features and improvements set to be shipped with the next major ReSharper and .NET tools releases by downloading the Release Candidate builds that have just landed. Here are the major improvements in each of the new builds: The ReSharper 2024.2 Release Candidate The ReSharper C++ 2024.2 Release Candidate [&#8230;]",
        "contentSnippet": "Get a preview of all the latest features and improvements set to be shipped with the next major ReSharper and .NET tools releases by downloading the Release Candidate builds that have just landed. Here are the major improvements in each of the new builds: The ReSharper 2024.2 Release Candidate The ReSharper C++ 2024.2 Release Candidate […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=498149",
        "categories": [
          "net-tools",
          "dotcover",
          "dotmemory",
          "dotpeek",
          "dottrace",
          "news",
          "releases",
          "resharpercplusplus",
          "resharper",
          "c-13",
          "localization",
          "oop",
          "resharper-2024-2"
        ],
        "isoDate": "2024-08-07T16:28:32.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "The Rider 2024.2 Release Candidate Is Now Available",
        "link": "https://blog.jetbrains.com/dotnet/2024/08/07/rider-2024-2-rc/",
        "pubDate": "Wed, 07 Aug 2024 16:27:35 +0000",
        "content:encodedSnippet": "The next big release for Rider is just around the corner! If you’re eager to get a sneak peek, you can download the Release Candidate version of Rider 2024.2 from our website right now. \nDownload Rider 2024.2 RC\n                                                    \nThis build includes all the significant updates we introduced during the Early Access Program, as detailed in our earlier blog posts.\n\n\n\n\nHere are the feature highlights of the Rider 2024.2 RC build:\nSupport for .NET 9 Preview SDK, including initial support for C# 13 features.\nFull line code completion for C#, С++, JS/TS, and CSS.\nReader mode for enhanced readability of libraries and read-only files.\nInline rendering of documentation comments for C#, C++, and F#.\nSemantic highlighting for C# and C++.\nA Tasks tab and task dependency graphs for debugging.\nImproved navigation to members in a class.\nBundled Godot plugin with support for GDScript.\nMonitoring tool window support for C++, Unity, and Unreal Engine projects.\nImproved debugging experience for Unreal Engine.\nDebugging for F# scripts.\nDirect run and debug for TypeScript files.\nImproved path resolution for major JS frameworks.\nImproved typing experience for Code With Me (CWM).\nEnhancements to the built-in performance and memory profilers.\nNumerous decompiler enhancements.\nEnhanced code completion and in-editor code generation with AI Assistant.\nIf you encounter any issues when using the Rider 2024.2 Release Candidate, please let us know in our issue tracker.\nJust a reminder: There are a few ways you can download and install the latest preview build:\nGet it from our website.\nUse the Toolbox App.\nInstall this snap package from the Snapcraft store if using a compatible Linux distribution.\nDownload Rider 2024.2 RC\n                                                    \nWhich features and updates are you most excited about? Let us know in the comments below or reach out to us on X.",
        "dc:creator": "Sasha Ivanova",
        "content": "The next big release for Rider is just around the corner! If you&#8217;re eager to get a sneak peek, you can download the Release Candidate version of Rider 2024.2 from our website right now.&#160; This build includes all the significant updates we introduced during the Early Access Program, as detailed in our earlier blog posts. [&#8230;]",
        "contentSnippet": "The next big release for Rider is just around the corner! If you’re eager to get a sneak peek, you can download the Release Candidate version of Rider 2024.2 from our website right now.  This build includes all the significant updates we introduced during the Early Access Program, as detailed in our earlier blog posts. […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=498148",
        "categories": [
          "news",
          "releases",
          "rider",
          "rider-2024-2"
        ],
        "isoDate": "2024-08-07T16:27:35.000Z"
      },
      {
        "creator": "Matthias Koch",
        "title": "Escape Character, Extract Common Code, Params Modifier, Out Vars – C# Language Support in 2024.2",
        "link": "https://blog.jetbrains.com/dotnet/2024/08/07/escape-character-extract-common-code-params-modifier-out-vars-csharp-language-support-in-2024-2/",
        "pubDate": "Wed, 07 Aug 2024 14:36:30 +0000",
        "content:encodedSnippet": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as well!\nIn this series, we will cover features around:\nEscape Character, Extract Common Code, Params Modifier, Out Vars\nEquality Analysis, Ref Structs, Culture Previews, Using Directives\nCast Expressions, Primary Constructors, Collection Expressions, List Patterns\nMake sure to download the latest ReSharper or Rider EAP builds to follow along:\nDownload Rider EAP\nEscape Character Support\nWith C# 13, we are getting a new control sequence for the ESC character. Previously, you had to use the hexadecimal escape sequence \\0x1B to express this character, while now, you can simply use \\e. This is especially attractive for virtual terminal sequences, which you can use to apply text formatting to console applications (including colored, bold, and blinking text).\nIn 2024.2, we are adding support for the new escape character and allowing you to easily migrate your codebase. As with some other features in this blog post, we’ve been looking more closely at what other areas in our language support could be improved along the way. So with the \\e support, we generalized the simplification inspection to identify other escaping shortcuts, such as \\t or \\n, to keep your string literals in the most “canonical” form:\nConverting escape sequences\n\n\n\n\nTo enhance the handling of escape sequences in C#, we’ve added a whole set of context actions that allow you to switch between different representations, such as plain text, ASCII text (where non-ASCII characters are replaced with escape sequences), or a sequence of \\u and \\x Unicode codes. These actions can be applied to escape sequences, entire string literals, or selected character sequences. For instance, if you want to include a non-ASCII symbol in a string literal while maintaining ASCII encoding in the source code, you can use the new Convert to ASCII text action:\nConverting to plain, ASCII, and Unicode text\n\n\n\n\nThose actions are also useful for uncovering the code points of individual characters. For example, the following two string literals are rendered equally in the editor, but are actually represented by different code sequences:\nInspecting similar characters\n\n\n\n\nFurthermore, we are now warning about ordinary \\x escape sequences followed by ASCII letters. Unlike in other programming languages, the \\x escaping sequence in C# allows a variable number of hexadecimal characters to follow the prefix (only \\u requires exactly 4 hex numbers). That means you could accidentally attach characters to the sequence. The new Avoid mixing variable-length escape sequences and text inspection helps you spot such cases:\nMixing of escape sequence and text\n\n\n\n\nExtract Common Code\nAs you hack your way through codebases, it’s possible that you end up with small to large code duplications. Wouldn’t it be nice if your IDE told you about them?\nvar sb = new StringBuilder();\r\nvar version = NuGetVersion.Parse(\"1.3.3.7\").Version;\r\n\r\nif (version.Major >= 5)\r\n{\r\n    sb.Append(\"?view=net-\");\r\n    // duplicated from here\r\n    sb.Append(version.Major).Append(\".\").Append(version.Minor);\r\n}\r\nelse\r\n{\r\n    sb.Append(\"?view=netcore-\");\r\n    // duplicated from here\r\n    sb.Append(version.Major).Append(\".\").Append(version.Minor);\r\n}\nCopy to clipboard\n\n            \nIn 2024.2, we are introducing a new code inspection Extract Common Code to analyze code inside branching constructs, more specifically if and switch statements. This new inspection can detect same code in the beginning and ending of all branching execution paths:\nExtracting common code\n\n\n\n\nMore importantly, the inspection can also help you catch bugs! Often the equivalent code in branching constructs is the result of copy & pasting code around. The inspection will bring that up to your attention, hinting that the code was supposed to be different. For an easy win, you can hit Alt-Enter and look for the Run Inspection By Name action and find all occurrences in your codebase.\nParams Modifier Refactoring\nWhile we recently investigated support for collection expressions, we’ve also revisited related language features such as the params modifier, which has been available in C# from day 1. When writing an API, you may not immediately know that you can take advantage of the params modifier. On the other hand, once you know it, plenty of code may already have been written. A short example:\nvoid M(string text, Type[] types)\r\n{\r\n    M(\"plain array\", new[] { typeof(int) });\r\n    M(\"collection expression\", [ typeof(int) ]);\r\n}\nCopy to clipboard\n\n            \nWith 2024.2, we are introducing the Add/Remove ‘params’ modifier and update usages context actions for C# and VB.NET to improve your API ergonomics and update all usages in one go:\nConverting to and from params modifier\n\n\n\n\nOut Variable Code Completion\nSince C# 7, you can use out variable declarations, which significantly reduce ceremony when calling methods with out parameters. Not only can you capture values right from the argument, but you can also discard them if only the method return value is of importance.\nIn 2024.2, we decided to finally address this new syntax in our code completion – including smart naming suggestions! The quickest way for you is to use the ovv shorthand:\nCode completion for out var value\n\n\n\n\nIn some cases, the out var argument must have an explicit type annotation to help with overload resolution. In this case, our code completion will provide you with all the possible types:\nCode completion for out variable with possible types\n\n\n\n\nConclusion\nGive it a go with the latest ReSharper 2024.2 and Rider 2024.2, and let us know if you have any questions or suggestions in the comments section below.",
        "dc:creator": "Matthias Koch",
        "content": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as [&#8230;]",
        "contentSnippet": "Our release for ReSharper and Rider 2024.2 is just around the corner, and we have lots of exciting features shipping for the new C# 13 and current C# and VB.NET! Since there are so many, we will be splitting things up into multiple blog posts. So make sure to come back for the others as […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=499891",
        "categories": [
          "net-tools",
          "how-tos",
          "net",
          "c",
          "code-cleanup",
          "code-completion",
          "inspections",
          "vb-net"
        ],
        "isoDate": "2024-08-07T14:36:30.000Z"
      },
      {
        "creator": "Alena Guzharina",
        "title": "Analyzing Financial Bubbles With Python and Datalore AI",
        "link": "https://blog.jetbrains.com/datalore/2024/08/07/analyzing-financial-bubbles-with-python-and-datalore-ai/",
        "pubDate": "Wed, 07 Aug 2024 12:10:29 +0000",
        "content:encodedSnippet": "This is a guest blog post by Ryan O’Connell, CFA, FRM.\nIntroduction\nIn the late 1990s, the world witnessed an unprecedented surge in technology stocks, when investors couldn’t throw money at dot-com companies fast enough. Fast-forward to 2024, and we find ourselves in the midst of another technological revolution – the AI boom.\nAs artificial intelligence reshapes industries and captures imaginations, tech valuations are once again soaring to dizzying heights. But are we seeing history repeat itself, or is this time truly different?\nIn this data research, we dive deep into the numbers, comparing the frenzied valuations of the dot-com era to today’s AI-fueled market. By examining key financial metrics of tech giants then and now, we aim to uncover patterns, disparities, and potential warning signs that could shed light on the sustainability of current tech valuations.\n“Are we in another tech bubble, or are we witnessing the dawn of a new technological age that will redefine the very fabric of our economy? Or is there perhaps some truth to both statements?”\n\n            \nRyan O’Connell\n                                                                CFA, FRM\n                                    \nFor those eager to see the full research, simply open this Datalore report. To save myself time and energy, I’ll use Datalore’s AI Assistant to help me generate Python code that forms the backbone of this analysis, demonstrating how AI itself is revolutionizing the way we conduct and present financial research.\n\n\n\n\n\n          \n      Open Datalore Report\n    \n\n\n\n\nNow, let’s dive into the data and see what stories it has to tell about these two pivotal eras in tech history.\nDisclaimer: This article is for informational and educational purposes only and is not intended to serve as personal financial advice. Note: the data used in this research is from July 24, 2024.\nThe dot-com bubble: a NASDAQ rollercoaster\nTo understand the magnitude of the dot-com bubble and its subsequent burst, let’s start by examining the performance of the NASDAQ Composite Index, as represented by the QQQ ETF.\nThe NASDAQ (National Association of Securities Dealers Automated Quotations) is a global electronic marketplace for buying and selling securities, and it’s particularly known for its high concentration of technology and growth stocks. The NASDAQ Composite Index is a benchmark index that includes more than 3,000 stocks listed on the NASDAQ stock exchange, making it a key indicator of the technology sector’s performance.\nThe QQQ ETF, also known as the Invesco QQQ Trust, is an exchange-traded fund that tracks the NASDAQ-100 Index, which consists of the 100 largest non-financial companies listed on the NASDAQ. It’s widely regarded as a barometer for the performance of tech stocks and the broader technology sector.\nIn our analysis, we use adjusted close prices. These prices reflect the stock’s value after accounting for any corporate actions such as stock splits, dividends, and rights offerings. Using adjusted prices ensures that we’re comparing apples to apples across different time periods, providing a more accurate representation of the ETF’s performance over time.\n\n\n\n\nLooking at the graph, we can see the dramatic rise and fall of the QQQ ETF during the dot-com bubble:\nThe bubble’s peak: On March 31, 2000, the QQQ reached its zenith at $93.34. This point represents the height of the dot-com mania, where tech valuations had skyrocketed to unprecedented levels.\nThe brutal descent: Following the peak, we observe a steep and prolonged decline. The line graph plummets sharply, illustrating the rapid erosion of value in tech stocks.\nThe painful bottom: The low was reached on September 30, 2002, when the QQQ hit a low of $17.66. This represents a staggering 81.08% drop from its peak value.\n\n\n\n\nThis fall from $93.34 to $17.66 translates to a loss of 81.08% of the ETF’s value. To put this into perspective, an investor who had put $10,000 into the QQQ at its peak would have seen their investment shrink to just $1,892 at the bottom – a sobering reminder of the risks associated with market bubbles.\nThe graph also shows a gradual recovery post-2002, but it’s worth noting that it took years for the NASDAQ to regain its dot-com era highs. This prolonged recovery period underscores the severe and lasting impact of the bubble’s burst on the tech sector and the broader market.\nAs we delve deeper into our comparison with the current AI boom, this stark visualization of the dot-com bubble’s impact will serve as a crucial reference point, reminding us of the potential consequences of unchecked market exuberance.\nNASDAQ ETF adjusted close prices from 1999 to 2006\n\n\n\n\nMicrosoft: a tale of two tech booms\nTo bridge the gap between the dot-com era and the current AI boom, let’s examine Microsoft’s valuation metrics from 1995 to the present day. Microsoft serves as an excellent case study, having been a major player in both the dot-com bubble and the current AI revolution, particularly with its significant stake in OpenAI, the company behind ChatGPT.\nBefore we delve into Microsoft’s valuation journey, let’s first understand the key metrics we’re using to measure company valuations:\nUnderstanding P/E and P/B ratios\nPrice-to-earnings (P/E) ratio\nThe P/E ratio is a fundamental valuation metric that compares a company’s stock price to its earnings per share (EPS). It essentially shows how much investors are willing to pay for each dollar of the company’s earnings.\nP/E ratio = stock price / earnings per share\nThere are two types of P/E ratios:\nTrailing P/E: based on the past 12 months of actual earnings (the version we’re using in this analysis).\nForward P/E: based on projected earnings for the next 12 months.\n\n\n\n\nIn our analysis, we’re using the trailing P/E ratio, which provides a snapshot based on actual historical performance rather than future projections. Forward P/E is often considered a better measure for rapid growth companies, but it is difficult to access historical forward P/E ratios, so this analysis will focus on the standard (trailing) P/E ratio.\nPrice-to-book (P/B) ratio\nThe P/B ratio compares a company’s market value to its book value (the net asset value on the balance sheet).\nP/B ratio = stock price / book value per share\nThis ratio gives an idea of whether a stock is over or undervalued by comparing the market’s valuation to the company’s underlying assets.\nInterpretation of P/E and P/B ratios\nGenerally, lower P/E and P/B ratios are considered to indicate better valuations for several reasons:\nValue for money: Lower ratios suggest investors are paying less for each dollar of earnings or net assets, potentially indicating a better “deal”.\nMargin of safety: Companies with lower ratios might have more room for growth and less risk of overvaluation, providing a cushion against market volatility.\nMean reversion: Extremely high ratios often revert to historical averages over time, which can lead to price corrections.\nComparative analysis: Lower ratios relative to industry peers or historical averages may indicate undervaluation.\n\n\n\n\nHowever, it’s crucial to note that these ratios should not be used in isolation. High-growth companies or those in innovative sectors (like AI) often command higher ratios due to future earnings potential. The key is to balance these metrics with other factors like growth rates, industry trends, and company-specific circumstances.\nNow, let’s examine Microsoft’s valuation metrics from 1995 to the present day, keeping these definitions and interpretations in mind.\nMicrosoft’s price-to-earnings (PE) ratio (1995 to present)\n\n\n\n\nPrice-to-earnings (P/E) ratio analysis\nThe P/E ratio graph reveals several key insights:\nDot-com peak: Microsoft’s P/E ratio reached an astronomical high of 73.85 on December 27, 1999, epitomizing the exuberance of the dot-com era.\nPost-bubble normalization: Following the burst of the dot-com bubble, Microsoft’s P/E ratio significantly decreased and remained relatively stable for many years.\nRecent AI-driven growth: In the past few years, we’ve seen a notable uptick in Microsoft’s P/E ratio, with a recent peak of 40.31 on July 5, 2024.\nCurrent valuation: As of July 18, 2024, Microsoft’s P/E ratio stands at 37.97, which is elevated compared to historical averages but still well below the dot-com peak.\n\n\n\n\nMicrosoft’s price-to-book (PB) ratio (1995 to present)\n\n\n\n\nPrice-to-book (P/B) ratio analysis\nThe P/B ratio graph tells a similar but distinct story:\nDot-com peak: Microsoft’s P/B ratio hit an all-time high of 20.54 on March 30, 1999.\nExtended decline: Post-dot-com bubble, the P/B ratio experienced a prolonged decline, reaching its lowest points around 2012 following the global financial crisis (GFC).\nRecent resurgence: Since 2016, we’ve seen a steady climb in Microsoft’s P/B ratio, coinciding with its successful pivot to cloud computing and, more recently, its AI initiatives.\nAI era peak: The company’s P/B ratio reached a recent high of 16.97 on November 19, 2021, approaching but not surpassing the dot-com era peak.\nCurrent level: As of July 18, 2024, Microsoft’s P/B ratio stands at 12.93, showing a slight pullback from its recent peak but still elevated compared to most of its history.\nComparative analysis\nWhile Microsoft’s current valuation metrics are elevated, they haven’t reached the extreme levels seen during the dot-com bubble:\nP/E ratio: The current P/E of 37.97 is about 51% of its dot-com peak (73.85).\nP/B ratio: The current P/B of 12.93 is approximately 63% of its dot-com high (20.54).\n\n\n\n\nThese figures suggest that while investor enthusiasm for Microsoft is high, likely driven by its AI potential and cloud dominance, valuations haven’t reached the irrational exuberance of the late 1990s.\nHowever, it’s crucial to note that the current ratios are significantly higher than Microsoft’s long-term averages, indicating that investors are pricing in substantial future growth, particularly from AI-related innovations.\nThis analysis of Microsoft provides a valuable perspective on how market valuations have evolved from the dot-com era to the current AI boom. While we’re seeing elevated valuations, the market appears to be more measured in its enthusiasm compared to the dot-com bubble, perhaps reflecting lessons learned from that period and the more tangible revenue streams from cloud and AI technologies.\nDot-com era valuation analysis: a look at tech giants\nThe dot-com bubble of the late 1990s and early 2000s was a period of unprecedented valuation for many technology companies. By examining the P/E and P/B ratios of some of the most notable companies from this era, we can gain insights into the extent of market exuberance and compare it to today’s AI-driven tech boom.\nP/E ratio analysis\n\n\n\n\nLooking at the P/E ratio graph, several key observations emerge:\nCisco Systems stands out dramatically, with its P/E ratio skyrocketing to an astounding 222.41 on March 27, 2000. This extreme valuation reflects the immense optimism surrounding networking technology during the height of the dot-com boom.\nOracle also experienced significant P/E expansion, peaking at 139.47 on February 25, 2000. This high valuation underscores the market’s enthusiasm for database and enterprise software companies.\nMicrosoft, despite being a more established company at the time, saw its P/E ratio reach 73.85 on December 27, 1999, indicating that even larger, more mature tech companies were caught up in the market frenzy.\nIntel, another tech giant, peaked later with a P/E of 73.74 on November 30, 2001, suggesting that the semiconductor industry experienced a delayed but significant valuation surge.\nAdobe, IBM, and Verizon maintained comparatively lower P/E ratios, with peaks of 65.40, 32.57, and 34.80, respectively, indicating that not all tech-related companies were equally affected by the bubble.\n\n\n\n\nP/B ratio analysis\n\n\n\n\nThe P/B ratio graph provides additional insights:\nOracle stands out with an extremely high peak P/B ratio of 62.63 on March 27, 2000, far exceeding other companies in the sample. This suggests that investors were placing an enormous premium on Oracle’s future growth prospects relative to its book value.\nCisco Systems, while not as extreme as Oracle, still reached a significant P/B ratio of 33.15 on the same date, March 27, 2000, coinciding with its peak P/E ratio.\nAdobe and Microsoft both saw their P/B ratios exceed 20, peaking at 29.70 and 20.54, respectively, indicating substantial optimism about their future growth.\nIntel, IBM, and Verizon maintained more modest P/B ratios, all staying below 15 even at their peaks.\n\n\n\n\nKey takeaways\nValuation disparity: There was a wide disparity in valuations among tech companies, with networking and software firms like Cisco and Oracle seeing the most extreme ratios.\nTiming of peaks: Many companies reached their peak valuations in early 2000, particularly around March, which aligns with the generally accepted peak of the dot-com bubble.\nSector differences: Hardware-focused companies like Intel and IBM generally had lower valuation multiples compared to software and networking companies.\nMagnitude of overvaluation: The extreme P/E and P/B ratios, particularly for Cisco and Oracle, highlight the degree of market irrationality during this period. These valuations implied unrealistic growth expectations that were ultimately unsustainable.\nRelative stability: Companies like IBM and Verizon maintained more stable valuations throughout this period, possibly due to their more established business models and revenue streams.\n\n\n\n\nThis analysis of dot-com era valuations provides a crucial benchmark for evaluating current tech company valuations, especially in the context of the AI boom. \nWant to understand in detail how I gathered the data and presented the graphs? Check out this Datalore report. \n      \n      Open Datalore Report\n    \n\n\n\n\nAI era valuation analysis: examining today’s tech leaders\nThe current AI boom has ushered in a new era of excitement and investment in technology companies, reminiscent of the dot-com bubble but with its own unique characteristics. By analyzing the P/E and P/B ratios of key players in the AI space over the past few years, we can gain valuable insights into current market sentiment and valuation trends. \nNow, let’s explore how the market is pricing the potential of AI and whether current valuations reflect rational exuberance or possibly unsustainable optimism.\nP/E ratio analysis\n\n\n\n\nIn this P/E ratio graph, I capped the vertical axis at 200 because there were a few observations that “broke” the scale. Tesla had a peak P/E ratio of 1,255, while AMD had a peak P/E ratio of 1,156. These are abnormally high values that did not last long. NVIDIA had a peak P/E ratio of 245 towards the end of their second quarter in 2023. This is because investors had correctly priced in massive earnings growth for that quarter. When the quarterly earnings were updated, the denominator in the P/E ratio was updated as well, bringing down the P/E ratio for NVIDIA.\nSeveral key observations in the P/E graph emerge:\nExtreme valuations in 2023: Many of the analyzed companies experienced extremely high P/E ratios in 2023, frequently exceeding 200. This necessitated capping the chart to maintain readability, but it’s crucial to note these extreme values reflected very high growth expectations.\nEarnings delivery: Remarkably, many of these companies met or exceeded the lofty earnings expectations throughout 2023. As quarterly earnings were released, companies consistently matched or beat projections, leading to substantial increases in the earnings component of the P/E ratio.\n2024 normalization: By July 2024, we observe more moderate P/E ratios for most companies. This doesn’t necessarily indicate a decrease in stock prices, but rather reflects the significant earnings growth that materialized, effectively lowering the P/E ratios by increasing the denominator (earnings).\nCurrent snapshot (July 2024):\n\nAt a value of approximately 72.51, NVIDIA’s current P/E exceeds all of the other AI stocks.\nMore established players like Google (26.81), Microsoft (37.69), and Meta (26.51) display more moderate P/Es, suggesting a balance between growth expectations and current earnings.\nVolatility: Despite the overall trend toward normalization, the data still shows significant volatility, particularly for companies like Tesla and AMD. This suggests the market remains highly reactive to news and performance in the AI sector.\nIndustry variations: Hardware-focused AI companies (NVIDIA, AMD) generally show higher P/E ratios compared to more diversified tech giants, reflecting the market’s bullish view on specialized AI hardware.\nForward P/E considerations: It’s crucial to note that for rapidly growing companies in the AI sector, particularly chip manufacturers like NVIDIA and AMD, forward P/E ratios can provide valuable additional context. While our analysis focuses on trailing P/E ratios due to data availability, forward P/E ratios are especially relevant for these companies as they factor in expectations of future growth. The high trailing P/E ratios we observe may appear more reasonable when considering analysts’ projections for future earnings. This is particularly pertinent in the AI chip sector, where demand is expected to continue growing exponentially. Therefore, while current P/E ratios offer important insights, investors and analysts often rely heavily on forward-looking metrics to value these high-growth AI technology companies.\n\n\n\n\nP/B ratio analysis\n\n\n\n\nThe graph for price-to-book ratios has several fascinating insights:\nNVIDIA stands out: With a current P/B of 59.99 and a peak of 68.97, NVIDIA’s valuation relative to its book value is significantly higher than peers, suggesting strong investor confidence in its future prospects. The current P/B ratio for NVIDIA is nearly six times that of most of its peers. This is a sign of astronomically high investor expectations. Many value investors may look at this as a sign of a large overvaluation.\nTesla: Peaking at 46.87, Tesla has experienced high P/B rations, though it currently stands at a more moderate 11.83. This aligns with its volatile P/E ratio pattern.\nModerate range: Most companies (Google, Microsoft, Amazon, Meta, TSMC) have current P/B ratios between 7 and 13, indicating more modest premiums over their book values.\nAMD: There has been a significant decrease in AMD’s peak P/B of 32.67 to the current level of 4.38, suggesting a shift in how investors value its assets relative to its market price.\n\n\n\n\nOverall observations:\nValuation disparities: There’s a wide range of valuations among AI-focused companies, with hardware-focused firms like NVIDIA and AMD seeing higher multiples compared to more diversified tech giants.\nCooling trend: Many companies show lower current ratios compared to their peaks, suggesting a possible cooling of investor enthusiasm or a normalization of valuations.\nHardware premium: Companies directly involved in AI hardware (NVIDIA, AMD) generally show higher valuation multiples, reflecting the critical role of specialized processors in AI development.\nEstablished vs. emerging: More established companies like Google and Microsoft show more stable valuations compared to the emerging semiconductor companies undergoing significant transitions.\n\n\n\n\n\nComparative analysis: AI era vs. dot-com bubble valuations\nTo facilitate a direct comparison between the dot-com bubble and the current AI boom, we’ve aligned two distinct historical periods on a common 1,000-day timeline. This approach allows us to analyze how valuations evolved over similar timeframes in each era, irrespective of the actual calendar dates.\nTimeline explanation:\nHorizontal axis: “Days into Analysis Period” (0 to ~1,000 days)\nDot-Com Era: Day 1 = January 1, 1998; End = November 30, 2001\nAI Era: Day 1 = August 20, 2020; End = July 19, 2024\n\n\n\n\nThis alignment enables us to compare relative patterns, peak timing, volatility, and end-of-period valuations between the two eras. Blue lines represent AI era companies (with NVIDIA highlighted in dark blue), while red lines represent dot-com era companies.\nP/B ratio analysis\n\n\n\n\nThe most striking feature of the P/B ratio comparison is NVIDIA’s exceptional valuation. NVIDIA’s P/B ratio, reaching peaks above 60, significantly surpasses not only its AI-era peers but also the highest valuations seen during the dot-com bubble. This is a truly historic level of valuation for a major tech company.\nKey observations:\nNVIDIA’s unprecedented valuation: NVIDIA’s P/B ratio is substantially higher than any company during the dot-com era, even at the bubble’s peak. This suggests an extraordinary level of investor confidence in NVIDIA’s future prospects and its role in the AI revolution.\nPotential justifications for NVIDIA’s high P/B:\n\nMarket dominance: NVIDIA’s near-monopoly in AI chips gives it a unique position in a rapidly growing market.\nGrowth expectations: The AI industry is projected to expand dramatically, and NVIDIA is seen as a key enabler of this growth.\nScarcity premium: As one of the few “pure play” AI chip companies, NVIDIA may command a premium due to limited investment alternatives in this space.\nArguments for a high NVIDIA valuation:\n\nFirst-mover advantage: NVIDIA’s early lead in AI chips could translate to long-term market dominance.\nEcosystem lock-in: NVIDIA’s software and hardware ecosystem creates high switching costs for customers.\nExpanding addressable market: As AI applications grow, NVIDIA’s potential market expands significantly.\nArguments against a high NVIDIA valuation:\n\nUnprecedented overvaluation: NVIDIA’s P/B ratio is at a level never before seen for a major tech company. Historically, such extreme valuations have often led to significant corrections, suggesting the stock may be overvalued and due for a pullback. The extraordinarily high valuation suggests the market has priced in near-perfect execution and growth. Any stumble in meeting these lofty expectations could lead to a sharp decline in stock price.\nCompetition risk: Potential for increased competition from tech giants and startups entering the AI chip market.\nRegulatory concerns: Potential antitrust scrutiny due to NVIDIA’s dominant market position.\n\n\n\n\nMost other AI-era companies (other than NVIDIA) show P/B ratios comparable to or lower than dot-com era peaks, suggesting more tempered valuations overall.\nP/E ratio analysis\n\n\n\n\nThe P/E ratio comparison presents a more complex picture, with significant volatility and overlap between AI-era and dot-com era companies. However, focusing on the final 150 days reveals important insights:\nCurrent AI valuations vs. dot-com peak: While AI company P/E ratios can be quite high, they generally fall below the extreme levels seen at the peak of the dot-com bubble.\nModeration from 2023 peaks: Current P/E ratios for AI companies are significantly lower than their 2023 levels, suggesting a normalization of valuations or improved earnings.\nNVIDIA’s position: NVIDIA currently has the highest P/E ratio among AI stocks, reflecting very high growth expectations.\nValuation context: The elevated P/E ratios for AI companies, while high, are more grounded in current and expected earnings compared to the often speculative valuations of the dot-com era.\nInvestor considerations: The sustainability of these valuations will depend on companies meeting or exceeding the high growth expectations built into their stock prices. Each investor must weigh the potential for continued AI-driven growth against the risks of overvaluation.\nNoise in the middle: There is significant overlap and volatility in P/E ratios between AI and dot-com era companies throughout much of the analysis period, making it difficult to draw clear conclusions except for the final 150 days.\n\n\n\n\nIn conclusion, while AI company valuations, particularly NVIDIA’s, are at historically high levels, they are generally more anchored in current earnings and near-term growth expectations than those seen during the dot-com bubble. However, NVIDIA’s exceptional P/B ratio stands out as a potential area of concern or opportunity, depending on one’s view of the company’s future prospects in the AI market. The comparison underscores the high growth expectations for AI companies, especially NVIDIA, but also suggests a more measured market approach compared to the dot-com era, with valuations more closely tied to actual financial performance.\nIf you are curious about the Python code behind this analysis, check out this Datalore report and try Datalore AI for yourself.\n      \n      Open Datalore Report\n    \n\n\n\n\nKey takeaways\nHistorical perspective: The dot-com bubble’s dramatic rise and fall, as exemplified by the NASDAQ’s 81.08% drop, serves as a sobering reminder of the potential consequences of unchecked market exuberance.\nValuation metrics: Both P/E and P/B ratios provide valuable insights into market sentiment. During the dot-com era, these ratios reached extreme levels across many tech companies, reflecting highly speculative valuations often disconnected from financial fundamentals.\nAI era comparisons: While current valuations for AI-focused companies are elevated, they generally haven’t reached the extreme levels seen during the dot-com peak. Most companies show more moderate valuations, with the notable exception of NVIDIA.\nNVIDIA as an outlier: NVIDIA’s current valuation stands out dramatically, with P/B ratios surpassing even the highest levels seen during the dot-com bubble. This reflects extraordinary investor confidence in NVIDIA’s role in the AI revolution but also raises concerns about potential overvaluation.\nEarnings vs. speculation: Unlike many dot-com era companies, today’s AI leaders are generally posting strong earnings to support their valuations. The moderation of P/E ratios in 2024 compared to 2023 peaks suggests that earnings growth is catching up to market expectations.\nMarket maturity: The current market appears more discerning than during the dot-com era, with valuations more closely tied to actual financial performance and near-term growth prospects.\n\n\n\n\nLooking ahead\nWhile the AI boom shares some characteristics with the dot-com bubble, it also differs in important ways. Today’s tech leaders have proven business models, substantial revenue streams, and are delivering on earnings expectations. However, the unprecedented valuations of companies like NVIDIA suggest that investor enthusiasm may be outpacing even the considerable real-world potential of AI technologies.\nAs we navigate this new era of technological innovation, investors should remain vigilant. The lessons of the dot-com bubble remind us that even transformative technologies can lead to market excesses. While AI undoubtedly has the potential to revolutionize industries and create enormous value, individual company valuations must ultimately be justified by financial performance and realistic growth prospects.\nThe key question for investors moving forward is whether the current AI leaders can continue to meet or exceed the lofty expectations built into their stock prices. As history has shown, markets can remain irrational for extended periods, but eventually, fundamentals prevail. Whether we’re witnessing a new paradigm in tech valuations or the early stages of an AI bubble remains to be seen, but one thing is certain: the intersection of AI and the stock market will continue to be a fascinating and potentially volatile space to watch.",
        "dc:creator": "Alena Guzharina",
        "content": "This is a guest blog post by Ryan O’Connell, CFA, FRM. Introduction In the late 1990s, the world witnessed an unprecedented surge in technology stocks, when investors couldn&#8217;t throw money at dot-com companies fast enough. Fast-forward to 2024, and we find ourselves in the midst of another technological revolution – the AI boom. As artificial [&#8230;]",
        "contentSnippet": "This is a guest blog post by Ryan O’Connell, CFA, FRM. Introduction In the late 1990s, the world witnessed an unprecedented surge in technology stocks, when investors couldn’t throw money at dot-com companies fast enough. Fast-forward to 2024, and we find ourselves in the midst of another technological revolution – the AI boom. As artificial […]",
        "guid": "https://blog.jetbrains.com/?post_type=datalore&p=499652",
        "categories": [
          "datalore-ai",
          "python-for-finance"
        ],
        "isoDate": "2024-08-07T12:10:29.000Z"
      },
      {
        "creator": "Maria Kosukhina",
        "title": "IntelliJ IDEA 2024.2 Is Out! ",
        "link": "https://blog.jetbrains.com/idea/2024/08/intellij-idea-2024-2/",
        "pubDate": "Wed, 07 Aug 2024 08:15:32 +0000",
        "content:encodedSnippet": "IntelliJ IDEA 2024.2 has arrived, featuring a host of exciting upgrades to enhance your experience with the IDE. \nYou can get the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu.\nDownload IntelliJ IDEA 2024.2\nThis release enhances Spring Data JPA support, simplifies cron expression management, and upgrades the HTTP Client with the GraalJS engine. Startup efficiency is improved, allowing you to dive into coding faster. Additionally, the new version integrates K2 mode (Beta) to boost the IDE’s performance and stability for Kotlin.\nWatch our video overview to see these major enhancements in action.\n\n\n\n\n\n\nThis blog post highlights dozens of other improvements throughout version 2024.2. For a complete rundown of the new features, visit our What’s New page.\nKey highlights \nWe’ve enhanced IntelliJ IDEA’s Spring Framework support by enabling you to run Spring Data JPA methods directly in the IDE. \nWorking with cron expressions is now easier with IntelliJ IDEA 2024.2, as it provides inline descriptions and autocompletion with pre-filled examples when implementing scheduled services with Spring, Quarkus, or Micronaut.\nThe HTTP Client now runs on GraalJS, offering support for the latest JavaScript standards and enhanced performance for your scripts.\nWe’ve streamlined the startup experience by making the IDE functional with incomplete project models and enabling access to its key features during indexing, allowing you to dive into coding faster.\nIntelliJ IDEA 2024.2 integrates K2 mode, now in Beta, for improved IDE stability and performance when working with Kotlin. To activate it, go to Settings/Preferences | Languages & Frameworks | Kotlin. You can find more details in this blog post. \nUser experience\nWe’ve made accepting full line code completion suggestions more intuitive and precise by implementing code highlighting and new shortcuts for incrementally accepting suggestions.\nAs of verison 2024.2, IntelliJ IDEA defaults to the new UI while the classic UI remains available as a plugin. Learn more. \nThe Search Everywhere dialog now includes a preview option, allowing you to see codebase elements directly in the dialog for easier navigation and context.\nThe IDE now automatically detects and uses your system’s proxy settings for seamless interaction with external resources and services.\nOn Linux, IntelliJ IDEA now synchronizes the placement of windows to match your Linux desktop settings and offers redesigned control buttons for a look and feel that matches your OS.\nThe Customize Main Toolbar dialog has been redesigned for better organization, making it easier to search for, add, and delete actions in the main toolbar.\nAI Assistant \nJetBrains AI Assistant 2024.2 introduces significant enhancements, including improved cloud code completion, a streamlined UX with both single-line and multiline code completion suggestions, integration in the Terminal tool window, AI-assisted VCS conflict resolution, and more. Learn more about these and other updates in this dedicated blog post.\nJava and Kotlin\nIntelliJ IDEA 2024.2 improves log management for Java and Kotlin. Learn more. \nA new inspection identifies cases where an expression is compared to itself. \nThe Change Signature refactoring is now more intuitive with a new inlay hint that appears near modified code elements. \nScala \nIntelliJ IDEA 2024.2 enhances Scala 3 support with improved handling of fewer braces syntax in for-comprehensions, export clauses, extension methods, and import suggestions that now include enum cases.\nError and syntax highlighting has been improved. The IDE now highlights class fields defined in parameter clauses as fields instead of parameters, highlights named arguments in a distinct color, and provides regex syntax highlighting in Regex(\"...\") just as it does for the regex syntax in \"...\".r. It also features better responsiveness when you fix highlighted errors. \nWe’ve improved code completion for Scala by automatically filling out all named arguments of methods and autocompleting literal values for union types in Scala 3. Enum cases are now suggested whenever an enum type is expected. \nWe’ve enhanced the performance of compiler-based error highlighting. Additionally, IntelliJ IDEA now supports Scala compiler diagnostics, making them available as regular quick-fixes for easy application.\nThe contents of StringBuilder are now displayed as a string in the debugger. \nIntelliJ IDEA now offers onboarding tips for Scala. \nLibrary download progress is now visible while you import sbt projects. \nScala support now includes the functionality of Grazie, which provides advanced spelling and grammar checks in Scala comments.\nCode editor\nIntelliJ IDEA can now natively render mathematical expressions in Markdown files. \nSticky lines can now be set to appear for chosen languages either in Settings/Preferences | Editor | General | Sticky Lines or by calling the context menu with a right-click on a sticky line in the editor.  \nProfiler \nIntelliJ IDEA Ultimate’s built-in profiler now highlights your code by fading out and collapsing library calls, making it easier to investigate performance bottlenecks while still providing the option to expand and view detailed library call sequences and execution times.\nRun/Debug\nThe new Performance tab in the Run tool window provides real-time CPU and memory charts, execution times, and memory snapshots to help you identify performance bottlenecks and memory leaks.\nIntelliJ IDEA 2024.2 improves Kotlin debugging by allowing Step Over to iterate over forEach loops and get into inline function lambdas, ensuring you don’t miss critical parts of your code.\nThe debugger now provides string variable visualizers for JSON, XML, and other formats, automatically choosing the relevant visualizer based on a given variable’s content.\nThe Coverage tool window now shows only the classes that have changed in your current feature branch. To review the entire project’s test coverage and see all classes, disable the Show Only Modified Classes option.\nBuild tools \nIntelliJ IDEA 2024.2 offers new navigation and highlighting features for Gradle build scripts, providing smooth navigation to declared Gradle plugins and between version catalog files and build scripts in libs.versions.toml, along with the option to run registered tasks directly from the gutter.\nWe’ve enabled incremental re-sync for Maven projects.\nThere’s a new Invalidate Build System Caches and Re-sync action in File | Cache Recovery that allows you to instantly clear build system caches and resolve issues related to the structure of Maven, Gradle, or sbt projects. \nVersion control systems\nWe’ve made it easier to resolve Java and Kotlin import statement conflicts, providing a new action that is accessible via the gear icon in the Merge tool window. You can set import conflict resolution to be performed automatically in Settings/Preferences | Tools | Diff & Merge.\nWe’ve given tags a dedicated node in the Version Control widget, making it easier to check them out. \nThe Local History dialog’s UI has been modernized. It now features a diff view alongside the list of changes. The Local History action now allows you to review multiple files or directories simultaneously.\nSettings for the Log tool window are consolidated in a dedicated settings page, accessible via Settings/Preferences | Version Control | Log or the new drop-down menu on the Log tool window’s toolbar.\nThe Git log can now be opened as a tab in the editor for more workspace and easier navigation through the list of commits.\nWe’ve added First Parent and No Merges options to the Graph Options menu in the Git tool window.\nWe’ve refined the color encoding and layout of branch lines for the commit graph in the Log tab of the Git tool window. \n\n\n\n\nThe features and enhancements in version 2024.2 that are designed to facilitate work with frameworks, technologies, and databases, as well as the updates for web development, are accessible in IntelliJ IDEA Ultimate only.\nFrameworks and technologies \nIntelliJ IDEA Ultimate now provides bean autocompletion and injection for Quarkus and Micronaut applications. \nWe’ve extended JPA support with several new inspections. \nWe’ve added the ability to trigger Spring @Scheduled methods in debug sessions, eliminating the need to manually adjust a method’s schedule and wait for it to start.\nIn the HTTP Client, we’ve introduced the XPath function, which allows you to query elements from XML and HTML documents. Additionally, we’ve added numerous methods for manipulating XML and HTML documents, eliminating the need to parse XML manually.\nThe HTTP Client now supports iterating through variable collections, allowing you to compose a single HTTP request with a JSONPath collection and send requests for each element. In addition, you can access specific collection items in post-processing scripts using JSONPath syntax.\nThe HTTP Client better supports working with APIs that provide specific methods, offering the ability to add custom methods.\nIntelliJ IDEA Ultimate now offers support for Jakarta Data, including coding assistance and inspections for repositories, method name completion and validation based on the data model, and parameter validation based on the method name. \nJakarta query language support is now available, offering syntax highlighting, statement validation, and statement autocompletion based on the data model.\nWe’ve significantly extended support for Terraform, now providing full line code completion for it, along with essential code insight features such as context-aware code completion, refined syntax highlighting, an improved error detection system with quick-fix suggestions and a quick documentation feature.\nKtor’s development mode is now supported in run configurations and is now used by default when a new run configuration is created.\nRemote development and collaboration\nRemote development workflows now feature better setting synchronization between the JetBrains Client, the desktop IDE, and the remote IDE, ensuring your development environment remains consistent. \nWe’ve added reverse port forwarding for remote development workflows, allowing the remote IDE to connect to ports available on the client machine. \nScreen sharing in Code With Me calls is now redirected to the browser, allowing you to specify the sharing source – either a specific window or the entire screen.\nCode With Me session startup has been simplified, consolidating all permission settings into a redesigned popup. This allows you to start sessions in just two clicks and gives you the ability to adjust permissions during the session. \nWe’ve implemented an End Session popup that prompts you to end, continue, or ignore inactive sessions after 30 minutes, with automatic termination if no action is taken within three minutes.\nDatabase tools\nThe new AI Assistant features for databases include text-to-SQL generation, assistance with modifying tables, and help with understanding and fixing SQL problems. You can use AI Assistant to generate and refine SQL code, request table modifications, and attach your database schema to the AI chat by typing # followed by the name of the database schema you want to add to the prompt.\nYou can now import data from tabular files using customizable scripted loaders for the Excel, JSON, Parquet, and shapefile formats. \nThe Related Rows action is now available in the floating toolbar. We’ve also moved the settings for this action into Settings/Preferences | Advanced Settings.  \nWe’ve made value completion automatic. This feature operates entirely locally, so completion variants are based on the other values already loaded in the current column.\nWeb development\nYou can now run and debug TypeScript files while executing them from different entry points, including the file context menu, the Run widget, and the Current File configuration.\nPrettier integration is enabled in new projects with a direct prettier dependency in their root package.json and a Prettier configuration file at the same level. \nThe IDE can resolve link paths based on your project’s file system, providing autocompletion and navigation for Next.js, Nuxt, SvelteKit, and Astro.\nSvelte 5 snippets and render tags are now supported.\nWe’ve implemented language server protocol (LSP) support for Astro and Vue Language Service v2.\nJetBrains Runtime\nStarting with IntelliJ IDEA 2024.2, all IDE updates will come with JBR21, offering enhanced security and performance as well as Wayland rendering support for Linux.\nOther \nTo improve the IDE experience for native speakers of Chinese, Korean, and Japanese, we’ve bundled the support for these languages. \nThese are the most notable improvements introduced in IntelliJ IDEA 2024.2. For a detailed list of all the changes, please check the release notes.\nWe’d love to hear your feedback on the new features and enhancements, as it greatly contributes to the evolution of the product. You can get in touch with us on X (formerly Twitter) or leave a comment below. If you encounter any bugs while using the IDE, please report them to our issue tracker.\nHappy developing!",
        "dc:creator": "Maria Kosukhina",
        "content": "IntelliJ IDEA 2024.2 has arrived, featuring a host of exciting upgrades to enhance your experience with the IDE.&#160; You can get the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu. Download IntelliJ IDEA 2024.2 This release enhances Spring Data JPA support, simplifies cron expression management, and upgrades the [&#8230;]",
        "contentSnippet": "IntelliJ IDEA 2024.2 has arrived, featuring a host of exciting upgrades to enhance your experience with the IDE.  You can get the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu. Download IntelliJ IDEA 2024.2 This release enhances Spring Data JPA support, simplifies cron expression management, and upgrades the […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=497532",
        "categories": [
          "releases",
          "2024-2",
          "intellij-idea-2024-2"
        ],
        "isoDate": "2024-08-07T08:15:32.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "article New updates to Planner comment notifications and settings in Planner Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Carlos Guerra Vazquez",
        "title": "Introducing the revamped Attach to Process experience",
        "link": "https://devblogs.microsoft.com/visualstudio/introducing-the-revamped-attach-to-process-experience/",
        "pubDate": "Tue, 06 Aug 2024 10:00:36 +0000",
        "content:encodedSnippet": "One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio, the Attach to Process dialog allows you to quickly attach the debugger to the processes you want to inspect and troubleshoot. While this feature has been around for a long time, its current design has room for modernization to better fit the latest versions of Visual Studio. Thus, we used this opportunity to improve the Attach to Process experience introducing a revamped and refreshed UI. Along with the new UI, we also took some time to introduce additional features users had requested and improved performance and accessibility.\n\nThe first thing you may notice is that the new UI visual style was updated to be consistent with the rest of Visual Studio, as well as supporting dark mode or any other VS theme you are using. The refreshed layout is not just about looks—it’s designed to save space and reduce clutter. This means you can easily find and select the processes you want to debug, even when working with smaller window sizes. It’s a cleaner, more intuitive experience that keeps everything you need within easy reach.\nWhat’s new in the Attach to Process dialog?\nFollowing are the new features and improvements to the dialog:\nTheming support: The dialog now adapts to your preferred VS theme.\n\n\nDecluttering: We revamped the view to reduce clutter and give back vertical space. This includes having the connection information hidden as a tooltip and having the Code Type be selected through a combo box in the dialog, instead of requiring a separate window like the old dialog did.\n\nIntroduced Local and Remote connection types: We added a new “Local” only connection type that simplifies the view when only debugging processes on your own machine. The existing “Default” connection was renamed into “Remote (Windows)”, as the new default connection is the Local one.\nImproved performance: Rendering time of both the tree view and flat view of the processes was improved. This should be especially noticeable for the tree view.\nCollapsible items in the Tree view: The dialog now allows you to collapse child processes shown in the Tree view. Helping you reduce clutter.\n\nPersistence of columns positions and widths on the processes list: The dialog now remembers the positions and widths of the columns on the processes list. This way you don’t have to adjust them every time you re-open VS.\nIntegrated “Track Window” experience: When selecting a process using the Track Window toggle, any window you selected will be highlighted on the processes list. Allowing you to see its information before deciding to attach, or you can attach directly to it though a double click.\nBuffered Text Search: The dialog now lets you start typing the name of the process you are searching as soon as the dialog opens and even before the processes are loaded. The dialog will buffer your input and apply it as soon as the processes are available, saving you some time in your workflow.\nOther changes:\nThe search now supports wildcards, hexadecimal search, property filters and multiple process search.\n\nProcess icons are shown on the lists. (Local connection only)\n\nPreview of the selected processes. You can double click on it to scroll to the selected process on the list.\n\nThe last attached process name is shown on the reattach menu item. (Only on VS 17.11)\n\nTry it out and let us know what you think\nThe new Attach to Process dialog is available in Visual Studio 2022 version 17.10 and later. You can access it from the Debug > Attach to Process menu or by pressing Ctrl+Alt+P. We hope you enjoy using it and find it more productive and pleasant than the old one. If you have any thoughts or suggestions, please share them with us on the Developer Community site or just leave a comment below. Your feedback is very important to us.\nStay connected with the Visual Studio team by following us on Twitter @VS_Debugger, Twitter @VisualStudio, YouTube, and LinkedIn.\nThe post Introducing the revamped Attach to Process experience appeared first on Visual Studio Blog.",
        "dc:creator": "Carlos Guerra Vazquez",
        "content": "<p>One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio,</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/introducing-the-revamped-attach-to-process-experience/\">Introducing the revamped Attach to Process experience</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio,\nThe post Introducing the revamped Attach to Process experience appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250065",
        "categories": [
          "Visual Studio",
          "Debugging and Diagnostics",
          "UI Refresh",
          "Visual Studio 2022"
        ],
        "isoDate": "2024-08-06T10:00:36.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": [
      {
        "creator": "subokim",
        "title": "사람을 귀하게 여겨야 하는 이유",
        "link": "https://subokim.wordpress.com/2024/08/07/why-value-developer/",
        "pubDate": "Wed, 07 Aug 2024 03:41:49 +0000",
        "dc:creator": "subokim",
        "comments": "https://subokim.wordpress.com/2024/08/07/why-value-developer/#respond",
        "content": "자기 꿈이 있는 사람은 사람을 귀하게 여깁니다.누가 언제 어떻게 나를 도와줄지 모르기 때문입니다.이렇게 도와달라고 말을 합니다. 자기 꿈에 도취된 사람은 사람을 허투루 여깁니다.내 꿈을 위해 희생시킬 사람이 필요하거든요.이렇게 하라고 부추깁니다. 전자는 옆에 있는 사람이 자꾸 불어납니다.후자는 옆에 있는 사람이 자꾸 사라지죠. 전자는 자꾸 자기 실력을 기릅니다.일은 자기가 하는 거고, 다른 사람은 나를 도와줄 뿐이니까요. 후자는... <a class=\"more-link\" href=\"https://subokim.wordpress.com/2024/08/07/why-value-developer/#more-13437\">Continue Reading &#8594;</a>",
        "contentSnippet": "자기 꿈이 있는 사람은 사람을 귀하게 여깁니다.누가 언제 어떻게 나를 도와줄지 모르기 때문입니다.이렇게 도와달라고 말을 합니다. 자기 꿈에 도취된 사람은 사람을 허투루 여깁니다.내 꿈을 위해 희생시킬 사람이 필요하거든요.이렇게 하라고 부추깁니다. 전자는 옆에 있는 사람이 자꾸 불어납니다.후자는 옆에 있는 사람이 자꾸 사라지죠. 전자는 자꾸 자기 실력을 기릅니다.일은 자기가 하는 거고, 다른 사람은 나를 도와줄 뿐이니까요. 후자는... Continue Reading →",
        "guid": "http://subokim.wordpress.com/?p=13437",
        "categories": [
          "IT스타트업"
        ],
        "isoDate": "2024-08-07T03:41:49.000Z"
      }
    ]
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김병환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": [
      {
        "title": "Compose 함수는 어떤 조건으로 나누는것이 좋을까?(Stateful, stateless)",
        "link": "https://thdev.tech/compose/2024/08/04/Android-Compose-Split-Funcation/",
        "pubDate": "Sun, 04 Aug 2024 00:00:00 +0000",
        "content": "<p>Compose 함수는 어떠한 조건을 사용해 나누는 것이 좋을까? 고려하면 좋을 것은 무엇일까?</p>\n\n<ul>\n  <li>스크린으로 나눈다?</li>\n  <li>컴포넌트로 나눈다?</li>\n  <li>무조건 많이 나눈다?</li>\n</ul>\n\n<p>답은 없지만 최소한 어떤 규칙을 가지고 나눌 수 있을지 고민하고 적용한 부분을 정리해 본다.</p>\n\n<p><br /></p>\n\n<h3>이 글에서 알아볼 내용</h3>\n\n<ul>\n  <li>코드의 분리 관점을 무엇으로 볼지를 고민해 본 글이다.</li>\n  <li>글에 오류가 있을 수 있으니 참고만 하길</li>\n</ul>\n\n<!--more-->\n\n<p><br /></p>\n\n<h2>발표 자료</h2>\n\n<script defer=\"\" class=\"speakerdeck-embed\" data-id=\"4adc96f79a254caea0c859ff66a19494\" data-ratio=\"1.7777777777777777\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<p><br /></p>\n\n<h2>풀 코드를 통해 함수를 분리해 보자</h2>\n\n<p>작성한 코드는 <code class=\"language-plaintext highlighter-rouge\">@Composalbe</code> MainScreen 함수 하나로 작성하였다.</p>\n\n<p>이 코드는 총 311줄로 아래와 같은 단점이 생긴다.</p>\n\n<ul>\n  <li>함수를 분리하지 않는 경우 새로운 Screen이 추가되면 기존 코드에 이어질 수 있다.</li>\n  <li>기존 코드의 수정도 어렵다.</li>\n</ul>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/all.png\" alt=\"all\" /></p>\n\n<p><a href=\"https://github.com/taehwandev/Android-BlogExample/blob/main/sample/compose/compose-example-01/src/main/java/tech/thdev/compose/web/sample/MainActivityBackup.kt\">Github - MainActivityBackup.kt 전체 코드</a></p>\n\n<p>이 코드는 어디까지나 분리 없이, 설명하기 위한 방식을 선택하기 위해 작성한 코드이다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MainActivityBackup</span> <span class=\"p\">:</span> <span class=\"nc\">ComponentActivity</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">:</span> <span class=\"nc\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">)</span>\n        <span class=\"nf\">enableEdgeToEdge</span><span class=\"p\">()</span>\n        <span class=\"nf\">setContent</span> <span class=\"p\">{</span>\n            <span class=\"nc\">MyApplicationTheme</span> <span class=\"p\">{</span>\n                <span class=\"nc\">MainScreen</span><span class=\"p\">(</span>\n                    <span class=\"n\">list</span> <span class=\"p\">=</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n                        <span class=\"nc\">NavigationSample</span><span class=\"p\">(</span>\n                            <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"s\">\"HOME\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_home_24</span><span class=\"p\">,</span>\n                            <span class=\"n\">trigger</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"nc\">NavigationSample</span><span class=\"p\">(</span>\n                            <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"s\">\"WEB\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_web_24</span><span class=\"p\">,</span>\n                            <span class=\"n\">trigger</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">WEB</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">),</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n  * MainScreen의 전체 코드\n  **/</span>\n<span class=\"nd\">@SuppressLint</span><span class=\"p\">(</span><span class=\"s\">\"SetJavaScriptEnabled\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@OptIn</span><span class=\"p\">(</span><span class=\"nc\">ExperimentalMaterial3Api</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">MainScreen</span><span class=\"p\">(</span>\n    <span class=\"n\">list</span><span class=\"p\">:</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">NavigationSample</span><span class=\"p\">&gt;,</span>\n    <span class=\"n\">navController</span><span class=\"p\">:</span> <span class=\"nc\">NavHostController</span> <span class=\"p\">=</span> <span class=\"nf\">rememberNavController</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">navBackStackEntry</span> <span class=\"k\">by</span> <span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"nf\">currentBackStackEntryAsState</span><span class=\"p\">()</span> <span class=\"c1\">// Navigation 활용을 위한 코드</span>\n    <span class=\"kd\">val</span> <span class=\"py\">currentDestination</span> <span class=\"p\">=</span> <span class=\"n\">navBackStackEntry</span><span class=\"o\">?.</span><span class=\"n\">destination</span>\n    <span class=\"nc\">Scaffold</span><span class=\"p\">(</span>\n        <span class=\"n\">topBar</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n            <span class=\"nc\">TopAppBar</span><span class=\"p\">(</span>\n                <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">currentDestination</span><span class=\"o\">?.</span><span class=\"n\">route</span> <span class=\"o\">?:</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">bottomBar</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n            <span class=\"nc\">NavigationBar</span> <span class=\"p\">{</span>\n                <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"nf\">forEach</span> <span class=\"p\">{</span> <span class=\"n\">screen</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"nc\">NavigationBarItem</span><span class=\"p\">(</span>\n                        <span class=\"n\">label</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                        <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">currentDestination</span><span class=\"o\">?.</span><span class=\"n\">hierarchy</span><span class=\"o\">?.</span><span class=\"nf\">any</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">route</span> <span class=\"p\">==</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">trigger</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">}</span> <span class=\"p\">==</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n                        <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">icon</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                            <span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">trigger</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nf\">popUpTo</span><span class=\"p\">(</span><span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">findStartDestination</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                    <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                <span class=\"p\">}</span>\n                                <span class=\"n\">launchSingleTop</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                <span class=\"n\">restoreState</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxSize</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Box</span><span class=\"p\">(</span>\n            <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">context</span> <span class=\"p\">=</span> <span class=\"nc\">LocalContext</span><span class=\"p\">.</span><span class=\"n\">current</span>\n            <span class=\"nc\">CompositionLocalProvider</span><span class=\"p\">(</span><span class=\"nc\">LocalWebOwner</span> <span class=\"n\">provides</span> <span class=\"nc\">WebView</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"nc\">NavHost</span><span class=\"p\">(</span>\n                    <span class=\"n\">navController</span> <span class=\"p\">=</span> <span class=\"n\">navController</span><span class=\"p\">,</span>\n                    <span class=\"n\">startDestination</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">enterTransition</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">EnterTransition</span><span class=\"p\">.</span><span class=\"nc\">None</span> <span class=\"p\">},</span>\n                    <span class=\"n\">exitTransition</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">ExitTransition</span><span class=\"p\">.</span><span class=\"nc\">None</span> <span class=\"p\">},</span>\n                <span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">composable</span><span class=\"p\">(</span><span class=\"n\">route</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n                        <span class=\"nc\">Column</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">LazyColumn</span><span class=\"p\">(</span>\n                                <span class=\"n\">contentPadding</span> <span class=\"p\">=</span> <span class=\"nc\">PaddingValues</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n                                <span class=\"n\">verticalArrangement</span> <span class=\"p\">=</span> <span class=\"nc\">Arrangement</span><span class=\"p\">.</span><span class=\"nf\">spacedBy</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n                                    <span class=\"nc\">Surface</span><span class=\"p\">(</span><span class=\"n\">shape</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">shapes</span><span class=\"p\">.</span><span class=\"n\">small</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">editMode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                            <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                                                <span class=\"kd\">var</span> <span class=\"py\">changeItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n                                                <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n                                                    <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">changeItem</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">new</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                                                    <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n                                                <span class=\"p\">)</span>\n\n                                                <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                                            <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n                                                                <span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">-&gt;</span>\n                                                                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"p\">==</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                                        <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n                                                                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                                                        <span class=\"n\">listItem</span>\n                                                                    <span class=\"p\">}</span>\n                                                                <span class=\"p\">},</span>\n                                                            <span class=\"p\">)</span>\n                                                        <span class=\"p\">},</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                                                    <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">newList</span> <span class=\"p\">-&gt;</span> <span class=\"n\">newList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">},</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n                                                <span class=\"p\">}</span>\n                                            <span class=\"p\">}</span>\n                                        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                            <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Gray</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"mf\">0.3f</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n                                                <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Text</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span>\n\n                                                    <span class=\"nc\">IconButton</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">newList</span> <span class=\"p\">-&gt;</span> <span class=\"n\">newList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n                                                        <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_close_24</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"s\">\"remove\"</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">}</span>\n                                                <span class=\"p\">}</span>\n\n                                                <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                    <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                                        <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n                                                            <span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">-&gt;</span>\n                                                                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">listItem</span> <span class=\"p\">==</span> <span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                                    <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n                                                                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                                                    <span class=\"n\">listItem</span>\n                                                                <span class=\"p\">}</span>\n                                                            <span class=\"p\">},</span>\n                                                        <span class=\"p\">)</span>\n                                                    <span class=\"p\">},</span>\n                                                    <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"edit\"</span><span class=\"p\">)</span>\n                                                <span class=\"p\">}</span>\n                                            <span class=\"p\">}</span>\n                                        <span class=\"p\">}</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n\n                            <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                    <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">list</span> <span class=\"p\">-&gt;</span> <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">))</span> <span class=\"p\">})</span>\n                                <span class=\"p\">},</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"New\"</span><span class=\"p\">)</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"nf\">composable</span><span class=\"p\">(</span><span class=\"n\">route</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">WEB</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">val</span> <span class=\"py\">chromeClient</span> <span class=\"p\">=</span> <span class=\"nc\">CustomWebChromeClient</span><span class=\"p\">()</span>\n                        <span class=\"kd\">val</span> <span class=\"py\">client</span> <span class=\"p\">=</span> <span class=\"nc\">CustomWebViewClient</span><span class=\"p\">()</span>\n\n                        <span class=\"kd\">val</span> <span class=\"py\">webView</span> <span class=\"p\">=</span> <span class=\"nc\">LocalWebOwner</span><span class=\"p\">.</span><span class=\"n\">current</span>\n\n                        <span class=\"kd\">var</span> <span class=\"py\">url</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"s\">\"https://thdev.tech/\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                        <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxSize</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n                                <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">url</span><span class=\"p\">,</span>\n                                <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">url</span> <span class=\"p\">=</span> <span class=\"n\">new</span> <span class=\"p\">},</span>\n                                <span class=\"n\">keyboardOptions</span> <span class=\"p\">=</span> <span class=\"nc\">KeyboardOptions</span><span class=\"p\">(</span><span class=\"n\">imeAction</span> <span class=\"p\">=</span> <span class=\"nc\">ImeAction</span><span class=\"p\">.</span><span class=\"nc\">Search</span><span class=\"p\">),</span>\n                                <span class=\"n\">keyboardActions</span> <span class=\"p\">=</span> <span class=\"nc\">KeyboardActions</span><span class=\"p\">(</span><span class=\"n\">onSearch</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">loadUrl</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">}),</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">8</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span>\n\n                            <span class=\"nc\">BoxWithConstraints</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">width</span> <span class=\"p\">=</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">.</span><span class=\"n\">hasFixedWidth</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">MATCH_PARENT</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span> <span class=\"p\">}</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">height</span> <span class=\"p\">=</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">.</span><span class=\"n\">hasFixedHeight</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">MATCH_PARENT</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span> <span class=\"p\">}</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">layoutParams</span> <span class=\"p\">=</span> <span class=\"nc\">FrameLayout</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n\n                                <span class=\"nc\">LaunchedEffect</span><span class=\"p\">(</span><span class=\"n\">key1</span> <span class=\"p\">=</span> <span class=\"nc\">Unit</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">loadUrl</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                                <span class=\"nc\">BackHandler</span> <span class=\"p\">{</span>\n                                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">canGoBack</span><span class=\"p\">()</span> <span class=\"p\">==</span> <span class=\"k\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                        <span class=\"n\">webView</span><span class=\"p\">.</span><span class=\"nf\">goBack</span><span class=\"p\">()</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n\n                                <span class=\"nc\">AndroidView</span><span class=\"p\">(</span>\n                                    <span class=\"n\">factory</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                        <span class=\"kd\">val</span> <span class=\"py\">parentLayout</span> <span class=\"p\">=</span> <span class=\"nc\">FrameLayout</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">).</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                                            <span class=\"kd\">val</span> <span class=\"py\">web</span> <span class=\"p\">=</span> <span class=\"n\">webView</span> <span class=\"o\">?:</span> <span class=\"nc\">WebView</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n                                            <span class=\"n\">web</span><span class=\"p\">.</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                                                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">layoutParams</span> <span class=\"p\">=</span> <span class=\"n\">layoutParams</span>\n                                                <span class=\"n\">settings</span><span class=\"p\">.</span><span class=\"nf\">run</span> <span class=\"p\">{</span>\n                                                    <span class=\"n\">javaScriptEnabled</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"n\">defaultTextEncodingName</span> <span class=\"p\">=</span> <span class=\"s\">\"UTF-8\"</span>\n                                                    <span class=\"n\">loadWithOverviewMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"n\">useWideViewPort</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"nf\">setSupportZoom</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n\n                                                    <span class=\"n\">mixedContentMode</span> <span class=\"p\">=</span>\n                                                        <span class=\"nc\">WebSettings</span><span class=\"p\">.</span><span class=\"nc\">MIXED_CONTENT_COMPATIBILITY_MODE</span>\n                                                    <span class=\"nf\">setNetworkAvailable</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n                                                    <span class=\"n\">cacheMode</span> <span class=\"p\">=</span> <span class=\"nc\">WebSettings</span><span class=\"p\">.</span><span class=\"nc\">LOAD_DEFAULT</span>\n\n                                                    <span class=\"nf\">setSupportMultipleWindows</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n                                                <span class=\"p\">}</span>\n\n                                                <span class=\"n\">webChromeClient</span> <span class=\"p\">=</span> <span class=\"n\">chromeClient</span>\n                                                <span class=\"n\">webViewClient</span> <span class=\"p\">=</span> <span class=\"n\">client</span>\n                                            <span class=\"p\">}</span>\n                                            <span class=\"nf\">addView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">)</span>\n                                        <span class=\"p\">}</span>\n                                        <span class=\"n\">parentLayout</span>\n                                    <span class=\"p\">},</span>\n                                    <span class=\"n\">onRelease</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">parentFrame</span> <span class=\"p\">-&gt;</span>\n                                        <span class=\"p\">(</span><span class=\"n\">parentFrame</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">()</span> <span class=\"k\">as</span><span class=\"p\">?</span> <span class=\"nc\">WebView</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"n\">web</span> <span class=\"p\">-&gt;</span>\n                                            <span class=\"n\">parentFrame</span><span class=\"p\">.</span><span class=\"nf\">removeView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">)</span>\n                                        <span class=\"p\">}</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">)</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2>어떤 식으로 분리할까?</h2>\n\n<p>함수를 분리하는 룰은 다양할 수 있다.</p>\n\n<ul>\n  <li>클린 코드 방식을 적용하여 함수는 하나의 역할과 맡는 이름을 가지도록 한다</li>\n  <li>선언형 UI에서 이야기하는 Stateful, Stateless를 이해한 분리</li>\n</ul>\n\n<p>클린 코드 방식으론 최대한 많이 나누고, 적절한 함수명을 써주는 것이 맞다. 하지만 선언형 UI를 작성하는 컴포즈이니 우린 선언형 UI 방식을 따라 Preview 가능한 형태로 만들어보도록 한다.</p>\n\n<p><br /></p>\n\n<h2>위 코드를 몇 가지로 나눠보자</h2>\n\n<p>Navigation을 활용하고 있으니 크게 몇 가지로 나눌 수 있는데, 필자가 일반적으로 분리하는 방식은 아래와 같다.</p>\n\n<ul>\n  <li>Screen : 화면 단위로 나눈다</li>\n  <li>Components : Screen에 맞는 Components</li>\n  <li>Design Components : 일반적인 디자인 시스템의 Components</li>\n</ul>\n\n<p>Screen은 화면인데 화면도 여러 개일 수 있다. Navigation을 포함하는 화면도 Screen이고, Navigation에 포함하는 Composable 역시 Screen이다.</p>\n\n<p>Screen에 포함하는 단위 몇 가지는 Components 단위를 합쳐서 만든 UI로 분리할 수 있다.</p>\n\n<p>그리고 마지막으로 Design Components는 Material design을 감싸 내부 UI를 구현하는 부분이다. 이 부분을 잘 나누면 팩토리처럼 합쳐서 하나의 화면 구성하는 것이 가능하다.</p>\n\n<p><br /></p>\n\n<h2>HomeScreen 분리</h2>\n\n<p>MainScreen에서 HomeScreen을 우선 분리해보았다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">Column</span> <span class=\"p\">{</span>\n       <span class=\"nc\">LazyColumn</span> <span class=\"p\">{</span>\n           <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n               <span class=\"nc\">Surface</span><span class=\"p\">(</span>\n                   <span class=\"n\">shape</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">shapes</span><span class=\"p\">.</span><span class=\"n\">small</span><span class=\"p\">,</span>\n               <span class=\"p\">)</span> <span class=\"p\">{</span>\n                   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">editMode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                       <span class=\"nc\">Column</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">}</span>\n                   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                       <span class=\"nc\">Column</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">}</span>\n                   <span class=\"p\">}</span>\n               <span class=\"p\">}</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n\n       <span class=\"nc\">Button</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"New\"</span><span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에 대한 Preview는 아래와 같은데, 적합하지 않은 Preview인데, 그냥 흰 화면에 하단 버튼 하나만 보이는 정도이다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_01.png\" alt=\"step_01\" /></p>\n\n<p>이제 이 코드를 기반으로 Preview 가능하도록 수정하는 방법을 이야기해 본다.</p>\n\n<p><br /></p>\n\n<h2>Stateful versus stateless</h2>\n\n<p>Compose에서 제공하는 공식 문서에서 Stateful과 Stateless에 대한 설명을 포함하고 있다.</p>\n\n<p><a href=\"https://developer.android.com/develop/ui/compose/state\">State and Jetpack Compose - 공식 문서</a></p>\n\n<p>Stateful과 Stateless를 통해 코드를 분리할 수 있는데,</p>\n\n<ul>\n  <li>Stateful\n    <ul>\n      <li>remember를 사용해 객체를 저장하는 Composable 포함</li>\n    </ul>\n  </li>\n  <li>stateless\n    <ul>\n      <li>외부에서 값을 변경하거나 이벤트로 전달할 수 있는 형태</li>\n    </ul>\n  </li>\n</ul>\n\n<p>stateful은 <code class=\"language-plaintext highlighter-rouge\">remember</code>를 포함하여 상태를 갖는 Composable 구성하기에 테스트하기 어렵다. 그래서 stateless 형태를 만들고, 외부에서 값을 전달하고, 필요한 event를 외부로 전달 받아 사용할 수 있도록 작업하는 것이다.</p>\n\n<p>그래서 보통은 3가지로 나누는 게 가능하다.</p>\n\n<ul>\n  <li>Stateful : ViewModel을 통해 값을 받거나, <code class=\"language-plaintext highlighter-rouge\">remember {}</code>를 통해 값을 임시 저장하는 부분</li>\n  <li>Stateless : 외부에서 주입하는 값에 따라 화면이 그려지고, 이벤트를 외부로 보낼 수 있는 함수</li>\n  <li>Preview : Stateless를 이용한 Preview를 처리</li>\n</ul>\n\n<p><br /></p>\n\n<h3>Stateful</h3>\n\n<p>stateful은 외부에서 viewModel을 통해 값을 remember로 감싸거나, 상태를 기억하도록 만드는게 주 목적이다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">val</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Event...</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>Stateless</h3>\n\n<p>stateless는 외부 값의 주입을 받을 수 있도록 작성한다.</p>\n\n<p>이렇게 해야 Preview를 처리할 수 있고, 재사용 가능한 형태도 만들 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">,</span> <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">LazyColumn</span> <span class=\"p\">{</span>\n       <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span>\n               <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n               <span class=\"n\">style</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">typography</span><span class=\"p\">.</span><span class=\"n\">bodyMedium</span><span class=\"p\">,</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n                    <span class=\"p\">.</span><span class=\"nf\">clickable</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이를 도식화하면 아래와 같다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/udf-hello-screen.png\" alt=\"udf-hello-screen\" /></p>\n\n<p>stateless로 코드를 작성한다는 것은 아래와 같은 장점을 가진다.</p>\n\n<p>이 내용은 구글 공식 문서에 제공하는 내용으로 원 문서를 참고하면 좋다.</p>\n\n<ul>\n  <li>단일 정보 소스: 상태를 복제하는 대신 옮겼기 때문에 정보 소스가 하나만 있습니다. 버그 방지에 도움이 됩니다.</li>\n  <li>캡슐화됨: 스테이트풀(Stateful) 컴포저블 만 상태를 수정할 수 있습니다. 철저히 내부적 속성입니다.</li>\n  <li>공유 가능함: 호이스팅한 상태를 여러 컴포저블과 공유할 수 있습니다. 다른 컴포저블에서 name을 읽으려는 경우 호이스팅을 통해 그렇게 할 수 있습니다.</li>\n  <li>가로채기 가능함: 스테이트리스(Stateless) 컴포저블의 호출자는 상태를 변경하기 전에 이벤트를 무시할지 수정할지 결정할 수 있습니다.</li>\n  <li>분리됨: 스테이트리스(Stateless) 컴포저블의 상태가 저장될 수 있습니다. 액세스할 수 있습니다 예를 들어 이제 name를 ViewModel로 이동할 수 있습니다.</li>\n</ul>\n\n<p><br /></p>\n\n<h3>다시 돌아와서</h3>\n\n<p>이전에 작성한 HomeScreen 함수에 대해 아래와 같이 Stateful을 작성한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span>\n       <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">,</span>\n       <span class=\"n\">onEvent</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이전에 HomeScreen에서는 <code class=\"language-plaintext highlighter-rouge\">remember {}</code> 부분을 지우고 외부에서 주입받을 수 있도록 parameters로 변경한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">(</span>\n   <span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">,</span>\n   <span class=\"n\">onEvent</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 생략</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이렇게 수정하면서 Preview가 가능해졌고, 좀 더 유연하게 사용할 수 있게 되었다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span>\n   <span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span>\n           <span class=\"nc\">ListItem</span><span class=\"p\">(</span>\n               <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n                   <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span>\n                       <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"message\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n                   <span class=\"p\">),</span>\n                   <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span>\n                       <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n                   <span class=\"p\">),</span>\n               <span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span>\n       <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">,</span>\n       <span class=\"n\">onEvent</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에 대한 Preview는 아래와 같다.</p>\n\n<p>한 번에 editMode와 viewMode를 확인할 수 있다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_02.png\" alt=\"step_02\" /></p>\n\n<p><br /></p>\n\n<h2>Preview의 장점</h2>\n\n<p>Preview를 사용함으로써 다양한 기기 사이즈의 Preview를 바로 확인할 수 있다.</p>\n\n<ul>\n  <li>테블릿, 폴더블, 일반 기기, 작은 기기 등</li>\n</ul>\n\n<p>코드 상황에 따라 빠른 테스트도 가능하다.</p>\n\n<p><br /></p>\n\n<h2>Screen에 맞는 Components 분리</h2>\n\n<p>Screen을 분리하더라도 여전히 코드 양이 많다. Screen 용 Components를 분리하면 상황에 맞는 코드를 좀 더 빠르게 확인할 수 있다.</p>\n\n<p>여기서는 크게 2개를 나눌 수 있다.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">EditMode</th>\n      <th style=\"text-align: center\">ViewMode</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">값 입력 및 삭제</td>\n      <td style=\"text-align: center\">수정 및 View</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_01.png\" alt=\"step_03_01\" /></td>\n      <td style=\"text-align: center\"><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_02.png\" alt=\"step_03_02\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<p><br /></p>\n\n<h3>EditMode</h3>\n\n<p>분리하는 건 이전과 동일한데, 여기선 stateful이 필요하진 않아 stateless를 기준으로 분리한다.</p>\n\n<p>외부 주입 기준이 HomeScreen에서 값을 저장하고, event를 처리하고 있기 때문에 HomeItemEdit에서는 별도로 처리할 부분이 없다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeItemEdit</span><span class=\"p\">(</span>\n   <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditModeOff</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">onCancel</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Column</span><span class=\"p\">(</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"kd\">var</span> <span class=\"py\">changeItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n       <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n           <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">changeItem</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">new</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n       <span class=\"p\">)</span>\n       <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Button</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditModeOff</span><span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n           <span class=\"nc\">Button</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onCancel</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>EditMode Preview</h3>\n\n<p>EditMode에 대해 Stateless로 작업하였기에 아래와 같이 바로 테스트 가능한 형태를 만들 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeItemEdit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">item</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n   <span class=\"nc\">HomeItemEdit</span><span class=\"p\">(</span>\n       <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">,</span>\n       <span class=\"n\">onEditModeOff</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">changeItem</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n               <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">},</span>\n       <span class=\"n\">onCancel</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span>\n       <span class=\"p\">},</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Preview는 아래와 같다. 이때의 장점은 마우스를 통해 런타임 체크도 가능하다는 점이다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_03.png\" alt=\"step_03_03\" /></p>\n\n<p><br /></p>\n\n<h3>ViewMode</h3>\n\n<p>ViewMode 역시 동일한 방식으로 Stateless로 작성한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeItemView</span><span class=\"p\">(</span>\n   <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">onRemove</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditMode</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Column</span><span class=\"p\">(</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Gray</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"mf\">0.3f</span><span class=\"p\">))</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span>\n               <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n\n           <span class=\"nc\">IconButton</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onRemove</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span>\n               <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_close_24</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"s\">\"remove\"</span><span class=\"p\">)</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n\n       <span class=\"nc\">Button</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditMode</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"edit\"</span><span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>ViewMode - Preview</h3>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeItemView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">item</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span>\n  <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"message~!!!!\\naaaa\"</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeItemView</span><span class=\"p\">(</span>\n       <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">,</span>\n       <span class=\"n\">onRemove</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"c1\">// Do nothing</span>\n       <span class=\"p\">},</span>\n       <span class=\"n\">onEditMode</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n               <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>View에서는 event 처리에 대한 코드가 별거 없으니 가볍게 넘어갈 수 있다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_04.png\" alt=\"step_03_04\" /></p>\n\n<p><br /></p>\n\n<h2>Tip</h2>\n\n<p>Stateless에서 Stateful 코드를 부르면 결국 stateless로 작성하는 것이 크게 의미가 없단 소리다.</p>\n\n<p>당연히 이렇게 작성할 일은 없고, stateless에서는 stateless로 작성한 코드를 부르는 것이 당연하지만 맞는 것이다.</p>\n\n<p><br /></p>\n\n<h2>몇 가지 알아두면 좋을 것</h2>\n\n<h3>함수는 어디까지 나누는 게 맞을까?</h3>\n\n<p>아래와 같이 무작정 많이 나누는 것이 올바를 것인가?</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n* Button의 재사용이 불가, Save 전용\n* 함수를 나눈다는 장점은 있지만 필요할까?\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">SaveButton</span><span class=\"p\">(</span>\n   <span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditModeOff</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditModeOff</span><span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">SaveText</span><span class=\"p\">()</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n* Text 하나 뿐인데 굳이...?\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">SaveText</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에서는 Button에 포함하는 <code class=\"language-plaintext highlighter-rouge\">SaveText</code>까지 함수로 나누었다. Button에는 TextStyle과 TextColor까지 포함하고 있다. 별도의 스타일을 지정하지 않으면 상위룰을 따라가게 된다.</p>\n\n<p>그래서 굳이 이렇게까지 나눌 필요는 없다.</p>\n\n<p>이보다는 아래와 같이 나누는 것이 더 좋다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n* Button을 재사용할 수 있도록 수정\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n* 사용하는 경우\n*/</span>\n<span class=\"nc\">Row</span> <span class=\"p\">{</span>\n   <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"p\">},</span>\n       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n   <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"p\">},</span>\n       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"x\"</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n           <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Text만을 가지는 Button을 기본으로 만들고, 이를 활용한 Preview 2가지를 해보면 아래와 같다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_04_01.png\" alt=\"step_04_01\" /></p>\n\n<p><br /></p>\n\n<h3>Modifier의 위치</h3>\n\n<p>Modifier는 권장으론 필수 값 바로 다음에 Modifier가 오도록 적용해야 한다.</p>\n\n<p>아래의 코드는 옵션 값 바로 다음에 Modifier를 적용했고, 필수 값은 맨 아래에 두었다. 권장하는 순서와 하나도 맞지 않다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이를 권장 가이드대로 수정하면 아래와 같이 수정되어야 한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>Modifier를 적용할 때는</h3>\n\n<p>Modifier를 사용할 때는 함수의 파라미터 순서 그대로 사용할 수도 있지만 개인적으론 Modifier를 최 하단으로 이동시켜 사용하고 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n       <span class=\"cm\">/* 필자가 추천하는 위치 */</span>\n       <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n\n       <span class=\"cm\">/* 일반적인 위치? */</span>\n       <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"x\"</span><span class=\"p\">,</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>개인적으론 Modifier 관련 설정이 계속 길어지다 보니 하단으로 내려 사용하고 있다.</p>\n\n<p><br /></p>\n\n<h3>Container에 따른 Modifier 위치는?</h3>\n\n<p>외부에서 바라볼 때는 당연하게도 container에 modifier가 적용될 것으로 기대할 수 있다. 하지만 아래와 같은 코드라면?</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드는 적합하지 않다. 어느 누구도 Text에 modifier가 적용될 거라고 생각하지 못하기 때문이다.</p>\n\n<p><br /></p>\n\n<h2>디자인 컴포넌트</h2>\n\n<p>디자인 컴포넌트는 꼭 필수는 아니지만 있는 것이 좋다. 회사마다 디자인 시스템을 가지고 있는 경우도 있겠지만, 아닌 경우도 있을 것이다. 아닌 경우라고 하더라도 공통화를 해두면 나중에 수정하기 좋아진다.</p>\n\n<ul>\n  <li>Text\n    <ul>\n      <li>Text를 앱 내의 공통 Components로 작성할 경우 TextStyle 등을 한 번에 적용하는 것이 가능</li>\n    </ul>\n  </li>\n  <li>Button\n    <ul>\n      <li>디자인 가이드에 따라 Button을 공통화하고, 디자인을 적용할 수 있다(사용의 편리)</li>\n    </ul>\n  </li>\n  <li>TextField\n    <ul>\n      <li>디자인 가이드에 따라 TextField을 공통화</li>\n    </ul>\n  </li>\n</ul>\n\n<p>와 같은 정도로 분리할 수 있을 것이다.</p>\n\n<p>여기서는 위에 Tip으로 작성한 Button 부분을 디자인 컴포넌트로 분리하고 이를 적용하는 방법을 적어본다.</p>\n\n<p><br /></p>\n\n<h3>Button Components</h3>\n\n<p>공용 버튼 컴포넌트는 아래와 같이 작성할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">ExampleButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">enabled</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n   <span class=\"n\">contentPadding</span><span class=\"p\">:</span> <span class=\"nc\">PaddingValues</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nc\">ContentPadding</span><span class=\"p\">,</span>\n   <span class=\"n\">textStyle</span><span class=\"p\">:</span> <span class=\"nc\">TextStyle</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"n\">defaultTextStyle</span><span class=\"p\">,</span>\n   <span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nc\">ExampleButtonColors</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nf\">filledButtonColors</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">colors</span> <span class=\"p\">=</span> <span class=\"nc\">ButtonDefaults</span><span class=\"p\">.</span><span class=\"nf\">buttonColors</span><span class=\"p\">(</span>\n           <span class=\"n\">containerColor</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">containerColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n           <span class=\"n\">contentColor</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">contentColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n       <span class=\"p\">),</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">defaultMinSize</span><span class=\"p\">(</span><span class=\"n\">minHeight</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nc\">MinHeight</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">style</span> <span class=\"p\">=</span> <span class=\"n\">textStyle</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">contentColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">contentPadding</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h4>Parameters 종류</h4>\n\n<p>Parameters는 크게 2개로 나뉘는데</p>\n\n<ul>\n  <li>필수 값 : 함수에 꼭 주입해야 할 정보</li>\n  <li>옵션 값 : 코틀린에 기본 값을 정의한다.</li>\n</ul>\n\n<p>이 옵션 값에도 2 가지로 나뉜다.</p>\n\n<ul>\n  <li>옵션 - inline : 누가 보아도 바로 확인할 수 있는 true/false 와 같은 정보</li>\n  <li>옵션 - Defaults : 옵션 Defaults는 내부에서 정의한 값, 높이나 스타일이나 padding 등의 정보</li>\n</ul>\n\n<p>이를 잘 반영해 디자인 시스템을 분리할 수 있다.</p>\n\n<p><br /></p>\n\n<h2>마무리</h2>\n\n<p>이 글에서는 MainScreen에서 작성한 코드를 HomeScreen &gt; HomeScreen에 대한 Components &gt; 디자인 Components까지 분리하는 과정을 담았다.</p>\n\n<p>꼭 필요한 부분을 포함하여 작성하였고, 다음 글에서는 CompositionLocal과 관련한 글을 이어서 작성한다.</p>\n\n",
        "contentSnippet": "Compose 함수는 어떠한 조건을 사용해 나누는 것이 좋을까? 고려하면 좋을 것은 무엇일까?\n스크린으로 나눈다?\n컴포넌트로 나눈다?\n무조건 많이 나눈다?\n답은 없지만 최소한 어떤 규칙을 가지고 나눌 수 있을지 고민하고 적용한 부분을 정리해 본다.\n\n이 글에서 알아볼 내용\n코드의 분리 관점을 무엇으로 볼지를 고민해 본 글이다.\n글에 오류가 있을 수 있으니 참고만 하길\n\n발표 자료\n\n\n\n\n\n풀 코드를 통해 함수를 분리해 보자\n작성한 코드는 @Composalbe MainScreen 함수 하나로 작성하였다.\n이 코드는 총 311줄로 아래와 같은 단점이 생긴다.\n함수를 분리하지 않는 경우 새로운 Screen이 추가되면 기존 코드에 이어질 수 있다.\n기존 코드의 수정도 어렵다.\n\nGithub - MainActivityBackup.kt 전체 코드\n이 코드는 어디까지나 분리 없이, 설명하기 위한 방식을 선택하기 위해 작성한 코드이다.\n\nclass MainActivityBackup : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            MyApplicationTheme {\n                MainScreen(\n                    list = listOf(\n                        NavigationSample(\n                            title = \"HOME\",\n                            icon = R.drawable.baseline_home_24,\n                            trigger = NavigationSample.Trigger.HOME,\n                        ),\n                        NavigationSample(\n                            title = \"WEB\",\n                            icon = R.drawable.baseline_web_24,\n                            trigger = NavigationSample.Trigger.WEB,\n                        ),\n                    ),\n                )\n            }\n        }\n    }\n}\n\n/**\n  * MainScreen의 전체 코드\n  **/\n@SuppressLint(\"SetJavaScriptEnabled\")\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nprivate fun MainScreen(\n    list: List<NavigationSample>,\n    navController: NavHostController = rememberNavController(),\n) {\n    val navBackStackEntry by navController.currentBackStackEntryAsState() // Navigation 활용을 위한 코드\n    val currentDestination = navBackStackEntry?.destination\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(text = currentDestination?.route ?: \"\") },\n            )\n        },\n        bottomBar = {\n            NavigationBar {\n                list.forEach { screen ->\n                    NavigationBarItem(\n                        label = { Text(text = screen.title) },\n                        selected = currentDestination?.hierarchy?.any { it.route == screen.trigger.name } == true,\n                        icon = { Icon(painter = painterResource(id = screen.icon), contentDescription = screen.title) },\n                        onClick = {\n                            navController.navigate(screen.trigger.name) {\n                                popUpTo(navController.graph.findStartDestination().id) {\n                                    saveState = true\n                                }\n                                launchSingleTop = true\n                                restoreState = true\n                            }\n                        }\n                    )\n                }\n            }\n        },\n        modifier = Modifier.fillMaxSize()\n    ) {\n        Box(\n            modifier = Modifier.padding(it)\n        ) {\n            val context = LocalContext.current\n            CompositionLocalProvider(LocalWebOwner provides WebView(context)) {\n                NavHost(\n                    navController = navController,\n                    startDestination = NavigationSample.Trigger.HOME.name,\n                    enterTransition = { EnterTransition.None },\n                    exitTransition = { ExitTransition.None },\n                ) {\n                    composable(route = NavigationSample.Trigger.HOME.name) {\n                        var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n                        Column {\n                            LazyColumn(\n                                contentPadding = PaddingValues(20.dp),\n                                verticalArrangement = Arrangement.spacedBy(10.dp),\n                                modifier = Modifier.fillMaxWidth().weight(1f)\n                            ) {\n                                items(listItem.items) { item ->\n                                    Surface(shape = MaterialTheme.shapes.small) {\n                                        if (item.editMode) {\n                                            Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {\n                                                var changeItem by remember { mutableStateOf(item) }\n                                                TextField(\n                                                    value = changeItem.text,\n                                                    onValueChange = { new -> changeItem = changeItem.copy(text = new) },\n                                                    modifier = Modifier.fillMaxWidth()\n                                                )\n\n                                                Row {\n                                                    Button(\n                                                        onClick = {\n                                                            listItem = listItem.copy(\n                                                                items = listItem.items.map { listItem ->\n                                                                    if (listItem.index == item.index) {\n                                                                        changeItem.copy(editMode = false)\n                                                                    } else {\n                                                                        listItem\n                                                                    }\n                                                                },\n                                                            )\n                                                        },\n                                                        modifier = Modifier.weight(1f)\n                                                    ) { Text(text = \"Save\") }\n\n                                                    Button(\n                                                        onClick = { listItem = listItem.copy(items = listItem.items.toMutableList().also { newList -> newList.remove(item) }) },\n                                                        modifier = Modifier.weight(1f).padding(start = 10.dp)\n                                                    ) { Text(text = \"X\") }\n                                                }\n                                            }\n                                        } else {\n                                            Column(modifier = Modifier.fillMaxWidth().background(color = Color.Gray.copy(0.3f))) {\n                                                Row {\n                                                    Text(\n                                                        text = item.text,\n                                                        modifier = Modifier.weight(1f).padding(horizontal = 16.dp).padding(top = 16.dp)\n                                                    )\n\n                                                    IconButton(onClick = { listItem = listItem.copy(items = listItem.items.toMutableList().also { newList -> newList.remove(item) }) }) {\n                                                        Icon(painter = painterResource(id = R.drawable.baseline_close_24), contentDescription = \"remove\")\n                                                    }\n                                                }\n\n                                                Button(\n                                                    onClick = {\n                                                        listItem = listItem.copy(\n                                                            items = listItem.items.map { listItem ->\n                                                                if (listItem == item) {\n                                                                    listItem.copy(editMode = true)\n                                                                } else {\n                                                                    listItem\n                                                                }\n                                                            },\n                                                        )\n                                                    },\n                                                    modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(top = 10.dp, bottom = 16.dp)\n                                                ) {\n                                                    Text(text = \"edit\")\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            Button(\n                                onClick = {\n                                    listItem = listItem.copy(items = listItem.items.toMutableList().also { list -> list.add(ListItem.Item(index = list.size, text = \"\", editMode = true)) })\n                                },\n                                modifier = Modifier.padding(20.dp)\n                            ) {\n                                Text(text = \"New\")\n                            }\n                        }\n                    }\n\n                    composable(route = NavigationSample.Trigger.WEB.name) {\n                        val chromeClient = CustomWebChromeClient()\n                        val client = CustomWebViewClient()\n\n                        val webView = LocalWebOwner.current\n\n                        var url by remember { mutableStateOf(\"https://thdev.tech/\") }\n\n                        Column(modifier = Modifier.fillMaxSize()) {\n                            TextField(\n                                value = url,\n                                onValueChange = { new -> url = new },\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),\n                                keyboardActions = KeyboardActions(onSearch = { webView?.loadUrl(url) }),\n                                modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(bottom = 8.dp)\n                            )\n\n                            BoxWithConstraints(modifier = Modifier.weight(1f)) {\n                                val width = if (constraints.hasFixedWidth) { ViewGroup.LayoutParams.MATCH_PARENT } else { ViewGroup.LayoutParams.WRAP_CONTENT }\n                                val height = if (constraints.hasFixedHeight) { ViewGroup.LayoutParams.MATCH_PARENT } else { ViewGroup.LayoutParams.WRAP_CONTENT }\n                                val layoutParams = FrameLayout.LayoutParams(width, height)\n\n                                LaunchedEffect(key1 = Unit) { webView?.loadUrl(url) }\n\n                                BackHandler {\n                                    if (webView?.canGoBack() == true) {\n                                        webView.goBack()\n                                    }\n                                }\n\n                                AndroidView(\n                                    factory = {\n                                        val parentLayout = FrameLayout(context).apply {\n                                            val web = webView ?: WebView(context)\n\n                                            web.apply {\n                                                this.layoutParams = layoutParams\n                                                settings.run {\n                                                    javaScriptEnabled = true\n                                                    defaultTextEncodingName = \"UTF-8\"\n                                                    loadWithOverviewMode = true\n                                                    useWideViewPort = true\n                                                    setSupportZoom(true)\n\n                                                    mixedContentMode =\n                                                        WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE\n                                                    setNetworkAvailable(true)\n                                                    cacheMode = WebSettings.LOAD_DEFAULT\n\n                                                    setSupportMultipleWindows(true)\n                                                }\n\n                                                webChromeClient = chromeClient\n                                                webViewClient = client\n                                            }\n                                            addView(web)\n                                        }\n                                        parentLayout\n                                    },\n                                    onRelease = { parentFrame ->\n                                        (parentFrame.children.first() as? WebView)?.let { web ->\n                                            parentFrame.removeView(web)\n                                        }\n                                    }\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\n어떤 식으로 분리할까?\n함수를 분리하는 룰은 다양할 수 있다.\n클린 코드 방식을 적용하여 함수는 하나의 역할과 맡는 이름을 가지도록 한다\n선언형 UI에서 이야기하는 Stateful, Stateless를 이해한 분리\n클린 코드 방식으론 최대한 많이 나누고, 적절한 함수명을 써주는 것이 맞다. 하지만 선언형 UI를 작성하는 컴포즈이니 우린 선언형 UI 방식을 따라 Preview 가능한 형태로 만들어보도록 한다.\n\n위 코드를 몇 가지로 나눠보자\nNavigation을 활용하고 있으니 크게 몇 가지로 나눌 수 있는데, 필자가 일반적으로 분리하는 방식은 아래와 같다.\nScreen : 화면 단위로 나눈다\nComponents : Screen에 맞는 Components\nDesign Components : 일반적인 디자인 시스템의 Components\nScreen은 화면인데 화면도 여러 개일 수 있다. Navigation을 포함하는 화면도 Screen이고, Navigation에 포함하는 Composable 역시 Screen이다.\nScreen에 포함하는 단위 몇 가지는 Components 단위를 합쳐서 만든 UI로 분리할 수 있다.\n그리고 마지막으로 Design Components는 Material design을 감싸 내부 UI를 구현하는 부분이다. 이 부분을 잘 나누면 팩토리처럼 합쳐서 하나의 화면 구성하는 것이 가능하다.\n\nHomeScreen 분리\nMainScreen에서 HomeScreen을 우선 분리해보았다.\n\n@Composable\ninternal fun HomeScreen() {\n    var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   Column {\n       LazyColumn {\n           items(listItem.items) { item ->\n               Surface(\n                   shape = MaterialTheme.shapes.small,\n               ) {\n                   if (item.editMode) {\n                       Column() { /* 생략 */ }\n                   } else {\n                       Column() { /* 생략 */ }\n                   }\n               }\n           }\n       }\n\n       Button(\n           onClick = { /* 생략 */ },\n           modifier = Modifier\n               .padding(20.dp)\n       ) {\n           Text(text = \"New\")\n       }\n   }\n}\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeScreen() {\n   HomeScreen()\n}\n\n\n이 코드에 대한 Preview는 아래와 같은데, 적합하지 않은 Preview인데, 그냥 흰 화면에 하단 버튼 하나만 보이는 정도이다.\n\n이제 이 코드를 기반으로 Preview 가능하도록 수정하는 방법을 이야기해 본다.\n\nStateful versus stateless\nCompose에서 제공하는 공식 문서에서 Stateful과 Stateless에 대한 설명을 포함하고 있다.\nState and Jetpack Compose - 공식 문서\nStateful과 Stateless를 통해 코드를 분리할 수 있는데,\nStateful\n    \nremember를 사용해 객체를 저장하는 Composable 포함\nstateless\n    \n외부에서 값을 변경하거나 이벤트로 전달할 수 있는 형태\nstateful은 remember를 포함하여 상태를 갖는 Composable 구성하기에 테스트하기 어렵다. 그래서 stateless 형태를 만들고, 외부에서 값을 전달하고, 필요한 event를 외부로 전달 받아 사용할 수 있도록 작업하는 것이다.\n그래서 보통은 3가지로 나누는 게 가능하다.\nStateful : ViewModel을 통해 값을 받거나, remember {}를 통해 값을 임시 저장하는 부분\nStateless : 외부에서 주입하는 값에 따라 화면이 그려지고, 이벤트를 외부로 보낼 수 있는 함수\nPreview : Stateless를 이용한 Preview를 처리\n\nStateful\nstateful은 외부에서 viewModel을 통해 값을 remember로 감싸거나, 상태를 기억하도록 만드는게 주 목적이다.\n\n@Composable\ninternal fun HomeScreen() {\n   val listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   HomeScreen(listItem) {\n    // Event...\n   }\n}\n\n\n\nStateless\nstateless는 외부 값의 주입을 받을 수 있도록 작성한다.\n이렇게 해야 Preview를 처리할 수 있고, 재사용 가능한 형태도 만들 수 있다.\n\n@Composable\ninternal fun HomeScreen(listItem: ListItem, onClick: () -> Unit) {\n   LazyColumn {\n       items(listItem.items) { item ->\n           Text(\n               text = item.text,\n               style = MaterialTheme.typography.bodyMedium,\n               modifier = Modifier\n                    .clickable(onClick = onClick)\n           )\n       }\n   }\n}\n\n\n이를 도식화하면 아래와 같다.\n\nstateless로 코드를 작성한다는 것은 아래와 같은 장점을 가진다.\n이 내용은 구글 공식 문서에 제공하는 내용으로 원 문서를 참고하면 좋다.\n단일 정보 소스: 상태를 복제하는 대신 옮겼기 때문에 정보 소스가 하나만 있습니다. 버그 방지에 도움이 됩니다.\n캡슐화됨: 스테이트풀(Stateful) 컴포저블 만 상태를 수정할 수 있습니다. 철저히 내부적 속성입니다.\n공유 가능함: 호이스팅한 상태를 여러 컴포저블과 공유할 수 있습니다. 다른 컴포저블에서 name을 읽으려는 경우 호이스팅을 통해 그렇게 할 수 있습니다.\n가로채기 가능함: 스테이트리스(Stateless) 컴포저블의 호출자는 상태를 변경하기 전에 이벤트를 무시할지 수정할지 결정할 수 있습니다.\n분리됨: 스테이트리스(Stateless) 컴포저블의 상태가 저장될 수 있습니다. 액세스할 수 있습니다 예를 들어 이제 name를 ViewModel로 이동할 수 있습니다.\n\n다시 돌아와서\n이전에 작성한 HomeScreen 함수에 대해 아래와 같이 Stateful을 작성한다.\n\n@Composable\ninternal fun HomeScreen() {\n   var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   HomeScreen(\n       listItem = listItem,\n       onEvent = {\n           listItem = it\n       }\n   )\n}\n\n\n이전에 HomeScreen에서는 remember {} 부분을 지우고 외부에서 주입받을 수 있도록 parameters로 변경한다.\n\n@Composable\nprivate fun HomeScreen(\n   listItem: ListItem,\n   onEvent: (listItem: ListItem) -> Unit,\n) {\n    // 생략\n}\n\n\n이렇게 수정하면서 Preview가 가능해졌고, 좀 더 유연하게 사용할 수 있게 되었다.\n\n@Preview(\n   showBackground = true,\n)\n@Composable\nprivate fun PreviewHomeScreen() {\n   var listItem by remember {\n       mutableStateOf(\n           ListItem(\n               listOf(\n                   ListItem.Item(\n                       index = 0,\n                       text = \"message\",\n                       editMode = false,\n                   ),\n                   ListItem.Item(\n                       index = 1,\n                       text = \"\",\n                       editMode = true,\n                   ),\n               )\n           )\n       )\n   }\n\n   HomeScreen(\n       listItem = listItem,\n       onEvent = {\n           listItem = it\n       }\n   )\n}\n\n\n이 코드에 대한 Preview는 아래와 같다.\n한 번에 editMode와 viewMode를 확인할 수 있다.\n\n\nPreview의 장점\nPreview를 사용함으로써 다양한 기기 사이즈의 Preview를 바로 확인할 수 있다.\n테블릿, 폴더블, 일반 기기, 작은 기기 등\n코드 상황에 따라 빠른 테스트도 가능하다.\n\nScreen에 맞는 Components 분리\nScreen을 분리하더라도 여전히 코드 양이 많다. Screen 용 Components를 분리하면 상황에 맞는 코드를 좀 더 빠르게 확인할 수 있다.\n여기서는 크게 2개를 나눌 수 있다.\nEditMode\n      ViewMode\n    \n값 입력 및 삭제\n      수정 및 View\n    \n\n      \n    \n\nEditMode\n분리하는 건 이전과 동일한데, 여기선 stateful이 필요하진 않아 stateless를 기준으로 분리한다.\n외부 주입 기준이 HomeScreen에서 값을 저장하고, event를 처리하고 있기 때문에 HomeItemEdit에서는 별도로 처리할 부분이 없다.\n\n@Composable\ninternal fun HomeItemEdit(\n   item: ListItem.Item,\n   onEditModeOff: (changeItem: ListItem.Item) -> Unit,\n   onCancel: () -> Unit,\n) {\n   Column(\n       modifier = Modifier.fillMaxWidth().padding(16.dp)\n   ) {\n       var changeItem by remember(item) { mutableStateOf(item) }\n       TextField(\n           value = changeItem.text,\n           onValueChange = { new -> changeItem = changeItem.copy(text = new) },\n           modifier = Modifier.fillMaxWidth()\n       )\n       Row {\n           Button(\n               onClick = { onEditModeOff(changeItem) },\n               modifier = Modifier.weight(1f)\n           ) { Text(text = \"Save\") }\n\n           Button(\n               onClick = { onCancel() },\n               modifier = Modifier.weight(1f).padding(start = 10.dp)\n           ) { Text(text = \"X\") }\n       }\n   }\n}\n\n\n\nEditMode Preview\nEditMode에 대해 Stateless로 작업하였기에 아래와 같이 바로 테스트 가능한 형태를 만들 수 있다.\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeItemEdit() {\n   var item by remember {\n       mutableStateOf(ListItem.Item.NEW)\n   }\n   HomeItemEdit(\n       item = item,\n       onEditModeOff = { changeItem ->\n           item = changeItem.copy(\n               editMode = false,\n           )\n       },\n       onCancel = {\n           item = ListItem.Item.NEW\n       },\n   )\n}\n\n\nPreview는 아래와 같다. 이때의 장점은 마우스를 통해 런타임 체크도 가능하다는 점이다.\n\n\nViewMode\nViewMode 역시 동일한 방식으로 Stateless로 작성한다.\n\n@Composable\ninternal fun HomeItemView(\n   item: ListItem.Item,\n   onRemove: () -> Unit,\n   onEditMode: () -> Unit,\n) {\n   Column(\n       modifier = Modifier.fillMaxWidth().background(color = Color.Gray.copy(0.3f))\n   ) {\n       Row {\n           Text(\n               text = item.text,\n               modifier = Modifier.weight(1f).padding(horizontal = 16.dp).padding(top = 16.dp)\n           )\n\n           IconButton(\n               onClick = { onRemove() },\n           ) {\n               Icon(painter = painterResource(id = R.drawable.baseline_close_24), contentDescription = \"remove\")\n           }\n       }\n\n       Button(\n           onClick = { onEditMode() },\n           modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(top = 10.dp, bottom = 16.dp)\n       ) {\n           Text(text = \"edit\")\n       }\n   }\n}\n\n\n\nViewMode - Preview\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeItemView() {\n   var item by remember {\n       mutableStateOf(\n  ListItem.Item.NEW.copy(text = \"message~!!!!\\naaaa\")\n   )\n   }\n\n   HomeItemView(\n       item = item,\n       onRemove = {\n           // Do nothing\n       },\n       onEditMode = {\n           item = item.copy(\n               editMode = true,\n           )\n       }\n   )\n}\n\n\nView에서는 event 처리에 대한 코드가 별거 없으니 가볍게 넘어갈 수 있다.\n\n\nTip\nStateless에서 Stateful 코드를 부르면 결국 stateless로 작성하는 것이 크게 의미가 없단 소리다.\n당연히 이렇게 작성할 일은 없고, stateless에서는 stateless로 작성한 코드를 부르는 것이 당연하지만 맞는 것이다.\n\n몇 가지 알아두면 좋을 것\n함수는 어디까지 나누는 게 맞을까?\n아래와 같이 무작정 많이 나누는 것이 올바를 것인가?\n\n/**\n* Button의 재사용이 불가, Save 전용\n* 함수를 나눈다는 장점은 있지만 필요할까?\n*/\n@Composable\nprivate fun SaveButton(\n   changeItem: ListItem.Item,\n   modifier: Modifier,\n   onEditModeOff: (changeItem: ListItem.Item) -> Unit,\n) {\n   Button(\n       onClick = { onEditModeOff(changeItem) },\n       modifier = modifier\n   ) {\n       SaveText()\n   }\n}\n\n/**\n* Text 하나 뿐인데 굳이...?\n*/\n@Composable\nprivate fun SaveText() {\n   Text(text = \"Save\")\n}\n\n\n이 코드에서는 Button에 포함하는 SaveText까지 함수로 나누었다. Button에는 TextStyle과 TextColor까지 포함하고 있다. 별도의 스타일을 지정하지 않으면 상위룰을 따라가게 된다.\n그래서 굳이 이렇게까지 나눌 필요는 없다.\n이보다는 아래와 같이 나누는 것이 더 좋다.\n\n/**\n* Button을 재사용할 수 있도록 수정\n*/\n@Composable\nprivate fun HomeButton(\n   onClick: () -> Unit,\n   modifier: Modifier = Modifier,\n   text: String,\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n/**\n* 사용하는 경우\n*/\nRow {\n   HomeButton(\n       onClick = { },\n       text = \"Save\",\n       modifier = Modifier\n           .weight(1f)\n   )\n   HomeButton(\n       onClick = { },\n       text = \"x\",\n       modifier = Modifier\n           .weight(1f)\n           .padding(start = 10.dp)\n   )\n}\n\n\nText만을 가지는 Button을 기본으로 만들고, 이를 활용한 Preview 2가지를 해보면 아래와 같다.\n\n\nModifier의 위치\nModifier는 권장으론 필수 값 바로 다음에 Modifier가 오도록 적용해야 한다.\n아래의 코드는 옵션 값 바로 다음에 Modifier를 적용했고, 필수 값은 맨 아래에 두었다. 권장하는 순서와 하나도 맞지 않다.\n\n@Composable\nprivate fun HomeButton(\n   onClick: () -> Unit = {},\n   modifier: Modifier = Modifier,\n   text: String,\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n\n이를 권장 가이드대로 수정하면 아래와 같이 수정되어야 한다.\n\n@Composable\nprivate fun HomeButton(\n   text: String,\n   modifier: Modifier = Modifier,\n   onClick: () -> Unit = {},\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n\n\nModifier를 적용할 때는\nModifier를 사용할 때는 함수의 파라미터 순서 그대로 사용할 수도 있지만 개인적으론 Modifier를 최 하단으로 이동시켜 사용하고 있다.\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeButton() {\n   Row {\n       /* 필자가 추천하는 위치 */\n       HomeButton(\n           onClick = {},\n           text = \"Save\",\n           modifier = Modifier\n               .weight(1f)\n       )\n\n       /* 일반적인 위치? */\n       HomeButton(\n           onClick = {},\n           modifier = Modifier\n               .weight(1f)\n               .padding(start = 10.dp),\n           text = \"x\",\n       )\n   }\n}\n\n\n개인적으론 Modifier 관련 설정이 계속 길어지다 보니 하단으로 내려 사용하고 있다.\n\nContainer에 따른 Modifier 위치는?\n외부에서 바라볼 때는 당연하게도 container에 modifier가 적용될 것으로 기대할 수 있다. 하지만 아래와 같은 코드라면?\n\n@Composable\nprivate fun HomeButton(\n   text: String,\n   modifier: Modifier = Modifier,\n   onClick: () -> Unit = {},\n) {\n   Button(\n       onClick = onClick,\n   ) {\n       Text(\n           text = text,\n           modifier = modifier\n       )\n   }\n}\n\n\n이 코드는 적합하지 않다. 어느 누구도 Text에 modifier가 적용될 거라고 생각하지 못하기 때문이다.\n\n디자인 컴포넌트\n디자인 컴포넌트는 꼭 필수는 아니지만 있는 것이 좋다. 회사마다 디자인 시스템을 가지고 있는 경우도 있겠지만, 아닌 경우도 있을 것이다. 아닌 경우라고 하더라도 공통화를 해두면 나중에 수정하기 좋아진다.\nText\n    \nText를 앱 내의 공통 Components로 작성할 경우 TextStyle 등을 한 번에 적용하는 것이 가능\nButton\n    \n디자인 가이드에 따라 Button을 공통화하고, 디자인을 적용할 수 있다(사용의 편리)\nTextField\n    \n디자인 가이드에 따라 TextField을 공통화\n와 같은 정도로 분리할 수 있을 것이다.\n여기서는 위에 Tip으로 작성한 Button 부분을 디자인 컴포넌트로 분리하고 이를 적용하는 방법을 적어본다.\n\nButton Components\n공용 버튼 컴포넌트는 아래와 같이 작성할 수 있다.\n\n@Composable\nfun ExampleButton(\n   text: String,\n   onClick: () -> Unit,\n   modifier: Modifier = Modifier,\n   enabled: Boolean = true,\n   contentPadding: PaddingValues = ExampleButtonDefaults.ContentPadding,\n   textStyle: TextStyle = ExampleButtonDefaults.defaultTextStyle,\n   colors: ExampleButtonColors = ExampleButtonDefaults.filledButtonColors(),\n) {\n   Button(\n       onClick = onClick,\n       colors = ButtonDefaults.buttonColors(\n           containerColor = colors.containerColor().value,\n           contentColor = colors.contentColor().value,\n       ),\n       modifier = modifier\n           .defaultMinSize(minHeight = ExampleButtonDefaults.MinHeight)\n   ) {\n       Text(\n           text = text,\n           style = textStyle,\n           color = colors.contentColor().value,\n           modifier = Modifier\n               .padding(contentPadding)\n       )\n   }\n}\n\n\n\nParameters 종류\nParameters는 크게 2개로 나뉘는데\n필수 값 : 함수에 꼭 주입해야 할 정보\n옵션 값 : 코틀린에 기본 값을 정의한다.\n이 옵션 값에도 2 가지로 나뉜다.\n옵션 - inline : 누가 보아도 바로 확인할 수 있는 true/false 와 같은 정보\n옵션 - Defaults : 옵션 Defaults는 내부에서 정의한 값, 높이나 스타일이나 padding 등의 정보\n이를 잘 반영해 디자인 시스템을 분리할 수 있다.\n\n마무리\n이 글에서는 MainScreen에서 작성한 코드를 HomeScreen > HomeScreen에 대한 Components > 디자인 Components까지 분리하는 과정을 담았다.\n꼭 필요한 부분을 포함하여 작성하였고, 다음 글에서는 CompositionLocal과 관련한 글을 이어서 작성한다.",
        "guid": "https://thdev.tech/compose/2024/08/04/Android-Compose-Split-Funcation/",
        "isoDate": "2024-08-04T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "데이터 노가다 실수담 - 6th",
        "link": "https://kangmyounghun.blogspot.com/2024/08/6th.html",
        "pubDate": "2024-08-07T11:24:00.001Z",
        "author": "강명훈",
        "content": "<div>프로세스 집계 결과는 35개.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiskzi9E29cg7B-aBDWrWm0XQ3cl-lweGLJYc4PVLtLzLNb8WTco2kfHdQxSG1ybli69MFVtXSzCpsecGlf3eGROziw56ZMiJe8XCN2yBWAwZQjeSDSBcPhqwwRlRis6aV9fzXkK6-cOL9u3sgw30wSLeDErd_D0nQe-D5R1bTJIVrHF2-M8aUi0S72Ist8/s1280/splunk_stats.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"655\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiskzi9E29cg7B-aBDWrWm0XQ3cl-lweGLJYc4PVLtLzLNb8WTco2kfHdQxSG1ybli69MFVtXSzCpsecGlf3eGROziw56ZMiJe8XCN2yBWAwZQjeSDSBcPhqwwRlRis6aV9fzXkK6-cOL9u3sgw30wSLeDErd_D0nQe-D5R1bTJIVrHF2-M8aUi0S72Ist8/s520/splunk_stats.png\" width=\"520\" /></a></div><div><br /></div><div><span><a name='more'></a></span>집계 분할 기준에 제작사를 추가하면 36개? 프로세스 제작사가 다 달라도 35개를 넘으면 안 되는데?</div><br />\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg1pJlO4W4Vl9J4WPefPhP61xWJcHQpsgJ_XJr7WjwCmX-fZRjm2Msz7EGFDokP5ltwXqUY0u09vWTNEN1qDokDjHrcQ4JvAz4Ph88HpkfWOu7HpLQFUDgRvy6vZbelBB12-UHeHinMV5-9FObIQCSz9xZEShguqb862RP6vKKYXCKXPBsFqkXEx21Ifqt8/s1280/splunk_stats2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"654\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg1pJlO4W4Vl9J4WPefPhP61xWJcHQpsgJ_XJr7WjwCmX-fZRjm2Msz7EGFDokP5ltwXqUY0u09vWTNEN1qDokDjHrcQ4JvAz4Ph88HpkfWOu7HpLQFUDgRvy6vZbelBB12-UHeHinMV5-9FObIQCSz9xZEShguqb862RP6vKKYXCKXPBsFqkXEx21Ifqt8/s520/splunk_stats2.png\" width=\"520\" /></a></div><br />\n<div>제작사 정보만 집계해봤다. 네이버가 두 개네.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBmByfGLbrBtPkXQFdSzseJuPK0p1eAU3Nh5jLo6QFezzQC4Dy8lqtJllWg5PgKVUMhShka7r0rZCgsr3L8z0xWGEYlauYudD8Z6i2w0kmfBa5AU4h2XMKYubrWNbxCfIVB8F-J82KCjubWRdQYfiMUZqLmf1ANmdvuIc4rhfar56rScYIaX2WZ5GR2Lai/s979/splunk_stats3.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"720\" data-original-width=\"979\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhBmByfGLbrBtPkXQFdSzseJuPK0p1eAU3Nh5jLo6QFezzQC4Dy8lqtJllWg5PgKVUMhShka7r0rZCgsr3L8z0xWGEYlauYudD8Z6i2w0kmfBa5AU4h2XMKYubrWNbxCfIVB8F-J82KCjubWRdQYfiMUZqLmf1ANmdvuIc4rhfar56rScYIaX2WZ5GR2Lai/s520/splunk_stats3.png\" width=\"520\" /></a></div><div><br /></div>왜 두 개지? 프로세스 원본을 보니 실행 파일이 다름.<div><br />\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjG8ms_sNPs8rcqUoib1PU6RH4hjvASTNl29VIuQd5FumpyBXHS_KMaxps1_TrkPccF1CsMKNXO_n_J4sObi4DblSlt0eC03u7QbsoiiGABVxjUzAGk4wkXbblUIZwYW8U83vVlnIASvL1cBo3VhT6KgtrlCQJQHkmCvH3EIn4ihdVW_onKD7JpbCLTuNLc/s1280/splunk_stats4.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"680\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjG8ms_sNPs8rcqUoib1PU6RH4hjvASTNl29VIuQd5FumpyBXHS_KMaxps1_TrkPccF1CsMKNXO_n_J4sObi4DblSlt0eC03u7QbsoiiGABVxjUzAGk4wkXbblUIZwYW8U83vVlnIASvL1cBo3VhT6KgtrlCQJQHkmCvH3EIn4ihdVW_onKD7JpbCLTuNLc/s520/splunk_stats4.png\" width=\"520\" /></a></div><div><br /></div><div>소문자로 일원화.</div><br /><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiprkr0dBNqMNCnWbL-KLSyBtIyjPWi_fahlPuwEliYSXcfSgryV3xQyhQix3FI2hIJnA4ho49B5ksq3Zf5SrXKF22pxkCEeT4W35MatQL-4F3pjcu2vOGKAKTeYW3a9oT4xVfDh6otvijwVl6ONIjuOhKHgO8lEOlDewdxGZ3Nk5OP4RPlRE-6JClVOoZZ/s1280/splunk_stats5png.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"681\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiprkr0dBNqMNCnWbL-KLSyBtIyjPWi_fahlPuwEliYSXcfSgryV3xQyhQix3FI2hIJnA4ho49B5ksq3Zf5SrXKF22pxkCEeT4W35MatQL-4F3pjcu2vOGKAKTeYW3a9oT4xVfDh6otvijwVl6ONIjuOhKHgO8lEOlDewdxGZ3Nk5OP4RPlRE-6JClVOoZZ/s520/splunk_stats5png.png\" width=\"520\" /></a></div><br />\n<div>디지털 서명 받을 때 같은 회사면 같은 이름으로 다 통일했으면 좋겠다. 대소문자 구분같은 것도 좀 하지 말고<span style=\"font-size: x-small;\">(..)</span>&nbsp;</div><div><br /></div><div><b>관련 글</b><br /><ul><li><a href=\"https://kangmyounghun.blogspot.com/2023/07/5th.html\">데이터 노가다 실수담 - 5th</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2019/01/blog-post_90.html\" target=\"\">데이터 노가다 실수담</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2023/06/blog-post.html\">평균의 함정</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2020/09/blog-post_27.html\" target=\"\">데이터 분석이 쉬워지는 비법</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/12/blog-post.html\" target=\"\">데이터 분석에 필요한 자질은 뭘까?</a></li></ul></div></div>",
        "contentSnippet": "프로세스 집계 결과는 35개.\n\n\n\n\n\n집계 분할 기준에 제작사를 추가하면 36개? 프로세스 제작사가 다 달라도 35개를 넘으면 안 되는데?\n\n\n\n제작사 정보만 집계해봤다. 네이버가 두 개네.\n\n\n\n\n왜 두 개지? 프로세스 원본을 보니 실행 파일이 다름.\n\n\n\n\n소문자로 일원화.\n\n\n\n디지털 서명 받을 때 같은 회사면 같은 이름으로 다 통일했으면 좋겠다. 대소문자 구분같은 것도 좀 하지 말고(..) \n\n\n관련 글\n\n데이터 노가다 실수담 - 5th\n데이터 노가다 실수담\n평균의 함정\n데이터 분석이 쉬워지는 비법\n데이터 분석에 필요한 자질은 뭘까?",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-6510873428213693273",
        "isoDate": "2024-08-07T11:24:00.001Z"
      },
      {
        "title": "정규표현식 테스트할 때",
        "link": "https://kangmyounghun.blogspot.com/2024/08/blog-post_2.html",
        "pubDate": "2024-08-02T13:42:00.001Z",
        "author": "강명훈",
        "content": "<div>애용하는 regex101.com은 g<span style=\"font-size: x-small;\">(lobal)</span>과 m<span style=\"font-size: x-small;\">(ultiline)</span> 수정자 사용이 디폴트.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4C70LdwoVvmzvcIP9yi_fGdyXajiVSu35UXPC6pRKLUxe3ZZsoyPUOEltRTY8_3rqbEx2hEa_5yPQ5KsWpvEeBt9YNDtDV5H5oJ01Kp8rA3b9WnCzz0JI0cIKktOwKN0_gXr2hmFxlwtkhLUK95ScgddveyYqRxBQ4TsGhQzwHwnnMopJ__qAllDG-CWZ/s1280/regex.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"687\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4C70LdwoVvmzvcIP9yi_fGdyXajiVSu35UXPC6pRKLUxe3ZZsoyPUOEltRTY8_3rqbEx2hEa_5yPQ5KsWpvEeBt9YNDtDV5H5oJ01Kp8rA3b9WnCzz0JI0cIKktOwKN0_gXr2hmFxlwtkhLUK95ScgddveyYqRxBQ4TsGhQzwHwnnMopJ__qAllDG-CWZ/s520/regex.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>문자 하나 검사하는 데 195개 매치?</b></td></tr></tbody></table><br />\n<div><span><a name='more'></a></span>정규표현식 기본 동작은 최초 매칭 성공 후 중지. 하지만 g 옵션을 사용하면 가능한 모든 매칭 결과를 보여준다. 테스트 문자열 개행이 많을 때, 한마디로 줄이 여러 개일 때 편리.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgO_ckJcwaFwpMSZGP0HUyioOk7PgfmGYwuB12NFM1fc2lA4qP-onvnBHtJgKuZ6s3SZHWQfvcXzGip_IoZvqGb1mXw-KaRS6u3qpV_HBvv7Rok7UddilbnJs8evABs4K5qEeQgqXBnpDE3bZSkAA-cAHzz63rPaLLgz6NrUjC04_HxqudDCaHFoeCS-GnS/s1280/regex2.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"686\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgO_ckJcwaFwpMSZGP0HUyioOk7PgfmGYwuB12NFM1fc2lA4qP-onvnBHtJgKuZ6s3SZHWQfvcXzGip_IoZvqGb1mXw-KaRS6u3qpV_HBvv7Rok7UddilbnJs8evABs4K5qEeQgqXBnpDE3bZSkAA-cAHzz63rPaLLgz6NrUjC04_HxqudDCaHFoeCS-GnS/s520/regex2.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>g 옵션 끄면 1개</b></td></tr></tbody></table><br />\n<div>하지만 테스트 문자열이 한 줄일 땐 검사 과정이 헷갈릴 수 있다. g 옵션 때문에 수량자 <span style=\"font-family: courier;\">*</span>의 최소 범위인 0개까지 검사함.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkSZb3oYSOBDZKlg2KplqwXa6k4bf3001-DOVujW39u7wRx0ZvWJMpcVZQGWHyWGE9CmdpXed6h640A_kH6Ah9yhIJ_60UeAYN6841pjPPgWCBlpvBmjTgT39kIA6TS-BbPbHUEM5HTscwzCeb08zafRGxnKXEtRJ4Wd0JwA0TyLhVLCGyYCsrxOQPjNSA/s1280/regex3.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"603\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkSZb3oYSOBDZKlg2KplqwXa6k4bf3001-DOVujW39u7wRx0ZvWJMpcVZQGWHyWGE9CmdpXed6h640A_kH6Ah9yhIJ_60UeAYN6841pjPPgWCBlpvBmjTgT39kIA6TS-BbPbHUEM5HTscwzCeb08zafRGxnKXEtRJ4Wd0JwA0TyLhVLCGyYCsrxOQPjNSA/s520/regex3.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>통으로 하나 검사했는데?</b></td></tr></tbody></table><br />\n<div>디폴트라 까먹기 쉬운데, 매칭 결과나 검사 단계가 예상보다 많다 싶으면 g 옵션을 꺼보자.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjInc8KIoQUVo4g8Ma6mGRM9nehlcp6gOqKSLotGBBuA50LDLhacfn5BntSkYZq3PRkwYsFdTnMjN7RXCi7CU_86vTpwwMv9rLafEkCnRwrQa3tDKsUHKbbUbGsBU3sHc1UcTd7ukQThVM4t-khfJ5U3APTPNhuEtoPaJ7UJqKFMBw81C3Kk01kQo_jouHY/s1280/regex4.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"602\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjInc8KIoQUVo4g8Ma6mGRM9nehlcp6gOqKSLotGBBuA50LDLhacfn5BntSkYZq3PRkwYsFdTnMjN7RXCi7CU_86vTpwwMv9rLafEkCnRwrQa3tDKsUHKbbUbGsBU3sHc1UcTd7ukQThVM4t-khfJ5U3APTPNhuEtoPaJ7UJqKFMBw81C3Kk01kQo_jouHY/s520/regex4.png\" width=\"520\" /></a></div><br />\n<div><b>관련 글</b></div><div><div><ul><li><a href=\"http://kangmyounghun.blogspot.kr/2016/02/blog-post_25.html\" target=\"_blank\">정규표현식 학습 사이트</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/09/blog-post.html\" target=\"\">정규표현식 몰라도 된다</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2024/04/ip.html\">IP 주소를 검사하는 정규표현식</a></li></ul></div></div>",
        "contentSnippet": "애용하는 regex101.com은 g(lobal)과 m(ultiline) 수정자 사용이 디폴트.\n\n\n\n\n문자 하나 검사하는 데 195개 매치?\n\n\n정규표현식 기본 동작은 최초 매칭 성공 후 중지. 하지만 g 옵션을 사용하면 가능한 모든 매칭 결과를 보여준다. 테스트 문자열 개행이 많을 때, 한마디로 줄이 여러 개일 때 편리.\n\n\n\n\ng 옵션 끄면 1개\n\n\n하지만 테스트 문자열이 한 줄일 땐 검사 과정이 헷갈릴 수 있다. g 옵션 때문에 수량자 *의 최소 범위인 0개까지 검사함.\n\n\n\n\n통으로 하나 검사했는데?\n\n\n디폴트라 까먹기 쉬운데, 매칭 결과나 검사 단계가 예상보다 많다 싶으면 g 옵션을 꺼보자.\n\n\n\n\n관련 글\n\n\n정규표현식 학습 사이트\n정규표현식 몰라도 된다\nIP 주소를 검사하는 정규표현식",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-3774098957882638730",
        "isoDate": "2024-08-02T13:42:00.001Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": [
      {
        "creator": "강진우",
        "title": "지금 이 순간에 충실하라 - 평범한 직장인의 고민 일기",
        "link": "https://brunch.co.kr/@@3Y0/78",
        "pubDate": "Sun, 04 Aug 2024 13:48:07 GMT",
        "author": "강진우",
        "content": "휴가의 마지막 날, 아쉬움을 달래려 집으로 출발하기 전에 카페에 들렀다. 빵도 맛있고, 커피도 맛있다는, 그리고 무엇보다 통창으로 보이는 바다가 일품이라는 카페를 찾아갔다.&nbsp;역시나 유명한 곳이라서 그런지 오전 10시에 찾아갔는데도 자리는 거의 만석이었다. (그 카페의 오픈 시간은 오전 9시이다.) 1층과 2층을 쭉 훑어보다가 (3층은 루프탑이어서 이 날씨에",
        "contentSnippet": "휴가의 마지막 날, 아쉬움을 달래려 집으로 출발하기 전에 카페에 들렀다. 빵도 맛있고, 커피도 맛있다는, 그리고 무엇보다 통창으로 보이는 바다가 일품이라는 카페를 찾아갔다. 역시나 유명한 곳이라서 그런지 오전 10시에 찾아갔는데도 자리는 거의 만석이었다. (그 카페의 오픈 시간은 오전 9시이다.) 1층과 2층을 쭉 훑어보다가 (3층은 루프탑이어서 이 날씨에",
        "guid": "https://brunch.co.kr/@@3Y0/78",
        "isoDate": "2024-08-04T13:48:07.000Z"
      }
    ]
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "윈도우용 추천 프리웨어 (2024.8.7) 배경화면, 프로그래밍, 디스크 사용 공간 관리,  3D 프린팅 프로그램, 클립보드 관리",
        "link": "http://muzbox.tistory.com/483454",
        "pubDate": "Wed, 7 Aug 2024 12:11:08 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483454#entry483454comment",
        "content": "<p style=\"text-align: left;\" data-ke-size=\"size18\"><span style=\"background-color: #ffffff; color: #0d0d0d; text-align: start;\">&nbsp;네이버 소프트웨어와 같은 프로그램 소개 사이트가 종료된 후, 윈도우 운영체제를 사용하는 이용자들을 위해 공개 프리웨어 및 오픈소스 프로그램을 소개합니다. 유용한 무료 소프트웨어를 찾고자 하는 사용자들에게 정기적으로 알찬 정보를 제공합니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"freeware.png\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/3m5Dd/btsIWj3uUVK/IWUZxFOGEMYNR72lcjkLU0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/3m5Dd/btsIWj3uUVK/IWUZxFOGEMYNR72lcjkLU0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/3m5Dd/btsIWj3uUVK/IWUZxFOGEMYNR72lcjkLU0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F3m5Dd%2FbtsIWj3uUVK%2FIWUZxFOGEMYNR72lcjkLU0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"윈도우용 추천 프리웨어\" data-filename=\"freeware.png\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\"><span style=\"color: #333333; text-align: left;\">&nbsp;윈도우용 응용프로그램 (Application)은 수없이 많은 종류가 많은 개발자들에 의해 하루에도 수백,수천개가 새로 출시되고 그보다 더 많은 수의 프로그램들이 업데이트 됩니다. 이들 응용프로그램 (Application)은 비율을 지불해야하는<span>&nbsp;</span></span><b><span style=\"color: #009a87;\">상용프로그램</span></b><span style=\"color: #333333; text-align: left;\">과 정품 구매를 확대하기 위해 공급하는 일종의 샘플 개념의<span>&nbsp;</span></span><span style=\"color: #ee2323;\"><b>쉐어웨어</b></span><span style=\"color: #333333; text-align: left;\">, 무료로 사용할 수 있는<span>&nbsp;</span></span><b><span style=\"color: #ef6f53;\">프리웨어</span></b>등으로 크게 3가지로 나뉘게 되는데요.</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\"><br />&nbsp;물론 프리웨어에도 개인만 사용할 있다던가, 기업이나 관공서에서도 사용이 가능하다던가, 소스까지 같이 공개하여 맘대로 수정과 배포가 가능한 완전 무료등의 추가 분류가 필요합니다. 하지만, 개발자가 공개하는 무료배포의 의미가 정확하지 않는 프로그램도 많고, 저작권의 정의도 각양각색이라 본 블로그에서 소개하는 프리웨어도 <span style=\"color: #006dd7;\"><b>최대한 확인이 가능한 범위에서 개인 또는 기업에서 사용가능한지를 구분하여 소개</b></span>하고 있습니다.</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: center;\" data-ke-size=\"size18\">'어떤오후의 프리웨어 이야기'에서 추천하는<br /><span style=\"color: #409d00;\">&nbsp;<b>2024년 8월 7일자 공개자료실 윈도우용 추천 프리웨어</b></span>입니다.</p>\n<p id=\"no_1\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>1. Bing&nbsp;Wallpaper&nbsp;(무료&nbsp;배경화면&nbsp;다운로드)<br /></b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; Microsoft에서&nbsp;개발한&nbsp;데스크톱&nbsp;애플리케이션으로,&nbsp;Bing&nbsp;검색&nbsp;엔진의&nbsp;일일&nbsp;특집&nbsp;이미지를&nbsp;사용자의&nbsp;데스크톱&nbsp;배경화면으로&nbsp;자동&nbsp;설정해줍니다.&nbsp;이&nbsp;앱은&nbsp;매일&nbsp;새로운&nbsp;고해상도&nbsp;이미지를&nbsp;제공하며,&nbsp;풍경,&nbsp;야생동물,&nbsp;문화&nbsp;및&nbsp;역사적&nbsp;장소&nbsp;등&nbsp;다양한&nbsp;주제를&nbsp;다룹니다.&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">가벼운&nbsp;프로그램으로&nbsp;시스템&nbsp;자원을&nbsp;많이&nbsp;사용하지&nbsp;않으며,&nbsp;간단한&nbsp;인터페이스를&nbsp;통해&nbsp;쉽게&nbsp;설정할&nbsp;수&nbsp;있습니다.&nbsp;각&nbsp;이미지에는&nbsp;설명이&nbsp;포함되어&nbsp;있어&nbsp;사용자가&nbsp;세계에&nbsp;대해&nbsp;배울&nbsp;수&nbsp;있는&nbsp;기회를&nbsp;제공합니다.&nbsp;또한&nbsp;다중&nbsp;모니터&nbsp;설정,&nbsp;수동&nbsp;이미지&nbsp;선택&nbsp;등&nbsp;사용자&nbsp;지정&nbsp;옵션도&nbsp;제공합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"Bing Wallpaper.png\" data-origin-width=\"1419\" data-origin-height=\"819\"><span data-url=\"https://blog.kakaocdn.net/dn/coSOSF/btsIValX4dM/xX6KfleDtR1xfDftFK5SGK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/coSOSF/btsIValX4dM/xX6KfleDtR1xfDftFK5SGK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/coSOSF/btsIValX4dM/xX6KfleDtR1xfDftFK5SGK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcoSOSF%2FbtsIValX4dM%2FxX6KfleDtR1xfDftFK5SGK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"Bing Wallpaper.png\" data-origin-width=\"1419\" data-origin-height=\"819\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인/기업</p>\n<p data-ke-size=\"size18\">▶ Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드◀</p>\n<p data-ke-size=\"size18\"><a href=\"https://www.microsoft.com/en-gb/bing/bing-wallpaper\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.microsoft.com/en-gb/bing/bing-wallpaper</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_2\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>2. Rust&nbsp;(빠르고&nbsp;메모리&nbsp;효율적인&nbsp;프로그래밍&nbsp;언어)</b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; 빠르고&nbsp;메모리&nbsp;효율적인&nbsp;프로그래밍&nbsp;언어로,&nbsp;런타임이나&nbsp;가비지&nbsp;컬렉터&nbsp;없이&nbsp;고성능&nbsp;서비스와&nbsp;임베디드&nbsp;장치에서&nbsp;작동할&nbsp;수&nbsp;있습니다.&nbsp;강력한&nbsp;타입&nbsp;시스템과&nbsp;소유권&nbsp;모델을&nbsp;통해&nbsp;메모리&nbsp;안전성과&nbsp;스레드&nbsp;안전성을&nbsp;보장하며,&nbsp;컴파일&nbsp;시점에서&nbsp;많은&nbsp;종류의&nbsp;버그를&nbsp;제거할&nbsp;수&nbsp;있습니다.&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;우수한 문서, 친화적인 컴파일러, 그리고 뛰어난 툴링을 제공합니다. 커맨드 라인 도구, WebAssembly, 네트워킹, 임베디드 시스템 등 다양한 분야에서 사용되며, Firefox, Dropbox, Cloudflare 등 많은 기업들이 실제 제품에 Rust를 활용하고 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"rust-Photoroom.png\" data-origin-width=\"827\" data-origin-height=\"477\"><span data-url=\"https://blog.kakaocdn.net/dn/WH0RH/btsIVJO47UB/jvUNNLCNypThAK7fk5RIq1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/WH0RH/btsIVJO47UB/jvUNNLCNypThAK7fk5RIq1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/WH0RH/btsIVJO47UB/jvUNNLCNypThAK7fk5RIq1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWH0RH%2FbtsIVJO47UB%2FjvUNNLCNypThAK7fk5RIq1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"rust-Photoroom.png\" data-origin-width=\"827\" data-origin-height=\"477\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인/기업(오픈소스)</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1723000005453\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"Rust Programming Language\" data-og-description=\"A language empowering everyone to build reliable and efficient software.\" data-og-host=\"www.rust-lang.org\" data-og-source-url=\"https://www.rust-lang.org/\" data-og-url=\"https://www.rust-lang.org/\" data-og-image=\"https://scrap.kakaocdn.net/dn/dPs7gh/hyWKzLepyT/eZj5FZcrW3jLbpYupii5x0/img.jpg?width=2048&amp;height=1024&amp;face=0_0_2048_1024,https://scrap.kakaocdn.net/dn/c7PsF6/hyWKvB4vMQ/S2tc7TyDrII07Kt02txc70/img.jpg?width=1024&amp;height=1024&amp;face=0_0_1024_1024,https://scrap.kakaocdn.net/dn/mz6c3/hyWKEsfqHL/u6C2NzJC6k30LzPiqtNe61/img.png?width=1000&amp;height=640&amp;face=0_0_1000_640\"><a href=\"https://www.rust-lang.org/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://www.rust-lang.org/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/dPs7gh/hyWKzLepyT/eZj5FZcrW3jLbpYupii5x0/img.jpg?width=2048&amp;height=1024&amp;face=0_0_2048_1024,https://scrap.kakaocdn.net/dn/c7PsF6/hyWKvB4vMQ/S2tc7TyDrII07Kt02txc70/img.jpg?width=1024&amp;height=1024&amp;face=0_0_1024_1024,https://scrap.kakaocdn.net/dn/mz6c3/hyWKEsfqHL/u6C2NzJC6k30LzPiqtNe61/img.png?width=1000&amp;height=640&amp;face=0_0_1000_640');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Rust Programming Language</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">A language empowering everyone to build reliable and efficient software.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">www.rust-lang.org</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_3\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>3. SpaceSniffer&nbsp;(디스크&nbsp;공간&nbsp;사용을&nbsp;시각적으로&nbsp;분석하는&nbsp;도구)</b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp;하드 드라이브의 디스크 공간 사용을 분석하는 도구입니다. 이 프로그램은 선택한 드라이브를 스캔하여 동적 디스크 맵을 생성하며, 이를 통해 가장 많은 공간을 차지하는 파일과 폴더를 쉽게 파악할 수 있습니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">실시간으로 맵을 확인할 수 있으며, 스캔 중 발생하는 변경 사항(파일 삭제, 이름 변경, 새 파일 추가 등)이 자동으로 반영됩니다. 폴더 태깅, 이름 필터링, 사용자 정의 파일 클래스 등 다양한 기능을 제공합니다. 또한 설치가 필요 없는 포터블 프로그램이라는 장점이 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"spacesniffer.png\" data-origin-width=\"934\" data-origin-height=\"675\"><span data-url=\"https://blog.kakaocdn.net/dn/bqb1bs/btsIVkvgYYr/DkH2eUlfGxvzOzzUoK4vg0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bqb1bs/btsIVkvgYYr/DkH2eUlfGxvzOzzUoK4vg0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bqb1bs/btsIVkvgYYr/DkH2eUlfGxvzOzzUoK4vg0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbqb1bs%2FbtsIVkvgYYr%2FDkH2eUlfGxvzOzzUoK4vg0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"spacesniffer.png\" data-origin-width=\"934\" data-origin-height=\"675\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인/기업</p>\n<p data-ke-size=\"size18\">▶Windows 10/11&nbsp;</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1723000033595\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"SpaceSniffer, find lost disk space the easy way.\" data-og-description=\"Brief product description Latest release is 1.3.0.2 SpaceSniffer is a freeWare (donations are welcome) and portable tool application that lets you understand how folders and files are structured on your disks. By using a Treemap visualization layout, you h\" data-og-host=\"www.uderzo.it\" data-og-source-url=\"http://www.uderzo.it/main_products/space_sniffer/index.html\" data-og-url=\"http://www.uderzo.it/main_products/space_sniffer/index.html\" data-og-image=\"https://scrap.kakaocdn.net/dn/do077Q/hyWKw8PCP8/FoSYDK4kNd7hLYuWA2ESwk/img.jpg?width=432&amp;height=356&amp;face=0_0_432_356\"><a href=\"http://www.uderzo.it/main_products/space_sniffer/index.html\" target=\"_blank\" rel=\"noopener\" data-source-url=\"http://www.uderzo.it/main_products/space_sniffer/index.html\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/do077Q/hyWKw8PCP8/FoSYDK4kNd7hLYuWA2ESwk/img.jpg?width=432&amp;height=356&amp;face=0_0_432_356');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">SpaceSniffer, find lost disk space the easy way.</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Brief product description Latest release is 1.3.0.2 SpaceSniffer is a freeWare (donations are welcome) and portable tool application that lets you understand how folders and files are structured on your disks. By using a Treemap visualization layout, you h</p>\n<p class=\"og-host\" data-ke-size=\"size16\">www.uderzo.it</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_4\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>4. Ultimaker&nbsp;Cura&nbsp;(3D&nbsp;프린팅&nbsp;소프트웨어)<br /></b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp;세계적으로&nbsp;인기&nbsp;있는&nbsp;오픈&nbsp;소스&nbsp;3D&nbsp;프린팅&nbsp;소프트웨어입니다.&nbsp;초보자부터&nbsp;전문가까지&nbsp;모든&nbsp;사용자를&nbsp;위한&nbsp;다양한&nbsp;기능을&nbsp;제공하며,&nbsp;강력한&nbsp;슬라이싱&nbsp;엔진을&nbsp;통해&nbsp;3D&nbsp;모델을&nbsp;프린팅&nbsp;가능한&nbsp;G-코드로&nbsp;변환합니다.&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">사용자&nbsp;친화적인&nbsp;인터페이스와&nbsp;400개&nbsp;이상의&nbsp;설정&nbsp;옵션을&nbsp;제공하여&nbsp;사용자가&nbsp;원하는&nbsp;대로&nbsp;프린팅을&nbsp;조정할&nbsp;수&nbsp;있습니다.&nbsp;CAD&nbsp;소프트웨어와의&nbsp;통합,&nbsp;다양한&nbsp;파일&nbsp;형식&nbsp;지원,&nbsp;플러그인을&nbsp;통한&nbsp;기능&nbsp;확장&nbsp;등이&nbsp;가능합니다.&nbsp;또한&nbsp;정기적인&nbsp;업데이트를&nbsp;통해&nbsp;지속적으로&nbsp;개선되며,&nbsp;무료로&nbsp;사용할&nbsp;수&nbsp;있는&nbsp;장점이&nbsp;있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"ultimaker-cura-Photoroom.png\" data-origin-width=\"1280\" data-origin-height=\"685\"><span data-url=\"https://blog.kakaocdn.net/dn/slOh2/btsIVccYBkG/YFUXhak2JcHLzq3TfjKXpK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/slOh2/btsIVccYBkG/YFUXhak2JcHLzq3TfjKXpK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/slOh2/btsIVccYBkG/YFUXhak2JcHLzq3TfjKXpK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FslOh2%2FbtsIVccYBkG%2FYFUXhak2JcHLzq3TfjKXpK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"ultimaker-cura-Photoroom.png\" data-origin-width=\"1280\" data-origin-height=\"685\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1723000056454\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"UltiMaker Cura\" data-og-description=\"UltiMaker Cura는 수백만 명의 사용자가 신뢰하는 무료이며 사용하기 쉬운 3D 프린팅 소프트웨어입니다. 최상의 슬라이싱 및 프린팅 결과를 위해 400개 이상의 설정으로 3D 모델을 미세 조정하세요.\" data-og-host=\"ultimaker.com\" data-og-source-url=\"https://ultimaker.com/ko/software/ultimaker-cura/\" data-og-url=\"https://ultimaker.com/ko/software/ultimaker-cura/\" data-og-image=\"https://scrap.kakaocdn.net/dn/bYh50y/hyWKKeViOw/cVAmyEIgZMpXMFFKPSmBa1/img.jpg?width=2560&amp;height=1707&amp;face=0_0_2560_1707,https://scrap.kakaocdn.net/dn/dEbSfH/hyWKBvvAiz/RV9uAgCsBawk7dlzbBcqc1/img.png?width=648&amp;height=550&amp;face=0_0_648_550,https://scrap.kakaocdn.net/dn/epHjJX/hyWKEMwqKp/cwFJkvqOxhG0Bk0tH6kbC1/img.png?width=648&amp;height=550&amp;face=353_140_416_209\"><a href=\"https://ultimaker.com/ko/software/ultimaker-cura/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://ultimaker.com/ko/software/ultimaker-cura/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bYh50y/hyWKKeViOw/cVAmyEIgZMpXMFFKPSmBa1/img.jpg?width=2560&amp;height=1707&amp;face=0_0_2560_1707,https://scrap.kakaocdn.net/dn/dEbSfH/hyWKBvvAiz/RV9uAgCsBawk7dlzbBcqc1/img.png?width=648&amp;height=550&amp;face=0_0_648_550,https://scrap.kakaocdn.net/dn/epHjJX/hyWKEMwqKp/cwFJkvqOxhG0Bk0tH6kbC1/img.png?width=648&amp;height=550&amp;face=353_140_416_209');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">UltiMaker Cura</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">UltiMaker Cura는 수백만 명의 사용자가 신뢰하는 무료이며 사용하기 쉬운 3D 프린팅 소프트웨어입니다. 최상의 슬라이싱 및 프린팅 결과를 위해 400개 이상의 설정으로 3D 모델을 미세 조정하세요.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">ultimaker.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p id=\"no_5\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><i><b>5. CopyQ&nbsp;(클립보드&nbsp;히스토리를&nbsp;관리)</b></i></span></h2>\n<p data-ke-size=\"size18\">&nbsp; 클립보드&nbsp;히스토리를&nbsp;관리하고&nbsp;조작할&nbsp;수&nbsp;있는&nbsp;강력한&nbsp;도구입니다.&nbsp;시스템&nbsp;트레이에&nbsp;상주하며,&nbsp;최근&nbsp;복사한&nbsp;텍스트나&nbsp;이미지를&nbsp;쉽게&nbsp;확인하고&nbsp;붙여넣을&nbsp;수&nbsp;있습니다.&nbsp;사용자는&nbsp;클립보드&nbsp;항목을&nbsp;편집하고,&nbsp;정렬하며,&nbsp;탭으로&nbsp;구성할&nbsp;수&nbsp;있고,&nbsp;암호화나&nbsp;자동&nbsp;처리&nbsp;같은&nbsp;고급&nbsp;기능도&nbsp;제공합니다.&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">38개의&nbsp;단축키와&nbsp;다양한&nbsp;설정&nbsp;옵션을&nbsp;통해&nbsp;높은&nbsp;수준의&nbsp;사용자&nbsp;정의가&nbsp;가능합니다.&nbsp;그러나&nbsp;복잡한&nbsp;인터페이스와&nbsp;부족한&nbsp;문서화로&nbsp;인해&nbsp;초보자에게는&nbsp;어려울&nbsp;수&nbsp;있으며,&nbsp;Windows&nbsp;환경에&nbsp;최적화되지&nbsp;않은&nbsp;면이&nbsp;있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"copyq.png\" data-origin-width=\"455\" data-origin-height=\"577\"><span data-url=\"https://blog.kakaocdn.net/dn/cMbb7l/btsIWG5cbWB/jLL2xZKnwh5EOI47SUN861/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cMbb7l/btsIWG5cbWB/jLL2xZKnwh5EOI47SUN861/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cMbb7l/btsIWG5cbWB/jLL2xZKnwh5EOI47SUN861/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcMbb7l%2FbtsIWG5cbWB%2FjLL2xZKnwh5EOI47SUN861%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"copyq.png\" data-origin-width=\"455\" data-origin-height=\"577\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">▶프리웨어 - 개인/기업 (오픈소스)</p>\n<p data-ke-size=\"size18\">▶Windows 10/11</p>\n<p data-ke-size=\"size18\">▶무료 다운로드 ◀</p>\n<figure id=\"og_1723000081446\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"product\" data-og-title=\"CopyQ\" data-og-description=\"Download CopyQ for free. Clipboard manager with advanced features. CopyQ is advanced clipboard manager with searchable and editable history with support for image formats, command line control and more.\" data-og-host=\"sourceforge.net\" data-og-source-url=\"https://sourceforge.net/projects/copyq/\" data-og-url=\"https://sourceforge.net/projects/copyq/\" data-og-image=\"https://scrap.kakaocdn.net/dn/gNsrA/hyWKwVhHtP/W3zph0wTmHZV4qJzDh5k7K/img.png?width=48&amp;height=48&amp;face=0_0_48_48\"><a href=\"https://sourceforge.net/projects/copyq/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://sourceforge.net/projects/copyq/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/gNsrA/hyWKwVhHtP/W3zph0wTmHZV4qJzDh5k7K/img.png?width=48&amp;height=48&amp;face=0_0_48_48');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">CopyQ</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Download CopyQ for free. Clipboard manager with advanced features. CopyQ is advanced clipboard manager with searchable and editable history with support for image formats, command line control and more.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">sourceforge.net</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "네이버 소프트웨어와 같은 프로그램 소개 사이트가 종료된 후, 윈도우 운영체제를 사용하는 이용자들을 위해 공개 프리웨어 및 오픈소스 프로그램을 소개합니다. 유용한 무료 소프트웨어를 찾고자 하는 사용자들에게 정기적으로 알찬 정보를 제공합니다.\n\n\n \n 윈도우용 응용프로그램 (Application)은 수없이 많은 종류가 많은 개발자들에 의해 하루에도 수백,수천개가 새로 출시되고 그보다 더 많은 수의 프로그램들이 업데이트 됩니다. 이들 응용프로그램 (Application)은 비율을 지불해야하는 상용프로그램과 정품 구매를 확대하기 위해 공급하는 일종의 샘플 개념의 쉐어웨어, 무료로 사용할 수 있는 프리웨어등으로 크게 3가지로 나뉘게 되는데요.\n 물론 프리웨어에도 개인만 사용할 있다던가, 기업이나 관공서에서도 사용이 가능하다던가, 소스까지 같이 공개하여 맘대로 수정과 배포가 가능한 완전 무료등의 추가 분류가 필요합니다. 하지만, 개발자가 공개하는 무료배포의 의미가 정확하지 않는 프로그램도 많고, 저작권의 정의도 각양각색이라 본 블로그에서 소개하는 프리웨어도 최대한 확인이 가능한 범위에서 개인 또는 기업에서 사용가능한지를 구분하여 소개하고 있습니다.\n \n \n'어떤오후의 프리웨어 이야기'에서 추천하는\n 2024년 8월 7일자 공개자료실 윈도우용 추천 프리웨어입니다.\n \n1. Bing Wallpaper (무료 배경화면 다운로드)\n\n  Microsoft에서 개발한 데스크톱 애플리케이션으로, Bing 검색 엔진의 일일 특집 이미지를 사용자의 데스크톱 배경화면으로 자동 설정해줍니다. 이 앱은 매일 새로운 고해상도 이미지를 제공하며, 풍경, 야생동물, 문화 및 역사적 장소 등 다양한 주제를 다룹니다. \n \n가벼운 프로그램으로 시스템 자원을 많이 사용하지 않으며, 간단한 인터페이스를 통해 쉽게 설정할 수 있습니다. 각 이미지에는 설명이 포함되어 있어 사용자가 세계에 대해 배울 수 있는 기회를 제공합니다. 또한 다중 모니터 설정, 수동 이미지 선택 등 사용자 지정 옵션도 제공합니다.\n\n\n▶프리웨어 - 개인/기업\n▶ Windows 10/11\n▶무료 다운로드◀\nhttps://www.microsoft.com/en-gb/bing/bing-wallpaper\n \n \n \n \n \n2. Rust (빠르고 메모리 효율적인 프로그래밍 언어)\n  빠르고 메모리 효율적인 프로그래밍 언어로, 런타임이나 가비지 컬렉터 없이 고성능 서비스와 임베디드 장치에서 작동할 수 있습니다. 강력한 타입 시스템과 소유권 모델을 통해 메모리 안전성과 스레드 안전성을 보장하며, 컴파일 시점에서 많은 종류의 버그를 제거할 수 있습니다. \n \n 우수한 문서, 친화적인 컴파일러, 그리고 뛰어난 툴링을 제공합니다. 커맨드 라인 도구, WebAssembly, 네트워킹, 임베디드 시스템 등 다양한 분야에서 사용되며, Firefox, Dropbox, Cloudflare 등 많은 기업들이 실제 제품에 Rust를 활용하고 있습니다.\n\n\n▶프리웨어 - 개인/기업(오픈소스)\n▶Windows 10/11\n▶무료 다운로드 ◀\n\n \nRust Programming Language\nA language empowering everyone to build reliable and efficient software.\nwww.rust-lang.org\n\n \n \n \n \n \n3. SpaceSniffer (디스크 공간 사용을 시각적으로 분석하는 도구)\n 하드 드라이브의 디스크 공간 사용을 분석하는 도구입니다. 이 프로그램은 선택한 드라이브를 스캔하여 동적 디스크 맵을 생성하며, 이를 통해 가장 많은 공간을 차지하는 파일과 폴더를 쉽게 파악할 수 있습니다.\n \n실시간으로 맵을 확인할 수 있으며, 스캔 중 발생하는 변경 사항(파일 삭제, 이름 변경, 새 파일 추가 등)이 자동으로 반영됩니다. 폴더 태깅, 이름 필터링, 사용자 정의 파일 클래스 등 다양한 기능을 제공합니다. 또한 설치가 필요 없는 포터블 프로그램이라는 장점이 있습니다.\n\n\n▶프리웨어 - 개인/기업\n▶Windows 10/11 \n▶무료 다운로드 ◀\n\n \nSpaceSniffer, find lost disk space the easy way.\nBrief product description Latest release is 1.3.0.2 SpaceSniffer is a freeWare (donations are welcome) and portable tool application that lets you understand how folders and files are structured on your disks. By using a Treemap visualization layout, you h\nwww.uderzo.it\n\n \n \n \n \n \n4. Ultimaker Cura (3D 프린팅 소프트웨어)\n\n 세계적으로 인기 있는 오픈 소스 3D 프린팅 소프트웨어입니다. 초보자부터 전문가까지 모든 사용자를 위한 다양한 기능을 제공하며, 강력한 슬라이싱 엔진을 통해 3D 모델을 프린팅 가능한 G-코드로 변환합니다. \n \n사용자 친화적인 인터페이스와 400개 이상의 설정 옵션을 제공하여 사용자가 원하는 대로 프린팅을 조정할 수 있습니다. CAD 소프트웨어와의 통합, 다양한 파일 형식 지원, 플러그인을 통한 기능 확장 등이 가능합니다. 또한 정기적인 업데이트를 통해 지속적으로 개선되며, 무료로 사용할 수 있는 장점이 있습니다.\n\n\n▶프리웨어 - 개인\n▶Windows 10/11\n▶무료 다운로드 ◀\n\n \nUltiMaker Cura\nUltiMaker Cura는 수백만 명의 사용자가 신뢰하는 무료이며 사용하기 쉬운 3D 프린팅 소프트웨어입니다. 최상의 슬라이싱 및 프린팅 결과를 위해 400개 이상의 설정으로 3D 모델을 미세 조정하세요.\nultimaker.com\n\n \n \n \n \n \n5. CopyQ (클립보드 히스토리를 관리)\n  클립보드 히스토리를 관리하고 조작할 수 있는 강력한 도구입니다. 시스템 트레이에 상주하며, 최근 복사한 텍스트나 이미지를 쉽게 확인하고 붙여넣을 수 있습니다. 사용자는 클립보드 항목을 편집하고, 정렬하며, 탭으로 구성할 수 있고, 암호화나 자동 처리 같은 고급 기능도 제공합니다. \n \n38개의 단축키와 다양한 설정 옵션을 통해 높은 수준의 사용자 정의가 가능합니다. 그러나 복잡한 인터페이스와 부족한 문서화로 인해 초보자에게는 어려울 수 있으며, Windows 환경에 최적화되지 않은 면이 있습니다.\n\n\n▶프리웨어 - 개인/기업 (오픈소스)\n▶Windows 10/11\n▶무료 다운로드 ◀\n\n \nCopyQ\nDownload CopyQ for free. Clipboard manager with advanced features. CopyQ is advanced clipboard manager with searchable and editable history with support for image formats, command line control and more.\nsourceforge.net",
        "guid": "http://muzbox.tistory.com/483454",
        "categories": [
          "NEWS/프리웨어 뉴스",
          "3d 프린팅 프로그램",
          "공개자료싷",
          "기업무료",
          "디스크 사용 공간 관리",
          "배경화면",
          "추천프로그램",
          "클립보드 관리",
          "프로그래밍",
          "프리웨어"
        ],
        "isoDate": "2024-08-07T03:11:08.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": []
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "khris'log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "golang - Go에서 text/template 을 사용하여 문서 만들기",
        "link": "https://jacking75.github.io/go_20240806/",
        "pubDate": "Tue, 06 Aug 2024 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vT0sm3PW19IAPBwHeP7zCbUh9HGHn6TisJC3lQZIORISgNF3tEGv1HKR8rNvWJ7x4sW-noX-y_AH31W/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/go_20240806/",
        "isoDate": "2024-08-05T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "수비수 개발자",
        "link": "https://jeho.page/essay/2024/08/08/defense-fun.html",
        "pubDate": "2024-08-07T18:14:00.000Z",
        "author": "김재호",
        "content": "<p>누구나 축구할 때 공격을 하고 싶어 합니다.<br />\n제일 재밌으니까.<br />\n모든 스포트라이트를 받으니까.<br />\n골을 넣는 것만큼 짜릿한 게 없으니까.</p>\n\n<p>카카오에 처음 입사했을 때 무슨 일을 하고 싶냐고 물어봐서 카톡 서버를 하겠다고 했습니다.<br />\n가장 핵심 서비스니까.<br />\n가장 중요한 일을 해서 내가 스포트라이트를 다 받아야지.</p>\n\n<p>어려운 일 투성이라 적응하는 데 시간이 걸렸습니다.<br />\n6개월 정도 잠 못 자고 고생한 후에야 맘이 좀 편안해졌던 기억이 납니다.<br />\n그제야 돌아볼 여유가 생겼습니다.</p>\n\n<p>찾아오는 사람들이 항상 많았습니다.<br />\n어떤 날은 두세 팀이 동시에 찾아와서 줄 서서 기다리며 얘기하기도 했습니다.<br />\n핵심적인 팀에서 일하고 있는 건 분명했는데…<br />\n실제로 하고 있는 일은 짜친 일 투성이였습니다.</p>\n\n<p>서버 교체하기.<br />\n어드민 만들기.<br />\n스팸 찾아내서 처리하기.<br />\n카톡 더보기에 배너 달아주기.<br />\n이런 Api 만들어 줄 수 있냐는 상담해 주기.<br />\n클라이언트의 버그 등으로 돌발 상황이 생겼을 때 어떻게든 서버에서 먼저 해결해주기.<br />\n그리고 끝이 없는 고객 문의와 장애 처리.</p>\n\n<p>아, 이런 일하려고 지원한 게 아니었는데.<br />\n이래서 신기능 개발은 언제 해?<br />\n신규 기능을 만들기 보다 서비스를 지키기 위해 더 많은 힘을 쏟았습니다.<br />\n이거 공격수가 아니라 완전히 수비수잖아?</p>\n\n<p>이렇게 몇 년 하다가 공격수를 하겠다고 말했습니다.<br />\n나도 신규 서비스 만들고 싶다구!<br />\n그리고 카카오 플레이스를 만들었습니다.<br />\n대차게 말아 먹었습니다.<br />\n풀타임 출전, 0골.</p>\n\n<p>수비가 얼마나 가치 있는 일이고 중요한지는 나중에 알게 되었습니다.<br />\n든든한 수비수들이 있어서 공격도 마음껏 할 수 있는 거라는걸.<br />\n공격수가 골을 못 넣어도 좋은 수비 덕분에 다음 경기를 계속 해나갈 수 있다는걸.</p>\n\n<p>중요한 일을 하고 싶다는 마음이야 당연한 것이지만…<br />\n공격수가 가장 중요한 것이라는 생각은 잘못된 것이었습니다.</p>\n\n<p>회사에서도 서비스를 만들어 나가는 사람들과 지켜 내는 사람들이 있습니다.<br />\n레거시를 지켜내는 사람들은 좀처럼 스포트라이트를 받지 못합니다. 백업하는 존재로 인식될 뿐.<br />\n다행히도 최근에 김민재라는 국가대표 수비수를 보며 자란 아이들은 축구할 때 수비수를 하고 싶다는 말을 한답니다.<br />\n지켜내는 사람들이 지금보다 나은 대우를 받고 멋진 모습을 보여 주면 새로 들어온 사람들도 레거시를 다루는 일을 기꺼이 하려 하지 않을까?</p>\n\n<p>다시 회사에 간다면 수비수를 하더라도 이제는 즐기며 할 수 있을 것 같습니다.<br />\n가치 있고 중요한 일을 하는 거니까.<br />\n그리고 무엇보다… 잘 생각해 보면 이 일도 참 재밌거든요.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2022/10/16/kakaotalk-server-development.html\">카카오톡 서버 개발의 추억</a></li>\n  <li><a href=\"https://brunch.co.kr/@buildingking/117\">사용자 10만 명의 서비스를 만들기</a></li>\n  <li><a href=\"https://brunch.co.kr/@buildingking/47\">절대 포기하지 않는 사람</a></li>\n</ul>",
        "contentSnippet": "누구나 축구할 때 공격을 하고 싶어 합니다.\n카카오에 처음 입사했을 때 무슨 일을 하고 싶냐고 물어봐서 카톡 서버를 하겠다고 했습니다.\n어려운 일 투성이라 적응하는 데 시간이 걸렸습니다.\n찾아오는 사람들이 항상 많았습니다.\n서버 교체하기.\n아, 이런 일하려고 지원한 게 아니었는데.\n이렇게 몇 년 하다가 공격수를 하겠다고 말했습니다.\n수비가 얼마나 가치 있는 일이고 중요한지는 나중에 알게 되었습니다.\n중요한 일을 하고 싶다는 마음이야 당연한 것이지만…\n회사에서도 서비스를 만들어 나가는 사람들과 지켜 내는 사람들이 있습니다.\n다시 회사에 간다면 수비수를 하더라도 이제는 즐기며 할 수 있을 것 같습니다.\n\n함께 읽으면 좋은 글:\n카카오톡 서버 개발의 추억\n사용자 10만 명의 서비스를 만들기\n절대 포기하지 않는 사람",
        "summary": "누구나 축구할 때 공격을 하고 싶어 합니다. 제일 재밌으니까. 모든 스포트라이트를 받으니까. 골을 넣는 것만큼 짜릿한 게 없으니까.",
        "id": "https://jeho.page/essay/2024/08/08/defense-fun",
        "isoDate": "2024-08-07T18:14:00.000Z"
      },
      {
        "title": "주말 출근",
        "link": "https://jeho.page/essay/2024/08/04/weekend-work.html",
        "pubDate": "2024-08-04T11:41:00.000Z",
        "author": "김재호",
        "content": "<p>신입사원 때.<br />\n주말 출근하는 걸 참 좋아했습니다.<br />\n토요일, 일요일엔 느즈막이 일어나서 회사로 출근했습니다.<br />\n회사 앞 맥도날드에서 햄버거를 하나 사서 들어가는 게 저의 행복이었습니다.</p>\n\n<p>한 3년 정도 그렇게 한 것 같습니다.</p>\n\n<p>코딩은 거의 안 했습니다.<br />\n회사 일을 하러 간 건 아니었으니까.</p>\n\n<p>아무도 없는 사무실에서 책상 위에 두 다리를 올리고 책을 읽고.<br />\n나중에 보려고 저장해 놨던 블로그들도 읽어보고.<br />\n웹서핑도 하고.<br />\n책상 앞에 앉아 있으면 마음이 그렇게 편안했습니다.</p>\n\n<p>가족들이 처가 댁에 가서 오랜만에 혼자 있는 시간을 가졌습니다.<br />\n뭘 하고 지내면 좋을까 하다가 사무실에 출근하기로 했습니다.<br />\n정말 오랜만에 토요일 일요일을 혼자 사무실에서 보냈습니다.<br />\n그때랑 똑같이 편안하고 좋습니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2022/08/29/feel-comfortable.html\">언제쯤이면 편해질 수 있을까요?</a></li>\n  <li><a href=\"/essay/2023/08/01/summer-vacation.html\">여름 휴가는 회사가 최고지</a></li>\n</ul>",
        "contentSnippet": "신입사원 때.\n한 3년 정도 그렇게 한 것 같습니다.\n코딩은 거의 안 했습니다.\n아무도 없는 사무실에서 책상 위에 두 다리를 올리고 책을 읽고.\n가족들이 처가 댁에 가서 오랜만에 혼자 있는 시간을 가졌습니다.\n\n함께 읽으면 좋은 글:\n언제쯤이면 편해질 수 있을까요?\n여름 휴가는 회사가 최고지",
        "summary": "신입사원 때. 주말 출근하는 걸 참 좋아했습니다. 토요일, 일요일엔 느즈막이 일어나서 회사로 출근했습니다. 회사 앞 맥도날드에서 햄버거를 하나 사서 들어가는 게 저의 행복이었습니다.",
        "id": "https://jeho.page/essay/2024/08/04/weekend-work",
        "isoDate": "2024-08-04T11:41:00.000Z"
      },
      {
        "title": "휴가 기간엔 사무실이 최고",
        "link": "https://jeho.page/essay/2024/08/03/library-vacation.html",
        "pubDate": "2024-08-03T06:18:00.000Z",
        "author": "김재호",
        "content": "<p>어릴 적부터 이상했습니다.<br />\n왜 사람들은 가장 더울 때 휴가를 갈까?<br />\n숨도 턱턱 막힐 정도로 더운데.<br />\n게다가 비싼 웃돈까지 주고.</p>\n\n<p>오래전 에어컨도 없던 시절,<br />\n일도 못할 정도로 더우니 차라리 (강제로) 휴가나 가라고 한 것이 시작 아니었을까?</p>\n\n<p>이렇게 더운 날 휴가를 가는 게 좋아서 가는 것만은 아닐 겁니다.<br />\n아이들이 방학을 해서.<br />\n회사에서 휴가를 강요해서.</p>\n\n<p>요즘엔 실내가 더 시원해서 한여름엔 회사나 학교에 가는 게 더 좋은 것 같습니다.<br />\n다들 휴가를 떠난 조용한 사무실에서 일하는 것을 좋아했습니다.<br />\n1인 개발자로 지내는 지금도 여전히 그렇습니다.<br />\n35도의 더위에 시원한 사무실에 와서 앉아 있으니 천국이 여기인 것 같습니다.</p>\n\n<p>남들 따라 하지 않고 살게 되면서 좋은 점은 내가 가고 싶을 때 휴가를 갈 수 있다는 것.<br />\n4월과 5월 그리고 9월과 10월.<br />\n국내 여행은 이때 주로 갑니다.<br />\n천천히 길을 걷기만 해도 행복하다는 느낌이 드는 계절.<br />\n이런 계절이야말로 ‘성수기’ 요금을 받아야 하는 건데.</p>\n\n<p>뭔가 거꾸로 됐습니다.<br />\n<a href=\"https://brunch.co.kr/@buildingking/87\">거꾸로 사는</a> 저에게는 좋은 일입니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2023/08/01/summer-vacation.html\">여름 휴가는 회사가 최고지</a></li>\n  <li><a href=\"https://brunch.co.kr/@buildingking/87\">남들과 반대로 살기</a></li>\n</ul>",
        "contentSnippet": "어릴 적부터 이상했습니다.\n오래전 에어컨도 없던 시절,\n이렇게 더운 날 휴가를 가는 게 좋아서 가는 것만은 아닐 겁니다.\n요즘엔 실내가 더 시원해서 한여름엔 회사나 학교에 가는 게 더 좋은 것 같습니다.\n남들 따라 하지 않고 살게 되면서 좋은 점은 내가 가고 싶을 때 휴가를 갈 수 있다는 것.\n뭔가 거꾸로 됐습니다.\n거꾸로 사는 저에게는 좋은 일입니다.\n\n함께 읽으면 좋은 글:\n여름 휴가는 회사가 최고지\n남들과 반대로 살기",
        "summary": "어릴 적부터 이상했습니다. 왜 사람들은 가장 더울 때 휴가를 갈까? 숨도 턱턱 막힐 정도로 더운데. 게다가 비싼 웃돈까지 주고.",
        "id": "https://jeho.page/essay/2024/08/03/library-vacation",
        "isoDate": "2024-08-03T06:18:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "자바스크립트는 왜이케 복잡해졌나",
        "link": "http://serverdown.tistory.com/789",
        "pubDate": "Wed, 7 Aug 2024 21:25:05 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/789#entry789comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=Mah0QakFaJk&amp;t=274s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=Mah0QakFaJk&amp;t=274s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Mah0QakFaJk\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/c2W6Yu/hyWKwVpIcg/941VFXIP67moclL3INOwI0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"자바스크립트 모듈의 안타깝고(?) 치열한 역사\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Mah0QakFaJk\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">용량 줄이고 이름이 겹쳐서 이렇게 돼었음</p>\n<p data-ke-size=\"size16\">역사에 대한 좋은 내용이라 가져와봤습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=Mah0QakFaJk&t=274s\n\n\n\n용량 줄이고 이름이 겹쳐서 이렇게 돼었음\n역사에 대한 좋은 내용이라 가져와봤습니다.",
        "guid": "http://serverdown.tistory.com/789",
        "categories": [
          "유튜브",
          "JavaScript"
        ],
        "isoDate": "2024-08-07T12:25:05.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "유니티 Building Library\\Bee\\artifacts\\Android\\fy9m9\\libil2cpp.so failed with output: ld.lld: error: undefined symbol: ~~ 오류",
        "link": "http://serverdown.tistory.com/788",
        "pubDate": "Wed, 7 Aug 2024 14:57:09 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/788#entry788comment",
        "content": "<p data-ke-size=\"size16\">본문:&nbsp;</p>\n<p data-ke-size=\"size16\"><a href=\"https://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123</a></p>\n<figure id=\"og_1723009811534\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"unity 빌드 오류 해결기 / Building Library\\Bee\\artifacts\\Android\\fy9m9\\libil2cpp.so failed with output:\nld.lld: error: und\" data-og-description=\"안드로이드 빌드 해보까 하니 바로 에러가나며 빌드가 안되었다.기존엔 빌드를 mono 로 하고 있었는데 il2cpp 로 고치니 문제 생겼습니다.에러메세지를 대충보고 구글검색을 시작했으나 NDK 버그라\" data-og-host=\"velog.io\" data-og-source-url=\"https://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\" data-og-url=\"https://velog.io/@thisisone/unity-빌드-오류-해결기-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\" data-og-image=\"https://scrap.kakaocdn.net/dn/ctnIcO/hyWKJAlJjV/pTnLBhf8OeUazBdYjYdB1k/img.png?width=712&amp;height=193&amp;face=0_0_712_193,https://scrap.kakaocdn.net/dn/gap9j/hyWKG4Heub/ieJdkAKFhg6rMv1tkfICo0/img.png?width=712&amp;height=193&amp;face=0_0_712_193,https://scrap.kakaocdn.net/dn/byxlXi/hyWKw8RORo/IZwUT6Mk5x64Dp6AhcJ0uk/img.png?width=482&amp;height=492&amp;face=0_0_482_492\"><a href=\"https://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/ctnIcO/hyWKJAlJjV/pTnLBhf8OeUazBdYjYdB1k/img.png?width=712&amp;height=193&amp;face=0_0_712_193,https://scrap.kakaocdn.net/dn/gap9j/hyWKG4Heub/ieJdkAKFhg6rMv1tkfICo0/img.png?width=712&amp;height=193&amp;face=0_0_712_193,https://scrap.kakaocdn.net/dn/byxlXi/hyWKw8RORo/IZwUT6Mk5x64Dp6AhcJ0uk/img.png?width=482&amp;height=492&amp;face=0_0_482_492');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">unity 빌드 오류 해결기 / Building Library\\Bee\\artifacts\\Android\\fy9m9\\libil2cpp.so failed with output: ld.lld: error: und</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">안드로이드 빌드 해보까 하니 바로 에러가나며 빌드가 안되었다.기존엔 빌드를 mono 로 하고 있었는데 il2cpp 로 고치니 문제 생겼습니다.에러메세지를 대충보고 구글검색을 시작했으나 NDK 버그라</p>\n<p class=\"og-host\" data-ke-size=\"size16\">velog.io</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">간단히 말에서</p>\n<p data-ke-size=\"size16\">&nbsp;undefined symbol: ~~~&nbsp;</p>\n<p data-ke-size=\"size16\">이부분이 중요한 ~~~ 가 함수명이고 외부에 본체가 있는 함수를 의미합니다</p>\n<p data-ke-size=\"size16\">보안문제로 애플과 구글은 li2cpp 방식으로 전환하지 한참되었고 이것은</p>\n<p data-ke-size=\"size16\">외부에 있는 라이브러리를 호출하는 것을 금지합니다.</p>\n<p data-ke-size=\"size16\">빌드할때 모두 포함시켜 유저에게 전달 되었을땐 내용을 바꿔치지 못하게 하는 용도인거 같습니다.</p>\n<p data-ke-size=\"size16\">빌드시간이 많이 느려지는군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<pre class=\"cs\" style=\"background-color: #000000; color: #000000; text-align: left;\"><code>[DllImport(\"__Internal\")]\n\tprivate static extern void jslib_hello();</code></pre>\n<p data-ke-size=\"size16\">저는 이런식으로 선언된 함수를 암드로이드 + li2cpp 로 빌드하려고할때 실패했구요</p>\n<p data-ke-size=\"size16\">위함수는 webgl 에서 사용하는 코드인데 안드로이드에서도 남아있었군요</p>\n<p data-ke-size=\"size16\">#if 를 이용해 주석처리해줬습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">잘못된 방향으로 검색하면 안드로이드 NDK 문제나 버전 문제등이 나오는데&nbsp;</p>\n<p data-ke-size=\"size16\">이러면 시간이 많이 낭비될 수 있으니&nbsp;</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">&nbsp;undefined symbol:&nbsp;</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">뒤에 나오는 함수 이름이 내소스에 존재하는지 확인해보시기 바랍니다.</span></p>",
        "contentSnippet": "본문: \nhttps://velog.io/@thisisone/unity-%EB%B9%8C%EB%93%9C-%EC%98%A4%EB%A5%98-%ED%95%B4%EA%B2%B0%EA%B8%B0-Building-LibraryBeeartifactsAndroidfy9m9libil2cpp.so-failed-with-outputld.lld-error-undefined-symbol-jslibcallaction-referenced-by-Assembly-CSharp1.cpp9123\n\n \nunity 빌드 오류 해결기 / Building Library\\Bee\\artifacts\\Android\\fy9m9\\libil2cpp.so failed with output: ld.lld: error: und\n안드로이드 빌드 해보까 하니 바로 에러가나며 빌드가 안되었다.기존엔 빌드를 mono 로 하고 있었는데 il2cpp 로 고치니 문제 생겼습니다.에러메세지를 대충보고 구글검색을 시작했으나 NDK 버그라\nvelog.io\n\n \n간단히 말에서\n undefined symbol: ~~~ \n이부분이 중요한 ~~~ 가 함수명이고 외부에 본체가 있는 함수를 의미합니다\n보안문제로 애플과 구글은 li2cpp 방식으로 전환하지 한참되었고 이것은\n외부에 있는 라이브러리를 호출하는 것을 금지합니다.\n빌드할때 모두 포함시켜 유저에게 전달 되었을땐 내용을 바꿔치지 못하게 하는 용도인거 같습니다.\n빌드시간이 많이 느려지는군요\n \n[DllImport(\"__Internal\")]\n\tprivate static extern void jslib_hello();\n저는 이런식으로 선언된 함수를 암드로이드 + li2cpp 로 빌드하려고할때 실패했구요\n위함수는 webgl 에서 사용하는 코드인데 안드로이드에서도 남아있었군요\n#if 를 이용해 주석처리해줬습니다.\n \n잘못된 방향으로 검색하면 안드로이드 NDK 문제나 버전 문제등이 나오는데 \n이러면 시간이 많이 낭비될 수 있으니 \n undefined symbol: \n뒤에 나오는 함수 이름이 내소스에 존재하는지 확인해보시기 바랍니다.",
        "guid": "http://serverdown.tistory.com/788",
        "categories": [
          "프로그래밍/개발메모",
          "li2cpp",
          "unity"
        ],
        "isoDate": "2024-08-07T05:57:09.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "node.js 와 cafe24 smtp 활용해서 자동 메일 보내기 / nodemailer 활용",
        "link": "http://serverdown.tistory.com/787",
        "pubDate": "Wed, 7 Aug 2024 14:49:09 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/787#entry787comment",
        "content": "<p data-ke-size=\"size16\">본문:</p>\n<p data-ke-size=\"size16\"><a href=\"https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0</a></p>\n<figure id=\"og_1723009685218\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"node.js 와 cafe24 smtp 활용해서 자동 메일 보내기 / nodemailer 활용\" data-og-description=\"지난번에 안되서 cnode.js 로 성공했습니다.c다행cafe24 는 낮은 보안 이라 옵션을 좀 넣어야합니다.typescript 로 작업했습니다.js 이용자는 알아서 잘 ...계정엔 아이디@주소 형식의 풀네임이 들어가야\" data-og-host=\"velog.io\" data-og-source-url=\"https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0\" data-og-url=\"https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-로-메일-보내기\" data-og-image=\"https://scrap.kakaocdn.net/dn/bkxOiJ/hyWKHCyFTe/hRY4L5m0Ok6Brr2rCgIuM1/img.png?width=950&amp;height=500&amp;face=0_0_950_500\"><a href=\"https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bkxOiJ/hyWKHCyFTe/hRY4L5m0Ok6Brr2rCgIuM1/img.png?width=950&amp;height=500&amp;face=0_0_950_500');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">node.js 와 cafe24 smtp 활용해서 자동 메일 보내기 / nodemailer 활용</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">지난번에 안되서 cnode.js 로 성공했습니다.c다행cafe24 는 낮은 보안 이라 옵션을 좀 넣어야합니다.typescript 로 작업했습니다.js 이용자는 알아서 잘 ...계정엔 아이디@주소 형식의 풀네임이 들어가야</p>\n<p class=\"og-host\" data-ke-size=\"size16\">velog.io</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">velog 로 옮겨서 거기 링크 남깁니다.</p>\n<p data-ke-size=\"size16\">velog 는 검색이 잘안디ㅗ고</p>\n<p data-ke-size=\"size16\">티스토리는 복붙이 잘안되고 검색은되고</p>\n<p data-ke-size=\"size16\">어질어질합니다.</p>",
        "contentSnippet": "본문:\nhttps://velog.io/@thisisone/cafe24-smtp-node.js-nodemailer-%EB%A1%9C-%EB%A9%94%EC%9D%BC-%EB%B3%B4%EB%82%B4%EA%B8%B0\n\n \nnode.js 와 cafe24 smtp 활용해서 자동 메일 보내기 / nodemailer 활용\n지난번에 안되서 cnode.js 로 성공했습니다.c다행cafe24 는 낮은 보안 이라 옵션을 좀 넣어야합니다.typescript 로 작업했습니다.js 이용자는 알아서 잘 ...계정엔 아이디@주소 형식의 풀네임이 들어가야\nvelog.io\n\n \n \nvelog 로 옮겨서 거기 링크 남깁니다.\nvelog 는 검색이 잘안디ㅗ고\n티스토리는 복붙이 잘안되고 검색은되고\n어질어질합니다.",
        "guid": "http://serverdown.tistory.com/787",
        "categories": [
          "프로그래밍/개발메모",
          "cafe24",
          "Node.js"
        ],
        "isoDate": "2024-08-07T05:49:09.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Hybrid's Notes",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": [
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "행복한 일들은 매일 있다",
        "link": "http://jojoldu.tistory.com/795",
        "pubDate": "Mon, 5 Aug 2024 22:58:03 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "http://jojoldu.tistory.com/795#entry795comment",
        "content": "<p data-ke-size=\"size16\">예전에 곰돌이 푸? 동화에서 봤던 것 같은데,<br />다음의 글귀가 오래 오래 기억에 남았다.</p>\n<p data-ke-size=\"size16\">\"<b>매일 매일 행복할 순 없지만, 행복한 일은 매일 매일 있다</b>.\"</p>\n<p data-ke-size=\"size16\">구내 식당에 내가 좋아하는 메뉴가 나왔을 때,<br />횡단보도에 도착하자마자 신호가 바뀔 때,<br />헬스장에서 내가 좋아하는 노래가 나올 때 등등<br />사소한 행복한 일들이 많다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"1.png\" data-origin-width=\"1084\" data-origin-height=\"1120\"><span data-url=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" data-alt=\"아침 식사가 너무 맛있었던 날\"><img src=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FylXaz%2FbtsIWaYYGIF%2FRFQDtEuGxVXbX54MhU8WE0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"1.png\" data-origin-width=\"1084\" data-origin-height=\"1120\"/></span><figcaption>아침 식사가 너무 맛있었던 날</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">하지만 이런 사소하지만 누가 봐도 좋은 것들이 아니더라도,<br />하루의 대부분은 행복한 일들이다.</p>\n<p data-ke-size=\"size16\">회의가 많은 날은 회의실 이동하느라 많이 걸어 1만보를 채우기 위해 굳이 따로 시간을 낼 필요가 없어서 좋다.<br />일이 많아 늦게 가는 날은 비싼 저녁 식사를 먹을 수 있고, 집까지 택시로 갈 수 있어서 좋다.<br />오전 회의가 늦게 끝나 점심을 늦게 먹는 날은 혼자서 조용히 식사를 하면서 생각을 정리할 수 있어서 좋다.</p>\n<p data-ke-size=\"size16\"><b>행복한 것도 습관이다</b>.<br />작은 것에도 행복한 것을 습관으로 들이지 않으면,<br />큰 돈을 벌어도,<br />높은 지위에 올라도,<br />내가 원하는 어떠한 무언가를 얻는 그러한 아주 큰 쾌락이 와도 그걸 행복으로 만들 수 없다.</p>\n<p data-ke-size=\"size16\">행복한 일은 매일 매일 있다.</p>",
        "contentSnippet": "예전에 곰돌이 푸? 동화에서 봤던 것 같은데,\n다음의 글귀가 오래 오래 기억에 남았다.\n\"매일 매일 행복할 순 없지만, 행복한 일은 매일 매일 있다.\"\n구내 식당에 내가 좋아하는 메뉴가 나왔을 때,\n횡단보도에 도착하자마자 신호가 바뀔 때,\n헬스장에서 내가 좋아하는 노래가 나올 때 등등\n사소한 행복한 일들이 많다.\n아침 식사가 너무 맛있었던 날\n\n\n \n하지만 이런 사소하지만 누가 봐도 좋은 것들이 아니더라도,\n하루의 대부분은 행복한 일들이다.\n회의가 많은 날은 회의실 이동하느라 많이 걸어 1만보를 채우기 위해 굳이 따로 시간을 낼 필요가 없어서 좋다.\n일이 많아 늦게 가는 날은 비싼 저녁 식사를 먹을 수 있고, 집까지 택시로 갈 수 있어서 좋다.\n오전 회의가 늦게 끝나 점심을 늦게 먹는 날은 혼자서 조용히 식사를 하면서 생각을 정리할 수 있어서 좋다.\n행복한 것도 습관이다.\n작은 것에도 행복한 것을 습관으로 들이지 않으면,\n큰 돈을 벌어도,\n높은 지위에 올라도,\n내가 원하는 어떠한 무언가를 얻는 그러한 아주 큰 쾌락이 와도 그걸 행복으로 만들 수 없다.\n행복한 일은 매일 매일 있다.",
        "guid": "http://jojoldu.tistory.com/795",
        "categories": [
          "생각정리",
          "스타트업",
          "인프랩",
          "커리어",
          "회사 생활"
        ],
        "isoDate": "2024-08-05T13:58:03.000Z"
      }
    ]
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "LY의 QA 엔지니어가 생성형 AI를 이용해 품질 활동의 생산성을 높이는 방법",
        "link": "https://techblog.lycorp.co.jp/ko/increase-productivity-of-quality-activities-with-generative-ai",
        "pubDate": "Fri, 02 Aug 2024 02:00:00 GMT",
        "content": "들어가며\n최근 업계에 생성형 AI가 도입되면서 소프트웨어 개발 과정에서 개발 품질을 유지하면서 생산성을 향상시킬 수 있는 새로운 방법을 제공하고 있는데요. 그에 반해 QA의 품질 ...",
        "contentSnippet": "들어가며\n최근 업계에 생성형 AI가 도입되면서 소프트웨어 개발 과정에서 개발 품질을 유지하면서 생산성을 향상시킬 수 있는 새로운 방법을 제공하고 있는데요. 그에 반해 QA의 품질 ...",
        "guid": "https://techblog.lycorp.co.jp/ko/increase-productivity-of-quality-activities-with-generative-ai",
        "isoDate": "2024-08-02T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "이한",
    "category": "개인",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "글로벌 사업의 기본은 영어",
        "link": "https://www.thestartupbible.com/2024/08/the-very-first-requirement-for-any-global-business-is-english.html",
        "pubDate": "Wed, 07 Aug 2024 21:36:00 +0000",
        "content:encodedSnippet": "한국에서도 제대로 작동하고 돈을 버는 제품을 만드는 게 얼마나 어려운지 매일 느끼는 사람의 입장에서 한국 스타트업이 미국 시장에 바로 진출해서 4년 만에 매출을 1,000억 원 이상 하겠다는 회사의 자료를 보면 어쩔 수 없이 희망적이기보단 회의적인 생각이 들 수밖에 없다. 그래도 사업의 방향성이나 팀이 괜찮으면, 이런 팀들은 일단 만나본 후에 내부적으로 검토하는 과정을 거친다.\n얼마 전에 이런 창업팀의 자료를 보다가 세 번째 페이지에서 그냥 PDF를 닫고 만나보지도 않고 pass 하기로 결정했다. 북미 시장에서 승부를 보겠다는 팀이었고, 자료 자체도 모두 영문으로 만들었는데, 자료의 영어 수준이 형편없었다. 어떤 분들은 이런 나의 태도를 이해 못 하고, 그 정도 문법이나 철자는 틀릴 수도 있는데, 뭘 그렇게 까칠하게 구는지 구박하기도 한다. 자료에서 영어 좀 틀렸다고 사업을 못 하는 것도 아닌데 내가 너무 오바한다고 뭐라고 하는 분들도 있다.\n솔직히 나는 다른 사람들보다 남의 영문 자료에서 이런 실수를 잘 발견하는 편이다. 그리고 이런 건 그냥 넘어가도 창업팀과 그 사업을 이해하는데 있어서 전혀 지장이 없기 때문에 굳이 피치 미팅의 흐름을 중간에 끊으면서 지적하지 않아도 된다. 하지만, 그래도 나는 영어에서 문법이나 철자의 실수가 눈에 들어올 때마다 굳이 흐름을 끊고 지적질을 한다. 왜냐하면, 사업을 이해하는 데 지장은 없지만, 미국에서 사업을 하겠다고 하는 이 팀의 자세와 태도에는 이런 사소한 실수가 매우 큰 문제라고 생각하기 때문이다.\n영어권에서 사업을 하고 싶다면, 가장 기본 중 기본은 영어라는 그 언어 자체이다. 영어를 하는 사람들이 돈을 내고 사용하는 서비스를 만들고 싶다면, 그 누가 보더라도 이 제품은 비영어권 창업가들이 만들었다는 티가 전혀 나면 안 된다. 그런데 내가 만난 미국 시장을 공략하고 싶어 하는 많은 한인 창업가들이 만든 회사의 자료나 제품을 보면, 엉터리 영어가 너무 많다. 이 자료를 미국 VC들이 봤을 때 과연 어떤 생각을 할지, 이 창업가들은 한 번이라도 생각을 해봤을까. 엉성한 영어로 만들어진 이 제품에 미국인들이 과연 돈을 낼지 한 번이라도 생각을 해봤을까. 이런 생각을 해봤는데도 영어가 이 수준이면 팀의 역량에 문제가 있다고 생각하고, 이런 생각을 한 번도 안 해 봤다면 이 팀은 정말 생각이 없는 것 같다.\n실은, 요샌 AI가 발달해서 번역의 수준은 좋아졌고, 특히나 문법적으로 틀린 영어는 많이 줄어들었다. 하지만, 영어라는 게 단순히 단어만을 번역해서 완성되는 게 아니라 이 단어들이 어떻게 문장을 만들고, 이 문장들이 어떤 맥락에서 사용되는지 잘 파악해야지만 진정한 영어가 완성되는데, 아직 AI는 이걸 완벽하게 하기엔 부족하다고 생각한다. 단순하게 기계로 번역한 문장을 보면 단어들은 잘 번역됐지만, 미국에서 실제로 사용하는 일상적인 언어라고 하기엔 굉장히 어색한 게 많다.\n이 현상을 거꾸로 한번 생각해 보자. 유럽인들이 한국 시장을 타겟으로 하는 서비스를 만들었는데, “이 응용 제품을 받아주세요.”라는 한국어를 보면 누구나 다 이건 이상한 번역이라는 걸 알 것이다. 각각의 단어는 잘 번역됐지만, 한국에서 실제로 이런 말은 사용하지 않는다. “이 앱을 설치해 주세요”가 훨씬 더 컨텍스트에 맞는 우리말이다. 전에 한 회사의 한글 자료를 봤는데 어떤 현상이 바이럴하게 퍼진다는 문장을 단어 그대로 번역해서 “바이러스같이 퍼진다”라고 표기되어 있었다. 물론, 의미상으론 번역이 틀린 건 아니지만, 한국에서도 그냥 ‘바이럴’이라는 영어를 그대로 사용하는데, 이걸 모르고 번역했기 때문에 이런 결과가 나온 것이다. 이 문장을 보면, 이 자료는 한국인이 안 만들었다는 걸 금방 알아차릴 것이다.\n그래서 미국 시장을 대상으로 사업을 하고 싶다면, 일단 영어부터 제대로 하자.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/08/the-very-first-requirement-for-any-global-business-is-english.html#respond",
        "content": "한국에서도 제대로 작동하고 돈을 버는 제품을 만드는 게 얼마나 어려운지 매일 느끼는 사람의 입장에서 한국 스타트업이 미국 시장에 바로 진출해서 4년 만에 매출을 1,000억 원 이상 하겠다는 회사의 자료를 보면 어쩔 수 없이 희망적이기보단 회의적인 생각이 들 수밖에 없다. 그래도 사업의 방향성이나 팀이 괜찮으면, 이런 팀들은 일단 만나본 후에 내부적으로 검토하는 과정을 거친다. 얼마 전에(...)",
        "contentSnippet": "한국에서도 제대로 작동하고 돈을 버는 제품을 만드는 게 얼마나 어려운지 매일 느끼는 사람의 입장에서 한국 스타트업이 미국 시장에 바로 진출해서 4년 만에 매출을 1,000억 원 이상 하겠다는 회사의 자료를 보면 어쩔 수 없이 희망적이기보단 회의적인 생각이 들 수밖에 없다. 그래도 사업의 방향성이나 팀이 괜찮으면, 이런 팀들은 일단 만나본 후에 내부적으로 검토하는 과정을 거친다. 얼마 전에(...)",
        "guid": "https://www.thestartupbible.com/?p=9176",
        "categories": [
          "Uncategorized",
          "FoundersAtWork",
          "general",
          "global",
          "Strong"
        ],
        "isoDate": "2024-08-07T21:36:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "평판 만들기",
        "link": "https://www.thestartupbible.com/2024/08/on-your-reputation-preceding-you.html",
        "pubDate": "Sun, 04 Aug 2024 21:29:00 +0000",
        "content:encodedSnippet": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기 때문에, 그냥 미국에 투자하면 돈을 어느 정도 벌 수 있어서, 굳이 우리같이 한국 시장에 투자하는 펀드에 투자할 이유가 매우 강하진 않은 것 같다.\n그래도 우린 돈을 모아야 하기 때문에, 나는 정기적으로 해외 투자자들을 만나서 열심히 영업하고 있는데, 그동안 스트롱의 성적이 그렇게 나쁘지 않음에도 투자자들을 시원하게 설득하는 게 매우 어렵다. 그래서 한 2~3주 외국 나갔다 다시 한국 들어올 때 빈손이면(=돈을 한 푼도 못 받음) 힘이 많이 빠지긴 한다.\n하지만, 최근에 내가 외국 투자자들과 이야기를 해보면, 당장 돈을 주진 않지만, 아주 기분 좋은 피드백을 주는 분들이 있었다. 처음 만나는 어떤 투자자가 악수하면서 “우리 이미 Strong에 대해서 들어봤어. Your reputation precedes you.”라는 말을 하는데, 먼 땅에서 처음 만나는 사람이 이런 말을 하는 걸 들으니까, 기분이 묘하게 좋긴 했다. 실은 이 말은 부정적으로 사용될 수도 있고, 긍정적으로 사용될 수도 있는데, 내 앞에서 이 말을 직접 했으니까 아마도 긍정적인 의미였을 거로 생각한다. 우리말로 번역하면 “스트롱의 평판은 익히 들었기 때문에 너희 믿을 만 한 거 알고 있어.” 정도의 의미일 것 같다.\n아마도 이 말은 우리가 투자를 엄청나게 잘해서라기 보단, 10년 넘게 크게 욕먹거나 나쁜 짓하지 않고 꾸준히 투자하고 있어서 들었던 것 같다. 평판이라는 건 하루아침에 만들어지지 않고, 오랜 시간에 걸쳐서 조금씩 만들어지는 것이고, 이 또한 내가 자주 강조하는 복리의 힘이 제대로 작용하는, 정량화하기 힘들지만, 우리 같은 VC뿐만이 아니라, 모든 사람들에게 어쩌면 가장 중요한 인생/직장에서의 KPI가 아닐까 싶다.\n투자하다 보면 성적표가 계속 왔다 갔다 한다. 누구나 다 아는 유니콘 회사에 투자해서 돈을 벌 수도 있고, 누구나 다 아는 대박 망하는 회사에 투자해서 돈을 잃을 수도 있다. 중요한 건, 부침을 반복하면서도 자기만의 철학으로 투자를 꾸준히 해야지만, 투자자로서의 평판을 만들 수 있다. 그냥 계속 한 우물을 꾸준히 파다 보면, 그 분야에서 오랫동안 사업을 할 수 있고, 오랫동안 사업을 하면서 살아남으면 항상 좋은 기회가 생기는 걸 나는 몇 번 경험했다. 그리고 이렇게 오랫동안 좋은 사업을 하면 평판이라는 게 조금씩 만들어진다.\n이건 우리 같은 투자자에게만 해당하는 게 아니라, 우리가 투자하는 창업가들에게도 그대로 적용된다. 우리 주변에는 유행만 쫓아가면서 3년 만에 돈 좀 벌어서 엑싯하고 싶어 하는 창업가들도 너무나 많고, 이 중 똑똑하고 사업 잘하는 분들도 많다. 하지만, 스트롱이 투자하고 싶어 하는 창업가들은 최소 10년은 바라보면서 꾸준히 사업 하는 사람들이다. 그래서 나는 유행에 너무 민감해서 한 우물을 못 파는 창업가들을 그다지 선호하지 않는다.(물론, 우리가 투자한 창업가들도 이런 분들이 있다). 이들은 대부분 쉽게 사업을 하고 싶어 하고, 유행을 좇고, 피보팅을 끊임없이 한다. 물론, 이렇게 해서 잘 되는 경우도 가끔 봤지만, 대부분 그냥 맥없이 망한다. 그리고 이런 분들은 평판이란 것 자체가 안 만들어진다.\n한국에서도 이런 말을 요새 들었는데, 미국에서도 이제 창업가들이 일만 하지 말고 적극적으로 본인을 홍보하고, 소셜미디어에서 하루 종일 떠들어야 하고, 여기저기 강연도 다니고, 다른 회사에 개인 투자도 하고, 딴짓도 많이 해야지 사업도 잘 한다는 이야기를 들었다. 뭐, 누구나 다 자기만의 생각이 있지만, 나는 이 말에 별로 동의할 수 없다. 내가 아는 좋은 사업을 만든 모든 창업가는 절대로 딴짓하는 사람들이 없기 때문이고, 사업가로서의 평판은 본인의 사업으로 오랜 시간에 걸쳐서 만들어지기 때문이다.\n제품과 고객에게 집착하고, 좋은 사람들을 회사로 데려오는데 시간을 쓰는 대신, 행사만 다니고 자기 홍보만 하면 초반에는 바이럴을 만들고, 어쩌면 펀딩은 크게 받을 수도 있겠지만, 실제로 10년 이상 가는 사업을 만드는 창업가는 없었던 것 같다. 창업가나 VC나 펀딩을 크게 받거나 큰 펀드를 만들면 단기적으론 유명해지겠지만, 장기적인 평판을 만드는 건 좋은 사업과 좋은 투자이고, 이건 인내심이 없으면 불가능하다.\n아무리 복싱 연습을 열심히 해도, 실제 링 위로 올라가는 건 정말 어렵다. 하지만, 링 위에 올라가는 것도 어렵지만, 더 어려운 건 링 위에서 12라운드 동안 계속 버티면서 싸우는 거다. 평판은 이렇게 만들어지는 것이다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/08/on-your-reputation-preceding-you.html#comments",
        "content": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기(...)",
        "contentSnippet": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기(...)",
        "guid": "https://www.thestartupbible.com/?p=9171",
        "categories": [
          "Uncategorized",
          "FoundersAtWork",
          "korea",
          "reputation",
          "sports",
          "Strong",
          "vc",
          "스타트업 바이블 QA"
        ],
        "isoDate": "2024-08-04T21:29:00.000Z"
      }
    ]
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": [
      {
        "creator": "Sonu Jung",
        "title": "프로덕트 디자이너 in 플랫폼 조직",
        "link": "https://sonu.hashnode.dev/product-designer-in-platform-organization",
        "pubDate": "Sun, 04 Aug 2024 08:40:38 GMT",
        "dc:creator": "Sonu Jung",
        "content": "지난 2021년 프로덕트 디자인 in 스타트업이란 글을 통해 프로덕트 디자인이란 개념이 IT업계 내 디자이너의 역할을 어떻게 달리 정의하며, 기업 성장 단계에 따라 그 역할이 어떻게 변화하는지 다룬 바 있습니다.\n이번엔 기업의 성장 과정 중 필연적으로 마주하는 플랫폼 조직에 대한 이해와 그 안에서 디자이너가 어떤 일들을 하게 되는지에 대한 생각을 기록해 보려 합니다.\n\n플랫폼 조직?\n플랫폼 조직은 전통적인 기능 조직 중심의 소프트웨어 개발 환경...",
        "contentSnippet": "지난 2021년 프로덕트 디자인 in 스타트업이란 글을 통해 프로덕트 디자인이란 개념이 IT업계 내 디자이너의 역할을 어떻게 달리 정의하며, 기업 성장 단계에 따라 그 역할이 어떻게 변화하는지 다룬 바 있습니다.\n이번엔 기업의 성장 과정 중 필연적으로 마주하는 플랫폼 조직에 대한 이해와 그 안에서 디자이너가 어떤 일들을 하게 되는지에 대한 생각을 기록해 보려 합니다.\n\n플랫폼 조직?\n플랫폼 조직은 전통적인 기능 조직 중심의 소프트웨어 개발 환경...",
        "guid": "https://sonu.hashnode.dev/product-designer-in-platform-organization",
        "categories": [
          "Product Design",
          "platform",
          "Platform Engineering "
        ],
        "isoDate": "2024-08-04T08:40:38.000Z"
      }
    ]
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "4세대 실손보험 보험료 최대 5% 할인받을 수 있어요",
        "link": "https://blog.toss.im/article/money-policies-21",
        "pubDate": "Thu, 08 Aug 2024 07:50:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}7월 1일부터 직전년도에 비급여 보험금을 수령하지 않은 4세대 실손의료보험* 가입자는 보험료를 할인받을 수 있어요.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*4세대는 2021년 7월 이후의 실손보험. 기존 실손보험에 비해 보험료가 낮아진 대신, 비급여 진료를 특약 보장으로 분리했어요. 비급여 보험금을 많이 받으면 보험료가 오르고, 비급여 보험료가 100만 원 미만이라면 보험료가 유지 및 할인되는 것이 특징이에요.\n금융위원회는 보험료 갱신 때 직전년도 의료 이용량과 연계해 보험료를 할인해 주고 있어요. 4세대 실손의료보험의 비급여보장 특약 가입자가 대상이에요.\n4세대 실손의료보험은 가입자 간 보험료 부담의 형평성을 높이기 위해 상품구조를 급여와 비급여로 분류하고 각각의 손해율에 따라 보험료를 해마다 조정하는데요. 보험료를 일률적으로 조정하는 급여와 달리 비급여는 보험금과 연계해 보험료를 차등 적용해요. 2021년 7월 출시한 이후 3년 동안 유예기간을 거쳐 이달 1일 이후 보험료 갱신 시점부터 보험료 차등 적용이 시행되고 있답니다.\n보험료 할인 여부는 보험료 갱신 전 1년간 수령한 비급여 보험금에 따라 5개 구간으로 등급을 나눠 결정해요. 가령 보험금을 전혀 받지 않았다면 1등급, 100만 원 미만으로 받았다면 2등급이에요. 100만 원 이상 보험금을 수령했다면 각각 3~5등급에 해당돼요. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}1등급의 경우 직전년도보다 보험료를 5%가량(잠정) 할인받을 수 있어요. 2등급이라면 보험료가 그대로 유지돼요.\n물론 보험료가 더 늘어날 수도 있어요. 비급여 보험금 수령액이 3~5등급에 해당하는 경우인데요. 할증률은 3등급 100%, 4등급 200%, 5등급 300%예요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n금융위원회는 보험료 할인 혜택을 받거나 유지되는 가입자가 각각 62.1%, 36.6%로 보험료가 늘지 않는 가입자가 98.7%에 달할 것으로 보고 있어요. 이때 의료취약계층 보호를 위해 산정특례대상질환으로 인한 의료비, 장기요양등급 1·2등급 판정자의 의료비는 할인·할증 대상에서 제외돼요.\n비급여 보험료 할인·할증 등급은 사전 안내를 위해 보험계약일이 속한 날의 3개월 전 말일부터 1년간 지급받은 보험료를 기준으로 계산하며 이 등급은 1년 동안만 유지돼요. 그 후에는 해마다 원점에서 등급을 재산정할 방침이에요.\n내 보험료 할인 단계를 알아보고 싶다면, 개별 보험회사의 홈페이지 또는 모바일 애플리케이션을 이용하면 돼요. 보험료 할인뿐만 아니라 할증 단계, 다음 보험료 할증 단계까지 남은 비급여 보험금, 비급여 보험금 수령액, 할인·할증 제외 신청을 위한 필요서류 등을 안내받을 수 있어요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}Edit 이지영 Graphic 조수희",
        "content": "나도 할인받을 수 있는지 확인해 보세요.",
        "contentSnippet": "나도 할인받을 수 있는지 확인해 보세요.",
        "guid": "https://blog.toss.im/article/money-policies-21",
        "isoDate": "2024-08-08T07:50:00.000Z"
      },
      {
        "title": "반복되는 부동산 사이클 흐름을 파악하면 집을 사고파는 시점도 보여요",
        "link": "https://blog.toss.im/article/economic-terms-25-real-estate-cycle",
        "pubDate": "Thu, 08 Aug 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-p4abj2{display:contents;line-height:1.55;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}🔖 이번 주 경제 용어\n부동산 사이클\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}이번 주 경제 용어는 노후에 잘 살기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n부동산 시장에서 볼 수 있는 특정 주기의 변동성과 흐름을 말해요.\n\n\n부동산 사이클이 돌아온다는 말, 들어보셨나요? 부동산 시장엔 주기적으로 찾아오는 흐름이 있기 때문에 생긴 말인데요. 부동산 시장의 흐름을 살펴보면.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;} 확장 → 과열 → 수축 → 회복 네 단계로 나뉘고 반복됩니다. 확장 → 과열 단계를 부동산 상승 시기로, 수축 → 회복 단계를 부동산 하락 시기로 볼 수 있고요.\n이러한 사이클은 경제 상황, 금리, 인구, 정부 정책 등 여러 요인으로부터 영향을 받아요. 이러한 사이클이 발생하는 이유는 부동산은 적시성이 떨어지는 자산이기 때문입니다. 부동산은 수요와 공급이 비탄력적이기 때문에 가격 변동이 즉각적으로 이루어지지 않거든요.\n예를 들어 전세가가 상승하여 아파트를 사려는 사람이 늘어난다 해도, 하루 아침에 아파트를 만들어낼 수는 없잖아요. 이런 시기엔 매도자가 부르는 게 값인 시기가 됩니다.\n아파트에 대한 수요가 높아져 아파트를 짓기로 결정되면 꽤 오랜 시간이 소요됩니다. 인허가를 거쳐 착공까지 가는 데에 2~3년이 걸리고, 요즘과 같이 원자재, 인건비가 폭등한 시기에는 공사가 수월하게 진행되지 않습니다. 처음 예상한 공사 기간보다 더 오래 걸리곤 하죠. 결국 아파트가 완공된 시점에는 몇 년 전 하늘 높은 줄 모르고 오르던 매수 심리가 꺾이게 됩니다. 미분양이 나고 아파트 가격이 떨어지기도 해요.\n이런 상황에서 부동산 시장은 무조건 오른다는 ‘폭등론'도 맞고, 이제는 끝물이라는 ‘폭락론'도 맞는 말이 됩니다. 자, 그렇다면 이러한 부동산 사이클을 잘 알고 집을 사는 것이 좋겠죠?\n부동산 시장이 상승장으로 전환하기 위해서는 주택 구입에 대한 수요가 커져야 합니다. 다음과 같은 현상이 시장에 나타나면 부동산 상승장으로 전환될 가능성이 높아요. 집을 살 계획이 있다면 기억해두시는 것이 좋겠습니다.\n① 전세가가 오르고 있다면\n전세 시장의 동향은 주택 매매 시장 시장에 큰 영향을 미칩니다. 실수요자들이 주택 구입을 미루고 전세로 머무르게 되면 전세가율(=전세가/매매가)이 오르고, 전세가율 또한 높아지는데요. 매매가와 전세가가 가까워지면 갭투자 수요가 발생합니다. 갭투자는 시세 차익을 목적으로 매매가와 전세가의 차액(Gap) 만으로 투자하는 방법인데요. 실수요에 갭투자 수요까지 더해지면 매매 가격은 상승할 가능성이 높아집니다.\n② 한국은행 기준금리가 낮아진다면\n집을 살 때 현금만으로 사는 사람은 거의 없죠. 보통 자신의 연봉 몇 년 치를 대출받아 비싼 집을 구입하게 됩니다. 그렇다면 집을 살 때 받게되는 주택담보대출의 금리를 주목해야겠습니다.\n주택담보대출 금리가 2~3% 내외로 낮을 때 집을 사면 가장 좋습니다. 대출 이자에 대한 부담이 낮기 때문입니다. 대출 금리는 한국은행 기준금리를 따라가는데요. 이 때문에 기준금리가 하락하면 부동산 시장은 상승장에 올라갈 가능성이 큽니다. 대출 이자에 대한 부담이 상대적으로 낮아지니 주택담보대출을 이용해 집을 구입하려는 사람들이 많아질 수 있기 때문입니다.\n단, 주택담보대출 금리가 6~8%까지 오르더라도 부동산 가격이 더 오를 것이라는 기대감이 시장에 팽배해 있다면, 부동산과 대출에 대한 수요는 증가할 수 있어요.\n③ 정부의 부동산 정책이 완화된다면\n정부의 부동산 정책도 시장에 영향을 미칩니다. 정부가 부동산 규제를 완화하면 사람들은 더 좋은 조건과 저렴한 가격으로 주택을 구입할 수 있다는 기대를 가지게 되겠죠.\n보통 대출 규제를 풀어주는 것을 시작으로, 정부가 지원하는 정책 대출 상품 제공, 양도세 특례법 시행, 토지 거래 허가제 해제 등의 규제 완화 조치가 발표됩니다.\n이러한 정부 정책의 변화는 주택 구매 수요자를 증가시키고, 부동산 시장의 상승장을 이끌 수 있습니다.\n반대로 전세가가 내려가고, 한국은행 기준금리가 오르고, 정부 부동산 정책 규제가 강화되는 현상이 시장에 나타난다면 부동산 시장이 하락장으로 전환될 가능성이 높다고 볼 수 있겠죠?\n이러한 요인들을 면밀하게 관찰하고 분석하면 좋은 기회를 잡을 수 있을 것입니다. 내가 집을 살 때는 부동산 규제 완화 시기인 매수자 우위의 시장에서, 팔 때는 규제 강화 시기인 매도인 우위의 시장에서 움직이는 것이 유리할 수 있습니다.\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}하반기에 집값 오른다…상승 전망 확 늘었다\n(헤럴드경제 2024.7.10)\n부동산R114가 지난달 24일부터 이달 5일까지 전국 1028명을 대상으로 ‘2024년 하반기 주택 시장 전망’ 설문조사를 실시한 결과 10명 중 3명 이상(3.6명)이 하반기 주택 매매 가격이 상승할 것으로 내다봤다.\n직전 조사에서 상승 응답이 하락 응답을 2년 만에 역전(상승 30%, 하락 25%)했는데, 이번 조사에서 상승(36%)과 하락(21%) 사이 격차가 더 벌어진 것이다. 다만 직전 조사와 마찬가지로 보합에 대한 전망이 10명 중 4명 수준으로 여전히 가장 많은 답변을 차지했다.\n매매 가격 상승 응답자 다수는 ‘핵심 지역의 아파트 가격 상승(32.05%)’을 이유로 선택했다. 올해 들어 서울 강남권과 마·용·성 등의 한강 벨트를 중심으로 신고가 거래가 늘어나면서 외곽지 중심으로 거래량은 물론 가격도 회복세에 들어갔기 때문으로 해석된다.\n그 다음으로는 ‘기준 금리 인상 기조 변화(23.56%)’를 주요 이유로 선택했다. 한국은행 기준금리가 지난 해 2월 이후 1년 이상 연 3.5% 수준에서 동결됐고, 미국도 같은 해 9월 이후 1년 가까이 연 5.25~5.5%로 금리를 등결해 하반기 금리 인상 사이클 종료(인하) 기대감이 커졌기 때문이다.\n이밖에 ▷급매물 위주로 실수요층 유입 (11.23%) ▷아파트 분양시장 활성화(9.32%) ▷서울 등 주요 도심의 공급부족 심화(7.40%) 등이 꼽혔다.\n반면 매매 가격이 하락할 것으로 전망한 응답자 10명 중 4명은 ‘경기 침체 가능성(39.91%)’을 이유로 선택했다. 과거 대비 낮아진 경제성장률 전망(저성장)과 물가 상승에 따른 소비 위축 등으로 경기 침체에 대한 우려감이 여전히 높기 때문이다. (중략)\n\n\n부동산 전문 조사 기관에서는 시장 분석 및 예측, 투자자와 소비자 지원, 정책 수립에 필요한 정보를 제공하기 위해 주기적으로 사람들의 부동산 시장에 대한 심리를 조사합니다.\n부동산R114가 최근 실시한 ‘2024년 하반기 주택 시장 전망' 설문 조사에 따르면, 주택 매매 가격이 오를 것이라는 응답이 높았습니다. 상승도 하락도 아닌 보합으로 유지될 것이라는 응답이 가장 높긴 하지만, 상승과 하락 두 답변만 놓고 봤을 때 상승 응답이 더 많다는 점, 직전 조사 대비 이번 조사에서 둘의 격차가 더 벌어졌다는 점을 주목해야 할 것 같네요.\n또한 부동산 사이클에서는 전세가 상승이 매매 가격 상승으로 이어진다고 보는데요. 이번 조사에서 전세가에 대해서도 확인한 결과, 상승 전망이 하락 전망의 세 배를 웃돌며 많은 사람들이 전세가가 오를 것으로 예상했습니다. \n결론적으로 주택 매매가와 전세가 모두 상승할 것이라 보는 부동산 상승론 전망이 우세하다는 것을 확인할 수 있습니다. 그렇다면 부동산 시장에서 가격이 상승할 때 매도자와 매수자 입장에서 각각 취해야 할 액션에 대해서도 한번 살펴볼까요?\n매도자 입장에서는 이런 점들을 준비하면 좋습니다.\n.css-hokoge{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;counter-reset:numberedList;}.css-hokoge ul,.css-hokoge ol{margin:16px 0 0;}.css-hokoge>li{counter-increment:numberedList;margin-bottom:16px;padding-left:24px;}.css-hokoge>li:last-of-type{margin-bottom:0;}.css-hokoge>li>span{position:relative;}.css-hokoge>li>span>:first-child::before{content:counter(numberedList) '.';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n시장조사 및 주택 가격 설정: 현재 보유하고 있는 주택이 위치한 지역 내에서 최근 거래된 부동산 가격을 조사해 시장 가격을 파악합니다. 부동산 전문가나 공인중개사분들의 도움을 받아 적절한 매도 가격을 설정할 수 있습니다.\n적정 매도 시점 선택: 부동산 시장에서의 가격 추이를 주시하면서 적정한 매도 가격을 확보할 수 있는 시점을 예측해봅니다. 금리 등 경제 지표나 정부가 발표하는 부동산 정책 변화 등을 고려해 최고점에서 매도할 수 있도록 계획해 봅니다.\n집 상태 개선: 부동산 가치를 높이기 위해 수리나 개선 작업을 진행합니다. 깔끔하고 매력적인 상태를 유지해 집을 사려는 사람이 방문할 때 좋은 인상을 줄 수 있도록 준비합니다.\n협상 준비: 매수자와의 협상에서 유리한 위치를 차지하기 위한 협상 전략을 준비합니다. 예를 들어, 같은 아파트 단지에서 비슷한 평수의 집이 10억 원에 거래됐다면 이를 근거로 10억 이상의 가격을 제시할 수 있을 만한 강점을 보여주는 것이죠. \n또는 여러 매수자들에게 매물을 적극적으로 보여주고 최상의 조건을 제시한 분과 거래를 진행할 예정이라 알리며, 매수자들이 더 좋은 조건을 제시하도록 유도할 수도 있겠습니다. \n부동산 거래는 가격이 딱 정해져있지 않아 심리전도 중요하기 때문에, 시간에 여유를 두고 협상하는 것이 좋습니다. 당장 급하게 팔지 않아도 되는 상황을 만들어두는 것이 유리하며 매수자가 제시한 가격이 만족스럽지 않다면 더 기다려보겠다고 하는 것도 방법이 될 수 있습니다.\n\n반대로 매수자 입장에서는 이런 점들을 준비하면 좋습니다.\n\n예산 계획 수립: 현재 재정 상황을 꼼꼼하게 검토합니다. 모아둔 돈이 얼마인지, 은행에서 대출을 받아야 할 경우 LTV와 DSR 등 한도를 고려해 가용할 수 있는 금액이 얼마인지, 대출금을 매월 갚아나가야 하므로 매월 소득에서 얼마 정도 대출을 갚는 데에 쓸 수 있는지 등을 확인해야 합니다.\n시장 조사: 관심있는 지역 후보군을 여러 곳 찾아보고 직접 방문해 가장 마음에 드는 지역을 선정합니다. 해당 지역의 부동산 시장을 파악하기 위해 부동산에 방문해 공인중개사와 이야기를 나누며 동향을 파악하는 것도 좋은 방법입니다. 네이버 부동산, 아실 등 인터넷 서비스를 활용해 최근 거래된 부동산의 가격을 미리 조사해가면 부동산과 대화를 나눌 때 더 알찬 정보를 얻을 수 있을 것입니다.\n우선순위 설정: 자신에게 가장 중요한 요소가 무엇일지 우선순위를 매겨봅니다. 직장과의 거리, 집의 크기 및 방향, 주변 환경 등 내가 집을 살 때 가장 중요하게 여기는 것에 높은 우선순위를 매기는 것이 좋겠죠.\n빠른 결단력: 부동산 상승 시장에서는 경쟁이 치열합니다. 인기가 많은 집은 원하는 사람이 많기 때문에 빠르게 거래될 수 있습니다. 적합한 매물을 발견하면 빠르게 결정을 내릴 수 있어야 하며, 필요한 경우 신속하게 계약을 체결하기 위해 가계약금 정도의 자금은 미리 준비하는 것이 좋습니다.\n협상 전략: 매도자와의 협상에서 최대한 유리한 조건을 얻기 위한 협상 전략을 준비합니다. 예를 들어, 가용 가능한 예산 범위를 확실하게 설정해두고 이 범위를 벗어나지 않고 거래하고 싶다는 의사를 매도자에게 명확하게 전달하는 것이죠.\n또한 마음에 드는 매물이 하나만 있지 않다는 것을 매도자에게 알리는 것도 필요합니다. 실제로 마음에 드는 매물을 두세 곳 정해두는 것이 좋고, 여러 매물을 보고 있지만 이곳이 가장 마음에 드니 가격 조정을 시도해 예산 범위를 넘지 않도록 해야 합니다.\n중개인에게 매도자의 상황을 넌지시 물어보고 파악하는 것도 필요합니다. 만일 매도자가 급하게 집을 팔아야 하는 상황이라면, 매수자 입장에서 원하는 가격을 제시했을 때 받아들일 확률이 더욱 높아지거든요.\n\n\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n정책 대출 상품: 정부나 공공기관이 특정 목표를 달성하기 위해 제공하는 대출 프로그램. 이 상품들은 보통 일반 대출보다 낮은 금리와 유리한 조건을 제공하며, 특정 집단이나 활동을 지원하는 것을 목적으로 합니다. 대표적으로 최근 신생아 특례 대출이 이에 해당돼요.\n전세 사기: 이중 계약, 허위 매물, 담보 설정 주택, 명의 도용 등 임차인이 전세 계약을 맺는 과정이나 전세 계약이 종료된 후 보증금을 받지 못하는 상황. 최근 빌라 중심으로 전세 사기가 많아 사회적 문제가 되고 있습니다.\n신생아 특례대출: 정부가 출산을 장려하고 신생아를 둔 가구의 주거 안정을 지원하기 위해 마련한 대출 상품. 금리와 한도 등의 혜택을 제공합니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "부동산 사이클을 이해하면 상승론도 하락론도 모두 맞는 말이에요.",
        "contentSnippet": "부동산 사이클을 이해하면 상승론도 하락론도 모두 맞는 말이에요.",
        "guid": "https://blog.toss.im/article/economic-terms-25-real-estate-cycle",
        "isoDate": "2024-08-08T02:00:00.000Z"
      },
      {
        "title": "상속세를 줄일 수 있다는 사전증여, 무조건 절세에 유리할까?",
        "link": "https://blog.toss.im/article/inheritance-and-gift-tax-06",
        "pubDate": "Wed, 07 Aug 2024 07:48:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}우리나라 상속세는 다음 표와 같이 상속재산이 많아질수록 세율이 높아지는 누진세율 구조로 되어있습니다. 이런 이유로 사전증여를 통해 상속재산에 포함되는 재산을 줄여 낮은 구간의 상속세율을 적용하려는 시도를 많이 하고 있습니다. (증여세 세율도 상속세 세율과 같습니다)\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n상속할 재산을 미리 분산하면 상속세 과세표준이 줄어들게 되는데요. 과세표준을 줄이기 위해 사전증여를 하면 절세 효과가 있을 수 있습니다. 하지만 상속세를 아끼려 시도한 사전증여가 오히려 불리할 수도 있어요.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}상속과 증여, 차이점은?\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n상속은 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}피상속인이 사망할 때 이뤄지지만, 증여는 피상속인이 살아있는 상태에서 이뤄집니다.\n상속은 4촌 이내의 가족에게만 할 수 있지만, 증여는 가족이 아닌 사람에게도 할 수 있습니다.\n상속은 상속 시점에 모든 재산이 한꺼번에 이전되지만, 증여는 10년 단위로 재산을 이전할 수 있습니다.\n\n\n\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n사전증여를 하면 오히려 세금이 더 나올 수 있다?\n김토스 – 5억 원짜리 아파트 2채와 기타 재산 2억 원을 모아 총 재산이 12억 원입니다. 부인과 성인이 된 아들 둘과 함께 가족을 이루고 있고요.\n얼마 전 부자들은 상속세를 줄이기 위해 사전증여를 한다는 말을 들었는데요. 저도 아파트 2채를 아들들에게 사전증여하면 상속세를 줄일 수 있을까요?\n​택스코디 – 사전증여를 하는 것이 꼭 상속세를 줄이는 것으로 이어지지는 않을 수 있습니다. 어쩌면 세금이 더 나올 수도 있으니 주의해야 하는데요. 그 이유는 상속개시일로부터 10년 이내에 상속인들에게 증여한 재산은 상속재산에 가산하여 상속세를 계산하기 때문입니다.\n이때 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}상속재산에 합산된 사전증여 재산은 상속공제를 받을 수 없다는 사실을 명심해야 합니다. 즉, 상속공제 한도를 적용받기 때문에 일괄공제 5억 원, 배우자공제 5억 원 등의 상속공제를 제대로 적용받을 수 없어, 상속세 과세표준은 늘어날 수 있으므로 오히려 세금이 더 많이 나올 수도 있다는 말입니다.\n그럼 10년 이내 상속이 발생한다는 가정 하에, 사전증여 했을 때와 사전증여 없이 모두 상속을 받을 때의 세금을 자세히 비교해볼까요?\n\n[사전증여 후 10년 이내에 상속 발생]\n\n1. 증여세\n\n자녀 1인 당 아파트(5억 원) 1채씩 사전증여 예정 → 사전증여재산으로 구분\n\n과세표준\n= 5억 원 - 5천만 원 (증여공제)\n= 4억 5천만 원\n산출세액\n= 4억 5천만 원 × 20% - 1천만 원 (누진공제)\n= 8천만 원\n총 증여세\n= 8천만 원 × 증여받은 자녀 수 2인\n= 1억 6천만 원\n\n\n\n\n2. 상속세\n\n사전증여한 아파트(5억 원) 2채 → 사전증여재산으로 구분\n기타 재산 2억 원 → 상속재산으로 구분\n사전증여 후 10년 이내 발생한 상속은 사전증여재산이 상속재산에 합산되기 때문에 상속공제 불가 → 일괄공제/배우자공제 등 한도 적용\n\n과세표준\n= 10억 원 (사전증여재산) + 2억 원 (상속재산) - 2억 원 (상속공제 한도 적용)\n= 10억 원\n산출세액\n= 10억 원 × 30% - 6천만 원 (누진공제)\n= 2억 4천만 원\n납부할 상속세\n= 2억 4천만 원 - 1억 6천만 원(증여세액 공제)\n= 8천만 원\n\n\n\n사전증여를 했지만 10년 이내에 상속이 발생하면, 총 납부할 세액은 증여세 1억 6천만 원과 상속세 8천만 원을 합해 .css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;}2억 4천만 원이 됩니다.\n\n[사전증여 없이 모두 상속으로 받을 때]\n\n아파트(5억 원) 2채와 기타 재산 2억 원 → 상속재산으로 구분\n상속재산이므로 상속공제 가능 → 일괄공제 5억 원, 배우자공제 5억 원 한도 적용\n\n과세표준\n= 12억 원 - 10억 원 (일괄공제 + 배우자공제)\n= 2억 원\n산출세액\n= 2억 원 × 20% - 1천만 원(누진공제)\n= 3천만 원\n\n\n\n​사전증여를 하지 않았을 때 상속세 과세표준은 2억 원으로 사전증여를 한 경우인 10억 원과 비교해 8억 원이 적습니다. 다시 말하지만, 사전증여를 했을 때 오히려 과세표준이 더 큰 이유는 합산된 사전증여재산은 상속공제를 받지 못하기 때문입니다.\n사전증여를 하지 않았을 때 상속세는 3천만 원으로, 사전증여를 한 경우 증여세와 상속세를 합한 2억 4천만 원보다 무려 2억 1천만 원이 줄어들게 됩니다. 따라서 김토스 씨는 사전증여를 하지 않고 모두 상속을 하는 것이 유리합니다.\n\n시골 농지, 증여와 상속 중 뭐가 더 유리할까?\n김토스 – 시골에서 평생 농사만 지으며 살아오신 아버지께서 이제 나이가 드셔서 더는 농사짓기가 힘드니, 제게 농지를 증여해 주시겠다 합니다.\n그런데 저는 직장을 다니고 있어 농사를 지을 생각이 없습니다. 농지를 받게 되면 즉시 팔 가능성이 매우 큽니다.\n농지를 지금 증여받는 것과 아버지가 돌아가실 때 상속받는 것 중 어느 쪽이 세금 측면에서 더 유리한가요?\n택스코디 – 아버지에게 농지를 증여 또는 상속받은 후 경작하지 않고, 양도할 가능성이 크다면 양도소득세도 같이 고려해야 합니다.\n결론부터 말하자면, 자경농지 세액감면은 증여보다 상속으로 받을 때가 절대적으로 유리합니다. 아버지가 8년 이상 재촌자경한 농지를 자녀가 상속받는 경우 아버지(피상속인)가 경작한 기간도 자녀(상속인)의 경작 기간으로 인정해주기 때문입니다.\n즉, 자경농지 세액감면 혜택 범위에 들어오는 조건일 경우, 상속개시일(부친 사망일)로부터 3년 이내에 양도한다면 자경농지 세액감면 혜택을 받을 수 있다는 말입니다.\n\n자경농지 세액감면 혜택이란?\n\n양도소득세와 관련해서는 ‘자경농지 세액감면’ 요건을 충족할 경우 상당한 절세가 가능합니다. 농지소재지에서 거주하는 사람이 8년 이상 직접 경작한 농지를 양도하는 경우, 양도소득세를 1년에 1억 원 한도(5년 간 세액감면 합계 2억 원 한도)로 감면해주는 것을 ‘자경농지 세액감면’이라 합니다.\n\n하지만 농지를 증여받으면 아버지가 경작한 기간이 자녀의 경작 기간으로 인정되지 않습니다. 따라서 아버지의 농지를 증여받는다면, 자녀가 직접 8년 이상 재촌 자경해야만 양도 시 자경농지 세액감면을 받을 수 있습니다.\n정리하면 농지를 받은 후 농사를 지을 계획이 없다면, 부친으로부터 농지를 상속받은 후 상속개시일로부터 3년 이내에 양도하는 것이 가장 좋습니다. 본인이 직접 경작하지 않고도 자경농지 세액감면을 받을 수 있으므로 양도소득세 측면에서 유리하기 때문입니다.\n참고로 아버지의 농지는 자녀가 양도하는 날 기준으로 농지여야 하고, 공부상 지목이 아닌 실제 사용 용도가 농지여야 하며, 농지소재지가 비도시지역(관리지역·농림지역·자연환경보전지역)이어야 감면 혜택을 받을 수 있습니다. \n혹시 농지소재지가 도시지역(주거지역·상업지역·공업지역)으로 편입되었다면, 편입된 날로부터 3년이 경과했을 때 감면 혜택을 받을 수 없다는 점을 참고해야 합니다.\n그렇다면 사전증여가 유리한 상황은 언제일까?\n현금이 아닌 부동산을 사전증여하고 나중에 가격이 많이 오르는 상황에서는, 10년 내 상속이 발생하더라도 사전증여를 통해 절세 효과를 볼 수 있습니다. 사전증여한 부동산은 상속일 기준 시세가 아니라 증여 당시 시세로 계산되기 때문입니다.\n김토스 – 그럼 사전증여가 유리한 상황은 구체적으로 언제라 볼 수 있나요?\n​택스코디 – 두 가지 경우로 정리해 볼 수 있습니다.\n1. 추후 시세 상승이 클 것으로 예상하는 부동산 또는 주식 등은 사전증여하는 것이 좋습니다.\n2. 증여하고 난 후 10년이 지난 이후에 상속이 예상되면 사전증여가 유리할 수 있습니다. (단, 적용받을 수 있는 상속공제가 크다면 사전증여가 필요 없을 수 있으니 함께 고려해야 합니다.)\n예를 들어 총재산 15억 원 중 10억 원짜리 아파트 1채를 자녀에게 미리 증여하고, 다른 재산이 5억 원 남은 경우를 가정해봅시다.\n나중에 아버지가 돌아가셨을 때 이 아파트가 20억 원까지 2배 상승했다면, 설령 10년 내 상속이 개시된다고 하더라도 상속세를 크게 줄일 수 있습니다. 상속재산에 합산되는 사전증여 금액은 증여했던 당시의 아파트 가격인 10억 원으로 고정되어 계산되기 때문입니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "사전증여가 상속보다 유리하다? 오히려 세금이 더 나올 수도 있어요",
        "contentSnippet": "사전증여가 상속보다 유리하다? 오히려 세금이 더 나올 수도 있어요",
        "guid": "https://blog.toss.im/article/inheritance-and-gift-tax-06",
        "isoDate": "2024-08-07T07:48:00.000Z"
      },
      {
        "title": "소상공인이라면 주목해야 할 돈 되는 정책 8가지",
        "link": "https://blog.toss.im/article/money-policies-20",
        "pubDate": "Fri, 02 Aug 2024 04:52:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}채무부담 덜어주는 금융지원 3종 세트\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n1. 대출 상환기간 최대 5년까지 연장돼요.\n.css-1kxrhf3{white-space:pre-wrap;}소상공인시장진흥공단 직접대출을 이용 중, 경영에 어려움을 겪고 있다면 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}대출 상환기간을 최대 5년까지 늘릴 수 있어요. 직접대출 잔액 3,000만 원 이상+업력 3년 이상이어야 했던 기존 조건이 폐지되었어요. 경영상 어려움 등을 심사해 대출상환 기간을 최대 5년까지 연장합니다. 8월 중, .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}소상공인정책자금 홈페이지를 통해 신청할 수 있어요.\n문의: 소상공인시장진흥공단 채무조정팀 (042-363-7241)\n2. 고금리 대출을 저금리 대출로 전환할 수 있어요.\n은행권, 비은행권의 고금리 대출(7% 이상)을 소상공인시장진흥공단의 저금리(4.5%, 고정금리) 대출로 전환할 수 있어요. 대출금은 10년간 분할 상환할 수 있습니다. 지원대상 조건은 아래와 같아요.\n➀ 3개월 이상 성실상환 중인 7% 이상 고금리 대출을 받은 경우\n➁ 3개월 이상 성실상환 중이고, 대출받은 은행에서 ‘만기연장 애로 확인서'를 받은 경우\n8월 중 소상공인정책자금 홈페이지에서 신청할 수 있어요.\n문의: 소상공인시장진흥공단 대출지원팀 (044-363-7204)\n3. 보증부대출을 신규보증으로 전환해 상환기간을 연장할 수 있어요.\n지역신용보증재단(지역신보) 보증을 통한 대출(보증부대출)을 이용 중인 소상공인이라면 기존 보증부대출을 신규보증으로 전환해 상환기간을 연장할 수 있습니다. 기존대출 중도상환 수수료를 면제하고, NICE평가정보 개인신용점수(CB) 744점 이하는 산출보증료율에서 0.2%p를 인하 받을 수 있습니다. 7월 31일부터 기존 보증서를 발급받은 지역신보에서 신청 가능합니다.\n전기료, 임대료, 배달료 등 고정비용 부담 완화\n4. 전기료 20만 원 지원을 확대해요.\n2022년 또는 2023년 연 매출 6천만 원 이하 취약 소상공인까지 20만 원의 전기료 특별지원을 받을 수 있습니다. 소상공인전기요금특별지원 홈페이지에서 자세한 내용을 확인할 수 있어요.\n5. ‘착한임대인’ 제도는 2025년 말까지 계속돼요.\n임대료를 깎아준 임대 사업자는 임대료 인하액의 최대 70%를 세액공제 받을 수 있어요. 종합소득세, 법인세 신고 시 세액공제 신청서에 필요서류*를 첨부해 관할 세무서에 제출하면 돼요. 홈택스 신청도 가능해요.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*➀임대차 계약서 ➁임대료 인하 합의서 ➂세금계산서 ➃임차인의 착한임대인 세액공제 확인서 등\n어려운 소상공인의 취업과 재창업까지\n6. 사업 정리를 원하면 채무조정을 도와드려요.\n사업 정리를 희망하는 소상공인의 채무조정을 돕는 ‘새출발기금’의 지원 규모를 기존 30조 원에서 40조 원으로 확대합니다. 지원 대상과 신청기한도 크게 늘어났습니다. 2020년 4월~2024년 6월 사이에 사업을 영위한 소상공인은 2026년 12월까지 .css-1ly3pih{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey800);background-color:#3fd59936;-webkit-text-decoration:underline!important;text-decoration:underline!important;}새출발기금 홈페이지를 통해 채무조정을 신청할 수 있습니다.\n문의: 새출발기금 콜센터(1660-1378)\n7. 점포철거비를 지원해요.\n폐업 예정인 소상공인에게 점포철거 및 원상복구 시 소요되는 비용을 지원합니다. 점포철거비는 기존 최대 250만 원에서 최대 400만 원으로 오릅니다. 신청접수는 희망리턴패키지 홈페이지 공고를 참고하세요.\n문의: 소상공인시장진흥공단 재기지원실(042-363-7702), 희망리턴패키지 콜센터(1800-5981)\n8. 폐업 소상공인의 취업을 돕습니다.\n소상공인의 취업을 지원하는 ‘소상공인 새출발 희망 프로젝트*'를 새롭게 추진해요. 취업을 원하는 폐업 소상공인은 ‘소상공인 특화 취업지원 프로그램'을 통해 최대 6개월간 월 50~110만 원의 훈련참여수당을 받을 수 있어요. 폐업 소상공인을 고용한 사업주에게는 1년간 월 30~60만 원(1인당)의 고용촉진장려금을 지급할 계획입니다.\n*2025년 1월부터 시행 예정\n문의: 고용노동부 콜센터(1350), 소상공인시장진흥공단 재기지원실(042-363-7706), 희망리턴패키지 콜센터(1800-5981)\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 이지영 Graphic 조수희",
        "content": "소상공인‧자영업자 종합대책을 정리했어요",
        "contentSnippet": "소상공인‧자영업자 종합대책을 정리했어요",
        "guid": "https://blog.toss.im/article/money-policies-20",
        "isoDate": "2024-08-02T04:52:00.000Z"
      },
      {
        "title": "집을 둘러싼 분쟁에서 나를 지켜줄 특약 13가지",
        "link": "https://blog.toss.im/article/home-buyers-guide-8",
        "pubDate": "Fri, 02 Aug 2024 02:46:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}이 글이 필요한 순간\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}부동산 매매계약서 도장 찍기 전 계약 내용 점검할 때\n\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n특약 사항이 중요한 이유는? \n분쟁 예방과 해결의 마지노선!\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n주택을 사고팔 때 주고받는 것은 물리적으로 눈에 보이는 외형물만 의미하는 것이 아니라 거기에 부합되어 있는 모든 권리와 의무까지도 포함한다. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}따라서 매매계약서에는 단순히 ‘매매가’, ‘대금지급방법(계약금, 중도금, 잔금)’, ‘거래당사자의 인적사항’뿐 아니라 추후에 문제가 발생했을 경우 어떻게 해결할 것인지에 대한 해결책도 함께 기재되어 있어야 한다.\n매매 이후 불가피한 사유로 분쟁이 발생했을 경우에는 일단 대화로 풀어보는 것이 좋다. 그래도 해결되지 않으면 법적 소송으로 이어지고 매도자와 매수자 양측 모두 정신적 스트레스, 시간, 비용 등에 대한 손해가 커지게 된다.\n그러므로 혹시 발생할지도 모를 분쟁을 대비해서 꼼꼼하게 특약 사항을 기재해놓는 것이 중요하다. 분쟁의 소지를 사전에 예방할 수 있고, 분쟁이 발생하더라도 신속하고 수월하게 문제를 해결할 수 있는 기준이 되어주기 때문이다.\n특약 사항은 간결하고 정확하게, \n스스로 점검할 것\n특약 사항을 기재할 때는 모호한 표현이나 해석에 따라 의미가 달라질 수 있는 다의적인 표현은 피해야 한다. 누구나 쉽게 이해할 수 있도록 간결하면서 정확하게 작성한다.\n물론 부동산중개사무소에서 계약서를 쓰면 공인중개사가 기본적인 내용은 알아서 기재해준다. 하지만 아무리 사소한 것이라도 특약 사항란에 넣고 싶은 내용이 있다면 빠트리지 말고 써두어야 나중에 후회를 줄일 수 있다. 특약 사항을 꼼꼼하게 작성할수록 향후 분쟁거리가 줄어들기 때문이다. 계약서를 작성하러 가기 전에는 거래하는 부동산의 특성을 생각하고 아래 이어지는 예시들을 참고해 미리 자신에게 필요(유리)한 특약 사항을 정리해봐야 한다.\n사회질서 안에서 사적 계약은 특약 사항이 우선한다\n부동산 매매계약은 개인과 개인 간 체결되는 사적 계약이고, 특약은 당사자 간 특별한 약속을 의미한다. 법으로 다른 규정이 있어도 당사자 간의 특약 사항을 우선 적용받는다. 단, 아무리 특약 사항에 기재했더라도 사회질서를 해칠 만한 강행규정 위반일 경우에는 효력이 없다. 강행규정이란 당사자의 의사와 상관없이 강제적으로 적용되는 규범이며, 선량한 풍속, 기타 사회질서 유지에 반하는 내용의 특약은 무효가 된다.\n매매계약서 작성 시 강행규정을 벗어나지 않는 범위 내에서 자주 활용되는 대표적인 특약 사항을 ‘권리적인 사항’과 ‘물리적인 사항’으로 나눠서 살펴보자.\n1. 매매 시 특약 문구 - 권리적인 사항\n① 계약 해제 시 위약금에 대한 내용\n아래와 같은 위약금 조항이 없으면, 상대방의 단순변심으로 계약 해제를 하더라도 별도의 손해배상을 받기가 쉽지 않다.\n\n✅ 일방의 계약 해제 또는 계약 위반에 따른 손해배상으로 매도자는 받은 계약금의 두 배의 금액을 매수자는 계약금을 위약금으로 약정한다.\n\n\n② 매수한 주택에 세를 놓아야 하는 경우\n매수자가 실입주하지 않는 경우, 새로운 임차인을 구해야 하기 때문에 이러한 점을 사전에 매도자에게 알리고 협조를 구한다.\n\n✅ 매도자(또는 점유자)는 매수인이 새로운 임대차 계약을 체결하는 것에 최대한 협조하기로 하며, 매수자와 부동산의 요구가 있을 경우 집을 보여주는 것에 적극 협조하기로 한다.\n\n\n③ 매수자가 잔금을 새로운 임차인의 보증금으로 충당하려 할 때\n다음과 같은 특약이 없을 경우, 매수자에게 권한이 없기 때문에 새로운 임차인이 소유권이전등기(잔금) 후에 입주할 경우 매도자와 임대차계약서를 작성하고, 입주한 뒤에 매수자와 계약서를 다시 작성해야 하는 번거로움이 발생할 수 있다.\n\n✅ 매수자의 잔금 중 일부를 새로운 임차인의 보증금으로 충당하기로 하며, 이때 매도자는 새로운 임대차계약체결 권한을 매수자에게 부여하기로 한다.\n\n\n④ 기존 임대차를 매수자가 승계할 경우\n매수자는 계약 체결 시 해당 주택의 임대차계약서 사본을, 잔금 시에는 원본을 매도자에게 받아야 한다. 특히 다가구주택의 경우에는 각 호실별로 임대내역(보증금 및 월세, 계약기간)을 모두 매매계약서에 기재해야 한다.\n\n✅ 매수자는 해당 주택의 모든 임대차를 승계하기로 한다. 현 임차인(임차인 ○○○, 보증금 ○○원, 만기 ○○년 ○○월 ○○일)은 매수자가 그대로 승계한다.\n\n참고로 임차인은 계약기간 도중 임대인(소유자)이 바뀔 경우, 계약기간의 잔존 여부와 상관없이 계약을 해지하고 임대차를 종료할 수 있다.(대법원 1998.9.2. 자98마100결정)\n그러므로 임대 목적으로 매수할 경우 매매계약서를 작성할 때, 안전 장치로 ‘임대인 변경에 대한 임차인 동의서’ 또는 기존의 임차인과 ‘재계약서’를 바로 작성해놓는 것이 좋다.\n\n⑤ 임차인 있는 주택에 매수자가 실입주를 해야 하는 경우\n계약 당시에 해당 주택에 임차인이 거주하고 있는 경우, 매수자가 실입주를 하기 위해서는 잔금 시까지 임차인을 내보내야 한다. 이때 누구의 책임하에 임차인을 내보낼지를 명확하게 해둬야 한다.\n\n✅ 매수자는 해당 주택에 실입주할 예정이므로 매도자는 잔금 시까지 현 임차인에 대한 명도를 책임지기로 한다. \n✅ 임차인 명도에 차질이 생겨 발생하는 모든 비용은 매도자가 부담하기로 한다.\n\n\n⑥ ‘.css-wi4a2c{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;font-weight:bold;}토지거래허가구역’ 내의 주택일 경우\n소유권이전등기를 하기 위해서 토지거래허가를 받아야 하는 지역 내 주택이라면 계약서 특약 사항란에 허가 여부에 따른 향후 조치에 대한 내용을 반드시 기재해 놓아야 한다.\n\n✅ 해당 주택의 소재 지역은 토지거래허가구역으로 만일 토지거래허가가 나지 않을 경우 본 매매계약은 무효로 하며, 매도자는 아무런 조건 없이 계약금을 즉시 매수자에게 반환하기로 한다. 매도자와 매수자는 이와 관련하여 상대방에게 그 어떠한 손해배상도 청구하지 않기로 한다.\n\n\n⑦ 단독주택 등에서 대지면적에 대한 차이가 있을 경우\n오래된 단독주택은 건물보다는 땅의 가치가 매매가에서 큰 비중을 차지하게 된다. 그래서 ‘평당 얼마’라는 식으로 매매가가 정해지는 경우가 있다. 이때 향후 대지면적에 차이가 생길 경우 어떻게 해결할 것인지를 기재해 놓아야 한다.\n\n✅ 면적은 등기사항증명서 및 토지대장을 기준으로 하며, 차후 수량의 차이가 발견되어도 매수자는 매도자에게 일체의 이의 제기를 하지 않기로 한다. → 매도자 유리\n✅ 본건 토지대장 등 공부상의 면적을 기준으로 한 매매이며, 잔금 후 30일 이내에 실측 후 공부상면적과 실측면적에 차이가 발생할 경우 평당 ○○만원을 감액하기로 한다. → 매수자 유리\n✅ 본 매매계약은 ‘수량지정매매’이며, 총매매대금 ○○만원(평당 ○○만원×○○평)으로 산정되었으므로 향후 거래평수와 실제평수가 차이가 날 경우 차이 나는 금액만큼 반환하기로 한다.  → 매수자 유리\n\n수량지정매매란 거래 대상물의 가격을 산정할 때 ‘평당 얼마’ 혹은 ‘개당 얼마’ 등의 식으로 수량으로 매매가를 산정하는 방식이다. 이 방식은 아파트, 빌라 등의 공동주택 매매에서는 크게 의미가 없지만, 단독주택과 같이 대지의 비중이 큰 주택 거래 시에는 의미가 있다. 특히 신축을 목적으로 하는 주택은 대지의 면적에 따라 건물의 크기와 설계 등이 달라질 수 있으므로 중요한 의미를 갖는다.\n\n⑧ 부가세(VAT) 관련 비용\n일반적으로 주택의 경우에는 부가세 문제가 없어 특별히 신경 쓸 부분이 없으나, 상가주택의 상가에는 부가세가 발생한다. 이때 부가세를 누가 부담할지에 대해 명확하게 기재해 놓아야 한다.\n\n✅ 해당 주택의 1층은 근린생활시설(상가)로 부가세는 매수자가 부담하기로 한다.\n\n참고로 부가세에 대한 언급이 없을 경우 매매 가격에 포함된 것으로 간주되어 매도자가 부담하게 된다.\n2. 매매 시 특약 문구 - 물리적인 사항\n① 옵션과 관련된 사항\n최근에는 가전제품이 옵션으로 설치되어 있는 경우가 많다. 처음부터 빌트인되어 있던 제품이라면 관계없지만, 매도자 입장에서는 자신이 살면서 나중에 설치한 제품이라면 해당 주택의 매매와는 별도라고 생각하는 경우가 의외로 많다. 그러므로 옵션에 대한 특약 사항을 명확하게 기재함으로써 분쟁을 미연에 방지하도록 한다. 특히 단독주택의 경우 고가의 나무, 조형물(암석) 등이 있을 경우 소유권의 범위를 특약 사항에 명확하게 기재해 놓아야 한다.\n\n✅ 현재 해당 주택에 설치되어 있는 전기인덕션, 식기세척기, 김치냉장고, 디지털도어록은 매매 목적물에 포함된 것이다. → 매수자 유리\n✅ 현재 해당 주택에 주방에 설치되어 있는 전기인덕션는 잔금 시 매도자가 가지고 가기로 한다. → 매도자 유리\n✅ 대문을 기준으로 우측에 식재되어 있는 소나무는 잔금 시 매도자가 가지고 가기로 한다. → 매도자 유리\n\n\n② 하자담보책임 범위 및 기간\n집을 사자마자 하자가 발생하면 매수자의 입장에서는 금전적, 정신적 피해를 받게 된다. 그러므로 범위와 일정 기간을 정해서 최소한 그 사이에 발생하는 하자에 대한 책임을 매도자에게 지도록 하는 내용의 특약 사항을 기재해 놓는 것이 좋다.\n\n✅ 매도자는 해당 부동산의 잔금일로부터 6개월 내에 발생하는 모든 하자에 대한 책임을 지기로 한다. 단, ‘누수’와 ‘균열’과 같은 중대한 하자는 그 기간을 1년으로 한다. → 매수자 유리\n✅ 매매계약 시, 중대한 하자(내부누수 등)에 대하여 미고지 후 발생하는 하자는 매도인이 책임지기로 한다. → 매수자 유리\n\n\n③ 현 시설 상태에서 매매계약인 경우\n‘현 시설 상태에서’라는 말은 향후 매수자가 매도자에게 부동산의 사소한 하자에 대하여 책임을 물을 수 없다는 말과 같다. 계약서 작성 전에 해당 주택의 시설상태를 확인하고 진행했기 때문에 매도자의 고의가 아니라면 어느 정도 책임을 면할 수 있다는 조항이 될 수 있다.\n\n✅ 매수자의 현장 방문 확인 후, 쌍방 협의에 따라 현 시설 상태에서 진행하는 계약이다. → 매도자 유리\n\n\n④ 제세공과금 및 기타 관리비 정산 관련\n일반적으로 공과금 정산 시점은 ‘잔금일(입주일)’이다. 상호 협의 하에 다른 날을 기준일로 정할 수도 있다.\n\n✅ 잔금일까지의 제세공과금 및 기타 관리비는 매도자가 부담하기로 한다.\n\n\n⑤ 잔금 지급 이전에 리모델링에 관한 사항\n간혹 잔금 전에 리모델링을 사유로 매매 목적물을 먼저 인수받는 매수자 중에서 새로운 흠집(하자) 등을 근거로 매매금액을 깎으려고 시도하거나 새로운 요구사항을 제시하는 경우가 있다. 매도자의 입장에서는 이러한 특약 사항을 미리 넣어놓음으로써 매수자의 새로운 요구사항을 자연스럽게 거절할 수 있다.\n\n✅ 매도자는 매수자가 잔금 지급 전에 리모델링 공사를 하는 것에 동의(협조)한다. → 매수자 유리\n✅ 매도자는 매수자가 리모델링 공사를 시작하기 전날까지 일체의 공과금 및 세금을 정산하고 열쇠(비밀번호)와 함께 매수자에게 인도하며, 이 시점을 기준으로 관리비 등 일체의 공과금은 매수자가 부담하기로 한다. → 매도자·매수자 모두 유리\n✅ 매도자는 잔금 전 매수자가 리모델링 공사를 하는 것에 동의하기로 하며, 매수자가 리모델링 공사 시작일부터 본 부동산에 관하여 매매대금을 포함하여 그 어떠한 이의를 제기하지 않기로 한다. → 매도자 유리\n✅ 집수리 시부터 관리비는 매수자가 부담하기로 하며, 이때부터 매도자는 해당 주택에 대한 하자담보의 책임에서 면책하기로 한다. → 매도자 유리\n\n\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 주소은 Graphic 이은호",
        "content": "매매계약서 쓸 때 확인해야 할 특약 사항 체크리스트",
        "contentSnippet": "매매계약서 쓸 때 확인해야 할 특약 사항 체크리스트",
        "guid": "https://blog.toss.im/article/home-buyers-guide-8",
        "isoDate": "2024-08-02T02:46:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]