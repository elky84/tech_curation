[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Nelson Daniel Troncoso",
        "title": "What’s New in Visual Studio Build Insights 17.12",
        "link": "https://devblogs.microsoft.com/cppblog/build-insights-17-12/",
        "pubDate": "Thu, 12 Sep 2024 20:56:58 +0000",
        "content:encodedSnippet": "We are excited to announce the latest Visual Studio 2022 17.12 Build Insights features. These updates provide developers with greater control and accuracy when diagnosing and optimizing C++ builds directly within Visual Studio.\nDownload Visual Studio 2022 17.12 Preview\nWe extend our thanks to the developer community, particularly our game studio partners, for providing invaluable feedback. Your input plays a vital role in shaping these new features.\nLearn more about Build Insights with our tutorials and documentation:\nC++ Build Insights | Microsoft Learn \nTutorial: Troubleshoot function inlining on build time | Microsoft Learn \nTutorial: Troubleshoot header file impact on build time | Microsoft Learn\nRun Build Insights on Selected Files\nThis feature is a game-changer for those who want to target specific files without analyzing the entire project. You can select a few files, run Build Insights on them, and see exactly how these files impact build performance. It’s perfect for fine-tuning your project and making targeted optimizations. \n\nFilter Projects \nWorking in a multi-project environment? The Project Filter feature allows you to focus your diagnostics on the projects most relevant to your current work. For instance, you can filter the analysis to focus solely on the core components of a specific project, making it easier to pinpoint areas that need optimization. \n \nFilter Files Using a Glob Pattern\nThe File Path Filter is incredibly useful for narrowing down your analysis to specific directories or excluding paths that aren’t relevant to your task. For example, you can exclude third-party libraries and focus only on parts of the codebase critical to the current build. \n \nView Explanation with Documentation Link\nYou can now see a short description of how each tab of Build Insights can be used, along with a link to the documentation for a detailed explanation. \n\nEnhanced Save Experience \nNow you can designate a folder to automatically store the reports so you can easily access them during your investigation. This will save you the work of manually specifying a folder each time you save your reports. \n \n \nPath Updates\nWe have added a File Name column for both files and translation units. displayed by default to help you quickly identify files without parsing lengthy paths. Additionally, we have hidden full and relative paths to reduce clutter. To see full paths, simply hover over the file.  \n\nNew Metrics \nWe have added two new columns, “Exclusive Duration” (Self) and “Inclusive Duration” (Total): \nExclusive Duration: Measures the time spent solely on the current task. \nInclusive Duration: Captures the total time spent on a task, including all nested tasks. \n \nRenaming of Time Column to Wall Time Responsibility \nWhen we introduced the “Time” column in Visual Studio Build Insights, we aimed to simplify the naming. However, we’ve found that it may cause confusion. While the column has always shown Wall Clock Time Responsibility (WCTR) or Wall Time Responsibility —which adjusts for parallelism by factoring in how tasks overlap — many users assumed it represented raw task duration. \nTo provide better clarity, we’re renaming this column to “Wall Time Responsibility”. This more accurately reflects what the data is measuring: the true impact of each task on the overall build time, especially in parallel environments. We believe this change will help developers gain clearer insights and optimize their builds more effectively. \nSend Us Your Feedback! \nReady to experience the new features in Visual Studio 2022 17.12? Download it today and start optimizing your C++ builds with Build Insights. Don’t forget to share your feedback with us to help shape future updates! \nLet us know your thoughts and what additional capabilities you’d like to see from this feature next! We are actively developing this feature set and would love to hear what would improve your workflow even more. The comments below are open for us to track any requests. You can also find us on Twitter (@VisualC) or via email at visualcpp@microsoft.com. To open a bug, please see Visual Studio Feedback. \nThe post What’s New in Visual Studio Build Insights 17.12 appeared first on C++ Team Blog.",
        "dc:creator": "Nelson Daniel Troncoso",
        "comments": "https://devblogs.microsoft.com/cppblog/build-insights-17-12/#comments",
        "content": "<p>We are excited to announce the latest Visual Studio 2022 17.12 Build Insights features. These updates provide developers with greater control and accuracy when diagnosing and optimizing C++ builds directly within Visual Studio. Download Visual Studio 2022 17.12 Preview We extend our thanks to the developer community, particularly our game studio partners, for providing invaluable [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/build-insights-17-12/\">What’s New in Visual Studio Build Insights 17.12</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "We are excited to announce the latest Visual Studio 2022 17.12 Build Insights features. These updates provide developers with greater control and accuracy when diagnosing and optimizing C++ builds directly within Visual Studio. Download Visual Studio 2022 17.12 Preview We extend our thanks to the developer community, particularly our game studio partners, for providing invaluable […]\nThe post What’s New in Visual Studio Build Insights 17.12 appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34646",
        "categories": [
          "Announcement",
          "Build Insights",
          "Build Optimization",
          "C++"
        ],
        "isoDate": "2024-09-12T20:56:58.000Z"
      },
      {
        "creator": "Sy Brand",
        "title": "Microsoft C++ Team at CppCon 2024",
        "link": "https://devblogs.microsoft.com/cppblog/microsoft-c-team-at-cppcon-2024/",
        "pubDate": "Thu, 12 Sep 2024 17:03:30 +0000",
        "content:encodedSnippet": "As always our team will be at CppCon this year with a host of presentations. Many of us will also be present at our team’s booth in the main hall for the first four days of the conference. Come say hi and let us know if you have any questions about our talks, products, or anything else! You can also join the #visual_studio channel on the CppCon Discord to talk to us (note: to join, head to #directory channel first, and check the checkbox next to “Visual Studio” box).\nWe’re also running a survey for attendees. If you have a moment, please take our survey. It’s quick and you could win a duffel bag or utility bag.\nHere’s the lineup:\nMonday 16th​\nPeering Forward: C++’s Next Decade — Herb Sutter – 8:45am\nSo You Think You Can Hash – Victor Ciura​ – 2:00pm\nTuesday​ 17th​\n10 Problems Large Companies have with Dependency Management and How to Solve Them – Augustin Popa – 4:45pm​\n​Thursday 19th​​\nWhat’s New for Visual Studio Code – Sinem Akinci and Alexandra Kemper – 3:15pm\nFriday 20th​​\nWhat’s New for Visual Studio – Mryam Girmay and Michael Price – 1:30pm\nThe post Microsoft C++ Team at CppCon 2024 appeared first on C++ Team Blog.",
        "dc:creator": "Sy Brand",
        "comments": "https://devblogs.microsoft.com/cppblog/microsoft-c-team-at-cppcon-2024/#respond",
        "content": "<p>&#160; As always our team will be at CppCon this year with a host of presentations. Many of us will also be present at our team’s booth in the main hall for the first four days of the conference. Come say hi and let us know if you have any questions about our talks, products, [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/microsoft-c-team-at-cppcon-2024/\">Microsoft C++ Team at CppCon 2024</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "As always our team will be at CppCon this year with a host of presentations. Many of us will also be present at our team’s booth in the main hall for the first four days of the conference. Come say hi and let us know if you have any questions about our talks, products, […]\nThe post Microsoft C++ Team at CppCon 2024 appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34584",
        "categories": [
          "Announcement",
          "C++"
        ],
        "isoDate": "2024-09-12T17:03:30.000Z"
      },
      {
        "creator": "Sinem Akinci",
        "title": "Fix C++ warnings and errors with Copilot: Introducing AI-Assisted Code Fixes in Visual Studio",
        "link": "https://devblogs.microsoft.com/cppblog/fix-c-warnings-and-errors-with-copilot-introducing-ai-assisted-code-fixes-in-visual-studio/",
        "pubDate": "Wed, 11 Sep 2024 10:00:41 +0000",
        "content:encodedSnippet": "Stuck on an unfamiliar build error? Want to resolve your code errors quickly? Copilot is now integrated into Visual Studio error workflows to assist you with understanding and resolving C++ errors and warnings.\nTo access this new feature, you will need an active Copilot subscription and the latest 17.11 GA version of Visual Studio.\nHow does it work?\nThere are two different entry points to accommodate where you are at in your error workflow:\nThe Quick Action lightbulb proposes a fix of a given error inline in your code window.\nThe Error List Integration invokes Copilot in the chat window to explain the error code and showcase a proposed fix.\nSemantically relevant code snippets from your active file and related files are automatically included as context to increase the relevant of the proposed fix.\nFix with Copilot in the Quick Action Lightbulb\nCopilot is integrated into the Quick Action lightbulb in your code editor, so that you can invoke Copilot and view proposed fixes inline with a few simple clicks. Just hover over the diagnostic squiggle or double-click on a diagnostic message in your Error List to access Fix with Copilot via Quick Action Lightbulb.\nFrom here, Copilot will invoke the /fix command with semantically relevant C++ code snippets to propose a fix for your code.\n\nYou can edit the proposed code, accept any changes inline, or ask any follow-up questions in the inline Copilot Chat pane, without having to navigate away from the code editor.\nExplain and Fix with Copilot in the Error List\nIf you want to learn more about the error itself, Copilot is integrated in the Error List to invoke by selecting the Copilot icon to the left of a code warning or error to provide an explanation alongside a proposed fix through the Chat pane. This can be beneficial for more complex fixes, as it can provide multiple code snippets across several files and a deeper understanding of the error itself.\n\nGiven the same relevant C++ context, it will help you more deeply understand the error code and propose a fix for the code. You also can ask follow-up questions or add any additional details via the Chat pane to probe further.\n\nWhat do you think?\nPlease let us know anything you’d like to see added to this feature or your experiences with this fixing experience. We have a survey available for any feedback here: https://www.surveymonkey.com/r/RKG68YN. You’ll need an active GitHub Copilot subscription. Download the latest version of Visual Studio and give it a try.\nIn addition, our team is working hard on improving C++ integrations with Copilot Chat, so please let us know any other enhancements you’d like to see to your C++ workflows and content you’d like to see.\nWe welcome all types of feedback on your experience with the product. Comment below, or you can find us via email at visualcpp@microsoft.com or via X at @VisualC.\nThe post Fix C++ warnings and errors with Copilot: Introducing AI-Assisted Code Fixes in Visual Studio appeared first on C++ Team Blog.",
        "dc:creator": "Sinem Akinci",
        "comments": "https://devblogs.microsoft.com/cppblog/fix-c-warnings-and-errors-with-copilot-introducing-ai-assisted-code-fixes-in-visual-studio/#comments",
        "content": "<p>Stuck on an unfamiliar build error? Want to resolve your code errors quickly? Copilot is now integrated into Visual Studio error workflows to assist you with understanding and resolving C++ errors and warnings. To access this new feature, you will need an active Copilot subscription and the latest 17.11 GA version of Visual Studio. How [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/fix-c-warnings-and-errors-with-copilot-introducing-ai-assisted-code-fixes-in-visual-studio/\">Fix C++ warnings and errors with Copilot: Introducing AI-Assisted Code Fixes in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "Stuck on an unfamiliar build error? Want to resolve your code errors quickly? Copilot is now integrated into Visual Studio error workflows to assist you with understanding and resolving C++ errors and warnings. To access this new feature, you will need an active Copilot subscription and the latest 17.11 GA version of Visual Studio. How […]\nThe post Fix C++ warnings and errors with Copilot: Introducing AI-Assisted Code Fixes in Visual Studio appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34627",
        "categories": [
          "C++",
          "Copilot"
        ],
        "isoDate": "2024-09-11T10:00:41.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "Inside Bento: Jupyter Notebooks at Meta",
        "link": "https://engineering.fb.com/2024/09/17/data-infrastructure/inside-bento-jupyter-notebooks-at-meta/",
        "pubDate": "Tue, 17 Sep 2024 17:53:56 +0000",
        "content:encodedSnippet": "This episode of the Meta Tech Podcast is all about Bento, Meta’s internal distribution of Jupyter Notebooks, an open-source web-based computing platform. Bento allows our engineers to mix code, text, and multimedia in a single document and serves a wide range of use cases at Meta from prototyping to complex machine learning workflows.\nPascal Hartig (@passy) is joined by Steve, whose team has built several features on top of Jupyter, including scheduled notebooks, sharing with colleagues, and running notebooks without a remote server component by leveraging WebAssembly in the browser.\nDownload or listen to the podcast episode below:\n\nYou can also find the episode wherever you get your podcasts, including:\nSpotify\nApple Podcasts\nPocketCasts\nOvercast\nThe Meta Tech Podcast is a podcast, brought to you by Meta, where we highlight the work Meta’s engineers are doing at every level – from low-level frameworks to end-user features.\nSend us feedback on Instagram, Threads, or X.\nAnd if you’re interested in learning more about career opportunities at Meta visit the Meta Careers page.\nThe post Inside Bento: Jupyter Notebooks at Meta appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>This episode of the Meta Tech Podcast is all about Bento, Meta’s internal distribution of Jupyter Notebooks, an open-source web-based computing platform. Bento allows our engineers to mix code, text, and multimedia in a single document and serves a wide range of use cases at Meta from prototyping to complex machine learning workflows. Pascal Hartig [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/09/17/data-infrastructure/inside-bento-jupyter-notebooks-at-meta/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/09/17/data-infrastructure/inside-bento-jupyter-notebooks-at-meta/\">Inside Bento: Jupyter Notebooks at Meta</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "This episode of the Meta Tech Podcast is all about Bento, Meta’s internal distribution of Jupyter Notebooks, an open-source web-based computing platform. Bento allows our engineers to mix code, text, and multimedia in a single document and serves a wide range of use cases at Meta from prototyping to complex machine learning workflows. Pascal Hartig [...]\nRead More...\nThe post Inside Bento: Jupyter Notebooks at Meta appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21690",
        "categories": [
          "Culture",
          "Data Infrastructure",
          "DevInfra",
          "Open Source",
          "Meta Tech Podcast"
        ],
        "isoDate": "2024-09-17T17:53:56.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Oleg Zinovyev",
        "title": "The CLion 2024.3 Early Access Program Is Open",
        "link": "https://blog.jetbrains.com/clion/2024/09/2024-3-eap-open/",
        "pubDate": "Tue, 17 Sep 2024 16:38:05 +0000",
        "content:encodedSnippet": "The Early Access Program for CLion 2024.3 is officially launched. The first EAP build 243.12818.61 is now available, giving you an early glimpse into the enhancements we’ll include in the upcoming major release. You can download the build for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu.\nDOWNLOAD CLION 2024.3 EAP\nGive it a try and let us know what you think about the changes. Share your feedback in the comments section or via our issue tracker.\nRead on to learn more about the key features and updates in CLion Nova, embedded development integrations, and other IDE components.\nEnhanced cloud code completion\nCLion’s cloud code completion powered by JetBrains AI Assistant has become faster and smarter thanks to the internally trained large language model (LLM) for C++. One of the most prominent results is the improved multiline code completion, with enhanced usage scenarios, syntax highlighting, and incremental acceptance of code suggestions.\n\n\n\n\nMultiline code suggestions work in conjunction with standard code completion and full line code completion (the latter uses the local LLM and doesn’t require sending data to the cloud). This allows you to review and accept suggestions gradually. You can also accept suggestions word by word using the shortcut ⌥→ for macOS and Ctrl+→ for Windows.\nThe updated cloud completion now offers a broader range of usage scenarios, with enhanced suffix matching ensuring that the predicted code fragment correctly completes the existing code.\nIf you have installed AI Assistant, the new cloud code completion is enabled by default. You can manage it via Settings | Editor | General | Inline Completion.\nNote that these features are available only to users with a trial or paid subscription to the JetBrains AI Assistant plugin.\nCLion Nova\nThe notable improvements can be broken down into two main categories: language-specific and those related to IDE memory usage.\nLanguage-specific improvements\nWe’ve added one of the most requested features – predefined code styles from other languages and frameworks, including LLVM, Qt, Google, GNU, and more (CPP-36365). You can select your preferred code style via Settings | Editor | Code Style | C/C++ | Set from… \nOne of the UI updates is support for a gutter icon for recursive calls:\n\n\n\n\nThis makes it easier to see where you are using recursive functions in your code and to avoid potentially harmful situations like stack overflows.\nWe’ve also enhanced CLion Nova with support for some of the newest standard library features and for switch cases with a range of values, which is a GNU extension.\nMemory usage improvements\nMany improvements in CLion Nova have helped reduce the memory footprint, which is especially noticeable in large projects. We’ve tested the result of these optimizations by comparing the memory usage of a Chromium project in CLion Nova 2024.2 and 2024.3 (EAP). The result showed that, in the new version, the IDE frontend uses 51% less memory while the IDE backend uses 15% less.\n\n\n\n\nFrom a user perspective, the most tangible result of these numbers is the following:\nThe IDE is now more responsive because it uses less memory, and the garbage collector is called less often. This is especially helpful on hosts with limited memory. \nThe IDE is ready to work faster and more responsive to project modifications.\nProject formats, build tools, and debugging\nWe’ve fixed an issue that was slowing down the reload of some medium and large CMake projects (CPP-39211). The reload time has been reduced from minutes to seconds.\nThe following bundles have been updated:\nCMake to 3.30.\nLLDB to 18. Note that the JetBrains LLDB fork used for the MSVC toolchain still uses an older version of LLDB.\nEmbedded development\nSeveral enhancements have been made to the PlatformIO integration, including the following:\nPlatformIO is now detected when installed via Homebrew and venv.\nCLion correctly identifies source files in PlatformIO projects, and code analysis works as it should.\nThe upload action is now available for all targets, even those not explicitly added to env.\nOther updates related to embedded development include:\nThe Serial Port Monitor plugin now correctly detects the ports of USB devices that are set via soft link paths. The plugin has also received UI improvements.\nThe Zephyr West config files now have syntax highlighting to make the code easier to read and understand.\nSupport for .dts and .dtsi files has been extended. C preprocessor directives such as #ifdef CONFIG_SPL and #ifdef CONFIG_ROCKCHIP_EXTERNAL_TPL are now processed correctly and do not cause syntax errors.\nOther improvements\nIf you are just starting with CLion, this update is for you. We’ve improved the onboarding tips so that you can try out some of CLion’s key features and get a clearer picture of its capabilities right from the start. The main goal is to help you learn the IDE faster.\n\n\n\n\nIn addition, starting with v2024.3, the new terminal is the default. It provides features such as separating command output into distinct visual blocks and completion for command names, flags, arguments, and paths. To learn more about the new terminal, see our documentation.\nRead the full release notes on our YouTrack page. Learn more about our plans for this release in the CLion 2024.3 roadmap.\nDOWNLOAD CLION 2024.3 EAP\nCall for feedback\nYour feedback is important to us, as your experiences and insights are essential to our mission of continuously improving CLion. Please share your ideas in the comments section below or submit them to our issue tracker. We would also be interested in setting up a quick call with you to learn more about your specific use cases. Let us know if you would like to participate!\nYour CLion team\nJetBrains\nThe Drive to Develop",
        "dc:creator": "Oleg Zinovyev",
        "content": "The Early Access Program for CLion 2024.3 is officially launched. The first EAP build 243.12818.61 is now available, giving you an early glimpse into the enhancements we’ll include in the upcoming major release. You can download the build for free from the link below, via the Toolbox App, or as a snap package if you’re [&#8230;]",
        "contentSnippet": "The Early Access Program for CLion 2024.3 is officially launched. The first EAP build 243.12818.61 is now available, giving you an early glimpse into the enhancements we’ll include in the upcoming major release. You can download the build for free from the link below, via the Toolbox App, or as a snap package if you’re […]",
        "guid": "https://blog.jetbrains.com/?post_type=clion&p=510675",
        "categories": [
          "eap",
          "news",
          "ai-assistant",
          "clionnova",
          "code-completion",
          "embedded"
        ],
        "isoDate": "2024-09-17T16:38:05.000Z"
      },
      {
        "creator": "Elena Pishkova",
        "title": "YouTrack Introduces Apps",
        "link": "https://blog.jetbrains.com/youtrack/2024/09/youtrack-introduces-apps/",
        "pubDate": "Tue, 17 Sep 2024 16:24:33 +0000",
        "content:encodedSnippet": "With the new YouTrack 2024.3 release, one of the most hotly anticipated functionalities in the YouTrack roadmap – apps – goes live! Apps help teams customize YouTrack to fit their specific needs, improving project management, reporting, automation, and integration with other tools. You can now use and create apps to extend YouTrack’s functionality and add new features, tools, and integrations that aren’t available out of the box.\nFollowing this latest update, Text-to-Issue Transformation is also now available thanks to the power of AI. You can now effortlessly create tasks from any selected text. The AI scans your text for actionable items and enables you to convert them into issues with just a few clicks. This gives you the flexibility to quickly generate new issues whenever you need them, streamlining your workflow like never before. \nLet’s take a closer look at what’s available with this major update.\nCustomize YouTrack with apps\n\n\n\n\nWhat are YouTrack apps?\nApps extend and customize YouTrack so that it works exactly the way your team needs it to. They are small programs that project administrators can install into YouTrack to enhance or change its functionality. Apps may include workflows that automate some processes, or they can be designed to change the way YouTrack behaves – for example, they may add action buttons or widgets in various parts of your task view, as well as articles or even an additional section in the top bar menu leading to a separate page.\nApps can work as a connector between different systems. For example, this means you can get snapshots of data from an external source by registering a webhook (e.g., your customer data platform) in your customer tickets in the helpdesk or add buttons that transform the information from YouTrack and export it to a dashboard on your corporate portal – the possibilities are endless.\nApps functionality is available to both YouTrack Cloud and YouTrack Server customers. As a result, YouTrack is now even more flexible. If you need to extend YouTrack with some functionality that is not yet available out of the box, one option would now be to explore whether you could do this by building an app.\n\n\n\n\nWhere to get Apps\nUse the preinstalled Apps\nSeveral apps come bundled with YouTrack by default. They are intended to provide the functionality that used to be available via default workflows and widgets for dashboards. In the Administration – Apps menu, you will see apps that can be used to import tasks and projects from various sources, such as Jira Migration Manager, Widgets for Dashboards, as well as the other various predefined workflows that you can choose to enable for your projects. All your previously added workflows will also be displayed here, enabling admins to manage everything in one place.\n\n\n\n\nDashboard widgets\nWith this release, dashboard widgets are now taken care of by apps. This simplifies the management of widgets and also opens up new customization possibilities. Widgets can now be more easily modified or extended through apps, giving you greater control over how information is displayed on your dashboards.\n\n\n\n\nBrowse JetBrains Marketplace\nBeyond the default apps included with YouTrack, JetBrains has also developed several other apps that can already be downloaded for free from JetBrains Marketplace.\nThe Article Feedback app adds a widget that lets you collect and analyze reader feedback for articles in the YouTrack Knowledge Base.\nThe Vote Histogram app displays a visualization of voting activity over time for a specific issue.\nThe Slack User Status app adds a Slack widget to user cards. The widget displays the user’s name and title, their current status, and includes a button that you can click to open a direct message in your Slack workspace.\nBelow, you’ll find some examples of the apps that have been created by our partners and customized according to their clients’ needs.\nMulti-Sprint Planner for software developers by twenty20\nThis app helps software development teams working on scrum boards manage sprints and backlogs more easily. It adds a new section to YouTrack’s main menu where multiple sprints can be viewed at once – one sprint per lane. With such a view, it’s easier to structure the project into multiple sprints and better organize the development process.\nPlease feel free to check the app – it’s available in the JetBrains Marketplace for free.\n\n\n\n\nExtension for YouTrack for legal teams by AgiLawer\nFor the needs of legal teams, YouTrack consulting partner AgiLawyer recommends integrating YouTrack with LegiSpace, a platform that centralizes information and seamlessly connects with multiple other tools. This powerful combination simplifies daily operations by streamlining legal management processes, such as client case management, reporting of billable hours, invoicing, and many more, all enhanced by the LegiSpace app within YouTrack. The Legispace app connects the YouTrack task to the customer profile and the cases and documents in the Legispace app.\nIf you’re interested in expanding YouTrack’s capabilities for your legal needs, reach out to the AgiLawyer team for a demo to see how customization can benefit you.\n\n\n\n\nEveryone is welcome to publish any apps they’ve created on JetBrains Marketplace. When an app is submitted, the JetBrains team will check it, and once it has been successfully verified, the app will be made available for anyone to install. We hope that with the help of our strong user community, the collection of available apps will continue to grow.\nBring your app requests to your consulting partners or to the YouTrack team\nIn addition to those published on Marketplace, you can always create an app yourself or use one created by a consulting partner based on your needs and set it up directly in your YouTrack. Creating apps requires some coding experience. If you need a custom solution tailored to your company’s requirements but don’t have that resource in your team, please feel free to reach out to our consulting partners for help. When your YouTrack is upgraded to the 2024.3 version, the option for setting up apps becomes available automatically.\nYou can also share your business requirements with the YouTrack Support team, and we’ll discuss if it is possible to create a solution for you with our paid premium support service.\nMaking the app available for your team\nEach app can be used for your entire YouTrack instance on the global level or enabled for specific projects only. Administrators can manage the users and groups who will have access to an app by using visibility controls. YouTrack apps have a set of options that you can use to restrict visibility for certain users.\nCreate your own app\nYou can start developing your app right away. Here are some resources for getting started.\nBrowse through our documentation, including the Quick Start Guide for app creators.\nCheck out the sample app for reference, which you can then upload to your YouTrack. Please refer to this part of the documentation to help you install the demo app. This example will give you hands-on experience with the basic structure and functionality of an app, allowing you to see firsthand how modules are implemented and how they interact with YouTrack’s existing features. For example, it adds widgets directly to your task above custom fields, quotes to the top and bottom in the description, a toolbar in the Show more section, and a Main menu item.\nWhen your app is ready, you can choose to restrict its use to internal personnel only, share it with your customers directly, or publish it to JetBrains Marketplace for everyone to download.\nApp monetization and next steps\nWe have only just made apps available, so the collection of ready-to-download apps is still relatively small. However, we are confident that it will soon grow with the effort of our community, partners, and the JetBrains team. Furthermore, we hope that apps will help speed up the implementation of requested features from our YouTrack public issue tracker.\nFor now, all the apps available on JetBrains Marketplace can be downloaded for free. For newly created apps, it’s now possible to publish the app to JetBrains Marketplace so it’s free to download for everyone. However, if you have billing set up on your side, it’s also possible to have monetization built in as part of an app. \nIn time, we’re planning to add an option to publish paid apps, enabling app authors to be remunerated for the custom solutions they provide, though there is no firm date for introducing this option yet.\nWe at the YouTrack team will be happy to collaborate with app authors by inviting our technological and consulting partners to share information about brilliant, complex apps in our media to encourage customers to reach out to you for the paid version. Please feel free to contact us to discuss this opportunity further.\nText-to-Issue Transformation\nThe power of AI has made it possible to implement one of the most hotly anticipated functionalities in our roadmap, allowing users to create new tasks in seconds. With this feature, you can scan selected text for possible action items, choose which ones to transform into issues, and finally create them all at once.\n\n\n\n\nAdditionally, you can use the selected text to generate new issues. This helps to quickly create a hierarchy of tasks and subtasks for them using the meta issue.\n\n\n\n\nGeneric VCS Integrations\nSoftware development teams frequently use integrations with popular VCS systems available out of the box. With this in mind, we have added an option to integrate with VCS besides those included in the list.\nYou can now manually attach commits to issues in YouTrack, ensuring that your development process stays organized and transparent. Additionally, you can programmatically add links using webhooks.\n\n\n\n\nUI enhancements\nSeveral pages in YouTrack have been tidied up and polished. This includes dashboards, the project list, and the workflow administration page.\n \nCheck out the release notes for the full technical details and a comprehensive list of bug fixes and improvements in this release. For details on configuring the latest features, see the documentation.\nIf you use YouTrack Cloud, you’ll automatically be upgraded to YouTrack 2024.3 in accordance with our Maintenance Calendar. If you have an active YouTrack Server subscription, you can download YouTrack 2024.3 today. If you don’t already have a license, you can use the free trial to test out the new version before you commit to buying! For more information about the licensing options available for YouTrack, please visit our Buy page.\nWe always appreciate your feedback. Please share it in the comments below, and don’t hesitate to contact our Support team if you have any questions. We’re always here to help!\nYour YouTrack team",
        "dc:creator": "Elena Pishkova",
        "content": "With the new YouTrack 2024.3 release, one of the most hotly anticipated functionalities in the YouTrack roadmap – apps – goes live! Apps help teams customize YouTrack to fit their specific needs, improving project management, reporting, automation, and integration with other tools. You can now use and create apps to extend YouTrack’s functionality and add [&#8230;]",
        "contentSnippet": "With the new YouTrack 2024.3 release, one of the most hotly anticipated functionalities in the YouTrack roadmap – apps – goes live! Apps help teams customize YouTrack to fit their specific needs, improving project management, reporting, automation, and integration with other tools. You can now use and create apps to extend YouTrack’s functionality and add […]",
        "guid": "https://blog.jetbrains.com/?post_type=youtrack&p=505003",
        "categories": [
          "features",
          "news",
          "releases",
          "apps",
          "youtrack-cloud",
          "youtrack-server"
        ],
        "isoDate": "2024-09-17T16:24:33.000Z"
      },
      {
        "creator": "Mala Gupta",
        "title": "Java 23 and IntelliJ IDEA",
        "link": "https://blog.jetbrains.com/idea/2024/09/java-23-and-intellij-idea/",
        "pubDate": "Tue, 17 Sep 2024 15:30:11 +0000",
        "content:encodedSnippet": "New and updated Java language features, core API, and the JVM – Java 23 packs it all – for new Java developers to senior developers. IntelliJ IDEA 2024.2 is ready with its support for Java 23 features.\nKeeping pace with new Java version releases could be difficult – what changed, why, and how to use new and updated features. In this blog post, I’ll cover some of the new and updated features in Java 23 – the pain points they address for you, their syntax and semantics, and how IntelliJ IDEA can help you to use them.\nI’ll highlight Java 23 features, such as the inclusion of the primitive data types in pattern matching, the ability to import modules in code bases, the possibility to use Markdown in documentation comments, implicitly declared classes and instance main methods, and Flexible Constructor Bodies. If you are interested, this link includes a list of other Java 23 features.\nLet’s quickly configure IntelliJ IDEA before deep diving into the details of Java 23 features.\nIntelliJ IDEA Configuration\nJava 23 support is available in IntelliJ IDEA 2024.2, released recently.\nIn your Project Settings, set the SDK to Java 23. You can both configure IntelliJ IDEA to use a downloaded version of JDK 23, or select to download it from a list of vendors, without exiting the IDE. For the language level, select ‘23(Preview) – Primitive types in patterns, implicitly declared classes, etc.’, as shown in the screenshot below:\n\n\n\n\nTo use production feature, such as, Markdown documentation comments, change the language level, to ‘23 – Markdown documentation comments.’, as shown in the below settings screenshot:\n\n\n\n\nWith the IntelliJ IDEA configuration under your belt, let’s deep dive into learning the new features. \nPrimitive Types in Patterns, instanceof, and switch (Preview Feature)\nImagine you need to write a conditional construct that executes code based on whether the value of a long variable matches a few literal values, or falls in a range of values. \nHow would you do that? Until now, you could only use an if/else construct to do so. But, with Java 23, Primitive Types in Patterns, instanceof, and switch, a preview language feature, you could code this functionality using the more expressive and easy-to-read switch constructs, using long values in the case labels. \nWhat does it mean to add primitive types to Pattern Matching?\nUntil Java 23, switch constructs (statements and expressions) worked with reference variables and some primitives data types, such as int, byte, short (with constraints). Also, the instanceof operator couldn’t be used with any primitive data type. \nWith Java 23, you will be able to use ALL the primitive data types, including boolean, long, float, double and long, with pattern matching in Switch constructs and instanceof operators. This applies to using it in nesting and top level contexts. \nWhy should you care about this feature? The worth of a feature depends on how large the codebase it affects and how often. Since conditional statements are one of the basics of programming, you could expect to see usage of this feature a lot in your codebase. Even if you might not write the code, you would read code written by someone else.\nLet’s understand this feature using an example.\nAn example (replacing long if-else statements with switch expression)\nImagine a method, say, getHTTPCodeDesc(int), accepts an HTTP server code as an int value and returns a corresponding String representation, checking it against a literal value or a range of values. \nThere doesn’t seem to be any obvious issue with this code – we all have either written or read similar code. However, it might take longer to process the flow of an if-else construct because they COULD define complicated conditions that are NOT limited to just one variable. Let’s keep it simple and assume that the method getHTTPCodeDesc() is defined as follows: \npublic String getHTTPCodeDesc(int code) {\n   if (code == 100) {\n       return \"Continue\";\n   } \n   else if (code == 200) {\n       return \"OK\";\n   } \n   else if (code == 301) {\n       return \"Moved permanently\";\n   } \n   else if (code == 302) {\n       return \"Found\";\n   } \n   else if (code == 400) {\n       return \"Bad request\";\n   } \n   else if (code == 500) {\n       return \"Internal server error\";\n   } \n   else if (code == 502) {\n       return \"Bad gateway\";\n   } \n   else if (code > 100 && code < 200) {\n       return \"Informational\";\n   } \n   else if (code > 200 && code < 300) {\n       return \"Successful\";\n   } \n   else if (code > 302 && code < 400) {\n       return \"Redirection\";\n   } \n   else if (code > 400 && code < 500) {\n       return \"Client error\";\n   } \n   else if (code > 502 && code < 600) {\n       return \"Server error\";\n   } \n   else {\n       return \"Unknown error\";\n   }\n}\nIn Java 23, the preceding code could be replaced using a switch expression (using primitives as patterns), as follows:\npublic String getHTTPCodeDesc(int code) {\n    return switch(code) {\n        case 100 -> \"Continue\";\n        case 200 -> \"OK\";\n        case 301 -> \"Moved Permanently\";\n        case 302 -> \"Found\";\n        case 400 -> \"Bad Request\";\n        case 500 -> \"Internal Server Error\";\n        case 502 -> \"Bad Gateway\";\n        case int i when i > 100 && i < 200 -> \"Informational\";\n        case int i when i > 200 && i < 300 -> \"Successful\";\n        case int i when i > 302 && i < 400 -> \"Redirection\";\n        case int i when i > 400 && i < 500 -> \"Client Error\";\n        case int i when i > 502 && i < 600 -> \"Server Error\";\n        default                            -> \"Unknown error\";\n    };\n}\nThe first obvious benefit in the preceding code is that it is much easier to read and understand than the version that uses if-else statements. You can understand the code logic at a glance. \nAnother not-so-obvious benefit (but an important one) is how the preceding code decreases the cognitive load for you. Cognitive load refers to the amount of information you have in your working memory (working memory space is limited). If you try to overload your working memory with instructions or information not directly related to your end goal then your productivity drops. Code snippets that are easier to read help you focus your attention on other areas of the code. Such small wins help a lot when we talk about how often we could benefit from them.\nLet’s talk about the simple parts now, I mean the syntax. As you can notice, the case labels can have both – constant values (such as 100, 200, etc.) and also a range of values specified using pattern matching, using type patterns (int i) with guards (when i > 100 && i < 200). You can also define a default clause.\nIn the preceding code, the method getHTTPCodeDesc() returns a value using the switch expression. Irrespective of the value that you pass to the method parameter, that is, code, the method must return a value. In other words, the switch expression must be exhaustive. If it isn’t IntelliJ IDEA can detect it and offer the addition of the default clause, as shown in the following GIF:\n\n\n\n\nThe preceding code switches on a variable of type int. Similarly you can switch on variables of all the other primitive types, such as, long, double, float, etc.\nAre you new to Pattern matching or recent changes to the switch construct?\nIf you are completely new to Pattern Matching, check out the section on its basics in my blog post Java 17 and IntelliJ IDEA. If you are interested in how Pattern Matching is being used with the switch constructs, I have another detailed blogpost on this topic: Evolution of the Switch Construct in Java—Why Should you Care? It covers how switch constructs use pattern matching to check reference values against different patterns and execute code conditionally, depending on the type of variable and its attributes.\nUsing pattern matching with boolean values\nIt is common to read and write code that returns a value based on whether the value of a boolean variable is true or false. For example, in the following code, the method calculateDiscount, calculates and returns a discount value depending on whether you pass true or false to the method parameter isPremiumMember:\npublic class DiscountCalculator {\n    private static final int PREMIUM_DISCOUNT_PERCENTAGE = 20;\n    private static final int REGULAR_DISCOUNT_PERCENTAGE = 5;\n\n    public int calculateDiscount(boolean isPremiumMember, int totalAmount) {\n        int discount;\n        if (isPremiumMember) {\n            // Calculate discount for premium members\n            discount = (totalAmount * PREMIUM_DISCOUNT_PERCENTAGE) / 100;\n        } else {\n            // Calculate discount for regular members\n            discount = (totalAmount * REGULAR_DISCOUNT_PERCENTAGE) / 100;\n        }\n        return discount;\n    }\n}\nInstead of an if-else construct, you can switch over the value of the boolean method parameter isPremiumMember, without requiring the definition of the local variable discount, as follows:\npublic int calculateDiscount(boolean isPremiumMember, int totalAmount) {\n    return switch (isPremiumMember) {\n        case true -> (totalAmount * PREMIUM_DISCOUNT_PERCENTAGE) / 100;\n        case false -> (totalAmount * REGULAR_DISCOUNT_PERCENTAGE) / 100;\n    };\n}\nSince the switch expression in the method calculateDiscount() is exhaustive, if you miss any of the true or false values, IntelliJ IDEA can detect it and suggest you to insert a default or the missing true/ false case, as shown in the following gif:\n\n\n\n\nUsing primitive types with the instanceof operator \nUntil Java 23, none of the primitive types could be used with the instanceof operator.\nThe instanceof operator can be used to check the type of a variable, and execute code conditionally. With pattern matching for instanceof, you could also declare and initialize pattern variables if the type of a variable being compared matched without the type pattern without the need for an explicit casting. The instanceof variable can also use guard patterns.\nWith the addition of primitive types to the instanceof operator, you could define code such as the following:\nimport static java.io.IO.println;\n\nvoid main() {\n    var weight = 68;\n    if (weight instanceof byte byteWeight && byteWeight <= 70) {\n        println(\"Weight less than 70\");\n    }\n}\nNote that the feature Implicitly declared classes and instance main method in Java 23 defines java.io.IO with static methods that allows you to import it and use println() to output values to console, rather than using System.out.println() to do so.\nIf you plan to check for more types and conditions, you could use a switch construct with guard, as follows:\nvar weight = 68;\n\nswitch (weight) {\n    case byte b when b <= 70                    -> println(\"byte: less than 70\");\n    case int i  when i <= 700                   -> println(\"int: less than 7000\");\n    case long l when l >= 7_000 && l <= 70_000  -> println(\"long range: 7_000 - 70_000\");\n    case double d                               -> println(\"double\");\n}\n \nSafe conversion between data types \nWhen you use pattern matching with primitive data types, the Java compiler ensures that there is no loss of information. In the following example, the instanceof operator can convert between the double and byte data types when it detects it is safe to do so:\ndouble height = 67;\n\nif (height instanceof byte byteHeight)\n    System.out.println(byteHeight);\nSimilar code wouldn’t execute without an instanceof operator. The following code won’t compile:\ndouble height = 67;\n\nfinal byte convertToByte = height;\nRobust data flow analysis in IntelliJ IDEA\nIntelliJ IDEA offers robust support for primitive types in switch statements, and it also integrates sophisticated data-flow analysis to help developers avoid common issues. As shown in the following example, the data-flow analysis in IntelliJ IDEA can determine that the second case label, that is, case int _ and the rest of the case labels are not reachable (since the code exits from the method if the value of the variable weight is more than 70). IntelliJ IDEA warns you about unreachable code and offers appropriate suggestions:\n\n\n\n\nRecords and primitives data type components\nImagine you define a record Person as follows:\nrecord Person(String name, double weight) {}\nUntil now, you could decompose it to the exact data types. However, with this feature you could use other compatible data types, such as, int, long etc. Here is an example:\nPerson person = new Person(\"Java\", 672);\n\nswitch (person) {\n    case Person(String name, byte weight) -> println(\"byte:\" + weight);\n    case Person(String name, int weight) -> println(\"int:\"  + weight);\n    case Person(String name, double weight) -> println(\"double:\" + weight);\n    case Person(String name, long weight) -> println(\"long:\" + weight);\n    default -> throw new IllegalStateException(\"Unexpected value: \" + person);\n}\nYou could use it with the instanceof operator too, as follows:\n if (person instanceof Person(String name, byte weight)) {\n     System.out.println(\"Instanceof : \" + weight);\n }\nWhat’s next in IntelliJ IDEA to support this feature\nMore support on the primitive data types in Pattern Matching is in works, including the ability to use the postfix operator .switch on all the primitive data types to start writing a switch construct. Support is also in works to convert an existing if-else statement to a switch construct that uses primitive data types – so that it is more easier for you to adopt this new feature.\nMarkdown documentation comments (Production feature)\nUntil now the Java documentation comments were coded using HTML and JavaDoc tags. With this new feature, that is, \n\nDocumentation comments, you’ll also be able to use Markdown to write the JavaDoc comments. This is a production feature in Java 23.\nAre you wondering what is the reason for this change?\nOne of the reasons is that HTML is no longer a popular choice with new developers (even though it was a great choice back when Java was introduced in the late 1990s). It is not simple to write HTML manually. Also, Markdown is easier to write, read, and can be easily transformed to HTML. A lot of developers are using Markdown to document their code, write books, articles, blog posts, generate website pages, and much more. \nLet’s see how you can use Markdown to write Javadoc comments in your source code file and how IntelliJ IDEA can help.\nAn example\nThe Markdown documentation comments start with ///. \nThe choice for using three black slashes is interesting. Jonathan Gibbons, owner of this feature at Oracle, shared that it is not an easy task to change the syntax of features in the Java language. Multiline comments start with /* and end with */. This makes it difficult to include any code in the documentation that might include */. Hence, the Markdown documentation comments start with ///. \nThe old way of writing the documentation comments, that is, HTML and JavaDoc tags are supported too. Jonathan also mentioned that it was not feasible to convert JavaDoc tags to the Markdown equivalent. So, the developers can use a combination of Markdown comments and JavaDoc tags to get the best of both worlds.\nHere’s an example that uses Markdown and Javadoc tags for documenting a method:\n///\n/// **Getting started and having fun learning Java :)**\n///\n/// Prints a pattern of the letter 'P' using the specified character.\n///\n/// @param size the size of the pattern\n/// @param charToPrint the character to use for the pattern\n///\nprivate void printP(int size, char charToPrint) {\n    for (int i = 0; i < size; i++) {\n        for (int j = 0; j < size; j++) {\n            if (j == 0 || (i == 0 || i == size / 2) && j < size - 1 || (j == size - 1 && i <= size / 2)) {\n                System.out.print(charToPrint + \" \");\n            } else {\n                System.out.print(\"  \");\n            }\n        }\n        System.out.println();\n    }\n}\nIntelliJ IDEA can help you switch between your views in the editor and check how the documentation comments would appear to anyone reading the Java documentation comments.\nViewing Java Documentation comments in IntelliJ IDEA\nJonathan Gibbons, owner of the JEP ‘Markdown Documentation Comments’ emphasized the need for all developers to check if the Java documentation comments they added to their codebase are correct. \nIntelliJ IDEA provides a ‘Reader mode’ that enables you to view Java documentation comments in your source code. You can also switch between the Java documentation comments code and how it is viewed using the feature ‘Toggle Rendered View’, as shown in the following gif:\n\n\n\n\nWriting Markdown Documentation Comments in IntelliJ IDEA\nIntelliJ IDEA can detect you are using Markdown to document a method. When you start with /// and hit Enter, it will add /// on the next line too, as shown in the following GIF:\n\n\n\n\nShould you convert your existing documentation comments to use Markdown?\nHere’s a gif showing the documentation of the method hashCode written using markdown in IntelliJ IDEA. Using ‘Toggle Rendered View’ you can easily view the documentation in the reader view, which is much easier to read and understand. \n\n\n\n\nIdeally, I wouldn’t encourage you to convert your existing documentation to using Markdown, unless your developers or API users have major readability issues when they are viewing your (API, libraries, Framework) code base using tools that don’t offer an alternate view like IntelliJ IDEA. \nModule Import Declarations (Preview Feature)\nWith this feature, you can import a module library like the Java API in your class or interface using a single statement, such as, import module java.base, which will import all the packages that are exported by module java.base. \nYou wouldn’t need separate import statements to import packages like java.util, or say, java.io in your class because these are exported by java.base.\nAn example\nThe following code example uses classes from the package java.io and java.util. By including the statement ‘import java.base’, you don’t need to import the java.io and java.util packages individually since they are exported by the module java.base:\nimport module java.base;\npublic class ImportModuleHelloWorld {\n\n    public static void main(String[] args) {\n\n        try {\n            InputStream inputStream = new BufferedInputStream(\n                                            new FileInputStream(\n                                                   new File(\"abc.txt\")));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n\n        Map<String, String> list = new HashMap<>();\n    }\n}\nHowever, if you delete the import module statement from the top, IntelliJ IDEA will import individual classes and interfaces from the packages java.io and java.util. This is shown in the following GIF:\n\n\n\n\nWhich packages are exported by the module java.base (or other modules)?\nIt is simple to answer this question when you are using IntelliJ IDEA. Click on the module name in the editor or use the relevant shortcut (Go to Declaration or Usages) and you could view the definition of this module to find out all the modules exported by this module. This is shown in the following gif:\n\n\n\n\nImplicit Declared classes and Instance Main methods (Third Preview)\nIntroduced as a preview language feature in Java 21, this feature is in its third preview in Java 23.\nIt is here to change how new Java developers would get started learning Java. It simplifies the initial steps for students when they start learning basics, such as variable assignment, sequence, conditions and iteration. Students no longer need to declare an explicit class to develop their code, or write their main() method using this signature – public static void main(String []). With this feature, classes could be declared implicitly and the main() method can be created with a shorter list of keywords.\nIf you are new to this feature, I’d highly recommend you to check out my detailed blog post: ‘HelloWorld’ and ‘main()’ meet minimalistic on this feature. In this section, I’ll include the additions to this feature in Java 23. \nUsing packages exported by module java.base without importing them explicitly\nBy including just one import statement, that is, import module java.base, at the top of your implicit class, you’ll be able to automatically import the packages exported by java.base. This means that your implicit class will no longer need individual import statements for these classes or packages, as shown in the following gif:\n\n\n\n\nSimplifying code to write to interact with the console\nInteraction with the console – printing messages, or consuming messages is one of the frequently used actions by new Java developers. This has been simplified further in this feature.  \nYour implicitly declared classes can output messages to he console by using methods println() and print() and read String messages using the readln() method without explicitly importing them in your class. All these methods are declared in a new top-level class java.io.IO, which is implicitly imported by implicit classes.\nTake a moment and see and how you need to explicit import them in a regular class, as shown in the following GIF:\n\nThe following gif shows you doesn’t need explicit imports when you use the same previous methods in an implicit class:\n\nFlexible Constructor Bodies (Second Preview)\nThis is the second preview of a feature in JDK 22, previously called “Statements before super()”. Apart from the change in the feature name, this feature has an important change. It is now possible to initialize fields before calling super() or this(). \nThis is useful when a superclass calls a method from its constructor and you want to override this method in a subclass and want to access a field from the subclass inside this method. Previously, the subclass field would not be initialized when the method was called from the superclass constructor. Now it is possible to initialize the field and prevent surprises. Here’s an example code to show this feature:\nabstract class Action {\n    public Action() {\n        System.out.println(\"performing \" + getText());\n    }\n    public abstract String getText();\n}\n\nclass DoubleAction extends Action {\n    private final String text;\n    private DoubleAction(String text) {\n        this.text = text; // this did not compile before Java 23 with preview features enabled.\n        super();\n    }\n\n    @Override public String getText() {\n        return text + text;\n    }\n}\nIf you are new to this feature, don’t miss checking out my detailed blog post on this feature, https://blog.jetbrains.com/idea/2024/02/constructor-makeover-in-java-22/, which talks about the why and how of this feature.\nPreview Features\n\n\nOf the features that I covered in this blog post, ‘Primitive Types in Patterns, instanceof, and switch’, ‘Modeule Import Declarations’, ‘Implicitly Declared Classes and Instance Main Methods’ and ‘Flexible constructor bodies’ are preview language features in Java 23. With Java’s new release cadence of six months, new language features are released as preview features. They may be reintroduced in later Java versions in the second or more preview, with or without changes. Once they are stable enough, they may be added to Java as a standard language feature.\n\n\nPreview language features are complete but not permanent, which essentially means that these features are ready to be used by developers, although their finer details could change in future Java releases depending on developer feedback. Unlike an API, language features can’t be deprecated in the future. So, if you have feedback about any of the preview language features, feel free to share it on the JDK mailing list (free registration required).\n\n\nBecause of how these features work, IntelliJ IDEA is committed to only supporting preview features for the current JDK. Preview language features can change across Java versions, until they are dropped or added as a standard language feature. Code that uses a preview language feature from an older release of the Java SE Platform might not compile or run on a newer release.\nSummary\nIn this blog post, I covered five Java 23 features – Primitive Types in Patterns, instanceof, and switch, Markdown Documentation Comments, Module Import Declarations, Implicitly Declared Classes and Instance Main Methods, and Flexible constructor bodies.\nCheck out these new features to find out how they can help you improve your applications.\nHappy Coding!",
        "dc:creator": "Mala Gupta",
        "content": "New and updated Java language features, core API, and the JVM &#8211; Java 23 packs it all &#8211; for new Java developers to senior developers. IntelliJ IDEA 2024.2 is ready with its support for Java 23 features. Keeping pace with new Java version releases could be difficult &#8211; what changed, why, and how to use [&#8230;]",
        "contentSnippet": "New and updated Java language features, core API, and the JVM – Java 23 packs it all – for new Java developers to senior developers. IntelliJ IDEA 2024.2 is ready with its support for Java 23 features. Keeping pace with new Java version releases could be difficult – what changed, why, and how to use […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=510740",
        "categories": [
          "idea",
          "java",
          "intellijidea",
          "java23",
          "news",
          "whatsnew-2"
        ],
        "isoDate": "2024-09-17T15:30:11.000Z"
      },
      {
        "creator": "Maarten Balliauw",
        "title": "Building a GraphQL Client in .NET with JetBrains Rider and StrawberryShake",
        "link": "https://blog.jetbrains.com/dotnet/2024/09/17/building-a-graphql-client-in-net-with-jetbrains-rider-and-strawberryshake/",
        "pubDate": "Tue, 17 Sep 2024 14:16:24 +0000",
        "content:encodedSnippet": "Many teams are using GraphQL for their API needs, thanks to its powerful query language and flexibility. Unlike traditional REST APIs, GraphQL lets you fetch the data you need in a single request, making your applications more efficient and responsive.\nHowever, it can be daunting getting started creating schemas, writing queries, and integrating GraphQL into your .NET application. Using JetBrains Rider’s GraphQL plugin and the StrawberryShake framework, building an application that consumes a GraphQL API is not that hard. \nIn this blog post, we’ll discuss setting up your environment, defining schemas, generating client code, and seamlessly integrating it all into a sample project. Here we go!\nDownload JetBrains Rider\n                                                    \nWhat is GraphQL?\nBefore we dig into building a sample application, let’s quickly recap GraphQL and its benefits. GraphQL, developed by Facebook in 2012 and open-sourced in 2015, is a query language for APIs and a runtime for executing queries based on a user-defined type system.\nIf you have been a .NET developer for a while, you may have already worked with OData. Conceptually, GraphQL is similar in that it lets you request exactly the data you need from an API, eliminating the typical over-fetching or under-fetching issues you may see in REST APIs. For example, in a typical REST API, you may want to retrieve customer data and either need to make a second request to get their address details or always get the address details in the response, even when they’re not always required..\nUnlike most REST APIs, a GraphQL API exposes a single endpoint you can query for any data you need. The endpoint can define several operations, all of which are self-documenting through a schema. A schema provides a comprehensive and queryable description of the API structure, types, and available operations. The schema also defines types and relationships between them, ensuring clients know exactly what data is available and receive helpful error messages when things go wrong.\nThere are a few concepts to keep in mind throughout this post:\nQueries – These are used to fetch data from the server, similar to GET requests in REST, but much more powerful thanks to their flexibility in fetching nested and related data in a single request.\nSubscriptions – These are used to subscribe to data from the server, and return new data or updates from the server when new data is available.\nMutations – Used to modify data on the server (e.g., creating, updating, deleting records), similar to POST, PUT, or DELETE in REST.\nSchema – defines the types and relationships in your API, specifying what queries and mutations are available. It ensures both the client and the server agree on the data structure and types.\nOne more thing to cover: when implementing a GraphQL API, you have two transport protocols to consider for data exchange: HTTP and WebSockets. HTTP is typically used for traditional query and mutation operations, where clients send HTTP GET and POST requests to the GraphQL server and receive responses containing the requested data. This method is straightforward and works well for most cases where data changes are infrequent or do not need to be immediately reflected on the client.\nOn the other hand, WebSockets are used for real-time applications requiring instant updates, such as live chat, online gaming, or real-time dashboards. GraphQL subscriptions use WebSockets to maintain a persistent connection between the client and the server, enabling the server to push updates to the client as soon as data changes occur. This reduces latency and provides a more responsive user experience compared to polling mechanisms often used with HTTP.\nChoosing between HTTP and WebSockets depends on your application’s specific requirements. For most standard operations, HTTP is sufficient and simpler to implement. However, for real-time data updates, integrating WebSockets with GraphQL subscriptions can significantly enhance your application’s interactivity and responsiveness. Also, both transports can be used in conjunction when building solutions. In this post, we’ll use an HTTP endpoint as our example to work with.\nNote: If you want to learn more about how REST, GraphQL, and gRPC compare, check out this talk from JetBrains .NET Days Online by Poornima Nayar.\nWhat is StrawberryShake?\nNow, let’s talk about StrawberryShake. This open-source .NET library simplifies building GraphQL clients by generating strongly-typed client-side code from your GraphQL schema and queries. This means less boilerplate and more focus on what matters – your application logic.\nIt uses source generators to generate all the client-side code based on the GraphQL schema you define or introspect from a GraphQL API.\nPrerequisites\nLet’s transition into a practical example. First, let’s make sure you have the GraphQL plugin installed in JetBrains Rider. This plugin is necessary for providing syntax highlighting, validation, and auto-completion for GraphQL schemas and queries, streamlining your development process.\nOpen JetBrains Rider and bring up the Settings/Preferences menu. Go to Plugins in the left-hand sidebar, and search for “GraphQL” in the Marketplace tab. Click Install to add the plugin to your Rider setup. You may need to restart Rider to activate the plugin.\n\n\n\n\nWe’re ready to jump into creating our project and setting everything up in JetBrains Rider. Let’s get to work!\nCreating the project in Rider\nLet’s look at what we’ll build first. Since we’re focusing on building a GraphQL client, we’ll need an API to interact with. We’re in luck, because there are plenty of GraphQL APIs available. In this blog post, we’ll use Trevor Blades’ Countries GraphQL API, which provides data about countries around the world. The sample application will be a page that shows information about the countries included in that API, and a way to get more details for each.\nThe countries API endpoint is available at https://countries.trevorblades.com/, which exposes a playground where you can test your queries against it.\nNote: Michael Staib, founder of ChilliCream (the company that also builds the StrawberryShake project we use in this blog post) was a guest in one of our livestreams to talk about building a GraphQL server with ASP.NET Core and HotChocolate.\nIn JetBrains Rider, create a new Web App project using the Razor Pages template. Give it a name, such as the very original “Countries” I used here:\n\n\n\n\nWhile not required, for this sample, I removed some of the default CSS in the project and included PicoCSS – a great small CSS framework that makes any web page look nice. Here’s my updated _Layout.cshtml:\n<!doctype html>\n<html lang=\"en\">\n<head>\n   <meta charset=\"utf-8\">\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <meta name=\"color-scheme\" content=\"light dark\">\n   <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@@picocss/pico@2/css/pico.min.css\" />\n   <link rel=\"stylesheet\" href=\"~/css/site.css\" asp-append-version=\"true\" />\n   <title>@ViewData[\"Title\"] - Countries</title>\n</head>\n<body>\n<main class=\"container\">\n   <header>\n       <nav>\n           <ul>\n               <li><strong>Countries</strong></li>\n           </ul>\n           <ul>\n               <li><a href=\"/\">Index</a></li>\n           </ul>\n       </nav>\n   </header>\n   @RenderBody()\n</main>\n\n\n<script src=\"~/js/site.js\" asp-append-version=\"true\"></script>\n\n\n@await RenderSectionAsync(\"Scripts\", required: false)\n<script type=\"module\" defer>\n import { polyfillCountryFlagEmojis } from \"https://cdn.skypack.dev/country-flag-emoji-polyfill\";\n polyfillCountryFlagEmojis();\n</script>\n</body>\n</html>\nYou can also clone a copy of this project from GitHub, and explore individual commits if you want to follow along.\nWorking with GraphQL in Rider\nTime for GraphQL! In your C# project, use the context menu to add a new GraphQL Config file and paste the following contents into it:\nschema: schema.graphql\nextensions:\n endpoints:\n   production:\n     url: https://countries.trevorblades.com/graphql/\n     headers:\n       Authorization: Bearer ${TOKEN}\ndocuments: '**/*.graphql'\nThis graphql.config.yml file will be used by Rider to access the schema for the countries API, and generate queries that can be executed inside the IDE. This configuration file also defines one or more endpoints, and potential headers required to access an endpoint, such as authorization headers. The countries API doesn’t require authentication, but we’ll see in a second why I added it here anyways.\nIn the left-hand gutter, right next to the production endpoint, you’ll see a Run icon:\n\n\n\n\nClick it to run an introspection of the remote schema. When you do, you’ll see a popup that lets you enter an authorization token. You can skip it, but this is why I added the ${TOKEN} placeholder earlier: to show you how to add variables into the GraphQL configuration.\nWhen finished, a schema.graphql file is automatically added to your project, listing all the types, fields, and operations exposed by the countries API. Note the toolbar at the top of the editor: you can switch to a different endpoint if you have e.g. a staging and production GraphQL API to work with, and there’s a Refresh button to re-run schema introspection and update the types, fields, and operations in the API.\n\n\n\n\nThe toolbar also contains a Run button, which is not very useful yet. Let’s change that! In our application, I’d like to show a list of all countries with their country code, name, and flag image. Add a new file called listcountries.graphql, and paste the following query into it:\nquery ListCountries {\n   countries {\n       code\n       name\n       emoji\n   }\n}\nThis snippet defines a GraphQL query (named “ListCountries”) that retrieves information from a collection on the API endpoint called “countries”. This query returns an array of Country elements, and each contains the code, name, and emoji. Note that you can Cmd+Click or Ctrl+Click on the name to navigate to the schema’s definition of available data and collections.\nNow is a good time to try the Run button in the editor. You’ll see Rider opens a tool window showing the query result:\n\n\n\n\nWhile we’re creating queries in Rider, let’s add one more file: getcountry.graphql, and paste the following contents into it:\nuery GetCountry($countryCode: ID!) {\n   country(code: $countryCode) {\n       code\n       name\n       emoji\n       capital\n       currency\n       languages {\n           code\n           name\n       }\n       ...Continent\n   }\n}\n\n\nfragment Continent on Country {\n   continent {\n       code\n       name\n   }\n}\nThis query will be used in our sample application to display details for a specific country. The query is named GetCountry, and requires a parameter $countryCode. It then requests data from the GraphQL API, requesting a country (by $countryCode) and returning various fields of information from it.\nAnother interesting bit in this query is that we’re not only fetching the country data but also its related continent. If you do not need that data, you can keep it out of the query and get a smaller response payload size. You will also see the fields queried for a continent are defined as a fragment. This is a way to make your GraphQL queries a bit more maintainable, as including the Continent on any query that works with Country now only means adding ...Continent and not the complete list of fields. This is not a requirement, and you can also write the entire query like this:\nquery GetCountry($countryCode: ID!) {\n   country(code: $countryCode) {\n       code\n       name\n       emoji\n       capital\n       currency\n       languages {\n           code\n           name\n       }\n       continent {\n           code\n           name\n       }\n   }\n}\nWith those two queries defined, let’s continue building our ASP.NET Core application.\nAdding StrawberryShake GraphQL source generation\nTo start generating the C# client for the countries GraphQL schema we just queried, you will need to add a NuGet package reference to StrawberryShake.Server. While named “server”, this package includes additional dependencies. to get you started with creating a GraphQL client.\nStrawberryShake also has a command line tool that can help set up code generation, but we’re not going to use that in this blog post.\nNext, add a file named .graphqlrc.json next to your graphql.config.yml. Paste the following contents into it:\n{\n \"schema\": \"schema.graphql\",\n \"documents\": \"**/*.graphql\",\n \"extensions\": {\n   \"strawberryShake\": {\n     \"name\": \"CountriesClient\",\n     \"namespace\": \"Countries.GraphQL\",\n     \"url\": \"https://countries.trevorblades.com/graphql/\",\n     \"dependencyInjection\": true,\n     \"strictSchemaValidation\": true,\n     \"emitGeneratedCode\": true,\n     \"records\": {\n       \"inputs\": false,\n       \"entities\": false\n     },\n     \"transportProfiles\": [\n       {\n         \"default\": \"Http\",\n         \"subscription\": \"WebSocket\"\n       }\n     ]\n   }\n }\n}\nThis file looks similar to the graphql.config.yml file created earlier, but this time, it configures how StrawberryShake should generate C# code from the GraphQL API. It includes the API endpoint URL, the name of the generated client class (CountriesClient), its namespace, and whether to generate convenience extension methods to register the GraphQL client with ASP.NET Core’s service collection.\nIf you now build your solution, you should see a new type ICountriesClient you can work with, as well as an AddCountriesClient() extension method on IServiceCollection. \nIn Program.cs, you can use this extension method to wire up the generated GraphQL client:\n// ...\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddHttpClient();\nbuilder.Services\n   .AddCountriesClient()\n   .ConfigureHttpClient(\n       configureClient: client =>\n       {\n           client.BaseAddress = new Uri(\"https://countries.trevorblades.com/graphql/\");\n           // client.DefaultRequestHeaders.Authorization = AuthenticationHeaderValue.Parse($\"Bearer {Constants.ApiKey}\");\n       });\n\nvar app = builder.Build();\n\n// ...\nThe call to AddCountriesClient() will register all necessary services with ASP.NET Core. You will also need a call to ConfigureApiClient() to configure the GraphQL API endpoint URL. I left a comment in the code here showing how you would add bearer token authorization headers for authentication.\nWe’re ready to consume the GraphQL queries we defined earlier! In Index.cshtml.cs, add a constructor parameter that accepts an ICountriesClient and assign it to a field, or use a primary constructor.\npublic class IndexModel(ICountriesClient countriesClient) : PageModel\n{\n   // ...\n}\nIn the OnGet method, you can query the GraphQL endpoint and retrieve a list of countries. Here’s the full code for the IndexModel class that is used to render the page:\npublic class IndexModel(ICountriesClient countriesClient) : PageModel\n{\n   public IReadOnlyCollection<IListCountries_Countries> Countries { get; set; }\n\n   public async Task OnGet()\n   {\n       var countries = await countriesClient.ListCountries.ExecuteAsync();\n       if (countries.IsErrorResult())\n       {\n           // ...\n       }\n\n       Countries = countries.Data?.Countries ?? new List<IListCountries_Countries>(0);\n   }\n}\nYou’ll notice the countriesClient has a ListCountries property on which you can call ExecuteAsync() to fetch data. StrawberryShake generates this method, and the method may accept parameters as well. If you try calling the GetCountry method (which is generated based on the GetCountry query we defined in the previous section of this post), you’ll see the countryCode parameter can be passed in:\n\n\n\n\nThe ExecuteAsync() method always returns an object that contains information about the response. If an error is returned, you can check for it and log or otherwise handle the exception. If the response is successful, the Data property will contain an object representing the object defined in the *.graphql file earlier. In this example application, you can pass the data on to the Razor view.\nIn the Index.cshtml view, you can now consume the list of countries, and display each in a table:\n@page\n@model IndexModel\n@{\n   ViewData[\"Title\"] = \"Countries\";\n}\n\n\n<h1>Countries</h1>\n<table>\n   <thead>\n   <tr>\n       <th scope=\"col\">Country code</th>\n       <th scope=\"col\">Name</th>\n       <th scope=\"col\">Emoji</th>\n   </tr>\n   </thead>\n   <tbody>\n   @foreach (var country in Model.Countries)\n   {\n       <tr>\n           <td>@country.Code</td>\n           <td><a asp-page=\"Country\" asp-route-countryCode=\"@country.Code\">@country.Name</a></td>\n           <td>@country.Emoji</td>\n       </tr>\n   }\n   </tbody>\n</table>\nTry running it in your browser, and you should see a similar page to this:\n\n\n\n\nCongratulations! You have successfully built an application that fetches data from a GraphQL API in C#. As a next step, try implementing the Details.cshtml page yourself (or check out the GitHub repository for this sample application to look at implementation details).\nConclusion\nIn this post, we’ve covered how to build a GraphQL client in .NET using JetBrains Rider and StrawberryShake. We’ve covered quite a bit of ground – from setting up your development environment and understanding the fundamentals of GraphQL, to defining schemas and queries, and finally integrating everything into a sample project.\nUsing JetBrains Rider’s GraphQL plugin and the StrawberryShake framework, we’ve seen how to create strongly-typed GraphQL clients and how to work with them in your C# projects.\nI encourage you to try this out on your projects. Experiment with different schemas and queries, and see how you can integrate GraphQL to make your applications more efficient and responsive. JetBrains Rider, with its rich set of features and plugins, is a fantastic IDE for .NET development, and combined with StrawberryShake, you have a powerful GraphQL toolkit.\nFeel free to share your experiences and any cool projects you build. And if you run into any issues or have questions, let us know in the comments. Happy coding!",
        "dc:creator": "Maarten Balliauw",
        "content": "Many teams are using GraphQL for their API needs, thanks to its powerful query language and flexibility. Unlike traditional REST APIs, GraphQL lets you fetch the data you need in a single request, making your applications more efficient and responsive. However, it can be daunting getting started creating schemas, writing queries, and integrating GraphQL into [&#8230;]",
        "contentSnippet": "Many teams are using GraphQL for their API needs, thanks to its powerful query language and flexibility. Unlike traditional REST APIs, GraphQL lets you fetch the data you need in a single request, making your applications more efficient and responsive. However, it can be daunting getting started creating schemas, writing queries, and integrating GraphQL into […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=506779",
        "categories": [
          "net-tools",
          "how-tos",
          "graphql",
          "rider"
        ],
        "isoDate": "2024-09-17T14:16:24.000Z"
      },
      {
        "creator": "Anna Zykova",
        "title": "The RubyMine 2024.3 Early Access Program Is Open!",
        "link": "https://blog.jetbrains.com/ruby/2024/09/the-rubymine-2024-3-early-access-program-is-open/",
        "pubDate": "Tue, 17 Sep 2024 11:13:38 +0000",
        "content:encodedSnippet": "Hello everyone!\nWe’re starting the RubyMine 2024.3 Early Access Program today. In this blog post, we’ll inform you about the upcoming features and updates in this release cycle.\n\n\n\n\nWhat’s coming in RubyMine 2024.3?\nAI Assistant\nFor RubyMine 2024.3, we’re working on several Ruby-specific AI features, focusing on context improvements for AI-powered unit test generation, explanation of exceptions in the test environment, and a new AI model for multiline code completion.\nSupport for Ruby 3.4\nWith the upcoming release of RubyMine 2024.3, you can look forward to Ruby code insight improvements to accommodate Ruby 3.4 features.\nRemote development experience\nAnother important focus of our work is to enhance the typing and editing experience when using remote development. We’re reducing delays in typing and response time on the client side.\nBuilt-in integration with the RBS Collection\nThe feature provides built-in integration with the RBS Collection, a community-managed collection of RBS files for gems that do not include signatures.\nEven if you don’t use RBS in your project, you can still benefit from the type signatures included in the RBS Collection, with no additional effort required. RubyMine will automatically download and manage the type signatures for the project dependencies.\nThis feature is already available in the first RubyMine 2024.3 EAP build.\nImprovements for code completion in consoles\nWe’ve added new options to control the preselection of the first completion suggestion when using consoles or evaluating expressions while debugging. You can already try these options in the first RubyMine 2024.3 EAP build.\nGrazie bundled in RubyMine\nGrazie is an intelligent spelling and grammar checker for any text you write in the IDE. We plan to make the Grazie plugin available in RubyMine out of the box. \nJoin the Early Access Program\nYou can download the latest EAP build from our website or via the Toolbox App. The full list of closed tickets for this EAP build is available in the release notes.\nWe encourage you to share your thoughts in the comments below and to create and vote for new feature requests in our issue tracker.\nHappy developing!\nThe RubyMine team",
        "dc:creator": "Anna Zykova",
        "content": "Hello everyone! We’re starting the RubyMine 2024.3 Early Access Program today. In this blog post, we’ll inform you about the upcoming features and updates in this release cycle. What’s coming in RubyMine 2024.3? AI Assistant For RubyMine 2024.3, we’re working on several Ruby-specific AI features, focusing on context improvements for AI-powered unit test generation, explanation [&#8230;]",
        "contentSnippet": "Hello everyone! We’re starting the RubyMine 2024.3 Early Access Program today. In this blog post, we’ll inform you about the upcoming features and updates in this release cycle. What’s coming in RubyMine 2024.3? AI Assistant For RubyMine 2024.3, we’re working on several Ruby-specific AI features, focusing on context improvements for AI-powered unit test generation, explanation […]",
        "guid": "https://blog.jetbrains.com/?post_type=ruby&p=510482",
        "categories": [
          "eap",
          "rubymine",
          "2024-3-eap",
          "early-access-program",
          "rubymine-2024-3"
        ],
        "isoDate": "2024-09-17T11:13:38.000Z"
      },
      {
        "creator": "Alexey Totin",
        "title": "Solving Remote Development Challenges With CodeCanvas: A CDE Orchestration Tool by JetBrains",
        "link": "https://blog.jetbrains.com/blog/2024/09/17/introducing-codecanvas/",
        "pubDate": "Tue, 17 Sep 2024 07:47:01 +0000",
        "content:encodedSnippet": "We’re excited to announce the public release of CodeCanvas, JetBrains’ new platform for orchestrating cloud development environments (CDEs). To better understand CodeCanvas and why it is important for JetBrains’ remote development strategy, let’s dive a bit into history and context.\nRemote development trend\nMany companies still rely on local development, a method that has several downsides, including onboarding difficulties, security risks, hardware limitations, and its inefficient use of developer time. All of this directly translates into higher costs for the business. \nTo address these issues, businesses have suggested using remote machines. Initially, this was supported through virtual desktop infrastructure (VDI) solutions, where only a “video stream” of the IDE from the remote machine was delivered to the local system. However, a major problem with this setup was the input lag when typing or moving the mouse.\nLater, a new approach evolved – IDEs began supporting a split model. Heavy backend processes would run on a remote machine, while a local client would run only a lightweight UI that connects to the backend. This setup improved responsiveness and is what we now know as remote development. It first appeared in VS Code and later in JetBrains IDEs. This solution seemed to resolve the main issues: Code no longer needed to reside on local machines, and remote machines could scale as needed.\n\n\n\n\nBut, as the number of these remote machines grew, managing them became more complex. Either users had to be granted access to the cloud services to create machines themselves, or the IT department had to manage the machines for them. Additionally, the cost of running these machines was significant, and ensuring they were used efficiently became essential.\nThis gave rise to a new category of tools: cloud development environment (CDE) orchestrators. These platforms manage the lifecycle of CDEs, scale resources, and ensure cost efficiency. \nCodeCanvas is JetBrains’ entry into this space that, in addition to general orchestration capabilities, offers many other valuable features.\nLooking to the future, remote development and CDEs perfectly align with the growing trend of AI-assisted development. As autonomous AI developers emerge, they will require scalable dev environments to execute tasks. CDE orchestrators, like CodeCanvas, will let these AI systems create and manage their own environments through APIs.\nCodeCanvas public release\nCodeCanvas was initially launched silently in May 2024 so that we could gather early feedback from select clients. Now, it’s finally ready for public release. We’re starting with version 2024.2, which is already available to install.\nWhy CodeCanvas\n\n\n\n\nThe remote development orchestration market is still young, and existing solutions often have limitations. By working closely with our customers who need remote development, we’ve identified these pain points and are addressing them with CodeCanvas. \nOur goal is to make working in a CDE feel no different than working in a local IDE, if not better. With CodeCanvas, developers no longer need to worry about cloning repositories, selecting the right IDE version, installing dependencies, starting services, first-time compilation, or indexing. In just 10–15 seconds, a fully prepared environment is ready, allowing developers to dive straight into coding.\nIn addition to core orchestration features, CodeCanvas offers:\nOn-premises installation: CodeCanvas is an on-premises solution deployed in Kubernetes clusters, currently supporting AWS, Google Cloud, and Azure. You can find more details about the architecture in the CodeCanvas documentation.\nAdvanced JetBrains IDE support: CodeCanvas provides first-class support for JetBrains IDEs, handling indexing, plugins, version management, and more. It supports most IntelliJ-based IDEs, including IntelliJ IDEA, PyCharm, Rider, and others.\nVS Code support: For those who prefer a different editor.\nFlexible dev environment configurations: CodeCanvas allows you to configure dev environments with as much CPU, memory, and storage as needed. The only limit is your cloud provider’s resources.\nGPU support: Developers can create dev environments with GPU support, enabling them to run GPU workloads like ML training.\nAutomated preparation of CDEs: Use dev environment templates and lifecycle scripts to create pre-configured CDEs.\nReady-to-work environments: The warm-up feature helps developers start working in a CDE with already-built indexes, downloaded dependencies, and pre-built projects. Using a standby pool of pre-created CDEs, you can reduce the time to start a new environment almost to zero.\nSecurity: Multiple authentication options, connection to dev environments via SSH, personalized environment settings, and a robust permission system.\nEase of administration: A web-based UI allows administrators to manage users and their access to cluster resources, balance costs, and more.\nHow to get started\nTo try CodeCanvas or schedule a demo, contact our sales team. You can also check out our documentation to better understand how CodeCanvas works.",
        "dc:creator": "Alexey Totin",
        "content": "We&#8217;re excited to announce the public release of CodeCanvas, JetBrains&#8217; new platform for orchestrating cloud development environments (CDEs). To better understand CodeCanvas and why it is important for JetBrains&#8217; remote development strategy, let&#8217;s dive a bit into history and context. Remote development trend Many companies still rely on local development, a method that has several [&#8230;]",
        "contentSnippet": "We’re excited to announce the public release of CodeCanvas, JetBrains’ new platform for orchestrating cloud development environments (CDEs). To better understand CodeCanvas and why it is important for JetBrains’ remote development strategy, let’s dive a bit into history and context. Remote development trend Many companies still rely on local development, a method that has several […]",
        "guid": "https://blog.jetbrains.com/?post_type=blog&p=510432",
        "categories": [
          "new-products",
          "news"
        ],
        "isoDate": "2024-09-17T07:47:01.000Z"
      },
      {
        "creator": "Anna Rovinskaia",
        "title": "New Livestream: Developing Spring Boot Applications With Joy",
        "link": "https://blog.jetbrains.com/idea/2024/09/new-livestream-java-22-and-intellij-ideanew-livestream/",
        "pubDate": "Mon, 16 Sep 2024 12:05:19 +0000",
        "content:encodedSnippet": "Join us for a new IntelliJ IDEA Livestream episode, where we will explore how to build modern Spring Boot applications using IntelliJ IDEA Ultimate with Siva Reddy.\nDate: September 26, 2024\nTime: 3:00 pm – 4:00 pm UTC\nREGISTER FOR THE LIVESTREAM\n\n\n\n\nSession abstract\nSpring Boot is the most popular application framework in the Java world. In the recent versions, the Spring Boot team focused on improving the developer experience by adding support for local development using Docker Compose and Testcontainers. IntelliJ IDEA Ultimate comes with dedicated support for Spring Boot, which simplifies the developer workflow and provides a more enjoyable developer experience.\nIn this session, Siva will demonstrate how to build modern Spring Boot applications using IntelliJ IDEA Ultimate. The livestream will cover:\n\nCreating a Spring Boot application.\nAdding and removing starters using Edit Starters.\nSpring Boot’s support for local development using Docker Compose.\nConnecting to databases.\nWorking with JPA using JPA Buddy functionality.\nInvoking Spring Data JPA methods.\nHighlighting how IntelliJ IDEA automatically defines the dependency and autowire using a constructor upon the first usage of a Spring bean.\nWriting integration tests for API endpoints using Testcontainers.\nInvoking API endpoints using the JetBrains HTTP Client.\nAsking questions\nSiva will try to answer all your questions during the session. If we run out of time, we’ll publish answers to any remaining questions in a follow-up blog post.\nYour speaker and host\nSpeaker\nSiva Reddy\n\nSiva is currently working as a Developer Advocate at JetBrains. He has 18 years of experience in building scalable distributed enterprise applications. His favorite programming languages are Java, Kotlin, and Go.\nHe is a published author who has written four books so far. He shares his knowledge on his blog and his YouTube channel.\n\nHost\nMala Gupta\n\nA Java Champion and JUG leader, Mala has authored multiple books with Manning, Packt, and O’Reilly Publications. She has more than two decades of experience in the software industry and is a regular speaker at industry conferences around the world. She is an active supporter of Java certification as a path to career advancement.\n\nHappy developing!",
        "dc:creator": "Anna Rovinskaia",
        "content": "Join us for a new IntelliJ IDEA Livestream episode, where we will explore how to build modern Spring Boot applications using IntelliJ IDEA Ultimate with Siva Reddy. Date: September 26, 2024 Time: 3:00 pm – 4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract Spring Boot is the most popular application framework in the Java [&#8230;]",
        "contentSnippet": "Join us for a new IntelliJ IDEA Livestream episode, where we will explore how to build modern Spring Boot applications using IntelliJ IDEA Ultimate with Siva Reddy. Date: September 26, 2024 Time: 3:00 pm – 4:00 pm UTC REGISTER FOR THE LIVESTREAM Session abstract Spring Boot is the most popular application framework in the Java […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=510021",
        "categories": [
          "livestreams",
          "intellij-idea",
          "intellijidealivestream",
          "livestream",
          "webinars"
        ],
        "isoDate": "2024-09-16T12:05:19.000Z"
      },
      {
        "creator": "Helen Scott",
        "title": "7 Ways To Use Jupyter Notebooks inside PyCharm",
        "link": "https://blog.jetbrains.com/pycharm/2024/09/7-ways-to-use-jupyter-notebooks-inside-pycharm/",
        "pubDate": "Mon, 16 Sep 2024 10:48:55 +0000",
        "content:encodedSnippet": "Jupyter notebooks allow you to tell stories by creating and sharing data, equations, and visualizations sequentially, with a supporting narrative as you go through the notebook.\nJupyter notebooks in PyCharm Professional provide functionality above and beyond that of browser-based Jupyter notebooks, such as code completion, dynamic plots, and quick statistics, to help you explore and work with your data quickly and effectively.  \nLet’s take a look at 7 ways you can use Jupyter notebooks in PyCharm to achieve your goals. They are:\nCreating or connecting to an existing notebook\nImporting your data\nGetting acquainted with your data\nUsing JetBrains AI Assistant \nExploring your code with PyCharm\nGetting insights from your code\nSharing your insights and charts\nThe Jupyter notebook that we used in this demo is available on GitHub.\n1. Creating or connecting to an existing notebook\nYou can create and work on your Jupyter notebooks locally or connect to one remotely with PyCharm. Let’s take a look at both options so you can decide for yourself.\nCreating a new Jupyter notebook\nTo work with a Jupyter notebook locally, you need to go to the Project tool window inside PyCharm, navigate to the location where you want to add the notebook, and invoke a new file. You can do this by using either your keyboard shortcuts ⌘N (macOS) / Alt+Ins (Windows/Linux) or by right-clicking and selecting New | Jupyter Notebook.\n\nGive your new notebook a name, and PyCharm will open it ready for you to start work. You can also drag local Jupyter notebooks into PyCharm, and the IDE will automatically recognise them for you. \nConnecting to a remote Jupyter notebook\nAlternatively, you can connect to a remote Jupyter notebook by selecting Tools | Add Jupyter Connection. You can then choose to start a local Jupyter server, connect to an existing running local Jupyter server, or connect to a Jupyter server using a URL – all of these options are supported.\nNow you have your Jupyter notebook, you need some data!\n2. Importing your data\nData generally comes in two formats, CSV or database. Let’s look at importing data from a CSV file first.\nImporting from a CSV file\nPolars and pandas are the two most commonly used libraries for importing data into Jupyter notebooks. I’ll give you code for both in this section, and you can check out the documentation for both Polars and pandas and learn how Polars is different to pandas. \nYou need to ensure your CSV is somewhere in your PyCharm project, perhaps in a folder called `data`. Then, you can invoke import pandas and subsequently use it to read the code in:\nimport pandas as pd\ndf = pd.read_csv(\"../data/airlines.csv\")\nIn this example, airlines.csv is the file containing the data we want to manipulate. To run this and any code cell in PyCharm, use ⇧⏎ (macOS) / Shift+Enter (Windows/Linux). You can also use the green run arrows on the toolbar at the top.\nIf you prefer to use Polars, you can use this code:\nimport polars as pl\ndf = pl.read_csv(\"../data/airlines.csv\")\nImporting from a database\nIf your data is in a database, as is often the case for internal projects, importing it into a Jupyter notebook will require just a few more lines of code. First, you need to set up your database connection. In this example, we’re using postgreSQL. \nFor pandas, you need to use this code to read the data in:\nimport pandas as pd\nengine = create_engine(\"postgresql://jetbrains:jetbrains@localhost/demo\")\ndf = pd.read_sql(sql=text(\"SELECT * FROM airlines\"),\n                      con=engine.connect())\nAnd for Polars, it’s this code:\nimport polars as pl\nengine = create_engine(\"postgresql://jetbrains:jetbrains@localhost/demo\")\nconnection = engine.connect()\nquery = \"SELECT * FROM airlines\"\ndf = pl.read_database(query, connection)\n3. Getting acquainted with your data\nNow we’ve read our data in, we can take a look at the DataFrame or `df` as we will refer to it in our code. To print out the DataFrame, you only need a single line of code, regardless of which method you used to read the data in:\ndf\nDataFrames\nPyCharm displays your DataFrame as a table firstly so you can explore it. You can scroll horizontally through the DataFrame and click on any column header to order the data by that column. You can click on the Show Column Statistics icon on the right-hand side and select Compact or Detailed to get some helpful statistics on each column of data.   \n\nDynamic charts\nYou can use PyCharm to get a dynamic chart of your DataFrame by clicking on the Chart View icon on the left-hand side. We’re using pandas in this example, but Polars DataFrames also have the same option. \nClick on the Show Series Settings icon (a cog) on the right-hand side to configure your plot to meet your needs:\n\nIn this view, you can hover your mouse over your data to learn more about it and easily spot outliers:\n\nYou can do all of this with Polars, too. \n4. Using JetBrains AI Assistant\nJetBrains AI Assistant has several offerings that can make you more productive when you’re working with Jupyter notebooks inside PyCharm. Let’s take a closer look at how you can use JetBrains AI Assistant to explain a DataFrame, write code, and even explain errors. \nExplaining DataFrames\nIf you’ve got a DataFrame but are unsure where to start, you can click the purple AI icon on the right-hand side of the DataFrame and select Explain DataFrame. JetBrains AI Assistant will use its context to give you an overview of the DataFrame:\n\nYou can use the generated explanation to aid your understanding.\nWriting Code \nYou can also get JetBrains AI Assistant to help you write code. Perhaps you know what kind of plot you want, but you’re not 100% sure what the code should look like. Well, now you can use JetBrains AI Assistant to help you. Let’s say you want to use ‘matplotlib’ to create a chart that finds the relationship between ‘TimeMonthName’ and ‘MinutesDelayedWeather’. By specifying the column names, we’re giving more context to the request which improves the reliability of the generated code. Try it with the following prompt:\nGive me code using matplotlib to create a chart which finds the relationship between ‘TimeMonthName’ and ‘MinutesDelayedWeather’ for my dataframe df\nIf you like the resulting code, you can use the Insert Snippet at Caret button to insert the code and then run it:\nimport matplotlib.pyplot as plt\n# Assuming your data is in a DataFrame named 'df'\n# Replace 'df' with the actual name of your DataFrame if different\n\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.bar(df['TimeMonthName'], df['MinutesDelayedWeather'], color='skyblue')\nplt.xlabel('Month')\nplt.ylabel('Minutes Delayed due to Weather')\nplt.title('Relationship between TimeMonthName and MinutesDelayedWeather')\nplt.xticks(rotation=45)\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.tight_layout()\n\n\nplt.show()\nIf you don’t want to open the AI Assistant tool window, you can use the AI cell prompt to ask your questions. For example, we can ask the same question here and get the code we need:\n\nExplaining errors\nYou can also get JetBrains AI Assistant to explain errors for you. When you get an error, click Explain with AI: \n\nYou can use the resulting output to further your understanding of the problem and perhaps even get some code to fix it!\n5. Exploring your code\nPyCharm can help you get an overview of your Jupyter notebook, complete parts of your code to save your fingers, refactor it as required, debug it, and even add integrations to help you take it to the next level.\nTips for navigating and optimizing your code\nOur Jupyter notebooks can grow large quite quickly, but thankfully you can use PyCharm’s Structure view to see all your notebook’s headings by clicking ⌘7 (macOS) / Alt+7 (Windows/Linux).\n\nCode completion\nAnother helpful feature that you can take advantage of when using Jupyter notebooks inside PyCharm is code completion. You get both basic and type-based code completion out of the box with PyCharm, but you can also enable Full Line Code Completion in PyCharm Professional, which uses a local AI model to provide suggestions. Lastly, JetBrains AI Assistant can also help you write code and discover new libraries and frameworks. \n\nRefactoring\nSometimes you need to refactor your code, and in that case, you only need to know one keyboard shortcut ⌃T (macOS) / Shift+Ctrl+Alt+T (Windows/Linux) then you can choose the refactoring you want to invoke. Pick from popular options such as Rename, Change Signature, and Introduce Variable, or lesser-known options such as Extract Method, to change your code without changing the semantics: \n\nAs your Jupyter notebook grows, it’s likely that your import statements will also grow. Sometimes you might import a package such as polars and numpy, but forget that numpy is a transitive dependency of the Polars library and as such, we don’t need to import it separately.  \nTo catch these cases and keep your code tidy, you can invoke Optimize Imports ⌃⌥O (macOS) / Ctrl+Alt+O (Windows/Linux) and PyCharm will remove the ones you don’t need. \nDebugging your code\nYou might not have used the debugger in PyCharm yet, and that’s okay. Just know that it’s there and ready to support you when you need to better understand some behavior in your Jupyter notebook. \nPlace a breakpoint on the line you’re interested in by clicking in the gutter or by using ⌘F8 (macOS) / Ctrl+F8 (Windows/Linux), and then run your code with the debugger attached with the debug icon on the top toolbar:\n\nYou can also invoke PyCharm’s debugger in your Jupyter notebook with ⌥⇧⏎ (macOS) / Shift+Alt+Enter (Windows/Linux). There are some restrictions when it comes to debugging your code in a Jupyter notebook, but please try this out for yourself and share your feedback with us. \nAdding integrations into PyCharm \nIDEs wouldn’t be complete without the integrations you need. PyCharm Professional 2024.2 brings two new integrations to your workflow: DataBricks and HuggingFace.\nYou can enable the integrations with both Databricks and HuggingFace by going to your Settings <kbd>⌘</kbd> (macOS) / <kbd>Ctrl+Alt+S</kbd> (Windows/Linux), selecting Plugins and searching for the plugin with the corresponding name on the Marketplace tab.\n6. Getting insights from your code\nWhen analyzing your data, there’s a difference between categorical and continuous variables. Categorical data has a finite number of discrete groups or categories, whereas continuous data is one continuous measurement. Let’s look at how we can extract different insights from both the categorical and continuous variables in our airlines dataset.\nContinuous variables\nWe can get a sense of how continuous data is distributed by looking at measures of the average value in that data and the spread of the data around the average. In normally distributed data, we can use the mean to measure the average and the standard deviation to measure the spread. However, when data is not distributed normally, we can get more accurate information using the median and the interquartile range (this is the difference between the seventy-fifth and twenty-fifth percentiles). Let’s look at one of our continuous variables to understand the difference between these measurements.\nIn our dataset, we have lots of continuous variables, but we’ll work with `NumDelaysLateAircraft` to see what we can learn. Let’s use the following code to get some summary statistics for just that column:\ndf['NumDelaysLateAircraft'].describe()\nLooking at this data, we can see that there is a big difference between the `mean` of ~789 and the ‘median’ (our fiftieth percentile, indicated by “50%” in the table below) of ~618.\n\nThis indicates a skew in our variable’s distribution, so let’s use PyCharm to explore it further. Click on the Chart View icon at the top left. Once the chart has been rendered, we’ll change the series settings represented by the cog on the right-hand side of the screen. Change your x-axis to `NumDelaysLateAircraft` and your y-axis to `NumDelaysLateAircraft`. \nNow drop down the y-axis using the little arrow and select `count`. The final step is to change the chart type to Histogram using the icons in the top-right corner:\n\nNow that we can see the skew laid out visually, we can see that most of the time, the delays are not too excessive. However, we have a number of more extreme delays – one aircraft is an outlier on the right and it was delayed by 4,509 minutes, which is just over three days!\nIn statistics, the mean is very sensitive to outliers because it’s a geometric average, unlike the median, which, if you ordered all observations in your variable, would sit exactly in the middle of these values. When the mean is higher than the median, it’s because you have outliers on the right-hand side of the data, the higher side, as we had here. In such cases, the median is a better indicator of the true average delay, as you can see if you look at the histogram.\nCategorical variables\nLet’s take a look at how we can use code to get some insights from our categorical variables. In order to get something that’s a little more interesting than just `AirportCode`, we’ll analyze how many aircraft were delayed by weather, `NumDelaysWeather`, in the different months of the year, `TimeMonthName`.\nUse this code to group `NumDelaysWeather` with `TimeMonthName`:\nresult = df[['TimeMonthName', 'NumDelaysWeather']].groupby('TimeMonthName').sum()\nresult\nThis gives us the DataFrame again in table format, but click the Chart View icon on the left-hand side of the  PyCharm UI to see what we can learn:\n\nThis is okay, but it would be helpful to have the months ordered according to the Gregorian calendar. Let’s first create a variable for the months that we expect:\nmonth_order = [\n   \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n   \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n]\nNow we can ask PyCharm to use the order that we’ve just defined in `month_order`:\n# Convert the 'TimeMonthName' column to a categorical type with the specified order\ndf[\"TimeMonthName\"] = pd.Categorical(df[\"TimeMonthName\"], categories=month_order, ordered=True)\n\n\n# Now you can group by 'TimeMonthName' and perform sum operation, specifying observed=False\nresult = df[['TimeMonthName', 'NumDelaysWeather']].groupby('TimeMonthName', observed=False).sum()\n\n\nresult\nWe then click on the Chart View icon once more, but something’s wrong!\n\nAre we really saying that there were no flights delayed in February? That can’t be right. Let’s check our assumption with some more code:\ndf['TimeMonthName'].value_counts()\nAha! Now we can see that `Febuary` has been misspelt in our data set, so the correct spelling in our variable name does not match. Let’s update the spelling in our dataset with this code:\ndf[\"TimeMonthName\"] = df[\"TimeMonthName\"].replace(\"Febuary\", \"February\")\ndf['TimeMonthName'].value_counts()\nGreat, that looks right. Now we should be able to re-run our earlier code and get a chart view that we can interpret:\n\nFrom this view, we can see that there is a higher number of delays during the months of December, January, and February, and then again in June, July, and August. However, we have not standardized this data against the total number of flights, so there may just be more flights in those months, which would cause these results along with an increased number of delays in those summer and winter months.\n7. Sharing your insights and charts\nWhen your masterpiece is complete, you’ll probably want to export data, and you can do that in various ways with Jupyter notebooks in PyCharm. \nExporting a DataFrame\nYou can export a DataFrame by clicking on the down arrow on the right-hand side:\n\nYou have lots of helpful formats to choose from, including SQL, CSV, and JSON:\n\nExporting charts\nIf you prefer to export the interactive plot, you can do that too by clicking on the Export to PNG icon on the right-hand side:\n\nViewing your notebook as a browser\nYou can view your whole Jupyter notebook at any time in a browser by clicking the icon in the top-right corner of your notebook:\n\nFinally, if you want to export your Jupyter notebook to a Python file, 2024.2 lets you do that too! Right-click on your Jupyter notebook in the Project tool window and select Convert to Python File. Follow the instructions, and you’re done!\nSummary\nUsing Jupyter notebooks inside PyCharm Professional provides extensive functionality, enabling you to create code faster, explore data easily, and export your projects in the formats that matter to you. \nDownload PyCharm Professional to try it out for yourself! Get an extended trial today and experience the difference PyCharm Professional can make in your data science endeavors.\nUse the promo code “PyCharmNotebooks” at checkout to activate your free 60-day subscription to PyCharm Professional. The free subscription is available for individual users only.\nActivate your 60-day trial",
        "dc:creator": "Helen Scott",
        "content": "Jupyter notebooks allow you to tell stories by creating and sharing data, equations, and visualizations sequentially, with a supporting narrative as you go through the notebook. Jupyter notebooks in PyCharm Professional provide functionality above and beyond that of browser-based Jupyter notebooks, such as code completion, dynamic plots, and quick statistics, to help you explore and [&#8230;]",
        "contentSnippet": "Jupyter notebooks allow you to tell stories by creating and sharing data, equations, and visualizations sequentially, with a supporting narrative as you go through the notebook. Jupyter notebooks in PyCharm Professional provide functionality above and beyond that of browser-based Jupyter notebooks, such as code completion, dynamic plots, and quick statistics, to help you explore and […]",
        "guid": "https://blog.jetbrains.com/?post_type=pycharm&p=504467",
        "categories": [
          "data-science",
          "how-tos",
          "jupyter",
          "jupyter-notebooks"
        ],
        "isoDate": "2024-09-16T10:48:55.000Z"
      },
      {
        "creator": "Khalid Abuhakmeh",
        "title": "Introduction to Htmx for Spring Boot Developers",
        "link": "https://blog.jetbrains.com/idea/2024/09/introduction-to-htmx-for-spring-boot-developers/",
        "pubDate": "Fri, 13 Sep 2024 09:51:18 +0000",
        "content:encodedSnippet": "Starting a new project can be both exciting and challenging at the same time. Choosing what technologies will help you deliver your solution comes with the cost associated with those choices. Each additional technology can bring issues and dependencies that can lead to incremental decreases in progress that can grind your project to a stop. The front end is a common place where developers might experience decision fatigue. The popularity of frontend frameworks such as React, Angular, and Vue brings a lot of value and expensive tradeoffs in tooling, security considerations, network traffic, and heavy initial payloads. If you’re feeling overwhelmed when making a front-end decision for your next project, this post is for you.\nIn this post, we’ll explore an up-and-coming library called Htmx that allows you to leverage your existing Spring Boot knowledge to deliver interactive user experiences while circumventing some of the frustrations you may have felt with other front-end frameworks. By the end of this post, you should be confident enough to add Htmx to a new or existing Spring Boot project.\nDownload IntelliJ IDEA\n                                                    \nWhat is Htmx?\nTo understand what Htmx is, we must first understand philosophically what the library is attempting to accomplish. \nHtmx is unabashedly proud to be in the Hypermedia camp. Hypermedia is a term coined in 1965 by Ted Nelson, and it focuses on the idea that a single document may contain several interactive elements, such as text, images, videos, and links to other documents. If this sounds a lot like HTML, then you’d be right. HTML is the canonical example of this concept and has successfully delivered the internet we know today. Then, in 2015, the web development landscape changed.\nDuring the Web 2.0 era, web development began moving to separate the UI elements of web experiences into frontend and backend. Backend APIs delivered JSON or XML because these payloads were smaller than full HTML payloads. The front end was responsible for transforming data into presentational HTML using JavaScript. This pattern worked around limitations in the client and rendering speed and, at the time, delivered a better user experience to visitors. Since that time, a few things have changed:\nInternet speeds are significantly faster overall\nClients are much more efficient in rendering HTML\nJavaScript and JSON payloads have ballooned\nJavaScript tooling has become increasingly complex\nRegarding Htmx, in the context of modern applications, frontend frameworks may be a more considerable burden than the problems they claim to help solve. So, how does Htmx work differently?\nHtmx focuses on a declarative programming style, allowing you to decorate your existing HTML output with Htmx-specific attributes. These attributes give those HTML elements more functionality than they may typically have. The fundamental flow of all Htmx includes the following:\nA client-side trigger that raises an event\nThe event typically triggers a web request to a server backend\nThe server responds with an HTML fragment\nHtmx replaces an existing DOM element with the response\nLet’s look at a simple Htmx example, which we will implement using Spring Boot later.\n<button hx-post=\"/clicked\"\n    hx-trigger=\"click\"\n    hx-target=\"#parent-div\"\n    hx-swap=\"outerHTML\"\n>\n    Click Me!\n</button>\nThe hx- attributes allow this button to trigger an HTTP POST whenever clicked. Once the server responds, we will find the #parent-div and swap it with the resulting HTML.\nThese attributes are not exclusive to any HTML element and can be combined to create rich experiences. For example, here is a search box that triggers a request whenever the user changes the value:\n<input type=\"text\" name=\"q\"\n    hx-get=\"/trigger_delay\"\n    hx-trigger=\"keyup changed delay:500ms\"\n    hx-target=\"#search-results\"\n    placeholder=\"Search...\"\n>\n<div id=\"search-results\"></div>\nThis particular example also defines a delay of 500ms before making a request to the server, as a way to not make requests while the user is still typing, so that the server only receives the most relevant search queries and not all of them – a technique called “debouncing”.\nNow that you have a general idea of Htmx, let’s add it to a Spring Boot sample project and implement the backend for both snippets.\nYour first Htmx experience in Spring Boot\nBefore starting, I recommend installing the Htmx Support plugin for JetBrains IDEs. It will make your Htmx development experience that much better. Thanks, Hugo Mesquita!\nUse the New Project dialog in IntelliJ IDEA to create a new Spring Boot project. If you already have a Spring Boot project, skip this step.\n\n\n\n\nOn the next screen, choose the Spring Web and Thymeleaf dependencies.\n\n\n\n\nLet’s start by first creating a new HomeController class. This will be where we add our application logic for our first sample.\npackage org.example.htmxdemo;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HomeController {\n    @GetMapping(\"/\")\n    public String home() {\n        return \"index\";\n    }\n}\nNext, let’s create our index HTML template file under resources/templates/index.html. Be sure to paste the following contents. The dependencies are already included in the head tag of the provided HTML and will be retrieved by the client when the page is rendered to users.\n<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n    <title>Getting Started: Serving Web Content</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"color-scheme\" content=\"light dark\" />\n    <title>Htmx Demo</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\" >\n    <script src=\"https://unpkg.com/htmx.org@2.0.1\"></script>\n</head>\n<body>\n    <main class=\"container\">\n        <section>\n        <h1>Htmx Demo</h1>\n        <div id=\"parent-div\"></div>\n        <button hx-post=\"/clicked\"\n                hx-trigger=\"click\"\n                hx-target=\"#parent-div\"\n                hx-swap=\"outerHTML\">\n            Click Me!\n        </button>\n        </section>\n    </main>\n</body>\n</html>\nHtmx is a no-build library, meaning you don’t need any additional dependencies to use it. As you notice, in the head element of our template, we only need a script reference to the library in our HTML. I’ve also included a CSS library, PicoCSS, to make things more aesthetically pleasing. Your output may look slightly different based on your development environment’s light/dark mode settings.\nEventually, you’ll want to download and store all third-party files alongside your code for a production setting.\nNext, return to the HomeController and implement the /clicked endpoint. Remember, this needs to be handled using the POST HTTP method. Using the appropriate HTTP methods to handle interactions can be essential to Htmx development. Generally, use GET for immutable calls and POST, PUT, and DELETE for mutating calls.\npackage org.example.htmxdemo;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport java.time.LocalDateTime;\n\n@Controller\npublic class HomeController {\n    @GetMapping(\"/\")\n    public String home() {\n        return \"index\";\n    }\n\n    @PostMapping(\"/clicked\")\n    public String clicked(Model model) {\n        model.addAttribute(\"now\", LocalDateTime.now().toString());\n        return \"clicked :: result\";\n    }\n}\nFinally, let’s implement our HTML fragment in clicked.html, which we’ll place next to our other template files in resources/templates/.\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n  <title>fragments</title>\n</head>\n<body>\n  <div th:fragment=\"result\" id=\"parent-div\">\n    <p th:text=\"${now}\"></p>\n  </div>\n</body>\n</html>\nRunning our application, we can now click the button on our page and see the interface update in real-time.\n\n\n\n\nCongratulations. You have successfully handled the first of many Htmx requests to come!\nNow, let’s implement that search textbox for a more complex scenario.\nHtmx-powered Search in Spring Boot\nWe will add a new search feature to our sample, implementing the snippet previously shown. Let’s first update our HTML snippet to include the search user interface. In index.html, update the contents to match the following:\n<!DOCTYPE HTML>\n<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n    <title>Getting Started: Serving Web Content</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"color-scheme\" content=\"light dark\" />\n    <title>Htmx Demo</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\" >\n    <script src=\"https://unpkg.com/htmx.org@2.0.1\"></script>\n</head>\n<body>\n    <main class=\"container\">\n        <section>\n        <h1>Htmx Demo</h1>\n        <div id=\"parent-div\"></div>\n        <button hx-post=\"/clicked\"\n                hx-trigger=\"click\"\n                hx-target=\"#parent-div\"\n                hx-swap=\"outerHTML\">\n            Click Me!\n        </button>\n        </section>\n\n        <section>\n            <input type=\"text\"\n                   name=\"q\"\n                   hx-get=\"/search\"\n                   hx-trigger=\"keyup changed delay:500ms\"\n                   hx-target=\"#search-results\"\n                   placeholder=\"Search...\"\n            >\n            <div th:replace=\"search::results\">\n            </div>\n        </section>\n\n    </main>\n</body>\n</html>\nCreate a new search.html file in resources/templates/ and copy the following content into the newly created file.\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<head>\n    <title>fragments</title>\n</head>\n<body>\n<div id=\"search-results\" th:fragment=\"results\">\n    <ul th:each=\"result: ${results}\">\n        <li th:text=\"${result}\"></li>\n    </ul>\n</div>\n</body>\n</html>\nThis file contains our response fragment, which will display the results of the user-initiated search. Let’s update our HomeController one last time:\npackage org.example.htmxdemo;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Controller\npublic class HomeController {\n\n    static List<String> searchResults =\n            List.of(\"one\", \"two\", \"three\", \"four\", \"five\");\n\n    @GetMapping(\"/\")\n    public String home(Model model) {\n        model.addAttribute(\"results\", searchResults);\n        return \"index\";\n    }\n\n    @GetMapping(\"/search\")\n    public String search(String q, Model model) {\n        var filtered = searchResults\n                .stream()\n                .filter(s -> s.startsWith(q.toLowerCase()))\n                .toList();\n\n        model.addAttribute(\"results\", filtered);\n        return \"search :: results\";\n    }\n\n    @PostMapping(\"/clicked\")\n    public String clicked(Model model) {\n        model.addAttribute(\"now\", LocalDateTime.now().toString());\n        return \"clicked :: result\";\n    }\n}\nLet’s pause here and consider what we’re doing with our HomeController class.\nOur home method sets the search results for the initial experience.\nOur index.html uses the search :: results fragment\nWhen the user types, the /search endpoint handles the query and returns the modified search :: results fragment with our new results.\nAll of this logic happens using our knowledge of Spring Boot and Thymeleaf. That’s pretty amazing. Rerun the application and start typing into the search box to see the filtered results.\n\n\n\n\nIt might not seem like it, but you implemented some complex Htmx scenarios. There’s still more to learn, and the basics described in this post are a great starting point.\nCommunity References\nHtmx has a growing community of excited developers, and we wanted to share some of their work with you. Knowing there is community enthusiasm for Htmx may help reduce your anxiety about adopting the technology.\nOfficial Htmx site and documentation – https://htmx.org/ \nJosh Long – HTMX and Spring Boot\nSivaLabs – Spring Boot Thymeleaf HTMX Tutorial\nDan Vega – Getting started with HTMX in Spring Boot with Thymeleaf\nWill Iverson –Spring Boot + HTMX = Easy Full Stack\nWim Deblauwe – Spring Tips: HTMX\nThose willing to look past the backend technology can also check out my guide series Htmx for ASP.NET Core developers, which has many samples and techniques that can be adapted to Spring Boot.\nFor folks seriously getting into Htmx development, check out the Spring Boot and Thymeleaf library for htmx, which adds helpful elements to your Spring Boot application.\nAlso, to get the sample code featured in this post, fellow Developer Advocate Marit van Djik pushed a complete sample to her GitHub repository. \nConclusion\nIf you suffer from front-end fatigue and prefer to work with backend tools like Spring Boot and Thymeleaf, you may consider Htmx for your next solution. In my opinion, one of Htmx’s strongest selling points is that you can layer it in incrementally. Some pages in your web application may utilize Htmx heavily, while others do not mention It. This can speed up your deliverables considerably, as you spend less time wrestling with JavaScript build tools and more time building solutions that users will love.\nWe hope you enjoyed this post. We’d love to hear about your experience integrating Htmx and Spring Boot. If you have any questions or feedback, please feel free to comment.",
        "dc:creator": "Khalid Abuhakmeh",
        "content": "Starting a new project can be both exciting and challenging at the same time. Choosing what technologies will help you deliver your solution comes with the cost associated with those choices. Each additional technology can bring issues and dependencies that can lead to incremental decreases in progress that can grind your project to a stop. [&#8230;]",
        "contentSnippet": "Starting a new project can be both exciting and challenging at the same time. Choosing what technologies will help you deliver your solution comes with the cost associated with those choices. Each additional technology can bring issues and dependencies that can lead to incremental decreases in progress that can grind your project to a stop. […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=498678",
        "categories": [
          "idea",
          "java",
          "htmx",
          "intellij-idea",
          "spring"
        ],
        "isoDate": "2024-09-13T09:51:18.000Z"
      },
      {
        "creator": "Vitaly Bragilevsky",
        "title": "Fleet Plugins – Now With Сustom Keymaps",
        "link": "https://blog.jetbrains.com/fleet/2024/09/fleet-plugins-now-with-sustom-keymaps/",
        "pubDate": "Thu, 12 Sep 2024 15:46:07 +0000",
        "content:encodedSnippet": "About a month ago, we launched a mechanism for publishing your color theme as a plugin. With the recent updates, we are extending Fleet plugin applicability even further by allowing you to publish your custom keymaps. You can now map Fleet actions to specific key combinations to streamline your development experience and share the resulting keymap with others.\nCustomizing keyboard shortcuts\nKeyboard shortcuts can significantly boost your productivity as a software developer, but they can also slow you down if they’re not the shortcuts you’re used to. Unfortunately, there’s no one-size-fits-all solution. We put much effort into creating Fleet’s default keymap – we wanted it to respect the system defaults, have familiar shortcuts from other apps like Cmd/Ctrl+K, and be as lightweight as possible to give users the freedom to add their own shortcuts without creating conflicts. However, we understand that it might not be to everyone’s liking. So, we made several customization options available.\nFirst, we added several other keymap options that might work better for you. To switch between them, go to the customization menu by clicking the gear icon in the top-right corner of your Fleet window:\n\n\n\n\nThe Keymap dialog allows you to select your preferred keymap:\n\n\n\n\nSecond, we allow keymap customization in the Keymap view (it can be launched by the Help | Keymap menu item or the Edit Keymap… action):\n\n\n\n\nThe idea behind keymap customization is as follows: \nThere’s a long list of actions available in Fleet.\nYou can select any action and then replace the assigned shortcut, remove it, or add a new one.\nIt’s possible to restore the default shortcuts (those originally defined in your selected keymap).\nFleet stores your customizations in the user.json file, for example:\n{\n  \"keymap\": [\n\t{\n\t\t\"key\": \"shift-cmd-s\",\n\t\t\"action\": \"show-file-symbols\"\n\t},\n\t{\n\t\t\"key\": \"shift-ctrl-a\",\n\t\t\"action\": \"toggle-distraction-free-mode\"\n\t},\n\t{\n\t\t\"key\": \"ctrl-o\",\n\t\t\"action\": \"-open-in\"\n\t}\n  ]\n}\nThe keymap array in this example lists all the assignments that differ from the keymap currently selected in Fleet. Let’s call it a delta keymap. For every shortcut assignment, we specify a key and an action ID. Removing a default shortcut is expressed as an action ID with the leading ‘-’ symbol (for example, -open-in). Adding several shortcuts for a single action can be expressed by adding several key/action pairs. Fleet supports viewing and editing this delta keymap JSON file directly via the Edit Keymap in JSON File… action.\nIf you’ve heavily customized your keymap and think it makes you more productive, you might want to share it with others. Let’s see how you can publish your keymap as a Fleet plugin.\nPublishing custom keymap as a Fleet plugin\nLike theme plugins, we start packaging a custom keymap by creating a new project from the dedicated keymap plugin template on GitHub. Three things need to be adjusted in the project.\nFirst, you must put a keymap JSON file with a complete list of assigned shortcuts in the my-keymap-plugin/frontendImpl/src/jvmMain/resources/ folder. The easiest way to build such a file is to manually merge the default Fleet keymap (my-custom-keymap.json in the template) with your customizations (the delta keymap) in user.json. There’s one caveat, though. Delta keymap is used for the current operating system, but a complete keymap JSON file is supposed to be useful across different OSes. You can use the ”win”, “mac”, or “linux” key values to set shortcuts specific to the respective operating system. The value of the ”key” field serves as a fallback option. Use definitions in my-custom-keymap.json as an example.\nLet’s call this new complete keymap file super-productive.json.\nSecond, you need to register your keymap as a contribution of your plugin in the my-keymap-plugin/frontendImpl/src/jvmMain/kotlin/fleet/sample/frontendImpl/MyKeymapPlugin.kt file:\npackage fleet.sample.frontendImpl\n\nimport fleet.frontend.keymap.KeymapId\nimport fleet.frontend.keymap.registerKeymap\nimport fleet.kernel.plugins.ContributionScope\nimport fleet.kernel.plugins.Plugin\nimport fleet.kernel.plugins.PluginScope\n\nclass MyKeymapPlugin : Plugin<Unit> {\n\n    companion object : Plugin.Key<Unit>\n\n    override val key: Plugin.Key<Unit> = MyKeymapPlugin\n\n    override fun ContributionScope.load(pluginScope: PluginScope) {\n        registerKeymap(\n            id = KeymapId(\"super-productive\"), \n            presentableName = \"Fleet Super Productive\")\n    }\n}\nThe keymap ID must be the same as the name of the keymap JSON file (without an extension).\nThird, we need to configure the plugin itself. The plugin should have a unique id, a readable name, and a description. The name and the description are visible both on Marketplace and in Fleet’s Plugins view (use the Plugins… action to open it). These parameters are set in the my-keymap-plugin/build.gradle.kts file, for example:\nplugins {\n\tbase\n\talias(libs.plugins.fleet.plugin)\n}\n\nversion = \"0.1.0\"\n\nfleetPlugin {\n\tid = \"pro.bravit.super.keymap\"\n\tmetadata {\n\t\treadableName = \"Fleet Super Productive\"\n\t\tdescription = \"Super productive keymap for Fleet\"\n\t}\n\tfleetRuntime {\n\t\tversion = libs.versions.fleet.runtime\n\t}\n}\nOnce we are done editing the files, we can launch Fleet with the plugin in development by opening the Run dialog and choosing the Run Fleet with local plugin run configuration. The Fleet instance will be launched after a bit of compilation and will have our keymap available in the Select Keymap… dialog:\n\n\n\n\nWe can also check out the Plugins view to make sure that the plugin has been loaded:\n\n\n\n\nWhile experimenting with your new keymap, you can get your changes as a delta keymap (as described in the previous section) and then transfer them to the complete keymap JSON file. Note that any changes you make to your complete keymap JSON file now won’t be immediately visible in the running Fleet instance. You need to restart Fleet with the Run Fleet with local plugin run configuration selected in order for your changes to take effect.\nOnce you finish editing and testing your keymap, please follow the instructions from the documentation to publish your new keymap plugin to JetBrains Marketplace. The Marketplace team will check the uploaded plugin, and following their approval, it will become available for anyone to install from the Plugins view in Fleet:\n\n\n\n\nConclusion\nWe now allow you to publish your custom color themes and keymaps as Fleet plugins. Some users have already done so. But this is just the beginning. You can do much more to customize Fleet’s behavior with plugins. The road ahead is long and full of possibilities.\nStay with us on this journey!",
        "dc:creator": "Vitaly Bragilevsky",
        "content": "About a month ago, we launched a mechanism for publishing your color theme as a plugin. With the recent updates, we are extending Fleet plugin applicability even further by allowing you to publish your custom keymaps. You can now map Fleet actions to specific key combinations to streamline your development experience and share the resulting [&#8230;]",
        "contentSnippet": "About a month ago, we launched a mechanism for publishing your color theme as a plugin. With the recent updates, we are extending Fleet plugin applicability even further by allowing you to publish your custom keymaps. You can now map Fleet actions to specific key combinations to streamline your development experience and share the resulting […]",
        "guid": "https://blog.jetbrains.com/?post_type=fleet&p=509574",
        "categories": [
          "plugin-development",
          "news",
          "plugins"
        ],
        "isoDate": "2024-09-12T15:46:07.000Z"
      },
      {
        "creator": "Ksenia Shneyveys",
        "title": "Create With Kotlin Multiplatform and Win a Trip to KotlinConf 2025!",
        "link": "https://blog.jetbrains.com/kotlin/2024/09/kotlin-multiplatform-contest/",
        "pubDate": "Thu, 12 Sep 2024 13:55:31 +0000",
        "content:encodedSnippet": "To all students and recent graduates: The Kotlin Foundation is excited to announce the launch of the Kotlin Multiplatform Contest! Showcase your creativity and coding skills by building a cross-platform project using Kotlin Multiplatform and win a trip to KotlinConf 2025, the largest Kotlin event of the year. \nTake part\nKotlin Multiplatform allows you to create apps that run on Android, iOS, desktop, web, and server – all from a single codebase. Now is your chance to put this technology to the test and show off what you can build. Experts from the Kotlin Multiplatform team at JetBrains will support you with regular live Q&A sessions!\nThe creators of the top three projects will win a trip to KotlinConf 2025 in Copenhagen, Denmark, taking place on May 22–23, 2025! Plus, the authors of all valid entries will receive Kotlin souvenirs. \nKey dates:\nContest starts on September 9, 2024\nSubmission deadline is January 14, 2025\nWinners are announced on January 24, 2025\n\n\n\n\nHow to participate:\n1. Join the community: Stay updated and get guidance by joining our dedicated Slack channel. We’ll announce the live Q&A sessions with Kotlin Multiplatform experts from JetBrains there.\n2. Read and agree to the complete contest rules.\n3. Build your project: Your project must use Kotlin Multiplatform and run on at least two platforms. Get creative – choose a topic that excites you and shows off the power of Kotlin Multiplatform.\n4. Submit: Upload your project to GitHub with a comprehensive README file and clear instructions on how to launch it on all supported platforms.\nEligibility:\nYou must be at least 18 years old.\nYou must be currently enrolled or have been enrolled in an accredited educational program within the last 12 months.\nRead the complete rules\nPrizes:\nThe authors of the top three projects will win a trip to KotlinConf 2025 in Copenhagen, Denmark, taking place on May 22–23, 2025, including travel, accommodation, and conference tickets. They will also get recognition on the KotlinConf website and social media channels and receive swag.\nThe contributors of all other valid entries will receive neat Kotlin souvenirs for participating.\n\n\n\n\nHelpful materials:\nKotlin Multiplatform official documentation.\nPeopleInSpace – multiplatform sample projects.\nMore samples of multiplatform projects.\nCompose Multiplatform – a video tutorial.\n\n\n\n\nPrevious winners:\nAhmet Burak Ilhan, Istanbul Biruni University, Turkey, DoGoodMobile\nBrian Kamau Mbigo, Multimedia University of Kenya, Kenya, VisioZoezi\nMaciej Procyk, University of Warsaw, Poland, Mini-games\nPatrycja Bachleda, Florida Institute of Technology, USA, College Advisor\nSamson Aricha Momanyi, Technical University of Mombasa, Kenya, Organiks\nCaleb Asira Etemesi, Strathmore University, Kenya, Pixly\n\n\n\n\nTake advantage of this incredible opportunity to learn, create, and win. Whether you’re new to Kotlin Multiplatform or an experienced developer, this contest is a fantastic way to explore the technology, learn from the experts, and connect with the global Kotlin community!\nFor more details, visit the Kotlin Multiplatform Contest page.\nWe’re excited to see what you build. Good luck!",
        "dc:creator": "Ksenia Shneyveys",
        "content": "To all students and recent graduates: The Kotlin Foundation is excited to announce the launch of the Kotlin Multiplatform Contest! Showcase your creativity and coding skills by building a cross-platform project using Kotlin Multiplatform and win a trip to KotlinConf 2025, the largest Kotlin event of the year.  Take part Kotlin Multiplatform allows you to [&#8230;]",
        "contentSnippet": "To all students and recent graduates: The Kotlin Foundation is excited to announce the launch of the Kotlin Multiplatform Contest! Showcase your creativity and coding skills by building a cross-platform project using Kotlin Multiplatform and win a trip to KotlinConf 2025, the largest Kotlin event of the year.  Take part Kotlin Multiplatform allows you to […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=509883",
        "categories": [
          "news",
          "contest",
          "kotlin-multiplatform"
        ],
        "isoDate": "2024-09-12T13:55:31.000Z"
      },
      {
        "creator": "Dzhamshed Khaitov",
        "title": "Introducing the New TeamCity Plugin for IntelliJ IDEA",
        "link": "https://blog.jetbrains.com/teamcity/2024/09/new-teamcity-plugin-intellij-idea/",
        "pubDate": "Thu, 12 Sep 2024 10:28:58 +0000",
        "content:encodedSnippet": "We’re excited to announce the release of the updated TeamCity plugin for IntelliJ IDEA! 🎉 You can now download it directly from JetBrains Marketplace.\nUsing the plugin, you can trigger TeamCity builds directly from within your IDE and test any changes before committing them to the version control system.\n\n\n\n\n\n\nWhy get the new plugin?\nThis plugin has been built from the ground up to ensure it will eventually be able to replace the existing TeamCity plugin once support for the most frequently used and requested features has been added. \nHere’s what’s new in the plugin:\nWe’ve added functionality enabling you to link TeamCity projects and build configurations to your IDE project so that you only see build configurations related to your IDE project.\nWith the help of the remote run feature, you can run build configurations on your local changes without committing them to the VCS.\nThe plugin’s tool window now contains a new Personal Builds tab where past personal builds are listed. It also shows live updates of all builds executed using the remote run feature.\n\n\n\n\n\nNow it’s possible to select a build configuration and watch its build status for each commit in the VCS Log tool window.\n\n\n\n\nKey benefits of this updated plugin include:\nThe ability to manually configure which TeamCity projects relate to your code, giving you more control over your builds.\n\n\n\n\nEnhanced performance that significantly reduces lag between your actions in the IDE and the TeamCity server’s response.\nWe’re actively developing this plugin and planning to add even more features in upcoming releases. Your feedback is critical in shaping the tool to better meet the needs of IntelliJ IDEA developers. \nYou can install both the old and new plugin versions side by side, so feel free to compare and explore!\nHow to get started with the TeamCity plugin for IntelliJ IDEA\nInitial setup\n1. Download the plugin from Marketplace.\n2. Once the plugin is installed, open your project in IntelliJ IDEA and invoke the plugin’s settings using the Tools | TeamCity (Experimental) | Settings… menu.\n\n\n\n\n3. Click Log In and enter the following values:\nServer URL – the HTTP(S) address of your TeamCity server.\nAccess token – your user access token that can be generated on the Your Profile | Access Tokens page in TeamCity.\n\n\n\n\nWith the new plugin, you can link build configurations from TeamCity directly to the project you have open. In the old plugin, this had to be configured through VCS roots, which wasn’t an easy process.\nNow, users only need to create a given configuration once, and it will be saved in the source code. Everyone who downloads the project will then have it automatically configured and available without the need to set it up themselves.\nTesting your local changes\nOne of the key benefits of the TeamCity IDEA plugins (both old and new) is the ability to run builds with your local changes before they are pushed to a remote branch, also known as a remote run. This allows you to spot issues without breaking the build for everyone else on your team.\nHere’s how you can initiate a remote run from your IDE.\n1. Make some changes to your code.\n2. Go to Tools | TeamCity (Experimental) | Remote Run….\n\n\n\n\n3. Then, under Remote Run… | Settings…, click the target build configurations that you want to run with your local changes. The plugin will then remember your choice and run builds for the same configuration(s) on subsequent remote runs. You can configure these project-configuration relations in the plugin settings.\n\n\n\n\nLink your projects to TeamCity build configurations\nSetting up project-configuration relations allows you to explicitly choose which configurations should be triggered depending on the introduced changes.\nTeamCity’s IntelliJ IDEA integration enables you to choose the linking scope, selecting whether you want to link the whole project or only individual project modules to your TeamCity build configurations.\n\n\n\n\n1. Click Tools | TeamCity (Experimental) | Settings… to open the plugin’s settings.\n2. Choose the required Linking scope value:\nPROJECT – allows you to link the entire IntelliJ IDEA project to the target build configuration(s). This option works best when you need to trigger builds of the same configuration(s) regardless of which part of your code changed.\nMODULE – allows you to link individual modules to corresponding build configurations. For example, you can run both Build and Test configurations if the main module of your application changes, and only the Test configuration if you edit a separate module with unit and functional tests. This mode also benefits mono repositories where each module is a separate project with its own target build configuration(s).\nShare your feedback\nWe’re still working on making the new plugin ready to replace the old one. For the time being, you can download both plugins – they won’t interfere with each other.\nIs there any functionality that you’d like us to add to the new plugin? Let us know in the comments below! We want to make the plugin as useful as possible, and your feedback can help us do exactly that.\nHappy building!",
        "dc:creator": "Dzhamshed Khaitov",
        "content": "We’re excited to announce the release of the updated TeamCity plugin for IntelliJ IDEA! 🎉 You can now download it directly from JetBrains Marketplace. Using the plugin, you can trigger TeamCity builds directly from within your IDE and test any changes before committing them to the version control system. Why get the new plugin? This [&#8230;]",
        "contentSnippet": "We’re excited to announce the release of the updated TeamCity plugin for IntelliJ IDEA! 🎉 You can now download it directly from JetBrains Marketplace. Using the plugin, you can trigger TeamCity builds directly from within your IDE and test any changes before committing them to the version control system. Why get the new plugin? This […]",
        "guid": "https://blog.jetbrains.com/?post_type=teamcity&p=509571",
        "categories": [
          "plugins",
          "news",
          "release"
        ],
        "isoDate": "2024-09-12T10:28:58.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "article New updates to Planner comment notifications and settings in Planner Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Mark Downie",
        "title": "How to run .NET apps natively on Arm64 devices",
        "link": "https://devblogs.microsoft.com/visualstudio/how-to-run-net-apps-natively-on-arm64-devices/",
        "pubDate": "Tue, 17 Sep 2024 10:00:19 +0000",
        "content:encodedSnippet": "Are you developing .NET applications for Arm-based processors? Do you want to take advantage of the performance and power efficiency of running your apps natively on Arm64 devices? If so, you’ll be happy to hear that Visual Studio 2022 17.11 has a new feature that makes it easier than ever to do just that.\n\nVisual Studio 2022 natively supports building and debugging Arm64 apps on Arm-based processors. However, if you build your app with the AnyCPU setting, which is the default for most .NET projects, your app will run on an Arm64 device using x64 emulation. While this may seem counterintuitive, this approach allowed many apps with x64 dependencies to work reliably under emulation without requiring additional build or dependency changes.\nUnfortunately, under these conditions, it means your app won’t benefit from the native capabilities of the Arm64 CPU and may suffer from reduced performance and increased battery consumption.\nTo solve this problem, the Windows 24H2 update introduces a new setting for your app manifest files. This setting allows you to specify a list of supported architectures (currently amd64 or arm64) for your app, indicating that it should run natively on those platforms. For example, if you include arm64 in the list, your app will run using the Arm64 CLR on Arm64 devices when supported, even if it was built with the AnyCPU setting.\nHow to use the setting in Visual Studio 2022\nTo use the new setting in Visual Studio 2022, you need to do the following steps:\nMake sure you have the Windows 24H2 update installed on your development machine and your target device.\nOpen your .NET project in Visual Studio 2022 and right-click on your project in Solution Explorer and select Properties.\n In the Build area confirm that the AnyCPU configuration is enabled and that the Prefer 32-bit option is unselected.\nSelect the new Prefer native ARM64 option.\nSave and rebuild your project.\nDeploy your app to your Arm64 device and run it. You can also debug it using Visual Studio 2022, which will automatically detect the correct architecture and launch the debugger accordingly.\n\nEnjoy the benefits of native Arm64 apps\nBy using the new setting in Visual Studio 2022, you can easily run and debug your .NET apps natively on Arm64 devices, without changing your code or your build configuration. This will help you improve the performance, reliability, and battery life of your apps, and give your users a better experience.\nWe hope you enjoy this new feature and find it useful for your development scenarios. As always, we appreciate your> feedback and suggestions, which help us make Visual Studio better for you. Please let us know what you think by leaving a comment below, or by using the Report a Problem tool in Visual Studio. Thank you for choosing Visual Studio 2022!\nThe post How to run .NET apps natively on Arm64 devices appeared first on Visual Studio Blog.",
        "dc:creator": "Mark Downie",
        "content": "<p>Are you developing .NET applications for Arm-based processors? Do you want to take advantage of the performance and power efficiency of running your apps natively on Arm64 devices? If so, you&#8217;ll be happy to hear that Visual Studio 2022 17.11 has a new feature that makes it easier than ever to do just that. Visual [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/how-to-run-net-apps-natively-on-arm64-devices/\">How to run .NET apps natively on Arm64 devices</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Are you developing .NET applications for Arm-based processors? Do you want to take advantage of the performance and power efficiency of running your apps natively on Arm64 devices? If so, you’ll be happy to hear that Visual Studio 2022 17.11 has a new feature that makes it easier than ever to do just that. Visual […]\nThe post How to run .NET apps natively on Arm64 devices appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250623",
        "categories": [
          "performance",
          ".NET",
          "32-bit",
          "Arm64"
        ],
        "isoDate": "2024-09-17T10:00:19.000Z"
      },
      {
        "creator": "Peter Spada",
        "title": "Understanding the behavior of the XAML Designer with abstract base classes",
        "link": "https://devblogs.microsoft.com/visualstudio/understanding-the-behavior-of-the-xaml-designer-with-abstract-base-classes/",
        "pubDate": "Mon, 16 Sep 2024 13:49:39 +0000",
        "content:encodedSnippet": "Visual Studio 2022 introduced a new XAML designer for building WPF apps, with a goal of increasing the performance and reliability of the designer. The new designer can quickly open a XAML file by using WPF’s built-in parser and display. This new design has a nuanced behavior when the root XAML element derives from an abstract base class. This article helps with understanding implications for using an abstract base class and describes workarounds which can ensure a smooth design experience.\nThe Challenge with Abstract Base Classes\nWhen working with the XAML Designer, the base class of the root element is instantiated for display purposes. This allows developers to visualize and interact with their UI components directly within the designer, while the custom control is being developed. In the example screenshot below, the base class of the root element is UserControl. The custom control’s derived class is specified in the x:Class attribute as TestControl. Therefore, an instance of UserControl is instantiated for display in design view:\n\nHowever, an issue arises when the root element’s base class is abstract. Since abstract classes cannot be instantiated, the XAML Designer will find the first non-abstract base class and instantiate that instead. Most of the time, this will work well, but there are cases where this will break design view, possibly showing an error message. One case where design view breaks is when the abstract base class defines a property that is crucial for display, such as the Content property.\nIllustrative Example\nImagine you have an abstract base class as follows:\n\nIf this abstract class is the base class for your custom control, the XAML Designer will not be able to instantiate AbstractControlBase and will instead instantiate the Control class. The reason is that Control is the first non-abstract base class. This leads to any reference to AbstractControlBase being broken in design view. In the following screenshot, it shows how a ControlTemplate cannot be applied to AbstractControlBase, and the Content property cannot be used to display anything in design view:\n\nEffective Workarounds\nTo mitigate this issue, there are practical workarounds that ensure that the XAML Designer continues to function seamlessly.\n1. Move Display Properties to a Non-Abstract Base Class\nOne approach is to refactor your code by transferring the properties critical to design view to another level of base class that is not abstract. This adjustment allows the XAML Designer to instantiate and render the necessary components. The following code shows how the Content property was moved from AbstractControlBase to a new ControlBase class:\n\nIn the XAML file, the base class stays as AbstractControlBase, but the control template now applies to the concrete base class ControlBase:\n\n2. Utilize Standard Controls\nAnother strategy is to derive the abstract class from WPF’s ContentControl, which already provides common properties that are used for display in design view, such as the Content property. This method circumvents the instantiation issue associated with abstract classes, allowing your UI elements to be properly displayed while designing your XAML content.\n\n\nConclusion\nUnderstanding the implications of using abstract base classes and implementing effective workarounds can significantly enhance your design workflow. By moving properties to non-abstract base classes or utilizing standard controls, you can ensure that your UI components are rendered accurately, allowing you to harness the full potential of the XAML Designer.\nIf you have feedback about the XAML Designer, please let us know by using the Visual Studio Feedback Tool. We’re eager to hear what you think!\nThe post Understanding the behavior of the XAML Designer with abstract base classes appeared first on Visual Studio Blog.",
        "dc:creator": "Peter Spada",
        "content": "<p>Visual Studio 2022 introduced a new XAML designer for building WPF apps, with a goal of increasing the performance and reliability of the designer. The new designer can quickly open a XAML file by using WPF’s built-in parser and display. This new design has a nuanced behavior when the root XAML element derives from an [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/understanding-the-behavior-of-the-xaml-designer-with-abstract-base-classes/\">Understanding the behavior of the XAML Designer with abstract base classes</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Visual Studio 2022 introduced a new XAML designer for building WPF apps, with a goal of increasing the performance and reliability of the designer. The new designer can quickly open a XAML file by using WPF’s built-in parser and display. This new design has a nuanced behavior when the root XAML element derives from an […]\nThe post Understanding the behavior of the XAML Designer with abstract base classes appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250610",
        "categories": [
          "Visual Studio",
          "WPF",
          "XAML"
        ],
        "isoDate": "2024-09-16T13:49:39.000Z"
      },
      {
        "creator": "Dominic Nahous",
        "title": "VisualStudio.Extensibility 17.11: Settings and more Remote UI support",
        "link": "https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility-17-11-settings-and-more-remote-ui-support/",
        "pubDate": "Thu, 12 Sep 2024 10:00:43 +0000",
        "content:encodedSnippet": "We continue to invest in the VisualStudio.Extensibility SDK to allow users like you to create extensions that run faster and smoother than ever before! VisualStudio.Extensibility helps you build extensions that run outside the main Visual Studio IDE process for improved performance and reliability. Additional benefits include a sleek and intuitive .NET 8-based API and comprehensive, well-maintained documentation to help you develop amazing extensions faster than ever before.\nThis 17.11 release builds on our previous releases, bringing support for defining user-configurable settings for your extensions to allow your users to customize their experience along with even more enhancements to remote UI features. We’ve also made substantial updates to our project query API documentation.\nGet started with VisualStudio.Extensibility\n\nFor the latest up-to-date docs and installation instructions, visit https://aka.ms/VisualStudio.Extensibility. We encourage you to report bugs and suggest features via the issue tracker on our GitHub repo, where you can also find extension samples to help you get started.\nWhat’s new for VisualStudio.Extensibility?\nOur 17.11 release of VisualStudio.Extensibility includes the following features:\nCustomize your extensions further with settings support\nShow images and use context menus in Remote UI\nEnhance your tool windows with toolbars\nWe’ve also refreshed and updated the project query API documentation based on feedback from extension developers like you!\nCustomize your extensions further with settings support\nWith this release of VisualStudio.Extensibility, we’ve enabled a handful of APIs that allow you to define settings for your extensions. This allows your end users to alter the behavior of the extension by adjusting values you’ve elected to define as settings.\nIn order to support this scenario, you’ll now find APIs specific to defining, accessing, and writing settings in your extension. To add settings to your extension, first add a definition for your setting in a class in the extension.\nIf you’d like to learn more about how to define and leverage settings in your apps, refer to the VisualStudio.Extensibility settings article. You’ll find more details along with samples to get you coding quickly!\nNote that the settings API, like VisualStudio.Extensibility, supports Hot Loading of settings. This allows your extension’s settings to be discovered without requiring your users to restart Visual Studio.\nShow images and use context menus in Remote UI\nAs the VisualStudio.Extensibility model prioritizes extensions running outside of the Visual Studio process, it introduces a challenge when adding UI support to extensions as most UI frameworks are in-process. To get around this, there is a set of classes called Remote UI that allow you to define WPF controls in an out-of-process extension and then show them as part of the Visual Studio UI.\nWith this release, you can now add a context menu to a Remote UI control from XAML, a familiar experience if you’ve ever added a context menu in standard WPF. You’ll also be able to use Remote UI XAML to show either custom images or images that already exist in the Visual Studio catalog. This gives you additional options for providing users with useful information in a visual format and can help you increase your extension’s UI appeal!\nVisit the Other Remote UI concepts documentation for code samples and more information.\nEnhance your tool windows with toolbars\nYou can now use VisualStudio.Extensibility to add toolbars to your extension’s tool windows to give your users a quick and easy way to access or leverage features in your extension.\nSee the Add a toolbar to a tool window section in the tool window overview doc to learn more about creating, adding content to, showing, and controlling the visibility of tool windows – and of course to learn more about adding toolbars to those tool windows.\nProject Query API documentation updates\nIn response to your valuable feedback, we have revamped our documentation to better serve your needs. As we transition to a new model, our project query documentation is evolving to leverage VisualStudio.Extensibility project query wrappers for accessing and modifying solutions/projects. To explore the updated documentation, please refer to Query the Project API (VisualStudio.Extensibility). For details specific to project query using Visual Studio SDK, you can visit Query the Project API (Visual Studio SDK).\nAbout experimental APIs, breaking changes, and how we make decisions about VisualStudio.Extensibility\nIn reviewing feedback from our issue tracker, we realized it would be useful to outline information about some of the decisions we’ve made around VisualStudio.Extensibility. With this new extensibility model, we carefully consider exactly what should and should not be supported based on two major criteria: your feedback and the design goals of the project. One recent example: we decided not to support the ability to programmatically invoke VSCT (Visual Studio Command Table)-based commands via VisualStudio.Extensibility. This decision aligned with established principles for VisualStudio.Extensibility for a few reasons:\nVSCT based commands are synchronous. VisualStudio.Extensibility extensions operate asynchronously in a separate process.\nAs there’s no guarantee that UI state will remain coherent due to the asynchronous nature of the invocation from another process or thread, allowing invocation could lead to unpredictable user experiences.\nVSCT-based commands allow input and output of any type. VisualStudio.Extensibility extensions can run out of process. This imposes limitations around the types of input and output data that can be serialized.\nDirect command invocation breaks our commitment to having consistent, easy-to-use APIs as it would essentially introduce another set of APIs that are more macro/script-like.\nAs we continue increasing the surface area of the VisualStudio.Extensibility SDK, we’ll rely on this framework to inform decisions on API coverage and availability. The API is growing and changing. We aim to minimize breaking changes and ensure stability and a consistent experience for you, our extension developers. When we make changes because of customer feedback or internal changes, we’ll communicate it formally with plenty of notice on the VisualStudio.Extensibility breaking changes page. We’ll use the following guidelines for breaking changes to experimental APIs:\nBreaking changes can be made as part of LTSC minor version releases of Visual Studio.\n\nA list of breaking changes for the release will be shared by Preview 2 of that release.\nThe list will be shared in the breaking changes doc linked above.\nRemoval of APIs may be formally deprecated by marking the type or by using the [Obsolete] attribute.\n\nThis will also happen by Preview 2 of the release in which they’ll be removed.\nMost APIs in VisualStudio.Extensibility are stable, which means we do not plan to make any breaking changes to them. For these, we want to replicate the stability expectations associated with the existing VS SDK:\nBreaking changes to VisualStudio.Extensibility APIs or RPC contracts will only happen as part of a major version release of Visual Studio.\n\nThe list of breaking changes will be available by Preview 1 of the release.\nAny API removal will happen formally by marking the type or by using the [Obsolete] attribute.\nDemotion of stable APIs to experimental is considered a breaking change and will be formally announced.\nWe can’t do this without you!\nThe time and effort you’ve spent reporting issues and sharing suggestions so far has been instrumental in shaping VisualStudio.Extensibility. We need your help as we continue to develop VisualStudio.Extensibility! Please try out this preview release and let us know what you think. Check out the docs, browse the code samples, and build your first extension. You can send feedback and report issues through our issue tracker.\nTo request features, look at Developer Community to see if someone else made a similar request first. Create a new one if you can’t find a similar request. By checking for similar requests and upvoting and commenting on them, you help us better prioritize requests. Give VisualStudio.Extensibility a try today and share your thoughts with us!\nThe post VisualStudio.Extensibility 17.11: Settings and more Remote UI support appeared first on Visual Studio Blog.",
        "dc:creator": "Dominic Nahous",
        "content": "<p>We continue to invest in the VisualStudio.Extensibility SDK to allow users like you to create extensions that run faster and smoother than ever before! VisualStudio.Extensibility helps you build extensions that run outside the main Visual Studio IDE process for improved performance and reliability. Additional benefits include a sleek and intuitive .NET 8-based API and comprehensive, [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/visualstudio-extensibility-17-11-settings-and-more-remote-ui-support/\">VisualStudio.Extensibility 17.11: Settings and more Remote UI support</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "We continue to invest in the VisualStudio.Extensibility SDK to allow users like you to create extensions that run faster and smoother than ever before! VisualStudio.Extensibility helps you build extensions that run outside the main Visual Studio IDE process for improved performance and reliability. Additional benefits include a sleek and intuitive .NET 8-based API and comprehensive, […]\nThe post VisualStudio.Extensibility 17.11: Settings and more Remote UI support appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250567",
        "categories": [
          "Extensibility",
          "Visual Studio",
          "Extensions"
        ],
        "isoDate": "2024-09-12T10:00:43.000Z"
      },
      {
        "creator": "Leah Tran",
        "title": "Search scoping helps you find what you’re looking for",
        "link": "https://devblogs.microsoft.com/visualstudio/search-scoping-helps-you-find-what-youre-looking-for/",
        "pubDate": "Wed, 11 Sep 2024 10:00:38 +0000",
        "content:encodedSnippet": "If you’re working on a large and complex solution, you might find yourself overwhelmed by the number of results when you use code search in Visual Studio. You might be looking for a specific class, method, or variable, but end up scrolling through pages of irrelevant matches. Wouldn’t it be nice if you could narrow down your search scope to only the parts of the solution that you care about?\nIn the latest update of Visual Studio, you can now use the new scoping options in code search to filter your results by the entire solution, the current project, or the current document. You can also toggle the inclusion of external files in your search.\nThis way, you can quickly and easily find what you need without getting lost in the noise.\n\nHow to Use Scoping in Code Search\nTo access the new scoping options, open the Code Search window by pressing Ctrl+T or clicking on the Search button (magnifying glass icon) at the top of the IDE. You’ll see a drop-down menu at the far right of the search box that lets you choose between different scopes.\nYou can select one of the following options:\nEntire solution\nCurrent project\nCurrent document\n\nYou can also click on the checkbox next to Search in external items to toggle the inclusion of code files that are not part of your solution.\nYou can set different scopes for different filters, and your selections will be remembered across sessions. For example, you can set the default filter to search through the entire solution, and the member filter to search through the current document. This way, you can switch between various levels of granularity depending on what you’re looking for.\nHere’s an example of how code search scoping can help you find what you need faster. Suppose you want to find a method called GetProducts in your solution. If you use the default filter and scope, you might get hundreds of results from various projects. But if you use the member filter and scope it to the current project, you will get a narrower set of results that are relevant to your current context.\nWe Hope You Enjoy This Feature\nWe hope that code search scoping will make your coding experience more productive and enjoyable. We’d love to hear your feedback on this feature and any other suggestions you have for improving code search in Visual Studio 2022. You can use the Report a Problem tool in Visual Studio or head over to the Developer Community website.\nThank you for your continuous feedback and support, which helps us make Visual Studio better every day.\nThe post Search scoping helps you find what you’re looking for appeared first on Visual Studio Blog.",
        "dc:creator": "Leah Tran",
        "content": "<p>If you&#8217;re working on a large and complex solution, you might find yourself overwhelmed by the number of results when you use code search in Visual Studio. You might be looking for a specific class, method, or variable, but end up scrolling through pages of irrelevant matches. Wouldn&#8217;t it be nice if you could narrow [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/search-scoping-helps-you-find-what-youre-looking-for/\">Search scoping helps you find what you’re looking for</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "If you’re working on a large and complex solution, you might find yourself overwhelmed by the number of results when you use code search in Visual Studio. You might be looking for a specific class, method, or variable, but end up scrolling through pages of irrelevant matches. Wouldn’t it be nice if you could narrow […]\nThe post Search scoping helps you find what you’re looking for appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250542",
        "categories": [
          "Productivity",
          "Visual Studio",
          "code search",
          "Search"
        ],
        "isoDate": "2024-09-11T10:00:38.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "\r\n                            Dropbox Developer Support Team\r\n            \t\t\t",
        "title": "Customizing scopes in the OAuth app authorization flow",
        "link": "https://dropbox.tech/developers/customizing-scopes-in-oauth-flow",
        "pubDate": "Fri, 13 Sep 2024 07:30:00 -0700",
        "content:encodedSnippet": "As you may know, the Dropbox API authorization system uses \"scopes\" for granular control over what functionality an app can access. This allows app developers to select what API functionality their apps can use, so that users can feel more comfortable granting apps access to their accounts. This can help give users peace of mind that the apps will only be able to perform the operations that the apps actually need. It may not be obvious though that you can further customize exactly which scopes your app requests and when. Let's look at the options for configuring and customizing scopes in more detail.\n\nFirst, it's important to note that the scopes you enable on the Permissions tab of the app's page on the App Console define the maximum, as well as the default, set of scopes that the app can request. For example, let's look at a user-linked app. By default, it has the account_info.read scope, which is required to be registered for user-linked apps. We'll also enable files.content.read and files.metadata.read  scopes for this example.\n\r\n\r\n    \r\n        \r\n            \r\n    \r\n\r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n\r\n        \r\n        <!-- <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/scopes-config.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/scopes-config.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"A screenshot showing the app’s scopes configuration.\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"1075\"\r\n             data-sly-attribute.height=\"654\"\r\n             data-aem-asset-id=\"01375274-d59e-4ee8-8836-8b6157c80c45:scopes-config.png\"\r\n             data-trackable=\"true\" />\r\n        <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/scopes-config.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/scopes-config.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"1075\"\r\n             data-sly-attribute.height=\"654\"\r\n             data-aem-asset-id=\"01375274-d59e-4ee8-8836-8b6157c80c45:scopes-config.png\"\r\n             data-trackable=\"true\" /> -->\r\n\r\n        \r\n         \r\n        \r\n    \r\n\r\n            \nA screenshot showing the app’s scopes configuration.\n\r\n        \r\n    \r\n\nWhen we send a user to the app authorization page, by default, they'll be prompted to authorize the app with all of those scopes:\nhttps://www.dropbox.com/oauth2/authorize?client_id=&response_type=code\n\r\n\r\n    \r\n        \r\n            \r\n    \r\n\r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n\r\n        \r\n        <!-- <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-default.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-default.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"A screenshot of the app authorization page defaulting to the scopes registered to the app.\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"c7a5be91-16a3-4004-b721-c4be66d38a2f:authorize-default.png\"\r\n             data-trackable=\"true\" />\r\n        <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-default.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-default.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"c7a5be91-16a3-4004-b721-c4be66d38a2f:authorize-default.png\"\r\n             data-trackable=\"true\" /> -->\r\n\r\n        \r\n         \r\n        \r\n    \r\n\r\n            \nA screenshot of the app authorization page defaulting to the scopes registered to the app.\n\r\n        \r\n    \r\n\nHowever, if you don't need all of the scopes that are currently enabled on the app, you can instead set the scope parameter on the /oauth2/authorize URL you construct. In that parameter, you can put a space-delimited list of scopes to specify just a sub-set of scopes to request for that authorization. This can be useful in scenarios where the app doesn't need all of the app's potential access, or as a way to more gradually gain the user's trust.\nhttps://www.dropbox.com/oauth2/authorize?client_id=&response_type=code&scope=files.metadata.read\n\r\n\r\n    \r\n        \r\n            \r\n    \r\n\r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n\r\n        \r\n        <!-- <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-subset.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-subset.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"A screenshot of the app authorization page requesting a sub-set of the scopes registered to the app.\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"dff648aa-f841-43b0-bde1-a88c9c56d94b:authorize-subset.png\"\r\n             data-trackable=\"true\" />\r\n        <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-subset.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-subset.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"dff648aa-f841-43b0-bde1-a88c9c56d94b:authorize-subset.png\"\r\n             data-trackable=\"true\" /> -->\r\n\r\n        \r\n         \r\n        \r\n    \r\n\r\n            \nA screenshot of the app authorization page requesting a sub-set of the scopes registered to the app.\n\r\n        \r\n    \r\n\nTip: Note how even though account_info.read is required to be enabled on the app itself, you don't have to request it during authorization. For more privacy-oriented scenarios where the app doesn't need access to the user's account information, you can set the scope parameter without the account_info.read scope as above. \nIf a user authorizes the app using that /oauth2/authorize URL, the app will then receive a payload like the following when it subsequently makes the corresponding call to /oauth2/token using the resulting authorization code:\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n    \r\n        Copy\r\n    \r\n    \n\r\n{\r\n  \"access_token\": \"\",\r\n  \"token_type\": \"bearer\",\r\n  \"expires_in\": 14400,\r\n  \"scope\": \"files.metadata.read\",\r\n  \"uid\": \"\",\r\n  \"account_id\": \"\"\r\n}\n\r\n\r\n\r\n\r\n\n\r\n\n\nIf the app needs additional scopes later, it can prompt the user to authorize the app again, with the scope parameter configured with more scopes, or without the scope parameter set at all, to request all of the app’s scopes.\n\nYou can also use the include_granted_scopes parameter to make it easier to request additional scopes without explicitly listing the previously granted scopes again. For example, if we then additionally want the app to be able to read the content of files in that same user’s account, we would construct another URL like this:\n\nhttps://www.dropbox.com/oauth2/authorize?client_id=&response_type=code&scope=files.content.read&include_granted_scopes=user\n\r\n\r\n    \r\n        \r\n            \r\n    \r\n\r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n\r\n        \r\n        \r\n\r\n        \r\n        <!-- <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-additional.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-additional.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"A screenshot of the app authorization page requesting additional scopes registered to the app.\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"e0f65b7d-dac5-4075-a187-7a56e168ca8d:authorize-additional.png\"\r\n             data-trackable=\"true\" />\r\n        <img data-sly-test.highRes=\"false\"\r\n             srcset=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-additional.png 2x,  1x\"\r\n             src=\"/cms/content/dam/dropbox/tech-blog/en-us/2024/09/customizing-scopes/authorize-additional.png\"\r\n             aria-hidden=\"\"\r\n             alt=\"\"\r\n             class=\"\"\r\n             data-sly-attribute.width=\"776\"\r\n             data-sly-attribute.height=\"455\"\r\n             data-aem-asset-id=\"e0f65b7d-dac5-4075-a187-7a56e168ca8d:authorize-additional.png\"\r\n             data-trackable=\"true\" /> -->\r\n\r\n        \r\n         \r\n        \r\n    \r\n\r\n            \nA screenshot of the app authorization page requesting additional scopes registered to the app.\n\r\n        \r\n    \r\n\nIf the user authorizes the app using that /oauth2/authorize URL, the app will then receive a payload like the following when it subsequently makes the corresponding call to /oauth2/token using the resulting authorization code:\n\r\n\r\n\r\n\r\n\r\n\n\r\n\r\n\r\n    \r\n        Copy\r\n    \r\n    \n\r\n{\r\n  \"access_token\": \"\",\r\n  \"token_type\": \"bearer\",\r\n  \"expires_in\": 14400,\r\n  \"scope\": \"files.content.read files.metadata.read\",\r\n  \"uid\": \"\",\r\n  \"account_id\": \"\"\r\n}\n\r\n\r\n\r\n\r\n\n\r\n\n\nNote how this time, the access token has permission to both files.metadata.read as well as files.content.read.\nour \"Using OAuth 2.0 with offline access\" blog post for information on that.\nforum or via our contact form.",
        "dc:creator": "\r\n                            Dropbox Developer Support Team\r\n            \t\t\t",
        "content": "Learn how to configure and customize which scopes your app requests during the Dropbox OAuth 2 app authorization flow.",
        "contentSnippet": "Learn how to configure and customize which scopes your app requests during the Dropbox OAuth 2 app authorization flow.",
        "guid": "https://dropbox.tech/developers/customizing-scopes-in-oauth-flow",
        "categories": [
          "OAuth flow",
          "Authorization",
          "Scopes",
          "Tips and Tricks",
          "Oauth"
        ],
        "isoDate": "2024-09-13T14:30:00.000Z"
      }
    ]
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김병환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": [
      {
        "creator": "고종범",
        "title": "미뤄두었던 것들의 학습",
        "link": "https://brunch.co.kr/@@24SO/47",
        "pubDate": "Fri, 13 Sep 2024 09:09:27 GMT",
        "author": "고종범",
        "content": "지난주 글을 쓴다는 게 한주가 밀려버렸다. 뻔한 핑계지만 정신없는 일정에 토요일 예외적인 일정이 있다 보니 그렇게 되었다. 그래서 오늘은 쓸 이야기가 많다.  미뤄두었던 것들의 학습 지금 진행하고 있는 일이 조금 여유로워지면서 미뤄두었던 것들의 학습을 수행하고 있다. 매번 이렇게 밀린 학습 할 때 드는 생각은 평소에도 할 수 있으며 왜 몰아서 할까라는 생각<img src= \"https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2F24SO%2Fimage%2FffEjsDYpieDGycrOAKj0Z2_9Hn4.png\" width=\"500\" />",
        "contentSnippet": "지난주 글을 쓴다는 게 한주가 밀려버렸다. 뻔한 핑계지만 정신없는 일정에 토요일 예외적인 일정이 있다 보니 그렇게 되었다. 그래서 오늘은 쓸 이야기가 많다.  미뤄두었던 것들의 학습 지금 진행하고 있는 일이 조금 여유로워지면서 미뤄두었던 것들의 학습을 수행하고 있다. 매번 이렇게 밀린 학습 할 때 드는 생각은 평소에도 할 수 있으며 왜 몰아서 할까라는 생각",
        "guid": "https://brunch.co.kr/@@24SO/47",
        "isoDate": "2024-09-13T09:09:27.000Z"
      }
    ]
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": [
      {
        "title": "USB 2.0의 내부 구조",
        "link": "https://blog.seulgi.kim/2024/09/blog-post.html",
        "pubDate": "2024-09-14T15:13:00.053Z",
        "author": "Seulgi Kim",
        "summary": "아이폰도 USB-C를 사용하면서 온 세상이 USB로 통일됐지만 실제로는 너무 다양한 USB가 존재한다. 기본 형태인 USB-A나 최근 많이 사용되는 USB-C 뿐 아니라, 보통 5핀이라고 불리는 micro-B를 포함한 다양한 USB-B 컨넥터들이 존재한다. 그래도 컨넥터는 모양이 다르기 때문에 쉽게 구분할 수 있는데 케이블은 답이 없다. 겉으로는 똑같아 보이는 케이블이라도 어떤 케이블은 데이터 통신이 안 되고 어떤 케이블은 데이터 통신이 가능하다. 이런 차이는 케이블 내부 구성에 따라 발생한다. 이번 글에서는 USB 2.0 케이블의 내부를 통해 USB 케이블에 대해 자세히 알아보겠다.\n\n\n  \n    \n    \n  \n  Micro-B 케이블의 편조 차폐와 호일 차폐\n\n\n위 사진은 집에서 돌아다니던 A - ",
        "id": "tag:blogger.com,1999:blog-5754933877504806384.post-8679071203695677418",
        "isoDate": "2024-09-14T15:13:00.053Z"
      }
    ]
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "내가 처음이 아니다",
        "link": "https://kangmyounghun.blogspot.com/2024/09/blog-post.html",
        "pubDate": "2024-09-11T04:18:00.002Z",
        "author": "강명훈",
        "content": "<div>하나의 <a href=\"https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html\" target=\"_blank\">로그스태시 파이프라인</a>에서 서로 다른 데이터를 수집, 서로 다른 인덱스에 저장하는 구성에 대한 질문을 받았다. 방법은 input 구간에서 출처별로 수집 플러그인을 분리한 후, output 구간에서 조건에 따라 저장명을 달리하는 것.</div><div>\n<pre><code><div>input {</div><div>&nbsp;file {</div><div>&nbsp; path =&gt; \"a.log\"</div><div>&nbsp;}</div><div><br /></div><div><div>&nbsp;file {</div><div>&nbsp; path =&gt; \"b.log\"</div><div>&nbsp;}</div></div><div>}</div><div><br /></div><div><span><a name='more'></a></span>output {</div><div>&nbsp;if [path] == \"a.log\" {</div><div>&nbsp; elasticsearch {</div><div>&nbsp; &nbsp;index =&gt; \"index_a\"</div><div>&nbsp; }</div><div>&nbsp;} else {</div><div><div>&nbsp; elasticsearch {</div><div>&nbsp; &nbsp;index =&gt; \"index_b\"</div><div>&nbsp; }</div></div><div>&nbsp;}</div><div>}</div></code></pre>\n<div><br /></div><div>데이터 전처리를 잘 하면 분석이 쉬워진다가 강의 주제인지라&nbsp;<a href=\"https://www.elastic.co/guide/en/logstash/current/filter-plugins.html\" target=\"_blank\">filter 구간</a>&nbsp;활용에 집중한다. 자연스럽게 input이나 output 멀티 구성에 대한 필요성을 느낀 적이 없음. 개인의 경험은 한계가 있다. 그래서 타인의 경험이 공유될 때 강의가 재밌어진다.</div><div><br /></div><div>당연히 질문에 대한 답을 처음부터 알지 못했다. 하지만 답을 찾는 게 어렵진 않았다. 모르면 물어보면 되니까.</div><div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwf2tckxDTqxGtOLyhirUiEgQWsZUp5eocJAi1JTrOpsXJw-njHpZu2E2j-hhtf7r7kgfr6j28-maw2jYWOt__b2GdDuKq1Mz6aJzk8QH7gmjkyw-J4kiwnCEiaNHoczAqwlw3dIp2_aaEPiVNzM73drEVCnuRmDrYKXYVrzx1-wjqzWLK6sruJKBCXxvv/s1280/u_r_not_first.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"704\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjwf2tckxDTqxGtOLyhirUiEgQWsZUp5eocJAi1JTrOpsXJw-njHpZu2E2j-hhtf7r7kgfr6j28-maw2jYWOt__b2GdDuKq1Mz6aJzk8QH7gmjkyw-J4kiwnCEiaNHoczAqwlw3dIp2_aaEPiVNzM73drEVCnuRmDrYKXYVrzx1-wjqzWLK6sruJKBCXxvv/s520/u_r_not_first.png\" width=\"520\" /></a></div><div><br /></div></div><div>엘라스틱이 나온 지 10년이 넘었고, 그동안 수백만 이상의 사용자들이 엘라스틱을 사용했다. 그중에 나와 같은 목적을 가진 사람이 한 명도 없다면 정말 이상하지 않을까? 하늘 아래 새로운 거 없고, 사람 생각하는 거 크게 다르지 않다.</div><div><br /></div><div>나와 같은 문제로 고민하는 사람이 수 만은 될 것이고, 그중엔 반드시 문제를 해결한 사람이, 그리고 그 해결책을 공유하는 사람이 존재한다. 검색만 잘 하면 된다는 얘기. 이때 원하는 검색 결과를 얻기 위한 조건은 단 하나.</div><div><br /></div><div><b><span style=\"font-size: x-large;\">질문이 뚜렷해야 한다</span></b></div><div><br /></div><div>질문을 명확히 정의할 수 있어야 한다는 얘기. 그게 가능하려면 결국 내가 하고 싶은 게 구체적이어야 한다. 하고 싶은 게 뚜렷하지 않은 상태에서는 뭘 질문해야 할지 알 수도 없고, 설령 질문을 한들 누구도 답을 주기 어렵다. 뭘 원하는지 알기 힘든 질문이니까.</div><div><blockquote style=\"text-align: center;\"><i>목적이 뚜렷하다면 아무리 새롭고 어려운 기술이라도 즐겁게 배움에 임할 수 있으며, 좋은 질문을 할 수 있고, 좋은 답을 구할 수 있다. 설령 좋은 답을 얻지 못하더라도 최소한 그 답에 가까워질 수 있다</i> - <span style=\"font-size: x-small;\">Elasticsearch로 알아보는 이상징후 분석 (249p)</span></blockquote><span style=\"font-size: x-small;\"></span></div><div><br /></div><div>물론 그저 엘라스틱 박사가 되고 싶은 거라면 공식 문서를 모조리 외워버리는 방법도 있다. 하지만 그게 가능하다면 같은 노력을 했을 때 인생이 더 풍요로워지는 다른 분야가 있지 않을까? 결국 툴을 잘 쓰려면 명확한 사용처가 있어야 한다.</div><div><br /></div><div>하고 싶은 게 뚜렷하다면 엘라스틱이나 스플렁크는 배우기 쉽다. 제품 인기도 만큼 커뮤니티가 활발하고, 같은 목적을 위한 삽질 끝에 나보다 먼저 문제를 해결한 선배들이 많기 때문. 그래서 팁이라면 그냥 구글 검색보다 커뮤니티 우선 검색이 구체적인 사례 수집에 유리하다.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj4K7J0uWByZGBRVH6N_rl4smTJVc9l24kYKty2wqZJ4jzc4z28LwOn6uqFGY6HmpYOyAcO9qqvBeeuoLBKOcIOUHEx3LnqhJG9ZMWHDL5ULsDVzZj9bEVcKqjpMKTOmZFIlTr4mKCJc7jNyc36AfzPinxzVbbwlsdpGdWCub38MuETnhCHcjCzvsmRtswB/s1280/u_r_not_first2.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"704\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEj4K7J0uWByZGBRVH6N_rl4smTJVc9l24kYKty2wqZJ4jzc4z28LwOn6uqFGY6HmpYOyAcO9qqvBeeuoLBKOcIOUHEx3LnqhJG9ZMWHDL5ULsDVzZj9bEVcKqjpMKTOmZFIlTr4mKCJc7jNyc36AfzPinxzVbbwlsdpGdWCub38MuETnhCHcjCzvsmRtswB/s520/u_r_not_first2.png\" width=\"520\" /></a></div>\n<div><br /></div><div>기억하자. 내가 뭔가 하고 싶은 게 있다면, 나만 하고 싶어 하는 게 아니다. 반드시 먼저 시도한 이들이 있다.</div><div><br /></div><div><b>관련 글</b><br /><ul><li><a href=\"https://kangmyounghun.blogspot.com/2022/01/2nd.html\" target=\"\">엘라스틱이 쉬웠던 이유 - 2nd</a></li></ul></div></div>",
        "contentSnippet": "하나의 로그스태시 파이프라인에서 서로 다른 데이터를 수집, 서로 다른 인덱스에 저장하는 구성에 대한 질문을 받았다. 방법은 input 구간에서 출처별로 수집 플러그인을 분리한 후, output 구간에서 조건에 따라 저장명을 달리하는 것.\n\n\ninput {\n file {\n  path => \"a.log\"\n }\n\n\n file {\n  path => \"b.log\"\n }\n\n}\n\noutput {\n if [path] == \"a.log\" {\n  elasticsearch {\n   index => \"index_a\"\n  }\n } else {\n\n  elasticsearch {\n   index => \"index_b\"\n  }\n\n }\n}\n\n\n데이터 전처리를 잘 하면 분석이 쉬워진다가 강의 주제인지라 filter 구간 활용에 집중한다. 자연스럽게 input이나 output 멀티 구성에 대한 필요성을 느낀 적이 없음. 개인의 경험은 한계가 있다. 그래서 타인의 경험이 공유될 때 강의가 재밌어진다.\n\n\n당연히 질문에 대한 답을 처음부터 알지 못했다. 하지만 답을 찾는 게 어렵진 않았다. 모르면 물어보면 되니까.\n\n\n\n\n\n엘라스틱이 나온 지 10년이 넘었고, 그동안 수백만 이상의 사용자들이 엘라스틱을 사용했다. 그중에 나와 같은 목적을 가진 사람이 한 명도 없다면 정말 이상하지 않을까? 하늘 아래 새로운 거 없고, 사람 생각하는 거 크게 다르지 않다.\n\n\n나와 같은 문제로 고민하는 사람이 수 만은 될 것이고, 그중엔 반드시 문제를 해결한 사람이, 그리고 그 해결책을 공유하는 사람이 존재한다. 검색만 잘 하면 된다는 얘기. 이때 원하는 검색 결과를 얻기 위한 조건은 단 하나.\n\n\n질문이 뚜렷해야 한다\n\n\n질문을 명확히 정의할 수 있어야 한다는 얘기. 그게 가능하려면 결국 내가 하고 싶은 게 구체적이어야 한다. 하고 싶은 게 뚜렷하지 않은 상태에서는 뭘 질문해야 할지 알 수도 없고, 설령 질문을 한들 누구도 답을 주기 어렵다. 뭘 원하는지 알기 힘든 질문이니까.\n\n목적이 뚜렷하다면 아무리 새롭고 어려운 기술이라도 즐겁게 배움에 임할 수 있으며, 좋은 질문을 할 수 있고, 좋은 답을 구할 수 있다. 설령 좋은 답을 얻지 못하더라도 최소한 그 답에 가까워질 수 있다 - Elasticsearch로 알아보는 이상징후 분석 (249p)\n\n\n\n물론 그저 엘라스틱 박사가 되고 싶은 거라면 공식 문서를 모조리 외워버리는 방법도 있다. 하지만 그게 가능하다면 같은 노력을 했을 때 인생이 더 풍요로워지는 다른 분야가 있지 않을까? 결국 툴을 잘 쓰려면 명확한 사용처가 있어야 한다.\n\n\n하고 싶은 게 뚜렷하다면 엘라스틱이나 스플렁크는 배우기 쉽다. 제품 인기도 만큼 커뮤니티가 활발하고, 같은 목적을 위한 삽질 끝에 나보다 먼저 문제를 해결한 선배들이 많기 때문. 그래서 팁이라면 그냥 구글 검색보다 커뮤니티 우선 검색이 구체적인 사례 수집에 유리하다.\n\n\n\n\n기억하자. 내가 뭔가 하고 싶은 게 있다면, 나만 하고 싶어 하는 게 아니다. 반드시 먼저 시도한 이들이 있다.\n\n\n관련 글\n\n엘라스틱이 쉬웠던 이유 - 2nd",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-1623305934797223552",
        "isoDate": "2024-09-11T04:18:00.002Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": [
      {
        "title": "Apache Flink - Hello, World!",
        "link": "https://sungjk.github.io/2024/09/18/apache-flink.html",
        "pubDate": "2024-09-18T00:00:00+00:00",
        "content": "\n            \n            &lt;p&gt;Apache Flink를 처음 접하신 분이나 간단한 예제를 작성해보고 싶은 분들을 위해 작성한 글이에요. Architecture를 포함한 자세한 내부 동작 방식은 &lt;strong&gt;&lt;a href=&quot;https://flink.apache.org/&quot;&gt;Apache Flink 공식 문서&lt;/a&gt;&lt;/strong&gt;를 참고해주시길 바랄게요.&lt;/p&gt;\n\n&lt;h1 id=&quot;apache-flink&quot;&gt;Apache Flink&lt;/h1&gt;\n\n&lt;h3 id=&quot;stateful-computations-over-data-streams&quot;&gt;Stateful Computations over Data Streams&lt;/h3&gt;\n\n&lt;blockquote&gt;\n  &lt;p&gt;Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://flink.apache.org/&quot;&gt;Apache Flink(이하 Flink)&lt;/a&gt;&lt;/strong&gt;는 데이터 스트리밍 및 배치 처리용 오픈 소스 프레임워크입니다. 비슷하게 데이터 스트리밍이나 배치 프로세싱을 위해 Kafka Streams, Spark, Kinesis 등이 있는데요, Flink 공식 홈페이지에 들어가면 먼저 Catchphrase가 눈에 들어옵니다. &lt;strong&gt;Stateful Computations over Data Streams&lt;/strong&gt;. 왜 이 문구를 강조하고 있을까요?&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/apache-flink.png&quot; alt=&quot;Apache Flink&quot; title=&quot;Apache Flink&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;스트림(Stream)&lt;/strong&gt;이란 &lt;strong&gt;특정 시점에 일어난 이벤트의 연속&lt;/strong&gt;을 의미합니다. 예를 들어, 온도, 습도 등의 데이터를 실시간으로 수집하는 IoT 디바이스에서는 변화하는 온도와 습도가 스트림으로 구성될 수 있어요. 사용자가 앱에서 특정 버튼을 클릭한다던가 피드에서 스크롤을 하는 등의 행동 데이터들도 스트림으로 구성될 수 있습니다. 이처럼 스트림은 특정 시점에 일어나는 작고 독립된 변하지 않는 불변 객체입니다. 입력 데이터가 고정된 크기의 데이터 셋으로 제공되는 &lt;strong&gt;배치 처리(Batch Processing)&lt;/strong&gt;와 다르게, 스트림 처리는(Stream Processing)은 입력 데이터가 지속적으로 발생하고 이걸 실시간으로 처리하는게 목표예요. Flink는 단순히 쏟아지는 데이터를 처리하는걸 목표로 하지 않고, 세션 윈도우(Session Window, 특정 시간 동안의 사용자 활동)나 집계(Aggregation, 평균, 총합 등) 등 &lt;strong&gt;메모리 내에서 상태를 유지하고 관리&lt;/strong&gt;할 수 있는 강력한 기능을 제공합니다. 웹 애플리케이션에서 사용자가 다양한 페이지를 방문하는 동안 각 사용자의 세션을 실시간으로 추적한다던가, 결제 시스템에서 실시간으로 거래 데이터를 모니터링하고 특정 패턴을 찾아 이상 거래를 탐지하는 등 실시간으로 발생하는 스트림 데이터에서 상태를 유지하면서 연산을 수행할 수 있는 기능을 제공합니다. 그리고 Flink의 상태 관리 기능 덕분에 애플리케이션 개발자는 이 도구를 활용해서 다양한 실시간 애플리케이션을 구축하고 쉽게 운영할 수 있게 되었습니다.&lt;/p&gt;\n\n&lt;p&gt;도구를 잘 쓰려면 이 도구가 어떻게 돌아가는지, 그리고 어디에 쓰는 것이고 어떻게 쓰는 건지 아는게 중요하기 때문에 &lt;a href=&quot;https://flink.apache.org/what-is-flink/flink-architecture/&quot;&gt;Architecture&lt;/a&gt;와 &lt;a href=&quot;https://flink.apache.org/what-is-flink/flink-applications/&quot;&gt;API&lt;/a&gt;도 참고하시면 좋겠어요. Flink 학습을 위해 온라인 강의도 들어봤는데 아직까지는 공식 문서가 최고라 생각해요. 여기서 따로 설명은 하지 않겠습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/flink-task-manager.png&quot; alt=&quot;Flink Task Manager&quot; title=&quot;Flink Task Manager&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Flink Runtime Flow&lt;/center&gt;\n\n&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;\n\n&lt;p&gt;제가 서버 개발자니.. 개발자 관점에서 Flink의 가장 대표적인 특징을 꼽으라면 &lt;strong&gt;Standalone&lt;/strong&gt;과 &lt;strong&gt;Checkpoints&lt;/strong&gt;를 이야기하고 싶습니다. 일례로 데이터 스트리밍에 많이 활용되는 &lt;a href=&quot;https://kafka.apache.org/documentation/streams/&quot;&gt;Apache Kafka Streams&lt;/a&gt;은 애플리케이션의 일부로 실행되는 라이브러리인 반면, Flink는 자체 스트림 처리 엔진을 가지고 있는 프레임워크라서 독립적으로 배포와 실행이 가능합니다. IDEA에서 코드만 작성해서 실행하면 내장된 Mini Cluster를 기반으로 쉽게 디버깅까지 할 수 있습니다. 그리고 체크포인트(Checkpoints)를 통해 애플리케이션의 상태를 주기적으로 저장하여 장애 발생시 자동으로 복구해줍니다(Fault-tolerance). 정확히 한 번만(Exactly-Once) 처리한다던가 Two-Phase Commit 기반의 원자적 커밋을 통해 데이터 일관성을 보장할 수도 있습니다.&lt;/p&gt;\n\n&lt;p&gt;그리고 하나만 더 꼽으라면 데이터 프로세싱을 위한 고수준의 API에 대해서 이야기하고 싶어요. &lt;a href=&quot;https://spark.apache.org/docs/latest/rdd-programming-guide.html&quot;&gt;Spark RDD&lt;/a&gt;를 다뤄 보신 분들이라면 아주 쉽게 사용해볼 수 있을거라 생각해요.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/spark-flink-operator.png&quot; alt=&quot;Flink Task Manager&quot; title=&quot;Flink Task Manager&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;이 Operator들은 Spark RDD를 모르더라도 Java나 Kotlin을 사용하거나 함수형 프로그래밍의 고차 함수(Higher-order Functions)에 익숙한 분들이라면 쉽게 접근할 수 있을거라 생각합니다. 쉴 새 없이 들어오는 데이터 스트림을 다른 형태로 변환하고 싶을때에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;과 같은 함수를 이용해서 새로운 데이터 스트림으로 변환하고, 특정 조건에 만족하는 데이터만 필터링하고 싶다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; 함수를 사용하면 됩니다.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 입력 데이터 스트림 생성&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// Filter: 짝수인 요소만 필터링&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilterFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// Map: 필터링된 요소를 문자열로 변환&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stringified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MapFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h3&gt;\n\n&lt;p&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-stable/&quot;&gt;Apache Flink Documentation&lt;/a&gt;을 살펴보면 Source와 Sink라는 용어가 많이 보이는데, Apache Flink 뿐만 아니라 데이터 엔지니어링에서 흔히 사용되는 용어입니다. &lt;strong&gt;Source는 데이터 파이프라인의 시작 지점&lt;/strong&gt;으로, 데이터를 수집하여 시스템에 입력하는 역할을 합니다. &lt;strong&gt;Sink는 데이터 파이프라인의 종료 지점&lt;/strong&gt;으로, 데이터를 외부 시스템으로 출력하여 저장하거나 전송하는 역할을 합니다. 데이터 소스(Source)와 데이터 싱크(Sink)로서 외부 시스템과 데이터를 주고 받을 수 있도록 여러 Connector를 제공하고 있어요. 현재(2024.09.18) 기준으로 아래와 같은 Source, Sink Connector를 제공하고 있습니다. 이 내용은 &lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/overview/#flink-project-connectors&quot;&gt;Flink Project Connectors&lt;/a&gt;에서 확인할 수 있어요.&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/kafka/&quot;&gt;Apache Kafka&lt;/a&gt; (source/sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/dynamodb/&quot;&gt;Amazon DynamoDB&lt;/a&gt; (sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/kinesis/&quot;&gt;Amazon Kinesis Data Streams&lt;/a&gt; (source/sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/elasticsearch/&quot;&gt;Elasticsearch&lt;/a&gt; (sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/opensearch/&quot;&gt;Opensearch&lt;/a&gt; (sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/filesystem/&quot;&gt;FileSystem&lt;/a&gt; (source/sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/jdbc/&quot;&gt;JDBC&lt;/a&gt; (sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/mongodb/&quot;&gt;MongoDB&lt;/a&gt; (source/sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://bahir.apache.org/docs/flink/current/flink-streaming-redis/&quot;&gt;Redis&lt;/a&gt; (sink)&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://bahir.apache.org/docs/flink/current/flink-streaming-netty/&quot;&gt;Netty&lt;/a&gt; (source)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;데이터 소스(source)에서 실시간으로 데이터를 읽어서, 새로운 형태로 변환하거나 로컬 스토리지에 저장해놓고 SQL 쿼리를 통해 유의미한 결과를 만들고, 데이터 싱크(sink)에 데이터를 출력&lt;/strong&gt;합니다. 이런 기능이 있다면 우리는 어떤 문제를 효과적으로 해결할 수 있을까요? &lt;a href=&quot;https://flink.apache.org/what-is-flink/use-cases/&quot;&gt;공식 문서의 대표적인 유스케이스&lt;/a&gt;에서는 이벤트 드리븐 애플리케이션 개발과 데이터 분석 그리고 데이터 파이프라인에 구축의 기반을 다지는데 사용될 수 있다고 말하고 있습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/flink-usecases-eventdrivenapps.png&quot; alt=&quot;Event-driven Applications&quot; title=&quot;Event-driven Applications&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Flink support event-driven applications&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/flink-usecases-analytics.png&quot; alt=&quot;Data Analytics Applications&quot; title=&quot;Data Analytics Applications&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Flink support data analytics applications&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/flink-usecases-datapipelines.png&quot; alt=&quot;Data Pipeline Applications&quot; title=&quot;Data Pipeline Applications&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Flink support data pipelines&lt;/center&gt;\n\n&lt;p&gt;잠깐 아주 간단한 예시 하나를 살펴볼게요. 사용자의 요청을 받아서 처리하는 웹 서버가 Database(DB)에 쓰기를 하면서 동시에 검색을 위해 Elastic Search(ES)에도 데이터를 적재한다고 가정해볼게요. 이 때 DB의 쓰기 연산과 ES로의 쓰기 연산이 서로 원자적으로 묶일 수 없다면 어떤 문제가 생길까요? DB에 쓰기는 성공하고 ES에 쓰기는 실패했으면, 사용자가 게시글을 쓰는데에 성공했지만 검색에는 노출이 안되는 문제가 발생할거에요. 그래서 이런 문제를 해결하기 위해 DB 쓰기와 ES 쓰기를 Kafka와 같은 이벤트 브로커를 활용해서 분리하는 전략을 취할 수 있어요. 이런 문제를 해결하기 위해 다양한 방법이 존재하는데, Flink로는 어떻게 해결할 수 있는지 살펴볼게요.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/sync-es.png&quot; alt=&quot;Sync Elastic Search&quot; title=&quot;Sync Elastic Search&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;별도 Worker를 통해 ES 데이터 적재&lt;/center&gt;\n\n&lt;p&gt;Flink 생태계에서 인기 있는 것 중 하나는 &lt;strong&gt;&lt;a href=&quot;https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/&quot;&gt;Flink CDC&lt;/a&gt;&lt;/strong&gt;입니다. Flink CDC는 &lt;a href=&quot;https://debezium.io/&quot;&gt;Debezium&lt;/a&gt;을 기반으로 데이터베이스의 변경 로그를 실시간으로 캡쳐해서 타겟 시스템으로 반영할 수 있게 도와주는 도구입니다. &lt;strong&gt;사용자가 DB에 쓰기 연산을 실행하면 Flink CDC가 변경 사항을 캡쳐해서 Kafka에 데이터 변경점을 기록하고, Flink 앱에서 변경점을 받아 변환을 한 다음 ES에 데이터를 적재&lt;/strong&gt;합니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/flink-cdc-usage.png&quot; alt=&quot;Flink CDC Usage&quot; title=&quot;Flink CDC Usage&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Flink CDC 기반 ES 데이터 적재&lt;/center&gt;\n\n&lt;p&gt;Kafka와 같은 이벤트 브로커를 중심으로 ES 쓰기를 실행하니, 언뜻 보기엔 바로 위에서 이야기한 ‘ES 적재를 이벤트 기반으로 분리’와 별반 다르지 않아 보입니다. 그런데 Flink 기반으로 문제를 해결할 때 취할 수 있는 장점은 위에서 잠깐 이야기한 체크포인트(Checkpoint)를 활용할 수 있다는 것입니다. 장애 복구 관점에서 Worker에서 ES 쓰기를 어디까지 했는지 별도 저장소에 관리를 해야 할 필요가 있는데, Flink 기반의 데이터 처리는 체크포인트와 상태 관리를 통해 장애 복구 뿐만 아니라 데이터의 일관성 보장을 높일 수 있습니다. 복잡한 상태 관리와 장애 복구 등의 작업은 플랫폼(라이브러리나 프레임워크)에 적절히 위임하고, 엔지니어는 이런 도구를 잘 활용하여 어떤 가치를 창출할 수 있을지에 집중하는게 중요합니다. 이런 고민과 선택은 사용자에게 일관된 최상의 경험을 제공하는 길로 이어질 수 있습니다.&lt;/p&gt;\n\n&lt;p&gt;여기서 살펴본 건 하나의 예시일 뿐, 중요한 건 &lt;strong&gt;&apos;흐르는 데이터에 어떤 빨때를 꽂아서 어디에 활용해 볼 수 있을까?&apos;&lt;/strong&gt;라는 질문을 가지고 계속해서 고민하는 것입니다. 관습적으로 배치 잡을 사용해 처리하던 작업들을 스트리밍 애플리케이션으로 전환해서 처리할 수는 없을까요? 만약 데이터 처리를 위해 Spring Batch 부터 떠올린다면 Stream Processing도 함께 살펴보시길 추천할게요.&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;quickstart&quot;&gt;Quickstart&lt;/h1&gt;\n\n&lt;p&gt;Apache Flink 애플리케이션을 실행하기 위해서는 먼저 Flink Cluster 환경 구축이 필요합니다. 클러스터를 통해 데이터를 병렬 처리하거나 내결함성을 제공해 데이터를 효율적으로 처리할 수 있습니다. 그리고 애플리케이션을 실행한다는 말은 Flink에 정의한 Job을 실행한다는 의미이기도 합니다. Cluster에는 실행 가능한 Jar 파일을 제출하면 되는데, 자바 애플리케이션 코드를 작성해서 빌드한 결과로 나온 Jar 파일을 제출하면 됩니다.&lt;/p&gt;\n\n&lt;p&gt;Production 환경에서 Flink 애플리케이션을 실행하려면 &lt;a href=&quot;https://aws.amazon.com/managed-service-apache-flink/&quot;&gt;Amazon Managed Service for Apache Flink&lt;/a&gt; 같은 솔루션을 써도 되고, &lt;a href=&quot;https://nightlies.apache.org/flink/flink-kubernetes-operator-docs-stable/docs/try-flink-kubernetes-operator/quick-start/&quot;&gt;Flink Kubernetes Operator&lt;/a&gt;를 이용해서 Kubernetes 위에서 Flink Cluster와 Job을 배포하고 관리할 수 있습니다. 여기서는 Mac OS 환경의 로컬 PC에서 Apache Flink 애플리케이션을 실행하는 여러 방법을 살펴보겠습니다.&lt;/p&gt;\n\n&lt;h3 id=&quot;1-idea에서-프로그램-실행&quot;&gt;1. IDEA에서 프로그램 실행&lt;/h3&gt;\n\n&lt;p&gt;가장 편하고 유용한 방법은 IntelliJ IDEA에서 main 함수를 바로 실행하는 것입니다. Flink 애플리케이션을 실행하려면 Cluster에 실행 가능한 Jar 파일을 제출해야 되는데, IDEA에서 버튼만 누르면 바로 실행이 되고 디버깅까지 되니 신기할 따름입니다. 그 이유는 Apache Flink에서는 로컬 환경에서 Flink Cluster를 에뮬레이션할 수 있게끔 &lt;a href=&quot;https://github.com/apache/flink/blob/master/flink-runtime/src/main/java/org/apache/flink/runtime/minicluster/MiniCluster.java&quot;&gt;MiniCluster&lt;/a&gt;를 제공하기 때문입니다. 그래서 Flink 애플리케이션을 만드는 개발자는 실제 클러스터를 구축할 필요 없이 로컬 환경에서 Flink Cluster에 앱을 실행하는 것처럼 시뮬레이션을 할 수 있습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-run-application.png&quot; alt=&quot;IDEA Run Application&quot; title=&quot;IDEA Run Application&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;2-local-flink-cluster-구축&quot;&gt;2. Local Flink Cluster 구축&lt;/h3&gt;\n\n&lt;p&gt;또 다른 방법은 직접 Flink Cluster를 로컬 환경에 구축해서 사용하는 것입니다. &lt;a href=&quot;https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/try-flink/local_installation/&quot;&gt;Apache Flink 공식 문서&lt;/a&gt;에서 Local Cluster를 구축할 수 있는 가이드를 제공하고 있습니다. Binary Release를 다운 받아서 압축을 푼 다음 아래 명령어를 실행해서 Flink Cluster를 시작하고 Jar 파일을 실행시켜서 Job을 제출할 수 있습니다.&lt;/p&gt;\n\n&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Flink Cluser 중지\n$ ./bin/stop-cluster.sh\n\n# Flink Cluser 시작\n$ ./bin/start-cluster.sh\n\n# Flink Cluster에 Flink Job 제출(실행)\n$ ./bin/flink run examples/streaming/WordCount.jar\n\n# Flink Cluster 로그 확인\n$ tail -f log/flink-*\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;2-1-idea에-flink-plugin-설치&quot;&gt;2-1. IDEA에 Flink Plugin 설치&lt;/h3&gt;\n\n&lt;p&gt;IntelliJ IDEA에서 Big Data Tools 플러그인 번들로 함께 사용할 수 있는 &lt;a href=&quot;https://plugins.jetbrains.com/plugin/21702-flink&quot;&gt;Flink Plugin&lt;/a&gt;을 제공합니다. 이 플러그인을 사용하면 Flink Cluster를 모니터링하거나 직접 Flink Job을 제출할 수 있는 기능을 제공합니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-settings-flink.png&quot; alt=&quot;IDEA Settings&quot; title=&quot;IDEA Settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-settings-flink-test-connection.png&quot; alt=&quot;IDEA Test Connection&quot; title=&quot;IDEA Test Connection&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;2-2-local-cluster에-jar-제출&quot;&gt;2-2. Local Cluster에 Jar 제출&lt;/h3&gt;\n\n&lt;p&gt;IDEA에 생성된 Flink Console에서 Submit New Job 클릭후 + 버튼을 누르면 빌드된 Jar 파일을 선택할 수 있습니다. Jar 파일을 선택하고 나서 실행(Run) 버튼을 클릭하면 Flink Cluster에 Jar 파일이 제출되고 정상이라면 Job이 실행됩니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-submit-new-job.png&quot; alt=&quot;IDEA Submit New Job&quot; title=&quot;IDEA Submit New Job&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-run-jar.png&quot; alt=&quot;IDEA Run Jar&quot; title=&quot;IDEA Run Jar&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-run-jar-2.png&quot; alt=&quot;IDEA Run Jar&quot; title=&quot;IDEA Run Jar&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;2-3-local-cluster-모니터링&quot;&gt;2-3. Local Cluster 모니터링&lt;/h3&gt;\n\n&lt;p&gt;Console에서 Open in Browser 버튼을 클릭하면 현재 모니터링으로 연결된 Cluster의 상태를 확인할 수 있는 대시보드가 열립니다. 이 대시보드에서는 현재 실행중인 Job을 포함하여 Flink Cluster의 Task Manager, Job Manager 그리고 Clsuter logs 등을 확인할 수 있습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-cluster-web.png&quot; alt=&quot;IDEA Cluster Web&quot; title=&quot;IDEA Cluster Web&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/09/18/idea-flink-cluster-dashboard.png&quot; alt=&quot;IDEA Cluster Dashboard&quot; title=&quot;IDEA Cluster Dashboard&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;hello-world&quot;&gt;Hello, World!&lt;/h1&gt;\n\n&lt;p&gt;이제 Flink 애플리케이션 실행 환경이 구축되었으니 모든 프로그래밍의 시작인 Hello, World를 만들어보겠습니다. 프로그래밍 언어의 첫 시작은 콘솔에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello, World!&lt;/code&gt; 문자열을 출력하는 것인데, 데이터 프로세싱에서는 단어 개수를 세는 Word Count를 입문용 예제로 다루고 있습니다. 여기서는 Flink를 활용해 문자열에 포함된 특정 단어들의 개수를 출력하는 Word Count Job을 만들어보겠습니다. 전체 코드는 &lt;a href=&quot;https://github.com/sungjk/flink-hello-world&quot;&gt;Github - flink-hello-world&lt;/a&gt;에서 확인할 수 있어요.&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.api.common.functions.FlatMapFunction&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.api.common.typeinfo.TypeHint&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.api.common.typeinfo.TypeInformation&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.api.java.tuple.Tuple2&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.streaming.api.environment.StreamExecutionEnvironment&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.flink.util.Collector&lt;/span&gt;\n\n&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordCounterJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 데이터 소스로 사용할 문자열&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;words&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;\n            The quick brown fox jumps over the lazy dog.\n            The quick blue fox jumps over the lazy dog.\n            The quick brown cat jumps over the lazy dog.\n            The quick blue cat jumps over the lazy dog.\n        &quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trimIndent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n\n    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 스트리밍 실행 환경 생성&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 문자열 데이터 소스 생성&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fromData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in-memory-source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FlatMapFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                    &lt;span class=&quot;c1&quot;&gt;// 입력 문자열을 소문자로 변환하고, 정규식을 사용하여 단어로 분리&lt;/span&gt;\n                    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;tokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\\\W+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toRegex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;\n                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                            &lt;span class=&quot;c1&quot;&gt;// 각 단어와 그 단어의 개수를 나타내는 튜플(Tuple2&amp;lt;String, Int&amp;gt;)로 수집&lt;/span&gt;\n                            &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n            &lt;span class=&quot;c1&quot;&gt;// 반환 타입 정보 지정(Generic 타입의 한계를 해결하기 위해 TypeInformation을 사용)&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TypeInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TypeHint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n            &lt;span class=&quot;c1&quot;&gt;// 단어별로 그룹핑&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keyBy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n            &lt;span class=&quot;c1&quot;&gt;// 각 그룹별로 두번째 필드인 단어의 개수를 합산&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;counter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 최종 결과를 표준 출력에 출력하는 싱크 연산 추가&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;print-sink&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// 스트리밍 작업 실행&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JeremyWordCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;아마 95% 이상의 Flink 애플리케이션은 Java 언어로 작성되어 있을거라 생각합니다(샘플 예제를 몇가지 찾아봤지만 코틀린 코드는 발견하지 못했어요). 저는 자바 언어를 썩 즐겨 쓰지는 않아서 Flink 애플리케이션도 Kotlin으로 작성하고 있습니다. 그러다보니 아주 간혹 타입 때문에 귀찮을 때가 있는데 크게 불편할 정도는 아닙니다.&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;troubleshootings&quot;&gt;Troubleshootings&lt;/h1&gt;\n\n&lt;p&gt;실행 환경 구축부터 스스로 Word Count 앱을 작성하기까지 몇가지 우여곡절이 있었습니다. 코드는 정말 몇 줄 안되는데 빌드 과정, Jar 파일 생성 문제, Java의 Type Erase 현상 등 여러 문제들을 겪고 해결하는 과정을 거쳤습니다.&lt;/p&gt;\n\n&lt;h3 id=&quot;jar-내에-main-class-찾을-수-없음&quot;&gt;Jar 내에 Main class 찾을 수 없음&lt;/h3&gt;\n\n&lt;p&gt;에러 로그:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Neither&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;(해결 방법) Jar file에 Main class name 명시:&lt;/p&gt;\n\n&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// application(main)&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// entry point is not a method inside the class&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// use @JvmStatic annotation inside the companion object&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nd&quot;&gt;@JvmStatic&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n            &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// build.gradle.kts&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;archiveFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello-world.jar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;nf&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;// add main class name&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main-Class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;io.sungjk.flink.Main&quot;&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;jar-내에-flink-job-찾을-수-없음&quot;&gt;Jar 내에 Flink Job 찾을 수 없음&lt;/h3&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JAR&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;file:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;exist:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;(해결 방법) Main Class 내에 테스트할 Job 추가:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\n&lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WordCounterJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StreamExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExecutionEnvironment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;\n        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JeremyWordCount&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;gradle-모듈-의존성-찾지-못함&quot;&gt;gradle 모듈 의존성 찾지 못함&lt;/h3&gt;\n\n&lt;p&gt;에러 로그:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProgramInvocationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;An&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;occurred&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invoking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;method:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sungjk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PackagedProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;callMainMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PackagedProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;378&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;program&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PackagedProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invokeInteractiveModeForExecution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PackagedProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;223&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ClientUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ClientUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;113&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CliFrontend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeProgram&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CliFrontend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1026&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;(해결 방법) Shadow Plugin 사용해서 모든 의존성을 단일 JAR 파일로 패키징한 후 shadowJar task 실행:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.johnrengelman.shadow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;7.1.2&quot;&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shadowJar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;archiveFileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello-world.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Main-Class&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;io.sungjk.flink.Main&quot;&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;h3 id=&quot;flink-cluster에서-타입-추론-불가type-erasure&quot;&gt;Flink Cluster에서 타입 추론 불가(Type Erasure)&lt;/h3&gt;\n\n&lt;p&gt;에러 로그:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;determined&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;automatically&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;due&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erasure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;give&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hints&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transformation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;implement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ResultTypeQueryable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;\n\t&lt;span class=&quot;nc&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Transformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Transformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;557&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;streaming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;datastream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;193&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;streaming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;datastream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KeyedStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KeyedStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;118&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;streaming&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;datastream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keyBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DataStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;293&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n\t&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;p&gt;(해결 방법) Flink의 TypeInformation 클래스를 사용하여 반환 타입 명시:&lt;/p&gt;\n\n&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlatMapFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// Flink의 TypeInformation 클래스를 사용하여 반환 타입 명시&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;returns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TypeInformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TypeHint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tuple2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}))&lt;/span&gt;\n    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;\n\n&lt;p&gt;쏟아지는 데이터를 실시간으로 활용할 수 있는 환경이 갖추어지니 할 수 있는게 정말 많아졌습니다. 단순히 Apache Flink라는 새로운 도구에 익숙해진 건 단편적인 예시일 뿐, 데이터에 대해 눈이 떠졌다랄까요. 데이터 엔지니어 동료와 처음 티타임을 할 때 데이터에 무지한 저의 모습을 스스로 제 3자의 시각에서 바라보고 있는 느낌이 들었고, 머릿속에서는 새로운 터널에 들어서는 것만 같았습니다. 짧게는 3개월, 길게는 1년 뒤에 달라져 있을 제 모습이 상상되기도 했어요. 멋진 동료 덕분에 성장하고 있다는걸 느낄 수 있었고 도움이 필요하면 저도 많이 도와주고 싶다는 생각이 들었습니다.&lt;/p&gt;\n\n&lt;p&gt;이제 백엔드 엔지니어로서 다룰 수 있는 연장이 하나 더 늘어났습니다. 경계해야 할 건 모든게 다 못으로 보이지 않게 만드는 것. 실시간으로 데이터를 처리할 수 있는 능력이 생겼으니 모든 곳에 다 스트림 앱을 갖다 붙이고 싶을 수 있습니다. 그래서 이 도구로 해결하기에 적당한 문제가 무엇인지 알고 있는게 중요한데요. 처리할 데이터 소스와 싱크를 지원하는지 알아보고, 실시간성(Real-time) 그리고 Window 기반으로 이벤트를 처리해야 할 문제에 Flink를 추천하고 싶습니다. 실시간으로 발생하는 거래 데이터가 정상인지, 이상거래는 아닌지 &lt;a href=&quot;https://flink.apache.org/what-is-flink/flink-applications/#state&quot;&gt;State&lt;/a&gt;와 &lt;a href=&quot;https://flink.apache.org/what-is-flink/flink-applications/#time&quot;&gt;Time&lt;/a&gt;을 활용해서 판단할 수 있습니다.&lt;/p&gt;\n\n&lt;p&gt;마지막으로, 한국에도 Flink를 사용하는 회사들이 점점 많아지고 있는것 같은데, 기술 교류와 레퍼런스가 많아졌으면 좋겠다는 생각이 들었습니다. 생태계는 계속해서 발전하고 있다는 느낌이 드는데, 대부분 비슷하겠지만 구체적으로 어떤 니즈를 가지고 이 기술을 도입해서 사용하고 있는지가 궁금했습니다. 자주, 더 많은 기술 공유가 있기를!&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;https://flink.apache.org/&quot;&gt;Apache Flink&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://www.confluent.io/learn/apache-flink/&quot;&gt;What is Apache Flink?&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n            \n          ",
        "contentSnippet": "<p>Apache Flink를 처음 접하신 분이나 간단한 예제를 작성해보고 싶은 분들을 위해 작성한 글이에요. Architecture를 포함한 자세한 내부 동작 방식은 <strong><a href=\"https://flink.apache.org/\">Apache Flink 공식 문서</a></strong>를 참고해주시길 바랄게요.</p>\n\n<h1 id=\"apache-flink\">Apache Flink</h1>\n\n<h3 id=\"stateful-computations-over-data-streams\">Stateful Computations over Data Streams</h3>\n\n<blockquote>\n  <p>Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale.</p>\n</blockquote>\n\n<p><strong><a href=\"https://flink.apache.org/\">Apache Flink(이하 Flink)</a></strong>는 데이터 스트리밍 및 배치 처리용 오픈 소스 프레임워크입니다. 비슷하게 데이터 스트리밍이나 배치 프로세싱을 위해 Kafka Streams, Spark, Kinesis 등이 있는데요, Flink 공식 홈페이지에 들어가면 먼저 Catchphrase가 눈에 들어옵니다. <strong>Stateful Computations over Data Streams</strong>. 왜 이 문구를 강조하고 있을까요?</p>\n\n<p><img src=\"/images/2024/09/18/apache-flink.png\" alt=\"Apache Flink\" title=\"Apache Flink\" class=\"center-image\" /></p>\n\n<p><strong>스트림(Stream)</strong>이란 <strong>특정 시점에 일어난 이벤트의 연속</strong>을 의미합니다. 예를 들어, 온도, 습도 등의 데이터를 실시간으로 수집하는 IoT 디바이스에서는 변화하는 온도와 습도가 스트림으로 구성될 수 있어요. 사용자가 앱에서 특정 버튼을 클릭한다던가 피드에서 스크롤을 하는 등의 행동 데이터들도 스트림으로 구성될 수 있습니다. 이처럼 스트림은 특정 시점에 일어나는 작고 독립된 변하지 않는 불변 객체입니다. 입력 데이터가 고정된 크기의 데이터 셋으로 제공되는 <strong>배치 처리(Batch Processing)</strong>와 다르게, 스트림 처리는(Stream Processing)은 입력 데이터가 지속적으로 발생하고 이걸 실시간으로 처리하는게 목표예요. Flink는 단순히 쏟아지는 데이터를 처리하는걸 목표로 하지 않고, 세션 윈도우(Session Window, 특정 시간 동안의 사용자 활동)나 집계(Aggregation, 평균, 총합 등) 등 <strong>메모리 내에서 상태를 유지하고 관리</strong>할 수 있는 강력한 기능을 제공합니다. 웹 애플리케이션에서 사용자가 다양한 페이지를 방문하는 동안 각 사용자의 세션을 실시간으로 추적한다던가, 결제 시스템에서 실시간으로 거래 데이터를 모니터링하고 특정 패턴을 찾아 이상 거래를 탐지하는 등 실시간으로 발생하는 스트림 데이터에서 상태를 유지하면서 연산을 수행할 수 있는 기능을 제공합니다. 그리고 Flink의 상태 관리 기능 덕분에 애플리케이션 개발자는 이 도구를 활용해서 다양한 실시간 애플리케이션을 구축하고 쉽게 운영할 수 있게 되었습니다.</p>\n\n<p>도구를 잘 쓰려면 이 도구가 어떻게 돌아가는지, 그리고 어디에 쓰는 것이고 어떻게 쓰는 건지 아는게 중요하기 때문에 <a href=\"https://flink.apache.org/what-is-flink/flink-architecture/\">Architecture</a>와 <a href=\"https://flink.apache.org/what-is-flink/flink-applications/\">API</a>도 참고하시면 좋겠어요. Flink 학습을 위해 온라인 강의도 들어봤는데 아직까지는 공식 문서가 최고라 생각해요. 여기서 따로 설명은 하지 않겠습니다.</p>\n\n<p><img src=\"/images/2024/09/18/flink-task-manager.png\" alt=\"Flink Task Manager\" title=\"Flink Task Manager\" class=\"center-image\" /></p>\n\n<center>Flink Runtime Flow</center>\n\n<h3 id=\"advantages\">Advantages</h3>\n\n<p>제가 서버 개발자니.. 개발자 관점에서 Flink의 가장 대표적인 특징을 꼽으라면 <strong>Standalone</strong>과 <strong>Checkpoints</strong>를 이야기하고 싶습니다. 일례로 데이터 스트리밍에 많이 활용되는 <a href=\"https://kafka.apache.org/documentation/streams/\">Apache Kafka Streams</a>은 애플리케이션의 일부로 실행되는 라이브러리인 반면, Flink는 자체 스트림 처리 엔진을 가지고 있는 프레임워크라서 독립적으로 배포와 실행이 가능합니다. IDEA에서 코드만 작성해서 실행하면 내장된 Mini Cluster를 기반으로 쉽게 디버깅까지 할 수 있습니다. 그리고 체크포인트(Checkpoints)를 통해 애플리케이션의 상태를 주기적으로 저장하여 장애 발생시 자동으로 복구해줍니다(Fault-tolerance). 정확히 한 번만(Exactly-Once) 처리한다던가 Two-Phase Commit 기반의 원자적 커밋을 통해 데이터 일관성을 보장할 수도 있습니다.</p>\n\n<p>그리고 하나만 더 꼽으라면 데이터 프로세싱을 위한 고수준의 API에 대해서 이야기하고 싶어요. <a href=\"https://spark.apache.org/docs/latest/rdd-programming-guide.html\">Spark RDD</a>를 다뤄 보신 분들이라면 아주 쉽게 사용해볼 수 있을거라 생각해요.</p>\n\n<p><img src=\"/images/2024/09/18/spark-flink-operator.png\" alt=\"Flink Task Manager\" title=\"Flink Task Manager\" class=\"center-image\" /></p>\n\n<p>이 Operator들은 Spark RDD를 모르더라도 Java나 Kotlin을 사용하거나 함수형 프로그래밍의 고차 함수(Higher-order Functions)에 익숙한 분들이라면 쉽게 접근할 수 있을거라 생각합니다. 쉴 새 없이 들어오는 데이터 스트림을 다른 형태로 변환하고 싶을때에는 <code class=\"language-plaintext highlighter-rouge\">map</code>과 같은 함수를 이용해서 새로운 데이터 스트림으로 변환하고, 특정 조건에 만족하는 데이터만 필터링하고 싶다면 <code class=\"language-plaintext highlighter-rouge\">filter</code> 함수를 사용하면 됩니다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 입력 데이터 스트림 생성</span>\n<span class=\"kd\">val</span> <span class=\"py\">input</span><span class=\"p\">:</span> <span class=\"nc\">DataStream</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">env</span><span class=\"p\">.</span><span class=\"nf\">fromElements</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Filter: 짝수인 요소만 필터링</span>\n<span class=\"kd\">val</span> <span class=\"py\">filtered</span><span class=\"p\">:</span> <span class=\"nc\">DataStream</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">input</span><span class=\"p\">.</span><span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"kd\">object</span> <span class=\"err\">: </span><span class=\"nc\">FilterFunction</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">filter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nc\">Int</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"p\">%</span> <span class=\"mi\">2</span> <span class=\"p\">==</span> <span class=\"mi\">0</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// Map: 필터링된 요소를 문자열로 변환</span>\n<span class=\"kd\">val</span> <span class=\"py\">stringified</span><span class=\"p\">:</span> <span class=\"nc\">DataStream</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"n\">filtered</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kd\">object</span> <span class=\"err\">: </span><span class=\"nc\">MapFunction</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">,</span> <span class=\"nc\">String</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nc\">Int</span><span class=\"p\">):</span> <span class=\"nc\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">toString</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<h3 id=\"use-cases\">Use Cases</h3>\n\n<p><a href=\"https://nightlies.apache.org/flink/flink-docs-stable/\">Apache Flink Documentation</a>을 살펴보면 Source와 Sink라는 용어가 많이 보이는데, Apache Flink 뿐만 아니라 데이터 엔지니어링에서 흔히 사용되는 용어입니다. <strong>Source는 데이터 파이프라인의 시작 지점</strong>으로, 데이터를 수집하여 시스템에 입력하는 역할을 합니다. <strong>Sink는 데이터 파이프라인의 종료 지점</strong>으로, 데이터를 외부 시스템으로 출력하여 저장하거나 전송하는 역할을 합니다. 데이터 소스(Source)와 데이터 싱크(Sink)로서 외부 시스템과 데이터를 주고 받을 수 있도록 여러 Connector를 제공하고 있어요. 현재(2024.09.18) 기준으로 아래와 같은 Source, Sink Connector를 제공하고 있습니다. 이 내용은 <a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/overview/#flink-project-connectors\">Flink Project Connectors</a>에서 확인할 수 있어요.</p>\n\n<ul>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/kafka/\">Apache Kafka</a> (source/sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/dynamodb/\">Amazon DynamoDB</a> (sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/kinesis/\">Amazon Kinesis Data Streams</a> (source/sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/elasticsearch/\">Elasticsearch</a> (sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/opensearch/\">Opensearch</a> (sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/filesystem/\">FileSystem</a> (source/sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/jdbc/\">JDBC</a> (sink)</li>\n  <li><a href=\"https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/mongodb/\">MongoDB</a> (source/sink)</li>\n  <li><a href=\"https://bahir.apache.org/docs/flink/current/flink-streaming-redis/\">Redis</a> (sink)</li>\n  <li><a href=\"https://bahir.apache.org/docs/flink/current/flink-streaming-netty/\">Netty</a> (source)</li>\n</ul>\n\n<p><strong>데이터 소스(source)에서 실시간으로 데이터를 읽어서, 새로운 형태로 변환하거나 로컬 스토리지에 저장해놓고 SQL 쿼리를 통해 유의미한 결과를 만들고, 데이터 싱크(sink)에 데이터를 출력</strong>합니다. 이런 기능이 있다면 우리는 어떤 문제를 효과적으로 해결할 수 있을까요? <a href=\"https://flink.apache.org/what-is-flink/use-cases/\">공식 문서의 대표적인 유스케이스</a>에서는 이벤트 드리븐 애플리케이션 개발과 데이터 분석 그리고 데이터 파이프라인에 구축의 기반을 다지는데 사용될 수 있다고 말하고 있습니다.</p>\n\n<p><img src=\"/images/2024/09/18/flink-usecases-eventdrivenapps.png\" alt=\"Event-driven Applications\" title=\"Event-driven Applications\" class=\"center-image\" /></p>\n\n<center>Flink support event-driven applications</center>\n\n<p><img src=\"/images/2024/09/18/flink-usecases-analytics.png\" alt=\"Data Analytics Applications\" title=\"Data Analytics Applications\" class=\"center-image\" /></p>\n\n<center>Flink support data analytics applications</center>\n\n<p><img src=\"/images/2024/09/18/flink-usecases-datapipelines.png\" alt=\"Data Pipeline Applications\" title=\"Data Pipeline Applications\" class=\"center-image\" /></p>\n\n<center>Flink support data pipelines</center>\n\n<p>잠깐 아주 간단한 예시 하나를 살펴볼게요. 사용자의 요청을 받아서 처리하는 웹 서버가 Database(DB)에 쓰기를 하면서 동시에 검색을 위해 Elastic Search(ES)에도 데이터를 적재한다고 가정해볼게요. 이 때 DB의 쓰기 연산과 ES로의 쓰기 연산이 서로 원자적으로 묶일 수 없다면 어떤 문제가 생길까요? DB에 쓰기는 성공하고 ES에 쓰기는 실패했으면, 사용자가 게시글을 쓰는데에 성공했지만 검색에는 노출이 안되는 문제가 발생할거에요. 그래서 이런 문제를 해결하기 위해 DB 쓰기와 ES 쓰기를 Kafka와 같은 이벤트 브로커를 활용해서 분리하는 전략을 취할 수 있어요. 이런 문제를 해결하기 위해 다양한 방법이 존재하는데, Flink로는 어떻게 해결할 수 있는지 살펴볼게요.</p>\n\n<p><img src=\"/images/2024/09/18/sync-es.png\" alt=\"Sync Elastic Search\" title=\"Sync Elastic Search\" class=\"center-image\" /></p>\n\n<center>별도 Worker를 통해 ES 데이터 적재</center>\n\n<p>Flink 생태계에서 인기 있는 것 중 하나는 <strong><a href=\"https://nightlies.apache.org/flink/flink-cdc-docs-release-3.2/\">Flink CDC</a></strong>입니다. Flink CDC는 <a href=\"https://debezium.io/\">Debezium</a>을 기반으로 데이터베이스의 변경 로그를 실시간으로 캡쳐해서 타겟 시스템으로 반영할 수 있게 도와주는 도구입니다. <strong>사용자가 DB에 쓰기 연산을 실행하면 Flink CDC가 변경 사항을 캡쳐해서 Kafka에 데이터 변경점을 기록하고, Flink 앱에서 변경점을 받아 변환을 한 다음 ES에 데이터를 적재</strong>합니다.</p>\n\n<p><img src=\"/images/2024/09/18/flink-cdc-usage.png\" alt=\"Flink CDC Usage\" title=\"Flink CDC Usage\" class=\"center-image\" /></p>\n\n<center>Flink CDC 기반 ES 데이터 적재</center>\n\n<p>Kafka와 같은 이벤트 브로커를 중심으로 ES 쓰기를 실행하니, 언뜻 보기엔 바로 위에서 이야기한 ‘ES 적재를 이벤트 기반으로 분리’와 별반 다르지 않아 보입니다. 그런데 Flink 기반으로 문제를 해결할 때 취할 수 있는 장점은 위에서 잠깐 이야기한 체크포인트(Checkpoint)를 활용할 수 있다는 것입니다. 장애 복구 관점에서 Worker에서 ES 쓰기를 어디까지 했는지 별도 저장소에 관리를 해야 할 필요가 있는데, Flink 기반의 데이터 처리는 체크포인트와 상태 관리를 통해 장애 복구 뿐만 아니라 데이터의 일관성 보장을 높일 수 있습니다. 복잡한 상태 관리와 장애 복구 등의 작업은 플랫폼(라이브러리나 프레임워크)에 적절히 위임하고, 엔지니어는 이런 도구를 잘 활용하여 어떤 가치를 창출할 수 있을지에 집중하는게 중요합니다. 이런 고민과 선택은 사용자에게 일관된 최상의 경험을 제공하는 길로 이어질 수 있습니다.</p>\n\n<p>여기서 살펴본 건 하나의 예시일 뿐, 중요한 건 <strong>'흐르는 데이터에 어떤 빨때를 꽂아서 어디에 활용해 볼 수 있을까?'</strong>라는 질문을 가지고 계속해서 고민하는 것입니다. 관습적으로 배치 잡을 사용해 처리하던 작업들을 스트리밍 애플리케이션으로 전환해서 처리할 수는 없을까요? 만약 데이터 처리를 위해 Spring Batch 부터 떠올린다면 Stream Processing도 함께 살펴보시길 추천할게요.</p>\n\n<hr />\n\n<h1 id=\"quickstart\">Quickstart</h1>\n\n<p>Apache Flink 애플리케이션을 실행하기 위해서는 먼저 Flink Cluster 환경 구축이 필요합니다. 클러스터를 통해 데이터를 병렬 처리하거나 내결함성을 제공해 데이터를 효율적으로 처리할 수 있습니다. 그리고 애플리케이션을 실행한다는 말은 Flink에 정의한 Job을 실행한다는 의미이기도 합니다. Cluster에는 실행 가능한 Jar 파일을 제출하면 되는데, 자바 애플리케이션 코드를 작성해서 빌드한 결과로 나온 Jar 파일을 제출하면 됩니다.</p>\n\n<p>Production 환경에서 Flink 애플리케이션을 실행하려면 <a href=\"https://aws.amazon.com/managed-service-apache-flink/\">Amazon Managed Service for Apache Flink</a> 같은 솔루션을 써도 되고, <a href=\"https://nightlies.apache.org/flink/flink-kubernetes-operator-docs-stable/docs/try-flink-kubernetes-operator/quick-start/\">Flink Kubernetes Operator</a>를 이용해서 Kubernetes 위에서 Flink Cluster와 Job을 배포하고 관리할 수 있습니다. 여기서는 Mac OS 환경의 로컬 PC에서 Apache Flink 애플리케이션을 실행하는 여러 방법을 살펴보겠습니다.</p>\n\n<h3 id=\"1-idea에서-프로그램-실행\">1. IDEA에서 프로그램 실행</h3>\n\n<p>가장 편하고 유용한 방법은 IntelliJ IDEA에서 main 함수를 바로 실행하는 것입니다. Flink 애플리케이션을 실행하려면 Cluster에 실행 가능한 Jar 파일을 제출해야 되는데, IDEA에서 버튼만 누르면 바로 실행이 되고 디버깅까지 되니 신기할 따름입니다. 그 이유는 Apache Flink에서는 로컬 환경에서 Flink Cluster를 에뮬레이션할 수 있게끔 <a href=\"https://github.com/apache/flink/blob/master/flink-runtime/src/main/java/org/apache/flink/runtime/minicluster/MiniCluster.java\">MiniCluster</a>를 제공하기 때문입니다. 그래서 Flink 애플리케이션을 만드는 개발자는 실제 클러스터를 구축할 필요 없이 로컬 환경에서 Flink Cluster에 앱을 실행하는 것처럼 시뮬레이션을 할 수 있습니다.</p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-run-application.png\" alt=\"IDEA Run Application\" title=\"IDEA Run Application\" class=\"center-image\" /></p>\n\n<h3 id=\"2-local-flink-cluster-구축\">2. Local Flink Cluster 구축</h3>\n\n<p>또 다른 방법은 직접 Flink Cluster를 로컬 환경에 구축해서 사용하는 것입니다. <a href=\"https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/try-flink/local_installation/\">Apache Flink 공식 문서</a>에서 Local Cluster를 구축할 수 있는 가이드를 제공하고 있습니다. Binary Release를 다운 받아서 압축을 푼 다음 아래 명령어를 실행해서 Flink Cluster를 시작하고 Jar 파일을 실행시켜서 Job을 제출할 수 있습니다.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># Flink Cluser 중지\n$ ./bin/stop-cluster.sh\n\n# Flink Cluser 시작\n$ ./bin/start-cluster.sh\n\n# Flink Cluster에 Flink Job 제출(실행)\n$ ./bin/flink run examples/streaming/WordCount.jar\n\n# Flink Cluster 로그 확인\n$ tail -f log/flink-*\n</code></pre></div></div>\n\n<h3 id=\"2-1-idea에-flink-plugin-설치\">2-1. IDEA에 Flink Plugin 설치</h3>\n\n<p>IntelliJ IDEA에서 Big Data Tools 플러그인 번들로 함께 사용할 수 있는 <a href=\"https://plugins.jetbrains.com/plugin/21702-flink\">Flink Plugin</a>을 제공합니다. 이 플러그인을 사용하면 Flink Cluster를 모니터링하거나 직접 Flink Job을 제출할 수 있는 기능을 제공합니다.</p>\n\n<p><img src=\"/images/2024/09/18/idea-settings-flink.png\" alt=\"IDEA Settings\" title=\"IDEA Settings\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/09/18/idea-settings-flink-test-connection.png\" alt=\"IDEA Test Connection\" title=\"IDEA Test Connection\" class=\"center-image\" /></p>\n\n<h3 id=\"2-2-local-cluster에-jar-제출\">2-2. Local Cluster에 Jar 제출</h3>\n\n<p>IDEA에 생성된 Flink Console에서 Submit New Job 클릭후 + 버튼을 누르면 빌드된 Jar 파일을 선택할 수 있습니다. Jar 파일을 선택하고 나서 실행(Run) 버튼을 클릭하면 Flink Cluster에 Jar 파일이 제출되고 정상이라면 Job이 실행됩니다.</p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-submit-new-job.png\" alt=\"IDEA Submit New Job\" title=\"IDEA Submit New Job\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-run-jar.png\" alt=\"IDEA Run Jar\" title=\"IDEA Run Jar\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-run-jar-2.png\" alt=\"IDEA Run Jar\" title=\"IDEA Run Jar\" class=\"center-image\" /></p>\n\n<h3 id=\"2-3-local-cluster-모니터링\">2-3. Local Cluster 모니터링</h3>\n\n<p>Console에서 Open in Browser 버튼을 클릭하면 현재 모니터링으로 연결된 Cluster의 상태를 확인할 수 있는 대시보드가 열립니다. 이 대시보드에서는 현재 실행중인 Job을 포함하여 Flink Cluster의 Task Manager, Job Manager 그리고 Clsuter logs 등을 확인할 수 있습니다.</p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-cluster-web.png\" alt=\"IDEA Cluster Web\" title=\"IDEA Cluster Web\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/09/18/idea-flink-cluster-dashboard.png\" alt=\"IDEA Cluster Dashboard\" title=\"IDEA Cluster Dashboard\" class=\"center-image\" /></p>\n\n<hr />\n\n<h1 id=\"hello-world\">Hello, World!</h1>\n\n<p>이제 Flink 애플리케이션 실행 환경이 구축되었으니 모든 프로그래밍의 시작인 Hello, World를 만들어보겠습니다. 프로그래밍 언어의 첫 시작은 콘솔에 <code class=\"language-plaintext highlighter-rouge\">Hello, World!</code> 문자열을 출력하는 것인데, 데이터 프로세싱에서는 단어 개수를 세는 Word Count를 입문용 예제로 다루고 있습니다. 여기서는 Flink를 활용해 문자열에 포함된 특정 단어들의 개수를 출력하는 Word Count Job을 만들어보겠습니다. 전체 코드는 <a href=\"https://github.com/sungjk/flink-hello-world\">Github - flink-hello-world</a>에서 확인할 수 있어요.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.api.common.functions.FlatMapFunction</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.api.common.typeinfo.TypeHint</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.api.common.typeinfo.TypeInformation</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.api.java.tuple.Tuple2</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.streaming.api.environment.StreamExecutionEnvironment</span>\n<span class=\"k\">import</span> <span class=\"nn\">org.apache.flink.util.Collector</span>\n\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">WordCounterJob</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 데이터 소스로 사용할 문자열</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">words</span> <span class=\"p\">=</span> <span class=\"s\">\"\"\"\n            The quick brown fox jumps over the lazy dog.\n            The quick blue fox jumps over the lazy dog.\n            The quick brown cat jumps over the lazy dog.\n            The quick blue cat jumps over the lazy dog.\n        \"\"\"</span><span class=\"p\">.</span><span class=\"nf\">trimIndent</span><span class=\"p\">()</span>\n\n    <span class=\"k\">fun</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nc\">Array</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 스트리밍 실행 환경 생성</span>\n        <span class=\"kd\">val</span> <span class=\"py\">env</span> <span class=\"p\">=</span> <span class=\"nc\">StreamExecutionEnvironment</span><span class=\"p\">.</span><span class=\"nf\">getExecutionEnvironment</span><span class=\"p\">()</span>\n        <span class=\"c1\">// 문자열 데이터 소스 생성</span>\n        <span class=\"kd\">val</span> <span class=\"py\">source</span> <span class=\"p\">=</span> <span class=\"n\">env</span><span class=\"p\">.</span><span class=\"nf\">fromData</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">).</span><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"s\">\"in-memory-source\"</span><span class=\"p\">)</span>\n        <span class=\"kd\">val</span> <span class=\"py\">counts</span> <span class=\"p\">=</span> <span class=\"n\">source</span>\n            <span class=\"p\">.</span><span class=\"nf\">flatMap</span><span class=\"p\">(</span><span class=\"kd\">object</span> <span class=\"err\">: </span><span class=\"nc\">FlatMapFunction</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Tuple2</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Int</span><span class=\"p\">&gt;&gt;</span> <span class=\"p\">{</span>\n                <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">flatMap</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"k\">out</span><span class=\"p\">:</span> <span class=\"nc\">Collector</span><span class=\"p\">&lt;</span><span class=\"nc\">Tuple2</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Int</span><span class=\"p\">&gt;&gt;)</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// 입력 문자열을 소문자로 변환하고, 정규식을 사용하여 단어로 분리</span>\n                    <span class=\"kd\">val</span> <span class=\"py\">tokens</span> <span class=\"p\">=</span> <span class=\"n\">value</span><span class=\"p\">.</span><span class=\"nf\">lowercase</span><span class=\"p\">().</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s\">\"\\\\W+\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">())</span>\n                    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">token</span> <span class=\"k\">in</span> <span class=\"n\">tokens</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"nf\">isNotEmpty</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n                            <span class=\"c1\">// 각 단어와 그 단어의 개수를 나타내는 튜플(Tuple2&lt;String, Int&gt;)로 수집</span>\n                            <span class=\"k\">out</span><span class=\"p\">.</span><span class=\"nf\">collect</span><span class=\"p\">(</span><span class=\"nc\">Tuple2</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">})</span>\n            <span class=\"c1\">// 반환 타입 정보 지정(Generic 타입의 한계를 해결하기 위해 TypeInformation을 사용)</span>\n            <span class=\"p\">.</span><span class=\"nf\">returns</span><span class=\"p\">(</span><span class=\"nc\">TypeInformation</span><span class=\"p\">.</span><span class=\"nf\">of</span><span class=\"p\">(</span><span class=\"kd\">object</span> <span class=\"err\">: </span><span class=\"nc\">TypeHint</span><span class=\"p\">&lt;</span><span class=\"nc\">Tuple2</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"nc\">Int</span><span class=\"p\">&gt;&gt;()</span> <span class=\"p\">{}))</span>\n            <span class=\"p\">.</span><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"s\">\"tokenizer\"</span><span class=\"p\">)</span>\n            <span class=\"c1\">// 단어별로 그룹핑</span>\n            <span class=\"p\">.</span><span class=\"nf\">keyBy</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">f0</span> <span class=\"p\">}</span>\n            <span class=\"c1\">// 각 그룹별로 두번째 필드인 단어의 개수를 합산</span>\n            <span class=\"p\">.</span><span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"p\">.</span><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"s\">\"counter\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 최종 결과를 표준 출력에 출력하는 싱크 연산 추가</span>\n        <span class=\"n\">counts</span><span class=\"p\">.</span><span class=\"nf\">print</span><span class=\"p\">().</span><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"s\">\"print-sink\"</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 스트리밍 작업 실행</span>\n        <span class=\"n\">env</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"s\">\"JeremyWordCount\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>아마 95% 이상의 Flink 애플리케이션은 Java 언어로 작성되어 있을거라 생각합니다(샘플 예제를 몇가지 찾아봤지만 코틀린 코드는 발견하지 못했어요). 저는 자바 언어를 썩 즐겨 쓰지는 않아서 Flink 애플리케이션도 Kotlin으로 작성하고 있습니다. 그러다보니 아주 간혹 타입 때문에 귀찮을 때가 있는데 크게 불편할 정도는 아닙니다.</p>\n\n<hr />\n\n<h1 id=\"troubleshootings\">Troubleshootings</h1>\n\n<p>실행 환경 구축부터 스스로 Word Count 앱을 작성하기까지 몇가지 우여곡절이 있었습니다. 코드는 정말 몇 줄 안되는데 빌드 과정, Jar 파일 생성 문제, Java의 Type Erase 현상 등 여러 문제들을 겪고 해결하는 과정을 거쳤습니다.</p>\n\n<h3 id=\"jar-내에-main-class-찾을-수-없음\">Jar 내에 Main class 찾을 수 없음</h3>\n\n<p>에러 로그:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Neither</span> <span class=\"n\">a</span> <span class=\"err\">'</span><span class=\"nc\">Main</span><span class=\"o\">-</span><span class=\"nc\">Class</span><span class=\"err\">'</span><span class=\"o\">,</span> <span class=\"n\">nor</span> <span class=\"n\">a</span> <span class=\"err\">'</span><span class=\"n\">program</span><span class=\"o\">-</span><span class=\"kd\">class</span><span class=\"err\">'</span> <span class=\"nc\">entry</span> <span class=\"n\">was</span> <span class=\"n\">found</span> <span class=\"n\">in</span> <span class=\"n\">the</span> <span class=\"n\">jar</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n</code></pre></div></div>\n\n<p>(해결 방법) Jar file에 Main class name 명시:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// application(main)</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"p\">{</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nc\">Array</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n        <span class=\"o\">..</span><span class=\"p\">.</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// entry point is not a method inside the class</span>\n    <span class=\"c1\">// use @JvmStatic annotation inside the companion object</span>\n    <span class=\"k\">companion</span> <span class=\"k\">object</span> <span class=\"p\">:</span> <span class=\"nc\">Logger</span> <span class=\"p\">{</span>\n        <span class=\"nd\">@JvmStatic</span>\n        <span class=\"k\">fun</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nc\">Array</span><span class=\"p\">&lt;</span><span class=\"nc\">String</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">main</span> <span class=\"p\">=</span> <span class=\"nc\">Main</span><span class=\"p\">()</span>\n            <span class=\"n\">main</span><span class=\"p\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// build.gradle.kts</span>\n<span class=\"n\">tasks</span><span class=\"p\">.</span><span class=\"nf\">jar</span> <span class=\"p\">{</span>\n    <span class=\"n\">archiveFileName</span><span class=\"p\">.</span><span class=\"k\">set</span><span class=\"p\">(</span><span class=\"s\">\"hello-world.jar\"</span><span class=\"p\">)</span>\n    <span class=\"nf\">manifest</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// add main class name</span>\n        <span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"s\">\"Main-Class\"</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"s\">\"io.sungjk.flink.Main\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"jar-내에-flink-job-찾을-수-없음\">Jar 내에 Flink Job 찾을 수 없음</h3>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">Could</span> <span class=\"n\">not</span> <span class=\"n\">get</span> <span class=\"n\">job</span> <span class=\"n\">jar</span> <span class=\"n\">and</span> <span class=\"n\">dependencies</span> <span class=\"n\">from</span> <span class=\"no\">JAR</span> <span class=\"nl\">file:</span> <span class=\"no\">JAR</span> <span class=\"n\">file</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"nl\">exist:</span> <span class=\"o\">...</span>\n</code></pre></div></div>\n\n<p>(해결 방법) Main Class 내에 테스트할 Job 추가:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">WordCounterJob</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">fun</span> <span class=\"nf\">execute</span><span class=\"o\">(</span><span class=\"nl\">args:</span> <span class=\"nc\">Array</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;)</span> <span class=\"o\">{</span>\n        <span class=\"n\">val</span> <span class=\"n\">env</span> <span class=\"o\">=</span> <span class=\"nc\">StreamExecutionEnvironment</span><span class=\"o\">.</span><span class=\"na\">getExecutionEnvironment</span><span class=\"o\">()</span>\n        <span class=\"o\">...</span>\n        <span class=\"n\">env</span><span class=\"o\">.</span><span class=\"na\">execute</span><span class=\"o\">(</span><span class=\"s\">\"JeremyWordCount\"</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"gradle-모듈-의존성-찾지-못함\">gradle 모듈 의존성 찾지 못함</h3>\n\n<p>에러 로그:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">client</span><span class=\"o\">.</span><span class=\"na\">program</span><span class=\"o\">.</span><span class=\"na\">ProgramInvocationException</span><span class=\"o\">:</span> <span class=\"nc\">An</span> <span class=\"n\">error</span> <span class=\"n\">occurred</span> <span class=\"k\">while</span> <span class=\"n\">invoking</span> <span class=\"n\">the</span> <span class=\"n\">program</span><span class=\"err\">'</span><span class=\"n\">s</span> <span class=\"n\">main</span> <span class=\"nl\">method:</span> <span class=\"n\">io</span><span class=\"o\">/</span><span class=\"n\">sungjk</span><span class=\"o\">/</span><span class=\"n\">flink</span><span class=\"o\">/</span><span class=\"n\">common</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">/</span><span class=\"nc\">Logger</span>\n\t<span class=\"n\">at</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">client</span><span class=\"o\">.</span><span class=\"na\">program</span><span class=\"o\">.</span><span class=\"na\">PackagedProgram</span><span class=\"o\">.</span><span class=\"na\">callMainMethod</span><span class=\"o\">(</span><span class=\"nc\">PackagedProgram</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">378</span><span class=\"o\">)</span>\n\t<span class=\"n\">at</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">client</span><span class=\"o\">.</span><span class=\"na\">program</span><span class=\"o\">.</span><span class=\"na\">PackagedProgram</span><span class=\"o\">.</span><span class=\"na\">invokeInteractiveModeForExecution</span><span class=\"o\">(</span><span class=\"nc\">PackagedProgram</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">223</span><span class=\"o\">)</span>\n\t<span class=\"n\">at</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">client</span><span class=\"o\">.</span><span class=\"na\">ClientUtils</span><span class=\"o\">.</span><span class=\"na\">executeProgram</span><span class=\"o\">(</span><span class=\"nc\">ClientUtils</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">113</span><span class=\"o\">)</span>\n\t<span class=\"n\">at</span> <span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">client</span><span class=\"o\">.</span><span class=\"na\">cli</span><span class=\"o\">.</span><span class=\"na\">CliFrontend</span><span class=\"o\">.</span><span class=\"na\">executeProgram</span><span class=\"o\">(</span><span class=\"nc\">CliFrontend</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">1026</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>(해결 방법) Shadow Plugin 사용해서 모든 의존성을 단일 JAR 파일로 패키징한 후 shadowJar task 실행:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">id</span><span class=\"o\">(</span><span class=\"s\">\"com.github.johnrengelman.shadow\"</span><span class=\"o\">)</span> <span class=\"n\">version</span> <span class=\"s\">\"7.1.2\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">shadowJar</span> <span class=\"o\">{</span>\n    <span class=\"n\">archiveFileName</span><span class=\"o\">.</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"s\">\"hello-world.jar\"</span><span class=\"o\">)</span>\n    <span class=\"n\">manifest</span> <span class=\"o\">{</span>\n        <span class=\"n\">attributes</span><span class=\"o\">[</span><span class=\"s\">\"Main-Class\"</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"s\">\"io.sungjk.flink.Main\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"o\">...</span>\n</code></pre></div></div>\n\n<h3 id=\"flink-cluster에서-타입-추론-불가type-erasure\">Flink Cluster에서 타입 추론 불가(Type Erasure)</h3>\n\n<p>에러 로그:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">The</span> <span class=\"k\">return</span> <span class=\"n\">type</span> <span class=\"n\">of</span> <span class=\"n\">function</span> <span class=\"err\">'</span><span class=\"n\">execute</span><span class=\"o\">(</span><span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"na\">kt</span><span class=\"o\">)</span><span class=\"err\">'</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">be</span> <span class=\"n\">determined</span> <span class=\"n\">automatically</span><span class=\"o\">,</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">type</span> <span class=\"n\">erasure</span><span class=\"o\">.</span> <span class=\"nc\">You</span> <span class=\"n\">can</span> <span class=\"n\">give</span> <span class=\"n\">type</span> <span class=\"n\">information</span> <span class=\"n\">hints</span> <span class=\"n\">by</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"nf\">returns</span><span class=\"o\">(...)</span> <span class=\"n\">method</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">result</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">transformation</span> <span class=\"n\">call</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"n\">by</span> <span class=\"n\">letting</span> <span class=\"n\">your</span> <span class=\"n\">function</span> <span class=\"n\">implement</span> <span class=\"n\">the</span> <span class=\"err\">'</span><span class=\"nc\">ResultTypeQueryable</span><span class=\"err\">'</span> <span class=\"kd\">interface</span><span class=\"err\">.</span>\n\t<span class=\"nc\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">api</span><span class=\"o\">.</span><span class=\"na\">dag</span><span class=\"o\">.</span><span class=\"na\">Transformation</span><span class=\"o\">.</span><span class=\"na\">getOutputType</span><span class=\"o\">(</span><span class=\"nc\">Transformation</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">557</span><span class=\"o\">)</span>\n\t<span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">streaming</span><span class=\"o\">.</span><span class=\"na\">api</span><span class=\"o\">.</span><span class=\"na\">datastream</span><span class=\"o\">.</span><span class=\"na\">DataStream</span><span class=\"o\">.</span><span class=\"na\">getType</span><span class=\"o\">(</span><span class=\"nc\">DataStream</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">193</span><span class=\"o\">)</span>\n\t<span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">streaming</span><span class=\"o\">.</span><span class=\"na\">api</span><span class=\"o\">.</span><span class=\"na\">datastream</span><span class=\"o\">.</span><span class=\"na\">KeyedStream</span><span class=\"o\">.&lt;</span><span class=\"n\">init</span><span class=\"o\">&gt;(</span><span class=\"nc\">KeyedStream</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">118</span><span class=\"o\">)</span>\n\t<span class=\"n\">org</span><span class=\"o\">.</span><span class=\"na\">apache</span><span class=\"o\">.</span><span class=\"na\">flink</span><span class=\"o\">.</span><span class=\"na\">streaming</span><span class=\"o\">.</span><span class=\"na\">api</span><span class=\"o\">.</span><span class=\"na\">datastream</span><span class=\"o\">.</span><span class=\"na\">DataStream</span><span class=\"o\">.</span><span class=\"na\">keyBy</span><span class=\"o\">(</span><span class=\"nc\">DataStream</span><span class=\"o\">.</span><span class=\"na\">java</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">)</span>\n\t<span class=\"o\">...</span>\n</code></pre></div></div>\n\n<p>(해결 방법) Flink의 TypeInformation 클래스를 사용하여 반환 타입 명시:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">...</span>\n<span class=\"n\">val</span> <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">source</span>\n    <span class=\"o\">.</span><span class=\"na\">flatMap</span><span class=\"o\">(</span><span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"nc\">FlatMapFunction</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Tuple2</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Int</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span>\n    <span class=\"o\">})</span>\n    <span class=\"c1\">// Flink의 TypeInformation 클래스를 사용하여 반환 타입 명시</span>\n    <span class=\"o\">.</span><span class=\"na\">returns</span><span class=\"o\">(</span><span class=\"nc\">TypeInformation</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">object</span> <span class=\"o\">:</span> <span class=\"nc\">TypeHint</span><span class=\"o\">&lt;</span><span class=\"nc\">Tuple2</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">,</span> <span class=\"nc\">Int</span><span class=\"o\">&gt;&gt;()</span> <span class=\"o\">{}))</span>\n    <span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">(</span><span class=\"s\">\"tokenizer\"</span><span class=\"o\">)</span>\n<span class=\"o\">...</span>\n</code></pre></div></div>\n\n<hr />\n\n<h1 id=\"마치며\">마치며</h1>\n\n<p>쏟아지는 데이터를 실시간으로 활용할 수 있는 환경이 갖추어지니 할 수 있는게 정말 많아졌습니다. 단순히 Apache Flink라는 새로운 도구에 익숙해진 건 단편적인 예시일 뿐, 데이터에 대해 눈이 떠졌다랄까요. 데이터 엔지니어 동료와 처음 티타임을 할 때 데이터에 무지한 저의 모습을 스스로 제 3자의 시각에서 바라보고 있는 느낌이 들었고, 머릿속에서는 새로운 터널에 들어서는 것만 같았습니다. 짧게는 3개월, 길게는 1년 뒤에 달라져 있을 제 모습이 상상되기도 했어요. 멋진 동료 덕분에 성장하고 있다는걸 느낄 수 있었고 도움이 필요하면 저도 많이 도와주고 싶다는 생각이 들었습니다.</p>\n\n<p>이제 백엔드 엔지니어로서 다룰 수 있는 연장이 하나 더 늘어났습니다. 경계해야 할 건 모든게 다 못으로 보이지 않게 만드는 것. 실시간으로 데이터를 처리할 수 있는 능력이 생겼으니 모든 곳에 다 스트림 앱을 갖다 붙이고 싶을 수 있습니다. 그래서 이 도구로 해결하기에 적당한 문제가 무엇인지 알고 있는게 중요한데요. 처리할 데이터 소스와 싱크를 지원하는지 알아보고, 실시간성(Real-time) 그리고 Window 기반으로 이벤트를 처리해야 할 문제에 Flink를 추천하고 싶습니다. 실시간으로 발생하는 거래 데이터가 정상인지, 이상거래는 아닌지 <a href=\"https://flink.apache.org/what-is-flink/flink-applications/#state\">State</a>와 <a href=\"https://flink.apache.org/what-is-flink/flink-applications/#time\">Time</a>을 활용해서 판단할 수 있습니다.</p>\n\n<p>마지막으로, 한국에도 Flink를 사용하는 회사들이 점점 많아지고 있는것 같은데, 기술 교류와 레퍼런스가 많아졌으면 좋겠다는 생각이 들었습니다. 생태계는 계속해서 발전하고 있다는 느낌이 드는데, 대부분 비슷하겠지만 구체적으로 어떤 니즈를 가지고 이 기술을 도입해서 사용하고 있는지가 궁금했습니다. 자주, 더 많은 기술 공유가 있기를!</p>\n\n<hr />\n\n<h1 id=\"references\">References</h1>\n<ul>\n  <li><a href=\"https://flink.apache.org/\">Apache Flink</a></li>\n  <li><a href=\"https://www.confluent.io/learn/apache-flink/\">What is Apache Flink?</a></li>\n</ul>",
        "guid": "https://sungjk.github.io/2024/09/18/apache-flink.html",
        "isoDate": "2024-09-18T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "OpenAI의 최신 o1 모델, 추론이 가능한 AI의 등장",
        "link": "http://muzbox.tistory.com/483470",
        "pubDate": "Sun, 15 Sep 2024 09:14:07 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483470#entry483470comment",
        "content": "<p data-ke-size=\"size16\">OpenAI의 새로운 o1 모델이 도입되었습니다. 이 모델은 문제 해결을 위한 '사고 과정'을 보여주며, 기존 모델과 다른 방식으로 문제를 접근합니다. 새로운 모델의 특징과 성능, 사용 방법에 대해 알아보세요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1000\" data-origin-height=\"720\"><span data-url=\"https://blog.kakaocdn.net/dn/niv73/btsJEoCeayL/D6RKFRgSwz1rJ2ER7oTK91/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/niv73/btsJEoCeayL/D6RKFRgSwz1rJ2ER7oTK91/img.png\"><img src=\"https://blog.kakaocdn.net/dn/niv73/btsJEoCeayL/D6RKFRgSwz1rJ2ER7oTK91/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fniv73%2FbtsJEoCeayL%2FD6RKFRgSwz1rJ2ER7oTK91%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1000\" data-origin-height=\"720\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">인공지능 기술은 매일 발전하고 있으며, 이제는 그 '사고 과정'까지도 공개하고 있습니다. OpenAI는 최근 'o1'이라는 새로운 모델을 발표했는데, 이는 단순히 답을 제공하는 것에서 더 나아가 답을 도출하는 사고 과정까지도 사용자에게 보여줍니다. 이러한 기능은 AI의 투명성과 신뢰성을 높이는 동시에, 사용자가 AI의 논리를 이해하고 신뢰할 수 있는 기회를 제공합니다. 이번 글에서는 OpenAI의 최신 모델 o1의 특징과 장점, 그리고 실제 사용 사례를 살펴보겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>1. 새로운 AI 모델 'o1'의 등장</b></span></h2>\n<p data-ke-size=\"size16\">OpenAI는 기존의 GPT 시리즈와 차별화된 새로운 AI 모델인 'o1'을 공개했습니다. o1은 기존의 GPT-4와 달리 문제를 해결하는 데 있어 더 많은 시간을 투자하여 '생각하는' 방식으로 설계되었습니다. 이 모델은 사용자가 제시한 질문에 대한 답변을 생성하기 전에, 각기 다른 전략을 시도하고 자신의 실수를 검토하는 등의 과정을 거칩니다. 이러한 접근 방식은 AI가 단순히 패턴을 인식하는 데 그치지 않고, 실제로 인간처럼 문제를 해결하려고 노력하는 모습을 보여줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>2. 학습 방법의 차이점: 강화 학습의 도입</b></span></h2>\n<p data-ke-size=\"size16\">OpenAI의 연구 책임자인 Jerry Tworek에 따르면, o1 모델은 강화 학습을 통해 훈련되었습니다. 이는 기존의 모델들이 주어진 데이터셋에서 패턴을 찾는 것과 달리, o1이 '보상과 패널티'를 통해 학습한다는 것을 의미합니다. 이를 통해 o1 모델은 이전 모델들보다 훨씬 더 높은 정확도로 문제를 해결할 수 있게 되었습니다. 예를 들어, o1은 국제 수학 올림피아드 문제의 83%를 해결한 반면, GPT-4는 단 13%만을 해결했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>3. 사용자와의 상호작용: 사고 과정을 시각적으로 제공</b></span></h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"960\" data-origin-height=\"400\"><span data-url=\"https://blog.kakaocdn.net/dn/bCmOqw/btsJDqVspxe/uJdVSVoaM8x3vTQXAlzEy1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bCmOqw/btsJDqVspxe/uJdVSVoaM8x3vTQXAlzEy1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bCmOqw/btsJDqVspxe/uJdVSVoaM8x3vTQXAlzEy1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCmOqw%2FbtsJDqVspxe%2FuJdVSVoaM8x3vTQXAlzEy1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"960\" data-origin-height=\"400\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">o1 모델의 가장 큰 특징 중 하나는 사용자에게 '사고 과정'을 시각적으로 제공한다는 점입니다. 사용자가 질문을 던지면, AI는 답을 생성하기 전에 '생각 중...'이라는 메시지를 표시합니다. 답이 생성된 후에는 '4초간 생각함'이라는 드롭다운 메뉴가 나타나며, 이를 클릭하면 AI가 답을 생성하는 데 어떤 과정을 거쳤는지를 확인할 수 있습니다. 예를 들어, \"핫도그는 샌드위치인가?\"라는 질문에 대해 AI는 '질문 분석', '정의 검토' 등의 단계를 거쳐 답을 도출했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>4. 실제 적용 사례: 음식 분류 논쟁</b></span></h2>\n<p data-ke-size=\"size16\">새로운 o1 모델을 통해 실생활의 논쟁적인 질문에도 AI의 사고 과정을 적용할 수 있습니다. '타코는 샌드위치인가?'라는 질문에서 AI는 5초 동안 고민한 후, 정의, 문화적 관점, 법적 해석 등을 고려하여 타코는 샌드위치가 아니라는 결론을 내렸습니다. 또한 '타코는 핫도그인가?'라는 질문에 대해서도, AI는 타코와 핫도그가 서로 다른 요리 카테고리에 속한다는 논리적 이유를 제시했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>5. 성능과 한계</b></span></h2>\n<p data-ke-size=\"size16\">o1 모델은 이전 모델에 비해 더 정확하고 창의적인 답변을 제공할 수 있지만, 응답 시간이 길어질 수 있다는 단점이 있습니다. 또한, 아직도 '환각' 문제, 즉 사실과 다른 정보를 생성하는 현상이 완전히 해결된 것은 아니며, 오히려 AI가 더 인간적인 표현을 사용하면서 사용자가 이를 실제 사람의 생각으로 오해할 가능성이 높아졌습니다. 그러나 이러한 문제를 개선하기 위해 OpenAI는 지속적으로 연구를 진행하고 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>6. OpenAI o1 모델 사용 방법</b></span></h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1412\" data-origin-height=\"874\"><span data-url=\"https://blog.kakaocdn.net/dn/bjWmR6/btsJEHuTixs/2aoihgN7whuafcU0EfEgwK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bjWmR6/btsJEHuTixs/2aoihgN7whuafcU0EfEgwK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bjWmR6/btsJEHuTixs/2aoihgN7whuafcU0EfEgwK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbjWmR6%2FbtsJEHuTixs%2F2aoihgN7whuafcU0EfEgwK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1412\" data-origin-height=\"874\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">새로운 o1 모델은 현재 일부 사용자에게만 제공되고 있습니다. ChatGPT Plus 또는 ChatGPT Team 구독자는 이미 사용할 수 있으며, 다음 주에는 ChatGPT Enterprise와 ChatGPT Ed 사용자도 사용이 가능해질 예정입니다. 무료 사용자에게는 o1-mini 모델이 추후 제공될 예정입니다. 모델을 사용하려면 대화 시작 시 모델 선택 드롭다운 메뉴에서 o1-preview 또는 o1-mini를 선택하면 됩니다. 현재 o1-preview는 주당 30개의 메시지, o1-mini는 50개의 메시지로 사용이 제한됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #006dd7;\"><b>결론</b></span></h2>\n<p data-ke-size=\"size16\">OpenAI의 새로운 o1 모델은 AI 기술의 새로운 장을 열었습니다. 단순히 답을 제공하는 것이 아니라, 그 답을 도출하는 사고 과정을 시각적으로 제공함으로써 AI의 투명성과 신뢰성을 높였습니다. 비록 여전히 개선할 점이 많지만, AI가 점점 더 인간적인 사고 방식으로 진화하는 과정을 보는 것은 흥미로운 일입니다. 앞으로의 발전이 기대되는 o1 모델을 통해 AI와의 소통이 한층 더 깊어질 것입니다.</p>",
        "contentSnippet": "OpenAI의 새로운 o1 모델이 도입되었습니다. 이 모델은 문제 해결을 위한 '사고 과정'을 보여주며, 기존 모델과 다른 방식으로 문제를 접근합니다. 새로운 모델의 특징과 성능, 사용 방법에 대해 알아보세요.\n\n\n \n인공지능 기술은 매일 발전하고 있으며, 이제는 그 '사고 과정'까지도 공개하고 있습니다. OpenAI는 최근 'o1'이라는 새로운 모델을 발표했는데, 이는 단순히 답을 제공하는 것에서 더 나아가 답을 도출하는 사고 과정까지도 사용자에게 보여줍니다. 이러한 기능은 AI의 투명성과 신뢰성을 높이는 동시에, 사용자가 AI의 논리를 이해하고 신뢰할 수 있는 기회를 제공합니다. 이번 글에서는 OpenAI의 최신 모델 o1의 특징과 장점, 그리고 실제 사용 사례를 살펴보겠습니다.\n \n \n1. 새로운 AI 모델 'o1'의 등장\nOpenAI는 기존의 GPT 시리즈와 차별화된 새로운 AI 모델인 'o1'을 공개했습니다. o1은 기존의 GPT-4와 달리 문제를 해결하는 데 있어 더 많은 시간을 투자하여 '생각하는' 방식으로 설계되었습니다. 이 모델은 사용자가 제시한 질문에 대한 답변을 생성하기 전에, 각기 다른 전략을 시도하고 자신의 실수를 검토하는 등의 과정을 거칩니다. 이러한 접근 방식은 AI가 단순히 패턴을 인식하는 데 그치지 않고, 실제로 인간처럼 문제를 해결하려고 노력하는 모습을 보여줍니다.\n \n \n2. 학습 방법의 차이점: 강화 학습의 도입\nOpenAI의 연구 책임자인 Jerry Tworek에 따르면, o1 모델은 강화 학습을 통해 훈련되었습니다. 이는 기존의 모델들이 주어진 데이터셋에서 패턴을 찾는 것과 달리, o1이 '보상과 패널티'를 통해 학습한다는 것을 의미합니다. 이를 통해 o1 모델은 이전 모델들보다 훨씬 더 높은 정확도로 문제를 해결할 수 있게 되었습니다. 예를 들어, o1은 국제 수학 올림피아드 문제의 83%를 해결한 반면, GPT-4는 단 13%만을 해결했습니다.\n \n \n3. 사용자와의 상호작용: 사고 과정을 시각적으로 제공\n\n\no1 모델의 가장 큰 특징 중 하나는 사용자에게 '사고 과정'을 시각적으로 제공한다는 점입니다. 사용자가 질문을 던지면, AI는 답을 생성하기 전에 '생각 중...'이라는 메시지를 표시합니다. 답이 생성된 후에는 '4초간 생각함'이라는 드롭다운 메뉴가 나타나며, 이를 클릭하면 AI가 답을 생성하는 데 어떤 과정을 거쳤는지를 확인할 수 있습니다. 예를 들어, \"핫도그는 샌드위치인가?\"라는 질문에 대해 AI는 '질문 분석', '정의 검토' 등의 단계를 거쳐 답을 도출했습니다.\n \n \n4. 실제 적용 사례: 음식 분류 논쟁\n새로운 o1 모델을 통해 실생활의 논쟁적인 질문에도 AI의 사고 과정을 적용할 수 있습니다. '타코는 샌드위치인가?'라는 질문에서 AI는 5초 동안 고민한 후, 정의, 문화적 관점, 법적 해석 등을 고려하여 타코는 샌드위치가 아니라는 결론을 내렸습니다. 또한 '타코는 핫도그인가?'라는 질문에 대해서도, AI는 타코와 핫도그가 서로 다른 요리 카테고리에 속한다는 논리적 이유를 제시했습니다.\n \n \n5. 성능과 한계\no1 모델은 이전 모델에 비해 더 정확하고 창의적인 답변을 제공할 수 있지만, 응답 시간이 길어질 수 있다는 단점이 있습니다. 또한, 아직도 '환각' 문제, 즉 사실과 다른 정보를 생성하는 현상이 완전히 해결된 것은 아니며, 오히려 AI가 더 인간적인 표현을 사용하면서 사용자가 이를 실제 사람의 생각으로 오해할 가능성이 높아졌습니다. 그러나 이러한 문제를 개선하기 위해 OpenAI는 지속적으로 연구를 진행하고 있습니다.\n \n \n6. OpenAI o1 모델 사용 방법\n\n\n새로운 o1 모델은 현재 일부 사용자에게만 제공되고 있습니다. ChatGPT Plus 또는 ChatGPT Team 구독자는 이미 사용할 수 있으며, 다음 주에는 ChatGPT Enterprise와 ChatGPT Ed 사용자도 사용이 가능해질 예정입니다. 무료 사용자에게는 o1-mini 모델이 추후 제공될 예정입니다. 모델을 사용하려면 대화 시작 시 모델 선택 드롭다운 메뉴에서 o1-preview 또는 o1-mini를 선택하면 됩니다. 현재 o1-preview는 주당 30개의 메시지, o1-mini는 50개의 메시지로 사용이 제한됩니다.\n \n \n결론\nOpenAI의 새로운 o1 모델은 AI 기술의 새로운 장을 열었습니다. 단순히 답을 제공하는 것이 아니라, 그 답을 도출하는 사고 과정을 시각적으로 제공함으로써 AI의 투명성과 신뢰성을 높였습니다. 비록 여전히 개선할 점이 많지만, AI가 점점 더 인간적인 사고 방식으로 진화하는 과정을 보는 것은 흥미로운 일입니다. 앞으로의 발전이 기대되는 o1 모델을 통해 AI와의 소통이 한층 더 깊어질 것입니다.",
        "guid": "http://muzbox.tistory.com/483470",
        "categories": [
          "AI, 미래기술/채팅",
          "ai 사용 방법",
          "ai 성능 개선",
          "ai 투명성",
          "ai와 인간 상호작용",
          "ChatGPT",
          "o1 모델",
          "OpenAI",
          "강화 학습",
          "인공지능 사고 과정"
        ],
        "isoDate": "2024-09-15T00:14:07.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "아이폰 16 꼭 필요할까?",
        "link": "http://muzbox.tistory.com/483469",
        "pubDate": "Fri, 13 Sep 2024 11:24:19 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483469#entry483469comment",
        "content": "<p data-ke-size=\"size16\">애플이 발표한 최신 아이폰 16, 하지만 많은 사람들이 기존의 아이폰을 교체할 이유를 찾지 못하고 있습니다. 성능, 배터리 수명, 새로운 기능이 부족한 점 등, 아이폰 16 업그레이드가 필요한지 고민하는 모든 이유를 다루어봅니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"611\" data-origin-height=\"650\"><span data-url=\"https://blog.kakaocdn.net/dn/PfZ4S/btsJCnQq4gP/hySpoWXx4jvxifb3yQuNtK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/PfZ4S/btsJCnQq4gP/hySpoWXx4jvxifb3yQuNtK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/PfZ4S/btsJCnQq4gP/hySpoWXx4jvxifb3yQuNtK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FPfZ4S%2FbtsJCnQq4gP%2FhySpoWXx4jvxifb3yQuNtK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"아이폰 16 꼭 필요할까?\" width=\"500\" height=\"532\" data-origin-width=\"611\" data-origin-height=\"650\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;아이폰 16이 출시되었지만, 많은 사용자들은 새로운 모델로의 업그레이드에 대해 회의적인 반응을 보이고 있습니다. 특히, 이미 성능이 뛰어난 아이폰 13 프로 사용자들은 굳이 수백 달러를 더 써가며 새로운 기기로 전환할 필요성을 느끼지 못하고 있습니다. 이 글에서는 아이폰 16 업그레이드가 왜 많은 사람들에게 매력적이지 않은지, 그리고 기존 모델들이 여전히 충분히 강력한 이유를 알아봅니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>1. 아이폰 13 프로의 뛰어난 성능</b></span></h2>\n<p data-ke-size=\"size16\">아이폰 13 프로는 여전히 최고의 성능을 자랑합니다. 출시된 지 3년이 지났음에도 불구하고, 일상적인 사용에서 성능 저하를 거의 느낄 수 없습니다. 물론 아이폰 16의 새 모델과 비교하면 웹페이지 로딩 속도나 고사양 게임의 처리 성능에서 약간의 차이가 있을 수 있지만, 실제 사용에서는 거의 느끼지 못할 정도입니다. 이는 특히 애플의 강력한 A15 바이오닉 칩과 120Hz 프로모션 디스플레이 덕분입니다. 반면, 아이폰 16의 기본 모델은 여전히 60Hz 주사율을 유지하고 있어 120Hz의 부드러운 화면 전환에 익숙해진 사용자들에게는 큰 매력이 없습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>2. 배터리 성능과 지속성</b></span></h2>\n<p data-ke-size=\"size16\">아이폰 13 프로의 배터리 성능도 눈에 띕니다. 3년 간의 헤비한 사용에도 불구하고 배터리 상태는 89%를 유지하고 있습니다. 이는 최적화된 충전 시스템과 최신 배터리 관리 기술 덕분에 가능한 일입니다. 예를 들어, 아이폰 11의 경우 새로운 배터리를 장착한 지 1년 만에 90%로 떨어진 반면, 아이폰 13 프로는 그 이상의 지속성을 보여주고 있습니다. 또한, 기기 외관도 거의 손상이 없으며, 약간의 기스 외에는 큰 문제가 없습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"892\" data-origin-height=\"708\"><span data-url=\"https://blog.kakaocdn.net/dn/bWgFXa/btsJz5dkyYj/rkpEakL04k8sHPAo7NK7U1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bWgFXa/btsJz5dkyYj/rkpEakL04k8sHPAo7NK7U1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bWgFXa/btsJz5dkyYj/rkpEakL04k8sHPAo7NK7U1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbWgFXa%2FbtsJz5dkyYj%2FrkpEakL04k8sHPAo7NK7U1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"아이폰 13, 15, 16 일반 사양 비교\" data-origin-width=\"892\" data-origin-height=\"708\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>3. 새로운 기능의 부재</b></span></h2>\n<p data-ke-size=\"size16\">아이폰 16의 새로운 기능들은 기존 사용자들에게 크게 매력적이지 않을 수 있습니다. 이번 모델은 애플의 대규모 언어 모델과 생성형 AI 기능을 포함하지만, 이는 맥북과 같은 고성능 장치에서 더 유용하게 사용할 수 있는 기능입니다. 예를 들어, 서리(Siri)의 향상된 인공지능 기능이나 애플 인텔리전스(Apple Intelligence)는 주로 데스크탑 작업에서 더 자주 활용될 가능성이 높습니다. 따라서 아이폰에서의 이러한 기능 부족은 사용자에게 큰 문제로 다가오지 않을 것입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>4. 미래를 위한 업그레이드 대기</b></span></h2>\n<p data-ke-size=\"size16\">&nbsp;아이폰 16을 구매하지 않고 기다리는 것이 더 나은 이유도 있습니다. 예를 들어, 2025년에는 아이폰 17 에어와 같은 새로운 모델이 출시될 예정이며, 항상 켜져 있는 120Hz 디스플레이, 화면 아래에 있는 페이스 ID 센서 등 더욱 혁신적인 기능이 탑재될 가능성이 있습니다. 이러한 이유로, 많은 사용자가 현재의 기기를 계속 사용하면서 다음 모델을 기다리는 것이 더 현명한 선택일 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>5. iOS 업데이트와 지속적인 지원</b></span></h2>\n<p data-ke-size=\"size16\">애플은 자사 기기들에 대해 장기간의 소프트웨어 지원을 제공하고 있습니다. 현재 아이폰 XR조차도 iOS 18을 지원하며, 아이폰 13 프로는 2027년까지 소프트웨어 업데이트를 받을 것으로 예상됩니다. 이러한 장기적인 지원 덕분에, 사용자들은 더 오래 기존 기기를 사용할 수 있으며, 소프트웨어 지원이 끝날 때까지 새로운 기능과 보안 패치를 지속적으로 받을 수 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>결론</b></span></h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"710\" data-origin-height=\"487\"><span data-url=\"https://blog.kakaocdn.net/dn/m75vp/btsJA7AZKED/Lyax6W6k55JYQOiJIujLHK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/m75vp/btsJA7AZKED/Lyax6W6k55JYQOiJIujLHK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/m75vp/btsJA7AZKED/Lyax6W6k55JYQOiJIujLHK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fm75vp%2FbtsJA7AZKED%2FLyax6W6k55JYQOiJIujLHK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"아이폰 16 꼭 필요할까?\" data-origin-width=\"710\" data-origin-height=\"487\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">아이폰 16은 분명 매력적인 기능을 갖추고 있지만, 많은 사용자들에게는 충분한 업그레이드 이유가 되지 않습니다. 성능, 배터리 수명, 새로운 기능의 실용성 등을 고려할 때, 기존 아이폰을 사용하는 것이 여전히 충분히 만족스러운 선택이 될 수 있습니다. 다음 모델에 대한 기대감과 현재 기기의 뛰어난 성능은, 지금 당장 아이폰 16으로 업그레이드하지 않는 것이 더 나은 선택임을 보여줍니다.</p>",
        "contentSnippet": "애플이 발표한 최신 아이폰 16, 하지만 많은 사람들이 기존의 아이폰을 교체할 이유를 찾지 못하고 있습니다. 성능, 배터리 수명, 새로운 기능이 부족한 점 등, 아이폰 16 업그레이드가 필요한지 고민하는 모든 이유를 다루어봅니다.\n\n\n \n 아이폰 16이 출시되었지만, 많은 사용자들은 새로운 모델로의 업그레이드에 대해 회의적인 반응을 보이고 있습니다. 특히, 이미 성능이 뛰어난 아이폰 13 프로 사용자들은 굳이 수백 달러를 더 써가며 새로운 기기로 전환할 필요성을 느끼지 못하고 있습니다. 이 글에서는 아이폰 16 업그레이드가 왜 많은 사람들에게 매력적이지 않은지, 그리고 기존 모델들이 여전히 충분히 강력한 이유를 알아봅니다.\n \n \n1. 아이폰 13 프로의 뛰어난 성능\n아이폰 13 프로는 여전히 최고의 성능을 자랑합니다. 출시된 지 3년이 지났음에도 불구하고, 일상적인 사용에서 성능 저하를 거의 느낄 수 없습니다. 물론 아이폰 16의 새 모델과 비교하면 웹페이지 로딩 속도나 고사양 게임의 처리 성능에서 약간의 차이가 있을 수 있지만, 실제 사용에서는 거의 느끼지 못할 정도입니다. 이는 특히 애플의 강력한 A15 바이오닉 칩과 120Hz 프로모션 디스플레이 덕분입니다. 반면, 아이폰 16의 기본 모델은 여전히 60Hz 주사율을 유지하고 있어 120Hz의 부드러운 화면 전환에 익숙해진 사용자들에게는 큰 매력이 없습니다.\n \n \n2. 배터리 성능과 지속성\n아이폰 13 프로의 배터리 성능도 눈에 띕니다. 3년 간의 헤비한 사용에도 불구하고 배터리 상태는 89%를 유지하고 있습니다. 이는 최적화된 충전 시스템과 최신 배터리 관리 기술 덕분에 가능한 일입니다. 예를 들어, 아이폰 11의 경우 새로운 배터리를 장착한 지 1년 만에 90%로 떨어진 반면, 아이폰 13 프로는 그 이상의 지속성을 보여주고 있습니다. 또한, 기기 외관도 거의 손상이 없으며, 약간의 기스 외에는 큰 문제가 없습니다.\n \n\n\n3. 새로운 기능의 부재\n아이폰 16의 새로운 기능들은 기존 사용자들에게 크게 매력적이지 않을 수 있습니다. 이번 모델은 애플의 대규모 언어 모델과 생성형 AI 기능을 포함하지만, 이는 맥북과 같은 고성능 장치에서 더 유용하게 사용할 수 있는 기능입니다. 예를 들어, 서리(Siri)의 향상된 인공지능 기능이나 애플 인텔리전스(Apple Intelligence)는 주로 데스크탑 작업에서 더 자주 활용될 가능성이 높습니다. 따라서 아이폰에서의 이러한 기능 부족은 사용자에게 큰 문제로 다가오지 않을 것입니다.\n \n \n4. 미래를 위한 업그레이드 대기\n 아이폰 16을 구매하지 않고 기다리는 것이 더 나은 이유도 있습니다. 예를 들어, 2025년에는 아이폰 17 에어와 같은 새로운 모델이 출시될 예정이며, 항상 켜져 있는 120Hz 디스플레이, 화면 아래에 있는 페이스 ID 센서 등 더욱 혁신적인 기능이 탑재될 가능성이 있습니다. 이러한 이유로, 많은 사용자가 현재의 기기를 계속 사용하면서 다음 모델을 기다리는 것이 더 현명한 선택일 수 있습니다.\n \n \n5. iOS 업데이트와 지속적인 지원\n애플은 자사 기기들에 대해 장기간의 소프트웨어 지원을 제공하고 있습니다. 현재 아이폰 XR조차도 iOS 18을 지원하며, 아이폰 13 프로는 2027년까지 소프트웨어 업데이트를 받을 것으로 예상됩니다. 이러한 장기적인 지원 덕분에, 사용자들은 더 오래 기존 기기를 사용할 수 있으며, 소프트웨어 지원이 끝날 때까지 새로운 기능과 보안 패치를 지속적으로 받을 수 있습니다.\n \n \n결론\n\n\n아이폰 16은 분명 매력적인 기능을 갖추고 있지만, 많은 사용자들에게는 충분한 업그레이드 이유가 되지 않습니다. 성능, 배터리 수명, 새로운 기능의 실용성 등을 고려할 때, 기존 아이폰을 사용하는 것이 여전히 충분히 만족스러운 선택이 될 수 있습니다. 다음 모델에 대한 기대감과 현재 기기의 뛰어난 성능은, 지금 당장 아이폰 16으로 업그레이드하지 않는 것이 더 나은 선택임을 보여줍니다.",
        "guid": "http://muzbox.tistory.com/483469",
        "categories": [
          "NEWS/IT 뉴스",
          "120Hz 디스플레이",
          "ios 업데이트",
          "배터리 성능",
          "소프트웨어 지원",
          "아이폰 13 프로",
          "아이폰 16 업그레이드",
          "아이폰 17",
          "애플 인텔리전스"
        ],
        "isoDate": "2024-09-13T02:24:19.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": []
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "「RULIWEB」",
        "title": "[MULTI] 강대강의 유혈 호드슈터, WH40k: 스페이스 마린 2",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2250",
        "pubDate": "Thu, 12 Sep 2024 17:35:10 +0900",
        "author": "「RULIWEB」",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/24/09/12/191e55acc0a4cacdc.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2024-09-12T08:35:10.000Z"
      },
      {
        "creator": "(RULIWEB`Д')/",
        "title": "[MULTI] 건프라란… 자유다! 건담 브레이커 4",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2249",
        "pubDate": "Wed, 11 Sep 2024 19:40:29 +0900",
        "author": "(RULIWEB`Д')/",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i3.ruliweb.com/thumb/24/09/11/191e0a995d14c329e.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2024-09-11T10:40:29.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "khris'log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "C# - Unity 게임 엔진을 위한 오픈 소스 hot-reload 솔루션 HybridCLR",
        "link": "https://jacking75.github.io/NET_20240915/",
        "pubDate": "Sun, 15 Sep 2024 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/15qtVZPJl0fRCMCXggKPv7SGnxuCIoGxAdp9gpFrd4l8/pub?embedded=true\"></iframe>\n\n<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/1ZfHkaZnhImQqClhjXTqH35ljJcgRaer8NeTgUDHr5KM/pub?embedded=true\"></iframe>\n\n<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/1UuqgF6cVoNgxG2e1lympXnFMNJ6lr4Q4sFhhpP0sYoI/pub?embedded=true\"></iframe>\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/NET_20240915/",
        "isoDate": "2024-09-14T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "커피한잔 명예의 전당",
        "link": "https://jeho.page/essay/2024/09/13/hall-of-fame.html",
        "pubDate": "2024-09-12T22:33:00.000Z",
        "author": "김재호",
        "content": "<p>조건문에 <code class=\"language-plaintext highlighter-rouge\">!</code> 하나를 빼먹어서 생긴 버그.<br />\n이 버그를 2년 동안이나 모르고 있다가 얼마 전에 발견했습니다.</p>\n\n<p>제가 만들고 있는 소개팅 서비스인 <a href=\"https://withcoffee.app\">커피한잔</a>에서는 채팅방이 오랫동안 지속될 경우 사용자들에게 알림 메일이 발송됩니다.<br />\n만약 커플이 되었다면 저에게 알려달라는 메일.</p>\n\n<p>이 메일이 버그로 인해 무려 2년 가까이 발송이 되지 않고 있었던 것.</p>\n\n<p>참나, 이걸 모르고 있었다니.<br />\n테스트를 안 짜둔 걸 반성하는 한 편, 서비스 감각이 이렇게 무뎌졌나 싶어서 스스로에게 화가 나기도 했습니다.</p>\n\n<p>코드를 정리하고, 그동안 안 보내진 메일을 발송했더니…<br />\n사용자들에게 답장이 속속 오기 시작합니다.<br />\n무려 15 커플이 이미 결혼했다고. 감사하다고.</p>\n\n<p>메일을 받을 때마다 놀랍고 기뻤습니다.<br />\n이 소중한 메일들을 잘 정리하고 싶다는 생각이 들어서 아예 웹페이지로 만들어버렸습니다.</p>\n\n<p><img src=\"/assets/img/hall_of_fame.png\" alt=\"커피한잔 명예의 전당\" /><br />\n<em>커피한잔 <a href=\"https://withcoffee.app/couples\">명예의 전당</a></em></p>\n\n<p>8년 가까이 서비스하면서 생긴 추억이자 자랑거리가 됐습니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2021/09/07/왜-하필-소개팅-어플을-만들기로-했어요.html\">왜 하필 소개팅 어플을 만들기로 했어요?</a></li>\n</ul>",
        "contentSnippet": "조건문에 ! 하나를 빼먹어서 생긴 버그.\n제가 만들고 있는 소개팅 서비스인 커피한잔에서는 채팅방이 오랫동안 지속될 경우 사용자들에게 알림 메일이 발송됩니다.\n이 메일이 버그로 인해 무려 2년 가까이 발송이 되지 않고 있었던 것.\n참나, 이걸 모르고 있었다니.\n코드를 정리하고, 그동안 안 보내진 메일을 발송했더니…\n메일을 받을 때마다 놀랍고 기뻤습니다.\n\n커피한잔 명예의 전당\n8년 가까이 서비스하면서 생긴 추억이자 자랑거리가 됐습니다.\n\n함께 읽으면 좋은 글:\n왜 하필 소개팅 어플을 만들기로 했어요?",
        "summary": "조건문에 ! 하나를 빼먹어서 생긴 버그. 이 버그를 2년 동안이나 모르고 있다가 얼마 전에 발견했습니다.",
        "id": "https://jeho.page/essay/2024/09/13/hall-of-fame",
        "isoDate": "2024-09-12T22:33:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "flutter aab 앱 서명 하기 / 스토어에 올리기",
        "link": "http://serverdown.tistory.com/814",
        "pubDate": "Tue, 17 Sep 2024 22:29:35 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/814#entry814comment",
        "content": "<p data-ke-size=\"size16\">문서의 설명이 유연하거나 위치에 따라 이상해서 되는 방법으로 다시 정리하겠습니다.</p>\n<p data-ke-size=\"size16\">참고 문서:&nbsp; <a href=\"https://docs.flutter.dev/deployment/android\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://docs.flutter.dev/deployment/android</a></p>\n<figure id=\"og_1726577759256\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"Build and release an Android app\" data-og-description=\"How to prepare for and release an Android app to the Play store.\" data-og-host=\"docs.flutter.dev\" data-og-source-url=\"https://docs.flutter.dev/deployment/android\" data-og-url=\"https://docs.flutter.dev/deployment/android\" data-og-image=\"https://scrap.kakaocdn.net/dn/KtrpL/hyW20hSygE/bQymdAAXACFxzJ18jRARC0/img.png?width=937&amp;height=461&amp;face=0_0_937_461,https://scrap.kakaocdn.net/dn/paVEo/hyW23Tbz5M/orFKvg1yW5kZ7GyrRcFCw1/img.png?width=1902&amp;height=568&amp;face=0_0_1902_568,https://scrap.kakaocdn.net/dn/1YzTw/hyW6Jr0N66/zjkNFzhUtfr6PmFHxdxKk0/img.png?width=1558&amp;height=422&amp;face=0_0_1558_422\"><a href=\"https://docs.flutter.dev/deployment/android\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://docs.flutter.dev/deployment/android\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/KtrpL/hyW20hSygE/bQymdAAXACFxzJ18jRARC0/img.png?width=937&amp;height=461&amp;face=0_0_937_461,https://scrap.kakaocdn.net/dn/paVEo/hyW23Tbz5M/orFKvg1yW5kZ7GyrRcFCw1/img.png?width=1902&amp;height=568&amp;face=0_0_1902_568,https://scrap.kakaocdn.net/dn/1YzTw/hyW6Jr0N66/zjkNFzhUtfr6PmFHxdxKk0/img.png?width=1558&amp;height=422&amp;face=0_0_1558_422');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Build and release an Android app</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">How to prepare for and release an Android app to the Play store.</p>\n<p class=\"og-host\" data-ke-size=\"size16\">docs.flutter.dev</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size26\">문서의 함정</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"854\" data-origin-height=\"334\"><span data-url=\"https://blog.kakaocdn.net/dn/4mZf9/btsJFwNp8ln/61vBUPRz1bAHcb91ct40SK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/4mZf9/btsJFwNp8ln/61vBUPRz1bAHcb91ct40SK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/4mZf9/btsJFwNp8ln/61vBUPRz1bAHcb91ct40SK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F4mZf9%2FbtsJFwNp8ln%2F61vBUPRz1bAHcb91ct40SK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"854\" data-origin-height=\"334\"/></span></figure>\n</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">문서에서 고치라는 부분인데 if 처리를 해놯네요</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">파일이 없으면 빌드가 중단되야하는데 이걸 넘겨버려서 오류를 찾기 더 어렵게 되어있습니다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">정말 쓸모없고 문제 찾기도 어렵게하는 방법이였습니다.</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"background-color: #000000; color: #000000; text-align: start;\" data-ke-size=\"size16\">jks 파일을 만드는 온갖 어려운 방법을 알려주는데 괜히 보면 시간낭비이니 잘 피하시길 ...</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">1. jsk 파일 만들기</h2>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #ffffff;\">keytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias [별명]</span></div>\n</div>\n<p data-ke-size=\"size16\">[별명] 부분은 알아서 고치시고 key.jks 는 생성할 파일명인데 이파일명 기준으로 작성되니 그대로 쓰시길</p>\n<p data-ke-size=\"size16\">암호가 두개 있습니다. 확인을위해 한번더 입력하기 때문에 총 4번을 입력하는데</p>\n<p data-ke-size=\"size16\">다 같은걸 입력해야 관리가 쉽습니다.</p>\n<p data-ke-size=\"size16\">여러 정보를 요구하는데 다 입력안해도 되니 넘어가시고</p>\n<p data-ke-size=\"size16\">[예/아니오] 이부분 나오면 y 를 입력합니다.</p>\n<p data-ke-size=\"size16\">그다음에 두번째 암호를 입력하라는데 바로 엔터치면 위에서 입력한 암호와 동일하게 셋팅됩니다.</p>\n<p data-ke-size=\"size16\">저는 동일하게 했습니다. 절대 중요한게 아니니 복잡하게 하지마세요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">2. <span style=\"text-align: left;\">key.properties</span></h2>\n<p data-ke-size=\"size16\"><span style=\"text-align: left;\"> </span><span style=\"text-align: left;\">만들 필요 없습니다. 넘어갑니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: left;\">jks 의 암호를 노출 시키지 않기위해서 다른파일에서 읽는건데<br /></span><span style=\"text-align: left;\">복잡하고 노출되도 활용할만한 가치가 없습니다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"text-align: left;\">3. build.gradle 수정</span></h2>\n<p data-ke-size=\"size16\"><span style=\"text-align: left;\">build.gradle 은 파일이 두군데 있습니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: left;\">[내 플러터 프로젝트]/android/app/build.gradle 을 수정하세요</span></p>\n<div style=\"background-color: #000000; color: #ffffff;\">\n<div><span style=\"color: #ffffff;\">buildTypes { &lt;-- 이부분을 수정합니다.</span></div>\n<div>&nbsp;</div>\n<div>&nbsp;</div>\n<div>\n<div style=\"background-color: #000000; color: #ffffff;\"><br />\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; signingConfigs {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; release {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; storeFile file(</span><span style=\"color: #ce9178;\">\"../../key.jks\"</span><span style=\"color: #ffffff;\">)</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keyAlias </span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"> \"[별명]\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keyPassword </span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"> \"[암호]\"</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; storePassword </span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"> <span style=\"text-align: start;\">\"[암호]\"</span> </span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; buildTypes {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; release {</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; signingConfig signingConfigs</span><span style=\"color: #d4d4d4;\">.</span><span style=\"color: #ffffff;\">release</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #ffffff;\">&nbsp; &nbsp; }</span></div>\n</div>\n</div>\n<div>&nbsp;</div>\n</div>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">buildTypes<span>&nbsp; 위에 <span style=\"text-align: start;\">signingConfigs<span>&nbsp; 가 오고<br /></span></span></span></span> <span style=\"text-align: start;\">buildTypes</span><span style=\"background-color: #000000; color: #000000; text-align: start;\">&nbsp;<span>&nbsp; 안에는 debug 가 release 로 변경되었습니다.</span></span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"background-color: #000000; color: #000000; text-align: start;\"><span>4. 파일위치 점검</span></span></h2>\n<p data-ke-size=\"size16\"><span style=\"background-color: #000000; color: #000000; text-align: start;\"><span>[내 플러토 프로젝트]<br />&nbsp; ㄴ android<br />&nbsp; &nbsp; &nbsp; &nbsp;ㄴ app<br /></span></span><span style=\"background-color: #000000; color: #000000; text-align: start;\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; build.gradle<br />key.jks</span></span></p>\n<p data-ke-size=\"size16\"><span style=\"background-color: #000000; color: #000000; text-align: start;\"><span>즉 key.jks 파일은 <span style=\"text-align: start;\">[내 플러토 프로젝트] 에 두시면 됩니다.</span></span></span></p>\n<p data-ke-size=\"size16\"><span style=\"background-color: #000000; color: #000000; text-align: start;\"><span><span style=\"text-align: start;\">pubspec.yaml <br />analysis_options.yaml<br />이 파일들이 있는 폴더에 같이 두세요</span></span></span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"265\" data-origin-height=\"570\"><span data-url=\"https://blog.kakaocdn.net/dn/btfLZp/btsJDcDCMJV/Nk0KoDr4gJVs4mew9u2i80/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/btfLZp/btsJDcDCMJV/Nk0KoDr4gJVs4mew9u2i80/img.png\"><img src=\"https://blog.kakaocdn.net/dn/btfLZp/btsJDcDCMJV/Nk0KoDr4gJVs4mew9u2i80/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtfLZp%2FbtsJDcDCMJV%2FNk0KoDr4gJVs4mew9u2i80%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"265\" data-origin-height=\"570\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">요로케</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">5. 빌드하기</h2>\n<p data-ke-size=\"size16\">빌드는 터미널 명령어로 이걸 치세요&nbsp;</p>\n<p data-ke-size=\"size16\">flutter build aab</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">성공하면 녹색으로 알려줍니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"716\" data-origin-height=\"181\"><span data-url=\"https://blog.kakaocdn.net/dn/VT90d/btsJEPz6Z3J/HOAbQdxa3xhgSkLCKl8G00/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/VT90d/btsJEPz6Z3J/HOAbQdxa3xhgSkLCKl8G00/img.png\"><img src=\"https://blog.kakaocdn.net/dn/VT90d/btsJEPz6Z3J/HOAbQdxa3xhgSkLCKl8G00/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FVT90d%2FbtsJEPz6Z3J%2FHOAbQdxa3xhgSkLCKl8G00%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"716\" data-origin-height=\"181\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">6. 스토어에 올리기</h2>\n<p data-ke-size=\"size16\">결과물이 있는 폴더</p>\n<p data-ke-size=\"size16\">[내 플러터 프로젝트] / build / app / outputs / bundle / release</p>\n<p data-ke-size=\"size16\">아주 깊숙한 곳에있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">7. 다음번 스토어에 올릴때 빌드 코드를 변경하셔야합니다.</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"698\" data-origin-height=\"358\"><span data-url=\"https://blog.kakaocdn.net/dn/bDeCPA/btsJElTFCvq/1fCWQGzHRUJ2VgDcBQT5E1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bDeCPA/btsJElTFCvq/1fCWQGzHRUJ2VgDcBQT5E1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bDeCPA/btsJElTFCvq/1fCWQGzHRUJ2VgDcBQT5E1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbDeCPA%2FbtsJElTFCvq%2F1fCWQGzHRUJ2VgDcBQT5E1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"698\" data-origin-height=\"358\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">위에서 고친 build.gradle 파일에 이런게 있습니다.</p>\n<p data-ke-size=\"size16\">flutter.versionCode 이걸로 검색하시면&nbsp;</p>\n<p data-ke-size=\"size16\">local.properties 라는 파일에 정의 되어있는데 스토어에 올릴때마다 이 숫자를 하나씩 올려야합니다.</p>\n<p data-ke-size=\"size16\">자주 고쳐야하니 기억해두시면 좋습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">&nbsp;</h2>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "문서의 설명이 유연하거나 위치에 따라 이상해서 되는 방법으로 다시 정리하겠습니다.\n참고 문서:  https://docs.flutter.dev/deployment/android\n\n \nBuild and release an Android app\nHow to prepare for and release an Android app to the Play store.\ndocs.flutter.dev\n\n \n문서의 함정\n\n\n문서에서 고치라는 부분인데 if 처리를 해놯네요\n파일이 없으면 빌드가 중단되야하는데 이걸 넘겨버려서 오류를 찾기 더 어렵게 되어있습니다.\n정말 쓸모없고 문제 찾기도 어렵게하는 방법이였습니다.\n \njks 파일을 만드는 온갖 어려운 방법을 알려주는데 괜히 보면 시간낭비이니 잘 피하시길 ...\n \n \n1. jsk 파일 만들기\nkeytool -genkey -v -keystore key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias [별명]\n[별명] 부분은 알아서 고치시고 key.jks 는 생성할 파일명인데 이파일명 기준으로 작성되니 그대로 쓰시길\n암호가 두개 있습니다. 확인을위해 한번더 입력하기 때문에 총 4번을 입력하는데\n다 같은걸 입력해야 관리가 쉽습니다.\n여러 정보를 요구하는데 다 입력안해도 되니 넘어가시고\n[예/아니오] 이부분 나오면 y 를 입력합니다.\n그다음에 두번째 암호를 입력하라는데 바로 엔터치면 위에서 입력한 암호와 동일하게 셋팅됩니다.\n저는 동일하게 했습니다. 절대 중요한게 아니니 복잡하게 하지마세요\n \n \n2. key.properties\n 만들 필요 없습니다. 넘어갑니다.\njks 의 암호를 노출 시키지 않기위해서 다른파일에서 읽는건데\n복잡하고 노출되도 활용할만한 가치가 없습니다.\n \n3. build.gradle 수정\nbuild.gradle 은 파일이 두군데 있습니다.\n[내 플러터 프로젝트]/android/app/build.gradle 을 수정하세요\nbuildTypes { <-- 이부분을 수정합니다.\n \n \n\n    signingConfigs {\n        release {\n            storeFile file(\"../../key.jks\")\n            keyAlias = \"[별명]\"\n            keyPassword = \"[암호]\"\n            storePassword = \"[암호]\" \n        }\n    }\n    buildTypes {\n        release {\n            signingConfig signingConfigs.release\n        }\n    }\n \nbuildTypes  위에 signingConfigs  가 오고\n buildTypes   안에는 debug 가 release 로 변경되었습니다.\n \n \n4. 파일위치 점검\n[내 플러토 프로젝트]\n  ㄴ android\n       ㄴ app\n            build.gradle\nkey.jks\n즉 key.jks 파일은 [내 플러토 프로젝트] 에 두시면 됩니다.\npubspec.yaml \nanalysis_options.yaml\n이 파일들이 있는 폴더에 같이 두세요\n\n\n요로케\n \n \n5. 빌드하기\n빌드는 터미널 명령어로 이걸 치세요 \nflutter build aab\n \n성공하면 녹색으로 알려줍니다.\n\n\n \n6. 스토어에 올리기\n결과물이 있는 폴더\n[내 플러터 프로젝트] / build / app / outputs / bundle / release\n아주 깊숙한 곳에있습니다.\n \n \n7. 다음번 스토어에 올릴때 빌드 코드를 변경하셔야합니다.\n\n\n위에서 고친 build.gradle 파일에 이런게 있습니다.\nflutter.versionCode 이걸로 검색하시면 \nlocal.properties 라는 파일에 정의 되어있는데 스토어에 올릴때마다 이 숫자를 하나씩 올려야합니다.\n자주 고쳐야하니 기억해두시면 좋습니다.",
        "guid": "http://serverdown.tistory.com/814",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2024-09-17T13:29:35.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "일억은퇴 - SPY 넣어두고 매월 뽑아쓰는 시나리오 백테스트",
        "link": "http://serverdown.tistory.com/812",
        "pubDate": "Tue, 17 Sep 2024 15:57:42 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/812#entry812comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=AwEfvZfvyRs\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=AwEfvZfvyRs</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=AwEfvZfvyRs\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bsb3Do/hyW6AV59gF/gx9NShNHDWk8rgMmTDNqDK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"SPY 1억 매수하고 월배당 100만원받기 테스트\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/AwEfvZfvyRs\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">백테스트는 거저 배울 수 있는 좋은 기회입니다.</p>\n<p data-ke-size=\"size16\">상황에 따라 다르긴한데</p>\n<p data-ke-size=\"size16\">가장 좋은 시나리오에서는 14년을 빼먹어도 원금이 늘어나는 결과가 나왔군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">참고로 향수 10년은 S&amp;P500 잘 못갈꺼라는 리포트가 있군요</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/KCEP-ZG7b2s?t=3896\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/KCEP-ZG7b2s?t=3896</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=KCEP-ZG7b2s\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/APHU4/hyW2W0RrZm/WLGBYFlc4t9qtpIuZYvt21/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"나쁘지 않은 미국 소비 | 50bp 베팅 &amp; 연착륙 전망하면서도 불안한 황소들 | 주가 부양 나선 마이크\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/KCEP-ZG7b2s\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">다우배당을 노리는게 좋겠습니다.</p>\n<p data-ke-size=\"size16\">SCHD 추천</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=AwEfvZfvyRs\n\n\n\n백테스트는 거저 배울 수 있는 좋은 기회입니다.\n상황에 따라 다르긴한데\n가장 좋은 시나리오에서는 14년을 빼먹어도 원금이 늘어나는 결과가 나왔군요\n \n \n참고로 향수 10년은 S&P500 잘 못갈꺼라는 리포트가 있군요\n영상: https://youtu.be/KCEP-ZG7b2s?t=3896\n\n\n\n \n다우배당을 노리는게 좋겠습니다.\nSCHD 추천",
        "guid": "http://serverdown.tistory.com/812",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2024-09-17T06:57:42.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter  &quot;YAML 디버깅에 대 한 확장이 없습니다. Marketplace에서 YAML 확장을 찾아야 하나요?&quot;",
        "link": "http://serverdown.tistory.com/811",
        "pubDate": "Tue, 17 Sep 2024 15:49:13 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/811#entry811comment",
        "content": "<p data-ke-size=\"size16\">vscode 로 flutter 개발중에 나는 경우 인데요</p>\n<p data-ke-size=\"size16\">실행할때 보통 [실행] -&gt; [디버깅 없이 실행] 을 누르게 되는데요</p>\n<p data-ke-size=\"size16\">이때 main.dart 파일 이 보이는 상태에서 해야합니다.</p>\n<p data-ke-size=\"size16\">현재보고있는 파일기준에 따라 에러 명령은 다르게 표시되는데요</p>\n<p data-ke-size=\"size16\">잘못 집어서 시간이 오래걸려서 찾아냈습니다. ㅠㅠ</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">결론</h2>\n<p data-ke-size=\"size16\">main.dartk 가 보이는 상태에서 [실행] -&gt; [디버깅 ...] 을 누른다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "vscode 로 flutter 개발중에 나는 경우 인데요\n실행할때 보통 [실행] -> [디버깅 없이 실행] 을 누르게 되는데요\n이때 main.dart 파일 이 보이는 상태에서 해야합니다.\n현재보고있는 파일기준에 따라 에러 명령은 다르게 표시되는데요\n잘못 집어서 시간이 오래걸려서 찾아냈습니다. ㅠㅠ\n \n결론\nmain.dartk 가 보이는 상태에서 [실행] -> [디버깅 ...] 을 누른다.",
        "guid": "http://serverdown.tistory.com/811",
        "categories": [
          "프로그래밍/개발메모",
          "FLUTTER"
        ],
        "isoDate": "2024-09-17T06:49:13.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "개인 앱 개발 스토리",
        "link": "http://serverdown.tistory.com/810",
        "pubDate": "Tue, 17 Sep 2024 13:49:34 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/810#entry810comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=XYR2-_H4PzI\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=XYR2-_H4PzI</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=XYR2-_H4PzI\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/zLJkn/hyW6KYHNbe/NTTP68WOKwk3kqykUKuVXK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"프로그래밍 좀비님의 이야기\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/XYR2-_H4PzI\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">욕심 부리지말고 작은거 부터 하자</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=XYR2-_H4PzI\n\n\n\n욕심 부리지말고 작은거 부터 하자",
        "guid": "http://serverdown.tistory.com/810",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2024-09-17T04:49:34.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter 잡다한 지식 모음 영상 / 이름을 몰라 검색할 수도 없는 그것들",
        "link": "http://serverdown.tistory.com/809",
        "pubDate": "Mon, 16 Sep 2024 01:49:08 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/809#entry809comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=5vDq5DXXxss\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=5vDq5DXXxss</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=5vDq5DXXxss\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/da0suZ/hyW2SRjTW0/YN9yKdabrr6Sv3Dnpbob80/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Top 30 Flutter Tips and Tricks\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/5vDq5DXXxss\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">이게 뭐지 하던 그것의 이름을 알아보려면 이 영상을 참고하세요</p>\n<p data-ke-size=\"size16\">다른앱에서 많이 봤던 이름을 모르던 그것이 모아져있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=M9J-JJOuyE0&amp;t=4s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=M9J-JJOuyE0&amp;t=4s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=M9J-JJOuyE0\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/gYFPf/hyW2V1Bb6r/lYVYkBcTwAtrwZoTMF22eK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Top 35 Flutter Widgets\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/M9J-JJOuyE0\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">역시나 이름은 모르겠고 다른앱에서 많이 보던 것을을 설명하는 영상입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=5vDq5DXXxss\n\n\n\n이게 뭐지 하던 그것의 이름을 알아보려면 이 영상을 참고하세요\n다른앱에서 많이 봤던 이름을 모르던 그것이 모아져있습니다.\n \n \n영상: https://www.youtube.com/watch?v=M9J-JJOuyE0&t=4s\n\n\n\n역시나 이름은 모르겠고 다른앱에서 많이 보던 것을을 설명하는 영상입니다.",
        "guid": "http://serverdown.tistory.com/809",
        "categories": [
          "FLUTTER"
        ],
        "isoDate": "2024-09-15T16:49:08.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter AnimatedContainer 로 에니메이션 주기",
        "link": "http://serverdown.tistory.com/808",
        "pubDate": "Sun, 15 Sep 2024 15:15:19 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/808#entry808comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=sZw8opj38Vo&amp;list=PL4cUxeGkcC9gP1qg8yj-Jokef29VRCLt1&amp;index=2\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=sZw8opj38Vo&amp;list=PL4cUxeGkcC9gP1qg8yj-Jokef29VRCLt1&amp;index=2</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=sZw8opj38Vo\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cyi4P0/hyW2TigGxi/Og7BK34taTKIBwcWvTPfgK/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Flutter Animation Tutorial #2 - Built-in Animations\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/sZw8opj38Vo\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">AnimatedContainer&nbsp; 안에 시간 속성이 있어서</p>\n<p data-ke-size=\"size16\">몇가지 옵션들을 설정하면 입력한 시간동안 변환이 이뤄지면서 에니메이션 되는것 처럼 보입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">코드:</p>\n<pre id=\"code_1726380352256\" class=\"javascript\" data-ke-language=\"javascript\" data-ke-type=\"codeblock\"><code>// import 'dart:async';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State&lt;MyApp&gt; createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  bool toogle = false;\n  Duration d = Duration(milliseconds: 5000);\n  double mg = 50;\n  Color bg = Colors.green;\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // print(\"build\");\n    return MaterialApp(\n      title: \"Title\",\n      theme: ThemeData(\n        useMaterial3: true,\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.green,\n          brightness: Brightness.dark,\n        ),\n      ),\n      home: SafeArea(\n        child: AnimatedContainer(\n          duration: d,\n          margin: EdgeInsets.all(mg),\n          color: bg,\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              OutlinedButton(\n                onPressed: () {\n                  setState(() {\n                    toogle = !toogle;\n                    if (toogle) {\n                      bg = Colors.red;\n                      mg = 100;\n                    } else {\n                      bg = Colors.green;\n                      mg = 50;\n                    }\n                  });\n                },\n                child: BigText(\"button3\"),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  // 쉽게 줄여서 쓰려고 만듬\n  Widget BigText(String text, {double size = 30}) {\n    return Text(text, style: TextStyle(fontSize: size));\n  }\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">결과물: <a href=\"https://www.youtube.com/shorts/484v08WCk5M\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/shorts/484v08WCk5M</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/shorts/484v08WCk5M\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/dOBWaZ/hyW2RLxCsb/lSLQTD1TxNZGPv01pAytq0/img.jpg?width=278&amp;height=480&amp;face=0_0_278_480,https://scrap.kakaocdn.net/dn/KKZWR/hyW2W69Ecp/qEc7LfZkmR2yIl7uDAjRQk/img.jpg?width=278&amp;height=480&amp;face=0_0_278_480\" data-video-width=\"278\" data-video-height=\"480\" data-video-origin-width=\"278\" data-video-origin-height=\"480\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"flutter AnimatedContainer\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/484v08WCk5M\" width=\"278\" height=\"480\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=sZw8opj38Vo&list=PL4cUxeGkcC9gP1qg8yj-Jokef29VRCLt1&index=2\n\n\n\n \nAnimatedContainer  안에 시간 속성이 있어서\n몇가지 옵션들을 설정하면 입력한 시간동안 변환이 이뤄지면서 에니메이션 되는것 처럼 보입니다.\n \n코드:\n// import 'dart:async';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  bool toogle = false;\n  Duration d = Duration(milliseconds: 5000);\n  double mg = 50;\n  Color bg = Colors.green;\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // print(\"build\");\n    return MaterialApp(\n      title: \"Title\",\n      theme: ThemeData(\n        useMaterial3: true,\n        colorScheme: ColorScheme.fromSeed(\n          seedColor: Colors.green,\n          brightness: Brightness.dark,\n        ),\n      ),\n      home: SafeArea(\n        child: AnimatedContainer(\n          duration: d,\n          margin: EdgeInsets.all(mg),\n          color: bg,\n          child: Column(\n            crossAxisAlignment: CrossAxisAlignment.center,\n            children: [\n              OutlinedButton(\n                onPressed: () {\n                  setState(() {\n                    toogle = !toogle;\n                    if (toogle) {\n                      bg = Colors.red;\n                      mg = 100;\n                    } else {\n                      bg = Colors.green;\n                      mg = 50;\n                    }\n                  });\n                },\n                child: BigText(\"button3\"),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n\n  // 쉽게 줄여서 쓰려고 만듬\n  Widget BigText(String text, {double size = 30}) {\n    return Text(text, style: TextStyle(fontSize: size));\n  }\n}\n \n결과물: https://www.youtube.com/shorts/484v08WCk5M",
        "guid": "http://serverdown.tistory.com/808",
        "categories": [
          "프로그래밍/개발메모",
          "FLUTTER"
        ],
        "isoDate": "2024-09-15T06:15:19.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "휴대용 접이식 키보드를 알아보자",
        "link": "http://serverdown.tistory.com/807",
        "pubDate": "Sun, 15 Sep 2024 13:35:40 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/807#entry807comment",
        "content": "<p data-ke-size=\"size16\">모니터랑 키보드가 연결안된 원격 컴퓨터가 많아서 알아보고 있는데</p>\n<p data-ke-size=\"size16\">마음에 들지는 않군요</p>\n<p data-ke-size=\"size16\">제가 중요하게 보는 요소는</p>\n<p data-ke-size=\"size16\">1. 오타가 나는 키보드는 안됨 - 왜곡이 적고 키 크기도 일반키보드랑 비슷해야합니다.</p>\n<p data-ke-size=\"size16\">2. print screen 키가 필요 - F12 오른족에 있는 키인데 저는 엄청 많이 씁니다.<br />&nbsp; &nbsp; 이 키가 있는 휴대용 키보드는 본적이 없고 펑션키 조합으로 되는지도 불분명합니다.</p>\n<p data-ke-size=\"size16\">3. 트래패드나 마우스 기능이 필수<br />&nbsp; &nbsp; &nbsp;마우스 없으면 또연결해야하는데 이러면 이미 휴대성을 상실했다고 봐야합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">전부 print screeen 의 존재를 확인하지 못해서 제가 설건 없구요</p>\n<p data-ke-size=\"size16\">알아본바 쓸만한거 2개와 마지막에 중국산도 하나 넣었습니다.<br />중국껀는 오타가 있을거 같아 보이긴하는데 가격이 싸군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=UNws9g4_Ll8\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=UNws9g4_Ll8</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=UNws9g4_Ll8\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/boAvwp/hyW2SwTM9d/CT9otMu3HtjKKzgJIZxg20/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"키보드, 접습니다. 아이노트 X-Folding Touch Big 접이식 블루투스 키보드 써 보니\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/UNws9g4_Ll8\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">아이노트 X-Folding Touch Big - 5만원정도</p>\n<p data-ke-size=\"size16\">접히는 부분에 키보드 외곡이 없군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상2: <a href=\"https://www.youtube.com/watch?v=G8FKra6H4lo&amp;t=519s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=G8FKra6H4lo&amp;t=519s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=G8FKra6H4lo\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/fpokN/hyW2QeLCFt/jmChghxK48ikzAntIPN0u1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"접이식 키보드 고민 중 이신가요? / Britz BA-BK10 PLUS 리뷰\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/G8FKra6H4lo\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">브리츠 BA-BK10 Plus - 6.5만원</p>\n<p data-ke-size=\"size16\">오타가 덜 나게 외곡이 적은 모양이라고 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상3: <a href=\"https://www.youtube.com/watch?v=mEJOWBCViLY\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=mEJOWBCViLY</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=mEJOWBCViLY\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/eFDms/hyW2RksaB9/HOksAGqU85L6k6q3cPpVW0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"2만원대 거의 완벽한 블루투스 키보드! 알리발 AVATTO 접이식 키보드 리뷰 _ 오랜만에 마음에 드는 \" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/mEJOWBCViLY\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">AVATO 접이식 키보드 - 2.9만원</p>\n<p data-ke-size=\"size16\">접히는 부분에 왜곡이 있군요</p>\n<p data-ke-size=\"size16\">왜곡이 오타를 부르기 때문에 비추하구요</p>\n<p data-ke-size=\"size16\">장점은 싸다 + 급하면 쓴다. 정도</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "모니터랑 키보드가 연결안된 원격 컴퓨터가 많아서 알아보고 있는데\n마음에 들지는 않군요\n제가 중요하게 보는 요소는\n1. 오타가 나는 키보드는 안됨 - 왜곡이 적고 키 크기도 일반키보드랑 비슷해야합니다.\n2. print screen 키가 필요 - F12 오른족에 있는 키인데 저는 엄청 많이 씁니다.\n    이 키가 있는 휴대용 키보드는 본적이 없고 펑션키 조합으로 되는지도 불분명합니다.\n3. 트래패드나 마우스 기능이 필수\n     마우스 없으면 또연결해야하는데 이러면 이미 휴대성을 상실했다고 봐야합니다.\n \n전부 print screeen 의 존재를 확인하지 못해서 제가 설건 없구요\n알아본바 쓸만한거 2개와 마지막에 중국산도 하나 넣었습니다.\n중국껀는 오타가 있을거 같아 보이긴하는데 가격이 싸군요\n \n \n영상: https://www.youtube.com/watch?v=UNws9g4_Ll8\n\n\n\n아이노트 X-Folding Touch Big - 5만원정도\n접히는 부분에 키보드 외곡이 없군요\n \n \n영상2: https://www.youtube.com/watch?v=G8FKra6H4lo&t=519s\n\n\n\n브리츠 BA-BK10 Plus - 6.5만원\n오타가 덜 나게 외곡이 적은 모양이라고 합니다.\n \n \n영상3: https://www.youtube.com/watch?v=mEJOWBCViLY\n\n\n\nAVATO 접이식 키보드 - 2.9만원\n접히는 부분에 왜곡이 있군요\n왜곡이 오타를 부르기 때문에 비추하구요\n장점은 싸다 + 급하면 쓴다. 정도",
        "guid": "http://serverdown.tistory.com/807",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2024-09-15T04:35:40.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter dart 전역변수 사용법",
        "link": "http://serverdown.tistory.com/806",
        "pubDate": "Sun, 15 Sep 2024 11:12:00 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/806#entry806comment",
        "content": "<p data-ke-size=\"size16\">코딩 연습은 이곳에서 할 수 있습니다.</p>\n<p data-ke-size=\"size16\"><a href=\"https://dartpad.dev/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://dartpad.dev/</a></p>\n<figure id=\"og_1726366115996\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"DartPad\" data-og-description=\"\" data-og-host=\"dartpad.dev\" data-og-source-url=\"https://dartpad.dev/\" data-og-url=\"https://dartpad.dev/\" data-og-image=\"\"><a href=\"https://dartpad.dev/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://dartpad.dev/\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">DartPad</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">&nbsp;</p>\n<p class=\"og-host\" data-ke-size=\"size16\">dartpad.dev</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">코드는 이렇구요</p>\n<pre id=\"code_1726366192715\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-type=\"codeblock\" data-ke-language=\"javascript\"><code>void main() {\n  A.a = 1;\n  print(\"a=\" + A.a.toString());\n\n  b += 100;\n  print(\"b=\" + b.toString());\n}\n\nclass A {\n  static int a = 0;\n}\n\nint b = 0;</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">결과:는 RUN 버튼 누르면 되구요</p>\n<p data-ke-size=\"size16\">a=1 <br />b=100</p>\n<p data-ke-size=\"size16\">이렇게 나왔습니다.<br />즉 전역변수 사용에 별다른 제약사항은 없고 함수 밖에다 선언하면 되구요<br />class 의 static 맴버도 사용 가능했습니다.</p>\n<p data-ke-size=\"size16\">UI 나 클라이언트 작업에 적함한 언어가 맞는거 같군요</p>\n<p data-ke-size=\"size16\">go 는 이부분에 제약이 심했는데 dart 는 쉬웠습니다.</p>",
        "contentSnippet": "코딩 연습은 이곳에서 할 수 있습니다.\nhttps://dartpad.dev/\n\n \nDartPad\n \ndartpad.dev\n\n \n코드는 이렇구요\nvoid main() {\n  A.a = 1;\n  print(\"a=\" + A.a.toString());\n\n  b += 100;\n  print(\"b=\" + b.toString());\n}\n\nclass A {\n  static int a = 0;\n}\n\nint b = 0;\n \n결과:는 RUN 버튼 누르면 되구요\na=1 \nb=100\n이렇게 나왔습니다.\n즉 전역변수 사용에 별다른 제약사항은 없고 함수 밖에다 선언하면 되구요\nclass 의 static 맴버도 사용 가능했습니다.\nUI 나 클라이언트 작업에 적함한 언어가 맞는거 같군요\ngo 는 이부분에 제약이 심했는데 dart 는 쉬웠습니다.",
        "guid": "http://serverdown.tistory.com/806",
        "categories": [
          "프로그래밍/개발메모"
        ],
        "isoDate": "2024-09-15T02:12:00.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter 인자 기본값 사용하기",
        "link": "http://serverdown.tistory.com/805",
        "pubDate": "Sat, 14 Sep 2024 18:03:10 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/805#entry805comment",
        "content": "<p data-ke-size=\"size16\">dart 언어가 c# 과도 다르고 js 랑도 다른게 많군요</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"442\" data-origin-height=\"152\"><span data-url=\"https://blog.kakaocdn.net/dn/dXCqMr/btsJEjgBW74/v9tZjt62AaIwVqYxJIiOu0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/dXCqMr/btsJEjgBW74/v9tZjt62AaIwVqYxJIiOu0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/dXCqMr/btsJEjgBW74/v9tZjt62AaIwVqYxJIiOu0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdXCqMr%2FbtsJEjgBW74%2Fv9tZjt62AaIwVqYxJIiOu0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"442\" data-origin-height=\"152\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">BigText 를 만들었구요 이런식으로 크기를 두번째 인자로 받거나 안넣으면 기본값을 쓰거나 하는 식의 용도 입니다.</p>\n<p data-ke-size=\"size16\"><span style=\"color: #4ec9b0;\">Widget</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #dcdcaa;\">BitText</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #4ec9b0;\">String</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">text</span><span style=\"color: #ffffff;\">, {</span><span style=\"color: #4ec9b0;\">double</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">size</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #b5cea8;\">30</span><span style=\"color: #ffffff;\">}) {<br /></span><span style=\"color: #ffffff;\">&nbsp; &nbsp;&nbsp;</span><span style=\"color: #c586c0;\">return</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #4ec9b0;\">Text</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">text</span><span style=\"color: #ffffff;\">,<span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">style</span><span style=\"color: #d4d4d4;\">:</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #4ec9b0;\">TextStyle</span><span style=\"color: #ffffff;\">(</span><span style=\"color: #9cdcfe;\">fontSize</span><span style=\"color: #d4d4d4;\">:</span><span style=\"color: #ffffff;\"><span>&nbsp;</span></span><span style=\"color: #9cdcfe;\">size</span><span style=\"color: #ffffff;\">));<br /></span><span style=\"background-color: #000000; color: #000000; text-align: start;\">}</span><span style=\"background-color: #000000; color: #000000; text-align: start;\">&nbsp;</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">코드는 이거구요</span></p>\n<p data-ke-size=\"size16\"><span style=\"color: #ffffff;\">{</span><span style=\"color: #4ec9b0;\">double</span><span style=\"color: #ffffff;\"><span style=\"background-color: #000000; color: #000000;\">&nbsp;</span></span><span style=\"color: #9cdcfe;\">size</span><span style=\"color: #ffffff;\"><span style=\"background-color: #000000; color: #000000;\">&nbsp;</span></span><span style=\"color: #d4d4d4;\">=</span><span style=\"color: #ffffff;\"><span style=\"background-color: #000000; color: #000000;\">&nbsp;</span></span><span style=\"color: #b5cea8;\">30</span><span style=\"color: #ffffff;\">}}</span></p>\n<p data-ke-size=\"size16\">이부분이 기본 인자 값 형식입니다.</p>\n<p data-ke-size=\"size16\">size 를 선언하면 그걸 쓰고 안쓰면 30 이 되는 것입니다.</p>\n<p data-ke-size=\"size16\">코드 길이를 줄이는데 도움이 될것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "dart 언어가 c# 과도 다르고 js 랑도 다른게 많군요\n\n\nBigText 를 만들었구요 이런식으로 크기를 두번째 인자로 받거나 안넣으면 기본값을 쓰거나 하는 식의 용도 입니다.\nWidget BitText(String text, {double size = 30}) {\n    return Text(text, style: TextStyle(fontSize: size));\n} \n코드는 이거구요\n{double size = 30}}\n이부분이 기본 인자 값 형식입니다.\nsize 를 선언하면 그걸 쓰고 안쓰면 30 이 되는 것입니다.\n코드 길이를 줄이는데 도움이 될것 같습니다.",
        "guid": "http://serverdown.tistory.com/805",
        "categories": [
          "프로그래밍/개발메모",
          "FLUTTER"
        ],
        "isoDate": "2024-09-14T09:03:10.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "flutter StatefulWidget 를 썼는데 변수가 안바뀐다면",
        "link": "http://serverdown.tistory.com/804",
        "pubDate": "Sat, 14 Sep 2024 16:43:02 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/804#entry804comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/CD1Y2DmL5JM?t=5689\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/CD1Y2DmL5JM?t=5689</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=CD1Y2DmL5JM\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bkQJO5/hyW2XkuM5L/9slppdwzrBYtlHMo4xk1fk/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"Flutter Tutorial For Beginners in 3 Hours\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/CD1Y2DmL5JM\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상 참고하시구요</p>\n<p data-ke-size=\"size16\">ui 를 변경하면&nbsp;</p>\n<p data-ke-size=\"size16\">1. StatefulWidget&nbsp; 을 써야한다. StatelessWidget 으론 안된다.</p>\n<p data-ke-size=\"size16\">2. 변경할 부분에서 setState() 를 호출한다.</p>\n<p data-ke-size=\"size16\">3. Build() 에 변 수초기화하는 부분을 넣으면 안된다. setState 후에 build 가 호출된다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">3번은 영상에 안나오고 제가 삽질하다 알아챈 부분입니다.</p>\n<p data-ke-size=\"size16\">전체소스: <a href=\"https://velog.io/@thisisone/flutter-StatefulWidget-%ED%8A%B9%EC%84%B1\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://velog.io/@thisisone/flutter-StatefulWidget-%ED%8A%B9%EC%84%B1</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">배우기 쉽지 않네요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://youtu.be/CD1Y2DmL5JM?t=5689\n\n\n\n \n영상 참고하시구요\nui 를 변경하면 \n1. StatefulWidget  을 써야한다. StatelessWidget 으론 안된다.\n2. 변경할 부분에서 setState() 를 호출한다.\n3. Build() 에 변 수초기화하는 부분을 넣으면 안된다. setState 후에 build 가 호출된다.\n \n3번은 영상에 안나오고 제가 삽질하다 알아챈 부분입니다.\n전체소스: https://velog.io/@thisisone/flutter-StatefulWidget-%ED%8A%B9%EC%84%B1\n \n배우기 쉽지 않네요",
        "guid": "http://serverdown.tistory.com/804",
        "categories": [
          "프로그래밍/개발메모",
          "FLUTTER"
        ],
        "isoDate": "2024-09-14T07:43:02.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Hybrid's Notes",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": [
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "결심은 단순하게",
        "link": "https://jojoldu.tistory.com/805",
        "pubDate": "Sat, 14 Sep 2024 17:03:12 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "https://jojoldu.tistory.com/805#entry805comment",
        "content": "<p data-ke-size=\"size16\"><a href=\"https://comic.naver.com/webtoon/list?titleId=670144\">가담항설 웹툰</a>을 보면 참 멋진 대사들이 많다.</p>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">저는 사당패 시절, 매일 결계에 갇혀 지냈는데, 저는 그곳을 영원히 나갈 수 없을 거라 믿었어요.<br />항상 그런 말을 들었거든요.<br />\"여기서 절대 도망칠 수 없어\"<br />\"도망쳐도 반드시 붙잡힐 거야\"<br />\"어디에서도 널 필요로 하지 않아\"<br />\"이곳을 떠나면 넌 불행해질 거야\"<br />어릴 때는 말을 잘 듣는게 착한 거라고 생각하잖아요.<br />말을 듣지 않고 남에게 피해를 입히거나 불행하게 만들면 벌을 받는다고.<br />그런데 말도 잘 듣고 남을 불행하게 만들지 않아도 저는 왜 매일이 불행하고 괴로운 건지 너무 궁금한 거에요.<br />그런데 어느 날, 전국을 떠돌다 <b>우연히 두류산 고개를 지나는데, 그 자리에서 발을 뗄 수가 없었어요</b>.<br /><b>말로만 듣던 것과는 비교도 안되게 아름다워서</b>.<br /><b>찰나가 아닌 이곳의 사계절을 다 보고 싶어서</b>.<br />그리고 깨달았죠.<br />그동안 나는 타인의 마음에 맞는, 타인의 목적을 위한 삶을 살면서 한 번도 스스로의 마음을 들여다보지 못했다는 것을.<br />그것이 내가 나를 불행하게 만든 벌을 받게 했다는 것을.<br /><b>계기는 단순했지만 감정은 강렬했죠</b>.<br />그리고 저는 결계를 풀었어요.<br />무엇이 나를 속박하고 있는지를 알았고, 무엇이 내가 원하는 것인지를 알았으니까요.<br />&lt;가담항설 90화&gt;</p>\n</blockquote>\n<p data-ke-size=\"size16\">\"계기는 단순했지만 감정은 강렬했죠\" 대사를 참 좋아한다.<br />90화에 관한 이야기를 할때는 타인의 목적을 위해 살지 않고, 내가 원하는 삶을 살아야한다는 내용을 많이들 언급하지만, 유독 이 대사가 좋았다.</p>\n<p data-ke-size=\"size16\">마네킹에 걸린 옷이 너무 이뻐서 그 옷에 맞는 몸이 되려고 다이어트를 시작한다거나,<br />TV 속 러너의 모습이 멋져서 런닝을 시작하거나,<br />우연히 들은 노래 가사가 좋아서 보컬 트레이닝을 배우기 시작하는 등의 이야기를 나는 좋아한다.</p>\n<p data-ke-size=\"size16\">그런 사소한 계기로 시작한 것이 결국 3년 5년 동안 지속되어 자신을 지탱하는 취미가 된다거나 본인이 힘들때 큰 힘이 되어주는 위로가 된다거나, 아예 인생이 바뀌거나 하는 경우도 있다.</p>\n<hr contenteditable=\"false\" data-ke-type=\"horizontalRule\" data-ke-style=\"style1\" />\n<p data-ke-size=\"size16\"><a href=\"https://product.kyobobook.co.kr/detail/S000000887902\">하야마 아마리의 \"스물아홉 생일 1년 후 죽기로 결심했다\"</a> 에서도 이와 유사한 이야기가 나온다.</p>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">책 소개에서 언급하기로는 이 책은 저자의 실화를 기반으로 했다고 한다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">변변한 직장도 없고, 애인에게는 버림받았으며, 같이 이야기를 나눌 친구 조차 없던 외톨이였던 저자는 혼자만의 우울한 스물아홉 생일을 보내던 중 깜깜한 터널과도 같은 인생에 절망하며 자살을 결심한다.</p>\n<p data-ke-size=\"size16\">그러나 죽을 용기마저 내지 못하고, 그런 자신의 모습에 좌절하던 중 텔레비전 화면에 나온 너무도 아름다운 세계, 라스베이거스의 영상을 보게 된다.<br /><b>라스베이거스의 화려한 모습에 그녀는 '1년 후, 라스베이거스에서 최고의 순간을 맛본 후 서른이 되는 날 죽는다'</b> 를 결심한다.</p>\n<p data-ke-size=\"size16\">돈을 벌기 위해 파견사원, 호스티스, 누드모델을 병행하며 죽을힘을 다해 질주하고나서 라스베이거스에서 최고의 하루를 보낸 뒤 그녀는 다시 열심히 삶을 살아갈 힘을 얻는다.</p>\n<p data-ke-size=\"size16\">자살까지 결심한 그녀가 텔레비전 속 영상 하나로 인생이 바뀌게 된 것이다.</p>\n<hr contenteditable=\"false\" data-ke-type=\"horizontalRule\" data-ke-style=\"style1\" />\n<p data-ke-size=\"size16\">어떤 일을 시작하는데 거창한 계기가 필요한 것은 아니다.</p>\n<p data-ke-size=\"size16\">좋아하던 이성과 같은 과목을 듣기 위해 신청했던 컴퓨터 공학 과목이 개발자의 길로 이끌기도 하고,<br />슬램덩크가 좋아 가입한 동호회에서 20년간 가깝게 지내는 동기들을 만나게 되기도 하고,<br />다른 사람의 블로그 글을 보고 시작한 블로그를 10년째 이어져 커리어 내내 도움을 받게 되기도 한다.</p>\n<p data-ke-size=\"size16\">어떤 사소한 계기가 삶을 바꿀지 아무도 모르기 때문에 아주 작은 계기라도 있다면 시작해보고 있다.</p>\n<p data-ke-size=\"size16\">딱 한 걸음만 내딛은 것만으로도 많은 것이 바뀌니 말이다.</p>",
        "contentSnippet": "가담항설 웹툰을 보면 참 멋진 대사들이 많다.\n저는 사당패 시절, 매일 결계에 갇혀 지냈는데, 저는 그곳을 영원히 나갈 수 없을 거라 믿었어요.\n항상 그런 말을 들었거든요.\n\"여기서 절대 도망칠 수 없어\"\n\"도망쳐도 반드시 붙잡힐 거야\"\n\"어디에서도 널 필요로 하지 않아\"\n\"이곳을 떠나면 넌 불행해질 거야\"\n어릴 때는 말을 잘 듣는게 착한 거라고 생각하잖아요.\n말을 듣지 않고 남에게 피해를 입히거나 불행하게 만들면 벌을 받는다고.\n그런데 말도 잘 듣고 남을 불행하게 만들지 않아도 저는 왜 매일이 불행하고 괴로운 건지 너무 궁금한 거에요.\n그런데 어느 날, 전국을 떠돌다 우연히 두류산 고개를 지나는데, 그 자리에서 발을 뗄 수가 없었어요.\n말로만 듣던 것과는 비교도 안되게 아름다워서.\n찰나가 아닌 이곳의 사계절을 다 보고 싶어서.\n그리고 깨달았죠.\n그동안 나는 타인의 마음에 맞는, 타인의 목적을 위한 삶을 살면서 한 번도 스스로의 마음을 들여다보지 못했다는 것을.\n그것이 내가 나를 불행하게 만든 벌을 받게 했다는 것을.\n계기는 단순했지만 감정은 강렬했죠.\n그리고 저는 결계를 풀었어요.\n무엇이 나를 속박하고 있는지를 알았고, 무엇이 내가 원하는 것인지를 알았으니까요.\n<가담항설 90화>\n\"계기는 단순했지만 감정은 강렬했죠\" 대사를 참 좋아한다.\n90화에 관한 이야기를 할때는 타인의 목적을 위해 살지 않고, 내가 원하는 삶을 살아야한다는 내용을 많이들 언급하지만, 유독 이 대사가 좋았다.\n마네킹에 걸린 옷이 너무 이뻐서 그 옷에 맞는 몸이 되려고 다이어트를 시작한다거나,\nTV 속 러너의 모습이 멋져서 런닝을 시작하거나,\n우연히 들은 노래 가사가 좋아서 보컬 트레이닝을 배우기 시작하는 등의 이야기를 나는 좋아한다.\n그런 사소한 계기로 시작한 것이 결국 3년 5년 동안 지속되어 자신을 지탱하는 취미가 된다거나 본인이 힘들때 큰 힘이 되어주는 위로가 된다거나, 아예 인생이 바뀌거나 하는 경우도 있다.\n하야마 아마리의 \"스물아홉 생일 1년 후 죽기로 결심했다\" 에서도 이와 유사한 이야기가 나온다.\n책 소개에서 언급하기로는 이 책은 저자의 실화를 기반으로 했다고 한다.\n변변한 직장도 없고, 애인에게는 버림받았으며, 같이 이야기를 나눌 친구 조차 없던 외톨이였던 저자는 혼자만의 우울한 스물아홉 생일을 보내던 중 깜깜한 터널과도 같은 인생에 절망하며 자살을 결심한다.\n그러나 죽을 용기마저 내지 못하고, 그런 자신의 모습에 좌절하던 중 텔레비전 화면에 나온 너무도 아름다운 세계, 라스베이거스의 영상을 보게 된다.\n라스베이거스의 화려한 모습에 그녀는 '1년 후, 라스베이거스에서 최고의 순간을 맛본 후 서른이 되는 날 죽는다' 를 결심한다.\n돈을 벌기 위해 파견사원, 호스티스, 누드모델을 병행하며 죽을힘을 다해 질주하고나서 라스베이거스에서 최고의 하루를 보낸 뒤 그녀는 다시 열심히 삶을 살아갈 힘을 얻는다.\n자살까지 결심한 그녀가 텔레비전 속 영상 하나로 인생이 바뀌게 된 것이다.\n어떤 일을 시작하는데 거창한 계기가 필요한 것은 아니다.\n좋아하던 이성과 같은 과목을 듣기 위해 신청했던 컴퓨터 공학 과목이 개발자의 길로 이끌기도 하고,\n슬램덩크가 좋아 가입한 동호회에서 20년간 가깝게 지내는 동기들을 만나게 되기도 하고,\n다른 사람의 블로그 글을 보고 시작한 블로그를 10년째 이어져 커리어 내내 도움을 받게 되기도 한다.\n어떤 사소한 계기가 삶을 바꿀지 아무도 모르기 때문에 아주 작은 계기라도 있다면 시작해보고 있다.\n딱 한 걸음만 내딛은 것만으로도 많은 것이 바뀌니 말이다.",
        "guid": "https://jojoldu.tistory.com/805",
        "categories": [
          "생각정리",
          "가담항설",
          "스물아홉 생일 1년 후 죽기로 결심했다",
          "하야마 아마리"
        ],
        "isoDate": "2024-09-14T08:03:12.000Z"
      },
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "스즈키 히로키 - 마키아벨리의 군주론을 읽다",
        "link": "https://jojoldu.tistory.com/804",
        "pubDate": "Sat, 14 Sep 2024 00:24:01 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "https://jojoldu.tistory.com/804#entry804comment",
        "content": "<p data-ke-size=\"size16\"><a href=\"https://m.yes24.com/Goods/Detail/41790780\">스즈키 히로키의 \"마키아벨리의 군주론을 읽다\"</a>를 읽고 생각나는 구절들을 정리했다.</p>\n<h2 data-ke-size=\"size26\">1장</h2>\n<h4 data-ke-size=\"size20\">구두쇠가 되어도 좋다</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">\"군주는 인색하다는 평판에 개의치 않아도 된다.<br />백성을 지키기 위해서도, 자신을 지키기 위해서도 (중략) 그래야 한다.<br />구두쇠가 되는 것은 지배자가 자신의 자리를 보존하기 위한 하나의 악덕이다.\"<br />...<br />낭비하는 리더는 큰일을 치를 때마다 국민에게 피해를 주고 원망을 받는 반면에, 절약하는 리더는 국민의 지지를 받으면서 큰일을 해냅니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">유동성이 풍부한 스타트업 투자 호황기의 대표님들이 생각난다.<br />그 시절에 낭비를 했던 리더분들은 대단히 힘든 시기를 보내었고,<br />당시에 투자금을 필요한 곳에만 적절하게 사용하신 분들은 지금 혹한기 시절에 오히려 더 성과를 내고 있다.<br />인건비의 과도한 투자로 요즘의 시기가 어렵다는 뉴스가 많다.<br />실제로 그런 것인지 아닌지는 회사마다 다르다고 본다.</p>\n<p data-ke-size=\"size16\">다만, 소프트웨어 개발자에게 높은 연봉을 주면 그만큼의 성과가 나오는 것이냐에 대해서는 스타트업 전체적으로 평가중인 것 같다.<br />최근에 핫하게 공유된 박영록님의 트윗이 있다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><a href=\"https://twitter.com/pakyoungrok/status/1829342829543674238\">거래액 100억 이하는 네이버 스마트 스토어가 최선의 선택이다</a></li>\n<li><a href=\"https://twitter.com/pakyoungrok/status/1829158146369290521\">우리나라 이커머스들이 적자가 많은 건 경쟁이 과도한 것도 있지만, 소프트웨어 생산성이 너무 낮은 것도 원인 중 하나가 아닐까 싶다</a></li>\n</ul>\n<p data-ke-size=\"size16\">그리고 작년엔 생활용품 커머스 <a href=\"https://cbiz.chosun.com/svc/bulletin/bulletin_art.html?contid=2023032600041\">와이즐리가 회사의 핵심 가치를 최저가 상품으로 보고 개발팀을 모두 없애고 Saas로 커머스를 대신했다</a>는 소식도 있다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"1.png\" data-origin-width=\"1426\" data-origin-height=\"874\"><span data-url=\"https://blog.kakaocdn.net/dn/bFETe7/btsJCC3fL95/IvAG16R49vUHZ0y8SLFJJk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bFETe7/btsJCC3fL95/IvAG16R49vUHZ0y8SLFJJk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bFETe7/btsJCC3fL95/IvAG16R49vUHZ0y8SLFJJk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbFETe7%2FbtsJCC3fL95%2FIvAG16R49vUHZ0y8SLFJJk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"743\" height=\"455\" data-filename=\"1.png\" data-origin-width=\"1426\" data-origin-height=\"874\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">에전에는 우리 회사의 본질이 무엇이건간에 소프트웨어 개발자에게 무조건적인 투자를 했다면, 현재는 소프트웨어 개발자가 이 서비스, 이 제품의 \"써야할 곳\" 인지 아닌지 우리 회사의 본질이 무엇이냐 판단하는 시기인것 같다.</p>\n<h2 data-ke-size=\"size26\">2장</h2>\n<h4 data-ke-size=\"size20\">운을 탓하지 마라</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">\"오래도록 자리를 지킨 이탈리아의 제후가 마지막에 나라를 빼앗겼다고 운명을 탓하면 곤란하다.<br />그것은 운명이 아니라 태만 탓이다.\"<br />...<br />손에 넣은 것을 잃었다면 군주인 당신의 태만 탓입니다.<br />사랑하는 것을 잃는 것도, 부를 얻거나 소중한 사람과 나누는 행복을 놓치는 것도 군주인 당신의 태만이 문제가 된 것입니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">이 내용은 \"<a href=\"https://www.linkedin.com/posts/douglasguen_qwurbaqya-swmtnktxuslhqsvsmp-qsvsmpstcslh-activity-7229268927057383424-M1rn?utm_source=share&amp;utm_medium=member_desktop\">스타트업이 망한 것은 모두 스타트업 대표님의 잘못이다</a>\" 와 일맥상통한다고 생각했다.</p>\n<p data-ke-size=\"size16\">다만, 원론적으로 그렇게 생각할 수는 있다고 보지만, 개인적으로는 마음에 들진 않는다.<br />군주론은 전체적으로 \"현실의 불확실성\" 을 너무나 배제하고 이야기한다.<br />이게 시대 배경에 따른 차이인가 싶었지만, 현재 발생하는 모든 불행한 일이 일이 정말 그 사람의 노력 부족 때문인가? 싶다.</p>\n<p data-ke-size=\"size16\">나는 '운'의 요소를 대단히 믿는 편이다.<br />다만, 그래서 모든 것에 대해 운 탓을 한다기 보다는, \"운을 모을 수 있다\" 고 보는 편이다.</p>\n<p data-ke-size=\"size16\">세상에는 많은 운이 적용되고 있고, 이 운은 모을 수 있기 때문에 매일 매일 운을 모으는 행위를 하는 것이 필요하다.</p>\n<p data-ke-size=\"size16\">지나가는 쓰레기를 줍는다거나,<br />작은 일에 감사함을 표한다거나,<br />주변 동료들에게 친절함을 베푸는 등<br />그런 행위가 운을 모으는 것이라고 믿고 그렇게 운을 모아 내가 목표로 하는 곳에 다 쏟아지길 바랄뿐이다.</p>\n<h4 data-ke-size=\"size20\">대담하게 오르고 성실하게 지켜라</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">\"겁에 질리거나 잘못된 조언에 따르거나 해서 결단을 미루면 자신을 지키는 단검을 손에서 놓지 못하게 된다.\"<br />...<br />처음에 잔혹함을 발휘하지 못하고 망설이다가 필요할 때마다 조금씩 발휘한다면, 원한을 품는 사람이 점점 늘어나 군주는 자신을 지키는 일에 급급해질 수 밖에 없습니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">Runway 가 1년 밖에 남지 않은 상황에서 희망퇴직, 구조조정을 한다면 어떤 방식이 가장 효과적일까?<br />이 문장은 위 질문에 대한 답변을 한 것 같았다.</p>\n<p data-ke-size=\"size16\">100명의 인원을 30명으로 줄여야만 Runway 가 1년에서 2년으로 늘어날 수 있는 상황에서 1) 한번에 70명과 헤어지는 것이 좋을까, 2) 20~30명씩 천천히 나눠서 헤어지면서 총 70명과 헤어지는 것이 좋을까</p>\n<p data-ke-size=\"size16\">이 책에서는 1) \"한번에 70명과 헤어지는 것\" 을 선택하라고 한다.<br />그리고 실제로 그렇게 선택한 실제 사례가 최근에 있었다.</p>\n<p data-ke-size=\"size16\">머스크가 트위터를 인수하고 하루에 전 직원의 50%를 해고한 이야기가 한참 화제였다.<br />당시에 트위터에 있던 분의 구조조정 과정을 만화가 공유되기도 했다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><a href=\"https://tobe.aladin.co.kr/s/9193\">무모한 안식년</a></li>\n</ul>\n<p data-ke-size=\"size16\">남은 사람들을 위해, 앞으로를 위해 한번에 잔혹함을 발휘하는게 낫다고 하지만, 실제로 그런 상황이 발생할때 그럴 수 있을까?<br />그런 상황이 생기는 것이 가장 두렵다.</p>\n<h2 data-ke-size=\"size26\">3장</h2>\n<h4 data-ke-size=\"size20\">해결사가 되라</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">사장은 직원이 해결할 수 없는 문제를 해결하고, 상사는 부하가 해결할 수 없는 문제를 해결할 수 있어야 합니다.<br />...<br />다른 사람도 할 수 있는 일을 돕는 것이 아닙니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">팀원간의 갈등이나 조직간의 갈등 등 실무자가 해결할 수 없는 문제를 해결하는데 집중해야한다는 내용이라 공감되었다.<br />다만, 이건 조직의 현재 상황에 따라 달라질 수 있을 것 같다.</p>\n<p data-ke-size=\"size16\">조직의 실무 역량이 낮을 때는 팀원들이 해결할 수 없는 전문성에 관련된 문제를 풀어야하고,<br />조직의 실무 역량이 높을 때는 전문성에 관련된 문제가 아닌 조직대 조직, 사람대 사람의 문제를 풀어야하는 것 같다.</p>\n<h2 data-ke-size=\"size26\">4장</h2>\n<h4 data-ke-size=\"size20\">불만에 의해 움직이는 것은 다른 불만을 끌어당길 뿐이다</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">\"구정권에 대한 불만으로 신군주를 옹립하고 지지한 사람들을 아군으로 삼기보다는 구정권에 만족하고 신군주를 적대한 사람들을 아군으로 삼는 편이 훨씬 편하다.\"<br />...<br />구정권에 만족하고 소임을 다하고 있던 사람은 결국 신정권에도 적응하게 됩니다.<br />그들이 움직이는 동기는 조직을 적절히 운영하는 일에 있기 때문입니다.<br />구정권의 장점에 주목해서 생활하고 있던 그들의 '장점을 보는 경향' 이 당신의 신정권에도 적용되는 것입니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">경력직을 채용할때 전 회사의 퇴사 사유를 물어보는 것과 동일한 것 같다.<br />전 직장에서 불만을 갖고 퇴사한 사람을 데려와서 우리 팀을 만족시키게 하는 것보다는 전 직장에서 불만 없이 만족하면서 다니는 사람을 우리팀으로 데려오는 것이 훨씬 더 성공적인 경력직 채용임을 몇번 경험했다.</p>\n<p data-ke-size=\"size16\">그래서 면접에서도 전 회사의 단점 보다는 장점을 이야기하는 사람이 좋다.<br />하지만 대부분은 전 회사의 어떠한 점이 불편했기 때문에 이직하는 것이라서 그러기는 쉽지 않을것 같다.</p>\n<h2 data-ke-size=\"size26\">5장</h2>\n<h4 data-ke-size=\"size20\">자신답게 패자가 되기보다 자신답지 않게 승자가 되라</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">\"인간은 천성에서 좀처럼 벗어나지 못한다.<br />또한 한번 성공을 맛본 방식이 있다면 쉽게 버리지 못한다.<br />용의주도한 사람이 과감하게 행동해야할 시기가 왔을 때 지켜보기만 하다가 끝내 파멸하는 경우가 있다.<br />이 사람이 시대와 상황에 따라 자신의 기질을 바꾸었다면 틀림없이 파멸을 면할 수 있었을 것이다.\"</p>\n<p data-ke-size=\"size16\">자신답게 산다거나 있는 그대로의 모습으로 산다는 것은 매력적인 일입니다.<br />...<br />시대가 변하면 가치도 변합니다.<br />군주는 야망을 이루기 위해 때로는 천성을 버려야 합니다.<br /><b>자신다움에 집착하지 않는 것</b>, 이것이 군주가 승리를 쟁취하기 위한 기본 자세입니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">변화에 적극 대응하라는 말을 표현하는 여러가지 문장이 있겠지만, 이 문장이 가장 강렬하게 다가오는 것 같다.<br />\"후회 없는 경기\", \"나다운 시합\" 등의 이야기가 많지만,<br />그건 본인의 고유한 경기 스타일을 버리지 못해 생긴 이야기라고 생각한다.<br />위대한 선수가 되려면 \"나다운 시합 보다는 \"이기는 시합\"을 해야한다.<br />이 지점을 명확히 지적해준 것 같다.</p>\n<h4 data-ke-size=\"size20\">사람들은 꿈을 성취할 수 있다는 희망으로 따라온다</h4>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">군주가 부여하는 혹독한 임무를 부하가 거부하지 않는 이유는 군주가 말하는 정의가 곧 그들의 꿈이기 때문입니다.<br />그렇기에 시련을 견디고 함께 위업을 성취하고자 노력하는 것입니다.<br />진실한 권력은 민중이 당신을 꼭 필요한 존재라고 여길 때 나옵니다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">스타트업이 가지고 있어야할 가장 핵심은 결국 \"회사가 가고자하는 목표가 결국 본인에게도 도달하고 싶은 목표\" 이기 때문인 것 같다.</p>\n<p data-ke-size=\"size16\">끝까지 가는 것이 중요하다.<br />그래야 구성원들도 이 리더가 우리의 꿈을 포기하지 않았다는 믿음을 가질 수 있다.<br />리더의 자리를 오래 하다보면 결국 지쳐서 중도 하차하는 경우를 자주 본다.<br />위대한 제국을 만든 리더들은 대부분 원대한 목표를 달성할때까지 끝까지 본인이 주도한다.<br />중도하차하지 않는다.</p>\n<p data-ke-size=\"size16\">하지만, 얼마나 심적으로 힘들었을까를 생각해보면 그 분들을 지지하고 싶다.<br />보통 10년이상은 다들 밤낮없이, 외롭게 어려운 결정들을 해왔을텐데, 그걸 더 하라고 강요할 수 있을까?<br />그래서 정말 본인이 끝까지 계속해서 끌고가는 리더분들은 반쯤 미쳐있어야만 가능한 것 같다.</p>\n<p data-ke-size=\"size16\">그리고 그런 리더들은 구성원들의 꿈을 이뤄줄 수 있지 않았을까 싶다.</p>",
        "contentSnippet": "스즈키 히로키의 \"마키아벨리의 군주론을 읽다\"를 읽고 생각나는 구절들을 정리했다.\n1장\n구두쇠가 되어도 좋다\n\"군주는 인색하다는 평판에 개의치 않아도 된다.\n백성을 지키기 위해서도, 자신을 지키기 위해서도 (중략) 그래야 한다.\n구두쇠가 되는 것은 지배자가 자신의 자리를 보존하기 위한 하나의 악덕이다.\"\n...\n낭비하는 리더는 큰일을 치를 때마다 국민에게 피해를 주고 원망을 받는 반면에, 절약하는 리더는 국민의 지지를 받으면서 큰일을 해냅니다.\n유동성이 풍부한 스타트업 투자 호황기의 대표님들이 생각난다.\n그 시절에 낭비를 했던 리더분들은 대단히 힘든 시기를 보내었고,\n당시에 투자금을 필요한 곳에만 적절하게 사용하신 분들은 지금 혹한기 시절에 오히려 더 성과를 내고 있다.\n인건비의 과도한 투자로 요즘의 시기가 어렵다는 뉴스가 많다.\n실제로 그런 것인지 아닌지는 회사마다 다르다고 본다.\n다만, 소프트웨어 개발자에게 높은 연봉을 주면 그만큼의 성과가 나오는 것이냐에 대해서는 스타트업 전체적으로 평가중인 것 같다.\n최근에 핫하게 공유된 박영록님의 트윗이 있다.\n거래액 100억 이하는 네이버 스마트 스토어가 최선의 선택이다\n우리나라 이커머스들이 적자가 많은 건 경쟁이 과도한 것도 있지만, 소프트웨어 생산성이 너무 낮은 것도 원인 중 하나가 아닐까 싶다\n그리고 작년엔 생활용품 커머스 와이즐리가 회사의 핵심 가치를 최저가 상품으로 보고 개발팀을 모두 없애고 Saas로 커머스를 대신했다는 소식도 있다.\n\n\n에전에는 우리 회사의 본질이 무엇이건간에 소프트웨어 개발자에게 무조건적인 투자를 했다면, 현재는 소프트웨어 개발자가 이 서비스, 이 제품의 \"써야할 곳\" 인지 아닌지 우리 회사의 본질이 무엇이냐 판단하는 시기인것 같다.\n2장\n운을 탓하지 마라\n\"오래도록 자리를 지킨 이탈리아의 제후가 마지막에 나라를 빼앗겼다고 운명을 탓하면 곤란하다.\n그것은 운명이 아니라 태만 탓이다.\"\n...\n손에 넣은 것을 잃었다면 군주인 당신의 태만 탓입니다.\n사랑하는 것을 잃는 것도, 부를 얻거나 소중한 사람과 나누는 행복을 놓치는 것도 군주인 당신의 태만이 문제가 된 것입니다.\n이 내용은 \"스타트업이 망한 것은 모두 스타트업 대표님의 잘못이다\" 와 일맥상통한다고 생각했다.\n다만, 원론적으로 그렇게 생각할 수는 있다고 보지만, 개인적으로는 마음에 들진 않는다.\n군주론은 전체적으로 \"현실의 불확실성\" 을 너무나 배제하고 이야기한다.\n이게 시대 배경에 따른 차이인가 싶었지만, 현재 발생하는 모든 불행한 일이 일이 정말 그 사람의 노력 부족 때문인가? 싶다.\n나는 '운'의 요소를 대단히 믿는 편이다.\n다만, 그래서 모든 것에 대해 운 탓을 한다기 보다는, \"운을 모을 수 있다\" 고 보는 편이다.\n세상에는 많은 운이 적용되고 있고, 이 운은 모을 수 있기 때문에 매일 매일 운을 모으는 행위를 하는 것이 필요하다.\n지나가는 쓰레기를 줍는다거나,\n작은 일에 감사함을 표한다거나,\n주변 동료들에게 친절함을 베푸는 등\n그런 행위가 운을 모으는 것이라고 믿고 그렇게 운을 모아 내가 목표로 하는 곳에 다 쏟아지길 바랄뿐이다.\n대담하게 오르고 성실하게 지켜라\n\"겁에 질리거나 잘못된 조언에 따르거나 해서 결단을 미루면 자신을 지키는 단검을 손에서 놓지 못하게 된다.\"\n...\n처음에 잔혹함을 발휘하지 못하고 망설이다가 필요할 때마다 조금씩 발휘한다면, 원한을 품는 사람이 점점 늘어나 군주는 자신을 지키는 일에 급급해질 수 밖에 없습니다.\nRunway 가 1년 밖에 남지 않은 상황에서 희망퇴직, 구조조정을 한다면 어떤 방식이 가장 효과적일까?\n이 문장은 위 질문에 대한 답변을 한 것 같았다.\n100명의 인원을 30명으로 줄여야만 Runway 가 1년에서 2년으로 늘어날 수 있는 상황에서 1) 한번에 70명과 헤어지는 것이 좋을까, 2) 20~30명씩 천천히 나눠서 헤어지면서 총 70명과 헤어지는 것이 좋을까\n이 책에서는 1) \"한번에 70명과 헤어지는 것\" 을 선택하라고 한다.\n그리고 실제로 그렇게 선택한 실제 사례가 최근에 있었다.\n머스크가 트위터를 인수하고 하루에 전 직원의 50%를 해고한 이야기가 한참 화제였다.\n당시에 트위터에 있던 분의 구조조정 과정을 만화가 공유되기도 했다.\n무모한 안식년\n남은 사람들을 위해, 앞으로를 위해 한번에 잔혹함을 발휘하는게 낫다고 하지만, 실제로 그런 상황이 발생할때 그럴 수 있을까?\n그런 상황이 생기는 것이 가장 두렵다.\n3장\n해결사가 되라\n사장은 직원이 해결할 수 없는 문제를 해결하고, 상사는 부하가 해결할 수 없는 문제를 해결할 수 있어야 합니다.\n...\n다른 사람도 할 수 있는 일을 돕는 것이 아닙니다.\n팀원간의 갈등이나 조직간의 갈등 등 실무자가 해결할 수 없는 문제를 해결하는데 집중해야한다는 내용이라 공감되었다.\n다만, 이건 조직의 현재 상황에 따라 달라질 수 있을 것 같다.\n조직의 실무 역량이 낮을 때는 팀원들이 해결할 수 없는 전문성에 관련된 문제를 풀어야하고,\n조직의 실무 역량이 높을 때는 전문성에 관련된 문제가 아닌 조직대 조직, 사람대 사람의 문제를 풀어야하는 것 같다.\n4장\n불만에 의해 움직이는 것은 다른 불만을 끌어당길 뿐이다\n\"구정권에 대한 불만으로 신군주를 옹립하고 지지한 사람들을 아군으로 삼기보다는 구정권에 만족하고 신군주를 적대한 사람들을 아군으로 삼는 편이 훨씬 편하다.\"\n...\n구정권에 만족하고 소임을 다하고 있던 사람은 결국 신정권에도 적응하게 됩니다.\n그들이 움직이는 동기는 조직을 적절히 운영하는 일에 있기 때문입니다.\n구정권의 장점에 주목해서 생활하고 있던 그들의 '장점을 보는 경향' 이 당신의 신정권에도 적용되는 것입니다.\n경력직을 채용할때 전 회사의 퇴사 사유를 물어보는 것과 동일한 것 같다.\n전 직장에서 불만을 갖고 퇴사한 사람을 데려와서 우리 팀을 만족시키게 하는 것보다는 전 직장에서 불만 없이 만족하면서 다니는 사람을 우리팀으로 데려오는 것이 훨씬 더 성공적인 경력직 채용임을 몇번 경험했다.\n그래서 면접에서도 전 회사의 단점 보다는 장점을 이야기하는 사람이 좋다.\n하지만 대부분은 전 회사의 어떠한 점이 불편했기 때문에 이직하는 것이라서 그러기는 쉽지 않을것 같다.\n5장\n자신답게 패자가 되기보다 자신답지 않게 승자가 되라\n\"인간은 천성에서 좀처럼 벗어나지 못한다.\n또한 한번 성공을 맛본 방식이 있다면 쉽게 버리지 못한다.\n용의주도한 사람이 과감하게 행동해야할 시기가 왔을 때 지켜보기만 하다가 끝내 파멸하는 경우가 있다.\n이 사람이 시대와 상황에 따라 자신의 기질을 바꾸었다면 틀림없이 파멸을 면할 수 있었을 것이다.\"\n자신답게 산다거나 있는 그대로의 모습으로 산다는 것은 매력적인 일입니다.\n...\n시대가 변하면 가치도 변합니다.\n군주는 야망을 이루기 위해 때로는 천성을 버려야 합니다.\n자신다움에 집착하지 않는 것, 이것이 군주가 승리를 쟁취하기 위한 기본 자세입니다.\n변화에 적극 대응하라는 말을 표현하는 여러가지 문장이 있겠지만, 이 문장이 가장 강렬하게 다가오는 것 같다.\n\"후회 없는 경기\", \"나다운 시합\" 등의 이야기가 많지만,\n그건 본인의 고유한 경기 스타일을 버리지 못해 생긴 이야기라고 생각한다.\n위대한 선수가 되려면 \"나다운 시합 보다는 \"이기는 시합\"을 해야한다.\n이 지점을 명확히 지적해준 것 같다.\n사람들은 꿈을 성취할 수 있다는 희망으로 따라온다\n군주가 부여하는 혹독한 임무를 부하가 거부하지 않는 이유는 군주가 말하는 정의가 곧 그들의 꿈이기 때문입니다.\n그렇기에 시련을 견디고 함께 위업을 성취하고자 노력하는 것입니다.\n진실한 권력은 민중이 당신을 꼭 필요한 존재라고 여길 때 나옵니다.\n스타트업이 가지고 있어야할 가장 핵심은 결국 \"회사가 가고자하는 목표가 결국 본인에게도 도달하고 싶은 목표\" 이기 때문인 것 같다.\n끝까지 가는 것이 중요하다.\n그래야 구성원들도 이 리더가 우리의 꿈을 포기하지 않았다는 믿음을 가질 수 있다.\n리더의 자리를 오래 하다보면 결국 지쳐서 중도 하차하는 경우를 자주 본다.\n위대한 제국을 만든 리더들은 대부분 원대한 목표를 달성할때까지 끝까지 본인이 주도한다.\n중도하차하지 않는다.\n하지만, 얼마나 심적으로 힘들었을까를 생각해보면 그 분들을 지지하고 싶다.\n보통 10년이상은 다들 밤낮없이, 외롭게 어려운 결정들을 해왔을텐데, 그걸 더 하라고 강요할 수 있을까?\n그래서 정말 본인이 끝까지 계속해서 끌고가는 리더분들은 반쯤 미쳐있어야만 가능한 것 같다.\n그리고 그런 리더들은 구성원들의 꿈을 이뤄줄 수 있지 않았을까 싶다.",
        "guid": "https://jojoldu.tistory.com/804",
        "categories": [
          "도서",
          "군주론",
          "마키아벨리",
          "스즈키 히로키",
          "스타트업"
        ],
        "isoDate": "2024-09-13T15:24:01.000Z"
      }
    ]
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": [
      {
        "title": "천재의 식단",
        "link": "https://hyeonseok.com/blog/919",
        "pubDate": "Sat, 14 Sep 2024 19:46:32 GMT",
        "content": "<p><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=269341416\"><img src=\"/static/blog/genius-food.png?1\" class=\"major\" alt=\"천재의 식단 표지\" /></a> 객관적인 사실과 작가의 주장이 섞여 있어서 어디까지가 증명된 과학인지 애매한 부분들이 있다. 저자의 주장을 함축하자면 인간이 산업화되면서 바뀐 식습관에 비해 아직 충분히 진화하지 않았기 때문에 이전 생활의 식습관이 건강에 좋다는 것이다. 이런 이해를 바탕으로 본인이 연구하고 조합한 사실과 주장을 아주 설득력 있게 설명해 주고 있고 이를 바탕으로 한 좋은 식습관과 음식을 권유하고 있다.</p>\r\n\r\n<p>이 책을 읽고 아주 비슷한 내용을 주장하는 EBS 다큐 프라임의 <a href=\"https://www.youtube.com/watch?v=2bi4kru8nGc\">현대식단과 구석기 식단의 영양학적 비교</a> 영상을 접했다. 현대 사회의 문제인 여러 성인병을 앓고 있는 사람들에게 고대 시대의 식단을 적용했더니 좋아졌다는 여러 사례들을 보여준다.</p>\r\n\r\n<p>결국 정제된 가공물보다 자연 상태의 음식물을 섭취하는 것이 건강에 좋다는 예로부터 많이 들어왔던 참 지키기 힘든 내용을 여러 사실과 설득력있는 주장으로 다룬 책이라고 하겠다. 빵이나 주스, 치킨이 먹고 싶을때 떠올리면 좋은 책이다.</p>",
        "contentSnippet": "객관적인 사실과 작가의 주장이 섞여 있어서 어디까지가 증명된 과학인지 애매한 부분들이 있다. 저자의 주장을 함축하자면 인간이 산업화되면서 바뀐 식습관에 비해 아직 충분히 진화하지 않았기 때문에 이전 생활의 식습관이 건강에 좋다는 것이다. 이런 이해를 바탕으로 본인이 연구하고 조합한 사실과 주장을 아주 설득력 있게 설명해 주고 있고 이를 바탕으로 한 좋은 식습관과 음식을 권유하고 있다.\n\r\n\r\n이 책을 읽고 아주 비슷한 내용을 주장하는 EBS 다큐 프라임의 현대식단과 구석기 식단의 영양학적 비교 영상을 접했다. 현대 사회의 문제인 여러 성인병을 앓고 있는 사람들에게 고대 시대의 식단을 적용했더니 좋아졌다는 여러 사례들을 보여준다.\n\r\n\r\n결국 정제된 가공물보다 자연 상태의 음식물을 섭취하는 것이 건강에 좋다는 예로부터 많이 들어왔던 참 지키기 힘든 내용을 여러 사실과 설득력있는 주장으로 다룬 책이라고 하겠다. 빵이나 주스, 치킨이 먹고 싶을때 떠올리면 좋은 책이다.",
        "guid": "https://hyeonseok.com/blog/919",
        "isoDate": "2024-09-14T19:46:32.000Z"
      }
    ]
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "FIDO2 클라이언트 SDK 오픈소스 소개",
        "link": "https://techblog.lycorp.co.jp/ko/introducing-fido2-client-sdk-open-source",
        "pubDate": "Fri, 13 Sep 2024 03:00:00 GMT",
        "content": "들어가며\n안녕하세요. Security R&D 팀에서 FIDO2 클라이언트 개발을 담당하고 있는 김도연, 김영현입니다.\n공개 키 암호화를 기반으로 한 FIDO는 패스워드나 SMS O...",
        "contentSnippet": "들어가며\n안녕하세요. Security R&D 팀에서 FIDO2 클라이언트 개발을 담당하고 있는 김도연, 김영현입니다.\n공개 키 암호화를 기반으로 한 FIDO는 패스워드나 SMS O...",
        "guid": "https://techblog.lycorp.co.jp/ko/introducing-fido2-client-sdk-open-source",
        "isoDate": "2024-09-13T03:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "이한",
    "category": "개인",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "분위기",
        "link": "https://www.thestartupbible.com/2024/09/the-vibe.html",
        "pubDate": "Wed, 11 Sep 2024 19:00:00 +0000",
        "content:encodedSnippet": "우린 매주 화요일 오전에 전체 주간 미팅을 하고, 이때 현재 투자 검토하고 있는 회사들에 대한 이야기를 하고 결정하는 투자심의위원회(투심위) 미팅도 같이한다. 다양한 경로를 통해서 알게 된 회사들에 대해서 각자의 의견을 들어보고, 투자할지 말지 결정하는데, 모든 사업이 다르고, 비슷한 사업이라도 창업자가 다르기 때문에, 결정의 결과는 항상 다르다.\n내가 얼마 전에 어떤 회사에 대해서, “비즈니스모델은 괜찮은 것 같은데, 그 창업가의 분위기가 좀 별로였다.”라는 굉장히 애매모호하고, 주관적이고, 비과학적인 발언을 했는데, 참 신기하게도 이 말에 동의하는 분이 몇 명 있었다. 어쨌든, 꼬집어서 그 이유를 정확하게 말할 순 없었지만, 뭔가 느낌이 좋지 않았던 그런 미팅이었다. 결국 우린 이 회사를 더 이상 검토하지 않았는데, 이 전에도 우린 분위기가 이상하거나, 이보다 더 애매모호하게 “느낌이 쎄해서” 그냥 겉으로 보면 괜찮은 사업 같은데 한 번의 미팅 이후에 더 이상 검토를 하지 않은 곳들이 꽤 있었다.\n한 사람과 이야기를 해보면, 이 사람이 지금까지 살아온 인생이 다양한 방식으로 표출된다. 어떤 사람은 이게 인상에서 어느 정도 보이고, 어떤 사람은 말투에서 이분이 어떤 성향의 사람이고 지금까지 어떤 인생을 살아왔는지 대략 느껴진다. 그리고 조금 더 미팅하면서 더 다양한 말을 섞어보면, 옷차림, 인상, 눈빛, 몸짓, 목소리, 단어 하나하나 등을 통해서 이 사람의 에너지와 분위기가 느껴진다. 우린 온갖 종류의 창업가들을 매일 다양하게 많이 만나는데, 더 많은 사람을 만날수록 이분들의 성공 가능성을 예측할 수 있는 정확도가 향상되진 않는다. 이렇게 되면 너무 좋겠지만, 사람은 정말 복잡한 생명체라서 어디로 튈지 모르기 때문에 솔직히 말해서 우리의 판단이 틀리는 경우가 더 많다. 하지만, 그 사람의 분위기가 좋은지 안 좋은진 정확하게 판단할 수 있다고 믿고 있다.\n창업가들과 10분 정도만 이야기해 봐도 이분들이 정말로 본인이 하는 사업에 확신이 있는지, 모든 사람들이 반대해도 계속 이 사업을 할 의지가 있는지, 그리고 정말로 투자를 받고 싶은 의지가 있는지 꽤 정확하게 파악할 수 있다. 위에서 내가 말 한 그런 다양한 외부의 시그널이 이 창업가의 내면의 의지를 꽤 정확하게 반영하는데, 이런 걸 통틀어서 종합한 게 이 글에서 말하고자 하는 그 분위기이다. 내가 전에 우린 창업가들의 거창한 것보단, 매우 작은 것들을 관찰한다고 했는데, 이 작은 것들도 분위기랑 밀접한 연관이 있다.\n나도 투자자들을 만날 땐, 평소보다 이 내면의 에너지에 신경을 많이 쓴다. 우리가 창업가들과 10분만 이야기해도, 분위기를 금방 느낄 수 있듯이, 우리 같은 펀드에 출자하는 LP들도 나랑 10분만 이야기해 보면, 내가 긍정적인 에너지를 분출하는 바이브를 형성하는 사람인지 아닌지 금방 파악 가능할 것이고, 실은 거기서 우리에게 돈을 줄지 안 줄지 바로 결정이 나는 것이다. 참고로 에너지 레벨이 높다는 게, 동작이 과격하고 목소리가 큰 게 아니다. 조용하고 차분해도 긍정적인 분위기는 그대로 상대방에게 다양한 방식을 통해서 전달된다.\n그래서 나는 모든 중요한 일을 할 때, 내가 기분이 좋아야 하고, 내 내면의 분위기가 긍정적이어야 하고, 내 에너지 레벨이 높아야 한다고 생각한다. 가장 좋은 방법은 루틴을 반복하는 것이다. 잘 자고, 잘 운동하고, 잘 먹어야 한다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/09/the-vibe.html#respond",
        "content": "우린 매주 화요일 오전에 전체 주간 미팅을 하고, 이때 현재 투자 검토하고 있는 회사들에 대한 이야기를 하고 결정하는 투자심의위원회(투심위) 미팅도 같이한다. 다양한 경로를 통해서 알게 된 회사들에 대해서 각자의 의견을 들어보고, 투자할지 말지 결정하는데, 모든 사업이 다르고, 비슷한 사업이라도 창업자가 다르기 때문에, 결정의 결과는 항상 다르다. 내가 얼마 전에 어떤 회사에 대해서, “비즈니스모델은 괜찮은 것(...)",
        "contentSnippet": "우린 매주 화요일 오전에 전체 주간 미팅을 하고, 이때 현재 투자 검토하고 있는 회사들에 대한 이야기를 하고 결정하는 투자심의위원회(투심위) 미팅도 같이한다. 다양한 경로를 통해서 알게 된 회사들에 대해서 각자의 의견을 들어보고, 투자할지 말지 결정하는데, 모든 사업이 다르고, 비슷한 사업이라도 창업자가 다르기 때문에, 결정의 결과는 항상 다르다. 내가 얼마 전에 어떤 회사에 대해서, “비즈니스모델은 괜찮은 것(...)",
        "guid": "https://www.thestartupbible.com/?p=9214",
        "categories": [
          "Uncategorized",
          "fundraising",
          "general",
          "people",
          "Strong",
          "vc"
        ],
        "isoDate": "2024-09-11T19:00:00.000Z"
      }
    ]
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": []
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": [
      {
        "creator": "kimchihill",
        "title": "Tomasz Tunguz’s AI Sales Playbook: Insights from the Field",
        "link": "https://kimchihill.com/2024/09/13/scaling-gen-ai-sales-insights-from-the-field/?utm_source=rss&utm_medium=rss&utm_campaign=scaling-gen-ai-sales-insights-from-the-field",
        "pubDate": "Fri, 13 Sep 2024 11:37:42 +0000",
        "content:encodedSnippet": "Tomasz Tunguz’s recent article on selling AI and software struck a chord with me. As AI adoption grows, both buyers and sellers are facing new challenges—especially around scaling and discovery. Below are my thoughts on his key points, based on my live experiences selling the AI chatbot at Sendbird, and how they relate to what we’re seeing in the market. Check out the full article here: https://tomtunguz.com/software-playbook \nSelling AI is being discovered because the technology is new. Buyers don’t know how to use it or how to buy it.\nI fully agree with this and would emphasize it from two perspectives: selling to both enterprises and SMBs comes with discovery challenges. For enterprises, based on various studies and papers I’ve read, many buyers struggle with scaling their generative AI projects after initial adoption. They face issues expanding AI usage beyond a single application and unlocking its full potential while managing risks. For SMBs, there is still a significant technology and discovery gap. Similar to blockchain, the jargon and user interfaces of most generative AI applications remain too technical, and the product—as well as the introduction of the service—needs to be more user-friendly.\nBecause the sales motions are new, we can’t apply the previous playbook to the new sales process. The CEO/founder should hire a sales leader that they fully trust who focuses on ultimate success. The sales process is a part of the product.\nI strongly agree that the sales process is integral to the product experience. Beyond self-serve onboarding, we must also offer an easy pathway for mid-market and enterprise users to engage with our sales or technical teams when needed. Even during the sales demo, we can start by showcasing a prototype chatbot tailored to the prospect’s website. This not only accelerates technical due diligence but also delivers a faster ‘wow’ moment. The sales and product experience should be tightly integrated.\nBetween PLG vs. sales-led, more companies were sales-led. If starting with PLG, the template sells the product. Fight the empty box problem with great concrete templates that demonstrate how to use AI. If selling top-down, most of the conversations today are at the C-suite rather than the mid-market predominantly because the buying process is new.\nI firmly believe in this. Our platform, paired with strong templates, can effectively sell our AI chatbot product. For example, offering a user-friendly graphical interface for prompt templates instead of relying on text-based ones allows prospects to grasp the product’s potential without much technical effort. However, I remain cautious about top-down selling. If our SaaS product or PMF isn’t fully ready, customization efforts could disrupt our PLG motion. I’m not against taking on SI roles, but we must ensure we want to scale with our platform as a center of our growth\nFiguring out how to consistently produce wow moments with non-deterministic software is essential.\nAbsolutely. This is a key focus for our product and marketing teams, and one of our OKRs this quarter is to improve conversion rates by driving consistent wow moments for our users.\nThe room was split on the pricing model: seats, usage, or some hybrid. Ultimately, pricing captures 15-30% of the value the software/AI creates. Developing a strong case for this with buyers will be key because the ROI question from buyers is real, especially as the broader software market feels pressure.\nValue-based pricing is an excellent approach, but we also face perception challenges. Many customers still view AI products through the lens of past investments, like seat-based pricing models and ROI measured by traditional KPIs, such as cost per inbound/outbound call. We need to pioneer new value-based pricing anchors for AI, and while the challenges are significant, I’m ready to face them head-on.\nOnly VCs care about the word agents/agentic: for most enterprises, agents mean a customer support agent. Many teams don’t care about the underlying technology; they seek a solution to their problem.\nAgreed. We’re still refining our ICP. We’re seeing enterprise leads from Heads of Data Science who have developed their own LLMs but now seek alternatives like Sendbird, where they can achieve faster value. At the same time, Heads of CS/CX are looking to solve business challenges but are frustrated by stalled internal projects.\nThe post Tomasz Tunguz’s AI Sales Playbook: Insights from the Field appeared first on Kimchi hill.",
        "dc:creator": "kimchihill",
        "comments": "https://kimchihill.com/2024/09/13/scaling-gen-ai-sales-insights-from-the-field/#respond",
        "content": "<p>Tomasz Tunguz&#8217;s recent article on selling AI and software struck a chord with me. As AI adoption grows, both buyers and sellers are facing new challenges—especially around scaling and discovery. Below are my thoughts on his key points, based on my live experiences selling the AI chatbot at Sendbird, and how they relate to what<a class=\"more-link\" href=\"https://kimchihill.com/2024/09/13/scaling-gen-ai-sales-insights-from-the-field/\">Continue reading <span class=\"screen-reader-text\">\"Tomasz Tunguz&#8217;s AI Sales Playbook: Insights from the Field\"</span></a></p>\nThe post <a href=\"https://kimchihill.com/2024/09/13/scaling-gen-ai-sales-insights-from-the-field/\">Tomasz Tunguz’s AI Sales Playbook: Insights from the Field</a> appeared first on <a href=\"https://kimchihill.com\">Kimchi hill</a>.",
        "contentSnippet": "Tomasz Tunguz’s recent article on selling AI and software struck a chord with me. As AI adoption grows, both buyers and sellers are facing new challenges—especially around scaling and discovery. Below are my thoughts on his key points, based on my live experiences selling the AI chatbot at Sendbird, and how they relate to whatContinue reading \"Tomasz Tunguz’s AI Sales Playbook: Insights from the Field\"\nTomasz Tunguz’s AI Sales Playbook: Insights from the Field appeared first on Kimchi hill.",
        "guid": "https://kimchihill.com/?p=2773",
        "categories": [
          "English essay"
        ],
        "isoDate": "2024-09-13T11:37:42.000Z"
      }
    ]
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "정신과 병원 처음 가면 치료비 얼마일까?",
        "link": "https://blog.toss.im/article/monthly-tosspick-2024-8",
        "pubDate": "Fri, 13 Sep 2024 00:36:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}세계 최고를 기록하는 우리나라 자살률이 지난해보다 10% 더 늘었습니다. 보건복지부에 따르면 올해 1월부터 5월까지 6,375명이 스스로 생을 마감했으며, 이는 지난해 같은 기간보다 10.1% 증가한 수치라고 합니다. 지난 한 해 동안 자살로 생을 마감한 사람은 모두 1만 3,770명.  2020년 이후 가장 높은 수치인데요. 올해는 작년보다 자살 사망자 수가 더 늘어날 것으로 예측됩니다.\n우리나라는 오랜 기간 ‘OECD 자살률 1위'라는 꼬리표를 달고 있습니다. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}21년 동안, 단 두 번을 제외하고 줄곧 자살률 1위를 차지하고 있죠.* 결코 익숙해지거나, 무뎌져서는 안 될 불명예입니다. 자살 원인 중 큰 비중을 차지하는 것은 ‘정신적 문제'입니다.** 건강한 정신과 마음은 ‘내 삶'을 잘 살아내기 위해 필요하지만, 마음의 건강을 돌보는 일은 더 이상 개인의 영역이 아닌 사회와 국가의 과제로 인식되고 있습니다.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*2016년과 2017년에는 리투아니아가 자살률 1위, 우리나라는 2위를 기록했다. \n**정부 분석에 따르면, 2021년 자살 원인 중 정신적 문제가 38.9%로 가장 큰 비중을 차지했다.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}마음이 무너질 때 발생하는 경제적 손실\n세계보건기구(WHO)는 사람들의 불안과 우울을 제때 치료하지 않으면, 국내총생산이 4%가량 감소하는 것으로 추정합니다.* 정신건강 문제는 생산력 저하, 직장생활자의 경우 결근, 병가, 실직, 퇴사 등으로 이어지기 때문인데요. 2009년 고용노동부는 우울증을 겪는 근로자 1인당 결근으로 연간 252만 원, 비효율 근무로 연간 488만 원의 비용 손실이 있다고 발표하기도 했었죠.\n*2023 세계보건기구(WHO)와 국제노동기구(ILO)가 발표한 '직장 노동자들에 대한 정신 건강 관리 지침'\n정신건강 문제를 경제적 관점에서 바라보는 일이 낯설게 느껴질지 모릅니다. 하지만 마음의 건강을 지키지 못하면, 우리의 삶을 지탱하는 가장 기본적인 경제활동도 함께 무너지게 됩니다. 근로소득을 위해 일터로 향하거나, 소비로 작지만 확실한 행복을 챙기는 일상적인 일들이 어렵고 힘들어집니다. 때문에 많은 국가들은 정신건강을 국가 차원의 문제로 인식하고 투자하고 있죠.\n영국은 올해 국민 정신건강 프로그램 예산을 늘려 11억 파운드(약 1조 9,200억 원) 투자합니다. 더 많은 사람들이 치료를 받을 수 있도록 하고, 한 사람이 받는 치료의 횟수를 늘리는 데 집중한다고 해요. 노르웨이의 경우, 국민 정신건강을 증진시키기 위한 프로그램에 투자해 취업률을 높였고, 사회복지비용이 줄면서 투자대비 3.6배의 경제적 이익을 얻기도 했습니다.\n우리나라도 2021년부터 5년간 정신건강 분야에 약 2조 원을 투자하겠다는 계획을 발표했습니다. 우울과 불안을 겪는 사람들을 위한 심리상담 서비스 ‘전국민 마음투자' 지원을 16만 명까지 늘리고, 자살을 시도한 청년은 소득수준과 관계없이 치료비를 지원하고, 24시간 전문상담 운영 등의 노력이 이어지고 있습니다.\n매월 하나의 키워드를 선정해 경제적 시선으로 질문을 던져보는 <월간 토스픽>. 이번 달에는 정신의학과 전문의와 함께 우리 마음을 건강하게 돌보기 위해서 필요한 비용과 방법에 대해 이야기 나눠봅니다.\n\n\n정신과 병원 처음 가면 치료비 얼마일까?\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n🎙️ Interviewee .css-wi4a2c{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;font-weight:bold;}정신과의사 뇌부자들\n\n정신건강의학과 전문의 김지용, 오동훈, 허규형이 ‘진짜 정신과 이야기’를 전하는 유튜브 채널. 정신과에 대한 편견을 낮추고자 2017년 팟캐스트 채널로 활동을 시작, 현재는 유튜브로 무대를 옮겨서 활동 중이다. 정신질환에 대한 정확한 정보를 전달해 오해를 바로 잡는 것부터 드라마나 영화 속 캐릭터 분석, 특정한 행동에 담긴 사람들의 심리까지 다양한 주제를 쉽고 편안하게 풀어낸다.\n\nQ1. 일상을 살다가 어떤 증상이 있을 때 마음 건강을 체크하면 좋을까요? ‘병원에 가야 할 때’의 기준이 있나요?\n오동훈(이하 ‘동훈'): 마음 건강의 이상 징후는 다양하게 나타납니다. 우울증을 예로 들면 기분의 저하를 직접적으로 느끼는 사람도 있지만, 피로감이나 에너지가 달린다는 느낌으로 나타나기도 하죠. 그래서 ‘이 증상이 있을 때'라고 한 가지를 꼽기는 쉽지 않습니다. 다만 정신과 질환을 진단할 때 공통적으로 적용하는 기준은 ‘사회적, 직업적 기능에 이상이 생겼을 때'예요.\n사회적 기능의 이상이란 평소보다 더 사람들을 만나고 싶지 않아서 대인관계를 피한다든지, 신경이 날카로워져서 다른 사람들과 트러블이 늘어난다든지 하는 변화를 말합니다. 직업적 기능의 변화는 업무 효율이 부쩍 떨어지고, 제시간에 출근을 못해서 부정적인 평가를 반복적으로 받는 것이 예시이고요. 이런 문제가 자꾸 생기면 마음에 이상이 생기지 않았나 고민해볼 필요가 있습니다. 가능하다면 믿을 만한 사람에게 직접 털어놓고 의견을 들어보는 것도 방법이에요. 내가 캐치하지 못한 부분을 주변에서는 이미 인지하고 있기도 합니다.\n김지용(이하 ‘지용'): 예전에 이 질문에 대해서 허규형 선생님이 했던 대답이 인상적이어서 저도 자주 쓰는데, ‘가야 되는 건가?’라는 생각이 들 때면 가야 할 때라고 생각합니다. 몸 어딘가가 아프면 스스로 정확한 병명을 몰라도 내과, 이비인후과, 정형외과 등에 자연스럽게 가서 진료를 먼저 받아보게 되죠. 그리고 별 문제 아니란 얘기를 들으면 정말 다행이라고 여기며 홀가분하게 나오고요. 그런데 정신과는 심리적 문턱이 높다 보니까 고민하시다가 초기에 치료할 타이밍을 놓치는 경우가 많습니다.\n허규형(이하 ‘규형'): 세 가지 변화가 있으면 고민이 필요해요..css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;} 수면의 변화, 식욕의 변화, 흥미의 변화입니다. 평소 내 패턴과 비교해서 잠이 너무 안 오거나 너무 많이 잘 때, 입맛이 너무 없거나 너무 많이 먹을 때, 재밌게 하던 것들에서 재미를 느끼지 못할 때는 점검해보시기 바랍니다.\nQ2. 온라인상에 ‘우울증 자가진단 체크리스트' 같은 것이 떠돌아 다니는데, 신뢰할 만한가요?\n규형: 출처가 불분명한 체크리스트만으로 속단하는 것은 조심하셔야 하고요, 검색해서 나오는 것 중 우울증 진단에 사용하는 ‘CES-D, PHQ-9’, ADHD 진단에 쓰는 ‘ASRS’는 저작권 없이 해볼 수 있는 검사 중에 추천할 만한 것들입니다. 보건복지부 국립정신건강센터에서 운영하는 .css-1ly3pih{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey800);background-color:#3fd59936;-webkit-text-decoration:underline!important;text-decoration:underline!important;}국가정신건강정보포털이라는 웹사이트가 있는데요, 거기서 질환별 자가검진을 해보는 것도 추천드려요.\n지용: 마음이 힘들 때 체크리스트를 이용해 스스로를 돌아보는 것은 나쁘지 않다고 생각합니다. 대부분 DSM이라는, 정신과에서 사용하는 진단 편람상 등재된 기준을 바탕으로 만들어져 있어서 어느 정도 스크리닝하는 데 도움이 될 수 있어요.\n그런데 솔직히 정신과 진단은 간단한 일이 아닙니다. 전문가들도 헷갈릴 때가 많고, 오래 진료를 받아온 환자의 진단이 나중에 바뀌는 경우도 있지요. 같은 증상이라도 다양한 질병에서 비롯됐을 수 있기 때문에 테스트 결과는 ‘내가 의사를 한 번 만나봐야 하는 상태구나'라는 정도로 받아들여주시면 좋겠습니다.\nQ3. 마음건강 관리에 있어 우리나라 사람이 유독 힘들어하는 요인이 있는지요?\n동훈: 예전보다 많이 나아졌지만 여전히 정신과적 문제를 ‘의지의 문제'로 취급하는 경향이 남아 있어요. 그래서 우울증 같은 병이 생겨도 내가 나약해서 생긴 문제라고 생각해 병원 찾는 것을 미루고, 진단을 받아도 치부를 들킨 것처럼 부정하거나 치료를 거부하는 모습을 보입니다.\n그런데 다른 병들처럼 우울증도 증상 발생 후 얼마나 빨리 치료받느냐가 예후에 영향을 많이 미쳐요. 미룰수록 치료가 어렵고 회복에 더 긴 시간이 필요한 것도 똑같고요. 우리가 감기에 걸렸을 때 나약해서 생긴 거라고 생각하지 않듯이, 마음의 문제 또한 치료받아야 하는 질환으로 받아들여야 합니다.\n지용: 대부분 정신과 질환에는 수면 문제가 동반되고, 회복을 위해서는 충분한 수면 시간이 필요해요. 위에서 말씀하셨듯 정신질환은 의지의 문제가 아니라 뇌의 문제이기 때문이죠. 뇌과학 연구에 의하면 사람들의 99%는 7~9시간 사이가 적정 수면시간이라고 해요. 7시간 미만은 안 잔 것과 비슷하다는 연구 결과도 있고요. 그런데 우리나라 평균 수면 시간은 꾸준히 세계 최하위권으로, 7시간 미만으로 보고됩니다. 우리나라는 충분히 자는 것을 게으르다고 보는 시각이 있고, 스스로도 죄책감을 가지는 경우가 많아요. 수면 부족은 우리가 간과해온 정신질환 발병의 큰 원인이 될 수 있습니다.\nQ4. 처음 병원에 가면 어떤 방법으로 진료를 받게 되나요?\n동훈: 첫 진료(초진) 시에는 내원 목적과 심리 상태를 파악하기 위해 일정 분량의 설문지를 작성해요. 그러고 나서 응답 내용을 바탕으로 약 40분 정도 상담을 진행하고요. 지금 가진 가장 큰 불편함은 무엇인지, 언제부터 시작되었는지, 거기에 영향을 준 스트레스나 외부적 요인은 어떤게 있었는지 등을 면담을 통해 파악하고 진단을 내리게 됩니다.\n한 번의 면담으로 충분한 정보를 얻기 어렵다면 추가적인 세션을 갖거나, 심리검사를 진행해서 보다 정확하게 진단을 내리기도 해요. 면담 혹은 검사 결과를 바탕으로 치료 계획을 세우고 그에 맞춰서 실제 치료를 진행하게 되는데, 보통 초진 이후의 진료는 20분 내외로 진행되고 병원에 오시는 주기는 치료 경과에 따라 1~4주 사이에서 정합니다.\n지용: 지금까지 말씀드린 절차는 저희가 근무한 병원을 기준으로 한 것이고, 같은 개인 정신과 의원이라고 할지라도 병원마다 진료 방침과 절차가 다를 수 있어요. 저희 셋도 서로 약간씩 다르거든요. 짧게 증상만 물어보고 약물 처방 위주의 3분 진료를 위주로 진행되는 곳도, 충분한 상담시간을 두는 것을 목표로 하는 곳들도 있죠. 꼭 어디가 좋다 쉽게 정의내릴 수 없는 것이, 환자들도 각자 선호하는 스타일이 달라요. 저는 충분히 얘기 나눠보고 싶은데 그걸 불편해하시고 빠른 처방을 바라시는 분들도 꽤 계시거든요. 그래서 가장 좋은 건 방문하고자 하는 병원에 미리 문의를 하는 거예요. 초진 시간은 보통 얼마나 되는지, 기본적으로 진행되는 검사가 있는지, 대강의 진료비가 어떻게 되는지 등에 대해 알아보시면 좋겠습니다.\nQ5. 정신과 진료비나 치료비는 보통 얼마쯤 예상하면 될까요?\n규형: 치료비도 일괄적으로 말씀드리기는 어려워요. 치료 옵션이 다양하고, 면담 시간이나 기법 등에 따라 비용이 세분화되어 있기 때문이죠. 또 기관의 규모가 의원급인지, 대학병원 같은 상급 종합병원인지에 따라서도 환자가 지급해야 하는 부담률에 차등이 있어요.\n그래도 대략적인 선을 말씀드리자면 상담과 약물 처방을 포함해 초진 시에는 4~5만 원, 재진 시에는 2만 원대 정도를 생각하시면 됩니다. 심리 검사의 경우도 어떤 검사들이 포함되었는지 그 구성에 따라 20만 원대부터 40만 원대까지 다양해요.\nQ6. 정신과 치료는 의료보험과 실비보험 적용이 되나요?\n지용: 정신과 치료도 내과, 소아과 등 다른 의료 영역과 마찬가지로 건강보험 적용을 받아요. 뿐만 아니라 다른 과에 비해 환자가 부담해야 하는 비급여 영역이 굉장히 적은 편입니다.\n실비보험 적용되는지도 진료실에서 종종 질문을 받는데요, 가입한 상품마다 보장 범위가 달라서 바로 대답해드리기는 어려웠어요. 예전에는 정신과 치료가 기간이 오래 걸리고 예후가 좋지 않다는 이유로 대부분의 보험 상품에서 배제되는 경향이 강했지만, 금융감독원에서 실손보험 표준약관을 개선한 뒤로는 보장해주는 상품이 예전보다 늘어났습니다.\nQ7. 정신과 진료 기록이 나에게 불리하게 활용될 일, 정말 없을까요?\n동훈: 정신과 진료 기록은 본인 외에 가족을 포함해서 누구도 임의로 열람할 수 없어요. 면담 시 이야기한 것을 기록하는 진료기록부는 내용 또한 타 병원이나 건강보험공단에도 전송되지 않고요. 특정 질병으로 진료를 받았다는 질병 코드는 건강보험에 이력이 남지만 타인이 조회하는 것은 불가능합니다.\n몇몇 분들이 걱정하는 것처럼 입시나 취업 과정에서 불이익을 받을 가능성도 거의 없어요. ‘거의'라고 표현한 것은 국정원, 항공사 파일럿처럼 일부 특수 직군의 경우 본인의 동의를 얻어 정신과 치료 이력을 조회하기 때문입니다.\nQ8. 정신과 약은 의존성이 높아 평생 먹어야 한다는 걱정에 대해 어떻게 생각하시는지요?\n동훈: 정신과 약이 의존성이 높다는 것은 편견입니다. 물론 신경안정제나 수면제와 같은 몇몇 약을 장기간 복용하면 내성과 금단 증상이 나타나는 것이 사실인데, 일정 기간 동안 적정량을 사용한다는 전제하에서는 어렵지 않게 약을 줄여서 끊을 수 있어요. 그리고 그 외의 항우울제나 기분조절제, 항정신병약물 등 주 치료제로 사용되는 대부분의 약들은 의존성이 없습니다.\n그렇다면 왜 이런 편견이 생겼을까요? 우선 치료 기간이 비교적 길기 때문일 겁니다. 보통 초진으로 우울증 환자분이 오면 저는 9개월에서 1년가량 치료 유지가 필요하다고 말씀드려요. 충분히 좋아졌어도 일정 기간 치료를 해야 재발을 막을 수 있기 때문입니다. 그런데 ‘나는 다 좋아진 거 같은데 굳이 약을 계속 먹어야 할까?’ 하며 이 기간을 견디지 못하시는 경우가 많아요. 임의로 약을 중단하면 증상이 재발해 병원을 찾는 일도 생깁니다. 이러한 과정이 반복되면 “몇년간 약을 먹어도 병이 낫지 않는다\"는 인식이 생기게 돼요.\nQ9. 정신과 병원과 심리상담소는 각각 어떤 때 가야 하고, 받는 치료는 어떻게 다른지요?\n규형: 내가 어떤 문제를 가진 건지, 어떤 치료를 받아야 하는 건지 잘 모르는 상황이라면 우선 병원에 내원하는 것을 권유드려요. 정신과 의사들은 정해진 기준에 맞춰 어떤 정신질환인지 진단하도록 훈련받은 사람들이므로 문제를 정확히 파악해내는 데 좀 더 강점이 있다고 생각합니다.\n병원에서는 상담치료 외에 약물치료, 자기장이나 전류를 이용해 뇌를 직접 자극하는 TDCS나 TMS 같은 치료들도 이뤄져요. 이렇게 다양한 치료적 옵션이 존재하기 때문에, 적합한 선택지를 고를 수 있는 여지도 크다는 것을 참고하시면 좋을 것 같습니다.\n동훈: 심리상담소에서는 병원에 비해 더 긴 시간 동안 상담 전문가에게 내 이야기를 할 수 있다는 장점이 있어요. 병원마다 차이가 있겠지만 보통 재진 진료는 20분 내외로 이뤄집니다. 하지만 상담소에서는 한 세션당 40분에서 1시간가량을 할애하기 때문에 여유 있게 풀어놓고 싶었던 이야기를 할 수 있고, 결과적으로 좀 더 깊이 있는 상담이 이루어질 여지가 있다는 것이 이점이라고 생각합니다.\nQ10. 정신과와 심리상담소는 환자의 증상에 따라 서로 추천하기도 한다고 들었습니다. 자주 있는 일인가요?\n동훈: 심리상담소에서도 충분히 좋은 도움을 받을 수 있어요. 특히, 상대적으로 긴 면담을 정기적으로 원하시는 경우에 좋은 선택이 될 수 있습니다. 다만 특정 심리상담소 방문을 추천할 때는 저와 같이 근무했거나 직접 만나뵌 경험이 있어서 인품과 치료 방식을 알고 있을 때만 드려요. 환자분이 가셔서 잘 맞지 않거나 불편한 상황이 생길 수 있기 때문에 신중해질 수밖에 없습니다.\n규형: 저도 상담을 추천드리는 경우가 꽤 자주 있습니다. 기본적으로 긴 상담을 원하시는 분이나 부부 상담, 커플 상담, 가족 상담처럼 여러 사람이 함께 상담해야 하는 경우에 심리상담소를 권유해요. 저 역시 연계된 심리상담소가 따로 있는 것은 아니라서, 근처에 공인된 자격증을 가진 분을 찾아가도록 안내해 드립니다. 예를 들어 한국상담심리학회 공인 상담심리사나 보건복지부 공인 정신건강임상심리사 같은 자격증을 확인하시면 됩니다.\nQ11. 어떤 기준으로 좋은(혹은 나쁜) 정신과 의사나 심리상담사라는 판단을 할 수 있을까요? 치료 잘 받는 방법이 있나요?\n동훈: 심리 치료와 정신과 치료 모두 가능한 한 가까운 곳에서 받는 것이 좋다고 생각합니다. 짧지 않은 기간 동안 치료를 잘 받기 위해서는 회사나 집에서 가까워서 가기 편한 곳을 선택하는 게 중요해요. 근처 병원이나 상담소 중에서 치료자의 이력이나 첫인상을 보고 마음에 드는 곳을 찾았다면, 전화를 걸어 치료 절차에 대해 문의해보세요. 예를 들어, 일반적인 치료 시간, 대략적인 비용, 예약제로 운영되는지 여부 등을 물어볼 수 있습니다. 특히 정신과 병원의 경우, 약 처방 위주로 짧게 진료하는 곳도 있고, 상담을 충분히 하는 곳도 있어요. 그렇다고 해서 짧게 진료한다고 무조건 나쁜 것은 아니고, 상담을 길게 한다고 해서 항상 좋은 것도 아니에요. 각자의 필요와 상황에 맞게 결정하면 됩니다. 치료자가 자신과 잘 맞을지는 직접 경험해 보기 전에는 알 수 없지만, 이러한 과정을 거치면 시행착오를 줄이는 데 도움이 될 수 있습니다.\n규형: 정신과 의사나 상담사와 환자(내담자) 간에도 '케미'가 분명히 존재합니다. 어떤 치료자가 누군가에게는 별로일 수 있지만, 다른 사람에게는 매우 좋은 치료자가 될 수 있고, 그 반대의 경우도 있죠. 만약 치료자가 자신과 맞지 않는 것 같다면 그 부분에 대해 솔직히 이야기하고 서로 맞춰 가는 것을 추천드립니다. 그래도 안 맞으면 치료자를 바꾸는 것도 얼마든지 가능하고요. 처음부터 딱 맞는 사람을 기대하지 않는 것도 좋은 방법입니다.\nQ12. 정신과 병원을 찾아가는 것도, 회당 10만 원 내외인 상담료를 부담하며 심리상담소를 찾아가는 것도 결심이 잘 서지 않는다면 시도해볼 방법이 있을까요?\n동훈: 각 지자체가 운영하는 정신건강복지센터에 일정 회기 동안 무료로 상담을 제공하는 프로그램이 있어요. 병원이나 상담소에 바로 가는 것이 부담스럽다면, 이러한 프로그램을 먼저 이용해보는 것도 좋은 방법입니다. 그 과정에서 만약 보다 전문적인 치료가 필요하다고 판단되면, 병원으로 연계해 줄 수도 있습니다.\n지용: 정신질환이 만성화되면 사회적 혹은 경제적으로 어려운 상황에 처하게 돼서 치료 자체가 힘들어지는 경우가 많습니다. 그래서 무료로 제공되는 치료 프로그램들이 매우 소중하죠. 하지만 무료 프로그램들은 제한된 자원으로 여러 사람에게 도움을 주려다 보니 아직 아쉬운 점들이 있고, 특히 장기간 지속되기가 어려워요. 이러한 한계를 인식하고 무료 프로그램을 본격적인 치료로 이어지는 첫 단계 정도로 생각해주시면 좋겠습니다.\n우리 사회에서는 아직도 정신 치료와 상담의 가치를 낮게 보는 경향이 있는 것 같아요. 예를 들어, \"말 좀 들어주고 누구나 할 수 있는 이야기해주면서 돈을 받느냐\"는 식의 시각이 있죠. 하지만 우리의 정신을 담는 그릇인 뇌는 우리 몸에서 가장 중요한 장기이며, 그 정신을 다루는 상담 치료는 우리의 인생에 매우 중요한 영향을 미칩니다. 자신의 삶을 변화시키기 위해 적절한 투자를 한다는 마인드를 지니면 더 큰 변화를 경험하실 수 있을 거라고 생각합니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 주소은, 이지영 Graphic 조수희",
        "content": "월간 토스픽 08. 마음건강의 값",
        "contentSnippet": "월간 토스픽 08. 마음건강의 값",
        "guid": "https://blog.toss.im/article/monthly-tosspick-2024-8",
        "isoDate": "2024-09-13T00:36:00.000Z"
      },
      {
        "title": "토스, 개발자 컨퍼런스 ‘슬래시24’ 성황리에 마쳐",
        "link": "https://blog.toss.im/article/slash24",
        "pubDate": "Fri, 13 Sep 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}1,500명 참가 선발에 신청자 11,000명 이상 신청 접수… 참가자 95%가 다음 행사 참여에 긍정 답변\n최신 기술 트렌드를 배울 수 있었다는 평가 이어져\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n모바일 금융 서비스 ‘토스’를 운영하는 비바리퍼블리카(이하 ‘토스’)가 개발자 컨퍼런스 ‘슬래시 24(SLASH 24)’를 성황리에 마쳤다고 13일 밝혔다.\n올해로 4회를 맞은 슬래시는 행사 전부터 뜨거운 관심이 이어졌다. 지난 2일까지 접수된 참가 신청에는 11,000명 이상의 지원자가 몰린 가운데, 참가 신청자의 직무 분포는 서버(Server)와 프론트엔드(Frontend)가 각 30%대로 가장 높은 비율을 차지했다. 접수 시작과 함께 공개된 오프닝 필름은 유튜브 조회수 79만 회를 넘어섰다.\n본 행사는 12일(목) 오전 10시부터 오후 4시까지 코엑스 그랜드볼룸에서 열렸다. 토스, 토스뱅크, 토스증권, 토스페이먼츠, 토스플레이스 등 5개 법인에서 45명의 엔지니어가 연사로 참여해 29개의 메인 세션과 3개의 스페셜 세션을 진행했다.\n첫 순서는 토스의 테크놀로지 총괄 이형석 최고기술책임자(CTO)의 발표로 시작됐다. 이형석 CTO는 토스의 성장 과정을 이야기하며 자율과 책임을 강조하는 조직문화, 자기주도적 학습, 동료 간 협력을 통해 어려운 문제들을 해결해왔다는 점을 강조했다.\n메인 세션은 세 개의 장소에서 열렸다. 각 장소마다 강연 시작 전부터 입장을 기다리는 줄이 길게 이어지며 참가자들의 열기를 실감케 했다. ‘리크루팅 존’, ‘럭키드로우 존’ 등 다양한 이벤트 부스 또한 성황리에 운영됐다. 특히 강연을 진행한 연사들과 세션에 대한 질의를 하거나 기술적 고민을 나눌 수 있는 ‘데브챗(DevChat) 존’은 참가자들의 뜨거운 관심을 받았다.\n행사 만족도도 매우 높았다. 참가자 1,500여 명을 대상으로 설문조사를 진행한 결과, 다음에도 슬래시에 참여하겠다는 응답이 약 95%를 기록했다. 또한 “토스의 업무 방식을 좀 더 생생하게 알 수 있어 좋았다\", “최신 기술 트렌드를 알게 됐다\", “오프라인으로 진행된 부분에서 더욱 깊이감이 느껴졌다\" 등 긍정적인 반응이 잇따랐다.\n토스 관계자는 “올해 슬래시는 처음 오프라인 행사로 진행되는 만큼, 현장에서 느낄 수 있는 장점들을 극대화하고자 했다”라며 “앞으로 계속될 슬래시의 여정도 기대해 주시기를 바란다\"라고 전했다.",
        "content": "참가자 95%가 다음 행사 참여에 긍정 답변",
        "contentSnippet": "참가자 95%가 다음 행사 참여에 긍정 답변",
        "guid": "https://blog.toss.im/article/slash24",
        "isoDate": "2024-09-13T00:00:00.000Z"
      },
      {
        "title": "추석 연휴 직후로 예정된 미국 기준금리 발표, 빅 컷 or 베이비 컷?",
        "link": "https://blog.toss.im/article/economic-terms-27-bigcut-babycut",
        "pubDate": "Thu, 12 Sep 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-p4abj2{display:contents;line-height:1.55;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}🔖 이번 주 경제 용어\n빅 컷 or 베이비 컷\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}이번 주 경제 용어는 글로벌 경제를 파악하기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n금리 인하 폭에 따라 구분되는 중앙은행의 통화정책 용어로, 금리를 많이 내리면 빅 컷, 금리를 적게 내리면 베이비 컷이라고 해요. 빅컷은 보통 0.5%p인하, 베이비 컷은 0.25%p인하를 의미해요.\n\n\n코로나19 팬데믹 이후, 전 세계는 치솟는 물가로 인해 혼란에 빠졌습니다. 이때 미국 연방준비제도(연준, Fed: Federal Reserve Board), 유럽 중앙은행(ECB: European Central Bank), 영국 영란은행(BoE: Bank of England), 한국은행(BOK: Bank of Korea) 등 주요국 중앙은행들은 통화정책을 통해 물가를 잡기 위해 분투했지요.\n대표적인 방법으로 주요국 중앙은행들은 물가 상승을 억제하기 위해 기준금리를 올려 시중의 통화량을 줄이는 정책을 펼쳤습니다.\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n⛓️ 물가와 기준금리의 관계\n\n📈 물가가 상승하면 물건 가격이 비싸집니다. \n인플레이션이 일어나는거죠. 사람들의 생활비가 늘어나고 돈을 더 써야 생활이 유지되니 시장이 과열됩니다. 중앙은행은 이러한 경제 과열을 막기 위해 기준금리를 올려요. 금리가 오르면 돈을 빌리는 비용이 비싸지니, 사람들은 돈을 덜 빌리고 덜 쓰게 되겠죠. 이는 소비와 투자를 줄이고 경제 활동을 둔화시켜, 인플레이션을 억제하는 효과가 있습니다.\n📉 물가 상승률이 낮거나 물가가 떨어지면 물건 가격도 내려갑니다. \n사람들은 계속 싸지는 물건 가격을 보면서, ‘나중에 더 싸지겠지' 생각하며 물건을 사지 않고 기다려요. 시장이 비활성화되겠죠. 중앙은행은 사람들이 돈을 더 쓰게 만들고 싶어요. 경제를 활성화시키기 위해 기준금리를 내립니다. 금리가 낮으면 돈을 빌리는 비용이 싸지니, 사람들은 돈을 더 빌리고 더 쓰게 되겠죠. 돈을 더 쉽게 빌릴 수 있게 되니 소비와 투자가 촉진됩니다. 이는 경제 활동을 활발하게 만들고 물가를 적정 수준으로 올리는 효과를 가져와요.\n\n이렇게 금리를 인상하여 물가를 안정시키려는 노력이 계속된 지 2년이 지난 지금, 물가상승률이 목표 수준인 전년 대비 2%까지 내려오자, 중앙은행들은 금리 인하를 고려하기 시작했습니다. 이처럼 금리 정책이 전환되는 시점을 ‘피봇(Pivot: 중요한 전환점)’이라고 부릅니다.\n금리가 세계 경제에 가장 큰 영향을 미치는 요소인 만큼, 미국의 중앙은행인 연방준비제도(연준, Fed)가 기준금리를 얼마나 크게 내릴지에 대한 관심이 집중되고 있어요.\n이와 관련해 경제 기사에서 자주 등장하는 용어가 바로 ‘빅 컷(Big Cut)’과 ‘베이비 컷(Baby Cut)’인데요. 이 두 용어는 중앙은행이 기준금리를 얼마나 크게 인하할지를 나타냅니다.\n여기서 ‘컷(Cut)’은 금리를 내리는 폭을 의미하는데요. 빅컷은 보통 0.5%p 인하를 의미하며, 경제가 심각한 침체에 빠졌을 때 강력한 경기 부양을 위해 사용됩니다. 반면 베이비컷은 0.25%p 인하를 의미하며, 경제 상황이 다소 불확실하지만 급격한 조정은 필요하지 않을 때 선택돼요.\n참고로 2년 전 금리 인상기에는 ‘컷(Cut)’ 대신 ‘스텝(Step)’이라는 용어가 사용되었는데요. 스텝은 컷과 반대로 금리를 인상하는 폭을 말합니다. 보통 0.25%p 인상하는 것이 일반적이며, 이를 ‘베이비 스텝(Baby Step)’이라고 해요. 이보다 인상폭이 좀 더 큰 0.5%p 인상은 ‘빅 스텝(Big Step)’이라고 하고요.\n그러고 보니 베이비 컷과 베이비 스텝, 빅 컷과 빅 스텝이 서로 유사한 구조를 가지고 있네요. 한 판 표로 정리해서 보면 다음과 같습니다.\n\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}'빅컷'이냐 '베이비컷'이냐…9월 원달러 향방은\n(뉴시스 2024.9.2)\n미국의 9월 금리가 기정사실화되는 가운데 '빅 컷(0.5%포인트 인하)'인지, '베이비 컷(0.25%포인트 인하)'인지에 관심이 쏠리고 있다. 제롬 파월 연방준비제도 의장의 연설을 통해 고용 지표를 금리 결정의 주요 근거로 삼을 것을 시사한 만큼 이번주 발표되는 고용보고서가 환율 변곡점이 될 것이란 시각이다.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}미국 경기 경착륙이 확인된다면 '빅컷' 가능성이 높아지며 달러값이 큰 폭으로 떨어질 가능성도 있다. 다만 미 고용시장이 둔화되고 있지만, 우려할 수준은 아닐 것으로 보면서 0.5%포인트 인하 가능성을 낮게 보는 의견도 있다. 시장에서는 고용 데이터가 낙관적으로 나올 것이란 관측이 높아지면서 9월 예상환율로 현 수준인 1330원대에서 움직일 것이란 전망이 힘을 받고 있다.\n2일 서울외환시장에서 오전 10시30분 현재 원·달러는 전거래일 오후 3시 30분 종가(1336.0원) 보다 1.0원 오른 1337.0원에 거래 중이다. (중략)\n\n\n미국 연방준비제도(연준, Fed)가 마침내 금리 인하를 준비하고 있다는 신호를 보냈습니다. 물가상승률이 목표치인 2%에 점점 가까워지고 고용률 둔화가 가시화되면서, 이제 금리를 내릴 시기가 다가온 것이죠.\n기준 금리 인하가 확실시되는 상황에서 핵심은 얼마나 ‘강하게’ 금리를 내릴 것인가입니다. 현재 두 가지 시나리오가 제시되고 있습니다.\n첫 번째는 '빅 컷(Big Cut)'으로, 한 번에 0.5%p를 크게 인하하는 방식입니다. 지난 6일 발표된 8월 미국 비농업 부문의 신규 고용이 전월 대비 14만 2,000명 늘며, 월가 예상치(16만 4,000명)를 밑돌자, 빅 컷이 힘을 받기도 했어요.\n이렇게 되면 경기 부양 효과가 상당히 크겠지만, 그만큼 달러 가치가 크게 하락할 가능성도 있습니다. 달러가 약세를 보이면 미국 수출 기업들에게는 유리하지만, 수입품 가격이 오르면서 물가에 다시 압력이 가해질 수 있겠죠.\n두 번째 시나리오는 '베이비 컷(Baby Cut)'입니다. 0.25%p만 살짝 내리는 방법인데요. 주요국 중앙은행이 금리를 인하할 때 통상 0.25%p씩 수정하는 경우가 많기 때문에, 시장에서는 베이비 컷이 더 높은 확률로 점쳐지고 있는 상황입니다.\n이 경우 경기 부양 효과는 조금 덜하겠지만, 달러가 급격하게 약세로 돌아서지는 않을 가능성이 큽니다. 만약 연준이 이 방식을 선택한다면, 시장 변동성은 최소화하면서 신중하게 금리 조정을 이어가려는 선택이 되겠지요.\n결론적으로 미국 경제의 물가와 고용 상황은 금리 인하를 예고하고 있고, 얼마나 강하게 금리가 내릴지 모두가 주목하고 있는 상황입니다. 오는 9월 17~18일에 열리는 연방공개시장위원회(FOMC) 회의에서 최종 결정이 나올 것으로 예상되는데요. 이때 발표되는 결과에 따라 달러 가치와 원·달러 환율에 큰 영향이 미칠 것으로 예상돼요. 앞으로의 시장 반응과 경제 지표에 더욱더 주목해야 할 시점이라 볼 수 있겠습니다.\n기준금리 발표는 18일 오후 2시, 제롬 파월 연준 의장의 발언은 오후 2시 30분에 진행될 예정인데요. (한국 시간 기준으로는 연휴 다음날인 19일 새벽 3시, 3시 30분) 국내 투자자들 입장에서는 FOMC 직전 3일간 추석 연휴로 인해 포지션을 조정할 기회 없이 미국의 통화정책 결과를 받아들이게 되는 셈입니다.\n이에 전문가들은 현금 비중을 높이고 주식 비중을 축소하는 등 상대적으로 변동성이 작은 종목에 투자할 것을 권유하고 있어요. 특히 원/달러 환율이 하락하면서 단기간 내 환차익을 실현하고자 하는 욕구가 높아진 외국인이 국내 주식시장에 유입되며 지수를 끌어내릴 수 있기 때문에, 외국인 보유 비중이 적은 종목 중심으로 대응하는 것이 필요하다는 의견도 있습니다.\n앞으로의 시장은 경기 향방과 9월에 결정될 금리 인하 폭에 대한 설전이 오고가며 한두 차례 큰 변동성이 나타날 가능성이 있어 보입니다. 기술적 반등이 나올 수도 있으며, 반도체·IT·자동차·기계 등의 업종에서 단기 트레이딩의 움직임이 보일 수 있다는 것도 참고할 수 있겠습니다.\n\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n기준 금리: 다른 금리들에 영향을 주는 기준점이 되는 금리. 중앙은행의 정책금리로, 경제 전반에 걸쳐 금리 수준을 결정하는 중요한 지표로 활용돼요. 경기 과열로 물가가 너무 오르면 기준금리를 올려 시중의 돈을 거둬들이고, 경기 침체로 시중에 돈이 돌지 못하면 기준금리를 낮춰 시중에 유동성을 공급함으로써 경제를 안정적으로 유지하려 합니다.\n양적 완화: 금리 인하를 통한 경기 부양 효과가 한계가 있을 때, 중앙은행이 국채나 금융자산을 대규모로 매입하여 시중에 유동성을 직접 공급하는 것. 중앙은행은 양적 완화를 통해 신용경색을 해소하고, 경제 성장을 촉진하기를 기대해요.\n물가안정 목표제: 중앙은행이 중기적으로 달성해야 할 물가상승률 목표치를 미리 제시하고 이를 유지하려는 제도. 현재 미국 연방준비제도(Fed)와 한국은행의 인플레이션 목표는 통상 2%인데요. 이 목표치에 근접하면 금리 인하나 인상이 고려됩니다.\n\n\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고자료\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "곧 금리 인하가 예상되는데요, 과연 얼마나 내려갈지 모두가 주목하고 있어요.",
        "contentSnippet": "곧 금리 인하가 예상되는데요, 과연 얼마나 내려갈지 모두가 주목하고 있어요.",
        "guid": "https://blog.toss.im/article/economic-terms-27-bigcut-babycut",
        "isoDate": "2024-09-12T02:00:00.000Z"
      },
      {
        "title": "왜 은행마다 이자율이 조금씩 다른 걸까?",
        "link": "https://blog.toss.im/article/everyday-economics-18-bank-interest-rate",
        "pubDate": "Wed, 11 Sep 2024 12:23:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-94on8q{white-space:pre-wrap;color:#c770e4;font-weight:bold;}에디터 G (이하 G):.css-1kxrhf3{white-space:pre-wrap;} 교수님, 얼마 전 대출을 알아보려고 토스앱을 켰는데요. 여러 은행의 대출 상품이 리스트로 쭉 뜨는데, 은행마다 이자율이 조금씩 다르더라고요. 같은 금액의 대출금을 빌리더라도, A 은행에서는 3.5%의 이자율인 반면 B 은행에서는 4.2%의 이자율을 보여주는 거예요. 왜 같은 돈을 빌리더라도 은행마다 이렇게 이자율에 차이가 나는 걸까요?\n.css-12p6bv8{white-space:pre-wrap;color:#15c47e;font-weight:bold;}교수 K (이하 K): 요즘은 은행에 직접 방문하지 않고도 모바일로 간편하게 여러 대출을 비교할 수 있게 되면서, 은행마다 대출 금리가 다르다는 것을 더 잘 파악할 수 있게 된 것 같아요.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}은행마다 이자율이 다른 이유에 대해 가장 먼저 생각해 볼 수 있는 것은, 리스크(risk: 위험) 관점인데요. 각 은행들의 리스크를 관리하는 방법이 다르기 때문입니다.\n은행은 다양한 리스크에 노출되어 있습니다. 예를 들면, 금리, 환율, 주가 변동 등 금융 시장의 변화로 인해 손실이 발생할 수 있는 시장 리스크(market risk)가 있고요. 은행 내부의 프로세스, 시스템 오류, 직원의 실수 등으로 인해 손실이 발생할 수 있는 운영 리스크(operational risk)도 있습니다. 또한 자금을 적시에 조달하지 못해 지불 의무를 이행하지 못하게 되는 유동성 리스크(liquidity risk)도 있고요.\nG: 엄청나게 다양한 리스크가 있군요. 은행 입장에서 가장 중요하게 생각하는 리스크는 어떤 것이려나요?\nK: 앞서 언급한 리스크 이외에 또다른 리스크가 있는데요. 은행이 가장 신경 쓰는 리스크는 바로, .css-1swx3yz{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;font-weight:bold;}신용 리스크(credit risk)입니다.\n신용 리스크는 대출을 받아간 고객이 원리금(원금+이자)을 상환하지 못할 가능성을 의미하는데요. 이는 은행의 재무 건전성과 직결됩니다. 신용 리스크가 현실화되면 은행은 대출 손실을 입게 되어 자산 건전성이 악화되기 때문이죠.\nG: 그렇겠네요. 그래서 은행에서 돈을 빌릴 때, 제가 대출을 잘 갚을 수 있는 사람인지 확인하는 절차가 꽤 복잡한 이유가 있는 거고요. 하지만 빌려준 돈을 못 갚을 가능성은 언제나 있으니, 은행 입장에선 항상 신용 리스크가 존재한다고 볼 수 있겠군요. 그렇다면 이러한 신용 리스크가 발생하는 이유에 대해서도 자세히 설명해주실 수 있을까요?\nK: 그럼요. 저희 시리즈의 취지에 맞게 경제학 관점에서 좀더 자세하게 설명해 드릴게요. 먼저 신용 리스크가 발생하는 원인으로는 ‘정보의 비대칭성(asymmetric information)’과 ‘역선택(adverse selection)’을 들 수 있습니다.\n정보의 비대칭성이란 거래 당사자 간의 정보가 균등하게 공유되지 않는 상황을 의미합니다.\n예를 들어, 은행에 투자 자금 1천만 원을 빌리러 온 김안정 씨와 이모험 씨가 있다고 가정해 볼게요. 김안정 씨는 안정적인 투자를 선호하는 사람이기 때문에, 5% 수익이 확실히 보장되는 사업에 투자를 하려고 합니다. 평소 조금씩 모아둔 비상금도 있어서 1천만 원을 빌려도 나중에 상환하는 데에 큰 문제가 없어요.\n반면, 이모험 씨는 모험적인 투자를 선호합니다. 성공 확률은 매우 낮지만, 만약 성공하게 되면 1,000%의 수익을 얻을 수 있는 사업에 투자하려고 합니다. 그러나 얼마 전에 지인으로부터 이미 많은 돈을 빌린 터라, 이번에 은행에서 1천만 원을 빌리면 나중에 상환할 수 있을지 불확실한 상황입니다.\n만약, 은행이 김안정 씨와 이모험 씨의 상황에 대한 정보를 완전하게 알고 있다면 어떤 결과가 나올까요?\nG: 음… 안정적인 투자를 선호하면서 모아둔 비상금도 있는 김안정 씨에게는 돈을 빌려줄 가능성이 높지만, 모험적인 투자를 선호하면서 지인에게 빌린 돈까지 있는 이모험 씨에게는 돈을 안 빌려줄 가능성이 높을 것 같아요.\nK: 그렇죠. 상식적으로 그들의 상황을 모두 안다면 에디터 님이 말씀하신 결과가 나올 겁니다. 하지만 은행은 김안정 씨와 이모험 씨의 이런 투자 성향과 상환 능력의 차이에 대해 전혀 모를 수도 있어요. 즉, ‘정보의 비대칭성’은 이처럼 돈을 빌리는 사람이 가진 정보와 은행이 가진 정보 사이에 차이가 나는 경우를 말합니다.\n정보의 비대칭성이 존재하는 상황을 좀 더 살펴보도록 하죠. 김안정 씨는 보수적인 투자자이기 때문에 기대 수익률 5%와 비교해서 대출 이자율이 더 높다면, 아마 대출 신청을 하지 않을 것입니다. 반면, 한탕을 노리는 이모험 씨는 높은 이자를 지불하더라도 은행으로부터 적극적으로 돈을 빌리려 할 것이고요.\n결과적으로, 은행은 이모험 씨처럼 위험이 높은 사람들에게만 대출을 해주는 상황이 발생할 수 있습니다. 이와 같이 정보의 비대칭성으로 인해 발생하는 문제를 ‘역선택’이라 해요.\nG: 오, 그렇군요. 당연히 김안정 씨에게 돈을 빌려줄 가능성이 높을 거라 생각했는데, 김안정 씨는 애초에 대출을 신청하지 않을 가능성이 높고 이모험 씨는 대출을 신청할 가능성이 높으니 예상과 반대되는 결과가 펼쳐지는 거네요. 아무래도 현실에서는 은행 입장에서 돈을 빌리고자 하는 사람들의 모든 상황을 파악하기가 어려우니 이런 결과가 나올 수밖에 없겠어요.\nK: 맞습니다. 그래서 은행은 정보의 비대칭성과 역선택 문제에 다양한 방식으로 대응하고 있어요. 대표적인 예가 바로 신용 점수, 재정 상태, 소득 수준 등의 정보를 이용해 고객의 신용도를 평가하는 것인데요. 이 때 은행마다 사용하는 신용 평가 모델이 다를 수 있습니다. 어떤 은행은 외부 신용 평가 기관의 점수를 주로 사용하는 반면, 다른 은행은 자체적으로 개발한 모델을 사용하여 신용 위험을 평가할 수 있죠.\n또한 각 은행마다 신용 평가 시 고려하는 요소가 다를 수 있습니다. 예를 들어, 소득 수준, 부채 비율, 직업 안정성, 금융 거래 내역 등을 평가할 때 각 요소의 비중을 다르게 설정할 수 있는 것이죠. 신용 평가에 사용하는 데이터도 서로 다를 수 있습니다. 대형 은행들은 고객의 기존 거래 내역, 예금 계좌 정보 등을 포함해 더 많은 내부 데이터를 활용할 수 있을 거고요.\n또한 은행마다 리스크를 허용하는 정도도 다르기 때문에, 같은 신용도를 가진 고객이라도 평가 결과가 서로 다르게 나올 수 있답니다. 리스크를 더 잘 수용할 수 있는 은행은 높은 점수를 부여하고, 보수적인 은행은 낮은 점수를 줄 수 있는 것이죠.\nG: 아하, 은행마다 고객의 신용도를 측정하는 방식이 다르기 때문에, 대출 금리와 이자율에도 차이가 발생하게 되는 것이군요.\nK: 맞아요. 이제 시각을 좀더 넓혀서 더 다양한 종류의 금융기관들의 이자율이 서로 다른 이유도 한번 살펴볼까요? 이번 기회에 우리나라에 존재하는 금융기관의 종류를 겸사겸사 정리해볼 겸 말이죠.\n현재 우리나라의 금융기관이 제공하는 금융 서비스는 유형에 따라 아래 표와 같이 구분할 수 있습니다. 은행, 비은행 예금취급기관, 보험회사, 금융투자업자, 기타 금융기관, 그리고 공적금융기관 등으로 나눌 수 있어요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}은행\n\n먼저, 은행은 일반은행과 특수은행으로 나뉩니다. 일반은행은 시중은행, 지방은행, 외국은행 국내지점 등으로 구성되는데요. 주로 예금, 대출, 지급결제 등의 업무를 수행하고 있습니다.\n참고로, 현재 우리나라의 시중은행에는 신한은행, 우리은행, 하나은행, 한국씨티은행, iM뱅크(구 대구은행), KB국민은행, SC제일은행(가나다 순)과 토스뱅크를 비롯한 인터넷전문은행들이 포함된답니다.\n한편, 특수은행은 특정 목적을 위해 설립된 은행이에요. KDB산업은행, 한국수출입은행, IBK기업은행, NH농협은행, Sh수협은행 등이 있습니다.\n\n\n비은행 예금취급기관\n\n말 그대로 은행은 아니지만 예금 업무를 수행하는 기관인데요. 상호저축은행, 신용협동기구, 우체국예금, 종합금융회사 등으로 구성됩니다.\n상호저축은행은 특정한 지역의 서민 및 소규모 기업을 대상으로 대출을 제공하고 있어요. 조합원들을 대상으로 금융 서비스를 제공하며 공동 이익을 추구하는 신용협동기구에는 신협, 새마을금고, 농협, 수협 등이 포함됩니다. 우체국예금은 전국에 분포된 우체국을 통해 민간금융이 취약한 지역을 지원하는 국영 금융을 말하고요.\n\n\n보험회사\n\n크게 생명보험회사, 손해보험회사, 우체국보험, 공제기관 등으로 나뉩니다.\n생명보험회사는 사망, 질병, 노후 등에 대비한 보험과 관련된 업무를 하는 금융회사이고요. 손해보험회사는 화재, 자동차 및 해상사고 등과 같이 재산 및 사고 손실에 대비한 보험을 고유업무로 하는데요. 재보험회사와 보증보험회사도 손해보험회사에 포함됩니다. 우체국보험은 국가기관이 취급하는 국영보험이며, 공제기관의 경우 유사보험을 취급한답니다.\n\n\n금융투자회사\n\n투자매매·중개업자, 집합투자업자, 투자자문·일임업자, 신탁업자 등으로 분류됩니다.\n이 가운데 우리가 잘 알고 있는 증권회사는 투자매매·중개업자에 속하는데요. 주로 증권 및 채권과 관련된 위탁매매, 발행 및 인수 업무를 수행합니다. 은행의 경우 예금을 받아 기업에게 대출을 해주는 반면, 증권회사는 증권을 매개로 기업과 투자자를 직접 연결시킨다는 점에서 차이를 보인답니다.\n\n\n기타 금융기관\n\n금융지주회사, 여신전문금융회사, 벤처캐피탈회사, 증권금융회사, 대부업자 등이 있어요.\n이 중 여신전문금융회사는 고객으로부터 자금을 예치받는 수신(deposit) 기능 없이, 돈을 빌려주는 여신(lending) 업무만 취급하는 금융기관을 말합니다. 여신전문금융회사의 예로는 신용카드회사, 리스회사, 할부금융회사, 신기술사업금융회사 등이 있습니다.\n\n\n공적금융기관\n\n특정한 정책적 목적을 위해 설립된 기관으로, 한국무역보험공사, 한국주택금융공사, 한국자산관리공사, 한국투자공사, 서민금융진흥원 등이 포함돼요.\n\n\nG: 엄청나게 다양한 종류의 금융기관이 있군요! 서로 어떻게 다른지 잘 알아볼 수 있었어요. 글을 저장해 두고 다음에 다시 살펴봐야 겠어요.\nK: 좋습니다. 앞서 설명드린 금융기관들은 자금 조달 방식에 있어 서로 차이를 보이는데요. 이를 통해 각 금융기관들마다 다른 이자율을 제시하는 이유를 설명할 수 있답니다.\n예를 들어, 은행의 경우 주로 개인 및 기업 예금을 통해 자금을 조달해요. 또한, 채권 발행과 중앙은행에서의 차입, 다른 금융기관과의 대출 거래도 활용합니다. 이를 통해 은행은 비교적 안정적이고 대규모의 자금 조달이 가능하기 때문에, 예금 금리가 상대적으로 낮고 대출 금리도 경쟁력 있는 수준으로 제공할 수 있습니다.\n반면, 저축은행은 은행보다 금리를 높게 설정한 개인 예금을 통해 자금을 조달합니다. 또한 고위험 대출에 집중하기 때문에 리스크를 보상하기 위한 목적으로 대출 금리가 상대적으로 높답니다. 이는 저축은행이 은행보다 작은 규모로 운영되며, 고객 기반도 다르기 때문이에요.\n보험사의 경우, 고객이 납부하는 보험료가 주요 자금 조달원입니다. 이 보험료를 주식, 채권, 부동산 등 다양한 투자처에 투자하여 수익을 창출해요.\n생명보험회사는 장기적인 투자 수익을 목표로 하므로, 안정적인 수익을 제공할 수 있는 자산에 주로 투자합니다. 반면, 손해보험회사는 상대적으로 단기 계약이 많고 다양한 리스크를 보장하기 때문에, 주로 유동성이 높은 자산에 투자하는 경향이 강합니다.\n이렇게 확보된 자금을 바탕으로, 보험사들은 보험계약자들이 가입한 보험 상품의 해지환급금을 담보로 대출을 해주는 약관대출뿐만 아니라 신용대출과 부동산담보대출도 취급하고 있습니다.\n보험사의 대출 금리는 중앙은행의 기준 금리와 더불어 계약자의 신용도, 자산운용의 기대 수익률, 시장 금리, 담보 가액 등을 고려하여 결정되는데요. 제2금융권에 속하는 보험사는 일반적으로 제1금융권의 시중은행보다 금리가 높은 편입니다.\n그런데 금융당국이 가계부채 관리를 위해 제1금융권에 대한 규제를 강화하면서 시중은행들이 금리를 지속적으로 올린 결과, 얼마 전 보험사의 금리가 시중은행의 금리보다 낮아지는 금리 역전 현상이 발생하기도 했습니다.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}* 출처: .css-114ityv{white-space:pre-wrap;cursor:pointer;-webkit-text-decoration:underline!important;text-decoration:underline!important;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}[단독] 초유의 주담대 ‘금리 역전’… 보험사, 은행보다 낮아졌다 (한국경제) \n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n🏦 제1금융권, 제2금융권 금리도 차이가 꽤 나는데 왜 그런가요?\n\n제1금융권은 은행(일반은행, 특수은행)을 말합니다. 제2금융권은 앞에서 살펴본 금융기관들 중 은행을 제외한 금융기관들을 통칭하는 용어라고 생각하시면 됩니다.\n제2금융권 대출은, 대출 자격이 까다로운 제1금융권에서 대출을 받지 못하거나 신용등급이 낮은 고객을 대상으로 하는 경우가 상대적으로 많아요. 그래서 신용 리스크가 높아지고요. 이를 보상하기 위해 제1금융권보다 더 높은 금리를 부과하는 경향이 강하답니다.\n또한 제2금융권은 제1금융권에 비해 예금 유치가 적고 자금 시장에서의 차입 비용이 더 높기 때문에, 대출 금리도 제1금융권보다 올라가게 되는 것이지요.\n\n한편 증권사는 중개 기능을 주업무로 수행하고 있기 때문에, 자금 조달 방식이 은행이나 타금융기관과 차이를 보입니다.\n증권사의 자금조달원은 크게 두 가지인데요. 첫 번째는 투자자들의 증권 계좌에 들어있는 예수금(예수부채)이고요. 두 번째는 주가연계증권(ELS)과 같은 파생결합증권, 회사채, 기업어음(CP), 환매조건부채권(RP), 발행어음 등을 통해 자금을 차입하는 것(차입부채)입니다.\n증권사에서도 돈을 빌려주는데요. 고객이 주식을 사기 위해 필요한 자금이 부족할 때, 증권 계좌에 있는 주식을 담보로 빌려줍니다. 이를 신용거래 대출(마진 론)이라고 불러요. 증권사는 시장 금리, 고객의 신용도, 담보로 제공된 주식의 가치 변동성 등을 고려하여 대출 금리를 설정하게 됩니다.\nG: 은행, 저축은행, 보험회사, 증권회사… 모두 각자가 가지고 있는 고유한 비즈니스 모델에 따라 서로 다른 방법으로 자금을 조달하고 있군요. 자금 조달 비용이 서로 달라지기 때문에 각 금융기관들마다 이자율이 달라지는 거겠네요.\nK: 정확히 이해하셨어요. 각 금융기관에 대해 하나하나 설명드려서 조금 어려우셨을 수 있는데요. 결국 금융기관들마다 이자율이 달라지는 이유는 각자의 비즈니스 모델과 자금 조달 방법, 그리고 그 비용이 서로 다르기 때문입니다. 이 점을 이해하시면 금리가 차이 나는 이유도 금방 이해하실 수 있을 거예요.\nG: 각 금융기관의 이자율, 금리에 영향을 미치는 또다른 요인도 있을까요?\nK: 이외에도 특정 지역이나 고객층을 대상으로 한 경쟁 상황이 이자율에 영향을 미치기도 하고요. 운영 비용이 높은 금융기관은 이를 보상하기 위해 이자율을 높게 설정할 수도 있습니다. 또한 정부의 규제와 중앙은행의 통화 정책에 의해서도 이자율은 영향을 받기 마련이고요.\n오늘은 은행들마다 왜 이자율에 차이가 나는지와 더불어, 우리나라에 존재하는 금융기관들의 종류와 각 금융기관별로 이자율이 다른 이유까지 살펴 봤습니다. 혹시 앞으로 금융기관과 금리에 대한 뉴스를 보게 된다면, 오늘 내용을 한번 떠올려보면 좋을 것 같네요.\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고자료\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이제현",
        "content": "각 은행이 리스크(위험)를 관리하는 방법이 다르기 때문이에요.",
        "contentSnippet": "각 은행이 리스크(위험)를 관리하는 방법이 다르기 때문이에요.",
        "guid": "https://blog.toss.im/article/everyday-economics-18-bank-interest-rate",
        "isoDate": "2024-09-11T12:23:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]