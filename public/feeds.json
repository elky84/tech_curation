[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "Indexing code at scale with Glean",
        "link": "https://engineering.fb.com/2024/12/19/developer-tools/glean-open-source-code-indexing/",
        "pubDate": "Thu, 19 Dec 2024 14:00:29 +0000",
        "content:encodedSnippet": "We’re sharing details about Glean, Meta’s open source system for collecting, deriving, and working with facts about source code.\nIn this blog post we’ll talk about why a system like Glean is important, explain the rationale for Glean’s design, and run through some of the ways we’re using Glean to supercharge our developer tooling at Meta.\nIn August 2021 we open-sourced our code indexing system Glean. Glean collects information about source code and provides it to developer tools through an efficient and flexible query language. We use Glean widely within Meta to power a range of developer tools including code browsing, code search, and documentation generation.\nCode Indexing\nMany tools that developers use rely on information extracted from the code they’re working on. For example:\nCode navigation (“Go to definition”) in an IDE or a code browser;\nCode search;\nAutomatically-generated documentation;\nCode analysis tools, such as dead code detection or linting.\nThe job of collecting information from code is often called code indexing. A code indexing system’s job is to efficiently answer the questions your tools need to ask, such as, “Where is the definition of MyClass?” or “Which functions are defined in myfile.cpp?”\nAn IDE will typically do indexing as needed, when you load a new file or project for example. But the larger your codebase, the more important it becomes to do code indexing ahead of time. For large projects it becomes impractical to have the IDE process all the code of your project at startup and, depending on what language you’re using, that point may come earlier or later: C++ in particular is problematic due to the long compile times.\nMoreover, with a larger codebase and many developers working on it, it makes sense to have a shared centralized indexing system so that we don’t repeat the work of indexing on every developer’s machine. And as the data produced by indexing can become large, we want to make it available over the network through a query interface rather than having to download it.\nThis leads to an architecture like this:\nIn practice the real architecture is highly distributed:\nIndexing can be heavily parallelized and we may have many indexing jobs running concurrently;\nThe query service will be widely distributed to support load from many clients that are also distributed;\nThe databases will be replicated across the query service machines and also backed up centrally.\nWe’ve found that having a centralized indexing infrastructure enables a wide range of powerful developer tools. We’ll talk about some of the ways we’ve deployed Glean shortly, but first we’ll dive into the rationale for Glean’s design.\nHow is Glean different?\nCode indexing systems have been around for a while. For example, there’s a well-established format called LSIF used by IDEs that caches information about code navigation.\nWhen we designed Glean we wanted a system that wasn’t tied either to particular programming languages or to any particular use case. While we had some use cases in mind that we wanted to support—primarily code navigation of course—we didn’t want to design the system around one use case, in the hope that a more general system would support emerging requirements further into the future.\nTherefore:\nGlean doesn’t decide for you what data you can store. Indeed, most languages that Glean indexes have their own data schema and Glean can store arbitrary non-programming-language data too. The data is ultimately stored using RocksDB, providing good scalability and efficient retrieval.\nGlean’s query language is very general. It’s a declarative logic-based query language that we call Angle (“Angle” is an anagram of “Glean”, and means “to fish”). Angle supports deriving information automatically, either on-the-fly at query time or ahead of time; this is a powerful mechanism that enables Glean to abstract over language-specific data and provide a language-neutral view of the data.\nStoring arbitrary language-specific data can be very powerful. For example, in C++ we use the detailed data to detect dead code such as unused #include or using statements. The latter in particular is rather tricky to do correctly and requires the data to include some C++-specific details, such as which using statement is used to resolve each symbol reference.\nOn the other hand, clients often don’t want the full language-specific data. They want to work at a higher level of abstraction. Imagine asking questions like, “Give me the names and locations of all the declarations in this file”, which should work for any language, and which you could use to implement a code outline feature in a code browser. Glean can provide this language-neutral view of the data by defining an abstraction layer in the schema itself – the mechanism is similar to SQL views if you’re familiar with those. This means that we don’t have to compromise between having detailed language-specific data or a lowest-common-denominator language-neutral view; we can have both.\nThis generality has allowed Glean to extend to a number of use cases beyond what we originally envisaged. We’ll cover some of those later in this post.\nA taste of Angle\nGlean has a unified language, Angle, for specifying both schemas and queries. As mentioned above, each language that we index has its own schema. To give you a flavor of this, here’s a fragment of the schema for C++ function declarations:\n\nDefining a schema for Glean is just like writing a set of type definitions. The braces surround a record definition, with a set of fields and their types. \nA FunctionDeclaration is a predicate (roughly equivalent to a table in SQL). \nThe instances of a predicate are called facts (roughly equivalent to rows in SQL). \nA predicate is a thing that you can query, and a query returns facts. \nTo query efficiently you specify a prefix of the fields. So, for example, we can retrieve a particular FunctionDeclaration efficiently if we know its name.\nLet’s write a query to find the function folly::parseJson:\n\nWithout going into all the details, at a high level this query specifies that we want to find FunctionDeclaration facts that have a particular name and namespace. Glean can return results for this query in about a millisecond.\nAngle supports more complex queries too. For example, to find all classes that inherit from a class called exception and have a method called what that overrides a method in a base class:\n\nThis query returns the first results in a few milliseconds, and because there might be a lot of results we can fetch the results incrementally from the query server.\nIncremental indexing\nAn important innovation in Glean is the ability to index incrementally. As the codebase grows, and the rate of change of the codebase increases (a monorepo suffers from both of these problems) we find that we can’t provide up-to-date information about the latest code because indexing the entire repository can take a long time. The index is perpetually out of date, perhaps by many hours.\nThe solution to this scaling problem is to process just the changes. In terms of computer science big-O notation, we want the cost of indexing to be O(changes) rather than O(repository).\nBut actually achieving this is not as straightforward as it might sound.\nWe don’t want to destructively modify the original data, because we would like to be able to provide data at multiple revisions of the repository, and to do that without storing multiple full-sized copies of the data. So we would like to store the changes in such a way that we can view the whole index at both revisions simultaneously.\nEven if we figure out a way to represent the changes, in practice it isn’t possible to achieve O(changes) for many programming languages. For example, in C++ if a header file is modified, we have to reprocess every source file that depends on it (directly or indirectly). We call this the fanout. So in practice the best we can do is O(fanout).\nGlean solves the first problem with an ingenious method of stacking immutable databases on top of each other. A stack of databases behaves just like a single database from the client’s perspective, but each layer in the stack can non-destructively add information to, or hide information from, the layers below. \n\nThe full details are beyond the scope of this post, for more on how incrementality works see: Incremental indexing with Glean.\nFinding the fanout of a set of changes is different for each language.  Interestingly the fanout can often be obtained using Glean queries: for example for C++, the fanout is calculated by finding all the files that #include one of the changed files, and then repeating that query until there are no more files to find.\nHow we use Glean at Meta\nCode navigation\nCode navigation at scale, on large monorepos containing millions of lines in diverse programming languages, is a challenging problem. But what makes it different from the code navigation support available in modern IDEs, other than scale? In our experience, code indexing a la Glean offers the following advantages over IDEs:\nInstantly available: Just open the code browser web app (our internal tool uses Monaco) and navigate without waiting for the IDE, build system, and LSP server to initialize\nMore widely available: You can integrate code navigation in pretty much any app that shows code! One particularly useful integration is in your code review tool (ours is called Phabricator), but more on that later.\nFull repo visibility: Glean allows you to, for example, find all the references to a function, not just the ones visible to the IDE. This is particularly useful for finding dead code, or finding clients of an API that you want to change.\nSymbol search for all the languages across the whole repository.\nCross language navigation: A common situation that comes up is a remote procedure call (RPC). When browsing the code you might want to jump to the service definition or, indeed, to the service implementation itself. Another case is languages with a foreign function interface (FFI), where you would like to browse from an FFI call to the corresponding definition in the target language.\nOur architecture for code navigation is based on Glass, a symbol server that abstracts all the complexities of Glean by implementing the usual code navigation logic in a simple but powerful API. The code browser needs only a single Glass API call, documentSymbols(repo,path,revision), to obtain a list of all the definitions and references in a source file, including source and target spans. The list of definitions is used to render an outline of the file, and the list of references to render underlines that can be hovered over or clicked to navigate. Finally, other code browser features like Find References or Call Hierarchy are also driven by API calls to Glass. \n\nThe code for Glass is also open-source, you can find it in glean/glass on GitHub.\nSpeeding up the IDE\nUsing an IDE such as VS Code on a large project, or a project with a large set of dependencies, or in a large monorepo tends to lead to a degraded experience as the IDE isn’t able to analyze all the code that you might want to explore. At Meta we’re using Glean to plug this gap for C++ developers: Because Glean has already analyzed the whole repository, C++ developers have access to basic functionality such as go-to-definition, find-references, and doc comment hovercards for the whole repository immediately on startup. As the IDE loads the files the developer is working on, the C++ language service seamlessly blends the Glean-provided data with that provided by the native clangd backend.\nOur target was C++ developers initially because that group typically has the worst IDE experience due to the long compile times, but the approach is not specific to C++ and we imagine other languages following the same path in the future.\nDocumentation generation\nThe data we store in Glean includes enough information to reconstruct the full details of an API: classes, methods, type signatures, inheritance, and so on. Glean also collects documentation from the source code when it uses the standard convention for the language, e.g., in C++ the convention is /// comment or /** comment */. With API data and documentation strings in Glean we can produce automatically-generated documentation on demand. \nHere’s an example page for the folly::Singleton type:\n\nThe data for these pages is produced by Glass and rendered by a client-side UI. The documentation is fully hyperlinked so the user can navigate around all the APIs throughout the repository easily. Meta engineers get consistent code documentation integrations across all the programming languages supported by Glean.\nSymbol IDs\nGlass assigns every symbol a symbol ID, a unique string that identifies the symbol. For example, the symbol ID for folly::Singleton would be something like, REPOSITORY/cpp/folly/Singleton. The symbol ID can be used to link directly to the documentation page for the symbol, so there’s a URL for every symbol that doesn’t change even if the symbol’s definition moves around. \nWe can use the symbol ID to request information about a symbol from Glass, for example to find all the references to the symbol throughout the repository. All of this works for every language, although the exact format for a symbol ID varies per language.\nAnalyzing code changes\nGlean indexing runs on diffs (think, “pull requests”) to extract a mechanical summary of the changeset that we call a diff sketch. For example, a diff might introduce a new class, remove a method, add a field to a type, introduce a new call to a function, and so on. The diff sketch lists all of these changes in a machine-readable form.\nDiff sketches are used to drive a simple static analysis that can identify potential issues that might require further review. They can also be used to drive non-trivial lint rules, rich notifications, and semantic search over commits. One example of the latter is connecting a production stack trace to recent commits that modified the affected function(s), to help root-cause performance issues or new failures.\nIndexing diffs also powers code navigation in our code review tools, giving code reviewers access to accurate go-to-definition on the code changes being reviewed, along with other code insights such as type-on-hover and documentation. This is a powerful lift to the code review process, making it easier for reviewers to understand the changes and provide valuable review feedback. At Meta this is enabled for a variety of different languages, including C++, Python, PHP, Javascript, Rust, Erlang, Thrift, and even Haskell.\nMore applications for Glean\nAside from the primary applications described above, Glean is also used to\nAnalyse build dependency graphs.\nDetect and remove dead code.\nTrack the progress of API migrations.\nMeasure various metrics that contribute to code complexity.\nTrack test coverage and select tests to run.\nAutomate data removal.\nRetrieval Augmented Generation (RAG) in AI coding assistants\nFurthermore, there are an ever-growing number of ad-hoc queries made by various people and systems to solve a variety of problems. Having a system like Glean means you can ask questions about your code: we don’t know all the questions we might want to ask, nor do we know all the data we might want to store, so Glean deliberately aims to be as general as possible on both of these fronts.\nTry Glean today\nVisit the Glean site for more details, technical documentation, and information on how to get started.\nThe post Indexing code at scale with Glean appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We’re sharing details about Glean, Meta’s open source system for collecting, deriving, and working with facts about source code. In this blog post we’ll talk about why a system like Glean is important, explain the rationale for Glean’s design, and run through some of the ways we’re using Glean to supercharge our developer tooling at [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/12/19/developer-tools/glean-open-source-code-indexing/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/12/19/developer-tools/glean-open-source-code-indexing/\">Indexing code at scale with Glean</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We’re sharing details about Glean, Meta’s open source system for collecting, deriving, and working with facts about source code. In this blog post we’ll talk about why a system like Glean is important, explain the rationale for Glean’s design, and run through some of the ways we’re using Glean to supercharge our developer tooling at [...]\nRead More...\nThe post Indexing code at scale with Glean appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22095",
        "categories": [
          "DevInfra",
          "Open Source"
        ],
        "isoDate": "2024-12-19T14:00:29.000Z"
      },
      {
        "creator": "",
        "title": "Translating Java to Kotlin at Scale",
        "link": "https://engineering.fb.com/2024/12/18/android/translating-java-to-kotlin-at-scale/",
        "pubDate": "Wed, 18 Dec 2024 17:00:18 +0000",
        "content:encodedSnippet": "Meta has been on a years-long undertaking to translate our entire Android codebase from Java to Kotlin.\nToday, despite having one of the largest Android codebases in the world, we’re well past the halfway point and still going.\nWe’re sharing some of the tradeoffs we’ve made to support automating our transition to Kotlin, seemingly simple transformations that are surprisingly tricky, and how we’re collaborating with other companies to capture hundreds more corner cases.\nAndroid development at Meta has been Kotlin-first since 2020, and developers have been saying they prefer Kotlin as a language for even longer.\nBut, adoption doesn’t necessarily entail translation. We could simply decide to write all new code in Kotlin and leave our existing Java code as is, just as many other companies have. Or we could take it a little further and translate just the most important files. Instead, we decided that the only way to leverage the full value of Kotlin was to go all in on conversion, even if it meant building our own infrastructure to automate translation at scale. So, a few years ago, engineers at Meta decided to take roughly ten million lines of perfectly good Java code and rewrite them in Kotlin.\nOf course, we had to solve problems beyond translation, such as slow build speeds and insufficient linters. To learn more about Meta’s broader adoption effort, see Omer Strulovich’s 2022 blog post on our migration from Java to Kotlin or Lisa Watkin’s talk about Kotlin adoption at Instagram.\n\nHow much translation is enough?\nTo maximize our gains in developer productivity and null safety, we’re aiming to translate virtually all of our actively developed code, plus any code that’s central in the dependency graph. Not surprisingly, that’s most of our code, which adds up to tens of millions of lines, including some of the most complex files.\nIt’s pretty intuitive that if we want to maximize productivity gains, we should translate our actively developed code. It’s a little less obvious why translating beyond that provides incremental null-safety benefits. The short answer is that any remaining Java code can be an agent of nullability chaos, especially if it’s not null safe and even more so if it’s central to the dependency graph. (For a more detailed explanation, see the section below on null safety.)\nWe also want to minimize the drawbacks of a mixed codebase. As long as we have substantial amounts of Java, we need to continue supporting parallel tool chains. There’s also the much-lamented issue of slower build speeds: Compiling Kotlin is slower than compiling Java, but compiling both together is the slowest of all. \nHow did we get here?\nLike most folks in the industry, we started migrating incrementally by repeatedly clicking a button in the Intellij IDE. This button would trigger Intellij’s translation tool, commonly known as J2K. It quickly became clear that this approach wasn’t going to scale for a codebase of our size: We would have to click that button—and then wait the couple of minutes it takes to run—almost 100,000 times to translate our Android codebase. \nWith this in mind, we set out to automate the conversion process and minimize interference with our developers’ daily work. The result was a tool we call the Kotlinator that we built around J2K. It’s now comprised of six phases:\n“Deep” build: Building the code we’re about to translate helps the IDE resolve all the symbols, especially when third-party dependencies or generated code are involved.\nPreprocessing: This phase is built on top of our custom tool, Editus. It contains about 50 steps for nullability, J2K workarounds, changes to support our custom DI framework, and more.\nHeadless J2K: The J2K we know and love, but server-friendly!\nPostprocessing: This phase is similar in architecture to our preprocessing. It consists of about 150 steps for Android-specific changes, as well as more nullability changes, and tweaks to make the resulting Kotlin more idiomatic.\nLinters: Running our linters with autofixes allows us to implement perennial fixes in a way that benefits both conversion diffs and regular diffs going forward.\nBuild error-based fixes: Finally, the Kotlinator makes even more fixes based on build errors. After a failed build of the just-translated code, we parse the errors and apply further fixes (e.g., adding a missing import or inserting a !!).\nWe’ll dive into more detail on the most interesting phases below.\nGoing headless with J2K\nThe first step was creating a headless version of J2K that could run on a remote machine—not easy, given how tightly coupled J2K and the rest of the Intellij IDE are. We considered a few approaches, including running J2K using a setup similar to Intellij’s testing environment, but after talking to JetBrains’ J2K expert, Ilya Kirillov, we eventually settled on something more like a headless inspection. To implement this approach, we created an Intellij plugin that includes a class extending ApplicationStarter and calling directly into the JavaToKotlinConverter class that’s also referenced by the IDE’s conversion button.\nOn top of not blocking developers’ local IDEs, the headless approach allowed us to translate multiple files at once, and it unblocked all sorts of helpful but time-consuming steps, like the “build and fix errors” process detailed below. Overall conversion time grew longer (a typical remote conversion now takes about 30 minutes to run), but time spent by the developers decreased substantially.\nOf course, going headless presents another conundrum: If developers aren’t clicking the button themselves, who decides what to translate, and how does it get reviewed and shipped? The answer turned out to be pretty easy: Meta has an internal system that allows developers to set up what is essentially a cron job that produces a daily batch of diffs (our version of pull requests) based on user-defined selection criteria. This system also helps choose relevant reviewers, ensures that tests and other validations pass, and ships the diff once it’s approved by a human. We also offer a web UI for developers to trigger a remote conversion of a specific file or module; behind the scenes, it runs the same process as the cron job.\nAs for choosing what and when to translate, we don’t enforce any particular order beyond prioritizing actively developed files. At this point, the Kotlinator is sophisticated enough to handle most compatibility changes required in external files (for example, changing Kotlin dependents’ references of foo.getName() to foo.name), so there’s no need to order our translations based on the dependency graph. \nAdding custom pre- and post-conversion steps\nDue to the size of our codebase and the custom frameworks we use, the vast majority of conversion diffs produced by the vanilla J2K would not build. To address this problem, we added two custom phases to our conversion process, preprocessing and postprocessing. Both phases contain dozens of steps that take in the file being translated, analyze it (and sometimes its dependencies and dependents, too), and perform a Java->Java or Kotlin->Kotlin transformation if needed. A few of our postprocessing transformations have been open-sourced.\nThese custom translation steps are built on top of an internal metaprogramming tool that leverages Jetbrains’ PSI libraries for both Java and Kotlin. Unlike most metaprogramming tools, it is very much not a compiler plugin, so it can analyze broken code across both languages, and does so very quickly. This is especially helpful for postprocessing because it’s often running on code with compilation errors, doing analysis that requires type information. Some postprocessing steps that deal with dependents may need to resolve symbols across several thousand unbuildable Java and Kotlin files. For example, one of our postprocessing steps helps translate interfaces by examining its Kotlin implementers and updating overridden getter functions to instead be overridden properties, like in the example below.\ninterface JustConverted {\r\n  val name: String // I used to be a method called `getName`\r\n}\r\n\nclass ConvertedAWhileAgo : JustConverted {\r\n  override fun getName(): String = \"JustConvertedImpl\"\r\n}\nclass ConvertedAWhileAgo : JustConverted {\r\n  override val name: String = \"JustConvertedImpl\"\r\n}\nThe downside to this tool’s speed and flexibility is that it can’t always provide answers about type information, especially when symbols are defined in third-party libraries. In those cases, it bails quickly and obviously, so we don’t execute a transformation with false confidence. The resulting Kotlin code might not build, but the appropriate fix is usually pretty obvious to a human (if a little tedious).\nWe originally added these custom phases to reduce developer effort, but over time we also leveraged them to reduce developer unreliability. Contrary to popular belief, we’ve found it’s often safer to leave the most delicate transformations to bots. There are certain fixes we’ve automated as part of postprocessing, even though they aren’t strictly necessary, because we want to minimize the temptation for human (i.e., error-prone) intervention. One example is condensing long chains of null checks: The resulting Kotlin code isn’t more correct, but it’s less susceptible to a well-meaning developer accidentally dropping a negation. \nLeveraging build errors\nIn the course of doing our own conversions, we noticed that we spent a lot of time at the end repeatedly building and fixing our code based on the compiler’s error messages. In theory, we could fix many of these problems in our custom postprocessing, but doing so would require us to reimplement a lot of complex logic that’s baked into the Kotlin compiler. \nInstead, we added a new, final step in the Kotlinator that leverages the compiler’s error messages the same way a human would. Like postprocessing, these fixes are performed with a metaprogramming that can analyze unbuildable code.\nThe limitations of custom tooling\nBetween the preprocessing, postprocessing, and post-build phases, the Kotlinator contains well over 200 custom steps. Unfortunately, some conversion issues simply can’t be solved by adding even more steps.\nOriginally we treated J2K as a black box—even though it was open sourced—because its code was complex and not actively developed; diving in and submitting PRs didn’t seem worth the effort. That changed early in 2024, however, when JetBrains began work to make J2K compatible with the new Kotlin compiler, K2. We took the opportunity to work with JetBrains to improve J2K and address problems that had been plaguing us for years, such as disappearing override keywords.\nCollaborating with JetBrains also gave us the opportunity to insert hooks into J2K that would allow clients like Meta to run their own custom steps directly in the IDE before and after conversion. This may sound strange, given the number of custom processing steps we’ve already written, but there are a couple of major benefits:\nImproved symbol resolution. Our custom symbol resolution is fast and flexible, but it’s less precise than J2K’s, especially when it comes to resolving symbols defined in third-party libraries. Porting some of our preprocessing and postprocessing steps over to leverage J2K’s extension points will make them more accurate, and allow us to use Intellij’s more sophisticated static-analysis tooling.\nEasier open sourcing and collaboration. Some of our custom steps are too Android-specific to be incorporated into J2K but might still be useful to other companies. Unfortunately, most of them depend on our custom symbol resolution. Porting these steps over to instead rely on J2K’s symbol resolution gives us the option to open-source them and benefit from the community’s pooled efforts.\nBut first, null safety!\nIn order to translate our code without spewing null-pointer exceptions (NPEs) everywhere, it first needs to be null safe (by “null safe” we mean code checked by a static analyzer such as Nullsafe or NullAway). Null safety still isn’t sufficient to eliminate the possibility of NPEs, but it’s an excellent start. Unfortunately, making code null safe is easier said than done.\nEven null-safe Java throws NPEs sometimes\nAnyone who has worked with null-safe Java code long enough knows that while it’s more reliable than vanilla Java code, it’s still prone to NPEs. Unfortunately static analysis is only 100% effective for 100% code coverage, which is simply not viable in any large mobile codebase that interacts with the server and third-party libraries.\nHere’s a canonical example of a seemingly innocuous change that can introduce an NPE:\nMyNullsafeClass.java\n@Nullsafe\r\npublic class MyNullsafeClass {\r\n\r\n  void doThing(String s) {\r\n    // can we safely add this dereference?\r\n    // s.length;\r\n  }\r\n}\nSay there are a dozen dependents that call MyNullsafeJava::doThing. A single non-null-safe dependent could pass in a null argument (for example,  MyNullsafeJava().doThing(null)), which would lead to an NPE if a dereference is inserted in the body of doThing. \nOf course, while we can’t eliminate NPEs in Java via null-safety coverage, we can greatly reduce their frequency. In the example above, NPEs are possible but fairly rare when there’s only one non-null-safe dependent. If multiple transitive dependents lacked null safety, or if one of the more central dependent nodes did, the NPE risk would be much higher.\nWhat makes Kotlin different\nThe biggest difference between null-safe Java and Kotlin is the presence of runtime validation in Kotlin bytecode at the interlanguage boundary. This validation is invisible but powerful because it allows developers to trust the stated nullability annotations in any code they’re modifying or calling.\nIf we return to our earlier example, MyNullsafeClass.java, and translate it to Kotlin, we get something like:\nMyNullsafeClass.kt\nclass MyNullsafeClass {\r\n\r\n  fun doThing(s: String) {\r\n    // there's an invisible `checkNotNull(s)` here in the bytecode\r\n    // so adding this dereference is now risk-free!\r\n    // s.length\r\n  }\r\n}\nNow there’s an invisible checkNotNull(s) in the bytecode at the start of doThing’s body, so we can safely add a dereference to s, because if s were nullable, this code would already be crashing. As you can imagine, this certainty makes for much smoother, safer development.\nThere are also some differences at the static analysis level: The Kotlin compiler enforces a slightly stricter set of null safety rules than Nullsafe does when it comes to concurrency. More specifically, the Kotlin compiler throws an error for dereferences of class-level properties that could have been set to null in another thread. This difference isn’t terribly important to us, but it does lead to more !! than one might expect when translating null-safe code.\nGreat, let’s translate it all to Kotlin!\nNot so fast. As is always the case, going from more ambiguity to less ambiguity doesn’t come for free. For a case like MyNullsafeClass, development is much easier after Kotlin translation, but someone has to take that initial risk of effectively inserting a nonnull assertion for its hopefully-really-not-nullable parameter s. That “someone” is whichever developer or bot ends up shipping the Kotlin conversion.\nWe can take a number of steps to minimize the risk of introducing new NPEs during conversion, the simplest of which is erring on the side of “more nullable” when translating parameters and return types. In the case of MyNullsafeClass, the Kotlinator would have used context clues (in this case, the absence of any dereferences in the body of doThing) to infer that String s should be translated to s: String?.\nOne of the changes we ask developers to scrutinize most when reviewing conversion diffs is the addition of !! outside of preexisting dereferences. Funnily enough, we’re not worried about an expression like foo!!.name, because it’s not any more likely to crash in Kotlin than it was in Java. An expression such as someMethodDefinedInJava(foo!!) is much more concerning, however, because it’s possible that someMethodDefinedInJava is simply missing a @Nullable on its parameter, and so adding !! will introduce a very unnecessary NPE.\nTo avoid problems like adding unnecessary !! during conversion, we run over a dozen complementary codemods that comb through the codebase looking for parameters, return types, and member variables that might be missing @Nullable. More accurate nullability across the codebase—even in Java files that we may never translate—is not only safer, it’s also conducive to more successful conversions, especially as we approach the final stretch in this project.\nOf course, the last remaining null safety issues in our Java code have usually stuck around because they’re very hard to solve. Previous attempts to resolve them relied mostly on static analysis, so we decided to borrow an idea from the Kotlin compiler and create a Java compiler plugin that helps us collect runtime nullability data. This plugin allows us to collect data on all return types and parameters that are receiving/returning a null value and are not annotated as such. Whether these are from Java/Kotlin interop or classes that were annotated incorrectly at a local level, we can determine ultimate sources of truth and use codemods to finally fix the annotations.\nOther ways to break your code\nOn top of the risks of regressing null safety, there are dozens of other ways to break your code during conversion. In the course of shipping over 40,000 conversions, we’ve learned about many of these the hard way and now have several layers of validation to prevent them. Here are a couple of our favorites:\nConfusing initialization with getters\n// Incorrect!\r\nval name: String = getCurrentUser().name\r\n\r\n// Correct\r\nval name: String\r\n  get() = getCurrentUser().name\nNullable booleans\n// Original\r\nif (foo != null && !foo.isEnabled) println(\"Foo is not null and disabled\")\r\n\r\n// Incorrect!\r\nif (foo?.isEnabled != true) println(\"Foo is not null and disabled\")\r\n\r\n// Correct\r\nif (foo?.isEnabled == false) println(\"Foo is not null and disabled\")\nThe fun part\nAt this point, more than half of Meta’s Android Java code has been translated to Kotlin (or, more rarely, deleted). But that was the easy half! The really fun part lies ahead of us, and it’s a doozy. There are still thousands of fully automated conversions we hope to unblock by adding and refining custom steps and by contributing to J2K. And there are thousands more semi-automated conversions we hope to ship smoothly and safely as a result of other Kotlinator improvements.\nMany of the problems we face also affect other companies translating their Android codebases. If this sounds like you, we’d love for you to leverage our fixes and share some of your own. Come chat with us and others in the #j2k channel of the Kotlinlang Slack.\nThe post Translating Java to Kotlin at Scale appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>Meta has been on a years-long undertaking to translate our entire Android codebase from Java to Kotlin. Today, despite having one of the largest Android codebases in the world, we&#8217;re well past the halfway point and still going. We&#8217;re sharing some of the tradeoffs we&#8217;ve made to support automating our transition to Kotlin, seemingly simple [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/12/18/android/translating-java-to-kotlin-at-scale/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/12/18/android/translating-java-to-kotlin-at-scale/\">Translating Java to Kotlin at Scale</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "Meta has been on a years-long undertaking to translate our entire Android codebase from Java to Kotlin. Today, despite having one of the largest Android codebases in the world, we’re well past the halfway point and still going. We’re sharing some of the tradeoffs we’ve made to support automating our transition to Kotlin, seemingly simple [...]\nRead More...\nThe post Translating Java to Kotlin at Scale appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22074",
        "categories": [
          "Android",
          "DevInfra"
        ],
        "isoDate": "2024-12-18T17:00:18.000Z"
      },
      {
        "creator": "",
        "title": "How we think about Threads’ iOS performance",
        "link": "https://engineering.fb.com/2024/12/18/ios/how-we-think-about-threads-ios-performance/",
        "pubDate": "Wed, 18 Dec 2024 15:00:44 +0000",
        "content:encodedSnippet": "How did the Threads iOS team maintain the app’s performance during its incredible growth?\nHere’s how Meta’s Threads team thinks about performance, including the key metrics we monitor to keep the app healthy.\nWe’re also diving into some case studies that impact publish reliability and navigation latency.\nWhen Meta launched Threads in 2023, it became the fastest-growing app in history, gaining 100 million users in only five days. The app now has grown to more than 300 million monthly international users, and its development team has expanded from a small group of scrappy engineers to an organization with more than a hundred contributors.\nLooking back on where the Threads iOS app was a year ago, so much has changed: We’ve expanded into Europe, integrated with the Fediverse, launched a public API, developed many new ways for people to share what’s going on in their world, and introduced new methods to find and read the best content being produced. We even celebrated our first birthday with party hats and scratch-off app icons! \nTo make sure the app is easy and delightful to use—and to scale with a quickly growing user base and development team—it has to be performant. Here’s how we think about performance in the Threads iOS app, what we’ve learned in our first year, and how we’ve tackled a few of our biggest performance challenges.\n\nHow Threads measures performance at scale\nHaving a fast and performant app is critical to providing the best user experience. We want Threads to be the best place for live, creative commentary about what’s happening now; that means Threads also needs to be the fastest and most responsive app in its class. If the app doesn’t feel lightning fast, or if it hangs or drains a phone’s battery, no one will want to use it. Our features have to work reliably and fail infrequently no matter what kind of phone someone is using, or how much memory their phone has, or whether they’re using Threads somewhere that has robust cellular coverage or a network that keeps dropping out.\nSome performance issues are encountered only rarely but still can be frustrating. As the iOS app’s usage grew rapidly during our first year after release, we wanted to learn what the biggest pain points were for most people as well as the extreme performance issues experienced by a small percentage of users. We measured how quickly the app launches, how long it takes to post a photo or video, how often we would experience crashes, and how many bug reports were filed by people. \n%FIRE: Frustrating image-render experience\nIn addition to all the text updates people share, we have a lot of photos shared on Threads. When images load slowly or not at all, that can cause someone to stop using the app. That’s why we monitor an important metric to alert when there’s a regression in how images are loading for our users. That metric, %FIRE, is the percentage of people who experience a frustrating image-render experience, and it’s calculated as shown in Figure 1, below.\nFigure 1: %FIRE calculation.\nAll kinds of things can regress %FIRE, both on the client end and the backend, but not all image-rendering bugs are covered by this metric. For example, in Threads iOS, we had a bug earlier this year where user profile photos would flicker because of how we were comparing view models when reusing them. That triggered a frustrating user experience, but not one where users would contribute to %FIRE.\nTime-to-network content (TTNC)\nHow fast the app starts and how fast we deliver a user’s feed to them is also important. We know if someone has to stare at an app launch screen, activity spinner, or loading shimmer for too long, they’ll just close the app. This is all measured in something we call TTNC, or time-to-network content. In addition to having the app start fast, people also want us to show them what’s happening now, so TTNC measures how fast we’re able to load a fresh, personalized feed, not just cached, locally stored posts.\nThe Threads iOS team has also improved the app launch time by keeping the app’s binary size small. Every time someone tries to commit code to Threads, they’re alerted if that code change would increase our app’s binary size above a configured threshold. Code that violates our binary size policy isn’t allowed to be merged. \nWe’re proactive, too: To help reduce TTNC, we have spent a lot of time since Threads launched removing unnecessary code and graphics assets from our app bundle, resulting in a binary one-quarter the size of Instagram. It doesn’t hurt that this also can reduce our iOS app’s build time, which makes the app more fun to develop! Threads compiles two times faster than Instagram for our non-incremental builds.\nCreation-publish success rate (cPSR)\nWhere %FIRE and TTNC measure how content is presented to a user, we have one other important metric: cPSR, the creation-publish success rate. We measure this separately for text posts, photos, and video published to Threads. When someone tries to post a photo or video, many things can prevent it from succeeding. Photos and videos are locally transcoded into formats we want to upload, which happens asynchronously as part of the publishing process. They both use a lot more data and take longer than text to upload, so there’s more time for something to go wrong. A user might background the app after they tap “Post” without waiting for it to succeed, which on iOS might give us only a few seconds to complete the upload before we’re terminated by the operating system. \nLater in this blog post, we’ll go into some of the strategies we’re using to improve cPSR.\nDeep dive: Navigation latency\nNavigation latency is important to the user experience because it’s tied to how fast the app starts and everything the user does once the app has launched. When we measure navigation latency, we want to know how long it takes to finish rendering content after a user navigates to part of the app. That could be after app start, either from launching Threads directly on your phone, or by tapping on a push notification from Threads, or by simply tapping on a post in your Feed and navigating to the conversation view. \nEarly in 2024, the Threads Performance team knew we wanted to focus on a few key areas, but which ones? Data from Instagram suggested navigation latency is important, but Threads is used differently than Instagram. Having been available to download for only six months at the time, we knew that to prioritize areas of improvement we would first have to spend some time learning.\nLearning from a boundary test\nWe started by creating a boundary test to measure latency, focusing on a few key places that people visit when they launch Threads or use the app. A boundary test is one where we measure extreme ends of a boundary to learn what the effect is. In our case, we introduced a slight bit of latency when a small percentage of our users would navigate to a user profile, to the conversion view for a post, or to their activity feed. \nLatency injection\n\nDaily Active Users\nForeground sessions\nLikes\nConversation views\n\n\nActivity: 0.12s\nConversation: 0.29s\nProfile: 0.28s\nIn-app navigation\n\n\n\n\n\n\nActivity: 0.15s\nConversation: 0.36s\nProfile: 0.35s\n\n\n-0.68%\n\n\n\nActivity: 0.19s\nConversation: 0.54s\nProfile: 0.53s\n-0.54%\n\n-0.81%\n\n\n\nActivity: 0.12s\nConversation: 0.29s\nProfile: 0.28s\nApp launch\n-0.37%\n-0.67%\n\n-1.63%\n\n\nActivity: 0.15s\nConversation: 0.36s\nProfile: 0.35s\n\n-0.67%\n\n-2.55%\n\n\nActivity: 0.19s\nConversation: 0.54s\nProfile: 0.53s\n-0.52%\n-0.65%\n\n\n\n\n\nTable 1: Navigation latency boundary test results.\nThis latency would allow us to extrapolate what the effect would be if we similarly improved how we delivered content to those views.\nWe already had robust analytics logging, but we didn’t have the ability to differentiate between navigation to these views from a cold app launch and from within the app. After adding that, we injected latency into three buckets, each with slight variability depending on surface. \nWe learned that iOS users don’t tolerate a lot of latency. The more we added, the less often they would launch the app and the less time they would stay in it. With the smallest latency injection, the impact was small or negligible for some views, but the largest injections had negative effects across the board. People would read fewer posts, post less often themselves, and in general interact less with the app. Remember, we weren’t injecting latency into the core feed, either; just into the profile, permalink, and activity.\nMeasuring navigation latency with SLATE\nThe SLATE debugger.\nNavigation latency is difficult to measure consistently. If you have a big app that does many different things, you have to have a consistent way of “starting” your timer, measuring time to render a view across many different surfaces with different types of content and behavior, and finally “stopping” your timer. Also, you have to be aware of error states and empty views, which need to be considered terminal states. There can be many permutations and custom implementations across all of an app’s surfaces.\nTo solve this problem and measure navigation latency consistently, we developed a new tool we call SLATE: the “Systemic LATEncy” logger. It gives us the ability to observe events that trigger a new navigation when the user interface (UI) is being built, when activity spinners or shimmers are displayed, when content is displayed from the network, and when a user sees an error condition. It’s implemented using a set of common components that are the foundation for a lot of our UI and a system that measures performance by setting “markers” in code for specific events. Typically these markers are created with a specific purpose in mind. The great thing about SLATE is that it automatically creates these markers for a developer, as long as they’re using common components. This makes the system highly scalable and maintainable in a very large code base such as Threads or Instagram.\nWhen our iOS developers are creating a new feature, it’s easy to see if it has an effect on navigation latency. Anyone can enable the SLATE debugger (depicted in Image 1, below) right in the internal build of our app, and it’s easy to create a dashboard so they can get a report about how their code is running in production.\nCase study: Using SLATE to validate GraphQL adoption\nOver the last year, both Instagram and Threads have been adopting GraphQL for network requests. Even though Meta created GraphQL back in 2012, we built Instagram on a network stack based on REST, so Threads for iOS and Android originally inherited that technical legacy.\nWhen Threads for Web was developed, it was a fresh code base built on the modern GraphQL standard instead of REST. While this was great for web, it meant that new features delivered to both web and iOS/Android had to be written twice: once to support the GraphQL endpoints and once for REST. We wanted to move new development to GraphQL, but because the implementation was unproven for Threads, we first needed to measure and make sure it was ready to be adopted. We expected GraphQL to result in less data that would need to be moved over the network, but to parse and store the data, the infrastructure to support it might introduce additional latency.\nWe decided to run a test where we took one of our views and implemented its network delivery code using GraphQL. Then we could run the REST and GraphQL implementations side by side and compare the results. We opted to run the test for the “user list” views that power Followers and Following lists and determine if the new code that delivered and parsed GraphQL responses was at least as fast as the legacy REST code.\nThis was easy to do using Swift. We created an abstraction that extracted the existing API into a protocol that both the REST and GraphQL code could use; then when the code would be called, a factory method generated the appropriate provider.\nOnce the code was running, we needed to measure the impact on the end-to-end latency of fetching results from the network and rendering the content on screen. SLATE to the rescue! Using SLATE’s performance markers, we could easily compare latency data for each of the different user view network implementations. \nBelow is an example graph of the latency data (p95) for when a user views the list of their followers. The blue line compares the REST and GraphQL latency data, which are very similar. We saw similar results across all the different views, which gave the Threads iOS team confidence to adopt GraphQL for all new endpoints.\nFigure 2: Latency (p95) loading Following and Followers lists via REST and GraphQL.\nDeep dive: Publish reliability and latency\nAs mentioned previously, cPSR is one of the top metrics we’re trying to improve on Threads, because if people can’t reliably post what they want, they’ll have a terrible user experience. We also know from reading user-submitted bug reports that posting can be a source of frustration for people.\nLet’s dive into two features added to Threads iOS that approach improving the posting experience in very different ways: Drafts, and reducing the perceived latency of text posts.\nDrafts\nIn early 2024, Threads introduced basic saving of drafts on iOS and Android. In addition to being one of our most user-requested features, Drafts provides resiliency to unexpected failures such as bad network connectivity. Looking at user-filed bug reports, we had seen that the top concern was being unable to post. Often users didn’t know why they couldn’t post. We knew a draft feature would help with some of these concerns.\nThese user bug reports were used to measure the success of Drafts. Drafts doesn’t directly move cPSR, which measures the reliability of posting in a single session, but we theorized it might result in either more posts being created or less overall user frustration with posting. We released Drafts to a small group of people and compared the number of subsequent bug reports related to posting they submitted compared to reports from people who didn’t have Drafts. We discovered that 26 percent fewer people submitted bug reports about posting if they had Drafts. The feature was clearly making a difference.\nWe quickly followed up with a small but necessary improvement. Previously, if a user ran into a network issue while posting, they would be asked if they wanted to retry or discard their post,  but were given no option to save it as a draft. This meant a lot of people who couldn’t send were losing their post, which was frustrating. Unfortunately, measuring the impact of this resiliency feature was also difficult because not many people ran into it.\nThen, a surprising thing happened: A serious bug took down all of Threads for a short period of time. Though this was bad, it had the side effect of testing some of our resiliency features, including Drafts. We saw a huge spike in usage during the short outage, which confirmed that people were benefiting from being able to save their posts if there was a serious problem.\nYou can see in Figure 3 below the spike in Drafts usage during the outage around noon on March 31.\nFigure 3: A spike in Drafts usage during a brief outage.\nMinimizing Drafts’ local storage\nAfter Drafts was released to the public, we discovered an unfortunate bug: The average amount of storage Threads used was increasing dramatically. People on Threads noticed, too, and posted a lot of complaints about it. Some of these people reported that Threads was taking up many gigabytes of storage space. Maintaining a low disk footprint helps performance, and addressing this bug provided an opportunity to learn about the impact of excessive disk usage in Threads.\nFigure 4: Disk usage in Threads after Drafts launched.\nThe culprit was Drafts. In the iOS app, we use PHPickerViewController, introduced in iOS 14, to power the photo and video gallery presented in the Composer. \nPHPickerViewController is a nice component that runs out of process and provides users with privacy and safety by allowing them to give an app access to exactly the media they want. When a photo is selected, an app receives a URL that points to the image asset on the device. We found, however, that access to this image is only temporary; between sessions, Threads would lose permission to read an image that had been attached to a draft. In addition, if a user deleted an image from the gallery, it would also disappear from a draft, which was not ideal.\nThe solution was to copy photos and videos to an area in the application container that was specific to Drafts. Unfortunately, copied media wasn’t being cleaned up entirely, leading disk usage to grow, sometimes dramatically, over time.\nCleaning up this excessive disk usage had dramatic results in areas we didn’t expect. App launch became faster (-0.35%), our daily active users grew (+0.21%), and people posted additional original content (+0.76%)—quite a lot more.\nThreads’ Posted toast.\nBlazing fast text posts\nSimilar to doing the navigation latency boundary test, the performance team had previously measured the impact of latency on text replies and knew we wanted to improve them. In addition to implementing improvements to reduce absolute latency, we decided to reduce perceived latency. \nA new feature in Threads’ network stack allows the server to notify a client when a posting request has been fully received, but before it’s been processed and published. Most failures happen between the mobile client and Threads’ servers, so once a request is received, it’s very likely to succeed.\nUsing the new server-acknowledgement callback, the iOS client could now present the “Posted” toast when a publish request was received, but before it was fully created in the backend. It would appear as if text posts were publishing a little faster. The result is a better user experience that makes the app feel more conversational.\nAdopting Swift Concurrency for more stable code\nMigrating the Threads iOS publishing code from a synchronous model to an asynchronous one also revealed the potential for race conditions. In addition to the asynchronous transcoding step mentioned previously, there were some new ones related to management of the upload tasks and media metadata. We noticed some mysterious malformed payloads that turned up only occasionally in our analytics and dashboards. Operating at massive scale tends to turn up some rare edge cases that can have negative consequences on performance metrics and give people a bad user experience.\nOne of the best things about working in the Threads code base is that it’s mostly in Swift. Some of the publishing code was written in Objective-C, though. While Objective-C has a lot of benefits, Swift’s strong data-race protections and type safety would be an improvement, so we decided to migrate Threads’ publishing code to Swift.\niOS teams throughout Meta are adopting Swift’s “complete concurrency” in preparation for moving to Swift 6. On the Threads team, we’ve been migrating older Swift code and using complete concurrency in new frameworks that we’re building. Moving to complete concurrency is probably the biggest change to iOS development since Automatic Reference Counting (ARC) was introduced way back in iOS 4. When you adopt complete concurrency, Swift does a great job at preventing pesky data races, such as some that were causing issues with our optimistic uploader. If you haven’t started adopting Swift’s strict concurrency by enabling complete concurrency in your code, you might find that your code is more stable and less prone to hard-to-debug problems caused by data races.\nThe future of Threads iOS performance\nAs Threads continues to scale in its second year and beyond, the iOS app will have to adapt to meet new challenges. As we add new product features, we will keep monitoring our time-worn metrics such as %FIRE, TTNC, and cPSR to make sure the user experience doesn’t degrade. We’re updating the code that delivers posts to you, so you see content faster and experience fewer loading indicators. We’ll continue to take advantage of the most modern language features in Swift, which will make the app more stable and faster to build and load into memory. Meanwhile, we’re going to iterate and evolve tools like SLATE that help us improve our testing and debug regressions. \nAs part of the Threads community, you can also contribute to making the app better. We mentioned earlier that user-submitted bug reports were used to identify areas for the development team to focus on and verify that features like Drafts were actually solving user frustrations. In both Threads and Instagram, you can long-press on the Home tab or shake your phone to submit a bug report. We really do read them.\nThe post How we think about Threads’ iOS performance appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>How did the Threads iOS team maintain the app&#8217;s performance during its incredible growth? Here&#8217;s how Meta&#8217;s Threads team thinks about performance, including the key metrics we monitor to keep the app healthy. We&#8217;re also diving into some case studies that impact publish reliability and navigation latency. When Meta launched Threads in 2023, it became [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/12/18/ios/how-we-think-about-threads-ios-performance/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/12/18/ios/how-we-think-about-threads-ios-performance/\">How we think about Threads&#8217; iOS performance</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "How did the Threads iOS team maintain the app’s performance during its incredible growth? Here’s how Meta’s Threads team thinks about performance, including the key metrics we monitor to keep the app healthy. We’re also diving into some case studies that impact publish reliability and navigation latency. When Meta launched Threads in 2023, it became [...]\nRead More...\nThe post How we think about Threads’ iOS performance appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=22060",
        "categories": [
          "iOS",
          "Production Engineering",
          "Threads"
        ],
        "isoDate": "2024-12-18T15:00:44.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": [
      {
        "creator": "Netflix Technology Blog",
        "title": "Introducing Configurable Metaflow",
        "link": "https://netflixtechblog.com/introducing-configurable-metaflow-d2fb8e9ba1c6?source=rss----2615bd06b42e---4",
        "pubDate": "Fri, 20 Dec 2024 07:11:37 GMT",
        "content:encodedSnippet": "David J. Berg*, David Casler^, Romain Cledat*, Qian Huang*, Rui Lin*, Nissan Pow*, Nurcan Sonmez*, Shashank Srikanth*, Chaoying Wang*, Regina Wang*, Darin Yu*\n*: Model Development Team, Machine Learning Platform\n^: Content Demand Modeling Team\nA month ago at QConSF, we showcased how Netflix utilizes Metaflow to power a diverse set of ML and AI use cases, managing thousands of unique Metaflow flows. This followed a previous blog on the same topic. Many of these projects are under constant development by dedicated teams with their own business goals and development best practices, such as the system that supports our content decision makers, or the system that ranks which language subtitles are most valuable for a specific piece of content.\nAs a central ML and AI platform team, our role is to empower our partner teams with tools that maximize their productivity and effectiveness, while adapting to their specific needs (not the other way around). This has been a guiding design principle with Metaflow since its inception.\nMetaflow infrastructure stack\nStanding on the shoulders of our extensive cloud infrastructure, Metaflow facilitates easy access to data, compute, and production-grade workflow orchestration, as well as built-in best practices for common concerns such as collaboration, versioning, dependency management, and observability, which teams use to setup ML/AI experiments and systems that work for them. As a result, Metaflow users at Netflix have been able to run millions of experiments over the past few years without wasting time on low-level concerns.\nA long standing FAQ: configurable flows\nWhile Metaflow aims to be un-opinionated about some of the upper levels of the stack, some teams within Netflix have developed their own opinionated tooling. As part of Metaflow’s adaptation to their specific needs, we constantly try to understand what has been developed and, more importantly, what gaps these solutions are filling.\nIn some cases, we determine that the gap being addressed is very team specific, or too opinionated at too high a level in the stack, and we therefore decide to not develop it within Metaflow. In other cases, however, we realize that we can develop an underlying construct that aids in filling that gap. Note that even in that case, we do not always aim to completely fill the gap and instead focus on extracting a more general lower level concept that can be leveraged by that particular user but also by others. One such recurring pattern we noticed at Netflix is the need to deploy sets of closely related flows, often as part of a larger pipeline involving table creations, ETLs, and deployment jobs. Frequently, practitioners want to experiment with variants of these flows, testing new data, new parameterizations, or new algorithms, while keeping the overall structure of the flow or flows intact.\nA natural solution is to make flows configurable using configuration files, so variants can be defined without changing the code. Thus far, there hasn’t been a built-in solution for configuring flows, so teams have built their bespoke solutions leveraging Metaflow’s JSON-typed Parameters, IncludeFile, and deploy-time Parameters or deploying their own home-grown solution (often with great pain). However, none of these solutions make it easy to configure all aspects of the flow’s behavior, decorators in particular.\nRequests for a feature like Metaflow Config\nOutside Netflix, we have seen similar frequently asked questions on the Metaflow community Slack as shown in the user quotes above:\n\nhow can I adjust the @resource requirements, such as CPU or memory, without having to hardcode the values in my flows?\nhow to adjust the triggering @schedule programmatically, so our production and staging deployments can run at different cadences?\n\nNew in Metaflow: Configs!\nToday, to answer the FAQ, we introduce a new — small but mighty — feature in Metaflow: a Config object. Configs complement the existing Metaflow constructs of artifacts and Parameters, by allowing you to configure all aspects of the flow, decorators in particular, prior to any run starting. At the end of the day, artifacts, Parameters and Configs are all stored as artifacts by Metaflow but they differ in when they are persisted as shown in the diagram below:\nDifferent data artifacts in Metaflow\nSaid another way:\n\nAn artifact is resolved and persisted to the datastore at the end of each task.\nA parameter is resolved and persisted at the start of a run; it can therefore be modified up to that point. One common use case is to use triggers to pass values to a run right before executing. Parameters can only be used within your step code.\nA config is resolved and persisted when the flow is deployed. When using a scheduler such as Argo Workflows, deployment happens when create’ing the flow. In the case of a local run, “deployment” happens just prior to the execution of the run — think of “deployment” as gathering all that is needed to run the flow. Unlike parameters, configs can be used more widely in your flow code, particularly, they can be used in step or flow level decorators as well as to set defaults for parameters. Configs can of course also be used within your flow.\n\nAs an example, you can specify a Config that reads a pleasantly human-readable configuration file, formatted as TOML. The Config specifies a triggering ‘@schedule’ and ‘@resource’ requirements, as well as application-specific parameters for this specific deployment:\n[schedule]\ncron = \"0 * * * *\"\n[model]\noptimizer = \"adam\"\nlearning_rate = 0.5\n[resources]\ncpu = 1\nUsing the newly released Metaflow 2.13, you can configure a flow with a Config like above, as demonstrated by this flow:\nimport pprint\nfrom metaflow import FlowSpec, step, Config, resources, config_expr, schedule\n@schedule(cron=config_expr(\"config.schedule.cron\"))\nclass ConfigurableFlow(FlowSpec):\n    config = Config(\"config\", default=\"myconfig.toml\", parser=\"tomllib.loads\")\n    @resources(cpu=config.resources.cpu)\n    @step\n    def start(self):\n        print(\"Config loaded:\")\n        pprint.pp(self.config)\n        self.next(self.end)\n    @step\n    def end(self):\n        pass\nif __name__ == \"__main__\":\n    ConfigurableFlow()\nThere is a lot going on in the code above, a few highlights:\n\nyou can refer to configs before they have been defined using ‘config_expr’.\nyou can define arbitrary parsers — using a string means the parser doesn’t even have to be present remotely!\n\nFrom the developer’s point of view, Configs behave like dictionary-like artifacts. For convenience, they support the dot-syntax (when possible) for accessing keys, making it easy to access values in a nested configuration. You can also unpack the whole Config (or a subtree of it) with Python’s standard dictionary unpacking syntax, ‘**config’. The standard dictionary subscript notation is also available.\nSince Configs turn into dictionary artifacts, they get versioned and persisted automatically as artifacts. You can access Configs of any past runs easily through the Client API. As a result, your data, models, code, Parameters, Configs, and execution environments are all stored as a consistent bundle — neatly organized in Metaflow namespaces — paving the way for easily reproducible, consistent, low-boilerplate, and now easily configurable experiments and robust production deployments.\nMore than a humble config file\nWhile you can get far by accompanying your flow with a simple config file (stored in your favorite format, thanks to user-definable parsers), Configs unlock a number of advanced use cases. Consider these examples from the updated documentation:\n\nYou can choose the right level of runtime configurability versus fixed deployments by mixing Parameters and Configs. For instance, you can use a Config to define a default value for a parameter which can be overridden by a real-time event as a run is triggered.\nYou can define a custom parser to validate the configuration, e.g. using the popular Pydantic library.\nYou are not limited to using a single file: you can leverage a configuration manager like OmegaConf or Hydra to manage a hierarchy of cascading configuration files. You can also use a domain-specific tool for generating Configs, such as Netflix’s Metaboost which we cover below.\nYou can also generate configurations on the fly, e.g. fetch Configs from an external service, or inspect the execution environment, such as the current GIT branch, and include it as an extra piece of context in runs.\n\nA major benefit of Config over previous more hacky solutions for configuring flows is that they work seamlessly with other features of Metaflow: you can run steps remotely and deploy flows to production, even when relying on custom parsers, without having to worry about packaging Configs or parsers manually or keeping Configs consistent across tasks. Configs also work with the Runner and Deployer.\nThe Hollywood principle: don’t call us, we’ll call you\nWhen used in conjunction with a configuration manager like Hydra, Configs enable a pattern that is highly relevant for ML and AI use cases: orchestrating experiments over multiple configurations or sweeping over parameter spaces. While Metaflow has always supported sweeping over parameter grids easily using foreaches, it hasn’t been easily possible to alter the flow itself, e.g. to change @resources or @pypi/@conda dependencies for every experiment.\nIn a typical case, you trigger a Metaflow flow that consumes a configuration file, changing how a run behaves. With Hydra, you can invert the control: it is Hydra that decides what gets run based on a configuration file. Thanks to Metaflow’s new Runner and Deployer APIs, you can create a Hydra app that operates Metaflow programmatically — for instance, to deploy and execute hundreds of variants of a flow in a large-scale experiment.\nTake a look at two interesting examples of this pattern in the documentation. As a teaser, this video shows Hydra orchestrating deployment of tens of Metaflow flows, each of which benchmarks PyTorch using a varying number of CPU cores and tensor sizes, updating a visualization of the results in real-time as the experiment progresses:\nhttps://medium.com/media/e1e6d120dc74e75d9e52956b6cee7efe/href\nMetaboosting Metaflow — based on a true story\nTo give a motivating example of what configurations look like at Netflix in practice, let’s consider Metaboost, an internal Netflix CLI tool that helps ML practitioners manage, develop and execute their cross-platform projects, somewhat similar to the open-source Hydra discussed above but with specific integrations to the Netflix ecosystem. Metaboost is an example of an opinionated framework developed by a team already using Metaflow. In fact, a part of the inspiration for introducing Configs in Metaflow came from this very use case.\nMetaboost serves as a single interface to three different internal platforms at Netflix that manage ETL/Workflows (Maestro), Machine Learning Pipelines (Metaflow) and Data Warehouse Tables (Kragle). In this context, having a single configuration system to manage a ML project holistically gives users increased project coherence and decreased project risk.\nConfiguration in Metaboost\nEase of configuration and templatizing are core values of Metaboost. Templatizing in Metaboost is achieved through the concept of bindings, wherein we can bind a Metaflow pipeline to an arbitrary label, and then create a corresponding bespoke configuration for that label. The binding-connected configuration is then merged into a global set of configurations containing such information as GIT repository, branch, etc. Binding a Metaflow, will also signal to Metaboost that it should instantiate the Metaflow flow once per binding into our orchestration cluster.\nImagine a ML practitioner on the Netflix Content ML team, sourcing features from hundreds of columns in our data warehouse, and creating a multitude of models against a growing suite of metrics. When a brand new content metric comes along, with Metaboost, the first version of the metric’s predictive model can easily be created by simply swapping the target column against which the model is trained.\nSubsequent versions of the model will result from experimenting with hyper parameters, tweaking feature engineering, or conducting feature diets. Metaboost’s bindings, and their integration with Metaflow Configs, can be leveraged to scale the number of experiments as fast as a scientist can create experiment based configurations.\nScaling experiments with Metaboost bindings — backed by Metaflow Config\nConsider a Metaboost ML project named `demo` that creates and loads data to custom tables (ETL managed by Maestro), and then trains a simple model on this data (ML Pipeline managed by Metaflow). The project structure of this repository might look like the following:\n├── metaflows\n│   ├── custom                               -> custom python code, used by\n|   |   |                                       Metaflow\n│   │   ├── data.py\n│   │   └── model.py\n│   └── training.py                          -> defines our Metaflow pipeline\n├── schemas\n│   ├── demo_features_f.tbl.yaml             -> table DDL, stores our ETL\n|   |                                           output, Metaflow input\n│   └── demo_predictions_f.tbl.yaml          -> table DDL,\n|                                               stores our Metaflow output\n├── settings\n│   ├── settings.configuration.EXP_01.yaml   -> defines the additive\n|   |                                           config for Experiment 1\n│   ├── settings.configuration.EXP_02.yaml   -> defines the additive\n|   |                                           config for Experiment 2\n│   ├── settings.configuration.yaml          -> defines our global\n|   |                                           configuration\n│   └── settings.environment.yaml            -> defines parameters based on\n|                                               git branch (e.g. READ_DB)\n├── tests\n├── workflows\n│   ├── sql\n│   ├── demo.demo_features_f.sch.yaml        -> Maestro workflow, defines ETL\n│   └── demo.main.sch.yaml                   -> Maestro workflow, orchestrates\n|                                               ETLs and Metaflow\n└── metaboost.yaml                           -> defines our project for\n                                                Metaboost\nThe configuration files in the settings directory above contain the following YAML files:\n# settings.configuration.yaml (global configuration)\nmodel:\n  fit_intercept: True\nconda:\n  numpy: '1.22.4'\n  \"scikit-learn\": '1.4.0'\n# settings.configuration.EXP_01.yaml\ntarget_column: metricA\nfeatures:\n  - runtime\n  - content_type\n  - top_billed_talent\n# settings.configuration.EXP_02.yaml\ntarget_column: metricA\nfeatures:\n  - runtime\n  - director\n  - box_office\nMetaboost will merge each experiment configuration (*.EXP*.yaml) into the global configuration (settings.configuration.yaml) individually at Metaboost command initialization. Let’s take a look at how Metaboost combines these configurations with a Metaboost command:\n(venv-demo) ~/projects/metaboost-demo [branch=demoX] \n$ metaboost metaflow settings show --yaml-path=configuration\nbinding=EXP_01:\nmodel:                     -> defined in setting.configuration.yaml (global)\n  fit_intercept: true\nconda:                     -> defined in setting.configuration.yaml (global)\n  numpy: 1.22.4\n  \"scikit-learn\": 1.4.0\ntarget_column: metricA     -> defined in setting.configuration.EXP_01.yaml\nfeatures:                  -> defined in setting.configuration.EXP_01.yaml\n- runtime\n- content_type\n- top_billed_talent\nbinding=EXP_02:\nmodel:                     -> defined in setting.configuration.yaml (global)\n  fit_intercept: true\nconda:                     -> defined in setting.configuration.yaml (global)\n  numpy: 1.22.4\n  \"scikit-learn\": 1.4.0\ntarget_column: metricA     -> defined in setting.configuration.EXP_02.yaml\nfeatures:                  -> defined in setting.configuration.EXP_02.yaml\n- runtime\n- director\n- box_office\nMetaboost understands it should deploy/run two independent instances of training.py — one for the EXP_01 binding and one for the EXP_02 binding. You can also see that Metaboost is aware that the tables and ETL workflows are not bound, and should only be deployed once. These details of which artifacts to bind and which to leave unbound are encoded in the project’s top-level metaboost.yaml file.\n(venv-demo) ~/projects/metaboost-demo [branch=demoX] \n$ metaboost project list\nTables (metaboost table list):\nschemas/demo_predictions_f.tbl.yaml (binding=default):\n    table_path=prodhive/demo_db/demo_predictions_f\nschemas/demo_features_f.tbl.yaml (binding=default):\n    table_path=prodhive/demo_db/demo_features_f\nWorkflows (metaboost workflow list):\nworkflows/demo.demo_features_f.sch.yaml (binding=default):\n    cluster=sandbox, workflow.id=demo.branch_demox.demo_features_f\nworkflows/demo.main.sch.yaml (binding=default):\n    cluster=sandbox, workflow.id=demo.branch_demox.main\nMetaflows (metaboost metaflow list):\nmetaflows/training.py (binding=EXP_01): -> EXP_01 instance of training.py\n    cluster=sandbox, workflow.id=demo.branch_demox.EXP_01.training   \nmetaflows/training.py (binding=EXP_02): -> EXP_02 instance of training.py\n    cluster=sandbox, workflow.id=demo.branch_demox.EXP_02.training\nBelow is a simple Metaflow pipeline that fetches data, executes feature engineering, and trains a LinearRegression model. The work to integrate Metaboost Settings into a user’s Metaflow pipeline (implemented using Metaflow Configs) is as easy as adding a single mix-in to the FlowSpec definition:\nfrom metaflow import FlowSpec, Parameter, conda_base, step\nfrom custom.data import feature_engineer, get_data\nfrom metaflow.metaboost import MetaboostSettings\n@conda_base(\n    libraries=MetaboostSettings.get_deploy_time_settings(\"configuration.conda\")\n)class DemoTraining(FlowSpec, MetaboostSettings):\n    prediction_date = Parameter(\"prediction_date\", type=int, default=-1)\n    @step\n    def start(self):\n        # get show_settings() for free with the mixin\n        # and get convenient debugging info\n        self.show_settings(exclude_patterns=[\"artifact*\", \"system*\"])\n        self.next(self.get_features)\n    @step\n    def get_features(self):\n        # feature engineers on our extracted data\n        self.fe_df = feature_engineer(\n            # loads data from our ETL pipeline\n            data=get_data(prediction_date=self.prediction_date),\n            features=self.settings.configuration.features +\n                [self.settings.configuration.target_column]\n        )\n        self.next(self.train)\n    @step\n    def train(self):\n        from sklearn.linear_model import LinearRegression\n        # trains our model\n        self.model = LinearRegression(\n            fit_intercept=self.settings.configuration.model.fit_intercept\n        ).fit(\n            X=self.fe_df[self.settings.configuration.features],\n            y=self.fe_df[self.settings.configuration.target_column]\n        )\n        print(f\"Fit slope: {self.model.coef_[0]}\")\n        print(f\"Fit intercept: {self.model.intercept_}\")\n        self.next(self.end)\n    @step\n    def end(self):\n        pass\n\nif __name__ == \"__main__\":\n    DemoTraining()\nThe Metaflow Config is added to the FlowSpec by mixing in the MetaboostSettings class. Referencing a configuration value is as easy as using the dot syntax to drill into whichever parameter you’d like.\nFinally let’s take a look at the output from our sample Metaflow above. We execute experiment EXP_01 with\nmetaboost metaflow run --binding=EXP_01\nwhich upon execution will merge the configurations into a single settings file (shown previously) and serialize it as a yaml file to the .metaboost/settings/compiled/ directory.\nYou can see the actual command and args that were sub-processed in the Metaboost Execution section below. Please note the –config argument pointing to the serialized yaml file, and then subsequently accessible via self.settings. Also note the convenient printing of configuration values to stdout during the start step using a mixed in function named show_settings().\n(venv-demo) ~/projects/metaboost-demo [branch=demoX] \n$ metaboost metaflow run --binding=EXP_01\nMetaboost Execution: \n - python3.10 /root/repos/cdm-metaboost-irl/metaflows/training.py\n   --no-pylint --package-suffixes=.py --environment=conda\n   --config settings\n   .metaboost/settings/compiled/settings.branch_demox.EXP_01.training.mP4eIStG.yaml\n   run --prediction_date20241006\nMetaflow 2.12.39+nflxfastdata(2.13.5);nflx(2.13.5);metaboost(0.0.27)\n  executing DemoTraining for user:dcasler\nValidating your flow...\n    The graph looks good!\nBootstrapping Conda environment... (this could take a few minutes)\nAll packages already cached in s3.\nAll environments already cached in s3.\nWorkflow starting (run-id 50), see it in the UI at\nhttps://metaflowui.prod.netflix.net/DemoTraining/50\n[50/start/251640833] Task is starting.\n[50/start/251640833] Configuration Values:\n[50/start/251640833]   settings.configuration.conda.numpy            = 1.22.4\n[50/start/251640833]   settings.configuration.features.0             = runtime\n[50/start/251640833]   settings.configuration.features.1             = content_type\n[50/start/251640833]   settings.configuration.features.2             = top_billed_talent\n[50/start/251640833]   settings.configuration.model.fit_intercept    = True\n[50/start/251640833]   settings.configuration.target_column          = metricA\n[50/start/251640833]   settings.environment.READ_DATABASE            = data_warehouse_prod\n[50/start/251640833]   settings.environment.TARGET_DATABASE          = demo_dev\n[50/start/251640833] Task finished successfully.\n[50/get_features/251640840] Task is starting.\n[50/get_features/251640840] Task finished successfully.\n[50/train/251640854] Task is starting.\n[50/train/251640854] Fit slope: 0.4702672504331096\n[50/train/251640854] Fit intercept: -6.247919678070083\n[50/train/251640854] Task finished successfully.\n[50/end/251640868] Task is starting.\n[50/end/251640868] Task finished successfully.\nDone! See the run in the UI at\nhttps://metaflowui.prod.netflix.net/DemoTraining/50\nTakeaways\nMetaboost is an integration tool that aims to ease the project development, management and execution burden of ML projects at Netflix. It employs a configuration system that combines git based parameters, global configurations and arbitrarily bound configuration files for use during execution against internal Netflix platforms.\nIntegrating this configuration system with the new Config in Metaflow is incredibly simple (by design), only requiring users to add a mix-in class to their FlowSpec — similar to this example in Metaflow documentation — and then reference the configuration values in steps or decorators. The example above templatizes a training Metaflow for the sake of experimentation, but users could just as easily use bindings/configs to templatize their flows across target metrics, business initiatives or any other arbitrary lines of work.\nTry it at home\nIt couldn’t be easier to get started with Configs! Just\npip install -U metaflow\nto get the latest version and head to the updated documentation for examples. If you are impatient, you can find and execute all config-related examples in this repository as well.\nIf you have any questions or feedback about Config (or other Metaflow features), you can reach out to us at the Metaflow community Slack.\nAcknowledgments\nWe would like to thank Outerbounds for their collaboration on this feature; for rigorously testing it and developing a repository of examples to showcase some of the possibilities offered by this feature.\n\nIntroducing Configurable Metaflow was originally published in Netflix TechBlog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Netflix Technology Blog",
        "guid": "https://medium.com/p/d2fb8e9ba1c6",
        "categories": [
          "machine-learning",
          "mlops",
          "metaflow"
        ],
        "isoDate": "2024-12-20T07:11:37.000Z"
      }
    ]
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Maria Sharobaeva",
        "title": "JetBrains Academy – December Digest",
        "link": "https://blog.jetbrains.com/education/2024/12/23/jetbrains-academy-december-digest-2/",
        "pubDate": "Mon, 23 Dec 2024 18:26:30 +0000",
        "content:encodedSnippet": "In the new year, the JetBrains Academy team wants your IT skills to shine brighter than a Christmas tree! 🎄 This newsletter is packed with global trends in computer science education, must-read books, tips for university entrance exams, IT contests, and some holiday presents to help you level up your skills. 🎁 Enjoy the gift, and let the festive celebrations begin! Happy holidays!\nLearn Tech Efficiently\nExplore Global Trends in Tech Education\nOver 23,000 learners from 16 countries and 7 regions shared their insights to reveal the latest trends in computer science education. Dive into our report for valuable insights into learning motivations, priorities, and preferences.\nRead now\n                                                    \nBooks for Beginner Programmers\nCheck out our top picks for beginner programmers. Start building your coding library and boost your tech career!\nDiscover more\n                                                    \nRecording: Ace the University Math Entrance Test\nWatch the recording of our livestream to get insights on how to ace the entrance test for the Computer Science and AI bachelor’s program at Neapolis University Pafos.\nWatch now\n                                                    \nIT contests\nKotlin Multiplatform Contest\nCreate with Kotlin Multiplatform and win big! The top 3 projects will earn an all-expenses-paid trip to KotlinConf 2025 in May and exclusive swag! Open to students and recent grads.\nTry now\n                                                    \nChristmas presents\nChristmas Code Fest With Hyperskill\nTreat yourself this holiday! Get 50% off a Hyperskill Premium subscription and unlock 40+ project-based courses, certifications, a tech interview simulator, and more for the whole year. Offer ends December 25, 2024 – don’t miss out!\nPurchase now\n                                                    \nJetBrains Academy Advent Calendar\nJoin us on Instagram to uncover daily computer science surprises. Learn something new every day this December!\nCheck it out\n                                                    \nUpskill at Work With JetBrains Academy\nAsk your manager to bring tech courses to your company by January 31, 2025 and get 20% off a JetBrains Academy annual subscription for your organization.\nLearn more",
        "dc:creator": "Maria Sharobaeva",
        "content": "In the new year, the JetBrains Academy team wants your IT skills to shine brighter than a Christmas tree! 🎄 This newsletter is packed with global trends in computer science education, must-read books, tips for university entrance exams, IT contests, and some holiday presents to help you level up your skills. 🎁 Enjoy the gift, [&#8230;]",
        "contentSnippet": "In the new year, the JetBrains Academy team wants your IT skills to shine brighter than a Christmas tree! 🎄 This newsletter is packed with global trends in computer science education, must-read books, tips for university entrance exams, IT contests, and some holiday presents to help you level up your skills. 🎁 Enjoy the gift, […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=536120",
        "categories": [
          "digest",
          "jetbrains-academy",
          "newsletter"
        ],
        "isoDate": "2024-12-23T18:26:30.000Z"
      },
      {
        "creator": "Maciej Gorywoda",
        "title": "The IntelliJ Scala Plugin in 2024",
        "link": "https://blog.jetbrains.com/scala/2024/12/20/the-intellij-scala-plugin-in-2024/",
        "pubDate": "Fri, 20 Dec 2024 15:29:30 +0000",
        "content:encodedSnippet": "The Year in Review\nTime flies. Only a year ago, we saw the release of Scala 3.4.0-RC1, and now we’re trying out Scala 3.6.2 with many new experimental features. The last 12 months have brought many new features to the IntelliJ Scala Plugin as well. A year ago we introduced X-Ray mode, which lets you easily augment the code you see in the editor with information about inferred types and other details. We’ve improved Scala 3 support, compiler-based highlighting, and the debugger. We’ve improved auto-completion, both the standard and the AI-powered versions. We’ve introduced support for named tuples, which are still an experimental feature, and we’ve implemented a new way to work with sbt projects. On top of all that, this year, JetBrains joined the Scala Advisory Board. You can read about those changes in our release notes and other blog posts:\nThe X-Ray Mode\nRelease Notes 2024.1\nRelease Notes 2024.2\nRelease Notes 2024.3\nNew Module Layout for sbt Projects\nJetBrains Joins the Scala Advisory Board\n\n\n\n\nState of Developer Ecosystem Survey\nThis year, JetBrains conducted its eighth annual State of Developer Ecosystem Survey. We compared your answers about your Scala development preferences to the results from last year, and we learned a few interesting things:\nWhich versions of Scala do you regularly use?\nThe most significant shift is the jump in Scala 3 usage from 45% in 2023 to 51% in 2024. However, the usage of Scala 2.13 fell a little bit, and even Scala 2.12, though it lost popularity, sits at a modest 23%. What can we make of this? The additional breakdown of responses regarding which versions are used at work and which are used for hobby projects gave us a pretty clear picture. The community has embraced Scala 3 in open-source projects, libraries, and new projects written from scratch, but Scala 2.13 still plays a prominent role in the professional world.\n\nWhich Scala 3 features do you use?\nWhen it comes to adopting Scala 3 features, the features with the most growth (enums, given and using clauses, top-level definitions) are those that simplify common patterns or reduce boilerplate. This suggests developers prioritize tools that enhance productivity and readability. Other, more advanced features have also become more popular, which corresponds to the rise in popularity of Scala 3 overall. Niche features – like dependent function types and kind polymorphism – will likely remain specialized tools for advanced library authors or specific applications.\nNext year, we will move this question from the main Developer Ecosystem Survey to a separate small opinion poll.\n\nWhich unit testing frameworks do you regularly use, if any?\nWith 71% of users, ScalaTest is the clear leader. This reflects its maturity, ease of use, and extensive feature set – all reasons why many teams see it as a go-to solution. MUnit and ScalaCheck have retained stable fan bases, even though they both lost a few points. On the other hand, the decline of ZIO Test’s popularity might be surprising, given that ZIO remains a popular framework.\n\nWhich frameworks and libraries do you regularly use?\nCats has experienced a small rise, solidifying its position as one of the most widely used libraries in the Scala ecosystem. This trend might be connected with a shift toward more rigorous functional programming in the community since F2 and ZIO, both mature projects built on functional programming principles, also experienced small bumps.\nAkka lost 5 points but maintained a solid user base. It looks like Pekko, a fully open-source fork of Akka, has attracted some Akka users seeking a familiar framework without licensing constraints. This is the first year we have asked about Pekko in the Developer Ecosystem Survey, and it already has a 15% share of the responses.\nThe other libraries either maintained their user bases or experienced slight losses. This may mean that Scala development is moving towards and consolidating around tried and trustworthy solutions. Scala developers still like to experiment but we leave it more for hobby projects, sticking instead to what we know in our full-time jobs. The results for frameworks and libraries used in web development seem to confirm this conclusion: not much has changed; we still see the dominance of a few mature solutions without any new experimental projects significantly rising in popularity.\n\n\n\n\nWhich editors or IDEs do you use for Scala development?\nFinally, when it comes to the popularity of IDEs and editors used to write Scala code, IntelliJ IDEA with the Scala Plugin is still on top at 80%. VS Code is next with 25%, and Emacs and Vim are in third and fourth place. Many people don’t use just one IDE for all their work, which is why the results don’t add up to 100%. As we already learned from the questions about Scala 3 and its features, Scala developers like to experiment in their hobby projects, but they stick to mature solutions in their professional work. Maybe this explains these results as well.\n\nShare of top-paid employees\nAnd one more thing before we finish: This year’s Developer Ecosystem Survey shows that, just as in 2023, Scala is the programming language with the largest percentage of top-paid developers, i.e. those whose salaries are in the top quartile of their country or region.\n\nCheck out the State of Developer Ecosystem Report to learn more about the results.\nTo conclude, we wish you a peaceful end of the year, a lovely holiday season, and… happy development!\nThe IntelliJ Scala Plugin team",
        "dc:creator": "Maciej Gorywoda",
        "content": "The Year in Review Time flies. Only a year ago, we saw the release of Scala 3.4.0-RC1, and now we&#8217;re trying out Scala 3.6.2 with many new experimental features. The last 12 months have brought many new features to the IntelliJ Scala Plugin as well. A year ago we introduced X-Ray mode, which lets you [&#8230;]",
        "contentSnippet": "The Year in Review Time flies. Only a year ago, we saw the release of Scala 3.4.0-RC1, and now we’re trying out Scala 3.6.2 with many new experimental features. The last 12 months have brought many new features to the IntelliJ Scala Plugin as well. A year ago we introduced X-Ray mode, which lets you […]",
        "guid": "https://blog.jetbrains.com/?post_type=scala&p=535934",
        "categories": [
          "intellij",
          "scala"
        ],
        "isoDate": "2024-12-20T15:29:30.000Z"
      },
      {
        "creator": "Oleg Zinovyev",
        "title": "What’s Next for CLion: The 2025.1 Roadmap",
        "link": "https://blog.jetbrains.com/clion/2024/12/2025-1-roadmap/",
        "pubDate": "Thu, 19 Dec 2024 08:59:47 +0000",
        "content:encodedSnippet": "We’ve begun work on our next major release, 2025.1, which we’ll introduce early next year. After reading through your valuable feedback and feature requests, and taking into account our own strategic goals, we’ve prioritized the following areas for development:\n🚀 The CLion Nova language engine\n🛠️ The debugger \n🤖 Embedded development\n🏗️ Project formats and build tools\nRead on to learn more about our planned updates.\nOur team is committed to creating an IDE that makes development smooth and productive. However, the following is a preliminary roadmap only – we can’t guarantee that all the issues listed below will be addressed in CLion 2025.1. It’s possible that unforeseen circumstances could require us to modify our plans or implementation timelines for some items.\nCLion Nova\nWe’re still working to improve our new, faster, and more powerful CLion Nova language engine by optimizing its performance and expanding its feature set. With each passing day, it’s becoming even more capable of serving as the default engine for all users, new and existing.\nFor the 2025.1 release, our CLion Nova development efforts will focus on some of the most requested features, including out-of-project file support, multiple settings and actions, and smart keys.\nOut-of-project files\nCLion Nova doesn’t properly support header and source files that are not included in a project and, therefore, doesn’t provide the necessary information about a compiler. This causes various problems with code analysis and code assistance.\nSupport for these kinds of out-of-project files in CLion Nova is one of the most anticipated features we’ve been working on for upcoming releases (CPP-38040). We’re pleased to report that we’ve made some progress in this area and hope to introduce this feature in 2025.1. \nIt’s worth mentioning that, historically, the ReSharper C++ backend used in CLion Nova was designed to work with projects where every file, including header files, is explicitly mentioned in the build scripts. This is not the case for most build systems CLion supports. For this reason, we need to restore the set of tradeoffs and heuristics that CLion Classic uses for such cases.\nWith this in mind, it would be helpful if you could share any use cases involving header files that are not included anywhere else in your project or source files that are not used during the build process. Would you like for them to be included in project-wide actions like Find Usages? Or would you like to see error highlighting there? Please share your use cases in the ticket or in the comments section below.\nSettings and actions\nWe plan to implement several settings and actions available in CLion Classic but missing in CLion Nova, which will make development with the new engine more convenient. These include:\nC/C++ auto-import options, such as Auto import local files with quotes and Auto import on completion (CPP-35360).\nStyle settings for header guards, which help keep their names according to the format you prefer and allow you to create custom templates (CPP-36933).\nThe ability to move a caret to a code block end or start using a shortcut (CPP-36147).\nSmart keys\nSmart keys are editor actions that allow you to write code faster and make working in the IDE even smoother. Several of these actions are available in CLion Classic but are still missing in CLion Nova. Here are some of the smart keys we’ll be adding in the next release:\nJump outside closing bracket/quote with Tab when typing (CPP-24705).\nUnindent on Backspace (CPP-35995).\nReformat block on typing `}` (CPP-38777).\nDebugger\nRegarding new debugger features for v2025.1, we plan to focus on some of the most long-awaited, such as:\nQt pretty printers: We’ll add support for Qt pretty printers to improve the readability of Qt variables, arrays, and other data types during debugging (CPP-605).\nCustom LLDB binary: Users who can’t use the CLion’s bundled LLDB will soon be able to switch to a custom LLDB binary (CPP-3589).\nEmbedded development\nFor embedded development, we’re focusing on improving debug servers and adding the ability to monitor variables and memory values in real-time while debugging.\nDebug servers\nWe’re continuing to refine our experimental Debug Servers configuration option introduced in v2024.3. This option allows you to configure a debug server for a specific debug probe and use it to run or debug a build target. As a result, debug servers make it easier to set up and run debugging for embedded and remote development.\nFor the next release, we’ll make the feature easier to configure by adding the following:\nESP32 Debug Server: In addition to the Generic and SEGGER J-Link preconfigured debug server templates, we’ll add a new template for ESP32 MCUs. This will simplify flashing these chips and debugging applications.\nUX improvements: We also plan to improve the user experience when working with debug servers, focusing on streamlining the setup process and the Debug Servers dialog UI.\n\n\n\n\nWe encourage you to try the Debug Servers option and share your feedback. To do so, use Help | Submit Feedback… in the main IDE menu or leave a comment under this post.\nWatching variable values and memory changes in real time\nObserving variable values and memory changes in real time without stopping a program is critical for many embedded developers. It allows them to monitor the device state and application performance, which is especially helpful for testing and error detection.\nIf you’re a developer waiting for this feature, or are interested in trying it, we’d appreciate it if you’d take a few minutes to fill out our survey and share your use cases and challenges. This will help us address the most important user needs and improve the feature.\nProject formats and build tools\nAmong the many enhancements to project formats and build tools, the most significant relate to support for Zephyr, Bazel, and a remote Docker toolchain.\nSysbuild support for Zephyr\nOne of the Zephyr-related updates planned for the upcoming release is support for sysbuild. This is a high-level build system that combines other build systems, such as West and CMake. The main strength of sysbuild is that it provides the ability to build multiple images for boards with multiple SoCs (systems on chip) or SoCs with multiple CPU cores. Another popular example of using sysbuild is when one application is built for a boot loader while another is built for the core CPU.\nBazel plugin enhancements\nWe’re planning several improvements to CLion’s Bazel support, the most important of which are as follows:\nSupport for qsync to import C/C++ projects: Query sync, or qsync, is one of the two ways to import Bazel projects for C/C++. The other is aspect sync, which CLion currently uses. In short, qsync is faster because it allows you to import only the parts of a project that you need. We aim to add basic support for qsync in the next release (CPP-42253).\nSupport for Google Test and Catch2 when working with Bazel projects using CLion Nova. We’ve already added this to v2024.12.17 of the Bazel plugin, and it will be available in CLion Nova soon.\nThe latest CMake and CMake Presets versions\nIn the previous release, we updated the CMake bundle to 3.30. For CLion v2025.1, we plan to update the build system to the latest CMake, v3.31, which will also include support for CMake Prestes v10. CMake Presets are useful when you want to specify common build options and share them with other users.\nRemote Docker toolchain\nCurrently, CLion’s Docker toolchain only allows working with containers locally. There are two modes for working with containers running remotely: via Gateway and with local sources. In v2025.1, we plan to add support for a remote Docker toolchain, allowing users to work with remote containers via an SSH connection (CPP-42340).\nCall for feedback\nWe value your feedback – your experiences and insights are essential to our mission to continuously improve CLion. Please share your ideas in the comments section below or submit them to our issue tracker.\nThe free Early Access Program, which will give you the chance to try all of the new features planned for the next major release, is just around the corner. In the meantime, upgrade to CLion 2024.3 if you haven’t already done so, and let us know what you think!\nDOWNLOAD CLION 2024.3",
        "dc:creator": "Oleg Zinovyev",
        "content": "We’ve begun work on our next major release, 2025.1, which we’ll introduce early next year. After reading through your valuable feedback and feature requests, and taking into account our own strategic goals, we’ve prioritized the following areas for development: 🚀 The CLion Nova language engine 🛠️ The debugger&#160; 🤖 Embedded development 🏗️ Project formats and [&#8230;]",
        "contentSnippet": "We’ve begun work on our next major release, 2025.1, which we’ll introduce early next year. After reading through your valuable feedback and feature requests, and taking into account our own strategic goals, we’ve prioritized the following areas for development: 🚀 The CLion Nova language engine 🛠️ The debugger  🤖 Embedded development 🏗️ Project formats and […]",
        "guid": "https://blog.jetbrains.com/?post_type=clion&p=535817",
        "categories": [
          "news",
          "roadmap",
          "bazel",
          "clionnova",
          "debugger",
          "embedded",
          "qt",
          "zephyr-west"
        ],
        "isoDate": "2024-12-19T08:59:47.000Z"
      },
      {
        "creator": "Daniela Bentrup",
        "title": "Introducing Fleet’s New Islands UI",
        "link": "https://blog.jetbrains.com/fleet/2024/12/introducing-fleets-new-islands-ui/",
        "pubDate": "Wed, 18 Dec 2024 21:10:04 +0000",
        "content:encodedSnippet": "We envisioned Fleet as a coding tool with a clear minimalist design that doesn’t overwhelm and helps keep you focused. Today we’re introducing a new, bolder look for Fleet. We believe that this new direction in Fleet’s UI will help make your developer experience more cohesive, intuitive, and, of course, productive.\nNew islands layout\nThe most notable change introduced in this update is the islands layout. The new design visually separates the editor and tool panels, creating a cleaner and more focused workspace. This update not only gives Fleet a sleek, organic look but also helps you focus on the task at hand by minimizing distractions and guiding your attention to the content within each panel.\n\n\n\n\nWe’ve placed the island-like panels on a single canvas to build a modular and scalable layout system. The UI is split into easily distinguishable areas and elements like editor and tools that represent different parts of the development workflow and can be easily rearranged.\nFleet’s tab-based navigation further enhances the smooth and intuitive user experience. By allowing for flexible content arrangement, you can easily switch between different files, streamlining your workflow.\nEnhanced editor\nThe editor has also seen significant updates, including a more streamlined and lightweight Search and Replace and an improved, visually refined Problems widget.\n\n\n\nPinned tabs\nFleet now also offers you the ability to pin tabs, allowing you to keep your most important tabs open at all times. Without a close icon, pinned tabs can’t be closed accidentally. To pin or unpin a tab, just right-click it and select Pin or Unpin from the popup menu. You can also drag a pinned tab outside a pinned group to unpin it.\n\n\n\nUpdated UI kit\nThe UI kit has been fully revamped for the islands UI. All components have been refined to ensure a more polished and cohesive look aligned with the new visual style. The transparent style is used in buttons, tabs, and other components, ensuring clarity and strong contrast with backgrounds and text labels.\n\n\n\nNew color palette\nFor the new UI, we’ve designed a balanced color system that is scalable and allows you to create custom color palettes.\nThe UI’s color scheme ensures accessibility, as all text is clearly readable and compliant with Web Content Accessibility Guidelines (WCAG) guidelines.\n\n\n\nRefined typography\nOur new typographic system now uses the Inter variable, providing improved control over weight adjustments for optimal readability in both dark and light themes.\nThe updated font styles follow a unified type scale, ensuring harmony and visual appeal.\n\n\n\nImproved inline diff preview\nThe inline diff preview in the editor has been updated with a new floating toolbar, allowing for quick access to popular actions.\n\n\n\nRedesigned Goto popup\nTo align with the new design, we’ve reworked the Goto popup, which now separates information more clearly.\n\n\n\nUpdated interlines\nWe’ve also updated interlines by better separating the file preview and adding a status bar, clarifying the file’s source.\n\n\n\nDrag-and-drop and resize\nNew drag-and-drop and resize functionality now includes improved visual accents, enhancing usability and providing clearer feedback for user actions.\n\n\n\nRefreshed default themes\nThe new UI comes with updated dark, light, and purple themes. Any existing custom themes will revert to these new defaults, but you can personalize them as desired.\nWe want to hear from you!\nDownload and explore the new UI today, and let us know what you think in the comments below.",
        "dc:creator": "Daniela Bentrup",
        "content": "We envisioned Fleet as a coding tool with a clear minimalist design that doesn’t overwhelm and helps keep you focused. Today we’re introducing a new, bolder look for Fleet. We believe that this new direction in Fleet’s UI will help make your developer experience more cohesive, intuitive, and, of course, productive. New islands layout The [&#8230;]",
        "contentSnippet": "We envisioned Fleet as a coding tool with a clear minimalist design that doesn’t overwhelm and helps keep you focused. Today we’re introducing a new, bolder look for Fleet. We believe that this new direction in Fleet’s UI will help make your developer experience more cohesive, intuitive, and, of course, productive. New islands layout The […]",
        "guid": "https://blog.jetbrains.com/?post_type=fleet&p=535461",
        "categories": [
          "news"
        ],
        "isoDate": "2024-12-18T21:10:04.000Z"
      },
      {
        "creator": "Daniela Bentrup",
        "title": "Fleet 1.44 Is Here With New UI, Zig Language Support, and More Enhancements",
        "link": "https://blog.jetbrains.com/fleet/2024/12/fleet-1-44-is-here-with-new-ui-zig-language-support-and-more-enhancements/",
        "pubDate": "Wed, 18 Dec 2024 21:09:01 +0000",
        "content:encodedSnippet": "Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this version using Toolbox App.\nLet’s take a closer look at the highlights.\nDownload Fleet 1.44\nNew features\nWith version 1.44, we’ve enabled a new UI for all Fleet users. It introduces impactful modifications to enhance your user experience, increase workflow organization, and make Fleet easier to navigate. The new UI has a unique visual identity, providing a consistent color palette, increased contrast, updated typography, and better accents. The tab-based navigation further enhances the smooth and intuitive user experience.\nFor more information about the new UI, please read this blog post.\n\n\n\n\n\nZig language support plugin for Fleet is here. Zig is a free and open-source general-purpose programming language, often referred to as the better C language. Zig has been widely adopted due to its simplicity, and Fleet 1.44 introduces a frontend implementation for .zig and .zon files. This includes indentation, commenting, typing assistance, highlighting, file templates, and an LSP-based formatter (.zig files only). Fleet also supports basic run tasks based on the Zig Build System and the processing of the build output to find Zig file references. Fleet further provides the auto download of ZLS (the LSP implementation for Zig) and launches it for Smart Mode. This enables code completion, better access to docs, navigation to definitions and usages, and more. To install the the Zig plugin, click on the gear icon in the top right corner and go to Plugins. \nImprovements\nFleet now notifies you when opening a Kotlin Multiplatform (KMP) project where the Android SDK is needed  but not yet installed. Just click the Fix button in the notification to easily install the missing Android SDK.\nWe’ve resolved the issue that prevented some KMP Gradle projects from completing the import process.\n\n\n\n\n\nWith Fleet 1.44, smooth caret animation becomes the default. This feature can be configured via Settings | Editor | Caret.\n\n\n\nBug fixes\nWe’ve also fixed several bugs:\nCreating a dev container now works as expected [FL-29032].\nWhen using remote workspaces in Fleet, copy-pasting works as expected in the file tree [FL-30260].\nThe documentation popup no longer hides the quick-fix popup [FL-29023].\nSee the full release notes for more details about Fleet 1.44.\nPlease report any problems you encounter to our issue tracker, and stay tuned for further exciting announcements.\nJoin the JetBrains Tech Insights Lab to participate in surveys, interviews, and UX studies, and help us make JetBrains Fleet better!",
        "dc:creator": "Daniela Bentrup",
        "content": "Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this version using Toolbox App. Let’s take a closer look at the highlights. Download Fleet 1.44 New features Improvements Bug fixes We&#8217;ve also fixed several bugs: See the full release notes for more details about Fleet [&#8230;]",
        "contentSnippet": "Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this version using Toolbox App. Let’s take a closer look at the highlights. Download Fleet 1.44 New features Improvements Bug fixes We’ve also fixed several bugs: See the full release notes for more details about Fleet […]",
        "guid": "https://blog.jetbrains.com/?post_type=fleet&p=534895",
        "categories": [
          "news",
          "releases"
        ],
        "isoDate": "2024-12-18T21:09:01.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": [
      {
        "creator": "Malay Haldar",
        "title": "Improving Search Ranking for Maps",
        "link": "https://medium.com/airbnb-engineering/improving-search-ranking-for-maps-13b03f2c2cca?source=rss----53c7c27702d5---4",
        "pubDate": "Wed, 18 Dec 2024 18:02:37 GMT",
        "content:encodedSnippet": "How Airbnb is adapting ranking for our map interface.\n\nMalay Haldar, Hongwei Zhang, Kedar Bellare Sherry Chen\nSearch is the core mechanism that connects guests with Hosts at Airbnb. Results from a guest’s search for listings are displayed through two interfaces: (1) as a list of rectangular cards that contain the listing image, price, rating, and other details on it, referred to as list-results and (2) as oval pins on a map showing the listing price, called map-results. Since its inception, the core of the ranking algorithm that powered both these interfaces was the same — ordering listings by their booking probabilities and selecting the top listings for display.\nBut some of the basic assumptions underlying ranking, built for a world where search results are presented as lists, simply break down for maps.\nWhat Is Different About Maps?\nThe central concept that drives ranking for list-results is that user attention decays starting from the top of the list, going down towards the bottom. A plot of rank vs click-through rates in Figure 1 illustrates this concept. X-axis represents the rank of listings in search results. Y-axis represents the click-through rate (CTR) for listings at the particular rank.\nFigure 1: Click-through rates by listing search rank\nTo maximize the connections between guests and Hosts, the ranking algorithm sorts listings by their booking probabilities based on a number of factors and sequentially assigns their position in the list-results. This often means that the larger a listing’s booking probability, the more attention it receives from searchers.\nBut in map-results, listings are scattered as pins over an area (see Figure 2). There is no ranked list, and there is no decay of user attention by ranking position. Therefore, for listings that are shown on the map, the strategy of sorting by booking probabilities is no longer applicable.\nFigure 2: Map results\nUniform User Attention\nTo adapt ranking to the map interface, we look at new ways of modeling user attention flow across a map. We start with the most straightforward assumption that user attention is spread equally across the map pins. User attention is a very precious commodity and most searchers only click through a few map pins (see Figure 3). A large number of pins on the map means those limited clicks may miss discovering the best options available. Conversely, limiting the number of pins to the topmost choices increases the probability of the searcher finding something suitable, but runs the risk of removing their preferred choice.\nFigure 3: Number of distinct map pins clicked by percentage of searchers\nWe test this hypothesis, controlled by a parameter . The parameter serves as an upper bound on the ratio of the highest booking probability vs the lowest booking probability when selecting the map pins. The bounds set by the parameter controls the booking probability of the listings behind the map pins. The more restricted the bounds, the higher the average booking probability of the listings presented as map pins. Figure 4 summarizes the results from A/B testing a range of parameters.\nThe reduction in the average impressions to discovery metric in Figure 4 denotes the fewer number of map pins a searcher has to process before clicking the listing that they eventually book. Similarly, the reduction in average clicks to discovery shows the fewer number of map pins a searcher has to click through to find the listing they booked.\nFigure 4: Exploring through online A/B experiments\nLaunching the restricted version resulted in one of the largest bookings improvement in Airbnb ranking history. More importantly, the gains were not only for bookings, but for quality bookings. This could be seen by the increase in trips that resulted in 5-star rating after the stay from the treatment group, in comparison to trips from the control group.\nTiered User Attention\nIn our next iteration of modeling user attention, we separate the map pins into two tiers. The listings with the highest booking probabilities are displayed as regular oval pins with price. Listings with comparatively lower booking probabilities are displayed as smaller ovals without price, referred to as mini-pins (Figure 5). By design, mini-pins draw less user attention, with click-through rates about 8x less than regular pins.\nFigure 5: Oval pins with price and mini-pins\nThis comes in handy particularly for searches on desktop where 18 results are shown in a grid on the left, each of them requiring a map pin on the right (Figure 6).\nFigure 6: Search results on desktop\nThe number of map pins is fixed in this case, and limiting them, as we did in the previous section, is not an option. Creating the two tiers prioritizes user attention towards the map pins with the highest probabilities of getting booked. Figure 7 shows the results of testing the idea through an online A/B experiment.\nFigure 7: Experiment results for tiered map pins\nDiscounted User Attention\nIn our final iteration, we refine our understanding of how user attention is distributed over the map by plotting the click-through rate of map pins located at different coordinates on the map. Figure 8 shows these plots for the mobile (top) and the desktop apps (bottom).\nFigure 8: Click-through rates of map pins across map coordinates.\nTo maximize the chances that a searcher will discover the listings with the highest booking probabilities, we design an algorithm that re-centers the map such that the listings with the highest booking probabilities appear closer to the center. The steps of this algorithm are illustrated in Figure 9, where a range of potential coordinates are evaluated and the one which is closer to the listings with the highest booking probabilities is chosen as the new center.\nFigure 9: Algorithm for finding optimal center\nWhen tested in an online A/B experiment, the algorithm improved uncancelled bookings by 0.27%. We also observed a reduction of 1.5% in map moves, indicating less effort from the searchers to use the map.\nConclusion\nUsers interact with maps in a way that’s fundamentally different from interacting with items in a list. By modeling the user interaction with maps in a progressively sophisticated manner, we were able to improve the user experience for guests in the real world. However, the current approach has a challenge that remains unsolved: how can we represent the full range of available listings on the map? This is part of our future work. A more in-depth discussion of the topics covered here, along with technical details, is presented in our research paper that was published at the KDD ’24 conference. We welcome all feedback and suggestions.\nIf this type of work interests you, we encourage you to apply for an open position today.\n\nImproving Search Ranking for Maps was originally published in The Airbnb Tech Blog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Malay Haldar",
        "guid": "https://medium.com/p/13b03f2c2cca",
        "categories": [
          "machine-learning",
          "data-science",
          "engineering",
          "artificial-intelligence",
          "technology"
        ],
        "isoDate": "2024-12-18T18:02:37.000Z"
      }
    ]
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Brady Gaster",
        "title": "Connect securely to your Azure resources",
        "link": "https://devblogs.microsoft.com/visualstudio/connect-securely-to-your-azure-resources/",
        "pubDate": "Tue, 24 Dec 2024 13:00:11 +0000",
        "content:encodedSnippet": "Visual Studio 2022’s Connected Services features are being updated to help you start secure. In the past, for example with Azure Storage, we’d inject the entire connection string into your configuration. With this update, we’ve removed the secrets from the UX – and from what we save to configuration – altogether. This means your code has fewer secrets in it, so you won’t push those into your source control repository inadvertently.\n\nIntegrated authentication, by default\nPrior to this update, Connected Services would inject secret-inclusive connection strings for resources like Azure Storage into your secrets. If you were using secrets.json for local storage, this would result in your secrets being stored in files on disk.\n\nAfter this update, your secrets.json will contain no actual secrets, but rather the Azure Storage endpoints for your service instance. Using the latest Azure SDKs, your code connects to your Azure resources using your Visual Studio or Azure CLI login. Locally, your logged-in credential does the magic; in Azure, the app service’s managed identity takes over!\n\nBenefits with this update\nEnhanced security: Fewer secrets on disk means your development process is automatically more secure, since you mitigate the potential for these secrets to be inadvertently committed to source control.\nSimplified development and deployment: Focus on what you do best – coding – while Connected Services handles the tedious parts, more securely than ever.\nAutomated configuration: During publishing, your app is seamlessly configured with the necessary identity and roles needed to access resources, making the process smoother than ever.\nThank You for Your Feedback\nYour invaluable feedback drives our continuous improvement. We’re thrilled to bring you these enhancements and can’t wait to hear about your experiences with the new Connected Services feature. Happy coding!\nThe post Connect securely to your Azure resources appeared first on Visual Studio Blog.",
        "dc:creator": "Brady Gaster",
        "content": "<p>Visual Studio 2022&#8217;s Connected Services features are being updated to help you start secure. In the past, for example with Azure Storage, we’d inject the entire connection string into your configuration. With this update, we’ve removed the secrets from the UX – and from what we save to configuration – altogether. This means your code [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/connect-securely-to-your-azure-resources/\">Connect securely to your Azure resources</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Visual Studio 2022’s Connected Services features are being updated to help you start secure. In the past, for example with Azure Storage, we’d inject the entire connection string into your configuration. With this update, we’ve removed the secrets from the UX – and from what we save to configuration – altogether. This means your code […]\nThe post Connect securely to your Azure resources appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251830",
        "categories": [
          "Administration",
          "Reliability",
          "Team and Development",
          "Visual Studio",
          "Authentication",
          "Azure App Services",
          "Azure Storage"
        ],
        "isoDate": "2024-12-24T13:00:11.000Z"
      },
      {
        "creator": "Brady Gaster",
        "title": "Security updates to Azure publishing from Visual Studio",
        "link": "https://devblogs.microsoft.com/visualstudio/security-updates-to-azure-publishing-from-visual-studio/",
        "pubDate": "Mon, 23 Dec 2024 13:00:24 +0000",
        "content:encodedSnippet": "Visual Studio 2022 introduces a new feature to improve the security of publishing applications to Azure App Service. This feature is designed to disable Basic Authentication and enable integrated security for a more secure publishing process.\n\nBasic Authentication has been identified as a less secure method for managing app deployments. Visual Studio 2022 addresses this issue by offering you an option to disable Basic Authentication, which enhances security by using integrated authentication.\nThe problem with Basic Authentication\nBasic Authentication involves sending user credentials in a format that is not highly secure, making it vulnerable to interception. This poses a risk to the integrity of applications.\nSecure publishing with integrated authentication\nThe new feature in Visual Studio 2022 disables Basic Authentication and enables integrated security for publishing to Azure App Service. This ensures that publishing credentials is handled securely, reducing the risks associated with Basic Authentication.\nWhen publishing to an Azure App Service that has Basic Authentication enabled (which is not recommended), users will see the Turn on Basic Authentication option, and it will be unchecked by default. Customers who need to retain Basic Authentication can check the box, but given the recommendation is to disable Basic Authentication it’s unchecked by default, so you start secure if this is the first time you’re publishing or, you get secure once you go through the publishing process after you update Visual Studio.\n\nIf you’ve created the Web App recently via the portal or this or any future version of Visual Studio, Basic Authentication will be disabled by default. For any Web App that’s already got Basic Authentication disabled, we circumvent inadvertently making the Web App less secure by disabling the checkbox altogether, so you stay secure.\n\nThis feature improves the overall security of the publishing process, ensuring that sensitive credentials are not exposed. It also simplifies the process by defaulting to a more secure option, reducing the need for manual security configurations. If, at any point, you need to re-enable Basic Authentication, this is always possible in the Azure Portal.\nConclusion\nWe deeply appreciate your invaluable feedback, which plays a crucial role in enhancing Visual Studio. Thank you for being a vital part of our community.\nThe post Security updates to Azure publishing from Visual Studio appeared first on Visual Studio Blog.",
        "dc:creator": "Brady Gaster",
        "content": "<p>Visual Studio 2022 introduces a new feature to improve the security of publishing applications to Azure App Service. This feature is designed to disable Basic Authentication and enable integrated security for a more secure publishing process. Basic Authentication has been identified as a less secure method for managing app deployments. Visual Studio 2022 addresses this [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/security-updates-to-azure-publishing-from-visual-studio/\">Security updates to Azure publishing from Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Visual Studio 2022 introduces a new feature to improve the security of publishing applications to Azure App Service. This feature is designed to disable Basic Authentication and enable integrated security for a more secure publishing process. Basic Authentication has been identified as a less secure method for managing app deployments. Visual Studio 2022 addresses this […]\nThe post Security updates to Azure publishing from Visual Studio appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251823",
        "categories": [
          "Administration",
          "Reliability",
          "Team and Development",
          "Visual Studio",
          "Authentication",
          "Azure App Services"
        ],
        "isoDate": "2024-12-23T13:00:24.000Z"
      },
      {
        "creator": "Rhea Patel",
        "title": "GitHub Copilot Free is here in Visual Studio",
        "link": "https://devblogs.microsoft.com/visualstudio/github-copilot-free-is-here-in-visual-studio/",
        "pubDate": "Wed, 18 Dec 2024 18:14:49 +0000",
        "content:encodedSnippet": "If you haven’t already heard, GitHub just announced Copilot Free! And great news: you can already start using Copilot Free right now in Visual Studio. It’s available now, and we’re putting the finishing touches on a more streamlined experience in January.\nWe’re excited to bring these benefits to the entire Visual Studio family. With Copilot Free, you’ll have AI-powered tools right at your fingertips—smarter debugging, AI generated commit messages, AI-breakpoint placement, and of course, direct access to Completions, Chat, and much more. Developers have seen a 25% speed increase with Copilot—and now you can experience that boost firsthand in Visual Studio.\nReady to give it a try?\n Sign up for GitHub Copilot Free\n\nA couple of recommendations\nTry it now: Don’t wait to experience the benefits. Give GitHub Copilot Free a spin in Visual Studio today. Just note that for now, you won’t be notified when you hit your usage limit, but we’ve got you covered with updates coming in January.\nStay Updated: Keep your Visual Studio installation current and subscribe to the preview channels. By staying on the cutting edge, you’ll be among the first to enjoy the latest updates, ensuring you get the most out of Copilot Free as we roll out new features.\nLooking ahead to January\nCopilot Free will be even easier to use in Visual Studio. You’ll see clear indicators when you hit your usage limits—no more guesswork. And if you find yourself needing more, upgrading to a no-limits plan will be smooth and seamless, so you can keep your ideas flowing.\nKeep an eye on the latest previews for these updates, and don’t forget to share your feedback through Developer Community!\nThe post GitHub Copilot Free is here in Visual Studio appeared first on Visual Studio Blog.",
        "dc:creator": "Rhea Patel",
        "content": "<p>If you haven’t already heard, GitHub just announced Copilot Free! And great news: you can already start using Copilot Free right now in Visual Studio. It&#8217;s available now, and we&#8217;re putting the finishing touches on a more streamlined experience in January. We’re excited to bring these benefits to the entire Visual Studio family. With Copilot [&#8230;]</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/github-copilot-free-is-here-in-visual-studio/\">GitHub Copilot Free is here in Visual Studio</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "If you haven’t already heard, GitHub just announced Copilot Free! And great news: you can already start using Copilot Free right now in Visual Studio. It’s available now, and we’re putting the finishing touches on a more streamlined experience in January. We’re excited to bring these benefits to the entire Visual Studio family. With Copilot […]\nThe post GitHub Copilot Free is here in Visual Studio appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=251812",
        "categories": [
          "Copilot",
          "GitHub Copilot",
          "Visual Studio",
          "GitHub",
          "GitHub Copilot Chat"
        ],
        "isoDate": "2024-12-18T18:14:49.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": [
      {
        "creator": "sunyzero",
        "title": "페도라 리눅스 DNF 저장소 설정 튜닝하기 - Fedora 41 dnf5 repository",
        "link": "http://sunyzero.tistory.com/308",
        "pubDate": "Sun, 22 Dec 2024 21:03:57 +0900",
        "author": "sunyzero",
        "comments": "http://sunyzero.tistory.com/308#entry308comment",
        "content": "<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">페도라 리눅스를 처음 설치하면 쓸데없는 패키지 저장소(dnf repository)들이 기본으로 많이 설치된다. 따라서 dnf 명령을 내릴 때마다 속도가 상당히 느려진다. 만일 약간의 시간을 들여서 저장소 설정를 튜닝해주면 dnf 명령시 패키지 검색이나 다운로드 속도가 많이 개선된다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">DNF 저장소 튜닝은 크게 3가지이다. 첫째는 불필요한 저장소를 비활성화하는 것이다. 둘째는 저장소를 자주 업데이트하지 않도록 expiration 시간을 늘려주는 것이다. 세번째는 국내 미러 사이트를 직접 접속하도록 지정하는 방법이다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_fedora_dnf5.jpg\" data-origin-width=\"1280\" data-origin-height=\"747\"><span data-url=\"https://blog.kakaocdn.net/dn/tBd5S/btsLtfKjsDq/6yCK93rwXZtsfMRZvjISj1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/tBd5S/btsLtfKjsDq/6yCK93rwXZtsfMRZvjISj1/img.jpg\" data-alt=\"Fedora DNF5\"><img src=\"https://blog.kakaocdn.net/dn/tBd5S/btsLtfKjsDq/6yCK93rwXZtsfMRZvjISj1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtBd5S%2FbtsLtfKjsDq%2F6yCK93rwXZtsfMRZvjISj1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_fedora_dnf5.jpg\" data-origin-width=\"1280\" data-origin-height=\"747\"/></span><figcaption>Fedora DNF5</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">1. 불필요한 저장소 비활성화</span></h2>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">현재 저장소 목록을 확인하기 위해 <span style=\"background-color: #9feec3;\"><b>dnf repolist</b></span> 명령을 내려보면 이런저런 저장소가 많이 보인다. 기본적으로 활성화된(enabled) 저장소만 나타난다. 비활성활된 저장소 목록까지 모두 포함해서 보려면 --all 옵션을 추가하여 <span style=\"background-color: #f6e199;\">dnf repolist --all</span>이라고 명령한다. 반대로 비활성화된 목록만 볼 때는 --disabled 옵션을 사용해서 <span style=\"background-color: #f6e199;\">dnf repolist --disabled</span> 라고 명령하면 된다.</span></p>\n<pre id=\"code_1734858919927\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf repolist\nrepo id                                                                             repo name\ncopr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons             Copr repo for gnome-shell-extension-desktop-icons owned by atim\ncopr:copr.fedorainfracloud.org:phracek:PyCharm                                      Copr repo for PyCharm owned by phracek\ndocker-ce-stable                                                                    Docker CE Stable - x86_64\nfedora                                                                              Fedora 41 - x86_64\nfedora-cisco-openh264                                                               Fedora 41 openh264 (From Cisco) - x86_64\ngoogle-chrome                                                                       google-chrome\nrpmfusion-free                                                                      RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                                              RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                                                   RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-nvidia-driver                                                     RPM Fusion for Fedora 41 - Nonfree - NVIDIA Driver\nrpmfusion-nonfree-steam                                                             RPM Fusion for Fedora 41 - Nonfree - Steam\nrpmfusion-nonfree-updates                                                           RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                                             Fedora 41 - x86_64 - Updates</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">위 저장소 목록들이 어떤 역할을 하는지는 우측에 설명(repo name)이 나와있다. 중요한 것들로는 fedora는 기본 패키지들이 있는 곳이고, updates는 업데이트 된 패키지들이 들어있다. rpmfusion은 기본적으로 추가적인 패키지들을 제공하는 저장소이다. 이외에 remi나 vscode, google-chrome 등도 많이 사용하는데 설치 후 쓸데없이 활성화 되어있으면 dnf 명령을 느리게 한다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">1.1. dnf config-manager 명령어 사용하기</span></h3>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">저장소 중에 docker-ce-stable을 비활성화하기 위해 아래와 같이 config-manager 기능을 사용해보자. 비활성화는 enabled=0 으로 속성을 변경하는 것이고, 이는 실제로는 /etc/yum.repos.d/docker-ce-stable.repo 파일의 enabled=0 항목을 설정하는 것과 같다. 반대로 enabled=1이 되면 활성화된다. 설정 변경후 dnf repolist 를 내려보면 docker-ce-stable이 사라진 것을 볼 수 있다.</span></p>\n<pre id=\"code_1734858973718\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager setopt docker-ce-stable.enabled=0\n\n# dnf repolist\nrepo id                                                                             repo name\ncopr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons             Copr repo for gnome-shell-extension-desktop-icons owned by atim\ncopr:copr.fedorainfracloud.org:phracek:PyCharm                                      Copr repo for PyCharm owned by phracek\nfedora                                                                              Fedora 41 - x86_64\nfedora-cisco-openh264                                                               Fedora 41 openh264 (From Cisco) - x86_64\ngoogle-chrome                                                                       google-chrome\nrpmfusion-free                                                                      RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                                              RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                                                   RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-nvidia-driver                                                     RPM Fusion for Fedora 41 - Nonfree - NVIDIA Driver\nrpmfusion-nonfree-steam                                                             RPM Fusion for Fedora 41 - Nonfree - Steam\nrpmfusion-nonfree-updates                                                           RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                                             Fedora 41 - x86_64 - Updates</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">이렇게 PyCharm이나 gnome-shell-extension-desktop-icons, rpmfusion-nonfree-nvidia-driver, rpmfusion-nonfree-steam도 비활성화해보자. 구글 크롬 저장소인 google-chrome도 자주 업데이트 하지 않는다면 비활성화 해두면 좋다. 가끔 1~2개월마다 업데이트 하라고 할 때만 잠시 활성화 해서 업데이트하면 된다. 이럴 때는 dnf <b><span style=\"background-color: #9feec3;\">--enable-repo=google-chrome</span></b> 옵션을 추가해서 업데이트하면 잠시 활성화 될 뿐 전체 설정을 건드리지는 않는다.</span></p>\n<pre id=\"code_1734859551958\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager setopt copr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons.enabled=0\n\n# dnf config-manager setopt copr:copr.fedorainfracloud.org:phracek:PyCharm.enabled=0\n\n# dnf config-manager setopt rpmfusion-nonfree-steam.enabled=0\n\n# dnf config-manager setopt rpmfusion-nonfree-nvidia-driver.enabled=0\n\n#  dnf config-manager setopt google-chrome.enabled=0\n\n# dnf repolist\nrepo id                                                       repo name\nfedora                                                        Fedora 41 - x86_64\nfedora-cisco-openh264                                         Fedora 41 openh264 (From Cisco) - x86_64\nrpmfusion-free                                                RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                        RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                             RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-updates                                     RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                       Fedora 41 - x86_64 - Updates</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">이제 활성화된 저장소의 갯수가 7개로 줄었다. 이 정도만 해둬도 dnf 명령이 상당히 빨라진다. 처음 설치 이후 새로운 패키지를 거의 설치하지 않는 경우라면 fedora도 빼도 된다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">여기서 좀 더 타이트하게 하려면 rpmfusion-free와 rpmfusion-nonfree도 비활성화하면 더 빨라진다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">1.2. dnf config-manager의 작동 방식 이해하기</span></h3>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">저장소 파일은 /etc/yum.repos.d에 있지만 이 파일들을 직접 수정하면 나중에 저장소 패키지가 업데이트 될 때 덮어 쓰여진다. 따라서 dnf에서는 override 기법을 이용하여 추가 설정한다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">dnf의 오버라이드 설정 파일의 위치는 /etc/dnf/repos.override.d 디렉토리에 있다. 앞서 설정한 부분이 여기에 어떻게 저장되는지 살펴보자.</span></p>\n<pre id=\"code_1734862601991\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code> # cd /etc/dnf/repos.override.d\n \n # ls\n 99-config_manager.repo\n\n# cat 99-config_manager.repo\n# Generated by dnf5 config-manager.\n# Do not modify this file manually, use dnf5 config-manager instead.\n[docker-ce-stable]\nenabled=0\n[copr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons]\nenabled=0\n[copr:copr.fedorainfracloud.org:phracek:PyCharm]\nenabled=0\n[rpmfusion-nonfree-steam]\nenabled=0\n[rpmfusion-nonfree-nvidia-driver]\nenabled=0\n[google-chrome]\nenabled=0</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">오버라이딩 설정 파일인 <span style=\"background-color: #f6e199;\">99-config_manager.repo</span> 를 보면 어떤 방식으로 저장되는지 직관적으로 알 수 있다. 이 파일을 직접 vim으로 수정해도 결과는 같지만, 주석문에 Do not modify... 쓰여있듯이 직접 수정하는 것은 좋지 않다. (어느 정도 리눅스 전문가라면 무시하고 직접 편집해도 된다. 애초에 전문가라면 이런 초보 글을 읽지도 않겠지만...)</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\"><span style=\"color: #ee2323;\">setopt로 설정한 값을 변경하는게 아니라 아예 제거해야 하는 경우, 즉 default값으로 되돌리려면 <span style=\"color: #006dd7;\">unsetopt</span>를 사용하면 된다</span>. unsetopt를 사용할 때는 뒤의 값은 적을 필요가 없다. 예를 들어 <span style=\"background-color: #ffc9af;\">dnf config-manager unsetopt docker-ce-stable.enabled</span> 식으로만 명령하면 된다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">참고로 dnf config-manager는 wildcard를 지원한다. 따라서 rpmfusion으로 시작하는 모든 저장소를 disabled 하려면 아래와 같이 와일드카드를 사용해서 명령할 수 있다.</span></p>\n<pre id=\"code_1734867418219\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager setopt rpmfusion-*.enabled=0\n\n# dnf repo list\nrepo id                                                       repo name\nfedora                                                        Fedora 41 - x86_64\nupdates                                                       Fedora 41 - x86_64 - Updates</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">1.3. 구형 dnf 기능인 --disable 옵션</span></h3>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">간혹 옛날 명령인 <span style=\"background-color: #ffc9af;\">dnf config-manager --disable docker-ce-stable</span> 같이 명령하는 경우가 있는데, 이건 옛날 dnf 의 기능이고, 최신의 dnf에서는 삭제되었다. 최신의 dnf 에서 이 명령을 사용하면 아래와 같이 에러가 발생한다.</span></p>\n<pre id=\"code_1734862766022\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager --disable docker-ce-stable\nUnknown argument \"--disable\" for command \"config-manager\". Add \"--help\" for more information about the arguments.</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">2. expire 시간 늘리기</span></h2>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">dnf 명령을 내릴 때 마다 목록을 자주 받아오면 그것만큼 귀찮은 것이 없다. 패키지 목록은 자주 변경되는 것이 아니므로 expire 시간을 좀 넉넉하게 해주면 편리하다. 예를 들어 updates 저장소의 expire 시간을 12시간 혹은 1일로 변경하는 명령을 살펴보면 다음과 같다.</span></p>\n<pre id=\"code_1734858109188\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager setopt updates.metadata_expire=12h\n\n# tail -4 /etc/dnf/repos.override.d/99-config_manager.repo\n[google-chrome]\nenabled=0\n[updates]\nmetadata_expire=12h</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">위의 12h를 1d로 변경하는 것은 직접 연습해 보기를 바란다. 그리고 rpmfusion이나 다른 저장소도 12h나 1d로 변경해보자.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">그런데 expire를 무시하고 당장 업데이트 받아야 하는 경우가 있다면 dnf clean all로 모든 캐시를 지우고 명령하면 모든 데이터를 처음부터 다시 받을 수 있다. 캐시만 다시 받을 경우에는 dnf makecache 명령을 쓰면 된다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">3. 미러 사이트 설정하기</span></h2>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">기본적으로 dnf는 실행할 때 미러 사이트를 탐색하는 방식을 사용하는데, 이게 생각보다 똑똑한 편이 아니다. 예를 들어 dnf -y update 명령을 실행할 때 가끔은 느린 사이트로 연결되어 속도가 엄청 느려진다. 이런 경우에는 CTRL-C로 dnf 를 끊고 다시 명령하면 빠른 사이트로 접속되는 경우도 있다. 하지만 계속 느린 사이트로 붙으면 상당히 귀찮아진다. <span style=\"background-color: #f6e199;\">그래서 애초에 한국의 미러 사이트로 고정해두면 이런 걱정을 안해도 된다</span>. (미국에 있다면 미국의 사이트로, 호주에 있다면 호주의 사이트로 자국내 사이트로 연결해두는 것이 좋다)</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">미러 사이트 목록은 아래 주소에서 볼 수 있다. 마지막의 41은 버전 숫자이다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\"> <b><span style=\"color: #000000;\"><a title=\"페도라 미러 사이트 목록\" href=\"https://mirrormanager.fedoraproject.org/mirrors/Fedora/41\">https://mirrormanager.fedoraproject.org/mirrors/Fedora/41</a></span></b> </span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">목록에 보면&nbsp; 중에서 KR 코드가 한국의 미러 사이트이다. 이 중에서 5번째 숫자가 대역폭인데, 대역폭이 높을 수록 좋은 편이다. 대역폭만 보면 카이스트가 좋지만, 자잘한 버그가 많아서 사실상 관리가 잘되는 것은 아니다. 그래서 2024년 12월 기준으로는 cicku의 미러 사이트가 더 좋은 편이다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1519\" data-origin-height=\"864\"><span data-url=\"https://blog.kakaocdn.net/dn/eFHrOT/btsLssQXiz7/1W59gfyVsbRcQhEWSm2Ob1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/eFHrOT/btsLssQXiz7/1W59gfyVsbRcQhEWSm2Ob1/img.png\" data-alt=\"Fedora mirror sites - KR (Korea)\"><img src=\"https://blog.kakaocdn.net/dn/eFHrOT/btsLssQXiz7/1W59gfyVsbRcQhEWSm2Ob1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FeFHrOT%2FbtsLssQXiz7%2F1W59gfyVsbRcQhEWSm2Ob1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1519\" data-origin-height=\"864\"/></span><figcaption>Fedora mirror sites - KR (Korea)</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">먼저 현재 updates 저장소의 상태를 살펴보기 위해 <span style=\"background-color: #f6e199;\">dnf repo info updates</span> 명령을 내려보자.</span></p>\n<pre id=\"code_1734864519628\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf repo info updates\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:40:41)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://mirrors.tuna.tsinghua.edu.cn/fedora/updates/41/Everything/x86_64/ (22 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&amp;arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12870\n  Total packages     : 12870\n  Size               : 33.1 GiB\n  Revision           : 1734827341\n  Updated            : 2024-12-22 01:57:06</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">명령어 실행 결과를 보면 URLs 부분의 Metalink가 미러 사이트를 찾기 위한 메타 링크이고, 그걸 통해서 찾아낸 실제 위치가 Base URL이다. </span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">Base URL 부분은 metalink에 의해 종종 변경 될 수 있다. 실제로 dnf clean metadata 명령 후 다시 dnf repo info를 사용하면 BaseURL이 변할 수도 있다. 아래를 보면 Base URL부분이 변경되었다.</span></p>\n<pre id=\"code_1734864699974\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf clean metadata\nRemoved 72 files, 26 directories. 0 errors occurred.\n\n# dnf repo info updates\nUpdating and loading repositories:\n Fedora 41 openh264 (From Cisco) - x86_64            100% |   2.0 KiB/s |   6.0 KiB |  00m03s\n RPM Fusion for Fedora 41 - Nonfree                  100% |  32.3 KiB/s |  94.7 KiB |  00m03s\n RPM Fusion for Fedora 41 - Free                     100% |  71.1 KiB/s | 173.6 KiB |  00m02s\n RPM Fusion for Fedora 41 - Free - Updates           100% |  33.6 KiB/s |  49.1 KiB |  00m01s\n RPM Fusion for Fedora 41 - Nonfree - Updates        100% |  24.4 KiB/s |  45.6 KiB |  00m02s\n Fedora 41 - x86_64                                  100% |  11.9 MiB/s |  35.3 MiB |  00m03s\n Fedora 41 - x86_64 - Updates                        100% |   8.6 MiB/s |   7.0 MiB |  00m01s\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:50:30)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://repo.jing.rocks/fedora-buffet/fedora/linux/updates/41/Everything/x86_64/ (22 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&amp;arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12722\n  Total packages     : 12722\n  Size               : 32.9 GiB\n  Revision           : 1734740830\n  Updated            : 2024-12-21 03:31:52</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">그러면 Base URL을 cicku로 변경해보자. 먼저 사이트 구조를 알아야 하기 때문에 mirror에 나온 위치로 접속해보자.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"fedora_mirror_kr_cicku.jpg\" data-origin-width=\"1159\" data-origin-height=\"265\"><span data-url=\"https://blog.kakaocdn.net/dn/Ywndf/btsLrXXXDXd/EJt7e7XxpfNcTtD2TNlKv0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/Ywndf/btsLrXXXDXd/EJt7e7XxpfNcTtD2TNlKv0/img.jpg\" data-alt=\"Fedora mirror - Korea - CICKU\"><img src=\"https://blog.kakaocdn.net/dn/Ywndf/btsLrXXXDXd/EJt7e7XxpfNcTtD2TNlKv0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FYwndf%2FbtsLrXXXDXd%2FEJt7e7XxpfNcTtD2TNlKv0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"fedora_mirror_kr_cicku.jpg\" data-origin-width=\"1159\" data-origin-height=\"265\"/></span><figcaption>Fedora mirror - Korea - CICKU</figcaption>\n</figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"694\" data-origin-height=\"245\"><span data-url=\"https://blog.kakaocdn.net/dn/nfVOX/btsLt4VPcZK/1NranKPnAtBnL0QaeplpC1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/nfVOX/btsLt4VPcZK/1NranKPnAtBnL0QaeplpC1/img.png\" data-alt=\"Fedora mirror - CICKU - directory index\"><img src=\"https://blog.kakaocdn.net/dn/nfVOX/btsLt4VPcZK/1NranKPnAtBnL0QaeplpC1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FnfVOX%2FbtsLt4VPcZK%2F1NranKPnAtBnL0QaeplpC1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"694\" data-origin-height=\"245\"/></span><figcaption>Fedora mirror - CICKU - directory index</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">접속해보면 updates라는 디렉토리가 있는 것을 볼 수 있다. 페도라 미러 사이트는 모두 디렉토리 구조를 통일하게 되어있으므로 이 값은 /etc/yum.repos.d/fedora-update.repo의 baseurl 구조를 따른다.&nbsp;</span></p>\n<pre id=\"code_1734865040938\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code>2# head /etc/yum.repos.d/fedora-updates.repo\n[updates]\nname=Fedora $releasever - $basearch - Updates\n#baseurl=http://download.example/pub/fedora/linux/updates/$releasever/Everything/$basearch/\nmetalink=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f$releasever&amp;arch=$basearch\nenabled=1\ncountme=1\nrepo_gpgcheck=0\ntype=rpm\ngpgcheck=1\nmetadata_expire=6h</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">위에서 주석문으로 처리된 baseurl=http://download.example/pub/fedora/linux/updates ... 부분을 살펴보자. 특히 /fedora/linux/updates 라는 디렉토리 구조를 자세히 보면 된다. 즉 cicku의 baseurl 구조는 이 구조대로 만들면 다음과 같다.</span></p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr>\n<td style=\"width: 100%;\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">baseurl=https://kr.mirrors.cicku.me/fedora/linux/updates/$releasever/Everything/$basearch/</span></td>\n</tr>\n</tbody>\n</table>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">이제 이 값을 오버라이드 시키면 된다. 앞서 사용한 명령을 그대로 사용하면 된다. 주의할 점은 달러 기호가 있기 때문에 셸 변수로 해석되는 것을 막기 위해 <span style=\"color: #ee2323;\">홀따옴표(single quotes)로 묶어줘야 한다. <span style=\"background-color: #9feec3;\">꼭 홀따옴표를 써야만 한다</span>.</span></span></p>\n<pre id=\"code_1734865219189\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf config-manager setopt 'updates.baseurl=https://kr.mirrors.cicku.me/fedora/linux/updates/$releasever/Everything/$basearch/'\n\n# dnf repo info updates\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:50:30)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://kr.mirrors.cicku.me/fedora/linux/updates/41/Everything/x86_64/\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&amp;arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12722\n  Total packages     : 12722\n  Size               : 32.9 GiB\n  Revision           : 1734740830\n  Updated            : 2024-12-21 03:31:52</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">제대로 설정되었는지 dnf clean metadata로 메타데이터를 삭제한 뒤에 다시 받아보자. 여전히 cicku로 고정되어있는 것을 볼 수 있다. 그러면 fedora 저장소 사이트도 변경해보자. CICKU의 fedora 기본 저장소 baseurl 주소는 https://kr.mirrors.cicku.me/fedora/linux/releases/$releasever/Everything/$basearch/os/ 가 된다.</span></p>\n<pre id=\"code_1734865475843\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf repo info fedora\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : fedora\nName                 : Fedora 41 - x86_64\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 604800 seconds (last: 2024-12-22 11:02:05)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora.repo\nURLs                 :\n  Base URL           : https://repo.jing.rocks/fedora-buffet/fedora/linux/releases/41/Everything/x86_64/os/ (48 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=fedora-41&amp;arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 76624\n  Total packages     : 76624\n  Size               : 111.1 GiB\n  Revision           : 1729778159\n  Updated            : 2024-10-24 13:55:59\n\n\n# dnf config-manager setopt 'fedora.baseurl=https://kr.mirrors.cicku.me/fedora/linux/releases/$releasever/Everything/$basearch/os/'\n\n# dnf repo info fedora\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : fedora\nName                 : Fedora 41 - x86_64\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 604800 seconds (last: 2024-12-22 11:02:05)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora.repo\nURLs                 :\n  Base URL           : https://kr.mirrors.cicku.me/fedora/linux/releases/41/Everything/x86_64/os/\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=fedora-41&amp;arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 76624\n  Total packages     : 76624\n  Size               : 111.1 GiB\n  Revision           : 1729778159\n  Updated            : 2024-10-24 13:55:59</code></pre>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">이렇게 baseurl이 지정되면 어느 파일에 오버라이드 되는지는 이미 잘 알고 있을거라 생각된다. 실제로 오버라이드 된 설정도 확인 해보기 바란다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">그러면 이제 속도를 체크하기 위해 dnf clean all로 모든 캐시를 지우고 저장소 캐시를 다시 받아보았다. 예상한대로 rpmfusion쪽은 외국 서버라서 초당 몇십킬로 바이트의 속도로 느리지만 fedora와 updates는 CICKU 국내 미러를 접속했기 때문에 11.7MiB/s와 2.7MiB/s로 메가바이트 단위의 속도로 처리하는 것을 볼 수 있다. 또한 패키지를 다운로드를 받을 때도 초당 수십메가씩 받기 때문에 굉장히 빠르게 설치할 수 있다.</span></p>\n<pre id=\"code_1734868167662\" class=\"shell\" data-ke-language=\"shell\" data-ke-type=\"codeblock\"><code># dnf repo info\nUpdating and loading repositories:\n RPM Fusion for Fedora 41 - Free                   100% |  68.9 KiB/s | 174.7 KiB |  00m03s\n RPM Fusion for Fedora 41 - Free - Updates         100% |  19.2 KiB/s |  49.1 KiB |  00m03s\n RPM Fusion for Fedora 41 - Nonfree                100% |  55.0 KiB/s | 106.5 KiB |  00m02s\n Fedora 41 openh264 (From Cisco) - x86_64          100% |   2.2 KiB/s |   4.8 KiB |  00m02s\n RPM Fusion for Fedora 41 - Nonfree - Updates      100% |  22.7 KiB/s |  33.8 KiB |  00m01s\n Fedora 41 - x86_64                                100% |  11.7 MiB/s |  35.4 MiB |  00m03s\n Fedora 41 - x86_64 - Updates                      100% |   2.7 MiB/s |   7.4 MiB |  00m03s</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">참고</span></h2>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">[1] RedHat 9 - DNF, <a href=\"https://docs.redhat.com/ko/documentation/red_hat_enterprise_linux/9/html-single/managing_software_with_the_dnf_tool/index\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://docs.redhat.com/ko/documentation/red_hat_enterprise_linux/9/html-single/managing_software_with_the_dnf_tool/index</a></span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">[2] Fedora - Changes between DNF and DNF5, <a href=\"https://dnf5.readthedocs.io/en/latest/changes_from_dnf4.7.html\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://dnf5.readthedocs.io/en/latest/changes_from_dnf4.7.html</a></span></p>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">[3] Fedora 41 mirror sites, <span style=\"color: #000000;\"><a href=\"https://mirrormanager.fedoraproject.org/mirrors/Fedora/41\">https://mirrormanager.fedoraproject.org/mirrors/Fedora/41</a></span> </span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">히스토리</span></h2>\n<p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Sans Demilight', 'Noto Sans KR';\">2024-12-22 초안</span></p>",
        "contentSnippet": "페도라 리눅스를 처음 설치하면 쓸데없는 패키지 저장소(dnf repository)들이 기본으로 많이 설치된다. 따라서 dnf 명령을 내릴 때마다 속도가 상당히 느려진다. 만일 약간의 시간을 들여서 저장소 설정를 튜닝해주면 dnf 명령시 패키지 검색이나 다운로드 속도가 많이 개선된다.\nDNF 저장소 튜닝은 크게 3가지이다. 첫째는 불필요한 저장소를 비활성화하는 것이다. 둘째는 저장소를 자주 업데이트하지 않도록 expiration 시간을 늘려주는 것이다. 세번째는 국내 미러 사이트를 직접 접속하도록 지정하는 방법이다.\nFedora DNF5\n\n\n \n1. 불필요한 저장소 비활성화\n현재 저장소 목록을 확인하기 위해 dnf repolist 명령을 내려보면 이런저런 저장소가 많이 보인다. 기본적으로 활성화된(enabled) 저장소만 나타난다. 비활성활된 저장소 목록까지 모두 포함해서 보려면 --all 옵션을 추가하여 dnf repolist --all이라고 명령한다. 반대로 비활성화된 목록만 볼 때는 --disabled 옵션을 사용해서 dnf repolist --disabled 라고 명령하면 된다.\n# dnf repolist\nrepo id                                                                             repo name\ncopr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons             Copr repo for gnome-shell-extension-desktop-icons owned by atim\ncopr:copr.fedorainfracloud.org:phracek:PyCharm                                      Copr repo for PyCharm owned by phracek\ndocker-ce-stable                                                                    Docker CE Stable - x86_64\nfedora                                                                              Fedora 41 - x86_64\nfedora-cisco-openh264                                                               Fedora 41 openh264 (From Cisco) - x86_64\ngoogle-chrome                                                                       google-chrome\nrpmfusion-free                                                                      RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                                              RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                                                   RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-nvidia-driver                                                     RPM Fusion for Fedora 41 - Nonfree - NVIDIA Driver\nrpmfusion-nonfree-steam                                                             RPM Fusion for Fedora 41 - Nonfree - Steam\nrpmfusion-nonfree-updates                                                           RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                                             Fedora 41 - x86_64 - Updates\n위 저장소 목록들이 어떤 역할을 하는지는 우측에 설명(repo name)이 나와있다. 중요한 것들로는 fedora는 기본 패키지들이 있는 곳이고, updates는 업데이트 된 패키지들이 들어있다. rpmfusion은 기본적으로 추가적인 패키지들을 제공하는 저장소이다. 이외에 remi나 vscode, google-chrome 등도 많이 사용하는데 설치 후 쓸데없이 활성화 되어있으면 dnf 명령을 느리게 한다.\n \n1.1. dnf config-manager 명령어 사용하기\n저장소 중에 docker-ce-stable을 비활성화하기 위해 아래와 같이 config-manager 기능을 사용해보자. 비활성화는 enabled=0 으로 속성을 변경하는 것이고, 이는 실제로는 /etc/yum.repos.d/docker-ce-stable.repo 파일의 enabled=0 항목을 설정하는 것과 같다. 반대로 enabled=1이 되면 활성화된다. 설정 변경후 dnf repolist 를 내려보면 docker-ce-stable이 사라진 것을 볼 수 있다.\n# dnf config-manager setopt docker-ce-stable.enabled=0\n\n# dnf repolist\nrepo id                                                                             repo name\ncopr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons             Copr repo for gnome-shell-extension-desktop-icons owned by atim\ncopr:copr.fedorainfracloud.org:phracek:PyCharm                                      Copr repo for PyCharm owned by phracek\nfedora                                                                              Fedora 41 - x86_64\nfedora-cisco-openh264                                                               Fedora 41 openh264 (From Cisco) - x86_64\ngoogle-chrome                                                                       google-chrome\nrpmfusion-free                                                                      RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                                              RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                                                   RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-nvidia-driver                                                     RPM Fusion for Fedora 41 - Nonfree - NVIDIA Driver\nrpmfusion-nonfree-steam                                                             RPM Fusion for Fedora 41 - Nonfree - Steam\nrpmfusion-nonfree-updates                                                           RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                                             Fedora 41 - x86_64 - Updates\n이렇게 PyCharm이나 gnome-shell-extension-desktop-icons, rpmfusion-nonfree-nvidia-driver, rpmfusion-nonfree-steam도 비활성화해보자. 구글 크롬 저장소인 google-chrome도 자주 업데이트 하지 않는다면 비활성화 해두면 좋다. 가끔 1~2개월마다 업데이트 하라고 할 때만 잠시 활성화 해서 업데이트하면 된다. 이럴 때는 dnf --enable-repo=google-chrome 옵션을 추가해서 업데이트하면 잠시 활성화 될 뿐 전체 설정을 건드리지는 않는다.\n# dnf config-manager setopt copr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons.enabled=0\n\n# dnf config-manager setopt copr:copr.fedorainfracloud.org:phracek:PyCharm.enabled=0\n\n# dnf config-manager setopt rpmfusion-nonfree-steam.enabled=0\n\n# dnf config-manager setopt rpmfusion-nonfree-nvidia-driver.enabled=0\n\n#  dnf config-manager setopt google-chrome.enabled=0\n\n# dnf repolist\nrepo id                                                       repo name\nfedora                                                        Fedora 41 - x86_64\nfedora-cisco-openh264                                         Fedora 41 openh264 (From Cisco) - x86_64\nrpmfusion-free                                                RPM Fusion for Fedora 41 - Free\nrpmfusion-free-updates                                        RPM Fusion for Fedora 41 - Free - Updates\nrpmfusion-nonfree                                             RPM Fusion for Fedora 41 - Nonfree\nrpmfusion-nonfree-updates                                     RPM Fusion for Fedora 41 - Nonfree - Updates\nupdates                                                       Fedora 41 - x86_64 - Updates\n이제 활성화된 저장소의 갯수가 7개로 줄었다. 이 정도만 해둬도 dnf 명령이 상당히 빨라진다. 처음 설치 이후 새로운 패키지를 거의 설치하지 않는 경우라면 fedora도 빼도 된다.\n여기서 좀 더 타이트하게 하려면 rpmfusion-free와 rpmfusion-nonfree도 비활성화하면 더 빨라진다.\n \n1.2. dnf config-manager의 작동 방식 이해하기\n저장소 파일은 /etc/yum.repos.d에 있지만 이 파일들을 직접 수정하면 나중에 저장소 패키지가 업데이트 될 때 덮어 쓰여진다. 따라서 dnf에서는 override 기법을 이용하여 추가 설정한다.\ndnf의 오버라이드 설정 파일의 위치는 /etc/dnf/repos.override.d 디렉토리에 있다. 앞서 설정한 부분이 여기에 어떻게 저장되는지 살펴보자.\n # cd /etc/dnf/repos.override.d\n \n # ls\n 99-config_manager.repo\n\n# cat 99-config_manager.repo\n# Generated by dnf5 config-manager.\n# Do not modify this file manually, use dnf5 config-manager instead.\n[docker-ce-stable]\nenabled=0\n[copr:copr.fedorainfracloud.org:atim:gnome-shell-extension-desktop-icons]\nenabled=0\n[copr:copr.fedorainfracloud.org:phracek:PyCharm]\nenabled=0\n[rpmfusion-nonfree-steam]\nenabled=0\n[rpmfusion-nonfree-nvidia-driver]\nenabled=0\n[google-chrome]\nenabled=0\n오버라이딩 설정 파일인 99-config_manager.repo 를 보면 어떤 방식으로 저장되는지 직관적으로 알 수 있다. 이 파일을 직접 vim으로 수정해도 결과는 같지만, 주석문에 Do not modify... 쓰여있듯이 직접 수정하는 것은 좋지 않다. (어느 정도 리눅스 전문가라면 무시하고 직접 편집해도 된다. 애초에 전문가라면 이런 초보 글을 읽지도 않겠지만...)\nsetopt로 설정한 값을 변경하는게 아니라 아예 제거해야 하는 경우, 즉 default값으로 되돌리려면 unsetopt를 사용하면 된다. unsetopt를 사용할 때는 뒤의 값은 적을 필요가 없다. 예를 들어 dnf config-manager unsetopt docker-ce-stable.enabled 식으로만 명령하면 된다.\n참고로 dnf config-manager는 wildcard를 지원한다. 따라서 rpmfusion으로 시작하는 모든 저장소를 disabled 하려면 아래와 같이 와일드카드를 사용해서 명령할 수 있다.\n# dnf config-manager setopt rpmfusion-*.enabled=0\n\n# dnf repo list\nrepo id                                                       repo name\nfedora                                                        Fedora 41 - x86_64\nupdates                                                       Fedora 41 - x86_64 - Updates\n \n1.3. 구형 dnf 기능인 --disable 옵션\n간혹 옛날 명령인 dnf config-manager --disable docker-ce-stable 같이 명령하는 경우가 있는데, 이건 옛날 dnf 의 기능이고, 최신의 dnf에서는 삭제되었다. 최신의 dnf 에서 이 명령을 사용하면 아래와 같이 에러가 발생한다.\n# dnf config-manager --disable docker-ce-stable\nUnknown argument \"--disable\" for command \"config-manager\". Add \"--help\" for more information about the arguments.\n \n \n2. expire 시간 늘리기\ndnf 명령을 내릴 때 마다 목록을 자주 받아오면 그것만큼 귀찮은 것이 없다. 패키지 목록은 자주 변경되는 것이 아니므로 expire 시간을 좀 넉넉하게 해주면 편리하다. 예를 들어 updates 저장소의 expire 시간을 12시간 혹은 1일로 변경하는 명령을 살펴보면 다음과 같다.\n# dnf config-manager setopt updates.metadata_expire=12h\n\n# tail -4 /etc/dnf/repos.override.d/99-config_manager.repo\n[google-chrome]\nenabled=0\n[updates]\nmetadata_expire=12h\n위의 12h를 1d로 변경하는 것은 직접 연습해 보기를 바란다. 그리고 rpmfusion이나 다른 저장소도 12h나 1d로 변경해보자.\n그런데 expire를 무시하고 당장 업데이트 받아야 하는 경우가 있다면 dnf clean all로 모든 캐시를 지우고 명령하면 모든 데이터를 처음부터 다시 받을 수 있다. 캐시만 다시 받을 경우에는 dnf makecache 명령을 쓰면 된다.\n \n3. 미러 사이트 설정하기\n기본적으로 dnf는 실행할 때 미러 사이트를 탐색하는 방식을 사용하는데, 이게 생각보다 똑똑한 편이 아니다. 예를 들어 dnf -y update 명령을 실행할 때 가끔은 느린 사이트로 연결되어 속도가 엄청 느려진다. 이런 경우에는 CTRL-C로 dnf 를 끊고 다시 명령하면 빠른 사이트로 접속되는 경우도 있다. 하지만 계속 느린 사이트로 붙으면 상당히 귀찮아진다. 그래서 애초에 한국의 미러 사이트로 고정해두면 이런 걱정을 안해도 된다. (미국에 있다면 미국의 사이트로, 호주에 있다면 호주의 사이트로 자국내 사이트로 연결해두는 것이 좋다)\n미러 사이트 목록은 아래 주소에서 볼 수 있다. 마지막의 41은 버전 숫자이다.\n https://mirrormanager.fedoraproject.org/mirrors/Fedora/41 \n목록에 보면  중에서 KR 코드가 한국의 미러 사이트이다. 이 중에서 5번째 숫자가 대역폭인데, 대역폭이 높을 수록 좋은 편이다. 대역폭만 보면 카이스트가 좋지만, 자잘한 버그가 많아서 사실상 관리가 잘되는 것은 아니다. 그래서 2024년 12월 기준으로는 cicku의 미러 사이트가 더 좋은 편이다.\nFedora mirror sites - KR (Korea)\n\n\n먼저 현재 updates 저장소의 상태를 살펴보기 위해 dnf repo info updates 명령을 내려보자.\n# dnf repo info updates\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:40:41)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://mirrors.tuna.tsinghua.edu.cn/fedora/updates/41/Everything/x86_64/ (22 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12870\n  Total packages     : 12870\n  Size               : 33.1 GiB\n  Revision           : 1734827341\n  Updated            : 2024-12-22 01:57:06\n명령어 실행 결과를 보면 URLs 부분의 Metalink가 미러 사이트를 찾기 위한 메타 링크이고, 그걸 통해서 찾아낸 실제 위치가 Base URL이다. \nBase URL 부분은 metalink에 의해 종종 변경 될 수 있다. 실제로 dnf clean metadata 명령 후 다시 dnf repo info를 사용하면 BaseURL이 변할 수도 있다. 아래를 보면 Base URL부분이 변경되었다.\n# dnf clean metadata\nRemoved 72 files, 26 directories. 0 errors occurred.\n\n# dnf repo info updates\nUpdating and loading repositories:\n Fedora 41 openh264 (From Cisco) - x86_64            100% |   2.0 KiB/s |   6.0 KiB |  00m03s\n RPM Fusion for Fedora 41 - Nonfree                  100% |  32.3 KiB/s |  94.7 KiB |  00m03s\n RPM Fusion for Fedora 41 - Free                     100% |  71.1 KiB/s | 173.6 KiB |  00m02s\n RPM Fusion for Fedora 41 - Free - Updates           100% |  33.6 KiB/s |  49.1 KiB |  00m01s\n RPM Fusion for Fedora 41 - Nonfree - Updates        100% |  24.4 KiB/s |  45.6 KiB |  00m02s\n Fedora 41 - x86_64                                  100% |  11.9 MiB/s |  35.3 MiB |  00m03s\n Fedora 41 - x86_64 - Updates                        100% |   8.6 MiB/s |   7.0 MiB |  00m01s\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:50:30)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://repo.jing.rocks/fedora-buffet/fedora/linux/updates/41/Everything/x86_64/ (22 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12722\n  Total packages     : 12722\n  Size               : 32.9 GiB\n  Revision           : 1734740830\n  Updated            : 2024-12-21 03:31:52\n그러면 Base URL을 cicku로 변경해보자. 먼저 사이트 구조를 알아야 하기 때문에 mirror에 나온 위치로 접속해보자.\nFedora mirror - Korea - CICKU\n\nFedora mirror - CICKU - directory index\n\n\n접속해보면 updates라는 디렉토리가 있는 것을 볼 수 있다. 페도라 미러 사이트는 모두 디렉토리 구조를 통일하게 되어있으므로 이 값은 /etc/yum.repos.d/fedora-update.repo의 baseurl 구조를 따른다. \n2# head /etc/yum.repos.d/fedora-updates.repo\n[updates]\nname=Fedora $releasever - $basearch - Updates\n#baseurl=http://download.example/pub/fedora/linux/updates/$releasever/Everything/$basearch/\nmetalink=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f$releasever&arch=$basearch\nenabled=1\ncountme=1\nrepo_gpgcheck=0\ntype=rpm\ngpgcheck=1\nmetadata_expire=6h\n위에서 주석문으로 처리된 baseurl=http://download.example/pub/fedora/linux/updates ... 부분을 살펴보자. 특히 /fedora/linux/updates 라는 디렉토리 구조를 자세히 보면 된다. 즉 cicku의 baseurl 구조는 이 구조대로 만들면 다음과 같다.\nbaseurl=https://kr.mirrors.cicku.me/fedora/linux/updates/$releasever/Everything/$basearch/\n\n\n\n이제 이 값을 오버라이드 시키면 된다. 앞서 사용한 명령을 그대로 사용하면 된다. 주의할 점은 달러 기호가 있기 때문에 셸 변수로 해석되는 것을 막기 위해 홀따옴표(single quotes)로 묶어줘야 한다. 꼭 홀따옴표를 써야만 한다.\n# dnf config-manager setopt 'updates.baseurl=https://kr.mirrors.cicku.me/fedora/linux/updates/$releasever/Everything/$basearch/'\n\n# dnf repo info updates\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : updates\nName                 : Fedora 41 - x86_64 - Updates\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 43200 seconds (last: 2024-12-22 10:50:30)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora-updates.repo\nURLs                 :\n  Base URL           : https://kr.mirrors.cicku.me/fedora/linux/updates/41/Everything/x86_64/\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=updates-released-f41&arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 12722\n  Total packages     : 12722\n  Size               : 32.9 GiB\n  Revision           : 1734740830\n  Updated            : 2024-12-21 03:31:52\n제대로 설정되었는지 dnf clean metadata로 메타데이터를 삭제한 뒤에 다시 받아보자. 여전히 cicku로 고정되어있는 것을 볼 수 있다. 그러면 fedora 저장소 사이트도 변경해보자. CICKU의 fedora 기본 저장소 baseurl 주소는 https://kr.mirrors.cicku.me/fedora/linux/releases/$releasever/Everything/$basearch/os/ 가 된다.\n# dnf repo info fedora\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : fedora\nName                 : Fedora 41 - x86_64\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 604800 seconds (last: 2024-12-22 11:02:05)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora.repo\nURLs                 :\n  Base URL           : https://repo.jing.rocks/fedora-buffet/fedora/linux/releases/41/Everything/x86_64/os/ (48 more)\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=fedora-41&arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 76624\n  Total packages     : 76624\n  Size               : 111.1 GiB\n  Revision           : 1729778159\n  Updated            : 2024-10-24 13:55:59\n\n\n# dnf config-manager setopt 'fedora.baseurl=https://kr.mirrors.cicku.me/fedora/linux/releases/$releasever/Everything/$basearch/os/'\n\n# dnf repo info fedora\nUpdating and loading repositories:\nRepositories loaded.\nRepo ID              : fedora\nName                 : Fedora 41 - x86_64\nStatus               : enabled\nPriority             : 99\nCost                 : 1000\nType                 : available\nMetadata expire      : 604800 seconds (last: 2024-12-22 11:02:05)\nSkip if unavailable  : false\nConfig file          : /etc/yum.repos.d/fedora.repo\nURLs                 :\n  Base URL           : https://kr.mirrors.cicku.me/fedora/linux/releases/41/Everything/x86_64/os/\n  Metalink           : https://mirrors.fedoraproject.org/metalink?repo=fedora-41&arch=x86_64\nOpenPGP              :\n  Keys               : file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-41-x86_64\n  Verify repodata    : false\n  Verify packages    : true\nRepodata info        :\n  Available packages : 76624\n  Total packages     : 76624\n  Size               : 111.1 GiB\n  Revision           : 1729778159\n  Updated            : 2024-10-24 13:55:59\n이렇게 baseurl이 지정되면 어느 파일에 오버라이드 되는지는 이미 잘 알고 있을거라 생각된다. 실제로 오버라이드 된 설정도 확인 해보기 바란다.\n그러면 이제 속도를 체크하기 위해 dnf clean all로 모든 캐시를 지우고 저장소 캐시를 다시 받아보았다. 예상한대로 rpmfusion쪽은 외국 서버라서 초당 몇십킬로 바이트의 속도로 느리지만 fedora와 updates는 CICKU 국내 미러를 접속했기 때문에 11.7MiB/s와 2.7MiB/s로 메가바이트 단위의 속도로 처리하는 것을 볼 수 있다. 또한 패키지를 다운로드를 받을 때도 초당 수십메가씩 받기 때문에 굉장히 빠르게 설치할 수 있다.\n# dnf repo info\nUpdating and loading repositories:\n RPM Fusion for Fedora 41 - Free                   100% |  68.9 KiB/s | 174.7 KiB |  00m03s\n RPM Fusion for Fedora 41 - Free - Updates         100% |  19.2 KiB/s |  49.1 KiB |  00m03s\n RPM Fusion for Fedora 41 - Nonfree                100% |  55.0 KiB/s | 106.5 KiB |  00m02s\n Fedora 41 openh264 (From Cisco) - x86_64          100% |   2.2 KiB/s |   4.8 KiB |  00m02s\n RPM Fusion for Fedora 41 - Nonfree - Updates      100% |  22.7 KiB/s |  33.8 KiB |  00m01s\n Fedora 41 - x86_64                                100% |  11.7 MiB/s |  35.4 MiB |  00m03s\n Fedora 41 - x86_64 - Updates                      100% |   2.7 MiB/s |   7.4 MiB |  00m03s\n \n \n참고\n[1] RedHat 9 - DNF, https://docs.redhat.com/ko/documentation/red_hat_enterprise_linux/9/html-single/managing_software_with_the_dnf_tool/index\n[2] Fedora - Changes between DNF and DNF5, https://dnf5.readthedocs.io/en/latest/changes_from_dnf4.7.html\n[3] Fedora 41 mirror sites, https://mirrormanager.fedoraproject.org/mirrors/Fedora/41 \n \n히스토리\n2024-12-22 초안",
        "guid": "http://sunyzero.tistory.com/308",
        "categories": [
          "컴퓨터 관련/리눅스(유닉스) 일반",
          "dnf config-manager",
          "dnf repository tuning up",
          "dnf5",
          "linux",
          "리눅스",
          "페도라 미러 사이트",
          "페도라 저장소 튜닝"
        ],
        "isoDate": "2024-12-22T12:03:57.000Z"
      }
    ]
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": [
      {
        "title": "😱 2025 안드로이드 탐구영역, Coroutines Flow 때문에?! (feat. 쉬운 해설)",
        "link": "https://thdev.tech/coroutines/2024/12/22/Kotlin-Coroutines-flow/",
        "pubDate": "Sun, 22 Dec 2024 00:00:00 +0000",
        "content": "<p>이 글은 2025 안드로이드 탐구 영역에 나온 문제 중 flow와 관련한 문제를 해석한 글이다.</p>\n\n<h4>안드로이드 탐구 영역 후기 글</h4>\n\n<ul>\n  <li><a href=\"https://thdev.tech/coroutines/2024/12/08/Kotlin-Coroutines-effect-exception/\">(😨 오류 정정) 🤔 2025년도에도 개발자들은 코루틴 예외 처리 때문에 밤샘각? 😨 (2025학년도 안드로이드 탐구영역 문제풀이) - link</a></li>\n  <li><a href=\"https://android-exam25.gdg.kr/\">2025학년도 안드로이드 탐구영역 - link</a></li>\n  <li><a href=\"https://medium.com/@lucas.kang/2025%ED%95%99%EB%85%84%EB%8F%84-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%ED%83%90%EA%B5%AC%EC%98%81%EC%97%AD%EC%9D%84-%EC%A4%80%EB%B9%84%ED%95%98%EB%A9%B0-feabccc2b0cc\">2025학년도 안드로이드 탐구영역을 준비하며(경완님 작성) - link</a></li>\n</ul>\n\n<h3>무슨 문제인가?</h3>\n\n<p>코루틴 <code class=\"language-plaintext highlighter-rouge\">flow</code>에 대한 문제가 크게 2문제가 있었다. 이 중 코루틴 영역에 포함한 1개의 문제를 살펴보려 한다.</p>\n\n<p>이 문제는 <code class=\"language-plaintext highlighter-rouge\">StateFlow</code>와 <code class=\"language-plaintext highlighter-rouge\">flow {}</code>를 복합적으로 사용하는 문제이다.</p>\n\n<p>이 문제에 나오는 Flow에 대한 내용은 이전에 필자의 블로그에 작성했던 다양한 글이 있으니 링크를 추가한다.</p>\n\n<ul>\n  <li><a href=\"https://thdev.tech/kotlin/2020/12/07/Coroutines-Flow-Callback/\">Callback으로 받은 데이터를 Coroutines에서 활용하는 방법! Flow 활용 - link</a></li>\n  <li><a href=\"https://thdev.tech/kotlin/2021/01/09/Coroutines-Callback/\">Callback으로 전달받은 데이터를 Coroutines의 Channel로 처리해보자. - link</a></li>\n</ul>\n\n<h3>이 글에서는</h3>\n<ul>\n  <li>2025 안드로이드 탐구 영역에 나온 문제 일부를 정리한다.</li>\n  <li>Coroutiens flow에 대한 이해가 필요하다.</li>\n</ul>\n\n<!--more-->\n\n<h2>문제를 살펴보자</h2>\n\n<p>아래가 문제에서 나온 전체 코드이다.(Test 부분은 수정)</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Test</span>\n<span class=\"k\">fun</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"nf\">runTest</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">stateFlow</span> <span class=\"p\">=</span> <span class=\"nc\">MutableStateFlow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">flow</span> <span class=\"p\">=</span> <span class=\"nf\">flow</span> <span class=\"p\">{</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">flatMapLatest</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n            <span class=\"n\">stateFlow</span>\n                <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n                    <span class=\"n\">value</span> <span class=\"p\">+</span> <span class=\"n\">it</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nf\">launch</span> <span class=\"p\">{</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">stateFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">stateFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">flow</span>\n        <span class=\"p\">.</span><span class=\"nf\">collect</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span> <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"s\">\"value: $value\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 문제에서는 1 개의 <code class=\"language-plaintext highlighter-rouge\">StateFlow</code>와 1 개의 <code class=\"language-plaintext highlighter-rouge\">flow {}</code>를 초기화하고, flow 다음에 <code class=\"language-plaintext highlighter-rouge\">flatMapLatest</code>를 사용하여 <code class=\"language-plaintext highlighter-rouge\">StateFlow</code>를 통해 새로운 흐름을 만드는 문제이다.</p>\n\n<p><br /></p>\n\n<h2>flatMapLatest는 무엇인가?</h2>\n\n<p><a href=\"https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html\">flatMapLatest - link</a>의 함수 원형은 아래와 같다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@ExperimentalCoroutinesApi</span>\n<span class=\"k\">public</span> <span class=\"k\">inline</span> <span class=\"k\">fun</span> <span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">,</span> <span class=\"nc\">R</span><span class=\"p\">&gt;</span> <span class=\"nf\">Flow</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;.</span><span class=\"nf\">flatMapLatest</span><span class=\"p\">(</span><span class=\"nd\">@BuilderInference</span> <span class=\"k\">crossinline</span> <span class=\"n\">transform</span><span class=\"p\">:</span> <span class=\"k\">suspend</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nc\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Flow</span><span class=\"p\">&lt;</span><span class=\"nc\">R</span><span class=\"p\">&gt;):</span> <span class=\"nc\">Flow</span><span class=\"p\">&lt;</span><span class=\"nc\">R</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n    <span class=\"nf\">transformLatest</span> <span class=\"p\">{</span> <span class=\"nf\">emitAll</span><span class=\"p\">(</span><span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">))</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>문서의 설명 그대로를 가져오면</p>\n\n<hr />\n<p>Returns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled.</p>\n\n<hr />\n\n<p>제미나이에게 해석을 요청한 부분은 다음과 같다.</p>\n\n<hr />\n\n<p>이 코드는 원본 flow가 값을 내보낼 때마다 transform 함수에 의해 생성된 새로운 flow로 전환하는 flow를 반환합니다.</p>\n\n<p>좀 더 자세히 설명하면,</p>\n\n<ul>\n  <li>flow는 코루틴에서 비동기적으로 데이터를 처리하는 데 사용되는 자료 구조입니다. 마치 시간에 따라 값을 내보내는 스트림과 같습니다.</li>\n  <li>transform은 flow의 각 값을 변환하는 함수입니다. 이 함수는 새로운 flow를 생성할 수도 있습니다.\nflatMapLatest는 flow의 각 값에 대해 transform 함수를 호출하여 새로운 flow를 생성하고, 이 flow들의 값을 순차적으로 내보내는 연산자입니다.</li>\n  <li>중요한 점은, 원본 flow가 새로운 값을 내보낼 때마다 이전에 transform 함수에 의해 생성된 flow는 취소된다는 것입니다. 즉, 항상 최신 값에 대한 flow만 활성화됩니다.\n예를 들어, 사용자가 검색어를 입력할 때마다 검색 결과를 가져오는 flow가 있다고 가정해 보겠습니다. flatMapLatest를 사용하면 사용자가 새로운 검색어를 입력할 때마다 이전 검색 결과에 대한 flow는 취소되고 새로운 검색어에 대한 flow가 생성됩니다.</li>\n</ul>\n\n<p>이러한 방식은 최신 값만 처리해야 하는 경우에 유용합니다. 예를 들어, 사용자 인터페이스에서 최신 데이터만 표시해야 하는 경우 flatMapLatest를 사용하면 불필요한 작업을 방지하고 성능을 향상시킬 수 있습니다.</p>\n\n<hr />\n\n<p>여기서 마지막의 cancel 부분이 궁금하여 상세 코드를 좀 더 살펴보았는데, <code class=\"language-plaintext highlighter-rouge\">collect {}</code> 처리 후 <code class=\"language-plaintext highlighter-rouge\">apply</code> 부분에서 <code class=\"language-plaintext highlighter-rouge\">cancel()</code>과 <code class=\"language-plaintext highlighter-rouge\">join()</code>을 처리하고 있음을 알 수 있는데, 항상 최신의 값만을 흘려보냄을 코드로 알 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">ChannelFlowTransformLatest</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">,</span> <span class=\"nc\">R</span><span class=\"p\">&gt;(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">transform</span><span class=\"p\">:</span> <span class=\"k\">suspend</span> <span class=\"nc\">FlowCollector</span><span class=\"p\">&lt;</span><span class=\"nc\">R</span><span class=\"p\">&gt;.(</span><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nc\">T</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n    <span class=\"n\">flow</span><span class=\"p\">:</span> <span class=\"nc\">Flow</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;,</span>\n    <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nc\">CoroutineContext</span> <span class=\"p\">=</span> <span class=\"nc\">EmptyCoroutineContext</span><span class=\"p\">,</span>\n    <span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nc\">Int</span> <span class=\"p\">=</span> <span class=\"nc\">Channel</span><span class=\"p\">.</span><span class=\"nc\">BUFFERED</span><span class=\"p\">,</span>\n    <span class=\"n\">onBufferOverflow</span><span class=\"p\">:</span> <span class=\"nc\">BufferOverflow</span> <span class=\"p\">=</span> <span class=\"nc\">BufferOverflow</span><span class=\"p\">.</span><span class=\"nc\">SUSPEND</span>\n<span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">ChannelFlowOperator</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">,</span> <span class=\"nc\">R</span><span class=\"p\">&gt;(</span><span class=\"n\">flow</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">,</span> <span class=\"n\">onBufferOverflow</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nc\">CoroutineContext</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">:</span> <span class=\"nc\">Int</span><span class=\"p\">,</span> <span class=\"n\">onBufferOverflow</span><span class=\"p\">:</span> <span class=\"nc\">BufferOverflow</span><span class=\"p\">):</span> <span class=\"nc\">ChannelFlow</span><span class=\"p\">&lt;</span><span class=\"nc\">R</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span>\n        <span class=\"nc\">ChannelFlowTransformLatest</span><span class=\"p\">(</span><span class=\"n\">transform</span><span class=\"p\">,</span> <span class=\"n\">flow</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">,</span> <span class=\"n\">onBufferOverflow</span><span class=\"p\">)</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">flowCollect</span><span class=\"p\">(</span><span class=\"n\">collector</span><span class=\"p\">:</span> <span class=\"nc\">FlowCollector</span><span class=\"p\">&lt;</span><span class=\"nc\">R</span><span class=\"p\">&gt;)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">assert</span> <span class=\"p\">{</span> <span class=\"n\">collector</span> <span class=\"k\">is</span> <span class=\"nc\">SendingCollector</span> <span class=\"p\">}</span> <span class=\"c1\">// So cancellation behaviour is not leaking into the downstream</span>\n        <span class=\"nf\">coroutineScope</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"py\">previousFlow</span><span class=\"p\">:</span> <span class=\"nc\">Job</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n            <span class=\"n\">flow</span><span class=\"p\">.</span><span class=\"nf\">collect</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n                <span class=\"n\">previousFlow</span><span class=\"o\">?.</span><span class=\"nf\">apply</span> <span class=\"p\">{</span> <span class=\"c1\">// 이 부분</span>\n                    <span class=\"nf\">cancel</span><span class=\"p\">(</span><span class=\"nc\">ChildCancelledException</span><span class=\"p\">())</span>\n                    <span class=\"nf\">join</span><span class=\"p\">()</span>\n                <span class=\"p\">}</span>\n                <span class=\"c1\">// Do not pay for dispatch here, it's never necessary</span>\n                <span class=\"n\">previousFlow</span> <span class=\"p\">=</span> <span class=\"nf\">launch</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"nc\">CoroutineStart</span><span class=\"p\">.</span><span class=\"nc\">UNDISPATCHED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">collector</span><span class=\"p\">.</span><span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>결국 flatMapLatest를 사용하면 2 개의 <code class=\"language-plaintext highlighter-rouge\">flow</code> 흐름을 합칠 수 있으며, 이전 흐름의 데이터는 언제나 최신 데이터 흐름을 사용함을 알 수 있다.</p>\n\n<p><br /></p>\n\n<h2>돌아가서</h2>\n\n<p>MutableStateFlow는 가장 마지막 최신 데이터 1 개를 사용할 수 있는 상태를 저장하기 위한 용도이며, HotFlow이다. 언제나 최신 데이터만을 가진다.</p>\n\n<p>반대로 <code class=\"language-plaintext highlighter-rouge\">flow</code>는 구독하기 전에는 동작하지 않는 ColdFlow에 속한다.</p>\n\n<ul>\n  <li><a href=\"https://thdev.tech/dataflow/2024/11/23/Flow-Data-flow/\">Kotlin Coroutines Flow의 Cold/Hot flow(Stream)의 데이터 흐름(Data flow) 이해해 보기 - link</a></li>\n</ul>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">val</span> <span class=\"py\">stateFlow</span> <span class=\"p\">=</span> <span class=\"nc\">MutableStateFlow</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"kd\">val</span> <span class=\"py\">flow</span> <span class=\"p\">=</span> <span class=\"nf\">flow</span> <span class=\"p\">{</span>\n    <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n    <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n    <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n    <span class=\"p\">.</span><span class=\"nf\">flatMapLatest</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n        <span class=\"n\">stateFlow</span>\n            <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n                <span class=\"n\">value</span> <span class=\"p\">+</span> <span class=\"n\">it</span>\n            <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>그럼 이 코드에서의 구독 시점은 이어서 나오는 코드에서 알 수 있는데, launch {}를 실행하고 나서 바로 <code class=\"language-plaintext highlighter-rouge\">collect</code>를 하고 있음을 알 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">launch</span> <span class=\"p\">{</span>\n    <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n    <span class=\"n\">stateFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n    <span class=\"n\">stateFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">flow</span>\n    <span class=\"p\">.</span><span class=\"nf\">collect</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span> <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"s\">\"value: $value\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2>구독한 데이터의 순서</h2>\n\n<p>이 문제는 테스트가 가능하고, 이해할 수 있는 형태로 제공해야 해서 <code class=\"language-plaintext highlighter-rouge\">delay</code>를 명확하게 제공해 주고 있다.</p>\n\n<p>구독이 시작되면 <code class=\"language-plaintext highlighter-rouge\">emit(1)</code>을 시작하고, 1초의 대기가 걸린다. 그럼 StateFlow의 1과 emit 1을 합산하여 <code class=\"language-plaintext highlighter-rouge\">2</code> 출력, 이어서 999ms 후에 <code class=\"language-plaintext highlighter-rouge\">stateFlow</code>에 <code class=\"language-plaintext highlighter-rouge\">2</code>를 전달하였으므로 1+2의 결과 3을 출력한다.</p>\n\n<p>이후의 결과를 통합하면 <code class=\"language-plaintext highlighter-rouge\">2, 3, 4, 5, 6</code>이 순차로 출력된다.</p>\n\n<p><br /></p>\n\n<h2>이 문제의 답은</h2>\n\n<p>사실 위 코드를 해석할 필요도 없는 간단한 문제이다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">StateFlow에 emit(2)를 하면 flow {} emit(1)부터 다시 발행되어진다.</code> 라는 부분이다.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">flatMapLatest</code>에 걸어둔 <code class=\"language-plaintext highlighter-rouge\">StateFlow</code>에 값을 넘기더라도 <code class=\"language-plaintext highlighter-rouge\">flow {}</code>  부터 실행한다는 건 일어날 수 없다. 하지만 exception이 발생하고, <code class=\"language-plaintext highlighter-rouge\">retry</code>를 걸었다면 <code class=\"language-plaintext highlighter-rouge\">flow {}</code>부터 실행할 수 있다.</p>\n\n<blockquote>\n  <p>retry 위치가 매우 중요한데, 이전에 작성한 글의 최하단 시나리오 2 번 부분을 살펴보길</p>\n</blockquote>\n\n<ul>\n  <li><a href=\"https://thdev.tech/dataflow/2024/11/23/Flow-Data-flow/\">Kotlin Coroutines Flow의 Cold/Hot flow(Stream)의 데이터 흐름(Data flow) 이해해 보기 - link</a></li>\n</ul>\n\n<p><br /></p>\n\n<h2>StateFlow가 아니라 SharedFlow를 함께 사용하면?</h2>\n\n<p>문제를 조금 바꿔 StateFlow 대신 SharedFlow를 사용한다면 코드의 동작은 어떻게 될까?</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Test</span>\n<span class=\"k\">fun</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"nf\">runTest</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">sharedFlow</span> <span class=\"p\">=</span> <span class=\"nc\">MutableSharedFlow</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">&gt;()</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">flow</span> <span class=\"p\">=</span> <span class=\"nf\">flow</span> <span class=\"p\">{</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">flatMapLatest</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n            <span class=\"n\">sharedFlow</span>\n                <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n                    <span class=\"n\">value</span> <span class=\"p\">+</span> <span class=\"n\">it</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nf\">launch</span> <span class=\"p\">{</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">sharedFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">sharedFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">flow</span>\n        <span class=\"p\">.</span><span class=\"nf\">collect</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span> <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"s\">\"value: $value\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드의 응답은 확연하게 달라지는데 <code class=\"language-plaintext highlighter-rouge\">3, 5</code> 만이 출력된다.</p>\n\n<p>SharedFlow는 replay를 하지 않기 때문에 값이 오기 전에는 반응 자체를 하지 않기 때문이다.</p>\n\n<p>그래서 이 코드는</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">emit(1)</code>을 하더라도 <code class=\"language-plaintext highlighter-rouge\">println</code>하지 않고 sharedFlow에 2가 들어와야 만 <code class=\"language-plaintext highlighter-rouge\">1+2</code>하여 3이 출력된다.</p>\n\n<p><br /></p>\n\n<h2>StateFlow, SharedFlow, flow를 셋 다 합성한다면?</h2>\n\n<p>merge, combine, zip을 활용하는 것이 아니라 <code class=\"language-plaintext highlighter-rouge\">MutableStateFlow</code>를 하나 더 추가하고 <code class=\"language-plaintext highlighter-rouge\">flatMapLatest</code>를 하나 더 추가하여 활용하는 경우를 아래와 같이 추가해 보았다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Test</span>\n<span class=\"k\">fun</span> <span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"nf\">runTest</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">sharedFlow</span> <span class=\"p\">=</span> <span class=\"nc\">MutableSharedFlow</span><span class=\"p\">&lt;</span><span class=\"nc\">Int</span><span class=\"p\">&gt;()</span>\n    <span class=\"kd\">val</span> <span class=\"py\">stateFlow</span> <span class=\"p\">=</span> <span class=\"nc\">MutableStateFlow</span><span class=\"p\">(</span><span class=\"k\">false</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">flow</span> <span class=\"p\">=</span> <span class=\"nf\">flow</span> <span class=\"p\">{</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">1_000L</span><span class=\"p\">)</span>\n        <span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">flatMapLatest</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span>\n            <span class=\"n\">sharedFlow</span>\n                <span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span>\n                    <span class=\"n\">value</span> <span class=\"p\">+</span> <span class=\"n\">it</span>\n                <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"p\">.</span><span class=\"nf\">flatMapLatest</span> <span class=\"p\">{</span> <span class=\"c1\">// 여기에 추가</span>\n            <span class=\"n\">stateFlow</span>\n                <span class=\"p\">.</span><span class=\"nf\">filter</span> <span class=\"p\">{</span> <span class=\"n\">it</span> <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nf\">launch</span> <span class=\"p\">{</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">sharedFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"mi\">999L</span><span class=\"p\">)</span>\n        <span class=\"n\">sharedFlow</span><span class=\"p\">.</span><span class=\"nf\">emit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"n\">stateFlow</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"k\">true</span> <span class=\"c1\">// 여기에 추가</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">flow</span>\n        <span class=\"p\">.</span><span class=\"nf\">collect</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"p\">-&gt;</span> <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"s\">\"value: $value\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드는 앞에 코드보다 더 쉽게 딱 한 번의 값만이 출력되는데, 이 값은 <code class=\"language-plaintext highlighter-rouge\">true</code>이다.</p>\n\n<p>왜 <code class=\"language-plaintext highlighter-rouge\">true</code>인지는 <code class=\"language-plaintext highlighter-rouge\">flatMapLatest</code>를 이해한다면 매우 쉽게 알 수 있다.</p>\n\n<p><br /></p>\n\n<h2>마무리</h2>\n\n<p>이전에 작성한 글 보다 flow가 더 쉽게 느껴질 수 있다. <code class=\"language-plaintext highlighter-rouge\">Job()</code>을 이해하는 부분이 더 명확하기 때문이기도 하고, flow는 1개로 해석할 수 있지만 <code class=\"language-plaintext highlighter-rouge\">launch {}</code>는 <code class=\"language-plaintext highlighter-rouge\">launch</code> 안에 <code class=\"language-plaintext highlighter-rouge\">launch</code>를 사용할 수도 있기 때문이다.</p>\n\n<p>가능하다면 아래와 같은 형태는 지향하는 편이 모두가 이해하기 쉬운데 이렇게 활용하는 경우도 사실 많진 않긴 하다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">launch</span> <span class=\"p\">{</span>\n    <span class=\"nf\">launch</span> <span class=\"p\">{</span>\n        <span class=\"nf\">launch</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// ...</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>flow는 하나의 흐름만을 이해하면 되는데 그 사이에 값의 흐름이 A to B로 바뀌는 흐름만 이해하면 해석이 쉬워지기 때문이다.</p>\n",
        "contentSnippet": "이 글은 2025 안드로이드 탐구 영역에 나온 문제 중 flow와 관련한 문제를 해석한 글이다.\n안드로이드 탐구 영역 후기 글\n(😨 오류 정정) 🤔 2025년도에도 개발자들은 코루틴 예외 처리 때문에 밤샘각? 😨 (2025학년도 안드로이드 탐구영역 문제풀이) - link\n2025학년도 안드로이드 탐구영역 - link\n2025학년도 안드로이드 탐구영역을 준비하며(경완님 작성) - link\n무슨 문제인가?\n코루틴 flow에 대한 문제가 크게 2문제가 있었다. 이 중 코루틴 영역에 포함한 1개의 문제를 살펴보려 한다.\n이 문제는 StateFlow와 flow {}를 복합적으로 사용하는 문제이다.\n이 문제에 나오는 Flow에 대한 내용은 이전에 필자의 블로그에 작성했던 다양한 글이 있으니 링크를 추가한다.\nCallback으로 받은 데이터를 Coroutines에서 활용하는 방법! Flow 활용 - link\nCallback으로 전달받은 데이터를 Coroutines의 Channel로 처리해보자. - link\n이 글에서는\n2025 안드로이드 탐구 영역에 나온 문제 일부를 정리한다.\nCoroutiens flow에 대한 이해가 필요하다.\n문제를 살펴보자\n아래가 문제에서 나온 전체 코드이다.(Test 부분은 수정)\n\n@Test\nfun test() = runTest {\n    val stateFlow = MutableStateFlow(1)\n\n    val flow = flow {\n        emit(1)\n        delay(1_000L)\n        emit(2)\n        delay(1_000L)\n        emit(3)\n    }\n        .flatMapLatest { value ->\n            stateFlow\n                .map {\n                    value + it\n                }\n        }\n\n    launch {\n        delay(999L)\n        stateFlow.emit(2)\n        delay(999L)\n        stateFlow.emit(3)\n    }\n\n    flow\n        .collect { value -> println(\"value: $value\") }\n}\n\n\n이 문제에서는 1 개의 StateFlow와 1 개의 flow {}를 초기화하고, flow 다음에 flatMapLatest를 사용하여 StateFlow를 통해 새로운 흐름을 만드는 문제이다.\n\nflatMapLatest는 무엇인가?\nflatMapLatest - link의 함수 원형은 아래와 같다.\n\n@ExperimentalCoroutinesApi\npublic inline fun <T, R> Flow<T>.flatMapLatest(@BuilderInference crossinline transform: suspend (value: T) -> Flow<R>): Flow<R> =\n    transformLatest { emitAll(transform(it)) }\n\n\n문서의 설명 그대로를 가져오면\nReturns a flow that switches to a new flow produced by transform function every time the original flow emits a value. When the original flow emits a new value, the previous flow produced by transform block is cancelled.\n제미나이에게 해석을 요청한 부분은 다음과 같다.\n이 코드는 원본 flow가 값을 내보낼 때마다 transform 함수에 의해 생성된 새로운 flow로 전환하는 flow를 반환합니다.\n좀 더 자세히 설명하면,\nflow는 코루틴에서 비동기적으로 데이터를 처리하는 데 사용되는 자료 구조입니다. 마치 시간에 따라 값을 내보내는 스트림과 같습니다.\ntransform은 flow의 각 값을 변환하는 함수입니다. 이 함수는 새로운 flow를 생성할 수도 있습니다.\nflatMapLatest는 flow의 각 값에 대해 transform 함수를 호출하여 새로운 flow를 생성하고, 이 flow들의 값을 순차적으로 내보내는 연산자입니다.\n중요한 점은, 원본 flow가 새로운 값을 내보낼 때마다 이전에 transform 함수에 의해 생성된 flow는 취소된다는 것입니다. 즉, 항상 최신 값에 대한 flow만 활성화됩니다.\n예를 들어, 사용자가 검색어를 입력할 때마다 검색 결과를 가져오는 flow가 있다고 가정해 보겠습니다. flatMapLatest를 사용하면 사용자가 새로운 검색어를 입력할 때마다 이전 검색 결과에 대한 flow는 취소되고 새로운 검색어에 대한 flow가 생성됩니다.\n이러한 방식은 최신 값만 처리해야 하는 경우에 유용합니다. 예를 들어, 사용자 인터페이스에서 최신 데이터만 표시해야 하는 경우 flatMapLatest를 사용하면 불필요한 작업을 방지하고 성능을 향상시킬 수 있습니다.\n여기서 마지막의 cancel 부분이 궁금하여 상세 코드를 좀 더 살펴보았는데, collect {} 처리 후 apply 부분에서 cancel()과 join()을 처리하고 있음을 알 수 있는데, 항상 최신의 값만을 흘려보냄을 코드로 알 수 있다.\n\ninternal class ChannelFlowTransformLatest<T, R>(\n    private val transform: suspend FlowCollector<R>.(value: T) -> Unit,\n    flow: Flow<T>,\n    context: CoroutineContext = EmptyCoroutineContext,\n    capacity: Int = Channel.BUFFERED,\n    onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND\n) : ChannelFlowOperator<T, R>(flow, context, capacity, onBufferOverflow) {\n    override fun create(context: CoroutineContext, capacity: Int, onBufferOverflow: BufferOverflow): ChannelFlow<R> =\n        ChannelFlowTransformLatest(transform, flow, context, capacity, onBufferOverflow)\n\n    override suspend fun flowCollect(collector: FlowCollector<R>) {\n        assert { collector is SendingCollector } // So cancellation behaviour is not leaking into the downstream\n        coroutineScope {\n            var previousFlow: Job? = null\n            flow.collect { value ->\n                previousFlow?.apply { // 이 부분\n                    cancel(ChildCancelledException())\n                    join()\n                }\n                // Do not pay for dispatch here, it's never necessary\n                previousFlow = launch(start = CoroutineStart.UNDISPATCHED) {\n                    collector.transform(value)\n                }\n            }\n        }\n    }\n}\n\n\n결국 flatMapLatest를 사용하면 2 개의 flow 흐름을 합칠 수 있으며, 이전 흐름의 데이터는 언제나 최신 데이터 흐름을 사용함을 알 수 있다.\n\n돌아가서\nMutableStateFlow는 가장 마지막 최신 데이터 1 개를 사용할 수 있는 상태를 저장하기 위한 용도이며, HotFlow이다. 언제나 최신 데이터만을 가진다.\n반대로 flow는 구독하기 전에는 동작하지 않는 ColdFlow에 속한다.\nKotlin Coroutines Flow의 Cold/Hot flow(Stream)의 데이터 흐름(Data flow) 이해해 보기 - link\n\nval stateFlow = MutableStateFlow(1)\n\nval flow = flow {\n    emit(1)\n    delay(1_000L)\n    emit(2)\n    delay(1_000L)\n    emit(3)\n}\n    .flatMapLatest { value ->\n        stateFlow\n            .map {\n                value + it\n            }\n    }\n\n\n그럼 이 코드에서의 구독 시점은 이어서 나오는 코드에서 알 수 있는데, launch {}를 실행하고 나서 바로 collect를 하고 있음을 알 수 있다.\n\nlaunch {\n    delay(999L)\n    stateFlow.emit(2)\n    delay(999L)\n    stateFlow.emit(3)\n}\n\nflow\n    .collect { value -> println(\"value: $value\") }\n\n\n\n구독한 데이터의 순서\n이 문제는 테스트가 가능하고, 이해할 수 있는 형태로 제공해야 해서 delay를 명확하게 제공해 주고 있다.\n구독이 시작되면 emit(1)을 시작하고, 1초의 대기가 걸린다. 그럼 StateFlow의 1과 emit 1을 합산하여 2 출력, 이어서 999ms 후에 stateFlow에 2를 전달하였으므로 1+2의 결과 3을 출력한다.\n이후의 결과를 통합하면 2, 3, 4, 5, 6이 순차로 출력된다.\n\n이 문제의 답은\n사실 위 코드를 해석할 필요도 없는 간단한 문제이다.\nStateFlow에 emit(2)를 하면 flow {} emit(1)부터 다시 발행되어진다. 라는 부분이다.\nflatMapLatest에 걸어둔 StateFlow에 값을 넘기더라도 flow {}  부터 실행한다는 건 일어날 수 없다. 하지만 exception이 발생하고, retry를 걸었다면 flow {}부터 실행할 수 있다.\nretry 위치가 매우 중요한데, 이전에 작성한 글의 최하단 시나리오 2 번 부분을 살펴보길\nKotlin Coroutines Flow의 Cold/Hot flow(Stream)의 데이터 흐름(Data flow) 이해해 보기 - link\n\nStateFlow가 아니라 SharedFlow를 함께 사용하면?\n문제를 조금 바꿔 StateFlow 대신 SharedFlow를 사용한다면 코드의 동작은 어떻게 될까?\n\n@Test\nfun test() = runTest {\n    val sharedFlow = MutableSharedFlow<Int>()\n\n    val flow = flow {\n        emit(1)\n        delay(1_000L)\n        emit(2)\n        delay(1_000L)\n        emit(3)\n    }\n        .flatMapLatest { value ->\n            sharedFlow\n                .map {\n                    value + it\n                }\n        }\n\n    launch {\n        delay(999L)\n        sharedFlow.emit(2)\n        delay(999L)\n        sharedFlow.emit(3)\n    }\n\n    flow\n        .collect { value -> println(\"value: $value\") }\n}\n\n\n이 코드의 응답은 확연하게 달라지는데 3, 5 만이 출력된다.\nSharedFlow는 replay를 하지 않기 때문에 값이 오기 전에는 반응 자체를 하지 않기 때문이다.\n그래서 이 코드는\nemit(1)을 하더라도 println하지 않고 sharedFlow에 2가 들어와야 만 1+2하여 3이 출력된다.\n\nStateFlow, SharedFlow, flow를 셋 다 합성한다면?\nmerge, combine, zip을 활용하는 것이 아니라 MutableStateFlow를 하나 더 추가하고 flatMapLatest를 하나 더 추가하여 활용하는 경우를 아래와 같이 추가해 보았다.\n\n@Test\nfun test() = runTest {\n    val sharedFlow = MutableSharedFlow<Int>()\n    val stateFlow = MutableStateFlow(false)\n\n    val flow = flow {\n        emit(1)\n        delay(1_000L)\n        emit(2)\n        delay(1_000L)\n        emit(3)\n    }\n        .flatMapLatest { value ->\n            sharedFlow\n                .map {\n                    value + it\n                }\n        }\n        .flatMapLatest { // 여기에 추가\n            stateFlow\n                .filter { it }\n        }\n\n    launch {\n        delay(999L)\n        sharedFlow.emit(2)\n        delay(999L)\n        sharedFlow.emit(3)\n        stateFlow.value = true // 여기에 추가\n    }\n\n    flow\n        .collect { value -> println(\"value: $value\") }\n}\n\n\n이 코드는 앞에 코드보다 더 쉽게 딱 한 번의 값만이 출력되는데, 이 값은 true이다.\n왜 true인지는 flatMapLatest를 이해한다면 매우 쉽게 알 수 있다.\n\n마무리\n이전에 작성한 글 보다 flow가 더 쉽게 느껴질 수 있다. Job()을 이해하는 부분이 더 명확하기 때문이기도 하고, flow는 1개로 해석할 수 있지만 launch {}는 launch 안에 launch를 사용할 수도 있기 때문이다.\n가능하다면 아래와 같은 형태는 지향하는 편이 모두가 이해하기 쉬운데 이렇게 활용하는 경우도 사실 많진 않긴 하다.\n\nlaunch {\n    launch {\n        launch {\n            // ...\n        }\n    }\n}\n\n\nflow는 하나의 흐름만을 이해하면 되는데 그 사이에 값의 흐름이 A to B로 바뀌는 흐름만 이해하면 해석이 쉬워지기 때문이다.",
        "guid": "https://thdev.tech/coroutines/2024/12/22/Kotlin-Coroutines-flow/",
        "isoDate": "2024-12-22T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": [
      {
        "creator": "고명환",
        "title": "매출없는 스타트업의 기업가치 평가 방법 - 스타트업",
        "link": "https://brunch.co.kr/@@LOc/242",
        "pubDate": "Tue, 24 Dec 2024 02:01:54 GMT",
        "author": "고명환",
        "content": "매출이 없는 스타트업이라도 투자를 유치할 수 있는 방법은 충분히 존재합니다. 다만, 매출 기반의 전통적인 기업가치 평가 방식(DCF, PER 등)을 적용하기가 어렵기 때문에 투자자는 다른 평가 기준을 활용하여 기업가치를 산정하게 됩니다. 매출이 없는 스타트업이 주로 활용하는 대표적인 기업가치 평가 방법은 다음과 같습니다.  1. 투자 관점   아직 매출을 <img src= \"https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FLOc%2Fimage%2FQZ_19_y0d9VPdo2SHb2-dgSjCpE.jpg\" width=\"500\" />",
        "contentSnippet": "매출이 없는 스타트업이라도 투자를 유치할 수 있는 방법은 충분히 존재합니다. 다만, 매출 기반의 전통적인 기업가치 평가 방식(DCF, PER 등)을 적용하기가 어렵기 때문에 투자자는 다른 평가 기준을 활용하여 기업가치를 산정하게 됩니다. 매출이 없는 스타트업이 주로 활용하는 대표적인 기업가치 평가 방법은 다음과 같습니다.  1. 투자 관점   아직 매출을",
        "guid": "https://brunch.co.kr/@@LOc/242",
        "isoDate": "2024-12-24T02:01:54.000Z"
      },
      {
        "creator": "고명환",
        "title": "정책자금 중 중소벤처기업진흥공단 자금이 1순위 - 스타트업",
        "link": "https://brunch.co.kr/@@LOc/241",
        "pubDate": "Mon, 23 Dec 2024 08:32:54 GMT",
        "author": "고명환",
        "content": "국내외 금융기관 및 연구소들은 2025년 국내 경제 성장률이 전반적으로 둔화될 것으로 전망하고 있습니다. 금리 변동성도 높아질 수 있어 스타트업 입장에서는 외부 투자나 은행권 대출에 대한 부담이 커질 수 있습니다. 이런 환경에서 보다 안정적으로 자금을 조달할 방법을 모색해야 합니다. 스타트업 은 설립 초기에는 은행권 담보가 부족하고, 투자 유치도 쉽지 않아<img src= \"https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FLOc%2Fimage%2F7QoqJQxlNGtBjqm-F83jK0Wupt4.jpg\" width=\"500\" />",
        "contentSnippet": "국내외 금융기관 및 연구소들은 2025년 국내 경제 성장률이 전반적으로 둔화될 것으로 전망하고 있습니다. 금리 변동성도 높아질 수 있어 스타트업 입장에서는 외부 투자나 은행권 대출에 대한 부담이 커질 수 있습니다. 이런 환경에서 보다 안정적으로 자금을 조달할 방법을 모색해야 합니다. 스타트업 은 설립 초기에는 은행권 담보가 부족하고, 투자 유치도 쉽지 않아",
        "guid": "https://brunch.co.kr/@@LOc/241",
        "isoDate": "2024-12-23T08:32:54.000Z"
      },
      {
        "creator": "고명환",
        "title": "2025년을 준비하는 스타트업을 위한 경영전략 - 스타트업",
        "link": "https://brunch.co.kr/@@LOc/240",
        "pubDate": "Thu, 19 Dec 2024 01:42:00 GMT",
        "author": "고명환",
        "content": "2025년에는 고환율과 경기불황 속에서 VC투자 또한 위축이 예상됩니다. 과거 유동성이 풍부했던 시장 환경과 다르게 면밀한 시장 분석에 따른 스타트업의 세부 전략이 요구되는 시기에 도래하였습니다. 2025년을 준비하는 스타트업의 입장에서는 조금이나마 도움이 되면 좋을 듯합니다.  1. 환경 분석 : 고환율 경기 불황 VC 투자 위축 대응 필요   2025년<img src= \"https://img1.daumcdn.net/thumb/R1280x0/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FLOc%2Fimage%2FfmWhfsdViV-gw1SINmTzm_5rJEs.jpg\" width=\"500\" />",
        "contentSnippet": "2025년에는 고환율과 경기불황 속에서 VC투자 또한 위축이 예상됩니다. 과거 유동성이 풍부했던 시장 환경과 다르게 면밀한 시장 분석에 따른 스타트업의 세부 전략이 요구되는 시기에 도래하였습니다. 2025년을 준비하는 스타트업의 입장에서는 조금이나마 도움이 되면 좋을 듯합니다.  1. 환경 분석 : 고환율 경기 불황 VC 투자 위축 대응 필요   2025년",
        "guid": "https://brunch.co.kr/@@LOc/240",
        "isoDate": "2024-12-19T01:42:00.000Z"
      }
    ]
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": [
      {
        "creator": "minieetea",
        "title": "회의만 하다 끝나는 하루",
        "link": "https://minieetea.com/how-to-set-meeting-productivity/",
        "pubDate": "Mon, 23 Dec 2024 06:55:48 GMT",
        "content:encodedSnippet": "💬\n우아콘2024 PM멘토링 세션의 Q&A를 바탕으로 내용을 보완하여 작성한 글입니다. 질문/답변은 녹화되지 않았지만, 본 세션의 영상은 이전 포스팅을 참고해주세요. \n\n연차가 올라갈수록 PM이 만나야 되는 유관 부서가 많아집니다. 처음에는 기획 디자인 개발 이렇게 만났지만, 점점 다른 업체도 만나고, 봐야 되는 업무 범위가 많이 넓어져요. 그러다 보니까 회사에서 하루 종일 사람들 만나고 회의하고 회의록 정리하고 나면은 제가 일할 시간이 거의 없어지는 걸 많이 느끼거든요.\n그래서 이제 점점 버려야 될 거나 이제 덜어내야 될 거가 뭔지를 좀 생각해 봐야겠다는 생각이 드는데, 멘토님은 이제 점점 이 업무가 많아질 때 가장 먼저 뭘 덜어내는 게 필요하다고 생각하시는지 궁금합니다.\n\n\n회사가 기대하는 리더, 그리고 ‘무엇을 덜어낼 수 있을까?’\n우선, 회사마다 ‘리더나 매니저’에게 기대하는 모습이 천차만별이더라고요. 어떤 곳은 “임팩트 조금 덜해도 되니까 일단 빨리 진행해야 한다”가 핵심 가치인 반면, 또 어떤 곳은 “중요한 건 심도 있게 논의하고, 제대로 된 결과물을 내야 한다”라고 말하거든요.\n그러니까 회사(또는 상위 결정권자)가 어떤 의사결정 스타일을 지향하는지에 따라, 내가 취해야 할 스케줄링 방식이 달라질 수밖에 없다는 겁니다. 예를 들어, ‘빨리빨리’를 강조하는 회사라면, 제 경험상 회의나 일을 덜어내기란 쉽지 않습니다. 대신 회의를 빠르게 끝내거나, 빠르게 의사결정을 내려야만 하죠. 반면 심도 있는 논의를 선호하는 회사에서는, 한 번의 회의만으로 끝낼 수 없는 주제들이 많아지니 또 다른 식의 스케줄 관리가 필요한 거예요.\n어쨌든, 회사의 문화가 어떻든 간에 “무언가를 덜어낼 수 있느냐”는 결국 내 업무 범위와 역할을 명확히 아는 것에서 시작됩니다. 내가 ‘어떤 파트에 기여할 수 있고, 어떤 파트는 과감히 남에게 넘길 수 있는지’를 스스로 구분해야, 비로소 회의나 잡무를 줄일 수 있으니까요.\n1. 비즈니스팀에서 ‘빠른 의사결정’이 중요했을 때\n제가 한창 ‘비즈니스팀’에서 일할 때에는, 빠른 의사결정이 정말 중요했습니다. 과제의 목표와 일정이 분명하니까, 회의가 곧 실행이고 실행이 곧 결과였어요. 그래서 하루 종일 회의실에서 여러 팀과 의견 맞추다 보면, 정작 제 일을 할 시간은 없었죠.\n한 번은 “이렇게 회의를 몰아서 다 하는 게 맞나?” 싶어서 일부 미팅을 팀원들에게 넘겨봤는데, 그 결과 의사결정을 못 내린 회의들이 도로 저에게 돌아오더라고요. ‘아, 결국 결론이나 방향성 제시는 내 몫이었구나’ 하고 깨닫게 됐죠. 그래서 그 뒤로는 ‘의사결정이 필요한 단계인가, 아닌가’를 분명히 갈라서, 결정이 필요한 타이밍이라면 제가 직접 들어가고, 아직 목표나 일정이 확실치 않은 상황이라면 팀원들에게 먼저 탐색하게 했습니다.\n2. 지원팀에서 '명확한 역할분배'가 중요했을 때\n지금은 ‘공통서비스기획팀’이라는 곳에서 일고 있는데, 이 부서는 이름부터 ‘공통’이라서인지, 영역이 명확하지 않다는 특성이 있더라고요. 누가 뭘 담당해야 하는지 애매하다 보니, 팀원들에게 회의를 위임해놓으면 결국엔 일이 다시 제게 돌아오는 경우가 많았어요. 그래서 이제는 R&R이 확실하게 정리될 때까진 제가 회의에 참여하고, 이후부터는 팀원들에게 전권을 주는 식으로 바꾸었습니다.\n예전에는 “아, 중요한 회의니까 내가 일단 다 들어가야지”라고만 생각했다면, 이제는 “어떤 회의에 내가 꼭 참여해야 하고, 어떤 회의는 다른 분들이 잘 진행할 수 있을까?”를 먼저 판단합니다. 결과적으로, 의사결정이 필요하거나 R&R이 불확실한 미팅에는 제가 들어가지만, 어느 정도 가이드만 있어도 충분히 돌아갈 만한 회의는 팀원들이 주도하도록 넘기는 편이죠.\n믿고 맡긴다고 하더라도 “아, 그래도 내가 회의를 빠지면 뭔가 놓치는 게 아닐까?” 하고 불안하실 수 있어요. 저도 그랬어요. 팀원들이 대신할 수 있는 부분이 있어도, 놓칠까 봐 전부 챙기려다 보니 결국 제 본업에 쓸 시간이 너무 부족해지더라고요.\n그런데 막상 해보면, ‘의사결정이 필요한 회의 vs. 그렇지 않은 회의’를 구분하고 적절히 넘기는 게 훨씬 효율적입니다. 디자인 회의에서 이미 UI/UX 방향이 확정된 상태라면, 저는 PM이 빠져도 괜찮다고 생각해요. 컨셉과 정책이 이미 정해졌다면, 디자이너와 개발자가 세부를 더 자유롭게 논의해도 됩니다. 물론 큰 변수가 생길 것 같으면 다시 제가 회의에 들어가서 방향을 잡아주긴 하지만요.\n\n'위임'과 '거절' 사이엔 많은 옵션이 있어요. \n사실 “그거 팀 리더니까 가능한 거 아니야?”라고 많이들 여쭤보세요. 근데 저는 리더가 아니어도 할 수 있는 일이 많다고 봅니다. 예를 들어, 기획 단계에서의 정책 결정에는 꼭 참여해야 하겠지만, 이후 디자인·개발 단계로 넘어가면 실제 작업자들이 더 많이 알고 있을 수 있잖아요. 그렇다면 굳이 내가 모든 회의에 다 들어가서 가이드할 필요는 없는 거죠.\n스스로 “내 역할에서 무엇을, 어떤 속도감으로, 어디까지 책임질 건지”를 정해두면, 자연스럽게 어떤 회의에 들어가고 어떤 회의는 넘길지 기준이 잡히거든요. 단순히 회의가 많으니 ‘아무 회의나 막 덜어내자’가 아니라, ‘지금 이 단계에서 내가 반드시 결정해야 할 게 있는가?’를 면밀히 살펴보는 게 포인트예요.\n즉, 나의 역할에서 무엇을, 어떤 속도감으로, 원하는 결정을 할 것인가에 따라서 스케쥴링 전략을 다르게 가져가야 합니다. 단순이 회의가 많다는 현상은 제대로 된 문제정의가 아니에요. \n하지만 막상 현실에선 “거절해도 되나?” 하는 마음이 들 수 있죠. ‘내가 빠지면 민폐 아닐까?’ ‘결국 일이 또 내게 돌아오진 않을까?’ 이런 불안감도 있고, 회의를 거절하는 게 왠지 미안하게 느껴지기도 하고요. 그런데 생각보다 회의를 거절하는 건 훨씬 다양한 방법이 있습니다. '안갈거임'과 '나는 아님', '아직 아님'만 구분해도 훨씬 마음이 편해집니다. \n\n자신보다 의사결정력이 높은 분에게 위임\n서면회의록만 공유받고 중요한 부분만 확인\n목적이 불분명하면 주제 세팅을 다시 요청\n\n이런 식으로 스마트하게 거절하거나 재조정해보세요. 제 시간과 에너지는 한정되어 있으니까요. 그리고 무작정 거절을 표하기보다는 어떻게 해야 회의가 더 나아질 수 있는지 “이 회의는 목표가 불분명하니 한 번 더 정리된 다음에 만나요” 식으로 의견을 내면 오히려 상대도 시간을 아낄 수 있습니다. 이렇게 작은 태도 변화만으로도, “회의로 하루 종일 바빴다”는 피로감을 크게 줄일 수 있다고 생각합니다.\n\n이번 회의의 결과에 기대를 낮춰보세요\n“그런데 그렇게 해도 회의가 줄어들지 않는다”는 분들도 있을 겁니다. 저도 그럴 때가 있어요. 어떤 이슈들은 한 번 만에 해결되지 않고, 2~3번쯤은 모여야 진전이 생기는 경우가 흔하니까요. 그래서 “도대체 언제 한 방에 결론이 나지?” 하고 짜증이 날 때가 있죠.\n이럴 땐 회의의 목적을 아주 작게나마 설정해두는 것이 도움이 됩니다. 예를 들어, “이 회의에서는 내가 무엇만 얻어가면 되겠다”라는 식으로 스스로 목적을 작게나마 설정해두는 거죠. 이렇게 목적 자체를 다양화해두면, “이 시간 자체가 헛되지 않았다”는 느낌을 조금 더 쉽게 가질 수 있습니다. \n또한, 이 시간을 나에게 어떻게 유리하게 쓸 수 있을지 고민해보시면 좋겠습니다. 아무리 불필요해 보이는 회의라 해도, 그 안에서 내가 놓치면 안 되는 정보나 사람들의 생각 흐름 등을 파악할 기회가 될 수 있거든요. 이렇게 의도적으로 에너지를 분배하면, 회의가 덜 비효율적으로 느껴집니다.\n조금 더 구체적으로 말씀드리면, 하나의 아젠다가 한 번에 해결되는 경우는 드물다고 생각하시고, “이 이슈는 약 3번 정도 회의를 하게 되겠다” 하고 미리 예상해보는 겁니다. 그리고 첫 번째 회의에서는 “서로 어떤 어려움이 있고, 어떤 맥락에서 고민하는지” 정도만 이해해오겠다고 내 회의 목적을 세팅해두는 거죠.\n그러면 회의 중간에라도 어느 정도 목적 달성이 이뤄졌다 싶을 때,\n“지금 회의 시간이 얼마 남지 않아서 결론까지 도출하기는 어려울 것 같습니다. 그래도 서로의 상황은 어느 정도 이해한 것 같으니, 다음 회의 전까지 각자 3~4개 정도 방안을 검토해오면 어떨까요?”\n라고 제안하면서 회의를 일찍 마무리할 수 있습니다. 이렇게 하면 다음 번 회의가 훨씬 더 명확해지고, 실제로 문제 해결 가능성이 높아집니다.\n\n결국, 회의가 많아지면 “어떻게 덜어낼 수 있을까?”라는 고민은 모두가 하게 됩니다. 그렇지만 정답은 “회의를 다 없애자”가 아니라, ‘내가 꼭 챙겨야 하는 회의와 그렇지 않은 회의를 구분’하고, “이 회의에서 무엇만 얻어가면 되는지” 목적을 명확히 하는 데 있습니다.\n특히 연차가 올라갈수록 일은 늘고, 유관부서도 많아지죠. 그래서 제 경험상, 의사결정이 필요한 단계에는 직접 뛰어들되, 아직 목표나 일정이 불투명하거나 실행만 하면 되는 단계는 팀원·동료에게 과감히 넘기는 게 답이었습니다. 그렇게 해야 비로소 제가 해야 할 ‘진짜 일’에 시간을 쏟을 수 있었으니까요.\n여러분에게 정말 '중요한 일'은 무엇인가요? 혹시 '중요해 보이는 일에 뛰어다니는 일'은 아니었을까요? 이번주 캘린더를 돌아보고 중요하지 않은 일 하나를 거절해보세요. 처음은 힘드니까요. '해서는 안될 일은 아니니까 해도 괜찮다'고 스스로에게 말해주세요.",
        "dc:creator": "minieetea",
        "content": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x1F4AC;</div><div class=\"kg-callout-text\">&#xC6B0;&#xC544;&#xCF58;2024 PM&#xBA58;&#xD1A0;&#xB9C1; &#xC138;&#xC158;&#xC758; Q&amp;A&#xB97C; &#xBC14;&#xD0D5;&#xC73C;&#xB85C; &#xB0B4;&#xC6A9;&#xC744; &#xBCF4;&#xC644;&#xD558;&#xC5EC; &#xC791;&#xC131;&#xD55C; &#xAE00;&#xC785;&#xB2C8;&#xB2E4;. &#xC9C8;&#xBB38;/&#xB2F5;&#xBCC0;&#xC740; &#xB179;&#xD654;&#xB418;&#xC9C0; &#xC54A;&#xC558;&#xC9C0;&#xB9CC;, &#xBCF8; &#xC138;&#xC158;</div></div>",
        "contentSnippet": "💬\n우아콘2024 PM멘토링 세션의 Q&A를 바탕으로 내용을 보완하여 작성한 글입니다. 질문/답변은 녹화되지 않았지만, 본 세션",
        "guid": "672620fc9afc530001f973fa",
        "categories": [
          "Performance",
          "Product manager"
        ],
        "isoDate": "2024-12-23T06:55:48.000Z"
      }
    ]
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "프리미엄 프로그램 22종 무료 라이센스 대방출 (X-MAS 이벤트)",
        "link": "http://muzbox.tistory.com/483516",
        "pubDate": "Mon, 23 Dec 2024 10:49:36 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483516#entry483516comment",
        "content": "<p data-ke-size=\"size16\">&nbsp;AOMEI의 2024 크리스마스 기브어웨이로 22개 프리미엄 소프트웨어를 무료로 다운로드하세요! 데이터 보호, PC 최적화, 멀티미디어 도구를 포함한 $1,453 상당의 혜택을 지금 바로 확인하세요!  </p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"00.jpg\" data-origin-width=\"890\" data-origin-height=\"890\"><span data-url=\"https://blog.kakaocdn.net/dn/bSliXQ/btsLqToECok/zG67Ieahg2sHLKW2D22241/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bSliXQ/btsLqToECok/zG67Ieahg2sHLKW2D22241/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bSliXQ/btsLqToECok/zG67Ieahg2sHLKW2D22241/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbSliXQ%2FbtsLqToECok%2FzG67Ieahg2sHLKW2D22241%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"프리미엄 프로그램 22종 무료 라이센스 대방출\" width=\"500\" height=\"500\" data-filename=\"00.jpg\" data-origin-width=\"890\" data-origin-height=\"890\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  AOMEI의 빅 크리스마스 카니발 기브어웨이</b></span></h2>\n<p data-ke-size=\"size16\">크리스마스는 따뜻한 분위기와 기쁨으로 가득한 시즌입니다. 그리고 그 기쁨을 배로 만들 특별한 기회가 찾아왔습니다. 데이터 관리 및 PC 최적화 솔루션의 선두주자인 <b>AOMEI</b>가 2024년 <b>Biggest Christmas Carnival Giveaway</b>를 시작했습니다. 이번 이벤트는 최신 기술을 통해 일상적인 작업을 더 쉽고 효과적으로 만들어 줄 프리미엄 소프트웨어를 무료로 제공하는 행사입니다.</p>\n<p data-ke-size=\"size16\">이 이벤트는 소프트웨어 애호가뿐만 아니라 컴퓨터 성능 향상과 데이터 보호에 관심이 있는 누구에게나 이상적입니다. 이제부터 AOMEI가 제공하는 주요 소프트웨어와 이 기회를 활용하는 방법을 살펴보겠습니다.  </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  포함된 소프트웨어 주요 목록</b></span></h2>\n<p data-ke-size=\"size16\">AOMEI 크리스마스 카니발 기브어웨이는 그 자체로 축제입니다. 이 행사는 무려 <b>22개의 프리미엄 소프트웨어</b>를 포함하고 있으며, 그 총 가치는 <b>$1,453</b>에 달합니다. 이러한 소프트웨어는 데이터 보호, PC 최적화, 멀티미디어 도구 등 다양한 카테고리에서 제공됩니다. 주요 소프트웨어를 자세히 살펴보겠습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>  데이터 보호 도구</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"01.png\" data-origin-width=\"1116\" data-origin-height=\"748\"><span data-url=\"https://blog.kakaocdn.net/dn/swBic/btsLurKdTnK/qAUJNfczITWzSFW73yz2WK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/swBic/btsLurKdTnK/qAUJNfczITWzSFW73yz2WK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/swBic/btsLurKdTnK/qAUJNfczITWzSFW73yz2WK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FswBic%2FbtsLurKdTnK%2FqAUJNfczITWzSFW73yz2WK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"01.png\" data-origin-width=\"1116\" data-origin-height=\"748\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">데이터 보호는 현대 디지털 라이프에서 필수적입니다. AOMEI는 데이터 보안을 위한 최고의 도구를 제공합니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>AOMEI Backupper Pro</b>: Windows 환경에서 데이터를 안전하게 백업하고 복원할 수 있는 완벽한 솔루션입니다. 시스템, 파티션, 드라이브 등을 쉽고 빠르게 클론할 수 있어 중요한 데이터를 완벽히 보호할 수 있습니다.</li>\n<li><b>AOMEI Partition Assistant Pro</b>: 하드 디스크 공간을 관리하고 PC 성능을 최적화할 수 있는 도구입니다. 특히 디스크 공간 문제를 해결하거나 파티션을 변환할 때 유용합니다.</li>\n<li><b>DoYourData Super Eraser</b>: 데이터를 영구적으로 삭제하는 강력한 도구로, 복구 불가능한 방식으로 데이터를 제거해 개인 정보를 완벽히 보호합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b> ️ PC 최적화 툴</b></span></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"02.png\" data-origin-width=\"1085\" data-origin-height=\"793\"><span data-url=\"https://blog.kakaocdn.net/dn/rNLlT/btsLrd1iTN7/RhXrAFzKjLs0SbW8DJZpRK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/rNLlT/btsLrd1iTN7/RhXrAFzKjLs0SbW8DJZpRK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/rNLlT/btsLrd1iTN7/RhXrAFzKjLs0SbW8DJZpRK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FrNLlT%2FbtsLrd1iTN7%2FRhXrAFzKjLs0SbW8DJZpRK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"02.png\" data-origin-width=\"1085\" data-origin-height=\"793\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">PC 성능을 최적화하고 불필요한 파일을 정리하는 도구는 필수적입니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>Ashampoo WinOptimizer 26</b>: 30개 이상의 강력한 기능을 제공하며, 시스템 성능을 개선하고 문제를 해결합니다.</li>\n<li><b>Wise Care 365</b>: PC 체크업, 시스템 클리너, 프라이버시 보호 등 다양한 기능을 제공합니다.</li>\n<li><b>IObit Uninstaller 14 PRO</b>: 프로그램을 간편하게 제거하고 남은 파일을 정리할 수 있는 강력한 도구입니다.</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><b><span style=\"color: #ee2323;\">  멀티미디어 도구</span></b></h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"03.png\" data-origin-width=\"1040\" data-origin-height=\"629\"><span data-url=\"https://blog.kakaocdn.net/dn/J9sjP/btsLtTUB4J9/Kiziw1AlaTLgLHB2JakCD1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/J9sjP/btsLtTUB4J9/Kiziw1AlaTLgLHB2JakCD1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/J9sjP/btsLtTUB4J9/Kiziw1AlaTLgLHB2JakCD1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FJ9sjP%2FbtsLtTUB4J9%2FKiziw1AlaTLgLHB2JakCD1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"03.png\" data-origin-width=\"1040\" data-origin-height=\"629\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">멀티미디어 콘텐츠 작업을 위한 다양한 도구도 포함되어 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>Winxvideo AI</b>: 동영상 품질을 향상시키고, 4K 및 8K 해상도에서 변환, 편집, 안정화 작업을 수행할 수 있습니다.</li>\n<li><b>Aiarty Image Matting</b>: AI 기술로 정밀한 배경 제거 및 이미지 복원을 제공합니다.</li>\n<li><b>Ashampoo Background Remover</b>: 복잡한 이미지의 배경을 제거하며, 투명한 개체도 완벽히 처리할 수 있습니다.</li>\n</ul>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"04.png\" data-origin-width=\"1036\" data-origin-height=\"626\"><span data-url=\"https://blog.kakaocdn.net/dn/rVCTr/btsLsL3TooF/0M6aUWQtFpvAAwsuAVReDk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/rVCTr/btsLsL3TooF/0M6aUWQtFpvAAwsuAVReDk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/rVCTr/btsLsL3TooF/0M6aUWQtFpvAAwsuAVReDk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FrVCTr%2FbtsLsL3TooF%2F0M6aUWQtFpvAAwsuAVReDk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"04.png\" data-origin-width=\"1036\" data-origin-height=\"626\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b> ️ 참여 방법</b></span></h2>\n<p><figure class=\"imageslideblock alignCenter\" data-image=\"[{&quot;src&quot;:&quot;https://blog.kakaocdn.net/dn/bB0dvI/btsLsqlqRiL/EsJB4X5YFf8OTKwm4BJbbk/img.png&quot;},{&quot;src&quot;:&quot;https://blog.kakaocdn.net/dn/WPdkN/btsLsMaDI1f/RAkgo51E5KZkxVpuKkUry0/img.png&quot;},{&quot;src&quot;:&quot;https://blog.kakaocdn.net/dn/Bcj9j/btsLsNOckBP/iEcntyRnowyfSQeuojxHp1/img.png&quot;},{&quot;src&quot;:&quot;https://blog.kakaocdn.net/dn/bbCFmD/btsLsfK0s1I/XWlSQux1uca29o4Q4kKQp1/img.png&quot;},{&quot;src&quot;:&quot;https://blog.kakaocdn.net/dn/bUTB3h/btsLsABoAf3/fdBGX5P0s5UQpekiZwXq7K/img.png&quot;}]\">\n  <div class=\"image-container\"><span class=\"image-wrap selected\" data-phocus=\"https://blog.kakaocdn.net/dn/bB0dvI/btsLsqlqRiL/EsJB4X5YFf8OTKwm4BJbbk/img.png\" data-url=\"https://blog.kakaocdn.net/dn/bB0dvI/btsLsqlqRiL/EsJB4X5YFf8OTKwm4BJbbk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bB0dvI/btsLsqlqRiL/EsJB4X5YFf8OTKwm4BJbbk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbB0dvI%2FbtsLsqlqRiL%2FEsJB4X5YFf8OTKwm4BJbbk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"827\" data-origin-height=\"537\" data-is-animation=\"false\"/></span><span class=\"image-wrap \" data-phocus=\"https://blog.kakaocdn.net/dn/WPdkN/btsLsMaDI1f/RAkgo51E5KZkxVpuKkUry0/img.png\" data-url=\"https://blog.kakaocdn.net/dn/WPdkN/btsLsMaDI1f/RAkgo51E5KZkxVpuKkUry0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/WPdkN/btsLsMaDI1f/RAkgo51E5KZkxVpuKkUry0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWPdkN%2FbtsLsMaDI1f%2FRAkgo51E5KZkxVpuKkUry0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"827\" data-origin-height=\"537\" data-is-animation=\"false\"/></span><span class=\"image-wrap \" data-phocus=\"https://blog.kakaocdn.net/dn/Bcj9j/btsLsNOckBP/iEcntyRnowyfSQeuojxHp1/img.png\" data-url=\"https://blog.kakaocdn.net/dn/Bcj9j/btsLsNOckBP/iEcntyRnowyfSQeuojxHp1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/Bcj9j/btsLsNOckBP/iEcntyRnowyfSQeuojxHp1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBcj9j%2FbtsLsNOckBP%2FiEcntyRnowyfSQeuojxHp1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"827\" data-origin-height=\"537\" data-is-animation=\"false\"/></span><span class=\"image-wrap \" data-phocus=\"https://blog.kakaocdn.net/dn/bbCFmD/btsLsfK0s1I/XWlSQux1uca29o4Q4kKQp1/img.png\" data-url=\"https://blog.kakaocdn.net/dn/bbCFmD/btsLsfK0s1I/XWlSQux1uca29o4Q4kKQp1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bbCFmD/btsLsfK0s1I/XWlSQux1uca29o4Q4kKQp1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbbCFmD%2FbtsLsfK0s1I%2FXWlSQux1uca29o4Q4kKQp1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"827\" data-origin-height=\"537\" data-is-animation=\"false\"/></span><span class=\"image-wrap \" data-phocus=\"https://blog.kakaocdn.net/dn/bUTB3h/btsLsABoAf3/fdBGX5P0s5UQpekiZwXq7K/img.png\" data-url=\"https://blog.kakaocdn.net/dn/bUTB3h/btsLsABoAf3/fdBGX5P0s5UQpekiZwXq7K/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bUTB3h/btsLsABoAf3/fdBGX5P0s5UQpekiZwXq7K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbUTB3h%2FbtsLsABoAf3%2FfdBGX5P0s5UQpekiZwXq7K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"827\" data-origin-height=\"537\" data-is-animation=\"false\"/></span><button class=\"btn btn-prev\"><span class=\"ico-prev\">이전</span></button><button class=\"btn btn-next\"><span class=\"ico-next\">다음</span></button></div>\n  <div class=\"mark\"><span data-index=\"0\">0</span><span data-index=\"1\">1</span><span data-index=\"2\">2</span><span data-index=\"3\">3</span><span data-index=\"4\">4</span></div>\n</figure>\n</p>\n<p data-ke-size=\"size16\">AOMEI 크리스마스 기브어웨이에 참여하는 방법은 간단합니다. 특별한 조건 없이 누구나 참여할 수 있으며, 아래 단계를 따라 손쉽게 소프트웨어를 다운로드할 수 있습니다:</p>\n<ol style=\"list-style-type: decimal;\" data-ke-list-type=\"decimal\">\n<li><b><a href=\"https://www.aomeitech.com/partners/biggest-christmas-carnival-giveaway-7410.html\">공식 프로모션 페이지</a></b>에 접속합니다.</li>\n<li>참여하려는 소프트웨어를 선택한 후 <b>&ldquo;Get it Now&rdquo;</b> 버튼을 클릭합니다.</li>\n<li>ZIP 파일을 다운로드하면 설치 프로그램과 라이선스 키를 확인할 수 있습니다.</li>\n<li>다운로드한 파일을 실행해 설치를 완료하고, 제공된 라이선스 키를 입력하여 소프트웨어를 활성화합니다.</li>\n</ol>\n<p data-ke-size=\"size16\">  <b>중요:</b> 이 이벤트는 <b>2025년 1월 10일</b>에 종료되므로 서둘러 참여하세요!</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b><span style=\"color: #009a87;\">  마치며</span></b></h2>\n<p data-ke-size=\"size16\">&nbsp;이번 크리스마스는 AOMEI의 <b>Biggest Christmas Carnival Giveaway</b>와 함께하세요. 이 특별한 기회를 통해 다양한 프리미엄 소프트웨어를 무료로 다운로드하고 PC를 한 단계 업그레이드할 수 있습니다. 데이터 관리, PC 성능 최적화, 멀티미디어 콘텐츠 제작 등 각종 필요를 충족할 솔루션이 준비되어 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">오늘 바로 <a href=\"https://www.aomeitech.com/partners/biggest-christmas-carnival-giveaway-7410.html\">AOMEI 공식 페이지</a>에 접속하여 소프트웨어를 다운로드하세요. 여러분의 디지털 라이프를 더욱 풍성하게 만들 기회를 놓치지 마세요!  </p>\n<hr data-ke-style=\"style1\" />\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\"><b>Q&amp;A</b></span></h3>\n<p data-ke-size=\"size16\"><b>Q1. AOMEI 크리스마스 기브어웨이에서 제공되는 소프트웨어는 유료인가요?</b><br />A: 아니요, 이번 이벤트에서 제공되는 모든 소프트웨어는 무료입니다. 단, 이벤트 기간 동안만 다운로드 및 활성화가 가능합니다.</p>\n<p data-ke-size=\"size16\"><b>Q2. 소프트웨어를 어디서 다운로드할 수 있나요?</b><br />A: AOMEI 공식 프로모션 페이지에서 ZIP 파일을 다운로드하면 됩니다. 설치 프로그램과 라이선스 키가 포함되어 있습니다.</p>\n<p data-ke-size=\"size16\"><b>Q3. 라이선스는 얼마나 유효한가요?</b><br />A: 대부분의 소프트웨어는 개인 사용자에게 수개월에서 1년의 제한된 기간 동안 제공되지만, 이벤트 조건에 따라 유효 기간이 다를 수 있습니다. 각각의 소프트웨어 라이선스 정보를 확인하세요.</p>",
        "contentSnippet": "AOMEI의 2024 크리스마스 기브어웨이로 22개 프리미엄 소프트웨어를 무료로 다운로드하세요! 데이터 보호, PC 최적화, 멀티미디어 도구를 포함한 $1,453 상당의 혜택을 지금 바로 확인하세요!  \n\n\n \n  AOMEI의 빅 크리스마스 카니발 기브어웨이\n크리스마스는 따뜻한 분위기와 기쁨으로 가득한 시즌입니다. 그리고 그 기쁨을 배로 만들 특별한 기회가 찾아왔습니다. 데이터 관리 및 PC 최적화 솔루션의 선두주자인 AOMEI가 2024년 Biggest Christmas Carnival Giveaway를 시작했습니다. 이번 이벤트는 최신 기술을 통해 일상적인 작업을 더 쉽고 효과적으로 만들어 줄 프리미엄 소프트웨어를 무료로 제공하는 행사입니다.\n이 이벤트는 소프트웨어 애호가뿐만 아니라 컴퓨터 성능 향상과 데이터 보호에 관심이 있는 누구에게나 이상적입니다. 이제부터 AOMEI가 제공하는 주요 소프트웨어와 이 기회를 활용하는 방법을 살펴보겠습니다.  \n \n  포함된 소프트웨어 주요 목록\nAOMEI 크리스마스 카니발 기브어웨이는 그 자체로 축제입니다. 이 행사는 무려 22개의 프리미엄 소프트웨어를 포함하고 있으며, 그 총 가치는 $1,453에 달합니다. 이러한 소프트웨어는 데이터 보호, PC 최적화, 멀티미디어 도구 등 다양한 카테고리에서 제공됩니다. 주요 소프트웨어를 자세히 살펴보겠습니다.\n  데이터 보호 도구\n\n\n데이터 보호는 현대 디지털 라이프에서 필수적입니다. AOMEI는 데이터 보안을 위한 최고의 도구를 제공합니다.\nAOMEI Backupper Pro: Windows 환경에서 데이터를 안전하게 백업하고 복원할 수 있는 완벽한 솔루션입니다. 시스템, 파티션, 드라이브 등을 쉽고 빠르게 클론할 수 있어 중요한 데이터를 완벽히 보호할 수 있습니다.\nAOMEI Partition Assistant Pro: 하드 디스크 공간을 관리하고 PC 성능을 최적화할 수 있는 도구입니다. 특히 디스크 공간 문제를 해결하거나 파티션을 변환할 때 유용합니다.\nDoYourData Super Eraser: 데이터를 영구적으로 삭제하는 강력한 도구로, 복구 불가능한 방식으로 데이터를 제거해 개인 정보를 완벽히 보호합니다.\n \n ️ PC 최적화 툴\n\n\nPC 성능을 최적화하고 불필요한 파일을 정리하는 도구는 필수적입니다.\nAshampoo WinOptimizer 26: 30개 이상의 강력한 기능을 제공하며, 시스템 성능을 개선하고 문제를 해결합니다.\nWise Care 365: PC 체크업, 시스템 클리너, 프라이버시 보호 등 다양한 기능을 제공합니다.\nIObit Uninstaller 14 PRO: 프로그램을 간편하게 제거하고 남은 파일을 정리할 수 있는 강력한 도구입니다.\n \n  멀티미디어 도구\n\n\n멀티미디어 콘텐츠 작업을 위한 다양한 도구도 포함되어 있습니다.\nWinxvideo AI: 동영상 품질을 향상시키고, 4K 및 8K 해상도에서 변환, 편집, 안정화 작업을 수행할 수 있습니다.\nAiarty Image Matting: AI 기술로 정밀한 배경 제거 및 이미지 복원을 제공합니다.\nAshampoo Background Remover: 복잡한 이미지의 배경을 제거하며, 투명한 개체도 완벽히 처리할 수 있습니다.\n\n\n \n \n ️ 참여 방법\n\n  \n이전다음\n01234\nAOMEI 크리스마스 기브어웨이에 참여하는 방법은 간단합니다. 특별한 조건 없이 누구나 참여할 수 있으며, 아래 단계를 따라 손쉽게 소프트웨어를 다운로드할 수 있습니다:\n공식 프로모션 페이지에 접속합니다.\n참여하려는 소프트웨어를 선택한 후 “Get it Now” 버튼을 클릭합니다.\nZIP 파일을 다운로드하면 설치 프로그램과 라이선스 키를 확인할 수 있습니다.\n다운로드한 파일을 실행해 설치를 완료하고, 제공된 라이선스 키를 입력하여 소프트웨어를 활성화합니다.\n  중요: 이 이벤트는 2025년 1월 10일에 종료되므로 서둘러 참여하세요!\n \n \n  마치며\n 이번 크리스마스는 AOMEI의 Biggest Christmas Carnival Giveaway와 함께하세요. 이 특별한 기회를 통해 다양한 프리미엄 소프트웨어를 무료로 다운로드하고 PC를 한 단계 업그레이드할 수 있습니다. 데이터 관리, PC 성능 최적화, 멀티미디어 콘텐츠 제작 등 각종 필요를 충족할 솔루션이 준비되어 있습니다.\n \n오늘 바로 AOMEI 공식 페이지에 접속하여 소프트웨어를 다운로드하세요. 여러분의 디지털 라이프를 더욱 풍성하게 만들 기회를 놓치지 마세요!  \nQ&A\nQ1. AOMEI 크리스마스 기브어웨이에서 제공되는 소프트웨어는 유료인가요?\nA: 아니요, 이번 이벤트에서 제공되는 모든 소프트웨어는 무료입니다. 단, 이벤트 기간 동안만 다운로드 및 활성화가 가능합니다.\nQ2. 소프트웨어를 어디서 다운로드할 수 있나요?\nA: AOMEI 공식 프로모션 페이지에서 ZIP 파일을 다운로드하면 됩니다. 설치 프로그램과 라이선스 키가 포함되어 있습니다.\nQ3. 라이선스는 얼마나 유효한가요?\nA: 대부분의 소프트웨어는 개인 사용자에게 수개월에서 1년의 제한된 기간 동안 제공되지만, 이벤트 조건에 따라 유효 기간이 다를 수 있습니다. 각각의 소프트웨어 라이선스 정보를 확인하세요.",
        "guid": "http://muzbox.tistory.com/483516",
        "categories": [
          "NEWS/프리웨어 뉴스",
          "AOMEI",
          "PC 최적화",
          "데이터 보호",
          "라이선스 키",
          "멀티미디어 도구",
          "무료 소프트웨어",
          "시스템 성능",
          "이벤트 참여",
          "크리스마스 이벤트",
          "클라우드 관리"
        ],
        "isoDate": "2024-12-23T01:49:36.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "매일 윈도우 노트북을 종료해야 하는 이유, 계속 켜두지 마세요",
        "link": "http://muzbox.tistory.com/483515",
        "pubDate": "Fri, 20 Dec 2024 09:46:43 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483515#entry483515comment",
        "content": "<p data-ke-size=\"size16\">매일 윈도우 노트북을 종료해야 하는 이유와 이점에 대해 소개합니다. 성능 향상, 시스템 수명 연장, 과열 방지까지! 간단한 습관으로 노트북을 보호하세요.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1312\" data-origin-height=\"736\"><span data-url=\"https://blog.kakaocdn.net/dn/cjkzVj/btsLqNNuMeD/gwViyXY0wV9cb0WPpBJejk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cjkzVj/btsLqNNuMeD/gwViyXY0wV9cb0WPpBJejk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cjkzVj/btsLqNNuMeD/gwViyXY0wV9cb0WPpBJejk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcjkzVj%2FbtsLqNNuMeD%2FgwViyXY0wV9cb0WPpBJejk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"매일 윈도우 노트북을 종료해야 하는 이유\" width=\"700\" height=\"393\" data-origin-width=\"1312\" data-origin-height=\"736\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;여러분은 노트북을 사용할 때 작업이 끝나면 어떻게 하시나요? 많은 사람이 간단히 노트북 뚜껑을 닫아 절전 모드로 전환한 뒤 다시 사용할 준비를 합니다. 이런 방식이 편리한 건 사실입니다. 하지만 이 편리함이 노트북에 문제를 일으킬 수 있다는 사실을 알고 계셨나요? 노트북도 사람처럼 매일 \"휴식\"이 필요합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이번 포스팅에서는 노트북을 매일 종료해야 하는 이유와 이를 통해 얻을 수 있는 장점을 자세히 알아보겠습니다. 성능 최적화와 시스템 수명을 연장하는 방법, 그리고 절전 모드와 종료의 차이를 명확히 구분해드립니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  노트북을 매일 종료해야 하는 이유</b></span></h2>\n<h3 data-ke-size=\"size23\"><b> ️ 성능 향상</b></h3>\n<p data-ke-size=\"size16\">노트북을 종료하면 시스템은 다음과 같은 작업을 수행합니다:</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>캐시 정리</b>: 작업 중 생성된 임시 파일이나 데이터를 삭제하여 저장 공간을 확보합니다.</li>\n<li><b>메모리 초기화</b>: 사용된 RAM을 비워 시스템 리소스를 확보합니다.</li>\n<li><b>업데이트 적용</b>: 윈도우는 종료와 부팅 시 업데이트를 적용하거나 시스템 상태를 점검합니다.</li>\n</ul>\n<p data-ke-size=\"size16\">이러한 작업은 노트북이 최상의 상태로 유지되도록 돕습니다. 특히 장시간 사용 후 성능이 저하되거나 오류가 발생하는 경우, 종료는 문제를 해결하는 가장 효과적인 방법 중 하나입니다. IT 전문가들이 문제 발생 시 가장 먼저 권장하는 방법이 \"재시작\"인 이유가 여기에 있습니다. 시스템 초기화를 통해 더 나은 성능을 얻을 수 있습니다.<br /><br /></p>\n<h3 data-ke-size=\"size23\"><b>⏳ 시스템 수명 연장</b></h3>\n<p data-ke-size=\"size16\">노트북을 종료하는 것은 하드웨어 보호 측면에서도 중요합니다. 노트북을 계속 절전 모드로 두거나 켜진 상태로 유지하면 다음과 같은 문제가 발생할 수 있습니다:</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>열 손상</b>: 노트북 내부 부품은 작동 중 열을 발생시킵니다. 특히 절전 모드 상태에서 팬이 계속 작동하면 열이 쌓이면서 부품에 손상을 줄 수 있습니다.</li>\n<li><b>하드웨어 마모</b>: 하드 디스크와 같은 기계적 부품은 계속 작동 시 마모될 가능성이 높습니다.</li>\n</ul>\n<p data-ke-size=\"size16\">특히, 노트북을 가방에 넣어 이동할 때 팬이 계속 작동하면 과열로 인해 심각한 손상이 발생할 수 있습니다. 이는 데이터 손실이나 하드웨어 교체와 같은 비용이 많이 드는 문제로 이어질 수 있습니다.<br /><br /></p>\n<h3 data-ke-size=\"size23\"><b>  절전 모드와의 차이점</b></h3>\n<p data-ke-size=\"size16\">절전 모드는 짧은 시간 동안 노트북을 다시 사용할 계획이 있을 때 유용합니다. 절전 모드에서는 현재 작업 상태가 저장되고 시스템은 최소한의 전력을 소비하며 대기 상태로 전환됩니다. 하지만 절전 모드는 시스템 리소스를 완전히 초기화하지 않습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>절전 모드의 적합한 경우</b>: 커피를 마시러 나가거나 1~2시간 정도 자리를 비울 때.</li>\n<li><b>종료가 필요한 경우</b>: 하루를 마무리하거나, 장시간 사용할 계획이 없을 때.</li>\n</ul>\n<p data-ke-size=\"size16\">장기적으로 시스템의 안정성과 성능을 유지하려면 반드시 정기적으로 종료해야 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b> ️ 노트북 종료의 주요 이점</b></span></h2>\n<h3 data-ke-size=\"size23\"><b>1. 문제 해결</b></h3>\n<p data-ke-size=\"size16\">종료와 재부팅은 시스템 오류를 최소화하는 간단한 방법입니다. 소프트웨어 충돌, 메모리 누수와 같은 문제는 종료 시 자동으로 해결될 수 있습니다. 윈도우는 종료 시 필요 없는 데이터를 정리하고, 다시 부팅하면서 초기 상태로 돌아갑니다. 이는 소프트웨어와 하드웨어 간의 충돌을 방지하고, 부팅 후 원활한 작업 환경을 제공합니다.</p>\n<h3 data-ke-size=\"size23\"><b>2. 배터리 효율</b></h3>\n<p data-ke-size=\"size16\">노트북 배터리는 사용 패턴에 따라 수명이 결정됩니다. 절전 모드는 미세한 전력을 소비하기 때문에 장시간 사용할 경우 배터리 소모가 계속됩니다. 특히 게임용 노트북과 같이 강력한 하드웨어를 갖춘 기기는 배터리 수명이 짧아 절전 모드보다 종료를 통해 에너지를 절약하는 것이 좋습니다.</p>\n<h3 data-ke-size=\"size23\"><b>3. 안전한 이동</b></h3>\n<p data-ke-size=\"size16\">노트북을 절전 모드 상태로 가방에 넣고 이동하면 팬 작동과 과열로 인해 내부 부품이 손상될 가능성이 있습니다. 종료를 통해 노트북이 완전히 꺼진 상태로 유지되면 이러한 위험을 방지할 수 있습니다. 특히 여름철과 같이 온도가 높은 환경에서는 더욱 중요합니다.</p>\n<h3 data-ke-size=\"size23\"><b>4. 업데이트 및 유지 관리</b></h3>\n<p data-ke-size=\"size16\">종료 시 윈도우는 시스템 업데이트를 적용하거나 드라이버를 점검합니다. 이는 시스템의 보안을 강화하고 최신 상태로 유지하는 데 도움이 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"윈도우11 종료.jpg\" data-origin-width=\"532\" data-origin-height=\"265\"><span data-url=\"https://blog.kakaocdn.net/dn/zoPkZ/btsLoKraZZ1/sHUELl582cqD7EHQLoE9Bk/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/zoPkZ/btsLoKraZZ1/sHUELl582cqD7EHQLoE9Bk/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/zoPkZ/btsLoKraZZ1/sHUELl582cqD7EHQLoE9Bk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FzoPkZ%2FbtsLoKraZZ1%2FsHUELl582cqD7EHQLoE9Bk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"윈도우11 종료.jpg\" data-origin-width=\"532\" data-origin-height=\"265\"/></span></figure>\n</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>마치며</b></span></h2>\n<p data-ke-size=\"size16\">노트북은 우리의 작업과 여가를 지원하는 중요한 도구입니다. 이를 잘 관리하고 장기적으로 성능과 수명을 유지하기 위해 매일 한 번씩 종료하는 습관을 들이는 것이 중요합니다. 절전 모드는 짧은 휴식을 위해 유용하지만, 하루를 마무리할 때는 시스템을 완전히 종료하는 것이 가장 바람직합니다. 오늘부터 여러분의 노트북에게 \"휴식\"을 선물해보세요. 이런 작은 습관이 큰 차이를 만들어낼 것입니다!  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #ee2323;\"><b>Q&amp;A</b></span></h2>\n<p data-ke-size=\"size16\"><b>Q1. 노트북을 얼마나 자주 종료해야 하나요?</b><br />A1. 하루 한 번, 작업을 마치고 장시간 사용하지 않을 때 종료하는 것이 이상적입니다.<br /><br /></p>\n<p data-ke-size=\"size16\"><b>Q2. 절전 모드와 종료의 차이를 쉽게 이해할 방법은?</b><br />A2. 절전 모드는 작업 상태를 유지하며 전력을 최소화하는 것이고, 종료는 시스템을 완전히 초기화하고 모든 작업을 끝내는 것입니다.<br /><br /><b>Q3. 노트북을 재부팅하면 정말 문제가 해결되나요?</b><br />A3. 예, 재부팅은 메모리 초기화와 시스템 충돌 해결에 효과적입니다. 종료와 재부팅을 통해 많은 소프트웨어 문제가 자동으로 해결됩니다.</p>",
        "contentSnippet": "매일 윈도우 노트북을 종료해야 하는 이유와 이점에 대해 소개합니다. 성능 향상, 시스템 수명 연장, 과열 방지까지! 간단한 습관으로 노트북을 보호하세요.\n\n\n \n 여러분은 노트북을 사용할 때 작업이 끝나면 어떻게 하시나요? 많은 사람이 간단히 노트북 뚜껑을 닫아 절전 모드로 전환한 뒤 다시 사용할 준비를 합니다. 이런 방식이 편리한 건 사실입니다. 하지만 이 편리함이 노트북에 문제를 일으킬 수 있다는 사실을 알고 계셨나요? 노트북도 사람처럼 매일 \"휴식\"이 필요합니다.\n \n이번 포스팅에서는 노트북을 매일 종료해야 하는 이유와 이를 통해 얻을 수 있는 장점을 자세히 알아보겠습니다. 성능 최적화와 시스템 수명을 연장하는 방법, 그리고 절전 모드와 종료의 차이를 명확히 구분해드립니다.\n \n \n  노트북을 매일 종료해야 하는 이유\n ️ 성능 향상\n노트북을 종료하면 시스템은 다음과 같은 작업을 수행합니다:\n캐시 정리: 작업 중 생성된 임시 파일이나 데이터를 삭제하여 저장 공간을 확보합니다.\n메모리 초기화: 사용된 RAM을 비워 시스템 리소스를 확보합니다.\n업데이트 적용: 윈도우는 종료와 부팅 시 업데이트를 적용하거나 시스템 상태를 점검합니다.\n이러한 작업은 노트북이 최상의 상태로 유지되도록 돕습니다. 특히 장시간 사용 후 성능이 저하되거나 오류가 발생하는 경우, 종료는 문제를 해결하는 가장 효과적인 방법 중 하나입니다. IT 전문가들이 문제 발생 시 가장 먼저 권장하는 방법이 \"재시작\"인 이유가 여기에 있습니다. 시스템 초기화를 통해 더 나은 성능을 얻을 수 있습니다.\n\n⏳ 시스템 수명 연장\n노트북을 종료하는 것은 하드웨어 보호 측면에서도 중요합니다. 노트북을 계속 절전 모드로 두거나 켜진 상태로 유지하면 다음과 같은 문제가 발생할 수 있습니다:\n열 손상: 노트북 내부 부품은 작동 중 열을 발생시킵니다. 특히 절전 모드 상태에서 팬이 계속 작동하면 열이 쌓이면서 부품에 손상을 줄 수 있습니다.\n하드웨어 마모: 하드 디스크와 같은 기계적 부품은 계속 작동 시 마모될 가능성이 높습니다.\n특히, 노트북을 가방에 넣어 이동할 때 팬이 계속 작동하면 과열로 인해 심각한 손상이 발생할 수 있습니다. 이는 데이터 손실이나 하드웨어 교체와 같은 비용이 많이 드는 문제로 이어질 수 있습니다.\n\n  절전 모드와의 차이점\n절전 모드는 짧은 시간 동안 노트북을 다시 사용할 계획이 있을 때 유용합니다. 절전 모드에서는 현재 작업 상태가 저장되고 시스템은 최소한의 전력을 소비하며 대기 상태로 전환됩니다. 하지만 절전 모드는 시스템 리소스를 완전히 초기화하지 않습니다.\n절전 모드의 적합한 경우: 커피를 마시러 나가거나 1~2시간 정도 자리를 비울 때.\n종료가 필요한 경우: 하루를 마무리하거나, 장시간 사용할 계획이 없을 때.\n장기적으로 시스템의 안정성과 성능을 유지하려면 반드시 정기적으로 종료해야 합니다.\n \n \n ️ 노트북 종료의 주요 이점\n1. 문제 해결\n종료와 재부팅은 시스템 오류를 최소화하는 간단한 방법입니다. 소프트웨어 충돌, 메모리 누수와 같은 문제는 종료 시 자동으로 해결될 수 있습니다. 윈도우는 종료 시 필요 없는 데이터를 정리하고, 다시 부팅하면서 초기 상태로 돌아갑니다. 이는 소프트웨어와 하드웨어 간의 충돌을 방지하고, 부팅 후 원활한 작업 환경을 제공합니다.\n2. 배터리 효율\n노트북 배터리는 사용 패턴에 따라 수명이 결정됩니다. 절전 모드는 미세한 전력을 소비하기 때문에 장시간 사용할 경우 배터리 소모가 계속됩니다. 특히 게임용 노트북과 같이 강력한 하드웨어를 갖춘 기기는 배터리 수명이 짧아 절전 모드보다 종료를 통해 에너지를 절약하는 것이 좋습니다.\n3. 안전한 이동\n노트북을 절전 모드 상태로 가방에 넣고 이동하면 팬 작동과 과열로 인해 내부 부품이 손상될 가능성이 있습니다. 종료를 통해 노트북이 완전히 꺼진 상태로 유지되면 이러한 위험을 방지할 수 있습니다. 특히 여름철과 같이 온도가 높은 환경에서는 더욱 중요합니다.\n4. 업데이트 및 유지 관리\n종료 시 윈도우는 시스템 업데이트를 적용하거나 드라이버를 점검합니다. 이는 시스템의 보안을 강화하고 최신 상태로 유지하는 데 도움이 됩니다.\n \n\n\n마치며\n노트북은 우리의 작업과 여가를 지원하는 중요한 도구입니다. 이를 잘 관리하고 장기적으로 성능과 수명을 유지하기 위해 매일 한 번씩 종료하는 습관을 들이는 것이 중요합니다. 절전 모드는 짧은 휴식을 위해 유용하지만, 하루를 마무리할 때는 시스템을 완전히 종료하는 것이 가장 바람직합니다. 오늘부터 여러분의 노트북에게 \"휴식\"을 선물해보세요. 이런 작은 습관이 큰 차이를 만들어낼 것입니다!  \nQ&A\nQ1. 노트북을 얼마나 자주 종료해야 하나요?\nA1. 하루 한 번, 작업을 마치고 장시간 사용하지 않을 때 종료하는 것이 이상적입니다.\n\nQ2. 절전 모드와 종료의 차이를 쉽게 이해할 방법은?\nA2. 절전 모드는 작업 상태를 유지하며 전력을 최소화하는 것이고, 종료는 시스템을 완전히 초기화하고 모든 작업을 끝내는 것입니다.\nQ3. 노트북을 재부팅하면 정말 문제가 해결되나요?\nA3. 예, 재부팅은 메모리 초기화와 시스템 충돌 해결에 효과적입니다. 종료와 재부팅을 통해 많은 소프트웨어 문제가 자동으로 해결됩니다.",
        "guid": "http://muzbox.tistory.com/483515",
        "categories": [
          "윈도우 사용팁/윈도우11 사용법",
          "PC 관리",
          "과열 방지",
          "노트북 종료",
          "배터리 효율",
          "성능 최적화",
          "시스템 수명",
          "업데이트 관리",
          "윈도우 팁",
          "윈도우사용법",
          "절전 모드"
        ],
        "isoDate": "2024-12-20T00:46:43.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "파워포인트 바닥글 일괄 수정하기",
        "link": "http://muzbox.tistory.com/483514",
        "pubDate": "Wed, 18 Dec 2024 12:09:01 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483514#entry483514comment",
        "content": "<p data-ke-size=\"size18\">파워포인트에서 슬라이드 바닥글을 손쉽게 삽입하고 슬라이드 마스터로 서식을 일괄 수정하는 방법을 소개합니다. 바닥글 설정과 서식 변경을 통해 전문적인 발표 자료를 만들어 보세요!</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 수정법.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/bwQdK7/btsLlNaAv79/tMHmKEovQNW6iNfRai6vB1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bwQdK7/btsLlNaAv79/tMHmKEovQNW6iNfRai6vB1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bwQdK7/btsLlNaAv79/tMHmKEovQNW6iNfRai6vB1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbwQdK7%2FbtsLlNaAv79%2FtMHmKEovQNW6iNfRai6vB1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기\" data-filename=\"파워포인트 바닥글 수정법.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;파워포인트로 프레젠테이션을 준비하다 보면 슬라이드 하단에 번호, 회사 이름, 날짜 등 추가적인 정보를 삽입해야 할 때가 많습니다. 이때 사용하는 것이 <b>바닥글 기능</b>입니다. 바닥글은 슬라이드의 정체성을 명확히 하고, 깔끔한 정보 전달을 가능하게 합니다. 하지만 슬라이드가 많아질수록 개별적으로 수정하기는 번거롭습니다. 이 문제를 해결하기 위해 <b>슬라이드 마스터</b>를 활용하면 효율적으로 작업할 수 있습니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  바닥글 텍스트 삽입하기</b></span></h2>\n<p data-ke-size=\"size18\">파워포인트에서 <b>바닥글을 삽입하는 방법</b>은 매우 간단합니다. 다음 단계를 차근차근 따라 하면 모든 슬라이드에 동일한 바닥글을 손쉽게 적용할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">1. 바닥글 텍스트 추가 단계</span></h3>\n<ol style=\"list-style-type: decimal; font-size: 16px;\" data-ke-list-type=\"decimal\">\n<li><b>삽입 탭</b> 클릭 &rarr; 상단의 <b>텍스트 그룹</b>에서 <b>머리글/바닥글</b> 선택.</li>\n<li><b>바닥글 항목</b>을 체크한 뒤 추가하고 싶은 텍스트를 입력.</li>\n<li>모든 슬라이드에 적용하려면 <b>모두 적용 버튼</b> 클릭.</li>\n</ol>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 추가 01.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"><span data-url=\"https://blog.kakaocdn.net/dn/kVihB/btsLljOnOnP/ElXdI3doyjPYaHchPnKxWK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/kVihB/btsLljOnOnP/ElXdI3doyjPYaHchPnKxWK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/kVihB/btsLljOnOnP/ElXdI3doyjPYaHchPnKxWK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkVihB%2FbtsLljOnOnP%2FElXdI3doyjPYaHchPnKxWK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기 1\" data-filename=\"파워포인트 바닥글 추가 01.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 추가 02.jpg\" data-origin-width=\"608\" data-origin-height=\"458\"><span data-url=\"https://blog.kakaocdn.net/dn/Z7HTK/btsLnHmeriY/DHWwvTuiKFdTeom27MHFSK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/Z7HTK/btsLnHmeriY/DHWwvTuiKFdTeom27MHFSK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/Z7HTK/btsLnHmeriY/DHWwvTuiKFdTeom27MHFSK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZ7HTK%2FbtsLnHmeriY%2FDHWwvTuiKFdTeom27MHFSK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기 2\" data-filename=\"파워포인트 바닥글 추가 02.jpg\" data-origin-width=\"608\" data-origin-height=\"458\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 추가 03.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"><span data-url=\"https://blog.kakaocdn.net/dn/bL5vJ0/btsLljVcKAk/7zws7qPg9zE5vJN7tHxBRK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bL5vJ0/btsLljVcKAk/7zws7qPg9zE5vJN7tHxBRK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bL5vJ0/btsLljVcKAk/7zws7qPg9zE5vJN7tHxBRK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbL5vJ0%2FbtsLljVcKAk%2F7zws7qPg9zE5vJN7tHxBRK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기 3\" data-filename=\"파워포인트 바닥글 추가 03.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">이 과정을 거치면 슬라이드 하단에 원하는 텍스트가 자동으로 입력됩니다. 특히 회사 로고, 슬로건, 발표 날짜 등을 추가할 때 매우 유용합니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">2. 특정 슬라이드에만 적용하기</span></h3>\n<p data-ke-size=\"size18\">모든 슬라이드가 아닌, 특정 슬라이드에만 바닥글을 삽입하고 싶다면 <b>적용 버튼</b>을 사용하세요. 이 버튼은 현재 선택한 슬라이드에만 텍스트를 추가합니다. 이를 활용하면 더 세부적으로 작업을 설정할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">3. 적용 후 확인하기</span></h3>\n<p data-ke-size=\"size18\">바닥글 삽입 후 슬라이드 하단을 확인해 보세요. 모든 슬라이드에 동일한 텍스트가 들어가야 하며, 한눈에 확인 가능한 깔끔한 디자인이 완성됩니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b> ️ 바닥글 서식 일괄 변경하기</b></span></h2>\n<p data-ke-size=\"size18\">바닥글 텍스트를 추가한 후, 폰트 크기나 색상을 일괄적으로 수정하고 싶을 때 <b>슬라이드 마스터</b>를 활용하면 됩니다. 슬라이드 마스터는 전체 슬라이드 디자인을 통합 관리할 수 있는 강력한 도구로, 특히 많은 슬라이드 작업 시 시간을 절약해 줍니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">1. 슬라이드 마스터 접근 방법</span></h3>\n<ol style=\"list-style-type: decimal; font-size: 16px;\" data-ke-list-type=\"decimal\">\n<li>상단 <b>보기 탭</b> 클릭.</li>\n<li><b>마스터 보기</b> 그룹에서 <b>슬라이드 마스터</b> 선택.</li>\n<li>좌측 사이드바에서 가장 상단의 <b>마스터 슬라이드</b> 클릭.</li>\n</ol>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 추가 04.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"><span data-url=\"https://blog.kakaocdn.net/dn/bl5QFF/btsLlP7cPGl/ULAQbBXMxLbiDm4bLTzu2K/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bl5QFF/btsLlP7cPGl/ULAQbBXMxLbiDm4bLTzu2K/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bl5QFF/btsLlP7cPGl/ULAQbBXMxLbiDm4bLTzu2K/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbl5QFF%2FbtsLlP7cPGl%2FULAQbBXMxLbiDm4bLTzu2K%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기 4\" data-filename=\"파워포인트 바닥글 추가 04.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">마스터 슬라이드는 슬라이드 디자인의 기본 설정을 포함하며, 여기에서 수정한 내용은 모든 슬라이드에 자동으로 반영됩니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #ee2323;\">2. 바닥글 서식 변경하기</span></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>바닥글 텍스트 도형 선택</b>: 슬라이드 하단에서 바닥글 텍스트 상자를 클릭.</li>\n<li><b>서식 변경</b>: 상단 <b>홈 탭</b>에서 폰트 크기, 스타일, 색상 등을 수정.</li>\n<li><b>즉시 적용</b>: 텍스트 서식 변경 사항이 전체 슬라이드에 일괄적으로 적용됩니다.</li>\n</ul>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"파워포인트 바닥글 추가 05.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"><span data-url=\"https://blog.kakaocdn.net/dn/crWu3F/btsLlOUP8o5/Y8jTEVXvO7ibU3pWUqkCA0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/crWu3F/btsLlOUP8o5/Y8jTEVXvO7ibU3pWUqkCA0/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/crWu3F/btsLlOUP8o5/Y8jTEVXvO7ibU3pWUqkCA0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcrWu3F%2FbtsLlOUP8o5%2FY8jTEVXvO7ibU3pWUqkCA0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" alt=\"파워포인트 바닥글 일괄 수정하기 5\" data-filename=\"파워포인트 바닥글 추가 05.jpg\" data-origin-width=\"1020\" data-origin-height=\"662\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>  슬라이드 마스터 활용의 장점</b></span></h2>\n<p data-ke-size=\"size18\">슬라이드 마스터를 이용하면 다음과 같은 이점을 누릴 수 있습니다:</p>\n<h3 data-ke-size=\"size23\">1. <b>시간 절약</b></h3>\n<p data-ke-size=\"size18\">개별적으로 바닥글을 수정하지 않아도 돼 작업 시간을 크게 줄일 수 있습니다. 특히 슬라이드가 많을수록 이점이 커집니다.</p>\n<h3 data-ke-size=\"size23\">2. <b>일관성 유지</b></h3>\n<p data-ke-size=\"size18\">모든 슬라이드의 디자인이 통일되어 깔끔하고 전문적인 프레젠테이션을 제작할 수 있습니다.</p>\n<h3 data-ke-size=\"size23\">3. <b>효율성 향상</b></h3>\n<p data-ke-size=\"size18\">한 번의 설정으로 전체 프레젠테이션의 서식을 관리할 수 있어 작업 효율성이 증가합니다.</p>\n<p data-ke-size=\"size18\">슬라이드 마스터는 단순히 시간 절약 도구를 넘어, 발표 자료의 완성도를 한 단계 끌어올리는 중요한 기능입니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>마치며</b></span></h2>\n<p data-ke-size=\"size18\">이번 글에서는 파워포인트에서 <b>바닥글 텍스트를 삽입하고 서식을 일괄적으로 수정하는 방법</b>을 알아보았습니다. 슬라이드 마스터를 활용하면 더 깔끔하고 통일성 있는 디자인을 만들 수 있으며, 작업 시간을 줄이는 데 큰 도움이 됩니다.</p>\n<p data-ke-size=\"size18\">다음 발표 준비 시, 이 방법을 활용해 보세요. 슬라이드의 프로페셔널한 변화를 경험할 수 있을 것입니다. 궁금한 점이 있다면 아래 Q&amp;A 섹션에서 확인해 보세요!  </p>\n<hr data-ke-style=\"style1\" />\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>Q&amp;A</b></span></h2>\n<p data-ke-size=\"size18\"><b>Q1: 바닥글 수정 시 일부 슬라이드에 반영되지 않는 이유는?</b><br /><b>A1:</b> 슬라이드 마스터에서 수정하지 않거나 특정 슬라이드에 개별 설정이 적용된 경우 반영되지 않을 수 있습니다. 이를 해결하려면 슬라이드 마스터를 확인하세요.<br /><br /></p>\n<p data-ke-size=\"size18\"><b>Q2: 바닥글 대신 로고를 넣을 수 있나요?</b><br /><b>A2:</b> 네, 슬라이드 마스터를 통해 로고나 이미지를 바닥글 위치에 삽입하면 전체 슬라이드에 적용할 수 있습니다.<br /><br /></p>\n<p data-ke-size=\"size18\"><b>Q3: 바닥글이 필요한 이유는 무엇인가요?</b><br /><b>A3:</b> 바닥글은 슬라이드 번호, 발표 일자, 회사 이름 등 기본 정보를 제공해 발표 자료의 명확성과 전문성을 높입니다.</p>",
        "contentSnippet": "파워포인트에서 슬라이드 바닥글을 손쉽게 삽입하고 슬라이드 마스터로 서식을 일괄 수정하는 방법을 소개합니다. 바닥글 설정과 서식 변경을 통해 전문적인 발표 자료를 만들어 보세요!\n\n\n \n 파워포인트로 프레젠테이션을 준비하다 보면 슬라이드 하단에 번호, 회사 이름, 날짜 등 추가적인 정보를 삽입해야 할 때가 많습니다. 이때 사용하는 것이 바닥글 기능입니다. 바닥글은 슬라이드의 정체성을 명확히 하고, 깔끔한 정보 전달을 가능하게 합니다. 하지만 슬라이드가 많아질수록 개별적으로 수정하기는 번거롭습니다. 이 문제를 해결하기 위해 슬라이드 마스터를 활용하면 효율적으로 작업할 수 있습니다.\n \n  바닥글 텍스트 삽입하기\n파워포인트에서 바닥글을 삽입하는 방법은 매우 간단합니다. 다음 단계를 차근차근 따라 하면 모든 슬라이드에 동일한 바닥글을 손쉽게 적용할 수 있습니다.\n1. 바닥글 텍스트 추가 단계\n삽입 탭 클릭 → 상단의 텍스트 그룹에서 머리글/바닥글 선택.\n바닥글 항목을 체크한 뒤 추가하고 싶은 텍스트를 입력.\n모든 슬라이드에 적용하려면 모두 적용 버튼 클릭.\n\n\n\n\n \n이 과정을 거치면 슬라이드 하단에 원하는 텍스트가 자동으로 입력됩니다. 특히 회사 로고, 슬로건, 발표 날짜 등을 추가할 때 매우 유용합니다.\n2. 특정 슬라이드에만 적용하기\n모든 슬라이드가 아닌, 특정 슬라이드에만 바닥글을 삽입하고 싶다면 적용 버튼을 사용하세요. 이 버튼은 현재 선택한 슬라이드에만 텍스트를 추가합니다. 이를 활용하면 더 세부적으로 작업을 설정할 수 있습니다.\n3. 적용 후 확인하기\n바닥글 삽입 후 슬라이드 하단을 확인해 보세요. 모든 슬라이드에 동일한 텍스트가 들어가야 하며, 한눈에 확인 가능한 깔끔한 디자인이 완성됩니다.\n \n \n ️ 바닥글 서식 일괄 변경하기\n바닥글 텍스트를 추가한 후, 폰트 크기나 색상을 일괄적으로 수정하고 싶을 때 슬라이드 마스터를 활용하면 됩니다. 슬라이드 마스터는 전체 슬라이드 디자인을 통합 관리할 수 있는 강력한 도구로, 특히 많은 슬라이드 작업 시 시간을 절약해 줍니다.\n1. 슬라이드 마스터 접근 방법\n상단 보기 탭 클릭.\n마스터 보기 그룹에서 슬라이드 마스터 선택.\n좌측 사이드바에서 가장 상단의 마스터 슬라이드 클릭.\n\n\n마스터 슬라이드는 슬라이드 디자인의 기본 설정을 포함하며, 여기에서 수정한 내용은 모든 슬라이드에 자동으로 반영됩니다.\n2. 바닥글 서식 변경하기\n바닥글 텍스트 도형 선택: 슬라이드 하단에서 바닥글 텍스트 상자를 클릭.\n서식 변경: 상단 홈 탭에서 폰트 크기, 스타일, 색상 등을 수정.\n즉시 적용: 텍스트 서식 변경 사항이 전체 슬라이드에 일괄적으로 적용됩니다.\n\n\n \n  슬라이드 마스터 활용의 장점\n슬라이드 마스터를 이용하면 다음과 같은 이점을 누릴 수 있습니다:\n1. 시간 절약\n개별적으로 바닥글을 수정하지 않아도 돼 작업 시간을 크게 줄일 수 있습니다. 특히 슬라이드가 많을수록 이점이 커집니다.\n2. 일관성 유지\n모든 슬라이드의 디자인이 통일되어 깔끔하고 전문적인 프레젠테이션을 제작할 수 있습니다.\n3. 효율성 향상\n한 번의 설정으로 전체 프레젠테이션의 서식을 관리할 수 있어 작업 효율성이 증가합니다.\n슬라이드 마스터는 단순히 시간 절약 도구를 넘어, 발표 자료의 완성도를 한 단계 끌어올리는 중요한 기능입니다.\n \n \n마치며\n이번 글에서는 파워포인트에서 바닥글 텍스트를 삽입하고 서식을 일괄적으로 수정하는 방법을 알아보았습니다. 슬라이드 마스터를 활용하면 더 깔끔하고 통일성 있는 디자인을 만들 수 있으며, 작업 시간을 줄이는 데 큰 도움이 됩니다.\n다음 발표 준비 시, 이 방법을 활용해 보세요. 슬라이드의 프로페셔널한 변화를 경험할 수 있을 것입니다. 궁금한 점이 있다면 아래 Q&A 섹션에서 확인해 보세요!  \nQ&A\nQ1: 바닥글 수정 시 일부 슬라이드에 반영되지 않는 이유는?\nA1: 슬라이드 마스터에서 수정하지 않거나 특정 슬라이드에 개별 설정이 적용된 경우 반영되지 않을 수 있습니다. 이를 해결하려면 슬라이드 마스터를 확인하세요.\n\nQ2: 바닥글 대신 로고를 넣을 수 있나요?\nA2: 네, 슬라이드 마스터를 통해 로고나 이미지를 바닥글 위치에 삽입하면 전체 슬라이드에 적용할 수 있습니다.\n\nQ3: 바닥글이 필요한 이유는 무엇인가요?\nA3: 바닥글은 슬라이드 번호, 발표 일자, 회사 이름 등 기본 정보를 제공해 발표 자료의 명확성과 전문성을 높입니다.",
        "guid": "http://muzbox.tistory.com/483514",
        "categories": [
          "오피스 프로그램 사용법/파워포인트",
          "PPT 기초",
          "PPT 바닥글",
          "PPT서식",
          "바닥글",
          "슬라이드마스터",
          "파워포인트",
          "파워포인트 기초"
        ],
        "isoDate": "2024-12-18T03:09:01.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": [
      {
        "creator": "늑돌이",
        "title": "고가 폰과 저가 폰으로 양극화한 2024년 3분기 스마트폰 시장",
        "link": "https://lazion.com/2513727",
        "pubDate": "Thu, 19 Dec 2024 10:12:52 +0900",
        "author": "늑돌이",
        "comments": "https://lazion.com/2513727#entry2513727comment",
        "content": "<h3 data-ke-size=\"size23\">세계 스마트폰 시장이 고급 폰과 저가 폰으로 양극화하는 상황을 보이고 있습니다. 글로벌 마켓 인텔리전스 기업 GfK - An NIQ Company(지에프케이)가 2024년 3분기 스마트폰 판매 동향을 발표했습니다.</h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><span style=\"color: #006dd7;\"><b> 2024년 3분기 스마트폰 판매 동향</b> </span></h4>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">지에프케이가 세계 주요 60여 개국의 소매점 판매 실적 데이터 등을 바탕으로 세계 시장 규모로 확대 추계하여 발표한 자료에 따르면 2024년 7~9월 세계 스마트폰 판매량은 전년 동기 대비 3% 증가하며 1~6월에 이어 플러스 성장세를 보였습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"2322375178_20241217152945_7231732262.jpg\" data-origin-width=\"640\" data-origin-height=\"272\"><span data-url=\"https://blog.kakaocdn.net/dn/perhF/btsLmWFmxX9/KPYbk3diG8RQKQ3qKkNTd1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/perhF/btsLmWFmxX9/KPYbk3diG8RQKQ3qKkNTd1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/perhF/btsLmWFmxX9/KPYbk3diG8RQKQ3qKkNTd1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FperhF%2FbtsLmWFmxX9%2FKPYbk3diG8RQKQ3qKkNTd1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"2322375178_20241217152945_7231732262.jpg\" data-origin-width=\"640\" data-origin-height=\"272\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">지역별로는 일부 신흥시장은 성장세를 보였으나 선진시장은 전년 동기 대비 소폭 감소하였습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><span style=\"color: #006dd7;\"><b>고가폰과 저가폰은 성장, 중가폰은 하락</b></span></h4>\n<p data-ke-size=\"size16\">가격대별로는 저가대(USD-250)의 제품이 시장 전체를 상회하는 성장세를 보였는데, 신흥시장뿐만 아니라 많은 지역에서 성장세를 보였습니다.</p>\n<p data-ke-size=\"size16\">고가대(USD500+)의 제품 또한 전체 시장을 상회하는 성장세를 보였습니다만 중가대(USD250-500) 제품군의 판매량은 전년 대비 하락했습니다. 고물가와 고금리로 인해 가처분 소득이 압박을 받으면서 중저가대에서 저가대로 수요가 이동하고 있는 것으로 추정된다고 하네요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><span style=\"color: #006dd7;\"><b>2025년 스마트폰 시장, 전망은?</b></span></h4>\n<p data-ke-size=\"size16\">이어지는 2024년 10월에서 12월까지의 스마트폰 시장은 하락 폭이 축소되었던 작년 같은 기간과 비교해서 소폭 상할 것으로 예상됩니다만 2024년 1~9월의 성장세와 비교하면 속도는 다소 둔화될 전망이라고 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">다가오는 2025년에는 선진시장을 중심으로 소비 회복에 따른 훈풍을 예상하는 반면, 지금까지의 높은 성장률에 대한 반동으로 신흥시장은 성장률 상승이 어려워져 현재로서는 2024년 수준의 판매량이 예상되고 있다고 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">특히 미국 정권 교체에 따른 영향 등 불확실한 요인도 여전히 존재하여 시장을 주시할 것을 권하고 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(출처 : GfK&nbsp;-&nbsp;An&nbsp;NIQ&nbsp;Company)</p>",
        "contentSnippet": "세계 스마트폰 시장이 고급 폰과 저가 폰으로 양극화하는 상황을 보이고 있습니다. 글로벌 마켓 인텔리전스 기업 GfK - An NIQ Company(지에프케이)가 2024년 3분기 스마트폰 판매 동향을 발표했습니다.\n \n 2024년 3분기 스마트폰 판매 동향 \n \n지에프케이가 세계 주요 60여 개국의 소매점 판매 실적 데이터 등을 바탕으로 세계 시장 규모로 확대 추계하여 발표한 자료에 따르면 2024년 7~9월 세계 스마트폰 판매량은 전년 동기 대비 3% 증가하며 1~6월에 이어 플러스 성장세를 보였습니다.\n \n\n\n \n지역별로는 일부 신흥시장은 성장세를 보였으나 선진시장은 전년 동기 대비 소폭 감소하였습니다.\n \n고가폰과 저가폰은 성장, 중가폰은 하락\n가격대별로는 저가대(USD-250)의 제품이 시장 전체를 상회하는 성장세를 보였는데, 신흥시장뿐만 아니라 많은 지역에서 성장세를 보였습니다.\n고가대(USD500+)의 제품 또한 전체 시장을 상회하는 성장세를 보였습니다만 중가대(USD250-500) 제품군의 판매량은 전년 대비 하락했습니다. 고물가와 고금리로 인해 가처분 소득이 압박을 받으면서 중저가대에서 저가대로 수요가 이동하고 있는 것으로 추정된다고 하네요.\n \n2025년 스마트폰 시장, 전망은?\n이어지는 2024년 10월에서 12월까지의 스마트폰 시장은 하락 폭이 축소되었던 작년 같은 기간과 비교해서 소폭 상할 것으로 예상됩니다만 2024년 1~9월의 성장세와 비교하면 속도는 다소 둔화될 전망이라고 합니다.\n \n다가오는 2025년에는 선진시장을 중심으로 소비 회복에 따른 훈풍을 예상하는 반면, 지금까지의 높은 성장률에 대한 반동으로 신흥시장은 성장률 상승이 어려워져 현재로서는 2024년 수준의 판매량이 예상되고 있다고 합니다.\n \n특히 미국 정권 교체에 따른 영향 등 불확실한 요인도 여전히 존재하여 시장을 주시할 것을 권하고 있습니다.\n \n \n(출처 : GfK - An NIQ Company)",
        "guid": "https://lazion.com/2513727",
        "categories": [
          "#더작은모바일/#스마트폰#PDA#PMP",
          "GfK",
          "market",
          "News",
          "Report",
          "Research",
          "smartphone"
        ],
        "isoDate": "2024-12-19T01:12:52.000Z"
      }
    ]
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "「RULIWEB」",
        "title": "[BETA] 워게이밍의 육중한 메카닉 슈터, 스틸 헌터 베타 리뷰",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2276",
        "pubDate": "Wed, 18 Dec 2024 14:12:32 +0900",
        "author": "「RULIWEB」",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/24/12/18/193d831c62e4cacdc.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2024-12-18T05:12:32.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "WSL - docker 컨테이너에서 GUI 앱을 실행하여 Windows에서 표시",
        "link": "https://jacking75.github.io/WSL-20241220/",
        "pubDate": "Fri, 20 Dec 2024 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vQ4v7bUfabMIp5zzIQ0IBm4kIrrU6AEPFN06WxKNQdtrWlewM823jVQrr4_sYMdSBDyxjryi-RdM9aI/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/WSL-20241220/",
        "isoDate": "2024-12-19T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": [
      {
        "creator": "SIDNFT",
        "title": "2차전지 LFP 는 마진 문제로 퇴출된다.",
        "link": "http://serverdown.tistory.com/1071",
        "pubDate": "Tue, 24 Dec 2024 17:52:05 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1071#entry1071comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=36HwrKBBInw\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=36HwrKBBInw</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=36HwrKBBInw\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bhGz34/hyXSw6P1XE/Cu6aLJb8E4PYOFhKFN3eI1/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/c4PDHP/hyXSEcK7Wr/lqkiM0QIHk8hrmpJoCFax0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"배터리 산업 장기적 관점, 2천조 시장 어디서 이익 발생하나\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/36HwrKBBInw\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">2차전지는 로봇 드론 때문에 더 많이 쓰일 것입니다.</p>\n<p data-ke-size=\"size16\">그중 중국에서 많이 만드는 LFP 는 제작 단가에 비해 낮은 에너지 밀도 때문에</p>\n<p data-ke-size=\"size16\">퇴줄 될 것이라는 주장이 영상에 담겨있습니다.</p>\n<p data-ke-size=\"size16\">LFP 를 싸게 만들더라도 마진이 남지 않으면 헛고생입니다.</p>\n<p data-ke-size=\"size16\">결국 한정된 공간에 얼마나 많은 에너지 밀도를 구현하냐는 싸움에서</p>\n<p data-ke-size=\"size16\">밀리게 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">길게 보면 전고체 베터리도 나올 것이구요</p>\n<p data-ke-size=\"size16\">AI 혁신으로 차세대 베터리도 만들어질 것입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">저가 비싸게 매수한건 어쩔 수 없지만 이 시장은 점점 커지고 있는건 사실입니다.<br />버티면서 공부하는게 나은 시점 이라고 생각햅니다.</p>\n<p data-ke-size=\"size16\">코인이 어이없이 올라주면 2차전지 주식 물이나 좀 타야겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">마무리</h2>\n<p data-ke-size=\"size16\">\"석기시대는 돌 부족으로 끝난게 아니다.\"<br />사우디 석유장관이 70년대 했던 말이라고 하네요.<br />시대의 변화를 인식해야하 한다는 명언입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=36HwrKBBInw\n\n\n\n2차전지는 로봇 드론 때문에 더 많이 쓰일 것입니다.\n그중 중국에서 많이 만드는 LFP 는 제작 단가에 비해 낮은 에너지 밀도 때문에\n퇴줄 될 것이라는 주장이 영상에 담겨있습니다.\nLFP 를 싸게 만들더라도 마진이 남지 않으면 헛고생입니다.\n결국 한정된 공간에 얼마나 많은 에너지 밀도를 구현하냐는 싸움에서\n밀리게 됩니다.\n \n길게 보면 전고체 베터리도 나올 것이구요\nAI 혁신으로 차세대 베터리도 만들어질 것입니다.\n \n저가 비싸게 매수한건 어쩔 수 없지만 이 시장은 점점 커지고 있는건 사실입니다.\n버티면서 공부하는게 나은 시점 이라고 생각햅니다.\n코인이 어이없이 올라주면 2차전지 주식 물이나 좀 타야겠습니다.\n \n마무리\n\"석기시대는 돌 부족으로 끝난게 아니다.\"\n사우디 석유장관이 70년대 했던 말이라고 하네요.\n시대의 변화를 인식해야하 한다는 명언입니다.",
        "guid": "http://serverdown.tistory.com/1071",
        "categories": [
          "투자",
          "2차전지"
        ],
        "isoDate": "2024-12-24T08:52:05.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "비트코인 패권 전장이 시작된다. / 미국 중국 러시아",
        "link": "http://serverdown.tistory.com/1070",
        "pubDate": "Tue, 24 Dec 2024 16:18:53 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1070#entry1070comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=sdTVmEmFPk8\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=sdTVmEmFPk8</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=sdTVmEmFPk8\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/pvzTK/hyXOkNMOAD/6z8rnktKkmuaGCMeSQrbR0/img.jpg?width=1280&amp;height=720&amp;face=886_144_1112_390,https://scrap.kakaocdn.net/dn/cg9pXT/hyXOiPYMWH/LXP9vzgefvUKsFtsAKp7w1/img.jpg?width=1280&amp;height=720&amp;face=886_144_1112_390\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"리플.. 기대 해도 좋은 희소식\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/sdTVmEmFPk8\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">국가가 바보냐 비트코인으로 경쟁하게 라고 말하는 분이 계시겠지만</p>\n<p data-ke-size=\"size16\">국가는 바보입니다.</p>\n<p data-ke-size=\"size16\">미국은 끝도 없이 주택대출을 늘리다 망했구요</p>\n<p data-ke-size=\"size16\">중국은 모두 부유해지자면서 모두 가난해졌습니다.</p>\n<p data-ke-size=\"size16\">러시아는 군사작전 한번 잘못했다가 전쟁을 3년째 하고 있습니다.</p>\n<p data-ke-size=\"size16\">이들은 엄청난 과학기술이 있음에도 불구하고 이묭입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그런데 드디어 이들이 패권 경쟁을 시작했습니다.<br />이들은 계속해서 사모아야할 이유가 만들어 진것입니다.<br />나중에는 왜 경쟁하는지도 모르면서 모으게 될 것입니다.</p>\n<p data-ke-size=\"size16\">계속 가치가 오르는 자산을 모으는건 나쁜일은 아닙니다.<br />국가도 똑똑이들 모아놓고 진지하게 트레이드 해야할 시점이 온거 같군요</p>\n<p data-ke-size=\"size16\">크리스마스 근처에선 원래 빠집니다. 이번엔 그것보다 훨씬 일찍 빠져버렸지만 ㅠㅠ<br />17일 FOMC 파월 말언)</p>\n<p data-ke-size=\"size16\">오르지 않는다면 견뎌보겠습니다.</p>\n<p data-ke-size=\"size16\">인생을 바꿀 중요한 기회가 오고 있습니다.</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=sdTVmEmFPk8\n\n\n\n국가가 바보냐 비트코인으로 경쟁하게 라고 말하는 분이 계시겠지만\n국가는 바보입니다.\n미국은 끝도 없이 주택대출을 늘리다 망했구요\n중국은 모두 부유해지자면서 모두 가난해졌습니다.\n러시아는 군사작전 한번 잘못했다가 전쟁을 3년째 하고 있습니다.\n이들은 엄청난 과학기술이 있음에도 불구하고 이묭입니다.\n \n그런데 드디어 이들이 패권 경쟁을 시작했습니다.\n이들은 계속해서 사모아야할 이유가 만들어 진것입니다.\n나중에는 왜 경쟁하는지도 모르면서 모으게 될 것입니다.\n계속 가치가 오르는 자산을 모으는건 나쁜일은 아닙니다.\n국가도 똑똑이들 모아놓고 진지하게 트레이드 해야할 시점이 온거 같군요\n크리스마스 근처에선 원래 빠집니다. 이번엔 그것보다 훨씬 일찍 빠져버렸지만 ㅠㅠ\n17일 FOMC 파월 말언)\n오르지 않는다면 견뎌보겠습니다.\n인생을 바꿀 중요한 기회가 오고 있습니다.",
        "guid": "http://serverdown.tistory.com/1070",
        "categories": [
          "코인",
          "비트코인"
        ],
        "isoDate": "2024-12-24T07:18:53.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "2025년말에 아파트를 살 수 있는 기회가 오는 이유를 공부해봤습니다.",
        "link": "http://serverdown.tistory.com/1069",
        "pubDate": "Tue, 24 Dec 2024 16:11:53 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1069#entry1069comment",
        "content": "<p data-ke-size=\"size16\">참고로 저는 아파트도 없고 부동산어도 없습니다.<br />코인&nbsp; 한국주식 미국 주식을 하고 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상1 : <a href=\"https://www.youtube.com/watch?v=9iMzbe1Jjb8&amp;t=483s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=9iMzbe1Jjb8&amp;t=483s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=9iMzbe1Jjb8\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bvb9j0/hyXOp9mkgE/I3VDES5vc7uI0KMlZDfW0K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/vogBp/hyXSuOIQYf/RWP37gt3iKb2VsKhOxFg6K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"&quot;일단 다 팔아!&quot;, CJ 삼성 SK 롯데 LG 난리났네요!!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/9iMzbe1Jjb8\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">대기업이 어렵다는 자료를 보여주는 영상입니다.</p>\n<p data-ke-size=\"size16\">이 영상에 이ㅡ하면 대기업 7곳중 1개가 위헙하다는데</p>\n<p data-ke-size=\"size16\">누가봐도 롯데죠</p>\n<p data-ke-size=\"size16\">여기서는 아파트 건설사를 포함한 대기업중에 일부가 어렵다는걸 판단하시구요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상1: <a href=\"https://www.youtube.com/watch?v=KFA1Qq8xVyM\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=KFA1Qq8xVyM</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=KFA1Qq8xVyM\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/ddUhyj/hyXOgxPXvl/Wcx034wNEOhckcpt6GPlJ0/img.jpg?width=1280&amp;height=720&amp;face=620_146_1130_320,https://scrap.kakaocdn.net/dn/bIKOrM/hyXSswBo2e/g8jTq3GK3csYBqJ9HDk9TK/img.jpg?width=1280&amp;height=720&amp;face=620_146_1130_320\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"한국이 망해도 롯데는 안 망한다고? [박시동 경제평론가] [차영주 소장]\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/KFA1Qq8xVyM\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">이 영상은 돈쌤이 진행하네요</p>\n<p data-ke-size=\"size16\">롯데가 위기가온 이유는 삼성중공업과 대림DL 이 중동의 석유 정유시설 건설을 시작하면서 입니다.</p>\n<p data-ke-size=\"size16\">롯데케미칼은 이때까지 석유 정유시설로 돈을 멀고 있었는데</p>\n<p data-ke-size=\"size16\">이젠 중동에서 해서 보내주겠다는 계획이 나왔습니다. 그래서 힘들어졌죠</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">영상3: <a href=\"https://www.youtube.com/watch?v=Q0GRlTppzWE\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=Q0GRlTppzWE</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Q0GRlTppzWE\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/Wo0tm/hyXOdOC37k/SsZaUN6ewmL6iyiLjOI0c1/img.jpg?width=1280&amp;height=720&amp;face=1026_262_1136_382,https://scrap.kakaocdn.net/dn/AHspv/hyXOioTJZU/BaQWbtlZp8l9FK9bQyYPT1/img.jpg?width=1280&amp;height=720&amp;face=1026_262_1136_382\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"연체 악몽, 금융 지옥의 문이 열렸다!!┃부동산, 아파트\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Q0GRlTppzWE\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">영상4: <a href=\"https://www.youtube.com/watch?v=ECSHJ4k3dF0\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=ECSHJ4k3dF0</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=ECSHJ4k3dF0\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/piu1F/hyXSCTwjHJ/kzKQzDUexSCdxLmPWwajzk/img.jpg?width=1280&amp;height=720&amp;face=714_254_1108_368,https://scrap.kakaocdn.net/dn/rHluh/hyXOmrexLB/1zyn8Zi7qcVbs6BMkyPX41/img.jpg?width=1280&amp;height=720&amp;face=714_254_1108_368\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"수도권 아파트, 디딤돌 대출 한도 축소! 최대 5,500만 원 (2부)┃부동산, 은행\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/ECSHJ4k3dF0\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">리치고는 부동산 인버스를 탄 채널이지만&nbsp;<br />데이터 기반으로 말하고 있기 때문에 신뢰하고 있습니다.</p>\n<p data-ke-size=\"size16\">이 영상에서는 부동산 대출이 줄어드는 것을 중요한 신호로 보고 있습니다.</p>\n<p data-ke-size=\"size16\">대출 없이 아파트를 사는 사람을 본적이 없을 것입니다.<br />그래서 아파트는 좋은 타이밍에 사면 재산을 크게 불릴 수 있는 레버리지 상품인 것입니다.</p>\n<p data-ke-size=\"size16\">심지어 아파트 값을 올리려면 더 많은 대출을 해주면 됩니다.</p>\n<p data-ke-size=\"size16\">그러나 내년 7월에 스트레스 DSR 3 으로 대출이 더 줄 것입니다.<br />이거는 상황이 안좋으면 시간을 미룰 수는 있겐합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">종합</h2>\n<p data-ke-size=\"size16\">아파트 값을 예측하기엔 대출이 얼마나 나오는가가 가장 중요한 변수 입니다.</p>\n<p data-ke-size=\"size16\">아파트 대출이 줄어느느 신호들은 무조건 악재입니다.</p>\n<p data-ke-size=\"size16\">1. 대기업 대출을 늘려야한다.<br />2. 내년 7월 스트레스 DSR 3 시행</p>\n<p data-ke-size=\"size16\">어느것도 아파트 대출이 늘어날 계획은 없습니다.</p>\n<p data-ke-size=\"size16\">금리 인상 시기가 오기직전이 가장 아파트 사기 좋은 시점이 될 것 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "참고로 저는 아파트도 없고 부동산어도 없습니다.\n코인  한국주식 미국 주식을 하고 있습니다.\n \n영상1 : https://www.youtube.com/watch?v=9iMzbe1Jjb8&t=483s\n\n\n\n대기업이 어렵다는 자료를 보여주는 영상입니다.\n이 영상에 이ㅡ하면 대기업 7곳중 1개가 위헙하다는데\n누가봐도 롯데죠\n여기서는 아파트 건설사를 포함한 대기업중에 일부가 어렵다는걸 판단하시구요\n \n영상1: https://www.youtube.com/watch?v=KFA1Qq8xVyM\n\n\n\n이 영상은 돈쌤이 진행하네요\n롯데가 위기가온 이유는 삼성중공업과 대림DL 이 중동의 석유 정유시설 건설을 시작하면서 입니다.\n롯데케미칼은 이때까지 석유 정유시설로 돈을 멀고 있었는데\n이젠 중동에서 해서 보내주겠다는 계획이 나왔습니다. 그래서 힘들어졌죠\n \n영상3: https://www.youtube.com/watch?v=Q0GRlTppzWE\n\n\n\n영상4: https://www.youtube.com/watch?v=ECSHJ4k3dF0\n\n\n\n리치고는 부동산 인버스를 탄 채널이지만 \n데이터 기반으로 말하고 있기 때문에 신뢰하고 있습니다.\n이 영상에서는 부동산 대출이 줄어드는 것을 중요한 신호로 보고 있습니다.\n대출 없이 아파트를 사는 사람을 본적이 없을 것입니다.\n그래서 아파트는 좋은 타이밍에 사면 재산을 크게 불릴 수 있는 레버리지 상품인 것입니다.\n심지어 아파트 값을 올리려면 더 많은 대출을 해주면 됩니다.\n그러나 내년 7월에 스트레스 DSR 3 으로 대출이 더 줄 것입니다.\n이거는 상황이 안좋으면 시간을 미룰 수는 있겐합니다.\n \n종합\n아파트 값을 예측하기엔 대출이 얼마나 나오는가가 가장 중요한 변수 입니다.\n아파트 대출이 줄어느느 신호들은 무조건 악재입니다.\n1. 대기업 대출을 늘려야한다.\n2. 내년 7월 스트레스 DSR 3 시행\n어느것도 아파트 대출이 늘어날 계획은 없습니다.\n금리 인상 시기가 오기직전이 가장 아파트 사기 좋은 시점이 될 것 같습니다.",
        "guid": "http://serverdown.tistory.com/1069",
        "categories": [
          "아파트"
        ],
        "isoDate": "2024-12-24T07:11:53.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "우주에서는 모터를 이용해 인공위성의 몸통을 회전시킬 수 있습니다.",
        "link": "http://serverdown.tistory.com/1068",
        "pubDate": "Mon, 23 Dec 2024 15:17:41 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1068#entry1068comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://youtu.be/6KcV1C1Ui5s?t=195\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://youtu.be/6KcV1C1Ui5s?t=195</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=6KcV1C1Ui5s\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/caqw7P/hyXStPE3yv/PLyZlhXHPKb5iiPl1uv2eK/img.jpg?width=1280&amp;height=720&amp;face=550_332_648_430,https://scrap.kakaocdn.net/dn/yWzSd/hyXOpakpN9/2n3okVkTji1JITy1a2KCV0/img.jpg?width=1280&amp;height=720&amp;face=550_332_648_430\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"My New Satellite Can Take Your Selfie From Space\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/6KcV1C1Ui5s\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">3분 15초에 나옵니다.</p>\n<p data-ke-size=\"size16\">원판을 모터에 붙여서 회전시키면 반대현상으로 모터에 붙은 부분도 반대 방향으로 회전하게 됩니다.</p>\n<p data-ke-size=\"size16\">XYZ 축으로 3개를 만들어서 회전시켜주면 몸통의 각도를 자유자재로 바꿀 수 있군요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"438\" data-origin-height=\"375\"><span data-url=\"https://blog.kakaocdn.net/dn/DLwTE/btsLuIk7XIK/zjdHoos9FN9jcJjmNs4yi0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/DLwTE/btsLuIk7XIK/zjdHoos9FN9jcJjmNs4yi0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/DLwTE/btsLuIk7XIK/zjdHoos9FN9jcJjmNs4yi0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDLwTE%2FbtsLuIk7XIK%2FzjdHoos9FN9jcJjmNs4yi0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"438\" data-origin-height=\"375\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">상자의 3면에 원판을 세개 붙이네요</p>\n<p data-ke-size=\"size16\">쩐다~</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">위치를 조정하려면 별수 없이 추진체를 써야하지요</p>\n<p data-ke-size=\"size16\">이것마저 전기로 할 수 있으면 완벽한데</p>",
        "contentSnippet": "영상: https://youtu.be/6KcV1C1Ui5s?t=195\n\n\n\n3분 15초에 나옵니다.\n원판을 모터에 붙여서 회전시키면 반대현상으로 모터에 붙은 부분도 반대 방향으로 회전하게 됩니다.\nXYZ 축으로 3개를 만들어서 회전시켜주면 몸통의 각도를 자유자재로 바꿀 수 있군요\n \n\n\n상자의 3면에 원판을 세개 붙이네요\n쩐다~\n \n위치를 조정하려면 별수 없이 추진체를 써야하지요\n이것마저 전기로 할 수 있으면 완벽한데",
        "guid": "http://serverdown.tistory.com/1068",
        "categories": [
          "인공위성"
        ],
        "isoDate": "2024-12-23T06:17:41.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "중년 남성에게 외국인 미인 접근했다면 조심하자",
        "link": "http://serverdown.tistory.com/1067",
        "pubDate": "Mon, 23 Dec 2024 11:01:28 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1067#entry1067comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=JEfxOnWE8Tg\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=JEfxOnWE8Tg</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=JEfxOnWE8Tg\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cyx8wo/hyXOqtwDYf/dWZe7lBo87RhiCeuW8tEy1/img.jpg?width=1280&amp;height=720&amp;face=128_90_712_270,https://scrap.kakaocdn.net/dn/zZ4RN/hyXSxYNu0A/5aiD2GA4iMwpAo6DgRIP71/img.jpg?width=1280&amp;height=720&amp;face=128_90_712_270\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"미국에서 난리난 죽음을 조작하고 밀항한 남자의 이야기\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/JEfxOnWE8Tg\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">잘생각해보면 돈도 없는 나에게 미인이 접근하다면 로맨스 스캠일 확율이 높습니다.</p>\n<p data-ke-size=\"size16\">힘들게 죽음으로 위장했는데 가서 보니 잘못되었다.<br />이제 그의 바보같은 스토리를 들어보아요&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=JEfxOnWE8Tg\n\n\n\n잘생각해보면 돈도 없는 나에게 미인이 접근하다면 로맨스 스캠일 확율이 높습니다.\n힘들게 죽음으로 위장했는데 가서 보니 잘못되었다.\n이제 그의 바보같은 스토리를 들어보아요",
        "guid": "http://serverdown.tistory.com/1067",
        "categories": [
          "유튜브",
          "사건사고"
        ],
        "isoDate": "2024-12-23T02:01:28.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "&quot;자바 두명 타세요&quot; 가 현실이 된 중국 / 자바개발자 신입 월급 16~30만원",
        "link": "http://serverdown.tistory.com/1066",
        "pubDate": "Mon, 23 Dec 2024 01:36:30 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1066#entry1066comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"572\" data-origin-height=\"453\"><span data-url=\"https://blog.kakaocdn.net/dn/muCOE/btsLqxTnreu/q5wClO2ztvN6kWaGZOHmG0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/muCOE/btsLqxTnreu/q5wClO2ztvN6kWaGZOHmG0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/muCOE/btsLqxTnreu/q5wClO2ztvN6kWaGZOHmG0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FmuCOE%2FbtsLqxTnreu%2Fq5wClO2ztvN6kWaGZOHmG0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"572\" data-origin-height=\"453\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">출처: <a href=\"https://www.fmkorea.com/best/4636486889\">컴공 암흑기 시절: 자바 두명 타세요 - 포텐 터짐 최신순 - 에펨코리아</a></p>\n<p data-ke-size=\"size16\">\"자바 두명 타세요\" 는 옛날에 인터넷 밈으로 유명해진 만화이다.<br />당시엔 \"밈\" 이라는 단어도 없었다.</p>\n<p data-ke-size=\"size16\">암울한 한국 개발자를 빗대어&nbsp;</p>\n<p data-ke-size=\"size16\">새벽 인력시장 같은 곳에서 자바 개발자 일자리 생겼으니 봉고에 타라고 하는 그런 내용이다.</p>\n<p data-ke-size=\"size16\">그런데 중국에서 참혹한 월급으로 인력시장에 팔려나가고 있었군요</p>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=0X-rwDFzTx4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=0X-rwDFzTx4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=0X-rwDFzTx4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/maB41/hyXSCsdIY5/SZ0gKsyDujuf5JCLhDucu1/img.jpg?width=1280&amp;height=720&amp;face=676_0_1264_462,https://scrap.kakaocdn.net/dn/ihp13/hyXSsC8Wln/KXB29j3r8GA1c5CcXBRcL0/img.jpg?width=1280&amp;height=720&amp;face=676_0_1264_462\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"【중국인사이트】 中 정부 일자리 창출! 대학에 가사 서비스 학과 신설 촉구! 청소부학과?! (보도\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/0X-rwDFzTx4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">6분50초에 나옵니다.</p>\n<p data-ke-size=\"size16\">대학 졸업자를 뽑으며 월급이 800 ~ 1,500 위안인 자바 개발자바 지원이 가능합니다.</p>\n<p data-ke-size=\"size16\">참고로 1,500 위안이면 30만원입니다. <br />월급입니다.</p>\n<p data-ke-size=\"size16\">월세라도 안나고 자기 집에서 다닌다면 생명유지만 가능한 정도입니다.<br />암울합니다.</p>\n<p data-ke-size=\"size16\">이전글에서 중국 간첩이 있고 중국이 우리기술 다 빼갓다고 썼는데</p>\n<p data-ke-size=\"size16\">중국은 기술을 빼가서 시장을 장악하기위해 생산단가를 줄이는 일을 진행중입니다.</p>\n<p data-ke-size=\"size16\">이러다 보니 비싸게 만들더라도 보조금을 넣어 제품의 비용을 떨어트립니다. <br />저가 경쟁이죠.</p>\n<p data-ke-size=\"size16\">이때 사용한 보조금은 다른 세수로 채워 넣습니다.<br />세금 벌금 등 여러가지 방법으로 서민들에게서 착취하게됩니다.</p>\n<p data-ke-size=\"size16\">이러다보니 사업도 줄이고 고용도 줄고&nbsp; 임금체불에 은행 파산에 ...<br />엉망징창으로 돌아가죠</p>\n<p data-ke-size=\"size16\">그러다보니 대학 졸업자 월급이 월 30만원까지 떨어져버렸습니다.<br />30만원이 하한은 아니고 800위안 (16만원) 짜리도 있는거 같습니다.</p>\n<p data-ke-size=\"size16\">옛날에 삼성이 램으로 치킨게임을 했을때 처럼 중국도 나말고 모든 경쟁자가 죽을때까지 이 악순환을 되풀이 할 것같습니다.</p>\n<p data-ke-size=\"size16\">트럼프가 이것을 못하게 방어해주길 빌어봅니다.</p>\n<p data-ke-size=\"size16\">가장 이상적인 방법은</p>\n<p data-ke-size=\"size16\">중국이 염가에 파는 시장이 하나 생기고<br />중국외 국가들만 참여하는 시장으로 분리 되는 것입니다.</p>\n<p data-ke-size=\"size16\">물건이란게 몇나라 거쳐 돌다보면 흘러들어올꺼 같긴하니 그냥 이상적인 이야기 같습니다.</p>\n<p data-ke-size=\"size16\">알리에서 메모리나 SSD 를 절반가격에 살 수 있다면 안살 수 있겠습니까...</p>\n<p data-ke-size=\"size16\">미래는 정말 암울 합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "출처: 컴공 암흑기 시절: 자바 두명 타세요 - 포텐 터짐 최신순 - 에펨코리아\n\"자바 두명 타세요\" 는 옛날에 인터넷 밈으로 유명해진 만화이다.\n당시엔 \"밈\" 이라는 단어도 없었다.\n암울한 한국 개발자를 빗대어 \n새벽 인력시장 같은 곳에서 자바 개발자 일자리 생겼으니 봉고에 타라고 하는 그런 내용이다.\n그런데 중국에서 참혹한 월급으로 인력시장에 팔려나가고 있었군요\n영상: https://www.youtube.com/watch?v=0X-rwDFzTx4\n\n\n\n6분50초에 나옵니다.\n대학 졸업자를 뽑으며 월급이 800 ~ 1,500 위안인 자바 개발자바 지원이 가능합니다.\n참고로 1,500 위안이면 30만원입니다. \n월급입니다.\n월세라도 안나고 자기 집에서 다닌다면 생명유지만 가능한 정도입니다.\n암울합니다.\n이전글에서 중국 간첩이 있고 중국이 우리기술 다 빼갓다고 썼는데\n중국은 기술을 빼가서 시장을 장악하기위해 생산단가를 줄이는 일을 진행중입니다.\n이러다 보니 비싸게 만들더라도 보조금을 넣어 제품의 비용을 떨어트립니다. \n저가 경쟁이죠.\n이때 사용한 보조금은 다른 세수로 채워 넣습니다.\n세금 벌금 등 여러가지 방법으로 서민들에게서 착취하게됩니다.\n이러다보니 사업도 줄이고 고용도 줄고  임금체불에 은행 파산에 ...\n엉망징창으로 돌아가죠\n그러다보니 대학 졸업자 월급이 월 30만원까지 떨어져버렸습니다.\n30만원이 하한은 아니고 800위안 (16만원) 짜리도 있는거 같습니다.\n옛날에 삼성이 램으로 치킨게임을 했을때 처럼 중국도 나말고 모든 경쟁자가 죽을때까지 이 악순환을 되풀이 할 것같습니다.\n트럼프가 이것을 못하게 방어해주길 빌어봅니다.\n가장 이상적인 방법은\n중국이 염가에 파는 시장이 하나 생기고\n중국외 국가들만 참여하는 시장으로 분리 되는 것입니다.\n물건이란게 몇나라 거쳐 돌다보면 흘러들어올꺼 같긴하니 그냥 이상적인 이야기 같습니다.\n알리에서 메모리나 SSD 를 절반가격에 살 수 있다면 안살 수 있겠습니까...\n미래는 정말 암울 합니다.",
        "guid": "http://serverdown.tistory.com/1066",
        "categories": [
          "유튜브",
          "자바",
          "중국"
        ],
        "isoDate": "2024-12-22T16:36:30.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "중국 간첩은 있다. 공포심 조장이나 겁주는게 아니다 진지하게 생각하라",
        "link": "http://serverdown.tistory.com/1065",
        "pubDate": "Mon, 23 Dec 2024 00:18:12 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1065#entry1065comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=Z8GlOjKqr1o\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=Z8GlOjKqr1o</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=Z8GlOjKqr1o\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/HGnNa/hyXSCsdtrF/FZtOPuRoU9rsxLLuEoVwb1/img.jpg?width=1280&amp;height=720&amp;face=460_102_740_408,https://scrap.kakaocdn.net/dn/bQ8AOw/hyXSrRKsTQ/qPirTPfMlaHKDQoeD6wEi1/img.jpg?width=1280&amp;height=720&amp;face=460_102_740_408\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"간첩의 심각성... 너무 안일하게 생각하시면 안됩니다!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/Z8GlOjKqr1o\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">반도체<br />자동차<br />베터리<br />태양광<br />조선<br />화장품<br />게임</p>\n<p data-ke-size=\"size16\">이미 다 뺏겼고 지금 부터 만드는 거라도&nbsp; 방어 하자는데<br />한국은 이념에 사로잡혀 그걸 반대하는 세력이 생겨버렸다.</p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">정말 심각하다.</span></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"text-align: start;\">삼성전자 산업 스파이</span></h2>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">아래내용은 삼성전자 반도체 기술 빼돌린 직원에 대해 20년 구형해달라는 내용입니다.</span></p>\n<p data-ke-size=\"size16\"><span style=\"text-align: start;\">영상: <a href=\"https://www.youtube.com/watch?v=v0gh4dlXMVQ\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=v0gh4dlXMVQ</a></span></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=v0gh4dlXMVQ\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/bZ5bHd/hyXSB7XXV8/62qxZmQeuWEOooMvXN4UD0/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720,https://scrap.kakaocdn.net/dn/A9Q8j/hyXSDEIH7h/w103WeNEKbwKyyHpMVMJ8K/img.jpg?width=1280&amp;height=720&amp;face=0_0_1280_720\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"산업스파이, 유혹에 빠진 엔지니어들\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/v0gh4dlXMVQ\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">한국 사람이 스파이네 라고 오해 하시면 안됩니다.<br />중국 스파이가 한국 사람을 포섭하는 겁니다.</p>\n<p data-ke-size=\"size16\">그러니까 최초에는 빼돌리기위해 삼성전자 직원에게 접촉하는 방식입니다..</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=Z8GlOjKqr1o\n\n\n\n \n반도체\n자동차\n베터리\n태양광\n조선\n화장품\n게임\n이미 다 뺏겼고 지금 부터 만드는 거라도  방어 하자는데\n한국은 이념에 사로잡혀 그걸 반대하는 세력이 생겨버렸다.\n정말 심각하다.\n \n삼성전자 산업 스파이\n아래내용은 삼성전자 반도체 기술 빼돌린 직원에 대해 20년 구형해달라는 내용입니다.\n영상: https://www.youtube.com/watch?v=v0gh4dlXMVQ\n\n\n\n한국 사람이 스파이네 라고 오해 하시면 안됩니다.\n중국 스파이가 한국 사람을 포섭하는 겁니다.\n그러니까 최초에는 빼돌리기위해 삼성전자 직원에게 접촉하는 방식입니다..",
        "guid": "http://serverdown.tistory.com/1065",
        "categories": [
          "유튜브",
          "간첩"
        ],
        "isoDate": "2024-12-22T15:18:12.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "MTS 기준으로 채권 사는법 알려주는 영상",
        "link": "http://serverdown.tistory.com/1064",
        "pubDate": "Sun, 22 Dec 2024 19:34:45 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1064#entry1064comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=6eoLjo9vGx4\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=6eoLjo9vGx4</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=6eoLjo9vGx4\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/btT38L/hyXSEQ32z9/crPziIs3qrcZgoupNN0cSk/img.jpg?width=1280&amp;height=720&amp;face=846_118_990_274,https://scrap.kakaocdn.net/dn/bpNaIc/hyXStosE0s/160HX1qtL2emdIyPCUE0Gk/img.jpg?width=1280&amp;height=720&amp;face=846_118_990_274\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"고금리에 인기인 채권 투자! 직접 사는 방법 알려드려요 ｜채권투자의 A to Z｜채권 EP.01｜신화!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/6eoLjo9vGx4\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">한국 주식은 어렵습니다.</p>\n<p data-ke-size=\"size16\">채권을 투자해보세요</p>\n<p data-ke-size=\"size16\">만기까지 기다리면 약정 이자를 받을 수 있으며</p>\n<p data-ke-size=\"size16\">중간에 오르는 경우도 있습니다. 이대는 팔면 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=6eoLjo9vGx4\n\n\n\n \n한국 주식은 어렵습니다.\n채권을 투자해보세요\n만기까지 기다리면 약정 이자를 받을 수 있으며\n중간에 오르는 경우도 있습니다. 이대는 팔면 됩니다.",
        "guid": "http://serverdown.tistory.com/1064",
        "categories": [
          "투자",
          "채권"
        ],
        "isoDate": "2024-12-22T10:34:45.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "비트코인 20억 리플 10만원 이더리움 5천만원 예언",
        "link": "http://serverdown.tistory.com/1063",
        "pubDate": "Sat, 21 Dec 2024 19:06:48 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1063#entry1063comment",
        "content": "<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=1lDp_xQg7dE\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=1lDp_xQg7dE</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=1lDp_xQg7dE\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/eUNOT/hyXOq7RZos/hGERJnVlcF78nEt6C9VkXK/img.jpg?width=1280&amp;height=720&amp;face=246_116_564_464,https://scrap.kakaocdn.net/dn/ckeHk1/hyXOfFgUE2/tWrpF0dyaYN9cKQVKlLg0k/img.jpg?width=1280&amp;height=720&amp;face=246_116_564_464\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"내가 4년째 코인을 못 끊는 이유\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/1lDp_xQg7dE\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">은 자두두</p>\n<p data-ke-size=\"size16\">마지막에 나옵니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "영상: https://www.youtube.com/watch?v=1lDp_xQg7dE\n\n\n\n은 자두두\n마지막에 나옵니다.",
        "guid": "http://serverdown.tistory.com/1063",
        "categories": [
          "유튜브"
        ],
        "isoDate": "2024-12-21T10:06:48.000Z"
      },
      {
        "creator": "SIDNFT",
        "title": "리플을 2025년 11월까지 투자해보자.",
        "link": "http://serverdown.tistory.com/1062",
        "pubDate": "Sat, 21 Dec 2024 02:10:01 +0900",
        "author": "SIDNFT",
        "comments": "http://serverdown.tistory.com/1062#entry1062comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"275\" data-origin-height=\"183\"><span data-url=\"https://blog.kakaocdn.net/dn/loHau/btsLsNUr2qI/ku9DAxPurIKFm8mw0P4BGk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/loHau/btsLsNUr2qI/ku9DAxPurIKFm8mw0P4BGk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/loHau/btsLsNUr2qI/ku9DAxPurIKFm8mw0P4BGk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FloHau%2FbtsLsNUr2qI%2Fku9DAxPurIKFm8mw0P4BGk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"275\" data-origin-height=\"183\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">리플은 코인이죠 왠만한 거래소에 다 있습니다.</p>\n<p data-ke-size=\"size16\">무려 7년간 눌려있었습니다.</p>\n<p data-ke-size=\"size16\">그리고 이제 갈 것인데 그 기한이 2025년 11월 입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">리플의 투자 날짜 2025년 11월은 이 영상의 내용입니다.</h2>\n<p data-ke-size=\"size16\">영상: <a href=\"https://www.youtube.com/watch?v=pYdc-1JoocY&amp;t=1503s\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.youtube.com/watch?v=pYdc-1JoocY&amp;t=1503s</a></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"youtube\" data-video-url=\"https://www.youtube.com/watch?v=pYdc-1JoocY\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/cxEAtB/hyXOkTXxwb/HNbpQZJx1bnz0vrUstdwEk/img.jpg?width=1280&amp;height=720&amp;face=676_144_1100_354,https://scrap.kakaocdn.net/dn/PjgA3/hyXOmc9JAv/IcbXac7VvPMevVrnMVH6B0/img.jpg?width=1280&amp;height=720&amp;face=676_144_1100_354\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-title=\"비트코인 대신 리플?_가상화폐 투자의 모든 것!\" data-original-url=\"\"><iframe src=\"https://www.youtube.com/embed/pYdc-1JoocY\" width=\"860\" height=\"484\" frameborder=\"\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">이 영상에서 언급하는 거이 ISO 20022 입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">그리고 그걸로 찾아보면&nbsp;</p>\n<p data-ke-size=\"size16\">링크: <a href=\"https://kyungyong1414.tistory.com/12273\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://kyungyong1414.tistory.com/12273</a></p>\n<figure id=\"og_1734714161240\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"Ripple의 ISO 20022 준수는 기존 지불 시스템에서 XRP의 길을 열어줍니다\" data-og-description=\"Ripple&rsquo;s&nbsp;ISO&nbsp;20022&nbsp;Compliance&nbsp;Paves&nbsp;Way&nbsp;for&nbsp;XRP&nbsp;in&nbsp;Traditional&nbsp;Payment&nbsp;Systems&nbsp;●&nbsp;Ripple은&nbsp;ISO&nbsp;20022를&nbsp;준수하는데,&nbsp;많은&nbsp;사람은&nbsp;이러한&nbsp;조치가&nbsp;XRP에&nbsp;이로울&nbsp;것이라고&nbsp;말합니다. ●&nbsp;국경을&nbsp;넘나드\" data-og-host=\"kyungyong1414.tistory.com\" data-og-source-url=\"https://kyungyong1414.tistory.com/12273\" data-og-url=\"https://kyungyong1414.tistory.com/12273\" data-og-image=\"https://scrap.kakaocdn.net/dn/b0wtOK/hyXOqfzVof/lnD1zEgCJYJB8lolkYHEP0/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/HzKi4/hyXOe0vDQr/K68JMJeD6g3nP9AeDYg0h1/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/bcEwNt/hyXOl6p5OF/M0lTyfsvaGN1L4GHcxrowk/img.png?width=1268&amp;height=740&amp;face=0_0_1268_740\"><a href=\"https://kyungyong1414.tistory.com/12273\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://kyungyong1414.tistory.com/12273\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/b0wtOK/hyXOqfzVof/lnD1zEgCJYJB8lolkYHEP0/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/HzKi4/hyXOe0vDQr/K68JMJeD6g3nP9AeDYg0h1/img.jpg?width=800&amp;height=457&amp;face=0_0_800_457,https://scrap.kakaocdn.net/dn/bcEwNt/hyXOl6p5OF/M0lTyfsvaGN1L4GHcxrowk/img.png?width=1268&amp;height=740&amp;face=0_0_1268_740');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Ripple의 ISO 20022 준수는 기존 지불 시스템에서 XRP의 길을 열어줍니다</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Ripple&rsquo;s&nbsp;ISO&nbsp;20022&nbsp;Compliance&nbsp;Paves&nbsp;Way&nbsp;for&nbsp;XRP&nbsp;in&nbsp;Traditional&nbsp;Payment&nbsp;Systems&nbsp;●&nbsp;Ripple은&nbsp;ISO&nbsp;20022를&nbsp;준수하는데,&nbsp;많은&nbsp;사람은&nbsp;이러한&nbsp;조치가&nbsp;XRP에&nbsp;이로울&nbsp;것이라고&nbsp;말합니다. ●&nbsp;국경을&nbsp;넘나드</p>\n<p class=\"og-host\" data-ke-size=\"size16\">kyungyong1414.tistory.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">이런게 있구요</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">리플사의 공식 문서: <a href=\"https://ripple.com/lp/iso-overview/\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://ripple.com/lp/iso-overview/</a></p>\n<figure id=\"og_1734714476841\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"Next Step for Global Interoperability - ISO 20022\" data-og-description=\"ISO 20022 is a powerful global standard for cross-border payment flows. Learn how we are evolving to meet the needs of our customers\" data-og-host=\"ripple.com\" data-og-source-url=\"https://ripple.com/lp/iso-overview/\" data-og-url=\"https://ripple.com/lp/iso-overview/\" data-og-image=\"https://scrap.kakaocdn.net/dn/mDmzG/hyXObvW6LA/Us9spaBscOzkTvkOZ0ZCL1/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480,https://scrap.kakaocdn.net/dn/cX4l4i/hyXOeGa57S/mXIzeJzxq9F08583V9r6b0/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480,https://scrap.kakaocdn.net/dn/ejrp08/hyXOj1PqL1/UCF2GOVbSgQHLoJV5m4JF1/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480\"><a href=\"https://ripple.com/lp/iso-overview/\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://ripple.com/lp/iso-overview/\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/mDmzG/hyXObvW6LA/Us9spaBscOzkTvkOZ0ZCL1/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480,https://scrap.kakaocdn.net/dn/cX4l4i/hyXOeGa57S/mXIzeJzxq9F08583V9r6b0/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480,https://scrap.kakaocdn.net/dn/ejrp08/hyXOj1PqL1/UCF2GOVbSgQHLoJV5m4JF1/img.png?width=1280&amp;height=480&amp;face=0_0_1280_480');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">Next Step for Global Interoperability - ISO 20022</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">ISO 20022 is a powerful global standard for cross-border payment flows. Learn how we are evolving to meet the needs of our customers</p>\n<p class=\"og-host\" data-ke-size=\"size16\">ripple.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">리플 홈페이지에서도 이것을 중요하게 생각하는 문서 가있군요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">사면가 - 7년 삼각수렴 아직도 싸다.</h2>\n<p data-ke-size=\"size16\">링크: <a href=\"https://serverdown.tistory.com/1022\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://serverdown.tistory.com/1022</a></p>\n<figure id=\"og_1734714238336\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"리플 XRP 의 전설의 삼각수렴 / 3달라도 싸다.\" data-og-description=\"영상: https://m.joseilbo.com/news/view.htm?newsid=523782&nbsp;리플, 강세 대칭 삼각형 돌파 움직임 &quot;20만원까지 상승 가능&quot;◆&hellip;자료:X리플이 최근 시장 변동성 속에서 횡보하는 가운데 150달러(20만원)까지 상승할 \" data-og-host=\"serverdown.tistory.com\" data-og-source-url=\"https://serverdown.tistory.com/1022\" data-og-url=\"https://serverdown.tistory.com/1022\" data-og-image=\"https://scrap.kakaocdn.net/dn/buTeSp/hyXOdURJBP/gHLWlDSBVWSQd4F9iuzZb0/img.jpg?width=522&amp;height=508&amp;face=0_0_522_508,https://scrap.kakaocdn.net/dn/coFl1h/hyXOlL3Gt9/7tSECGWgvp1IjzcGCVSdik/img.jpg?width=522&amp;height=508&amp;face=0_0_522_508,https://scrap.kakaocdn.net/dn/f6Xuj/hyXOqs7qeF/w977JtS0VU3qtmOvKIPcp1/img.png?width=830&amp;height=863&amp;face=0_0_830_863\"><a href=\"https://serverdown.tistory.com/1022\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://serverdown.tistory.com/1022\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/buTeSp/hyXOdURJBP/gHLWlDSBVWSQd4F9iuzZb0/img.jpg?width=522&amp;height=508&amp;face=0_0_522_508,https://scrap.kakaocdn.net/dn/coFl1h/hyXOlL3Gt9/7tSECGWgvp1IjzcGCVSdik/img.jpg?width=522&amp;height=508&amp;face=0_0_522_508,https://scrap.kakaocdn.net/dn/f6Xuj/hyXOqs7qeF/w977JtS0VU3qtmOvKIPcp1/img.png?width=830&amp;height=863&amp;face=0_0_830_863');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">리플 XRP 의 전설의 삼각수렴 / 3달라도 싸다.</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">영상: https://m.joseilbo.com/news/view.htm?newsid=523782&nbsp;리플, 강세 대칭 삼각형 돌파 움직임 \"20만원까지 상승 가능\"◆&hellip;자료:X리플이 최근 시장 변동성 속에서 횡보하는 가운데 150달러(20만원)까지 상승할</p>\n<p class=\"og-host\" data-ke-size=\"size16\">serverdown.tistory.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">리플의 아주 보기 드문 차트에 대해 이야기 해줍니다.</p>\n<p data-ke-size=\"size16\">무려 7년간 못가게 막혀있었습니다.</p>\n<p data-ke-size=\"size16\">이 눌림은 레전드급 삼각수렴 입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">남은 이벤트들</h2>\n<p data-ke-size=\"size16\">1. RLUSD 스테이블 코인을 출시할 예정입니다.</p>\n<p data-ke-size=\"size16\">2. 리플 나스닥 상장</p>\n<p data-ke-size=\"size16\">3. ISO 20022 통과</p>\n<p data-ke-size=\"size16\">이것들이 실현된다면 어마어마한 성장이 가능 할 것입니다.</p>",
        "contentSnippet": "리플은 코인이죠 왠만한 거래소에 다 있습니다.\n무려 7년간 눌려있었습니다.\n그리고 이제 갈 것인데 그 기한이 2025년 11월 입니다.\n \n리플의 투자 날짜 2025년 11월은 이 영상의 내용입니다.\n영상: https://www.youtube.com/watch?v=pYdc-1JoocY&t=1503s\n\n\n\n이 영상에서 언급하는 거이 ISO 20022 입니다.\n \n그리고 그걸로 찾아보면 \n링크: https://kyungyong1414.tistory.com/12273\n\n \nRipple의 ISO 20022 준수는 기존 지불 시스템에서 XRP의 길을 열어줍니다\nRipple’s ISO 20022 Compliance Paves Way for XRP in Traditional Payment Systems ● Ripple은 ISO 20022를 준수하는데, 많은 사람은 이러한 조치가 XRP에 이로울 것이라고 말합니다. ● 국경을 넘나드\nkyungyong1414.tistory.com\n\n이런게 있구요\n \n리플사의 공식 문서: https://ripple.com/lp/iso-overview/\n\n \nNext Step for Global Interoperability - ISO 20022\nISO 20022 is a powerful global standard for cross-border payment flows. Learn how we are evolving to meet the needs of our customers\nripple.com\n\n리플 홈페이지에서도 이것을 중요하게 생각하는 문서 가있군요.\n \n \n \n사면가 - 7년 삼각수렴 아직도 싸다.\n링크: https://serverdown.tistory.com/1022\n\n \n리플 XRP 의 전설의 삼각수렴 / 3달라도 싸다.\n영상: https://m.joseilbo.com/news/view.htm?newsid=523782 리플, 강세 대칭 삼각형 돌파 움직임 \"20만원까지 상승 가능\"◆…자료:X리플이 최근 시장 변동성 속에서 횡보하는 가운데 150달러(20만원)까지 상승할\nserverdown.tistory.com\n\n리플의 아주 보기 드문 차트에 대해 이야기 해줍니다.\n무려 7년간 못가게 막혀있었습니다.\n이 눌림은 레전드급 삼각수렴 입니다.\n \n남은 이벤트들\n1. RLUSD 스테이블 코인을 출시할 예정입니다.\n2. 리플 나스닥 상장\n3. ISO 20022 통과\n이것들이 실현된다면 어마어마한 성장이 가능 할 것입니다.",
        "guid": "http://serverdown.tistory.com/1062",
        "categories": [
          "코인",
          "XRP",
          "리플",
          "코인"
        ],
        "isoDate": "2024-12-20T17:10:01.000Z"
      }
    ]
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "Java 가상 스레드, 깊이 있는 소스 코드 분석과 작동 원리 2편 - 컨텍스트 스위칭",
        "link": "https://techblog.lycorp.co.jp/ko/about-java-virtual-thread-2",
        "pubDate": "Thu, 19 Dec 2024 07:00:00 GMT",
        "content": "들어가며\n지난 1편에서는 가상 스레드(virtual thread)의 장점을 살펴보고 가상 스레드를 어떻게 생성하고 시작하는지 알아봤습니다. 이어서 이번 글에서는 컨텍스트 스위칭(c...",
        "contentSnippet": "들어가며\n지난 1편에서는 가상 스레드(virtual thread)의 장점을 살펴보고 가상 스레드를 어떻게 생성하고 시작하는지 알아봤습니다. 이어서 이번 글에서는 컨텍스트 스위칭(c...",
        "guid": "https://techblog.lycorp.co.jp/ko/about-java-virtual-thread-2",
        "isoDate": "2024-12-19T07:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": [
      {
        "creator": "호돌맨",
        "title": "러브레터 후지이 이츠키의 집을 찾아서",
        "link": "https://hodolman.tistory.com/68",
        "pubDate": "Sat, 21 Dec 2024 17:56:30 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.tistory.com/68#entry68comment",
        "content": "<blockquote data-ke-style=\"style2\">영화 러브레터 여주인공 후지이 이츠키의 집을 찾아갔고.. 이틀 뒤 주연 나카야마 미호의 사망 소식을 접했다.</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">12월 4일, 하루동안 남는 일정이 생겨 어디에 갈지 고민하다 러브레터 광인 나는 후지이 이츠키의 집에 찾아가기로 했다.&nbsp;</p>\n<p data-ke-size=\"size16\">오타루 방면 열차를 타고 30분정도 가서 제니바코역에 내리면 된다.</p>\n<p data-ke-size=\"size16\">이츠키 집 주소: 16-16 Miharashichō, Otaru, Hokkaido 047-0263 일본</p>\n<div id=\"code_1734770400390\" data-ke-type=\"html\" data-source=\"&lt;iframe src=&quot;https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d727.8643593415286!2d141.1688372489983!3d43.13692271326697!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x5f0b2751586106fd%3A0x7f0357550d7604fd!2zMTYtMTYgTWloYXJhc2hpY2jFjSwgT3RhcnUsIEhva2thaWRvIDA0Ny0wMjYzIOydvOuzuA!5e0!3m2!1sko!2skr!4v1734770382055!5m2!1sko!2skr&quot; width=&quot;600&quot; height=&quot;450&quot; style=&quot;border:0;&quot; allowfullscreen=&quot;&quot; loading=&quot;lazy&quot; referrerpolicy=&quot;no-referrer-when-downgrade&quot;&gt;&lt;/iframe&gt;\"><iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d727.8643593415286!2d141.1688372489983!3d43.13692271326697!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x5f0b2751586106fd%3A0x7f0357550d7604fd!2zMTYtMTYgTWloYXJhc2hpY2jFjSwgT3RhcnUsIEhva2thaWRvIDA0Ny0wMjYzIOydvOuzuA!5e0!3m2!1sko!2skr!4v1734770382055!5m2!1sko!2skr\" width=\"600\" height=\"450\" allowfullscreen=\"\"></iframe></div>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"20241204_122437.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"><span data-url=\"https://blog.kakaocdn.net/dn/dbesEW/btsLtutzgAQ/AczqgLXd8aD8qWNMGF9olK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/dbesEW/btsLtutzgAQ/AczqgLXd8aD8qWNMGF9olK/img.jpg\" data-alt=\"홋카이도 제니바코역\"><img src=\"https://blog.kakaocdn.net/dn/dbesEW/btsLtutzgAQ/AczqgLXd8aD8qWNMGF9olK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbesEW%2FbtsLtutzgAQ%2FAczqgLXd8aD8qWNMGF9olK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"20241204_122437.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"/></span><figcaption>홋카이도 제니바코역</figcaption>\n</figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"20241204_122635.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"><span data-url=\"https://blog.kakaocdn.net/dn/CHpyc/btsLp4X7DGa/qcshpQApwhku2VLnOnN0dK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/CHpyc/btsLp4X7DGa/qcshpQApwhku2VLnOnN0dK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/CHpyc/btsLp4X7DGa/qcshpQApwhku2VLnOnN0dK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FCHpyc%2FbtsLp4X7DGa%2FqcshpQApwhku2VLnOnN0dK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"20241204_122635.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"/></span></figure>\n</p>\n<blockquote data-ke-style=\"style1\"><span style=\"font-family: 'Noto Serif KR';\">역명의 유래가 된 지명인 제니바코는 일본어로 동전 상자라는 뜻인데, 이곳의 해안에서&nbsp;청어가 대량으로 잡혀 어떤 어부의 집에도 돈상자가 쌓여 있었다는 것에서 유래했다.<br />1970년에 역무원이 직접 돈상자를 제작해서 역사의 승강장측 입구에 매달아 놓았다. 그러나 위험하다는 이유로 2010년에&nbsp;입구 옆에 내려놓았다.</span></blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">15분정도 걸어가면 목적지가 나온다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"20241204_132010.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"><span data-url=\"https://blog.kakaocdn.net/dn/bAOk7K/btsLtc7GiQu/4z793oBaNnLzQ4Tx6QK4vK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bAOk7K/btsLtc7GiQu/4z793oBaNnLzQ4Tx6QK4vK/img.jpg\" data-alt=\"이츠키 집 입구\"><img src=\"https://blog.kakaocdn.net/dn/bAOk7K/btsLtc7GiQu/4z793oBaNnLzQ4Tx6QK4vK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbAOk7K%2FbtsLtc7GiQu%2F4z793oBaNnLzQ4Tx6QK4vK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"20241204_132010.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"/></span><figcaption>이츠키 집 입구</figcaption>\n</figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"다운로드.jpeg\" data-origin-width=\"580\" data-origin-height=\"241\"><span data-url=\"https://blog.kakaocdn.net/dn/bbVfdv/btsLs7ZC8yw/k5C62P1eJK6Ih2g33SyFj1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bbVfdv/btsLs7ZC8yw/k5C62P1eJK6Ih2g33SyFj1/img.jpg\" data-alt=\"영화 러브레터\"><img src=\"https://blog.kakaocdn.net/dn/bbVfdv/btsLs7ZC8yw/k5C62P1eJK6Ih2g33SyFj1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbbVfdv%2FbtsLs7ZC8yw%2Fk5C62P1eJK6Ih2g33SyFj1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"다운로드.jpeg\" data-origin-width=\"580\" data-origin-height=\"241\"/></span><figcaption>영화 러브레터</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">2008년 화재로 집이 소실되고 한동안 공터로 남아있다 2020년 쯤 부터 누군가 집을 짓고 살고있다. 영화의 랜드마크가 된 집 입구는 얼마 전 간이 주차장이 생겨 막혀있다. 오래 전 모습이 더 흐릿해지고 있다.</p>\n<p data-ke-size=\"size16\">다시 눈이 내리기 시작했고 아쉬운 마음에 사진이나 몇 장 찍고 돌아왔다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"DSC02832.jpg\" data-origin-width=\"2300\" data-origin-height=\"3000\"><span data-url=\"https://blog.kakaocdn.net/dn/1Jx4m/btsLtr4IDYy/tqthnLRZxU2MoRau2WG9bK/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/1Jx4m/btsLtr4IDYy/tqthnLRZxU2MoRau2WG9bK/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/1Jx4m/btsLtr4IDYy/tqthnLRZxU2MoRau2WG9bK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F1Jx4m%2FbtsLtr4IDYy%2FtqthnLRZxU2MoRau2WG9bK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"DSC02832.jpg\" data-origin-width=\"2300\" data-origin-height=\"3000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"DSC02814.jpg\" data-origin-width=\"3000\" data-origin-height=\"2000\"><span data-url=\"https://blog.kakaocdn.net/dn/WYRHF/btsLrba5y7U/IusRQKWJYl5bt7NBam6Gj1/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/WYRHF/btsLrba5y7U/IusRQKWJYl5bt7NBam6Gj1/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/WYRHF/btsLrba5y7U/IusRQKWJYl5bt7NBam6Gj1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FWYRHF%2FbtsLrba5y7U%2FIusRQKWJYl5bt7NBam6Gj1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"DSC02814.jpg\" data-origin-width=\"3000\" data-origin-height=\"2000\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"20241204_143321.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"><span data-url=\"https://blog.kakaocdn.net/dn/bBS5Jf/btsLrWduuQO/I7JmoUxE5rTVwIkd0kIHu0/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/bBS5Jf/btsLrWduuQO/I7JmoUxE5rTVwIkd0kIHu0/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/bBS5Jf/btsLrWduuQO/I7JmoUxE5rTVwIkd0kIHu0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbBS5Jf%2FbtsLrWduuQO%2FI7JmoUxE5rTVwIkd0kIHu0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"20241204_143321.jpg\" data-origin-width=\"4000\" data-origin-height=\"2252\"/></span></figure>\n</p>",
        "contentSnippet": "영화 러브레터 여주인공 후지이 이츠키의 집을 찾아갔고.. 이틀 뒤 주연 나카야마 미호의 사망 소식을 접했다.\n \n12월 4일, 하루동안 남는 일정이 생겨 어디에 갈지 고민하다 러브레터 광인 나는 후지이 이츠키의 집에 찾아가기로 했다. \n오타루 방면 열차를 타고 30분정도 가서 제니바코역에 내리면 된다.\n이츠키 집 주소: 16-16 Miharashichō, Otaru, Hokkaido 047-0263 일본\n\n홋카이도 제니바코역\n\n\n\n역명의 유래가 된 지명인 제니바코는 일본어로 동전 상자라는 뜻인데, 이곳의 해안에서 청어가 대량으로 잡혀 어떤 어부의 집에도 돈상자가 쌓여 있었다는 것에서 유래했다.\n1970년에 역무원이 직접 돈상자를 제작해서 역사의 승강장측 입구에 매달아 놓았다. 그러나 위험하다는 이유로 2010년에 입구 옆에 내려놓았다.\n \n15분정도 걸어가면 목적지가 나온다.\n이츠키 집 입구\n\n영화 러브레터\n\n\n2008년 화재로 집이 소실되고 한동안 공터로 남아있다 2020년 쯤 부터 누군가 집을 짓고 살고있다. 영화의 랜드마크가 된 집 입구는 얼마 전 간이 주차장이 생겨 막혀있다. 오래 전 모습이 더 흐릿해지고 있다.\n다시 눈이 내리기 시작했고 아쉬운 마음에 사진이나 몇 장 찍고 돌아왔다.",
        "guid": "https://hodolman.tistory.com/68",
        "categories": [
          "개발/우당탕탕 대모험",
          "러브레터",
          "성지순례",
          "이츠키",
          "제니바코"
        ],
        "isoDate": "2024-12-21T08:56:30.000Z"
      }
    ]
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "남한테 인정받는 사람",
        "link": "https://www.thestartupbible.com/2024/12/my-way-and-their-way.html",
        "pubDate": "Sun, 22 Dec 2024 21:33:00 +0000",
        "content:encodedSnippet": "지난 주말에 영화 ‘머니볼’을 다시 봤다. 탄핵 관련 의견과 시각이 궁금해서 여러 가지 뉴스 채널을 왔다 갔다 하다가 우연히 영화 채널을 지나쳤는데, 마침 이 오래된 클래식을 상영하고 있고, 시작한 지 10분도 안 돼서, 오랜만에 이 영화를 다시 봤다. 책도 그렇고, 영화도 그렇고, 인생의 모든 게 그렇듯이, 아는 만큼만 보인다는 게 이 영화에도 그대로 적용됐다. 이미 그 원작이 꽤 유명한 책이라서 영화가 만들어질 때부터 많은 관심이 집중됐고, 2011년에 영화가 개봉되자마자 나도 봤는데, 그때도 너무 재미있게 봤다.\n그런데 13년 후 이 영화를 다시 봤을 땐, 이전엔 나에게 없었던 인생과 사업의 경험이 어느 정도 축적돼 있었다. 영화의 모든 장면, 그리고 등장인물들의 대사와 행동을 이런 개인적인 경험, 지식과 계속 비교하면서 봤는데, 이것도 너무 즐거운 경험이었다. 머니볼을 2011년도에 봤을 때도 명작이라고 생각했지만, 두 번째 시청했을 땐 인생을 잘 살아갈 수 있는 좋은 철학, 자세와 태도가 담긴 정말 훌륭한 작품이라는 감탄을 하면서 단톡방에서 친구들에게 이 영화에 대한 예찬을 하기도 했다.\n특히 내가 가장 인상 깊었던 건 주인공 빌리 빈의 남에 대한 생각이었다. 한국이나 미국이나 대부분의 리더와 조직원들은 남에게 인정받기 위해서 직장 생활을 하고 있고, 얼마 전에 읽었던 기사는 좋은 리더의 대표적인 인재상이 바로 남한테 인정받는 사람이라는 내용으로 가득 차 있었다. 남한테 인정받는 직원이 좋은 직원이고, 남한테 인정받는 리더가 좋은 리더라는 고정관념이 우리 모두의 머릿속에 너무나 강하게 박혀있는데, 빌리 빈의 모든 대사와 행동은 이 고정관념과 반대로 설정되어 있었다. 그는 그 누구에게도 인정받지 않는 방법을 사용해서 야구의 새로운 역사를 쓴다. 남에게 인정받기 위한 구단주를 지향했다면 이렇게 하지 않았을 것이다. 그는 스스로 살고, 오클랜드 A’s가 살기 위해서 스스로 믿는 길을 택했고, 남이 인정하지 않는 결정을 계속했다.\n나도 요새 이런 생각을 꽤 많이 하고 있다. 둘이 시작했던 스트롱벤처스가 이제 나를 포함해서 8명의 조직으로 성장했고, 이제 나는 좋든 싫든 7명의 동료이자 팀원들의 리더가 됐다. 리더십이라는 말을 우린 너무나 남발하는데, 열 명에게 좋은 리더에 관해서 물어보면, 이 중 아홉은 아마도 남한테 인정받는 리더가 좋은 리더라고 말할 정도로 우리 사회는 리더에 대한 강한 고정 관념을 갖고 있다.\n솔직히 나는 우리 동료들에게 인정받기 위해서 고민하진 않는다. 우리 동료들에게 인정받기 위해 결정을 하지도 않는다. 스트롱이 계속 살아남을 수 있게, 그리고 외부 환경이 변하고 모든 것이 바뀌어도 우리가 시대에 뒤처지지 않고 중요한 존재로 남을 수 있기 위한 결정을 하기 위해서 고민한다. 이런 결정을 계속하다 보면, 남이 나를 인정할 때도 있고, 인정하지 않을 때도 있는데, 별로 상관하지 않는다. 나는 남한테 인정받는 사람이 되는 덴 별로 관심이 없다. 오히려 나 스스로에게 인정받는 사람이 되는데 관심이 많다. 리더로서는, 내가 리더로서 한 결정들로 인해서 우리 조직이 계속 번창했으면 좋겠다. 이거 하나밖에 없다.\n우리도 이건 모두 한 번씩 고민해 봤으면 좋겠다. 특히, 한국같이 남에게 인정받아야지만 인간 구실을 할 수 있는 사회에서는. 과연, 남한테 인정받는 리더가 좋은 리더인지, 남한테 인정받는 직장 동료가 좋은 동료인지, 남한테 인정받는 사람이 좋은 사람인지. 남한테 인정받는 사람보단, 오히려 스스로에게 인정받는 사람이 더 좋은 사람이 아닌진.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/12/my-way-and-their-way.html#comments",
        "content": "지난 주말에 영화 ‘머니볼’을 다시 봤다. 탄핵 관련 의견과 시각이 궁금해서 여러 가지 뉴스 채널을 왔다 갔다 하다가 우연히 영화 채널을 지나쳤는데, 마침 이 오래된 클래식을 상영하고 있고, 시작한 지 10분도 안 돼서, 오랜만에 이 영화를 다시 봤다. 책도 그렇고, 영화도 그렇고, 인생의 모든 게 그렇듯이, 아는 만큼만 보인다는 게 이 영화에도 그대로 적용됐다. 이미(...)",
        "contentSnippet": "지난 주말에 영화 ‘머니볼’을 다시 봤다. 탄핵 관련 의견과 시각이 궁금해서 여러 가지 뉴스 채널을 왔다 갔다 하다가 우연히 영화 채널을 지나쳤는데, 마침 이 오래된 클래식을 상영하고 있고, 시작한 지 10분도 안 돼서, 오랜만에 이 영화를 다시 봤다. 책도 그렇고, 영화도 그렇고, 인생의 모든 게 그렇듯이, 아는 만큼만 보인다는 게 이 영화에도 그대로 적용됐다. 이미(...)",
        "guid": "https://www.thestartupbible.com/?p=9330",
        "categories": [
          "Uncategorized",
          "FoundersAtWork",
          "general",
          "inspiring",
          "people",
          "Strong"
        ],
        "isoDate": "2024-12-22T21:33:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "운동은 합법적인 마약",
        "link": "https://www.thestartupbible.com/2024/12/exercise-is-the-only-legal-drug.html",
        "pubDate": "Wed, 18 Dec 2024 21:31:00 +0000",
        "content:encodedSnippet": "우리 집에서는 한강이 아주 잘 보인다. 마루에서는 한강의 동쪽이 보이고, 다른 방에서는 강북과 강서의 뷰가 꽤 잘 보인다. 우린 재택근무를 아예 안 하는데, 다른 사람들이 스트롱의 재택근무 제도에 관해서 물어보면 나는 “재택근무 가능한 날은 토요일과 일요일이다”라는 말을 한다. 농담이지만, 실은 이건 나에게 내가 스스로 적용하는 근무 시스템이다.\n올해 쓴 글 중, 열심히 일하는 내용에 대한 포스팅이 몇 개 있었는데 이건 스타트업 분들에게만 하는 말은 아니고, 나 스스로에게 항상 강요하는 내용이다. 올해 나는 일을 하지 않은 주말이 없었다. 자랑스러운 건 아니고, 자랑하려고 하는 말도 아니다. 그냥 그 정도로 바빴고, 할 일이 많았고, 주말에도 일해야 할 정도로 매일 처리해야 하는 일이 많았다는 의미다. 불평하지도 않았고, 불평하고 싶지도 않고, 오히려 나는 이렇게 바쁘게 해야 할 일이 많다는 점에 감사하게 생각하고 있다.\n평일 아침 일찍, 밤늦게, 그리고 주말은 집에서 일했는데, 사무실로 사용하는 방에서 고개만 왼쪽으로 돌리면 한강의 멋진 뷰가 보이는데, 최근 몇 달 동안 창밖을 오랫동안, 멍하게, 아무 생각 없이 보는 시간이 너무 많아졌다. 그래도 마음이 안정되지 않고, 돌고 도는 잡생각이 머릿속을 떠나지 않고, 불안감이 온몸을 감싸는 걸 계속 경험하고 있다. 막상 그 불안함의 원인에 대해서 곰곰이 생각해 보고 종이에 써보면, 특별한 원인은 없다. 업무의 강도가 높아지고, 출장을 더 많이 가고, 지켜야 할 데드라인이 더 많아질수록 몸이 견뎌내야 하는 스트레스가 한계치를 넘어가서 이런 일이 발생하는 것 같다.\n이런 부정적인 신호가 올 때마다, 나는 운동복으로 갈아입고 몸을 움직인다. 그냥 움직이는 게 아니라 아주 격렬하게 움직인다. 아파트 지하에 있는 헬스장을 가장 자주 이용하고, 그다음으로 자주 이용하는 건 아파트 계단이다. 여름에는 한강에서 뛰기도 했다. 루틴에 따라서 웜업하고 웨이트를 반복적으로 들거나 35층 아파트 계단을 세 번 반복해서 오르면 다시 몸과 정신이 정상으로 돌아온다. 생각만 해도 도망가고 싶었던 힘든 문제들을 아주 차분하게 바라보면서 해결할 수 있는 에너지가 다시 충전되는데, 이게 참 신기하게도 몸을 더 과격하게 움직일수록 더 많은 긍정적인 에너지가 생긴다.\n올해 나는 그 어느 때보다 더 많은 일을 했고, 더 많은 스트레스를 받았고, 더 많은 불안감을 느꼈다. 그리고 이 스트레스와 불안감을 해소하기 위해서 그 어느 때보다 더 많은 운동을 했다. 중간마다 책도 그 어느 때보다 더 많이 읽었다. 엄청난 불안감과 스트레스의 한 해였지만, 역설적으로 엄청난 운동과 움직임의 한 해여서 더 건강해졌고, 더 많은 에너지로 몸을 지속적으로 충전할 수 있었다.\n나는 마약을 해본 적이 없지만, 움직임에 대해서 학술적으로 연구하는 분들에 의하면 격렬한 운동을 할 때 뇌가 느끼는 신호를 분석해 보면 마치 아주 센 마약을 몸에 투입했을 때 뇌가 느끼는 쾌락과 똑같다고 한다. 마약은 몸과 정신을 완전히 파괴하는 인류에서 없어져야 하는 불법 약물이다. 하지만, 해 본 사람은 그 누구나 인정하는, 100% 합법적인 마약이 딱 하나 있는데 그게 바로 ‘운동’이다.\n너무 힘들어서 온몸이 내 발밑에 있다고 느껴지거나, 정신이 저 땅 밑에 있는데 도저히 다시 주워 담을 엄두가 안 나거나, 숨쉬기도 힘들고, 정말 아무것도 안 하고 이대로 죽고 싶다는 생각만 든다면, 지금 당장 나가서 몸을 움직이고 격렬한 운동을 하라고 말해주고 싶다. 주변에 정신적으로 힘들어하는 분들이 있다면 운동을 권장하고, 더 나아가서 같이 운동해라. 나도 좋고, 그 사람도 좋고, 효과가 즉각적으로 나타나지만, 부작용이 전혀 없는 세상에서 가장 건강한 마약이다.\n운동은 특별히 돈도 안 들고, 감옥에도 가지 않는 합법적인 마약이다. Exercise will save you.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/12/exercise-is-the-only-legal-drug.html#comments",
        "content": "우리 집에서는 한강이 아주 잘 보인다. 마루에서는 한강의 동쪽이 보이고, 다른 방에서는 강북과 강서의 뷰가 꽤 잘 보인다. 우린 재택근무를 아예 안 하는데, 다른 사람들이 스트롱의 재택근무 제도에 관해서 물어보면 나는 “재택근무 가능한 날은 토요일과 일요일이다”라는 말을 한다. 농담이지만, 실은 이건 나에게 내가 스스로 적용하는 근무 시스템이다. 올해 쓴 글 중, 열심히 일하는 내용에 대한(...)",
        "contentSnippet": "우리 집에서는 한강이 아주 잘 보인다. 마루에서는 한강의 동쪽이 보이고, 다른 방에서는 강북과 강서의 뷰가 꽤 잘 보인다. 우린 재택근무를 아예 안 하는데, 다른 사람들이 스트롱의 재택근무 제도에 관해서 물어보면 나는 “재택근무 가능한 날은 토요일과 일요일이다”라는 말을 한다. 농담이지만, 실은 이건 나에게 내가 스스로 적용하는 근무 시스템이다. 올해 쓴 글 중, 열심히 일하는 내용에 대한(...)",
        "guid": "https://www.thestartupbible.com/?p=9328",
        "categories": [
          "Uncategorized",
          "failure",
          "healthcare",
          "inspiring",
          "sports",
          "stress management"
        ],
        "isoDate": "2024-12-18T21:31:00.000Z"
      }
    ]
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": []
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "토스, 공연장 ‘얼굴입장’ 오픈…내년 2월 TWS(투어스) 팬미팅서 첫선",
        "link": "https://blog.toss.im/article/facefass-concert",
        "pubDate": "Mon, 23 Dec 2024 05:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}토스 앱에서 얼굴 정보 등록 후 티켓, 신분증 검사 없이 공연장 입장\n본인 확인 편의성 높이고 공연 입장 대기시간 대폭 줄일 것으로 기대\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1kxrhf3{white-space:pre-wrap;}모바일 금융 서비스 ‘토스'를 운영하는 비바리퍼블리카(이하 ‘토스’)가 안면인식 기술을 활용한 ‘얼굴입장’을 공연 분야에서 오픈한다.\n내년 2월 14일부터 16일까지 서울 송파구 방이동 올림픽공원 핸드볼경기장에서 열리는 TWS 팬미팅 ‘2025 TWS 1ST FANMEETING <42:CLUB> IN SEOUL’에 토스 얼굴입장이 활용된다. 공연 분야에서 토스 얼굴입장을 적용하는 첫 사례다.\n지난 8월 토스는 공연 분야에 얼굴인증 솔루션 도입을 위해 인터파크트리플, 하이브와 MOU를 체결한 바 있다. 이에 따라 토스 얼굴입장을 기반으로 한 인터파크트리플 얼굴패스를 론칭하고, 이를 하이브 아티스트 공연 티켓 예매 시에 활용하는 방식으로 협업한다.\n사전에 얼굴 정보를 등록하면 안면 인식 게이트로 빠르게 입장할 수 있어 공연장 대기 시간을 대폭 줄일 수 있을 것으로 기대하고 있다. 별도로 티켓과 신분증 확인 절차를 거칠 필요도 없어 본인 확인 편의성도 강화될 것으로 보고 있다.\n특히 토스 얼굴입장은 다양한 각도에서 얼굴 정보를 추출해 정확도를 위한 장치를 마련해 두고 있다. 저장된 얼굴 정보는 암호화된 형태로 별도 서버에서 안전하게 관리하고, 본인 인증 시에만 데이터베이스를 활용한다.\n토스 관계자는 “안정성, 편의성, 정확성을 모두 갖춘 토스 얼굴입장이 공연 분야에서도 선도적인 사례가 될 것이라 기대한다”며 “공항에 이어 공연장으로 활용처를 확대했고 전시장, 아파트 커뮤니티 등 다양한 영역으로 서비스 적용 범위를 넓혀 나갈 계획”이라고 말했다. (끝)",
        "content": "공연장에서 티켓, 신분증 검사 없이 안면인식으로 공연장 입장",
        "contentSnippet": "공연장에서 티켓, 신분증 검사 없이 안면인식으로 공연장 입장",
        "guid": "https://blog.toss.im/article/facefass-concert",
        "isoDate": "2024-12-23T05:00:00.000Z"
      },
      {
        "title": "토스, LG유플러스와 내 성향 반영한 캐릭터 만들기 이벤트 시작",
        "link": "https://blog.toss.im/article/AI-character",
        "pubDate": "Mon, 23 Dec 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}지난 10월 LG유플러스와 AI 기술 제휴 협약식 체결 이후 첫 협업\n2024년을 돌아보며 나의 성향을 반영한 토스 캐릭터 ‘캐치’ 만들기… 1월 31일까지 진행\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1kxrhf3{white-space:pre-wrap;}모바일 금융 서비스 ‘토스’를 운영하는 비바리퍼블리카(이하 ‘토스’)가 LG유플러스와 ‘2024 나 닮은 캐릭터 만들기’를 시작한다.\n‘2024 나 닮은 캐릭터 만들기’는 토스 앱 사용자가 자신의 성향을 반영한 토스 캐릭터 ‘캐치’를 만들어볼 수 있는 이벤트다. 2024년을 돌아보는 의미로 구성된 세 가지 질문에 답하면, LG유플러스 AI 기술 익시(ixi)가 이를 분석해 맞춤형 ‘캐치’를 생성한다. 예를 들어, 운동, 일⋅공부, 쇼핑 중 올해 가장 많이 한 카테고리로 쇼핑을 선택했다면, 나머지 두 가지 질문을 조합하여 ‘ooo한 쇼핑왕’ 캐치 캐릭터와 메시지를 보여준다.\n토스의 자체 캐릭터 ‘캐치’는 앱 내 ‘토스 새소식’ 메뉴에서 새로운 기능, 혜택, 이벤트 등을 안내하는 역할을 맡고 있다. 병아리를 모티브로 디자인된 ‘캐치’는 새로운 소식을 전하는 동시에 정보를 잡을 수 있다는 의미를 담아 탄생했다.\n이번 이벤트는 지난 10월 토스와 LG유플러스가 체결한 AI 기술 제휴 협약 이후 첫 번째 협업이다. 협약은 익시를 활용해 제작한 콘텐츠를 토스 앱에서 제공하고, 양사가 마케팅과 브랜딩 측면에서 긍정적 효과를 창출하는 것이 목표다.\n참여 방법은 간단하다. 토스 앱에서 ‘전체’ 탭 > ‘도움말’ 카테고리 > ‘토스 새소식’을 선택하거나, 돋보기 아이콘을 눌러 ‘새소식’을 검색하면 된다. 이벤트는 토스 사용자라면 누구나 참여가 가능하며, 12월 23일부터 1월 31일까지 진행된다.\n토스 관계자는 “LG유플러스와 기술 제휴를 맺은지 약 3개월 만에 첫 협업 이벤트 선보이게 돼 기쁘다”며 “앞으로 토스 이용자들이 더 다양한 디지털 혁신을 경험할 수 있도록 B2B 서비스에도 익시 기능을 접목하기 위해 노력할 것”이라고 밝혔다. (끝)",
        "content": "LG유플러스 익시 활용해 토스 캐치 캐릭터 만들기 ",
        "contentSnippet": "LG유플러스 익시 활용해 토스 캐치 캐릭터 만들기",
        "guid": "https://blog.toss.im/article/AI-character",
        "isoDate": "2024-12-23T00:00:00.000Z"
      },
      {
        "title": "자연재해, 버스 사고, 스쿨존 사고 ‘시민안전보험’으로 보상 받으세요.",
        "link": "https://blog.toss.im/article/money-policies-31",
        "pubDate": "Fri, 20 Dec 2024 01:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}내 주소지의 지방자치단체가 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}‘시민안전보험’에 가입되어 있다면, 자연재해나 화재, 대중교통 이용 중 발생한 사고 등에 대한 피해를 보상받을 수 있어요. 개인 보험이 있더라도 중복 보상이 가능해요.\n시민안전보험이란 각종 사고로부터 시민의 생명과 신체 피해를 보상하기 위해 지자체가 자율적으로 가입한 보장제도를 말해요. 이 보험에 가입한 지자체에 거주하는 시민은 별도 절차 없이 자동으로 시민안전보험에 가입돼요.\n나도 모르게 가입된 보험, 보험료를 내야 하냐고요? 아니에요. 보험료는 지자체에서 부담하고 운영은 보험사 또는 공제사에서 담당해요.\n보장내역은 다음과 같아요. 자연재해나 화재, 강도, 스쿨존 사고, 대중교통 이용 중 발생한 사고 등에 대한 피해를 보상받을 수 있어요. 다만 보장 항목과 규모는 지자체가 가입한 보험에 따라 달라요.\n실제 사례를 살펴보면 부산 서구에서는 시내버스가 급회전하면서 시민들이 의자에서 떨어지는 사고로 골절을 당해 1인당 150만 원의 보상을 받았어요. 또 경기 군포시에서는 아파트 인테리어 공사 중 발생한 화재로 목숨을 잃은 시민에게 1,500만 원이 지급되기도 했어요.\n보상 청구는 시민이 직접 해야 해요. 사고가 발생한 뒤 시민안전보험 사고처리 전담 창구에 사고를 접수하면 돼요. 중요한 건 사고 사실을 안 날로부터 3년 이내에 청구해야 한다는 점이에요. 이때 개인적으로 가입한 보험이나 구민안전보험이 있더라도 중복해 보험금을 지급받을 수 있어요.\n다른 지자체나 해외에서 피해를 입은 경우라도 지자체가 이 같은 사고를 보장하는 안전보험에 가입했다면 보상을 받을 수 있어요. 실제로 네팔 해외봉사활동 중 눈사태로 사망한 대전 시민이 시민안전보험으로 2,000만 원의 보험금을 지급받기도 했어요.\n내가 사는 곳의 지자체가 시민안전보험에 가입했는지, 어떤 내용을 보장하는지 궁금하다면 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}국민재난안전포털 웹사이트의 ‘풍수해·시민안전보험-시민안전보험 가입현황조회’을 통해 확인할 수 있어요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}Edit 이지영 Graphic 조수희 이제현",
        "content": "보험료는 지자체가 부담, 개인 보험이 있더라도 중복 보상 가능해요.",
        "contentSnippet": "보험료는 지자체가 부담, 개인 보험이 있더라도 중복 보상 가능해요.",
        "guid": "https://blog.toss.im/article/money-policies-31",
        "isoDate": "2024-12-20T01:00:00.000Z"
      },
      {
        "title": "토스, 안면인식 출국 서비스 ‘스마트패스’ 오픈",
        "link": "https://blog.toss.im/article/smartpass-open",
        "pubDate": "Fri, 20 Dec 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}토스앱에서 얼굴 정보 등록하면.css-1kxrhf3{white-space:pre-wrap;} 인천공항 출국장·탑승구에서 안면인식 후 통과\n서비스 오픈 맞춰 해외여행 홈도 개편…결제, 환전, 여행자 보험 가입을 한 곳에서\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n모바일 금융 서비스 ‘토스'를 운영하는 비바리퍼블리카(이하 ‘토스’)가 안면인식 기술을 활용한 스마트패스 서비스를 시작한다.\n스마트패스는 여권, 얼굴 정보, 탑승권을 사전에 등록하면 인천국제공항 출국장·탑승구를 안면인식만으로 통과할 수 있는 서비스다. 토스는 지난 10월 인천국제공항공사와 스마트패스 활성화를 위한 협약을 맺었고 연말 해외여행 시즌을 맞춰 본격적인 서비스를 시작한다.\n토스 앱에서 ‘얼굴입장’ 이용 동의 후 전자여권을 인증하면 스마트패스 등록이 가능하다. 토스 얼굴입장은 얼굴 정보를 사전에 등록 후 특정 장소 출입 시 얼굴로 본인 인증을 하는 서비스다. 만 7세 이상(만 7~14세는 법정대리인 동의 필요)부터 내외국인 모두 서비스를 이용할 수 있다.\n등록이 완료되면 인천국제공항 출국장 스마트패스 전용 줄과 대한항공, 제주항공, 진에어 일부 탑승 게이트에서 여권이나 탑승권을 꺼낼 필요없이 얼굴 인증 후 통과할 수 있다. 최초 등록 이후에는 출국 전에 토스 앱에서 탑승권만 등록하면 된다.\n토스는 스마트패스 오픈에 맞춰 ‘해외여행 홈’도 개편했다. 해외여행 홈은 결제, 환전, 여행자 보험 가입 등을 해외로 여행 시 필요한 정보를 한곳에 모아 제공하는 서비스다. 해외여행 홈에 연동된 토스페이로는 전 세계 56개국에서 QR 또는 바코드만으로 결제할 수 있다. 결제 금액만큼 토스페이에 연결된 계좌에서 자동 환전 후 결제가 이루어지는 방식이다. 결제 시 토스포인트 사용은 물론 적립 혜택도 받을 수 있다.\n토스뱅크와 하나은행 계좌 우대 환전 서비스도 이용할 수 있다. 우대 환율은 토스뱅크 100%, 하나은행 90%로 적용받을 수 있다. 해외여행 홈을 통해 제휴된 해외 여행자 보험 가입 시에는 최대 3만원을 토스포인트로 돌려 받는 프로모션도 진행한다.\n토스 관계자는 “인천국제공항과 협업으로 해외 출국객이 더 쉽고 편리하게 스마트패스를 이용할 수 있는 서비스를 토스 앱 내 구현했다”며 “연말 여행 철을 맞아 관련 정보를 한 곳에서 모아보는 해외여행 홈도 개편한 만큼 많은 분들이 더 편리한 경험을 할 수 있을 것으로 기대한다”고 말했다. (끝)",
        "content": "얼굴입장으로 인천국제공항 출국장·탑승구 통과",
        "contentSnippet": "얼굴입장으로 인천국제공항 출국장·탑승구 통과",
        "guid": "https://blog.toss.im/article/smartpass-open",
        "isoDate": "2024-12-20T00:00:00.000Z"
      },
      {
        "title": "시장은 정말 보이지 않는 손에 의해 움직일까?",
        "link": "https://blog.toss.im/article/everyday-economics-21-invisible-hand",
        "pubDate": "Thu, 19 Dec 2024 09:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}이 글에서 알 수 있는 것들\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}팬데믹 초기의 마스크 대란이 시장 메커니즘을 보여준다?\n시장의 ‘보이지 않는 손’과 정부의 ‘보이는 손’이 경제에서 각각 맡는 역할\n시장은 정말 완전히 자율적으로 작동할 수 있는 걸까?\n\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-12p6bv8{white-space:pre-wrap;color:#15c47e;font-weight:bold;}교수 K (이하 K): 에디터 님, 혹시 보이지 않는 손(invisible hand)이라는 말을 들어보셨나요?\n.css-94on8q{white-space:pre-wrap;color:#c770e4;font-weight:bold;}에디터 G (이하 G): 네, 교수님! 예전에 경제 수업에서 들어봤어요. 신문, 기사 등 다양한 곳에서도 활용되고요.\nK: 그렇죠. 많은 분들에게 익숙한 ‘보이지 않는 손’은 경제학의 아버지라고 불리는 애덤 스미스(Adam Smith)의 대표작인 <국부론(The Wealth of Nations)>에 처음 등장한 용어예요.\n그는 각 개인이 오로지 자신의 이익을 위해 하는 행동들이 마치 보이지 않는 손에 이끌린 것처럼 결과적으로는 사회 전체 자원의 효율적 배분으로 이어진다고 보았는데요. 오늘은 정말 시장은 보이지 않는 손에 의해서 움직이는지를 살펴보도록 할게요.\n\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n보이지 않는 손의 핵심 도구는 바로 ‘가격’\nK: 시장에서 보이지 않는 손이 잘 작동하기 위해서는 도구가 하나 필요한데요. 무엇일까요?\nG: 음… 시장이 자율적으로 돌아가게 하려면 시장에서 거래되는 물건이나 서비스의 가격이 얼마인지 정해져있어야 할 것 같은데요.\nK: 잘 파악하셨어요. 바로 ‘가격’이 필요합니다. 이전에 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}“‘다이아몬드는 영원히’, 비싼 가격도 영원할까” 아티클에서 살펴본 것처럼, 가격은 수요와 공급의 상호작용으로 결정됩니다. 소비자와 생산자에게 신호를 전달하는 중요한 역할을 하죠.\n예를 들어, 소비자들은 가격이 낮아지면 더 많은 제품을 구매하려고 하지만, 가격이 높아지면 소비를 줄이게 됩니다. 반면 생산자들은 가격이 높아지면 더 많은 이윤을 기대하며 생산을 늘리고, 가격이 낮아지면 생산을 줄입니다.\nG: 서로 반대로 움직이네요. 소비자 입장에서는 세일 행사에 많이 몰릴 수밖에 없는 거고요.\nK: 그렇죠. 이와 같은 가격 메커니즘은 시장에서 초과 공급이나 초과 수요를 완화시키면서, 자연스럽게 시장 가격이 균형 지점으로 수렴하도록 만들게 됩니다.\n가격 메커니즘에 따르면, 희소한 자원일수록 가격이 올라가고 흔한 자원은 가격이 자연스럽게 내려가게 되는데요.\n팬데믹 초기를 떠올려볼까요? 초기에 마스크에 대한 수요가 폭증하면서, 마스크 품귀 현상으로 인해 가격이 급격히 상승한 적이 있었어요. 이러한 가격 상승은 마스크 제조업체들이 더 많은 자원을 투입하여 생산량을 늘리도록 자연스럽게 유도했고, 마스크 생산과 공급 확대로 이어졌습니다. 가격은 원래대로 돌아오게 되었죠.\nG: 똑똑히 기억나요. 흔한 소비재였던 마스크가 구하기 어려워지고, 그로 인해 가격이 몇 배는 뛰었어서 정말 혼란스러웠거든요.\nK: 그쵸, 많은 분들이 처음 겪는 현상이라 놀라셨을 거예요. 이렇게 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}외부의 별다른 개입 없이 시장 스스로 가격을 조정하고, 이를 통해 자원을 효율적으로 배분하고, 결과적으로 사회의 이익을 극대화한다는 것이 보이지 않는 손 이론의 핵심 아이디어라고 할 수 있습니다.\n\n시장 실패와 정부의 개입\nG: 교수님, 그럼 보이지 않는 손은 늘 시장에서 완벽하게 작동하나요?\nK: 좋은 질문이에요. 항상 완벽하게 작동하는 것은 아닙니다.\n예를 들어, 어떤 사람이 공장에서 물건을 만들어내면서 유독 물질을 공기 중으로 몰래 배출했다고 가정해보죠. 이때 공장 주변에 사는 사람들은 오염 물질 때문에 피해를 입게 될 겁니다. 이 상황을 그냥 시장에 맡겨둘 경우, 오염 물질로 인해 발생하는 부가적인 피해에 대해 공장은 아무런 비용도 지불하지 않을 거예요.\n이처럼 한 사람의 행동이 다른 사람에게 영향을 미치는 데도 불구하고, 이에 대해 아무런 대가를 지불하지 않는 상황을 외부효과(externality)라고 부르는데요. 환경오염으로 인한 부정적인 외부효과는 보이지 않는 손이 제대로 작동하지 않는 시장 실패(market failure)의 대표적인 사례라고 할 수 있습니다.\nG: 아무래도 공장을 운영하는 기업 입장에서는 이익 극대화를 위해 최선을 다할 테니, 제동을 걸지 않으면 주변 사람들에게 지속적으로 피해를 입힐 수 있겠네요. 다른 사례도 있을까요?\nK: 시장 실패의 또 다른 예시로 시장지배력(market power)으로 인한 가격의 자동 조절 기능 상실을 들 수 있습니다. 스탠더드 오일(Standard Oil) 회사의 실제 사례를 살펴볼게요.\n스탠더드 오일은 1870년에 존 D. 록펠러(John D. Rockefeller)가 설립한 회사인데요. 19세기 말에 스탠더드 오일은 미국 석유 시장의 약 90%를 장악하며 독점적인 지위를 구축했습니다. 이를 위해 경쟁사들의 계약을 방해하거나, 가격 덤핑 전략을 사용하여 소규모 석유 회사들을 하나씩 퇴출시켜 버렸고요.\n이렇게 시장을 지배하며 더 이상 경쟁을 할 필요가 없게 되자, 스탠더드 오일은 가격을 인위적으로 인상했습니다. 소비자들은 울며 겨자 먹기로 높은 연료비를 부담해야 했죠.\n이와 같이 시장이 소수의 기업에 의해 지배되면 가격은 더 이상 자유롭게 조정되지 않고, 자원의 배분도 왜곡됩니다.\nG: 소비자 입장에서는 동일한 재화에 대해 서로 다른 가격을 가진 여러 개의 제품이 있어야 더 나은 선택을 할 수 있는 기회를 가질 수 있는 것인데, 이렇게 되면 아무 비교도 없이 하나의 기업이 제공하는 재화만 하나의 가격에 구입해야 하니… 시장 독점이 위험한 이유겠네요.\nK: 그렇습니다. 지난 시간에 “부자는 반드시 사회에 환원해야 할까?” 아티클에서 살펴본 것처럼, 국방 서비스와 같은 공공재는 누군가 소비하더라도 다른 사람이 동일한 재화를 소비하는 데에 제한이 없습니다. \n또한 대가를 지불하지 않은 사람도 자유롭게 사용할 수 있죠. 이렇게 공공재는 경합성과 배제성이 낮기 때문에, 시장에 맡겨두면 공급이 제대로 이루어지지 않을 것입니다.\n이와 같이 외부효과, 시장지배력, 공공재의 공급 제한 등과 같은 상황에서는 보이지 않는 손이 제 역할을 하지 못하게 돼요. 결국 정부의 개입이 필요하게 됩니다.\nG: 정부가 개입하면 어떤 일들이 일어나나요?\nK: 대표적으로 ‘세금’이 있겠죠. 정부는 오염 물질을 배출하는 기업에게 세금을 부과할 수 있고, 오염 물질을 상대적으로 덜 배출하는 재생 에너지를 사용할 경우 보조금을 지급하는 방식 등을 통해 외부효과를 완화할 수 있습니다.\n또한 정부는 ‘공정거래법’ 등을 통해 기업의 독과점을 규제하여 시장에서 경쟁이 제대로 이루어지도록  유도할 수 있습니다. 앞서 살펴본 스탠더드 오일의 경우 ‘셔먼법(Sherman Act)’이라 불리는 반독점법에 따라 34개의 기업으로 분할하라는 판결을 미국 연방대법원이 내리게 됩니다.\n최근 구글이 인터넷 검색시장에서 독점적인 시장지배력을 남용하여 경쟁을 저해했다는 이유로 미국 법무부가 구글에 대한 기업 분할 조치를 검토하고 있는 것도 비슷한 맥락으로 이해할 수 있습니다.\n\n정부의 시장 개입에 대한 경제학자들의 생각들\nG: 앞서 설명주신 상황 외에도 정부의 개입이 필요한 상황이 있을까요?\nK: 경제가 대규모의 침체기에 빠졌을 때도 정부의 개입이 필요합니다. 1920년대 후반에 대공황(The Great Depression)이 발생했을 당시만 해도, 경제학자들은 가격 메커니즘을 신봉했습니다.\n대규모 경제 침체가 일어나면, 사람들은 일자리를 잃고 소비도 줄겠죠. 물건이 팔리지 않아 재고가 계속 쌓이게 되면 가격은 점점 떨어지게 되고요. 이렇게 가격이 계속 떨어지게 되면 어느 시점에는 다시 수요가 증가하게 될 것이고, 경제는 결국 스스로 제 자리를 찾아가게 될 것이라는 것이 이들의 논리였어요.\nG: 실제로는 어떠했나요?\nK: 예상과 다르게 흘러갔어요. 미국의 실업률이 지속적으로 치솟아 25%까지 오르고, 국민 소득은 반 토막이 났거든요. 보이지 않는 손은 침묵을 지키게 됩니다.\n이때 경제학계에 한 줄기 빛이 내려오는데요. 바로 존 메이너드 케인스(John Maynard Keynes) 입니다.\n케인스는 불황이 발생하는 원인에 대해 이렇게 말했어요. 시장의 수요가 충분하지 않았기 때문이며, 정부가 직접 나서서 돈을 지출하거나 세금을 삭감함으로써 경기 침체에서 벗어날 수 있을 것이라고요.\n실제로 케인스는 미국의 루즈벨트 대통령에게 편지를 보냅니다. 정부가 지출을 늘리게 되면 시간이 지나면서 그 효과가 눈덩이처럼 불어나고, 전체 경제에 영향을 주게 되는 승수효과(multiplier effect)를 근거로 미국이 대규모 공공부문 지출 프로그램을 시행할 것을 촉구하기도 했어요.\nG: 정부의 적극적 개입이 필요하다 강조한 거군요.\nK: 맞습니다. 케인스는 보이지 않는 손에게 모든 것을 맡기는 시장의 자율성에 의문을 제기하며, 정부의 적극적 개입이 필요함을 강조한 대표적인 경제학자라고 할 수 있습니다.\n그러나, 케인스의 이론에 모든 경제학자들이 동의한 것은 아닙니다.\n특히 시카고대학교의 밀턴 프리드먼(Milton Friedman)은 “과도한 정부 개입은 오히려 경제적 비효율성을 초래하고 개인의 자유를 침해할 수 있다”고 주장했어요. 또한 그는 “경제의 안정을 위해서는 케인스가 주장한 정부의 재정 정책보다는 통화 정책이 더 효과적”이라고 말했습니다.\nG: \"과도한 정부 개입이 비효율을 초래한다\"는 프리드먼의 주장에 대해 조금 더 자세히 설명해 주실 수 있을까요?\nK: 물론입니다. 프리드먼은 시장이 스스로 균형을 찾아가는 메커니즘을 신뢰했어요. 정부가 지나치게 개입하면 자원의 효율적인 배분이 왜곡될 것을 걱정했습니다. 정부가 대규모 재정 정책으로 소비를 촉진하려 할 때, 자금이 오히려 비효율적인 부문으로 흐를 수 있다는 우려도 있었어요. 이 과정에서 개인의 선택과 자유가 침해당할 가능성도 있다고 본 거죠.\n당시 정부의 과도한 개입으로 인해 물가는 상승하고 경제는 침체되었는데, 프리드먼은 이를 방지하려면 통화 정책이 더 적합하다고 봤습니다.\nG: 그렇군요. 그래서 그는 정부가 직접 돈을 쓰는 방향보다, 통화량을 조절하는 방식으로 시장의 흐름을 ‘간접적으로’ 조정해야 한다 주장했군요.\nK: 맞습니다. 케인스의 이론을 따르는 경제학자들과 프리드먼의 이론을 따르는 경제학자들은 1950년대부터 1970년대까지 설전을 이어갔는데요.\n프리드먼은 만약 정부가 인플레이션을 방치한 채 더 많은 일자리를 창출하는 데에만 정책 목표를 둔다면, 결국에는 물가 상승만을 초래하고 기존의 일자리를 파괴하게 될 것이라고 주장했습니다.\n그의 주장은 특히 1970년대에 발생한 경기침체와 인플레이션이 합쳐진 ‘스태그플레이션’ 시기에 주목받았어요. 프리드먼의 주장이 사실로 증명되었거든요. 이때부터 이른바 ‘통화주의’가 힘을 얻게 됩니다.\n한편, 굳이 정부가 개입하지 않아도 시장의 실패를 극복할 수 있다는 새로운 시각도 등장했는데요. 바로 로널드 코즈(Ronald Coase)가 제시한 ‘코즈의 정리(Coase Theorem)’입니다.\n코즈에 따르면 “외부효과와 같은 시장 실패가 발생하는 상황에서도, 소유권이 명확히 정의되어 있고, 정보의 수집과 협상에 들어가는 비용 등과 같은 거래 비용(transaction cost)이 낮다면, 시장 참여자 간의 협상을 통해 자원이 얼마든지 효율적으로 배분될 수 있다”고 주장합니다.\nG: 코즈는 프리드먼과 다른 의견이었군요. 시장에 문제가 생기는 경우, 누구에게 어떤 권리가 있는지 명확하고 사람들이 서로 대화하거나 합의하는 데에 드는 비용이 크지 않다면, 정부가 개입하지 않아도 된다는 말일까요?\nK: 맞습니다. 이는 정부의 개입 없이도 가격 메커니즘이 작동할 수 있는 가능성을 열어줍니다. 정부가 개입하지 않아도 사람들이 스스로 문제를 해결하고 자원을 효율적으로 나눌 수 있다는 뜻이죠.\n예를 들어, 공장이 오염 물질을 배출해서 주변에 거주하는 주민들에게 피해를 주었을 때, 피해 주민과 공장 소유자가 협상을 통해 오염 물질을 줄이도록 서로 합의한다면, 굳이 정부가 중간에 개입하지 않더라도 문제를 해결할 수 있다고 본 것입니다.\n\n오늘은 “시장은 정말 보이지 않는 손에 의해 움직이는가?”에 대해 살펴보았는데요. 보이지 않는 손은 가격 메커니즘을 통해 시장이 자율적으로 작동할 수 있음을 보여줍니다.\n그러나 현실 경제에서는 외부효과, 독과점, 공공재 공급 제한 등으로 인해 보이지 않는 손이 제대로 작동하지 않을 수 있습니다. 이렇게 시장이 스스로 자원을 효율적으로 배분하지 못하는 상황에서는 정부의 적절한 개입이 필요하고요.\n다만, 시장이 항상 완벽하지 않은 것처럼 정부도 완벽하지 않습니다. 시장과 정부는 대립하는 관계이기 보다는 서로의 불완전한 부분을 보완해주는 관계에 가깝습니다.\n앞으로 경제 뉴스를 보실 때는 시장의 ‘보이지 않는 손’과 정부의 ‘보이는 손’이 어떻게 서로 협력하는지를 유심히 관찰해보면 좋을 것 같네요.\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고자료\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이제현",
        "content": "자율적인 시장은 가능할까? 경제학 거장들의 이야기를 따라가다",
        "contentSnippet": "자율적인 시장은 가능할까? 경제학 거장들의 이야기를 따라가다",
        "guid": "https://blog.toss.im/article/everyday-economics-21-invisible-hand",
        "isoDate": "2024-12-19T09:00:00.000Z"
      },
      {
        "title": "한파, 폭염 그리고 커피값 - 엘니뇨와 라니냐가 몰고 온 변화",
        "link": "https://blog.toss.im/article/economic-terms-41-elnino-lanina",
        "pubDate": "Thu, 19 Dec 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}이 글에서 알 수 있는 것들\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}매서운 한파와 긴 폭염, 왜 우리나라에 나타나는 걸까?\n커피값 폭등의 숨은 범인이 바로 ‘바닷물 온도’인 이유\n엘니뇨·라니냐 같은 이상기후 - 우리 삶 사이의 깊은 연결고리\n\n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}🔖 이번 주 경제 용어\n엘니뇨·라니냐\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n이번 주 경제 용어는 환경에 관심 가지기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n동태평양 적도 부근의 해수 온도가 평년보다 높아지는 현상이 엘니뇨, 낮아지는 현상을 라니냐라고 해요.\n\n\n해가 갈수록 전 세계 이상 기후 현상이 빈번하게 발생하고 있습니다. 올해 북미와 유럽은 기록적인 폭염이 이어졌고, 동남아시아와 남미 일부 지역에서는 폭우와 홍수로 많은 인명 피해가 있었죠. 반면 호주와 미국 중서부에서는 극심한 가뭄이 지속되기도 했어요. 우리나라도 올 여름 기록적인 긴 폭염이 지속되었고, 가을에는 기온이 들쑥날쑥했으며, 겨울은 초입부터 폭설이 내렸어요.\n이러한 이상 기후는 ‘대기(공기)와 해수(바닷물)의 순환’과 밀접하게 연결되어 있습니다. 대기와 해수가 움직이면서 지구 곳곳에 에너지를 고르게 전달하는데요. 이 과정에서 문제가 생길 때 기후변화가 나타납니다. 대표적으로 엘니뇨, 라니냐 같은 현상이 있어요.\n\n엘니뇨·라니냐 이름의 유래는?\n\n엘니뇨(El Niño)와 라니냐(La Niña)라는 용어는 스페인어에서 유래했어요. \n엘니뇨는 ‘남자 아이’ 또는 ‘아기 예수’를 뜻해요. 크리스마스 즈음에 페루와 에콰도르 해안에서 따뜻한 해류가 발생하는 현상 때문에 ‘아기 예수’라는 이름이 붙여졌습니다. \n라니냐는 ‘여자 아이’라는 뜻으로, 엘니뇨와 반대되는 현상, 즉 바닷물이 차가워질 때를 설명하기 위해 대비되는 이름을 선택했어요.\n\n자, 그럼 이런 이상기후 현상이 어떤 원리로 일어나는지 좀 더 자세히 알아볼게요.\n\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}출처: 2016 엘니뇨 백서, 기상청\n보통 적도 부근에서는 무역풍*이 불면서 바닷물을 동쪽에서 서쪽으로 밀어냅니다. 반대로 중위도 지역에서는 편서풍이 바닷물을 서쪽에서 동쪽으로 움직이게 해요. 이렇게 바닷물이 동서로 움직이면서, 대륙 근처에 다다르면 남북 방향으로 이동하며 큰 원을 그리며 순환합니다.\n* 무역풍(trade wind) : 지구 자전의 영향으로 위도 20도 내외 지역에서 1년 내내 동쪽에서 서쪽으로 일정하게 부는 바람. 이 바람은 유럽에서 아메리카 대륙으로 항해할 때 무역선의 이동을 돕는 역할을 했으며, 이러한 이유로 ‘무역풍’이라는 이름이 붙었다.\n이 과정에서 적도 동쪽의 따뜻한 표층 해수가 서쪽으로 이동하게 되는데, 이로 인해 서태평양의 수온이 높아집니다. 수온이 높아지면 구름이 많이 만들어져요. 이로 인해 서태평양 지역에는 비가 많이 내리고, 반대로 동태평양 지역에는 맑고 건조한 날씨가 나타납니다.\n여기까지가 일반적인 기후 현상이에요. 엘니뇨·라니냐 같은 이상기후는 2~5년마다 불규칙적으로 나타나요.\n1. 엘니뇨\n\n태평양 바닷물 온도가 평소보다 높아지는 현상이에요.\n평소에 무역풍이 불면, 따뜻한 바닷물이 동태평양(남미)에서 서태평양(아시아)로 밀려갑니다.\n그런데 무역풍이 약해지면 따뜻한 바닷물이 서태평양으로 가지 않고 동태평양 연안에 쌓이게 돼요. 이 때문에 동태평양 해수 온도가 높아지면서 엘니뇨가 발생합니다. (주로 12월쯤 나타나요)\n날씨가 평소와 다르게 바뀌어요. 북미·남미에는 폭우와 홍수가, 아시아·호주에는 가뭄과 폭염이 발생하기도 해요. \n우리나라 기준으로 보면 겨울철 기온이 올라가고, 겨울에 비가 내리는 날이 늘어나요.\n\n2. 라니냐\n\n엘니뇨와 반대로, 태평양 바닷물 온도가 평소보다 낮아지는 현상이에요.\n무역풍이 평소보다 더 강하게 불면, 따뜻한 바닷물이 서태평양(아시아)으로 빠르게 밀려갑니다.\n그러면 동태평양에서는 이 빈자리를 채우기 위해 심해의 차가운 바닷물이 수면 위로 올라오게 되죠. 이 때문에 동태평양 해수 온도가 낮아지고, 라니냐가 발생합니다. (주로 엘니뇨가 끝난 뒤 나타나는 경우가 많고, 여름에 시작해서 겨울에 가장 강해져요) \n날씨도 엘니뇨와 반대로 나타나요. 북미·남미 날씨는 건조해지고, 북미에는 강추위가 찾아오기도 하고요. 아시아·호주에는 폭우와 홍수가 발생할 수 있어요. \n우리나라 기준으로 보면  여름 무더위가 심해지고 폭염이 더 길어져요. 태풍이 자주 발생하고 한반도로 북상할 가능성도 커집니다. 겨울에는 한파가 더 자주 발생하고, 눈이 많이 내릴 수 있습니다.\n\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}\"커피 한 잔 합시다\" 이 말도 이젠 부담?…원두 가격 계속 오를까\n(머니투데이 2024.11.26.)\n5일 인베스팅닷컴에 따르면 영국 런던국제금융선물거래소(LIFFE)에서 거래되는 로부스타 원두 선물 가격은 지난 22일 기준으로 전일 대비 4.14% 오른 4985달러에 마감했다. 최근 일 년간 로부스타 원두 선물 가격은 89%대 뛰었다. 지난해 9월에는 역대 최고가를 기록하기도 했다.\n커피 강세의 배경에는 엘니뇨가 있다. 엘니뇨는 열대 동태평양 표층 수온이 평년보다 높아지는 현상이다. 무역풍 약화가 원인으로 꼽히지만 정확한 원인은 알려지지 않았다. 엘니뇨가 발생하면 미국 남부와 멕시코 지역은 강우량이 높아지고, 미 북부와 캐나다, 아시아 등에는 가뭄이 찾아온다.\n이 때문에 엘니뇨는 커피를 비롯한 연성 원자재(소프트 커머디티)의 가격을 올려놓는 주범으로 꼽힌다. 올해도 엘니뇨는 세계 최대 커피 산지인 브라질과 로부스타 원두의 주요 산지인 베트남, 인도네시아 등에 가뭄을 불러왔다. 커피 원두 생산량이 줄어들자 가격도 지난해 말부터 강세를 보였다.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}기후 변화가 심화되는 만큼 커피 가격의 변동성이 커질 것이라는 관측이 나온다. 피치 솔루션의 찰스 하트 애널리스트는 외신과의 인터뷰에서 \"향후 10년 동안 기후 변화로 커피 부문에 구조적인 리스크가 더욱 심화될 것\"이라며 \"전 세계의 커피 생산량이 영향을 받으면서 가격 변동성도 커질 것\"이라고 봤다.\n다만 단기적으로 커피 가격의 강세는 이어지지 않을 전망이다. 엘니뇨가 끝나고 라니냐가 찾아오며 커피, 코코아 등 연성 원자재의 가격이 하락할 수 있어서다. 정한솔 대신증권 연구원은 \"소프트 가격 강세를 야기했던 엘니뇨가 종료되면서 원당/커피/코코아 등 소프트 가격이 내년 하락 전환할 것\"이라고 분석했다.\n대신 라니냐가 찾아오면서 소프트 대신 곡물가가 강세를 보일 것이라는 예상이다. 라니냐는 전 세계에 옥수수와 대두를 공급하는 핵심 생산지인 북미에서 강추위를, 남미에서는 가뭄을 유발한다. 이에 따라 소프트 가격은 하락하지만 옥수수, 대두, 소맥 등 곡물 가격이 올라갈 가능성이 있다. (후략)\n\n\n올해 엘니뇨는 주요 커피 산지인 브라질, 베트남, 인도네시아에 심각한 가뭄을 불러왔고, 커피 원두 생산량도 감소했습니다.\n브라질은 세계 커피 시장의 약 40%를 차지하는 주요 커피 산지로, 가뭄으로 인한 수확량 감소는 세계 시장에 큰 파장을 미칠 수밖에 없어요. 베트남, 인도네시아는 로부스타 커피를 주로 생산하는 국가로, 가뭄이 길어질수록 원두 가격이 급등할 가능성이 크겠죠. 이렇게 작황이 좋지 않으니 공급량이 줄어들고, 커피 가격이 폭등할 수밖에 없는 경제적 결과를 불러옵니다.\n한편 엘니뇨가 끝나고 라니냐가 찾아오면, 북미에 강추위를 가져오면서 옥수수와 대두 생산에 차질이 생길 수 있습니다.\n특히 미국은 전 세계 옥수수와 대두의 주요 수출국이기 때문에, 생산량 감소가 세계 곡물 시장에 큰 영향을 미칠 수 있어요. 남미에는 가뭄을 가져오는데, 이로 인해 브라질과 아르헨티나 같은 곡물 생산국에 큰 피해를 주어 소맥(밀) 등 작물의 공급을 위협합니다. 엘니뇨가 커피에 미친 영향과 마찬가지로, 라니냐는 옥수수, 대두, 소맥 등 곡물 가격 상승을 유발할 것으로 보이고요.\n\n기후 변화가 심각해지면서 엘니뇨와 라니냐의 발생 빈도와 강도가 더 커질 수 있습니다. 이로 인해 특정 농산물의 생산량 변동성이 커지고 가격도 급등락을 반복하게 될 가능성이 높고요.\n이렇게 주요 식량의 가격이 급격하게 오르내리는 것이 우리 삶에 어떤 변화를 주는지 좀더 자세히 살펴볼까요? 커피를 예시로 들어볼게요.\n많은 사람들의 기호 식품인 커피 가격이 오른다는 것은, 단순히 커피를 좋아하는 소비자들에게만 영향을 주는 것이 아닙니다. 커피 시장에 다양한 변화를 불러올 수 있어요. 대형 커피 체인은 원가 상승 압박으로 제품 가격 인상을 고려할 수밖에 없고, 소규모 커피숍이나 자영업자들은 원가 부담이 더 크게 다가오기 때문에 소비자가 빠르게 이탈하며 폐업까지 이어지는 케이스가 많아질 수 있습니다. 또한 커피 가격이 오르면, 초콜릿(코코아)이나 설탕(원당) 등 다른 연성 원자재 가격에까지 영향을 미칠 수 있어요.\n이렇게 음료 전반의 가격이 지속적으로 오르면, 소비자들은 소비 습관을 바꾸려 할 거예요. 집에서 직접 커피를 만들어 마시는 빈도가 높아지겠죠. 홈카페 트렌드가 더욱 강화될 수 있습니다. 커피 대신 차(tea), 에너지 음료, 건강 음료 등 대체재를 찾는 수요도 증가할 수 있어요. 프리미엄 고급 커피에서 상대적으로 저렴한 커피 원두로 바꾸는 경향성도 보일거고요.\n더 나아가 정부와 산업에도 영향을 미칠 수 있습니다. 커피 같은 주요 작물의 공급 불안정이 계속되면, 대응책을 세우기 위해 기후 변화에 강한 품종 개발, 스마트 농업 기술 도입 등 혁신을 일으킬 수 있어요. 그리고 커피 수출국은 국내 수급 안정을 위해 수출 규제, 재고 비축을 강화할 수 있습니다. 반면 수입하는 국가들은 공급망 리스크를 줄이려 하겠죠.\n이렇게 엘니뇨·라니냐 같은 기후변화 현상은 개인은 물론 사회 전체에도 큰 영향력을 끼칩니다. 단순히 커피와 곡물의 문제를 넘어, 지구 전체의 식량 안보를 위협하고 있기에 관심을 기울여야 합니다.\n\n\n로부스타 원두: 세계적으로 널리 소비되는 커피 원두 중 하나. 카페인이 아라비카 원두보다 약 2배 많아, 커피의 강도와 쓴맛을 선호하는 사람들에게 인기 있어요. 아라비카 원두와 함께 커피 시장을 양분하는 커피 종류예요.\n연성 원자재: 주로 재배하거나 생산해야 하는 상품으로, 농산물·식품·목재 등 자연에서 얻어지는 원자재. 금·석유 같은 광물이나 에너지 원자재와 구분하여 쓰는 말이에요.\n농산물 선물 거래: 농산물을 미래 일정 시점에 정해진 가격으로 거래하기로 계약하는 금융 상품. 농민, 유통업자, 투자자 등 다양한 참여자들이 가격 변동 리스크를 줄이거나 이익을 추구하기 위해 활용해요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "커피값 왜 이렇게 비싸질까? 이상기후 엘니뇨, 라니냐의 숨겨진 이야기",
        "contentSnippet": "커피값 왜 이렇게 비싸질까? 이상기후 엘니뇨, 라니냐의 숨겨진 이야기",
        "guid": "https://blog.toss.im/article/economic-terms-41-elnino-lanina",
        "isoDate": "2024-12-19T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]