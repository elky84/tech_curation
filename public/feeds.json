[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Evgenia Verbina",
        "title": "Polars vs. pandas: What’s the Difference?",
        "link": "https://blog.jetbrains.com/pycharm/2024/07/polars-vs-pandas/",
        "pubDate": "Thu, 04 Jul 2024 13:58:03 +0000",
        "content:encodedSnippet": "If you’ve been keeping up with the advances in Python dataframes in the past year, you couldn’t help hearing about Polars, the powerful dataframe library designed for working with large datasets.\n\n\n\n\nUnlike other libraries for working with large datasets, such as Spark, Dask, and Ray, Polars is designed to be used on a single machine, prompting a lot of comparisons to pandas. However, Polars differs from pandas in a number of important ways, including how it works with data and what its optimal applications are. In the following article, we’ll explore the technical details that differentiate these two dataframe libraries and have a look at the strengths and limitations of each.\nIf you’d like to hear more about this from the creator of Polars, Ritchie Vink, you can also see our interview with him below!\n\n\n\n\n\n\nWhy use Polars over pandas?\nIn a word: performance. Polars was built from the ground up to be blazingly fast and can do common operations around 5–10 times faster than pandas. In addition, the memory requirement for Polars operations is significantly smaller than for pandas: pandas requires around 5 to 10 times as much RAM as the size of the dataset to carry out operations, compared to the 2 to 4 times needed for Polars.\nYou can get an idea of how Polars performs compared to other dataframe libraries here. As you can see, Polars is between 10 and 100 times as fast as pandas for common operations and is actually one of the fastest DataFrame libraries overall. Moreover, it can handle larger datasets than pandas can before running into out-of-memory errors.\nWhy is Polars so fast?\nThese results are extremely impressive, so you might be wondering: How can Polars get this sort of performance while still running on a single machine? The library was designed with performance in mind from the beginning, and this is achieved through a few different means.\nWritten in Rust\nOne of the most well-known facts about Polars is that it is written in Rust, a low-level language that is almost as fast as C and C++. In contrast, pandas is built on top of Python libraries, one of these being NumPy. While NumPy’s core is written in C, it is still hamstrung by inherent problems with the way Python handles certain types in memory, such as strings for categorical data, leading to poor performance when handling these types (see this fantastic blog post from Wes McKinney for more details).\nOne of the other advantages of using Rust is that it allows for safe concurrency; that is, it is designed to make parallelism as predictable as possible. This means that Polars can safely use all of your machine’s cores for even complex queries involving multiple columns, which led Ritchie Vink to describe Polar’s performance as “embarrassingly parallel”. This gives Polars a massive performance boost over pandas, which only uses one core to carry out operations. Check out this excellent talk by Nico Kreiling from PyCon DE this year, which goes into more detail about how Polars achieves this.\nBased on Arrow\nAnother factor that contributes to Polars’ impressive performance is Apache Arrow, a language-independent memory format. Arrow was actually co-created by Wes McKinney in response to many of the issues he saw with pandas as the size of data exploded. It is also the backend for pandas 2.0, a more performant version of pandas released in March of this year. The Arrow backends of the libraries do differ slightly, however: while pandas 2.0 is built on PyArrow, the Polars team built their own Arrow implementation.\nOne of the main advantages of building a data library on Arrow is interoperability. Arrow has been designed to standardize the in-memory data format used across libraries, and it is already used by a number of important libraries and databases, as you can see below.\n\nThis interoperability speeds up performance as it bypasses the need to convert data into a different format to pass it between different steps of the data pipeline (in other words, it avoids the need to serialize and deserialize the data). It is also more memory-efficient, as two processes can share the same data without needing to make a copy. As serialization/deserialization is estimated to represent 80–90% of the computing costs in data workflows, Arrow’s common data format lends Polars significant performance gains.\nArrow also has built-in support for a wider range of data types than pandas. As pandas is based on NumPy, it is excellent at handling integer and float columns, but struggles with other data types. In contrast, Arrow has sophisticated support for datetime, boolean, binary, and even complex column types, such as those containing lists. In addition, Arrow is able to natively handle missing data, which requires a workaround in NumPy.\nFinally, Arrow uses columnar data storage, which means that, regardless of the data type, all columns are stored in a continuous block of memory. This not only makes parallelism easier, but also makes data retrieval faster.\nQuery optimization\nOne of the other cores of Polars’ performance is how it evaluates code. Pandas, by default, uses eager execution, carrying out operations in the order you’ve written them. In contrast, Polars has the ability to do both eager and lazy execution, where a query optimizer will evaluate all of the required operations and map out the most efficient way of executing the code. This can include, among other things, rewriting the execution order of operations or dropping redundant calculations. Take, for example, the following expression to get the mean of column Number1 for each of the categories “A” and “B” in Category.\n(\ndf\n.groupby(by = \"Category\").agg(pl.col(\"Number1\").mean())\n.filter(pl.col(\"Category\").is_in([\"A\", \"B\"]))\n)\nIf this expression is eagerly executed, the groupby operation will be unnecessarily performed for the whole DataFrame, and then filtered by Category. With lazy execution, the DataFrame can be filtered and groupby performed on only the required data.\nExpressive API\nFinally, Polars has an extremely expressive API, meaning that basically any operation you want to perform can be expressed as a Polars method. In contrast, more complex operations in pandas often need to be passed to the apply method as a lambda expression. The problem with the apply method is that it loops over the rows of the DataFrame, sequentially executing the operation on each one. Being able to use built-in methods allows you to work on a columnar level and take advantage of another form of parallelism called SIMD.\nWhen should you stick with pandas?\nAll of this sounds so amazing that you’re probably wondering why you would even bother with pandas anymore. Not so fast! While Polars is superb for doing extremely efficient data transformations, it is currently not the optimal choice for data exploration or for use as part of machine learning pipelines. These are areas where pandas continues to shine.\nOne of the reasons for this is that while Polars has great interoperability with other packages using Arrow, it is not yet compatible with most of the Python data visualization packages nor machine learning libraries such as scikit-learn and PyTorch. The only exception is Plotly, which allows you to create charts directly from Polars DataFrames.\nA solution that is being discussed is using the Python dataframe interchange protocol in these packages to allow them to support a range of dataframe libraries, which would mean that data science and machine learning workflows would no longer be bottlenecked by pandas. However, this is a relatively new idea, and it will take time for these projects to implement.\nTooling for Polars and pandas\nAfter all of this, I am sure you are eager to try Polars yourself! PyCharm Professional for Data Science offers excellent tooling for working with both pandas and Polars in Jupyter notebooks. In particular, pandas and Polars DataFrames are displayed with interactive functionality, which makes exploring your data much quicker and more comfortable.\nSome of my favorite features include the ability to scroll through all rows and columns of the DataFrame without truncation, get aggregations of DataFrame values in one click, and export the DataFrame in a huge range of formats (including Markdown!).\nIf you’re not yet using PyCharm, you can try it with a 30-day trial by following the link below.\n      \n        Start your PyCharm Pro free trial",
        "dc:creator": "Evgenia Verbina",
        "content": "If you’ve been keeping up with the advances in Python dataframes in the past year, you couldn’t help hearing about Polars, the powerful dataframe library designed for working with large datasets. Unlike other libraries for working with large datasets, such as Spark, Dask, and Ray, Polars is designed to be used on a single machine, [&#8230;]",
        "contentSnippet": "If you’ve been keeping up with the advances in Python dataframes in the past year, you couldn’t help hearing about Polars, the powerful dataframe library designed for working with large datasets. Unlike other libraries for working with large datasets, such as Spark, Dask, and Ray, Polars is designed to be used on a single machine, […]",
        "guid": "https://blog.jetbrains.com/?post_type=pycharm&p=490604",
        "categories": [
          "data-science",
          "pandas",
          "polars"
        ],
        "isoDate": "2024-07-04T13:58:03.000Z"
      },
      {
        "creator": "Alena Guzharina",
        "title": "Data Science with GenAI is Revolutionizing Investment Management",
        "link": "https://blog.jetbrains.com/datalore/2024/07/04/data-science-with-genai-is-revolutionizing-investment-management/",
        "pubDate": "Thu, 04 Jul 2024 09:52:03 +0000",
        "content:encodedSnippet": "What is the formula for success in the investment management industry? Behind every successful firm is a unique combination of domain expertise, cutting-edge technology, relationship management, rapid adaptability, and competition. While data science driven by generative AI (genAI) cannot turn your employees into domain experts overnight, nor can it single-handedly eliminate the competition, it can significantly improve the other three areas. \n\n\n\n\nIn this post we’ll discuss how AI-driven data science can accelerate investment strategy implementation, enhance client relationships, and make investment management firms more agile. \n1. A Disruptive Technology for Faster Strategy Implementation\nDeveloping and implementing investment strategies quickly can be the difference between seizing an opportunity and missing it. GenAI-driven data science platforms enable people in areas like quantitative analysis, data science, portfolio management, and financial engineering to automate repetitive coding tasks like the following:\nData retrieval from financial APIs and corporate SQL data warehouses\nData processing and cleaning\nExploratory data analysis and visualization\nAlgorithm prototyping, backtesting, and future-proofing\n\n\n\n\nHow does this work? One of the most impactful capabilities of generative AI is its power to translate human language into code. From one paragraph of human language, AI can generate up to a hundred lines of Python, SQL, or R code – the key programming languages of data science for investment management workflows. \nFurthermore, if data professionals encounter a code error in the research process, they can use generative AI tools to fix it in a few seconds, rather than spending hours on research and debugging.\nOne platform that helps investment management companies reduce time-to-market of strategy implementation is Datalore – an AI-driven, company-wide data science platform created by JetBrains. It enables everyone from data scientists to marketing managers to easily gain insights from data, make mature, data-driven decisions, and present them with ease through interactive reports.\n“Datalore’s streamlined workflow allowed us to go from strategy prototyping to testing and deployment with ease.”\n\n            \nDr. Steffen Möllenhoff \n                                                                Managing Partner at neXDos\n                                    \nSee Datalore AI in action for streamlining trading strategy backtesting, portfolio optimization, and risk modeling.\n2. Enhancing Relationship Management Through Democratization of Data Science\nBuilding strong relationships with clients and stakeholders is foundational to success. Effective relationship management requires deep insights and personalized strategies, which can be achieved through advanced data analysis. Historically, the domain of data science has been somewhat exclusive, often requiring specialized knowledge in coding and data manipulation. Generative AI is breaking down these barriers, enabling more domain experts with little to no coding skills to experiment with and develop investment strategies.\n“Our partners are changing. It’s really no longer just a classic business person who is sitting at a desk and working. They are becoming what we’re calling ‘citizen developers’. They need autonomy, collaboration, and to work in a very safe way. We knew we needed a solution that allows them to do that, and spreadsheets were not a good tool for that.”\n\n            \nSteven Skarupa\n                                                                Enterprise Architect at Venerable\n                                    \nWhether it is a client relationship manager, financial advisor, or customer success representative, they are now able to complete data analysis in AI-powered Jupyter notebooks. Little to no coding experience is required – with pre-configured data integrations, no-code chart builders, support for SQL, and AI suggestions for next steps, data science is more accessible than ever. This democratization means that these customer-facing experts can directly engage in data-driven decision-making and strategy development, leading to more effective and personalized interactions with clients. \n“Through the development of internal services and tailored data reports, our Customer Success team delivered blazing-fast insights, greatly benefiting our clients. This accomplishment stands out as one of the biggest wins for our team in the past year.”\n\n            \nRegeane\n                                                                Product Manager at Ometria\n                                    \nSee how financial data analysis and visualization can be completed with no coding experience thanks to Datalore AI.\n3. Adaptability for Faster Feedback Loops\nAdaptability in investment management means being able to quickly interpret and act on data insights. Previously, we talked about the ability of generative AI to generate code based on specific requests. However, in a quickly changing market, there may be situations where an investment manager needs to complete an entire research project based on a hypothesis alone  without knowing the exact steps required for testing and validation. AI-driven data science now offers solutions for these cases. People are starting to call these solutions “AI Autopilots” or “AI Co-pilots”\nTake, for instance, Datalore Autopilot, which provides next-step suggestions tailored to specific research goals. All you need to start with is an idea. All of the repetitive coding work will be completed by Datalore AI, allowing you to focus on extracting insights from the data. These AI-driven capabilities allow investment management firms to stay agile and responsive, ensuring they can adapt swiftly to the ever-changing market environment.\n\n\n\n\nExcited to see how your investment management company could benefit from GenAI-powered data science? Schedule a Datalore demo call with our experts.\n      \n      See Datalore in Action",
        "dc:creator": "Alena Guzharina",
        "content": "What is the formula for success in the investment management industry? Behind every successful firm is a unique combination of domain expertise, cutting-edge technology, relationship management, rapid adaptability, and competition. While data science driven by generative AI (genAI) cannot turn your employees into domain experts overnight, nor can it single-handedly eliminate the competition, it can [&#8230;]",
        "contentSnippet": "What is the formula for success in the investment management industry? Behind every successful firm is a unique combination of domain expertise, cutting-edge technology, relationship management, rapid adaptability, and competition. While data science driven by generative AI (genAI) cannot turn your employees into domain experts overnight, nor can it single-handedly eliminate the competition, it can […]",
        "guid": "https://blog.jetbrains.com/?post_type=datalore&p=490186",
        "categories": [
          "datalore-ai",
          "python-for-finance"
        ],
        "isoDate": "2024-07-04T09:52:03.000Z"
      },
      {
        "creator": "Maria Kosukhina",
        "title": "IntelliJ IDEA 2024.2 EAP 8: Faster Time to Code, Language-Aware Sticky Lines, and Tags in The Version Control Widget",
        "link": "https://blog.jetbrains.com/idea/2024/07/intellij-idea-2024-2-eap-8/",
        "pubDate": "Wed, 03 Jul 2024 14:32:11 +0000",
        "content:encodedSnippet": "IntelliJ IDEA 2024.2 EAP 8 is now live!\nYou can download the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu.\nDownload IntelliJ IDEA 2024.2 EAP 8\nThe Early Access Program for v2024.2 is nearing its end, but there’s still time to participate and preview the latest improvements for the upcoming major release. To review all of the updates announced over the past several weeks, browse the IntelliJ IDEA 2024.2 EAP section of our blog. \nWe also have some significant new enhancements to share, so take a look at the latest features!\nUser experience\nFaster time to code\nFor the 2024.2 release, we’ve implemented serial updates to enhance the startup experience, enabling users to start coding significantly faster than before.\nWait times have been reduced thanks to an upgrade which makes the IDE functional even when the project model isn’t fully complete, i.e. when modules are known but some libraries or dependencies are missing.\nKey functionalities are now available right away. While indexing is in progress, the IDE provides code highlighting and completion, intention actions, test launching, active gutter markers for running applications or using Spring, Micronaut, and Quarkus beans, Lombok support, and more.\n\n\n\n\nLanguage-specific settings for sticky lines \nYou can now set sticky lines more precisely and choose the languages you want them to appear for. You can tailor the feature to your preferences either in Settings/Preferences | Editor | General | Sticky Lines, or by calling the context menu with a right-click on a sticky line in the editor.  \n\n\n\n\n\n\n\n\nVersion control systems\nTags in the Version Control widget\nWe’ve added a new Tags node to the Version Control widget, making it easier to check out tags. It is now shown by default, but if you prefer to hide the list of tags, simply click the gear icon and uncheck the Show Tags option.\n\n\n\n\nLocal History action for multiple files or directories \nTo simplify reviewing changes in complex projects, we’ve updated the Local History action to be available for several files or directories at once. In the Project tool window, select multiple files and/or folders and select Local History | Show History. The IDE will then display a Local History popup where you can conveniently view the history of changes for the selected files or directories. \n\n\n\n\nBuild tools  \nIncremental Maven project re-sync\nWe’ve updated the re-sync workflow for Maven projects to make it faster. After the initial full sync, the IDE now detects changes in specific parts of the project and only re-syncs those parts rather than the entire project.\n\n\n\n\nThese are the most notable updates for this week! To get the full scoop on the latest changes, refer to the release notes. \nWe look forward to your feedback on the latest improvements. Share your thoughts in the comments below or on X. If you spot a bug, please let us know by submitting a report to our issue tracker.\nHappy developing!",
        "dc:creator": "Maria Kosukhina",
        "content": "IntelliJ IDEA 2024.2 EAP 8 is now live! You can download the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu. Download IntelliJ IDEA 2024.2 EAP 8 The Early Access Program for v2024.2 is nearing its end, but there&#8217;s still time to participate and preview the latest improvements for [&#8230;]",
        "contentSnippet": "IntelliJ IDEA 2024.2 EAP 8 is now live! You can download the latest build from our website, through the free Toolbox App, or via snaps for Ubuntu. Download IntelliJ IDEA 2024.2 EAP 8 The Early Access Program for v2024.2 is nearing its end, but there’s still time to participate and preview the latest improvements for […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=489134",
        "categories": [
          "eap",
          "2024-2-eap",
          "intellij-idea-2024-2",
          "intellij-idea-2024-2-eap"
        ],
        "isoDate": "2024-07-03T14:32:11.000Z"
      },
      {
        "creator": "Daniela Bentrup",
        "title": "Fleet 1.37 Is Out! Introducing AI Code Completion for Java, Folding Imports by Default, Soft Wraps for Markdown and Asciidoc, and Other Enhancements",
        "link": "https://blog.jetbrains.com/fleet/2024/07/fleet-1-37-is-out-introducing-ai-code-completion-java-folding-imports-by-default-soft-wraps-markdown-asciidoc-other-enhancements/",
        "pubDate": "Wed, 03 Jul 2024 12:45:27 +0000",
        "content:encodedSnippet": "Fleet 1.37 is now available! Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this latest version using the Toolbox App.\nLet’s take a closer look at this update’s highlights.\nDownload Fleet 1.37\nNew features\nWe’re excited to introduce AI code completion for Java! Fleet already supported AI-powered multi-line code completion for Python, Kotlin, and Terraform. Starting with Fleet 1.37, multi-line code completion for Java is now supported as well.\n\n\n\n\n\nIn this update, AI Assistant has received another improvement. We’ve added the ability to create files from code snippets that have been generated in the AI chat. \n\n\n\n\n\nImports are now folded automatically for Java, Kotlin, and Go. This feature will soon also be made available for Python in later versions.\nIf you want a quick documentation popup to be displayed alongside the completion popup, just press ⇧⌘I / Ctrl+Shift+I to enable/disable this functionality.\n\n\n\n\n\nSoft wraps improve readability on different devices and screen sizes. When a line exceeds the width of the window, soft wrapping logically wraps the text onto the next line, ensuring the text fits within the available space so you no longer need to scroll horizontally. Soft wraps are now enabled by default for Markdown and Asciidoc files in Fleet. You can go to View | Disable Soft Wraps in Current Editor to change the setting.\nIt can be helpful to open multiple Logcat tabs if you want to use different queries for every panel, set different filters or log levels, or check logs for different devices. With Fleet 1.37, you can now open a new Logcat tab using the Tools popup or by selecting New Logcat Tool in the Actions popup. You can also select Jump to Logcat Tool which will open the first Logcat tab that has been opened via Tools. Additionally, using the link in the Run dialog will open a new tab if the link hasn’t been used before.\nImprovements\nNow an error message will be shown when a file can’t be opened.\nSwift 5.10 allows the creation of nested protocols within non-generic contexts. That means protocols can be placed inside classes, enums, actors, structs, or even functions. With Fleet 1.37, the use of protocols nested inside non-generic contexts is now supported.\nWe’ve also made multiple improvements to our Compose Multiplatform preview functionality. Previews are now available for Kotlin Multiplatform projects with more than one module. The preview feature is also supported for Gradle modules on the second hierarchy level or lower. Additionally, previews are also now available when working with resources in Compose Multiplatform.\nFleet already supported the shortcut ⌃G⌃A / Ctrl+Shift+G / Ctrl+Shift+A to toggle Git Blame. If you prefer to navigate using your mouse, starting with Fleet 1.37, you can now open a context menu  by right-clicking to Close Git Blame or Show Diff.\n\n\n\nBug fixes\nWe’ve also fixed several bugs:\nCommits are no longer shown after being synced successfully [FL-26674].\nThe cursor now returns to the prompt line after scrolling up in the terminal [FL-23536].\nFont rendering has been improved [FL-22378].\nFiles opened via the terminal no longer open in a new Fleet window [FL-14039].\nSee the full release notes for more details about the Fleet 1.37 update. \nPlease report any problems you encounter to our issue tracker, and stay tuned for further exciting announcements.\nP.S. Support for plugins and plugin APIs is a work in progress, but the list of installed (bundled) plugins is now available and visible to everyone. To view it, simply select Plugins in the Actions menu. \nJoin the JetBrains Tech Insights Lab to participate in surveys, interviews, and UX studies, and help us make JetBrains Fleet better!",
        "dc:creator": "Daniela Bentrup",
        "content": "Fleet 1.37 is now available! Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this latest version using the Toolbox App. Let’s take a closer look at this update’s highlights. Download Fleet 1.37 New features Improvements Bug fixes We&#8217;ve also fixed several bugs: See the [&#8230;]",
        "contentSnippet": "Fleet 1.37 is now available! Explore our latest release, which introduces many new features designed to improve your development experience. You can update to this latest version using the Toolbox App. Let’s take a closer look at this update’s highlights. Download Fleet 1.37 New features Improvements Bug fixes We’ve also fixed several bugs: See the […]",
        "guid": "https://blog.jetbrains.com/?post_type=fleet&p=486809",
        "categories": [
          "news",
          "releases"
        ],
        "isoDate": "2024-07-03T12:45:27.000Z"
      },
      {
        "creator": "Regina Muradova",
        "title": "Online Coding Workshop on Python",
        "link": "https://blog.jetbrains.com/education/2024/07/03/online-coding-workshop-on-python/",
        "pubDate": "Wed, 03 Jul 2024 12:15:47 +0000",
        "content:encodedSnippet": "Struggling to get started with Python? Join us on our Discord server for a free beginner-friendly online workshop, tailored to those with no or basic programming experience.\nIn this live interactive session, you’ll see Python in action. We’ll cover essential concepts from our most popular course, Introduction to Python, and provide hands-on experience using integrated development environments (IDEs). Get a real feel for coding in Python through practical, real-world scenarios.\nIn particular, you’ll learn and practice:\nArithmetic operators\nString length\nList items\nElse with loops (2)\nExecuting modules and scripts\n\n\n\n\nWhen: Thursday, July 11, 2024, at 2:00 PM UTC (check other timezones).\nNo registration is needed. Just join our Discord server and be ready to learn.\nHow to get started\nBefore you begin, make sure you have PyCharm installed. Download either PyСharm Community Edition (completely free) or PyСharm Professional (available with a 30-day free trial).\nTo participate in the workshop, please install the JetBrains Academy plugin in your PyCharm IDE and start the Introduction to Python course. Here are video instructions to help you:\nHow to install the IDE and the JetBrains Academy plugin\nHow to start a course on JetBrains Marketplace\n\n\n\n\nIf you prefer text instructions, check out our learner start guide.\nThe course is free for everyone, and, as an academic student, you can get a free license for any JetBrains IDE.\nQ&A session\nAt the end, we’ll hold a Q&A session where you can ask any questions you might have about Python, learning computer science, or JetBrains Academy in general. \nJoin us\nDon’t miss this opportunity to kickstart your Python journey or sharpen your existing skills in a supportive community environment. Mark your calendars and join us on Discord.\nPlease note, there will be no recording of this workshop, but don’t worry – we have more workshops planned for the future.\nSounds interesting. I’m in\n                                                    \nMeet the host of the workshop\nIgor Gerasimov, Project Lead of the Educational Content team at JetBrains Academy\nIgor has over nine years of experience developing digital interactive learning materials for natural sciences, math, and computer science. Ever since obtaining his bachelor’s degree in physics and bioengineering from SPbSPU (2015), Igor has been studying the modern approach to Learning Science and Instructional Design in search of a solution to distributed, automated, and community-driven education.\nHappy learning!\nYour JetBrains Academy team",
        "dc:creator": "Regina Muradova",
        "content": "Struggling to get started with Python? Join us on our Discord server for a free beginner-friendly online workshop, tailored to those with no or basic programming experience. In this live interactive session, you&#8217;ll see Python in action. We’ll cover essential concepts from our most popular course, Introduction to Python, and provide hands-on experience using integrated [&#8230;]",
        "contentSnippet": "Struggling to get started with Python? Join us on our Discord server for a free beginner-friendly online workshop, tailored to those with no or basic programming experience. In this live interactive session, you’ll see Python in action. We’ll cover essential concepts from our most popular course, Introduction to Python, and provide hands-on experience using integrated […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=488481",
        "categories": [
          "jetbrains-academy",
          "pycharm",
          "python",
          "online-learning",
          "workshop"
        ],
        "isoDate": "2024-07-03T12:15:47.000Z"
      },
      {
        "creator": "Valerie Kuzmina",
        "title": "Qodana Self-Hosted Is Out – Get 40% OFF This Static Code Analysis Team Tool",
        "link": "https://blog.jetbrains.com/qodana/2024/07/qodana-self-hosted-is-out-get-40-off-this-static-code-analysis-team-tool/",
        "pubDate": "Wed, 03 Jul 2024 09:35:13 +0000",
        "content:encodedSnippet": "Most developers use IDEs and code editors for local code quality analysis, but only 33% of developers use external static code analysis tools for every CI pipeline commit. Another 33% occasionally use automated analysis technology.\nAs reported by our customers, the low adoption of static code analysis tools among developers poses a problem for companies, leading to risks in product quality. Server-side analysis results are either ignored or, at best, begrudgingly tolerated. Here are just a few reasons why:\nToo many false positives\nConflicts with IDE inspections \nMisaligned code quality guidelines\nConvoluted setup\nInability to quickly fix issues\nOutdated UI\n\n\n\n\nAll these factors contribute to a suboptimal developer experience.\nWith Qodana, we are on a mission to create an exceptional experience for development teams, making the entire journey – from setup to result analysis and fixes – easier and more enjoyable, increasing the adoption of server-side analysis. \nSince launching the cloud version of Qodana last summer, we kept receiving requests for a self-hosted version. \nFollowing successful Beta tests with some of our clients, we’re now launching the first release of Qodana Self-Hosted, allowing you to manage, maintain, and upgrade Qodana entirely on your end.\nBetter yet, if you request a demo by August 31 and decide to purchase, you’ll get 40% OFF Qodana for a year!\nRequest a Qodana demo – get 40% OFF\n\n\n\nWhy choose Qodana Self-Hosted over the cloud version?\nQodana is a code quality platform fully based on the static code analysis engine of JetBrains IDEs. It supports native integration with our IDEs and VS Code, allows you to build quality gates in any CI environment, and helps easily enforce coding standards enterprise-wide.\nWith the self-hosted version, you’ll get complete control over your analysis reports, user accounts, and other sensitive data, as well as Qodana maintenance and upgrades. Namely:\nProtection of proprietary information\nYour code never leaves your infrastructure, so if you are required to keep your project’s code isolated, Qodana Self-Hosted is the way to go. \nMitigation of compliance risks\nFor organizations in industries with strict regulatory requirements, a self-hosted solution can offer the necessary control over data storage and processing to comply with regulations, including national data sovereignty laws.\nBetter performance\nA self-hosted solution can be optimized for the specific performance needs of your organization, potentially offering better performance than a shared cloud environment.\nHow is Qodana Self-Hosted distributed and priced?\nIn the initial release, we offer hosting on your own Amazon Web Services (AWS) account.\nPricing starts at $40 per developer per month, with a minimum of 10 developers. Volume discounts are also available. For more information, please contact us through the demo request form.\nRequest a Qodana demo – get 40% OFF\nFeature parity with Qodana Ultimate Plus\nQodana Self-Hosted provides a complete suite of features that make static code analysis enjoyable for developers and effective for organizations of any size. We suggest getting full feature parity with our most advanced cloud plan, Qodana Ultimate Plus.\nIssues overview\nQodana provides reports with a signature sunburst diagram for clear visualization of code quality. You can view insights at both the project and organizational levels. More advanced dashboarding features are currently being developed.\nIDE integrations\nQodana is bundled with JetBrains IDEs out of the box and also offers integration with VS Code. You can open analysis results and fix issues in your preferred IDE, as well as set up Qodana and connect to the CI system right in JetBrains IDEs.\n\n\n\n\nCI/CD integrations\nUnlike other tools on the market, Qodana is fully CI-agnostic. You can build quality gates and minimize the need for manual intervention when maintaining the highest code quality standards. \nQuick-fixes \nQodana can automatically create a pull request with the quick-fixes applied, so you can easily and conveniently review and accept them.\nLicense audits\nThanks to Qodana’s comprehensive license audits, you can identify licenses that are incompatible with your project and access the results from a sleek interface. It can also automate license analysis by adding a related step or quality gate to your CI/CD pipeline.\n\n\n\n\nBaseline\nPut less critical (or all detected) issues to the baseline to stop receiving notifications about them. This way, you can focus on the issues that matter most to you and your team.\nFlexInspect\nWith Qodana’s FlexInspect, you can create custom code inspections for any rule you want to enforce in your code or repository. You can then run these inspections against your project in IntelliJ IDEA or by using Qodana in your CI/CD pipeline.\n\n\n\n\nVulnerability checker\nQodana identifies critical security vulnerabilities in your codebase. You can also customize the quality gate to fail when vulnerabilities arise. \nTake Qodana Self-Hosted for a test drive\nWith Qodana Self-Hosted, we aim for a tailored approach. Request a demo and one of our engineers will reach out to you and help set it up for your infrastructure. Please be ready to use your AWS account or set up a new one if needed.\nRequest a Qodana demo – get 40% OFF",
        "dc:creator": "Valerie Kuzmina",
        "content": "Most developers use IDEs and code editors for local code quality analysis, but only 33% of developers use external static code analysis tools for every CI pipeline commit. Another 33% occasionally use automated analysis technology. As reported by our customers, the low adoption of static code analysis tools among developers poses a problem for companies, [&#8230;]",
        "contentSnippet": "Most developers use IDEs and code editors for local code quality analysis, but only 33% of developers use external static code analysis tools for every CI pipeline commit. Another 33% occasionally use automated analysis technology. As reported by our customers, the low adoption of static code analysis tools among developers poses a problem for companies, […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=485080",
        "categories": [
          "code-review",
          "new-products",
          "news",
          "qodana",
          "release"
        ],
        "isoDate": "2024-07-03T09:35:13.000Z"
      },
      {
        "creator": "Olga Bedrina",
        "title": "How to Build a CI/CD Pipeline for Android Projects",
        "link": "https://blog.jetbrains.com/teamcity/2024/07/cicd-for-android/",
        "pubDate": "Tue, 02 Jul 2024 17:12:42 +0000",
        "content:encodedSnippet": "This is a guest article by Kumar Harsh, draft.dev.\nIf you ship Android app releases frequently, you probably already understand the value of well-defined build, test, and deployment workflows. Without resilient, automated DevOps workflows in place, it can be difficult to maintain a high release velocity. Automating these through continuous integration and continuous deployment (CI/CD) can make your life a lot easier and allow you to detect bugs earlier and release faster.\nJetBrains TeamCity is a CI/CD platform for building robust pipelines. It offers seamless integration with popular Android development tools and features a user-friendly interface for configuring build and test stages.\nThis article will show you how to set up a CI/CD pipeline for your Android project using JetBrains TeamCity. You’ll explore the key components of Android CI/CD pipelines and dive into configuring a few sample pipelines with TeamCity.\nUnderstanding the Android CI/CD pipeline\nAn effective CI/CD pipeline for Android development contains all of the steps included in a standard DevOps pipeline and augments it with additional processes like artifact signing and auto-deployment to internal tracks on the Google Play Store. Here is a quick overview of all the steps involved in a typical Android CI/CD pipeline:\n1. Code checkout and version control integration: The pipeline begins by fetching the latest code changes from your version control system (VCS), such as Git. If you’re using TeamCity, you’ll benefit from its integration with popular version control tools and automatic triggering of pipelines upon code commits or merges.\n2. Build automation with Gradle: Gradle, the standard build tool for Android projects, takes center stage in this step. TeamCity executes Gradle commands to compile your code, assemble resources, and generate build artifacts. TeamCity’s build runners provide compatibility with different Gradle versions and customizable environments for build configurations.\n3. Unit and integration testing for multiple Android versions/platforms: The next step involves running unit tests that verify individual code modules and integration tests (including UI tests) that check how different components interact. TeamCity allows you to configure multiple test runners and frameworks (e.g. JUnit, Espresso) and execute tests targeting various Android versions and platforms using emulators or device labs.\n4. Static code analysis (featuring JetBrains Qodana) and code coverage reporting: Static code analysis helps identify potential bugs, security vulnerabilities, and coding style inconsistencies early on. TeamCity integrates with JetBrains Qodana, a static code analysis tool that offers features like code smell detection, complex code analysis, and integration with various programming languages, ensuring comprehensive code quality checks. Additionally, TeamCity can generate code coverage reports that indicate which parts of your code are exercised by unit tests. This helps developers focus on areas with weak coverage.\n5. Artifact generation and signing (APKs and AABs): After successful builds and tests, the next step involves creating deployable artifacts. For Android apps, this typically involves generating signed Android Package Kits (APKs) or Android App Bundles (AABs). TeamCity allows you to automate the signing process within the pipeline using build steps.\n6. Deployment to internal testing and production environments (Google Play, beta channels): CI/CD pipelines can automate app deployment to various environments. TeamCity allows configuration for deploying to internal testing platforms or directly to production channels on Google Play.\n7. Continuous monitoring and feedback loops: A robust CI/CD pipeline doesn’t end with deployment. TeamCity integrates with monitoring tools, enabling you to track app performance, identify crashes, and gather user feedback. This feedback loop allows developers to react quickly to issues and continuously improve their app’s quality.\nBuilding the pipeline with TeamCity\nNow that you’ve explored the general CI/CD pipeline structure, let’s dive into building one using TeamCity. The following sections guide you through setting up TeamCity, creating build configurations tailored to your Android project, integrating automated testing, and finally, configuring packaging and deployment of your app.\nTo keep things simple, this tutorial uses the cloud-hosted version of TeamCity, which comes with a fourteen-day free trial. You can sign up for it using your GitHub, GitLab, Bitbucket, or Google Account, or by using the old-school combination of your email address and password. Make sure to activate your trial or subscription before moving to the next step. \nHowever, you can also use TeamCity Cloud with self-hosted build agents or even TeamCity On-Premises for the purposes of this tutorial. Keep in mind that using self-hosted build agents or TeamCity On-Premises would require you to install Android SDK on your agents separately.\nSetting up TeamCity\nOnce you have access to a TeamCity Cloud instance, here’s what your initial view will look like:\nTeamCity Cloud dashboard\n\n\n\nTo get started with an Android project, click Create project… in the middle of the page. Then, you’ll be asked to provide a link to the source code of your project. If you signed up using a Git hosting provider (such as GitHub or Bitbucket Cloud), feel free to check out its corresponding section and use its dedicated project creation process. \nHowever, if you have the repository URL, you can directly use it in the From a repository URL tab. TeamCity will automatically detect the Git hosting provider and pull in your project from there.\nCreate Project page\n\n\n\nIf you don’t have an Android project at hand, you can use the following repository to follow the tutorial:\nbash\nhttps://github.com/krharsh17/android-app-teamcity\nIf the repository you’re trying to access is private or secured using a username and password combination, you can provide it here so that TeamCity can access it. Once you’ve entered the repository URL (and any additional details as needed), click Proceed.\nOn the next page, TeamCity Cloud will verify the connection to the VCS repository. Once it’s successful, TeamCity will pull in some metadata related to the project, such as its name, its default branch, etc. You can modify these values before they are stored in the TeamCity project.\nConnection verified when creating project\n\n\n\nOnce you’re happy with the information on this page, click the Proceed button. TeamCity will then begin to automatically detect any build steps applicable to the repository based on the available configuration files in the repository. Since this repository has Gradle-based configuration files, it will automatically suggest a set of Gradle tasks you can use to build the app from the repository (in this case, clean and build).\nCheck the box next to the Gradle build step, and click Use selected:\nSelecting auto-suggested build steps\n\n\n\nOnce done, you’ll receive a small banner saying you can now run the first build in the project. Click Run at the top right to start the first build:\nStarting your first build\n\n\n\nOnce you click the button, a build will be queued, which will then wait for a build agent to become available. You can click Projects in the top navigation pane and choose the running build to view its properties and status:\nRunning build details\n\n\n\nThe build will be completed in about 5–6 minutes. Congratulations! You’ve set up your first Android CI/CD pipeline with TeamCity. Also, since you used a VCS repository URL to set up this pipeline, it’s been configured to automatically poll the repository URL at fixed intervals to see if any new changes have been pushed to the repo. If new changes are found, the pipeline will automatically pull the latest commit and run the build again.\nYou can further enhance this by setting up platform-specific webhooks. For instance, the repository you just set up is hosted on GitHub. TeamCity allows you to conveniently install a GitHub webhook so that GitHub automatically sends out a notification to TeamCity every time there is some activity on the repo:\nInstalling GitHub webhook\n\n\n\nYou can go ahead and do that if you’d like to. However, it’s not necessary for the purposes of this tutorial.\nConfiguring build artifacts\nThe repository you have set up includes two flavors (Free and Paid). For both of these flavors, there are two build variants (debug and release). This means that the result of a build task will include four binary files, one for each of the possible combinations of flavors and variants. Let’s configure the pipeline to extract and make these artifacts available for access after the pipeline has finished running.\nTo do that, click Projects in the top navigation pane and click Build under Android App Teamcity to open the details page for the build configuration titled Build:\nNavigating to build configuration page\n\n\n\nHere, click the Edit configuration button in the top right-hand corner of the screen:\nEditing your build configuration\n\n\n\nThis is where you can configure the general settings for your build configuration. You’ll notice there’s a field titled Artifact paths towards the bottom of the list. This is where you need to define the paths of the artifacts that you wish to extract and retain after the build finishes running:\nSetting artifact paths\n\n\n\nWhen you run the Gradle build task, the artifacts generated by Gradle are stored in app/build/outputs/apk. Therefore, you need to enter the following under Artifact paths:\napp/build/outputs/apk/*/*/* => output\nYou add /*/*/* after app/build/outputs/apk because the complete path of an APK binary generated after a build looks like this: app/build/outputs/apk/<flavor>/<variant>/app-<flavor>-<variant>-unsigned.apk.\nTo accommodate all possible values of <variant>, <flavor>, and binary file names, we’ve used the wildcard *. \n=> is a feature of Ant-style paths and is used to separate output and input directories. output is the name of the folder in which the final binaries will be stored.\nOnce you’ve added this, click the Save button at the bottom of the page. You’ll see a yellow banner saying your changes have been saved:\nSaving changes made to build configuration\n\n\n\nYou can now try running the pipeline again using the Run button at the top right of the page to view the generated artifacts after the build is completed:\nViewing the generated artifacts\n\n\n\nYou’ve now set up a pipeline that’s triggered every time a commit is pushed to the main branch of your repo. This pipeline generates unsigned build artifacts for all flavor-variant combinations in your project, runs unit tests, and makes the build artifacts available for viewing.\nNext, you’ll learn how to customize tests.\nCustomizing tests\nAs mentioned before, the Gradle task build also takes care of running unit tests on all generated build artifacts. However, there can be situations where you only want to run tests on a few variants of your app. In that case, you need to replace the clean build tasks with the appropriate tasks for your use case.\nFor instance, if you want to create an unsigned APK for the release variant of the free flavor of the app and run unit tests on it, you would replace clean build with assembleFreeRelease testFreeReleaseUnitTest. To do that, click on Projects in the top navigation pane and then click Build under Android App Teamcity. On the next page, click the Edit configuration button at the top right, just like you did in the previous step.\nYou should be on the General Settings page for the build configuration, which you accessed earlier to configure the artifacts path. On the left navigation pane, click Build Step: Gradle.\nNavigating to build settings\n\n\n\nThis will open the Build Steps page, where you can modify the build steps for this build configuration. Click Edit on the right side of the first build step (titled Gradle):\nEditing Gradle build step\n\n\n\nYou can now update the Gradle tasks field to change the tasks that will be executed as part of this build. Replace clean build with assembleFreeRelease testFreeReleaseUnitTest:\nUpdating Gradle tasks\n\n\n\nNow, click Save at the bottom. Once the changes are saved, click the Run button at the top right. This will trigger another run of this build configuration.\nOnce the build finishes running, you can take a look at the reports generated by TeamCity in the Tests tab on the build run details page:\nViewing test results\n\n\n\nFor each of the unit tests, you can view how long it took to run and if there was any stack trace left after the test was completed. You can also click the three dots on the far right of the test and select Show test history to compare the performance of the current run of the test with its past runs:\nComparing test run history\n\n\n\nYou can assign the investigation of a test to a team member and track its investigation history through TeamCity itself. If you’d like, you can also download the test results by clicking the Download link on the test overview page.\nThe number of tests in this repo is quite small, so the build run was completed in a few minutes. However, in a real-world project, there are usually hundreds, if not thousands, of unit tests. In such a situation, running all of these tests on the same runner agent one after another would take a significant amount of time. To solve this, you can use TeamCity’s parallel tests build feature.\nTeamCity is capable of parallelizing your test runs by splitting them over multiple build agents, helping you to minimize the overall time it takes to run all the tests. To set this up, click the Edit configuration button on the build run details page and click Build Features on the left navigation pane:\nNavigating to the Build Features page\n\n\n\nOn the Build Features page, click the + Add build feature button. In the dialog box that opens, choose Parallel tests in the dropdown menu:\nSearching for parallel tests\n\n\n\nYou need to enter the maximum number of batches for executing tests in parallel. Enter a value between 4 and 8 to get the maximum benefit from parallelization.\nSetting up parallel build batches\n\n\n\nOnce done, click the Save button. You can now try running tests for a repository that has a larger number of test cases to see the difference in performance for yourself!\nManaging multiple builds\nSince this app has multiple flavors and variants, it would make sense to make use of the matrix builds offered by TeamCity to speed up build pipelines by splitting each variant-flavor combination into its own run instance. Additionally, this also allows you to build specific combinations of the application without having to necessarily build all or just one variant-flavor combination.\nTo do this, you need to create a new build configuration. Click Projects in the top navigation pane and click Android App Teamcity. On the project details page, click the Edit project… button in the top right-hand corner:\nNavigating to project configuration\n\n\n\nOn the General Settings page, click the + Create build configuration button under the Build Configurations section:\nCreating a new build configuration\n\n\n\nThis will take you to the Create Build Configuration wizard. Enter the same repository URL as before (https://github.com/krharsh17/android-app-teamcity) in the Repository URL field and click Proceed:\nEntering repository URL\n\n\n\nSet the Build configuration name on the next page to Matrix Builds, and leave the default values in all other fields. Then, click the Proceed button:\nSetting build configuration details\n\n\n\nTeamCity will notify you that a similar VCS root has been found. Click the Use this button in this dialog box:\nChoosing an existing VCS root\n\n\n\nThis will ensure that TeamCity polls the VCS URL only once for both of these build configurations to avoid additional performance overhead.\nOnce the build configuration is complete, you should get a notification confirming it has been created:\nNew build configuration created\n\n\n\nThis time, you don’t need to set up the clean build Gradle tasks, so don’t check any boxes on this page. Instead, click the link above the table that says configure build steps manually.\nYou’ll be taken to the New Build Step page, where you can choose your preferred runner for the build step:\nSelecting a build runner\n\n\n\nChoose Gradle from this list. On the next page that opens, enter clean test%env.FLAVOR%%env.VARIANT% in the Gradle tasks field:\nEntering a Gradle task\n\n\n\nThis will ensure that the runner first cleans the build folders and then runs the test task for the flavor and variant provided by the environment variables. For example, for the release variant of the free app, the task would be called clean testFreeRelease.\nScroll down and click the Save button. You’ll then be taken back to the Build Steps page:\nNew build step added\n\n\n\nClick the + Add build step button and add another Gradle build step with the task assemble%env.FLAVOR%%env.VARIANT%. This step will generate build artifacts for the given flavor and variant of the app.\nOnce done, your Build Steps page should list the two Gradle-based build steps you created with a quick summary of the Gradle tasks that will be run as part of them:\nBuild steps updated\n\n\n\nNow, you need to do two more things: define the values for the two environment variables you used and configure artifact paths.\nYou already know how to set the artifact paths for a build configuration. For this build configuration, set the value of the Artifact paths field to app/build/outputs/apk/*/*/* => output, the same as for the previous one.\nTo set the matrix values for the flavor and variant fields, click Build Features on the left navigation pane. On the Build Features page, click the + Add build feature button and search for Matrix Build in the dropdown menu in the dialog box:\nSearching for Matrix Build on the Build Features page\n\n\n\nOnce you select the Matrix Build option from the dropdown list, you’ll be asked to provide parameters for the matrix build along with their values. Provide a parameter’s name as env.FLAVOR and its value as Free. Add another parameter, env.VARIANT, with two values: Release and Debug.\nConfiguring matrix build\n\n\n\nNow, click the Save button. This completes the setup of matrix builds on this pipeline. You can try testing it by clicking the Run button in the top right-hand corner of the page.\nYou’ll now be able to view the results of each run separately, along with separate build artifacts and test results.\nMatrix build results\n\n\n\nYou can click the Dependencies tab to view the build run details for each of the individual runs:\nViewing individual build run details\n\n\n\nAs you’ve seen before, you can explore each of these entries as a standalone, complete build run.\nPackaging and deployment\nOne key part of an Android CI/CD pipeline is pushing out the release binaries to Google Play so they can be published to users. You can use TeamCity and Gradle Play Publisher (GPP) to automate this as well.\nThere are a few prerequisites before you start this process:\n1. Make sure you have manually uploaded the first APK/AAB for your Android project to Google Play Console.\n2. You must have a valid signing configuration.\n3. You need to create a service account on Google Cloud Platform to be able to use the Google Play Developer APIs and retrieve its JSON credentials file. To do this, follow these steps before progressing to the next step.\nOnce you’ve completed the steps detailed in the link above, you need to install and configure GPP in your Android project. To do that, add the following line of code to the plugins block in the app-level build.gradle.kts file:\nkt\nid(\"com.github.triplet.play\") version \"3.9.1\"\nThen, at the root level of this file, add a new play {} block with the following content:\nkt\nplay {\n    serviceAccountCredentials.set(file(\"play_config.json\"))\n    track.set(\"internal\")\n    releaseStatus.set(ReleaseStatus.DRAFT)\n    defaultToAppBundles.set(true)\n}\nThis configures GPP to use the service account credentials from a file named play_config.json, set the track to internal and release status to DRAFT when pushing binaries to Play Console, and use app bundles in place of APKs by default.\nThis concludes the necessary configuration steps for your Android project. Commit and push these changes to the GitHub repository before proceeding.\nYou’ll now create a new build configuration for pushing binaries to Google Play in TeamCity. Follow the same steps as before to create a new build configuration. Set the first build step to use Gradle as the runner and bundleFreeRelease as the Gradle task to run:\nBuild steps\n\n\n\nAdd another step to this build configuration, but choose Command Line as the build runner this time:\nConfiguring a new command line build step\n\n\n\nThe new build step page for the command line runner will open. You need to provide the custom script that signs and publishes the app bundle to Google Play. Enter the following code in the Custom script field:\n# Create the keystore file from the environment variables\necho %env.ANDROID_KEYSTORE_FILE% > keystore.jks.b64\nbase64 -d -i keystore.jks.b64 > app/keystore.jks\n\n# Sign the AAB using the keystore and credentials retrieved from the environment variables\njarsigner \\\n-keystore app/keystore.jks \\\n-storepass %env.KEYSTORE_STORE_PASSWORD% \\\n-keypass %env.KEYSTORE_KEY_PASSWORD% \\\n-signedjar release.aab \\\napp/build/outputs/bundle/freeRelease/app-free-release.aab \\\n%env.KEYSTORE_KEY_ALIAS%\n\n# Create the GCP service account credentials file from the environment variables\necho %env.PLAY_CONFIG_JSON% > play_config.json.b64\nbase64 -d -i play_config.json.b64 > app/play_config.json\n\n# Use GPP to publish the app bundle\n./gradlew publishFreeBundle --artifact-dir release.aab\nThe code has inline comments to explain what each line does. Once done, click the Save button at the bottom of the page:\nConfiguring your command line script\n\n\n\nYou also need to define the following environment variables to provide the script with the right credentials to sign and publish the app:\nbash\nANDROID_KEYSTORE_FILE\nKEYSTORE_KEY_ALIAS\nKEYSTORE_KEY_PASSWORD\nKEYSTORE_STORE_PASSWORD\nPLAY_CONFIG_JSON\nClick Parameters in the left navigation pane to go to a page where you can define these environment variables. You’ll see that TeamCity has already populated the list of required variables on this page for you:\nViewing newly recognized environment variables\n\n\n\nFor KEYSTORE_KEY_ALIAS, KEYSTORE_KEY_PASSWORD, and KEYSTORE_STORE_PASSWORD, feel free to click Edit and provide their values in the resultant dialog boxes:\nConfiguring environment variables\n\n\n\nFor ANDROID_KEYSTORE_FILE and PLAY_CONFIG_JSON, you first need to convert the files into Base64 using a tool like openssl, and then paste the Base64-encoded contents into the value fields of these variables.\nThis sets up the pipeline to build and publish a signed release of the free version of your application. You can try clicking the Run button at the top right of the page to trigger a run and see it in action.\nOnce the run succeeds, you’ll see a BUILD SUCCESSFUL message in the logs:\nSuccessful build result logs\n\n\n\nAnd here is the latest release of your app, available on the internal track in Google Play Console and ready for you to edit and promote:\nPlay Console internal testing page\n\n\n\nYou’ll notice that the new release has the same developer-facing name (“2.0”) as the previous one. This is because no name was specified in GPP’s configurations. You can take a look at the GPP documentation to learn how to do that yourself.\nBest practices and tips\nNow that you can set up your own pipeline for Android using TeamCity, here are a few key best practices you can consider implementing to ensure your pipelines are efficient and fast:\n1. Version control and versioning practices: An effective CI/CD pipeline strongly depends on a robust version control system (VCS) like Git. Ensure your team adheres to clear versioning practices and implements a consistent branching strategy (e.g. feature branches). Develop customized pipelines for different branches to ensure you aren’t running unnecessary steps on WIP code, for instance.\n\n\n\n\n2. Clear pass/fail criteria and thresholds: Clearly define what constitutes a successful build and test run. This can involve setting thresholds for unit test coverage, getting a green light on other code checks, and so on. You should configure TeamCity with pass/fail criteria for each stage of the pipeline to ensure robust builds and encourage developers to write better code.\n3. Leveraging TeamCity notifications and alerts: TeamCity offers a detailed notification system to help notify users about pipeline events across web browsers, email, Slack, and IDEs. Make sure to set up alerts for build failures and critical test failures to keep your development team informed and allow for prompt issue resolution.\n4. Collaboration and feedback loop: An effective CI/CD pipeline fosters collaboration within your development team. You should use build pipeline visualization within TeamCity to provide developers with a clear picture of the entire build and test process. You can also use test and build investigations to assign and collaborate on investigations into why a build or a test failed, right within TeamCity. Also, encourage team members to review build failures and code coverage reports to identify areas for improvement. This can help develop a culture of code quality and continuous improvement.\n5. Security measures (code signing and access control): Make sure to configure your TeamCity instance with proper access controls, restricting access to sensitive information like signing keys to only those users who need access to the information. You should consider using a tool like HashiCorp Vault to manage and rotate all sensitive credentials that you might be using in your builds. You can check out a few other key security recommendations from TeamCity here.\nConclusion\nIn this article, you learned how to build and manage a detailed CI/CD pipeline for your Android development projects using JetBrains TeamCity. You explored the key stages of an Android CI/CD pipeline, from code checkout and version control integration to signing, deployment, and monitoring. You learned how TeamCity facilitates each stage and streamlines your development workflow. Toward the end, you also learned some key best practices to ensure your pipeline operates efficiently.\nBy using TeamCity to set up your Android pipelines, you can make your workflows significantly more efficient. This directly results in faster release cycles, fewer bugs, and ultimately, high-quality Android apps, delivered efficiently. So, take the first step towards a more streamlined development process, and start building your CI/CD pipeline today!",
        "dc:creator": "Olga Bedrina",
        "content": "This is a guest article by Kumar Harsh, draft.dev. If you ship Android app releases frequently, you probably already understand the value of well-defined build, test, and deployment workflows. Without resilient, automated DevOps workflows in place, it can be difficult to maintain a high release velocity. Automating these through continuous integration and continuous deployment (CI/CD) [&#8230;]",
        "contentSnippet": "This is a guest article by Kumar Harsh, draft.dev. If you ship Android app releases frequently, you probably already understand the value of well-defined build, test, and deployment workflows. Without resilient, automated DevOps workflows in place, it can be difficult to maintain a high release velocity. Automating these through continuous integration and continuous deployment (CI/CD) […]",
        "guid": "https://blog.jetbrains.com/?post_type=teamcity&p=489227",
        "categories": [
          "how-tos",
          "how-to",
          "news"
        ],
        "isoDate": "2024-07-02T17:12:42.000Z"
      },
      {
        "creator": "Aleksandra Krupskaya",
        "title": "Toolbox App 2.4 Gets a Refreshed UI Theme, Right-Click Context Menu, and Other Updates",
        "link": "https://blog.jetbrains.com/toolbox-app/2024/07/toolbox-app-2-4-gets-a-refreshed-ui-theme-right-click-context-menu-and-other-updates/",
        "pubDate": "Tue, 02 Jul 2024 16:05:50 +0000",
        "content:encodedSnippet": "Toolbox App 2.4 comes with a reworked UI theme, a new way to open the context menu for tools, and other updates.\nIf you’re using Gitee, check out the JetBrains Toolbox browser extension update as well.\nNew UI theme\nToolbox App 2.4 got a facelift! The navigation remains the same, but we’ve reworked the interface to look more modern and sleek. There’s also a new toggle called Use background effects in Settings that allows you to enable or disable the gradient. We hope you enjoy it!\n\n\n\n\nRight-click context menu\nThe context menu for tools is now easier to reach – just right-click on the name of a tool in the list to access tool update settings, an overview of the new features in the installed version, links to log files, and more. Right-clicking also works on the Projects and Services tabs. The three dots option is still there as well, in case you’re more comfortable with that.\nImproved error handling\nWe hope you never run into issues when using the Toolbox App, but if you do, we’re working on making error handling more user-friendly. In version 2.4, we’ve introduced an error screen containing a restart button, a link to log files, and a link to YouTrack where you can create an issue for our team to look into. When you create the issue, it’ll be pre-filled with the Toolbox App version, your OS, and the error stack trace. We always encourage you to describe your problem and attach log files, too.\nOption to quit on by right-clicking on macOS\nWe’ve implemented a small yet useful update for our macOS users. You can now quit the Toolbox App by right-clicking the Toolbox App icon in the menu bar and choosing the Quit action.\nGitee support in Chrome extension\nOn top of Toolbox App 2.4, we’ve also updated the JetBrains Toolbox browser extension for Chrome and Firefox. The extension allows you to clone and open projects in your JetBrains IDEs right from the GitHub, GitLab, and Bitbucket project pages.\nWe’ve added support for Gitee, a China-based hosting service. To clone a project and open it in your JetBrains IDE, make sure you have the browser extension installed. Then, go to the Gitee project page, and click on the Toolbox extension icon in the browser. The extension will give you a choice of JetBrains IDEs based on the languages specified in the project itself.\nEnterprise-focused updates\nToolbox App 2.4 has a few improvements for enterprise users.\nWe’ve introduced silent and headless installations of the Toolbox App, making it easier to manage the Toolbox App on user machines in bulk. You can now install and uninstall the Toolbox App on Windows using CLI commands. This option is not limited to IDE Services users – it’s available to anyone.\nThe onboarding wizard for IDE Services received a few updates to enhance the user experience along with a few bug fixes for the Toolbox App.\nDownload Toolbox App\n                                                    \nFor more information on the changes in this version, head over to the full release notes.\nYours,\nThe Toolbox App team",
        "dc:creator": "Aleksandra Krupskaya",
        "content": "Toolbox App 2.4 comes with a reworked UI theme, a new way to open the context menu for tools, and other updates. If you’re using Gitee, check out the JetBrains Toolbox browser extension update as well. New UI theme Toolbox App 2.4 got a facelift! The navigation remains the same, but we’ve reworked the interface [&#8230;]",
        "contentSnippet": "Toolbox App 2.4 comes with a reworked UI theme, a new way to open the context menu for tools, and other updates. If you’re using Gitee, check out the JetBrains Toolbox browser extension update as well. New UI theme Toolbox App 2.4 got a facelift! The navigation remains the same, but we’ve reworked the interface […]",
        "guid": "https://blog.jetbrains.com/?post_type=toolbox-app&p=488347",
        "categories": [
          "jetbrains-toolbox",
          "toolbox-app"
        ],
        "isoDate": "2024-07-02T16:05:50.000Z"
      },
      {
        "creator": "Khalid Abuhakmeh",
        "title": "How to use the Tasks View in JetBrains Rider",
        "link": "https://blog.jetbrains.com/dotnet/2024/07/02/how-to-use-the-tasks-view-in-jetbrains-rider/",
        "pubDate": "Tue, 02 Jul 2024 13:19:49 +0000",
        "content:encodedSnippet": "The Task Parallel Library (TPL) is foundational to all .NET applications, as it allows frameworks to write and execute multithreaded and parallel code. Additionally, developers looking to get the most out of their resources may want to write custom code, taking advantage of the types found in System.Threading and System.Threading.Tasks. You must understand concurrency and threading fundamentals to write fast and scalable solutions, including locks, deadlocks, awaits, and scheduling. Part of expanding your understanding of these concepts requires excellent tooling to help you visualize and make sense of a potentially chaotic swarm of executing tasks.\nExciting news! We’ve recently launched the first iteration of our Tasks view, a powerful tool designed to help you understand the existing tasks in the current application process. \nIn this post, we’ll examine the new tool window, discuss its essential UI elements, and demonstrate some common scenarios. You’ll be ready to explore your code bases and uncover optimization opportunities by the end.\nDownload & try JetBrains Rider\n                                                    \nTask Execution in .NET Applications\nIn .NET, Tasks offer an abstraction over concepts like concurrency and multithreading. The idea is to worry less about CPU cores and threads and deal with the high-level concepts of scheduling and executing work concurrently. This is generally great since it can help developers write more imperative code while efficiently utilizing all their system resources.\nWhile abstractions are reasonably good, no abstraction is perfect, and at some point, you’ll have to deal with the pitfalls of multiple tasks concurrently. These include deadlocks, race conditions, and inefficient scheduling that causes backpressure. Dealing with abstractions doesn’t mean you should not understand how and why they work.\nTypically, you will be responsible for scheduling tasks but never know when and how those tasks will be completed. Execution is the job of the .NET runtime. While you might see particular code patterns that are a sign of trouble to come, the best way to diagnose issues with Tasks is at runtime. Let’s look at some common scenarios you might uncover in your codebase and see how the Tasks view can help you better understand your applications.\nCommon Tasks\nThe most likely scenario when working with tasks is consuming an API that returns tasks that require the async and await keywords. These asynchronous APIs are in ASP.NET Core, MAUI, and Entity Framework Core. Many open-source projects have also moved to async-first APIs to support developer needs.\nLet’s take a look at a simple example.\nawait BasicWork();\r\n\r\nasync Task BasicWork()\r\n{\r\n    await Task.Delay(TimeSpan.FromSeconds(1));\r\n    Console.WriteLine(\"👋 Hello Tasks View!\");\r\n}\r\n\nCopy to clipboard\n\n            \nIn this example, we have two tasks: The main task originating from our program and the BasicWork method. We can confirm this by using the new Tasks View. While in a debugging session, click the Tasks tab to view the following table.\nJetBrains Rider’s Tasks View in Table mode\nYou can also switch to a Graph view by choosing the option at the top right.\nJetBrains Rider’s Tasks View in Graph mode\nYou can also see the row information in the graph view by hovering over any stack item.\nShowing the row in the graph view\nWhen working with Tasks, there are five statuses any task can have at any one time:\nActive: Currently executing and running.\nScheduled: The task has been created but has not yet been executed.\nAwaiting: The task has been awaited but may be awaiting other tasks.\nBlocked: This task is at the top of the stack, and the thread executing it is blocked (sleep, waiting on lock, etc.). There are also some other tasks higher in the stack.\nDeadlocked: The task is in contention for a resource, and there’s a severe problem.\nNow that we’ve seen the most common scenario, let’s look at parented tasks.\nParented Tasks\nThe act of parenting allows developers to logically group tasks. When creating a task within a task, you can use the TaskCreationOptions.AttachedToParent to tie any new task to the containing task.\nawait ParentedTasks();\r\n\r\nTask ParentedTasks()\r\n{\r\n    // Parent task\r\n    var parentTask = Task.Factory.StartNew(() =>\r\n    {\r\n        Console.WriteLine(\"Parent task started.\");\r\n\r\n        // Child task\r\n        var task = Task.Factory.StartNew(() =>\r\n        {\r\n            Console.WriteLine(\"Child task started.\");\r\n            Task.Delay(2000).Wait(); // Simulating some work\r\n            Console.WriteLine(\"Child task completed.\");\r\n        }, TaskCreationOptions.AttachedToParent);\r\n\r\n        Console.WriteLine(\"Parent task doing some work.\");\r\n    }, TaskCreationOptions.AttachedToParent);\r\n\r\n    // Wait for parent task to complete, which includes the children\r\n    parentTask.Wait();\r\n\r\n    Console.WriteLine(\"Parent task completed.\");\r\n    return Task.CompletedTask;\r\n}\r\n\nCopy to clipboard\n\n            \nIf you run the code and look at the Task view, you’ll see that we’ve successfully parented the child task.\nShowing a task parented to another\nNote that each new task has an integer Id assigned by the .NET runtime. These identifiers help you keep track of tasks that exist in your current process.\nThis time, the graph view shows two async logical stacks resulting from the ParentedTasks code, which uses methods like Wait and returning Task.CompletedTask. \nShowing two async logical stacks\nThat’s cool. Understanding whether tasks are related or have created separate logical stacks can help you understand if you’ve created a potential race condition.\nLet’s see how the Tasks view can help us see how work is scheduled.\nScheduling Tasks\nAny time you await a task, you effectively schedule that work for a future time. That work can happen immediately after scheduling a task or after other scheduled tasks have been executed. Let’s see an example where we schedule several tasks and wait for them to complete.\nawait ScheduledWork();\r\nasync Task ScheduledWork()\r\n{\r\n    Console.Write(\"Let's work...\");\r\n    var tasks = Enumerable\r\n        .Range(1, 10)\r\n        .Select((i) => Task.Run(() => Console.Write(i)));\r\n\r\n    await Task.WhenAll(tasks);\r\n}\r\n\nCopy to clipboard\n\n            \nThe use of the Task.WhenAll attempts to execute all the supplied tasks, with all of them being scheduled for future execution. You can see this in the Tasks view.\nScheduled tasks from the 10 created tasks\nAdditionally, the use of Task.WhenAll creates an async logical stack under which all these operations can run.\nTwo async logical stacks with one showing 10 values\nWhen you step through the code during the debugging session, you’ll see the list of Tasks reduced as tasks are completed. You may also notice multiple tasks being executed at the same time.\nA dwindling set of tasks in the tasks view\nIt’s satisfying to see tasks completed, but it’s not great when they overstay their welcome. Let’s move on to the scariest scenario when dealing with tasks: deadlocks.\nDeadlocks\nThe most common cause of a deadlock is contention around a shared resource guarded by some locking mechanism. Locks are essential when dealing with shared resources but can lead to app-breaking issues.\nLet’s create a deadlock now because we love to live dangerously. More importantly, we’ll see how the Tasks view can help us identify it. We’ll schedule two tasks, each trying to lock the same variables.\nawait Deadlock();\r\n\r\n// This method will cause a deadlock\r\n// proceed with caution, oOOoOOoOo! 👻\r\nasync Task Deadlock()\r\n{\r\n    object one = new();\r\n    object two = new();\r\n\r\n    var timer = new System.Timers.Timer(\r\n        TimeSpan.FromSeconds(2)\r\n    ) { Enabled = true, AutoReset = false };\r\n\r\n    timer.Elapsed += (_, _) =>\r\n    {\r\n        // only see this if we're deadlocked\r\n        Console.WriteLine(\"💀Deadlock\");\r\n    };\r\n\r\n    await Task.WhenAll(Task.Run(() =>\r\n    {\r\n        Console.WriteLine(\"Getting lock for one.\");\r\n        lock (one)\r\n        {\r\n            Thread.Sleep(1000);\r\n            Console.WriteLine(\"Getting lock two in first task.\");\r\n            lock (two)\r\n            {\r\n            }\r\n        }\r\n    }), Task.Run(() =>\r\n    {\r\n        Console.WriteLine(\"Getting lock two in second task.\");\r\n        lock (two)\r\n        {\r\n            Thread.Sleep(1000);\r\n            Console.WriteLine(\"Getting lock one in second task.\");\r\n            lock (one)\r\n            {\r\n            }\r\n        }\r\n    }));\r\n}\r\n\nCopy to clipboard\n\n            \nWhen you run the code, you’ll notice the application never exits. In the Run toolbar, hit the pause button to pause the application. Oh no, a deadlock! I’m shocked! (well, I’m not that shocked).\nA deadlocked pair of tasks in the tasks table view\nThe graph view is even more telling, showing the two tasks in contention and how we got here.\nA deadlocked pair of tasks in the tasks graph view\nDouble-clicking on any of the deadlocked logical stacks will take you to the location of the deadlock.\nShowing the code that is causing the deadlock in JetBrains Rider\nThat ease of navigation should make finding and solving deadlocks, well, dead simple.\nConclusion\nThe Tasks view is currently available in JetBrains Rider 2024.2 EAP, and we’d love to hear your feedback so you can help shape this tool’s future. We understand that tasks can be a challenging part of .NET development, and we hope this additional tooling can help you overcome them. Try it and see if it can help you optimize existing code or find longstanding issues in your codebase.\nThanks for reading, and we look forward to your thoughts and comments.\nDownload the latest version!\n                                                    \nimage credit: Eden Constantino",
        "dc:creator": "Khalid Abuhakmeh",
        "content": "The Task Parallel Library (TPL) is foundational to all .NET applications, as it allows frameworks to write and execute multithreaded and parallel code. Additionally, developers looking to get the most out of their resources may want to write custom code, taking advantage of the types found in System.Threading and System.Threading.Tasks. You must understand concurrency and [&#8230;]",
        "contentSnippet": "The Task Parallel Library (TPL) is foundational to all .NET applications, as it allows frameworks to write and execute multithreaded and parallel code. Additionally, developers looking to get the most out of their resources may want to write custom code, taking advantage of the types found in System.Threading and System.Threading.Tasks. You must understand concurrency and […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=487709",
        "categories": [
          "net-tools",
          "async-await",
          "c",
          "rider",
          "tasks"
        ],
        "isoDate": "2024-07-02T13:19:49.000Z"
      },
      {
        "creator": "Andrey Gushchin",
        "title": "CLion 2024.2 EAP 4: Improvements for Remote Toolchain, a Fix for Settings Persistence in Nova, and Enhanced GDB Pretty Printers",
        "link": "https://blog.jetbrains.com/clion/2024/07/2024-2-eap-4/",
        "pubDate": "Tue, 02 Jul 2024 09:55:24 +0000",
        "content:encodedSnippet": "The CLion 2024.2 EAP 4 build (242.19533.43) is now out! It’s available from our website, via the Toolbox App, or as a snap package if you’re using Ubuntu.\nDOWNLOAD CLION 2024.2 EAP\nHighlights: \nWe significantly improved the reloading of CMake projects with multiple files when using a remote toolchain (CPP-14984).\nCustom TODO settings now persist after IDE restart when the new language engine (CLion Nova) is enabled (CPP-36266).\nThe issue that prevented debugging on Windows using WSL with GDB Multiarch has been fixed (CPP-30085).\nSeveral issues with GDB pretty printers were resolved to ensure complex data types are shown in a more readable and convenient manner.\n\nstd::array now shows values in the debugger (CPP-33213).\nThe std::valarray pretty printer doesn’t show as raw data anymore (CPP-19123).\nUnordered set values are no longer rendered in the GDB variable view (CPP-20943).\nThe size of list/forward_list containers now show (CPP-37831).\nYour CLion team\nJetBrains\nThe Drive to Develop",
        "dc:creator": "Andrey Gushchin",
        "content": "The CLion 2024.2 EAP 4 build (242.19533.43) is now out! It’s available from our website, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2024.2 EAP Highlights:&#160; Your CLion teamJetBrainsThe Drive to Develop",
        "contentSnippet": "The CLion 2024.2 EAP 4 build (242.19533.43) is now out! It’s available from our website, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2024.2 EAP Highlights:  Your CLion teamJetBrainsThe Drive to Develop",
        "guid": "https://blog.jetbrains.com/?post_type=clion&p=489168",
        "categories": [
          "eap",
          "news",
          "2024-2",
          "gdb"
        ],
        "isoDate": "2024-07-02T09:55:24.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "ReSharper 2024.2 EAP 5: An Important Milestone and Other Updates",
        "link": "https://blog.jetbrains.com/dotnet/2024/07/01/resharper-2024-2-eap-5/",
        "pubDate": "Mon, 01 Jul 2024 16:55:14 +0000",
        "content:encodedSnippet": "The latest installment in the Early Access Program for ReSharper 2024.2 has just been released! This preview build marks an important milestone – it is the first one to feature asynchronous typing, an important design change for ReSharper on its way to out-of-process operation. In addition to that, the update also brings several updates across C++ support, C# refactoring, the decompiler, dotTrace, dotMemory, and the Dynamic Program Analysis (DPA) tool window.\nLet’s dive in!\nDownload the EAP build \n                                                    \nAsynchronous typing enabled\nAsynchronous typing is part of an ongoing effort to improve ReSharper’s performance by enabling it to run out of process with Visual Studio. ReSharper 2024.2 EAP 5 is the first build to feature this important change.\nTraditionally, ReSharper used a synchronous model for handling user inputs. Each keystroke would trigger a series of actions requiring ReSharper to obtain a write lock, pause background processes, and then synchronize its internal model with what is displayed in the Visual Studio editor. This process, although typically quick, could introduce noticeable delays, especially in complex scenarios where extensive code analysis and formatting were needed.\nThe shift to asynchronous typing decouples these operations from the main typing process. By doing so, ReSharper can handle input in the Visual Studio editor without waiting for background tasks to complete. This change reduces the blocking time for write lock, thereby minimizing interruptions and improving the responsiveness of the editor.\n\n\n\n\nOur internal tests show a marked improvement in the smoothness of the typing experience. We’d love to hear about your perceptions over on our issue tracker. While we’re optimistic about enabling async typing for the 2024.2 release, further testing is still needed, and that’s why your feedback is particularly important. \nSupport for the C++23 multidimensional subscript operator\nThe latest build introduces support for the C++23 multidimensional subscript operator. Previously, accessing elements in a multidimensional array required either chaining multiple subscript operators (e.g. arr[i][j][k]) or using function call syntax (e.g. arr(i, j, k)), both of which could be cumbersome and less readable.\nWith the new C++23 feature, you can now use a single subscript operator with multiple indices (e.g. arr[i, j, k]). This change simplifies the syntax and makes the code more readable and consistent with how single-dimensional arrays are accessed, thereby reducing the cognitive load.\nExtract common code refactoring for C#\nReSharper’s latest refactoring enhancement enables you to extract common code out of branching statements such as if or switch. This update streamlines and consolidates shared logic, ensuring it is executed regardless of the branching path, improving code readability, and reducing redundancy.\nDecompiler enhancements\nThe decompiler in ReSharper 2024.2 EAP 5, as well as the standalone dotPeek application, sees another usability improvement with the introduction of the Open in Browser action. This action provides two navigation options:\nNavigate to GitHub: You can now open external sources directly in your browser and navigate to the source repository on GitHub. This is accessible via the context menu in the Assembly Explorer or within the code.\nNavigate to the NuGet package repository: Similarly, you can navigate to the NuGet package repository directly from the context menu on the NuGet node. This seamless integration saves time and enhances your workflow by providing quick access to source code and documentation.\ndotTrace \nWe have resolved the issue with missing kernel sampling events in Timeline mode (DTRC-30949).\nThe View | Options tool window is now available in the dotTrace Viewer on macOS and Linux. Settings like Web Proxy, Call Tree Folding, Subsystems, and Source View can be configured.\ndotMemory\nThe dotMemory version for Linux and macOS gets features that were previously available only on Windows:\nAutomatic memory inspections: dotMemory for Linux and macOS gets the Inspections view, which shows a number of automatically detected memory issues.\nCross-workspace snapshot comparison: Now, you can compare snapshots from different profiling sessions, allowing for a more comprehensive memory analysis and comparison of snapshots contained in different dotMemory workspaces.\nThese features are also available in the built-in dotMemory plugin in JetBrains Rider.\nExplain with AI for Dynamic Program Analysis tool window\nThe Dynamic Program Analysis (DPA) tool window now features an Explain with AI button for issues related to memory allocation and database problems. This AI-driven feature offers detailed explanations and advice from AI Assistant on potential fixes directly within the Dynamic Program Analysis tool window to help you quickly understand and resolve even the most complex issues associated with memory allocation and working with databases. \n\n\n\n\nFor the full list of changes included in this build, please refer to our issue tracker.\nDownload the EAP build \n                                                    \nAs always, we’re happy to hear your thoughts on the latest updates in the comments section or on our social media. Please feel free to submit any issues you encounter to our issue tracker.",
        "dc:creator": "Sasha Ivanova",
        "content": "The latest installment in the Early Access Program for ReSharper 2024.2 has just been released! This preview build marks an important milestone – it is the first one to feature asynchronous typing, an important design change for ReSharper on its way to out-of-process operation. In addition to that, the update also brings several updates across [&#8230;]",
        "contentSnippet": "The latest installment in the Early Access Program for ReSharper 2024.2 has just been released! This preview build marks an important milestone – it is the first one to feature asynchronous typing, an important design change for ReSharper on its way to out-of-process operation. In addition to that, the update also brings several updates across […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=488776",
        "categories": [
          "net-tools",
          "eap",
          "releases",
          "resharper"
        ],
        "isoDate": "2024-07-01T16:55:14.000Z"
      },
      {
        "creator": "Sasha Ivanova",
        "title": "Rider 2024.2 EAP 5: Reader Mode, Monitoring for Game Dev, and More",
        "link": "https://blog.jetbrains.com/dotnet/2024/07/01/rider-2024-2-eap-5/",
        "pubDate": "Mon, 01 Jul 2024 16:54:50 +0000",
        "content:encodedSnippet": "Rider 2024.2 EAP 5 has just landed! This build brings a variety of new features and improvements to enhance your development experience. As always, your feedback is invaluable in helping us refine these updates, so we encourage you to try out the new build and share your thoughts.\nDownload the EAP build \n                                                    \nUX/UI\nReader mode\nReader mode is now available in Rider 2024.2 EAP 5. It’s designed to make reading library and read-only files, including decompiled ones, a whole lot easier, and it includes inline rendering of documentation comments for C# and F#, as well as virtual indenting for C#.\n\n\n\n\nVirtual indenting modifies the style of read-only code to match your preferred layout. \nExtract common code refactoring for C#\nRider’s latest refactoring enhancement enables you to extract common code out of branching statements such as if or switch. This update streamlines and consolidates shared logic, ensuring it’s executed regardless of the branching path, improving code readability, and reducing redundancy.\nSticky lines for C++ \nIn addition to the sticky lines for preprocessor directives introduced in EAP 3, Rider 2024.2 now offers sticky lines for accessibility specifiers in C++. \nAccessibility specifiers (public, protected, and private) define the access control for class members. The new sticky lines feature keeps these specifiers visible at the top of the editor window as you scroll, helping you quickly identify access levels and better manage complex class hierarchies by maintaining constant visibility of the encapsulation and inheritance structure.\nEnhanced Monitoring tool window\nThe Monitoring tool window inside Rider 2024.2 supports a broader range of application types. This tool window is now displayed during running and debugging for the following project types:\nC++ projects\nUnity projects\nUnreal Engine projects\nMono projects\n.NET Framework projects (without heap information)\n\n\n\n\nFor newly supported project types, the Monitoring functionality is currently limited to the Chart and Environment tabs. The Chart tab in these cases only includes data on CPU usage and private memory consumption.\nThe Counters tab, as well as detailed information on heap sizes, GC time, and exception counts in the Charts tab, are still only supported .NET Core 3.0+ and .NET 5+ applications.\nPlease note some known cases where this feature might not work: \nwhen cmd.exe is monitored instead of the user’s application if the Use external console option is enabled in configuration settings on Windows \nwhen attaching to mono processes\nPerformance and memory profiling\ndotTrace \nWe’ve resolved the issue with missing kernel sampling events in Timeline mode (DTRC-30949).\ndotMemory\nThe built-in dotMemory plugin has gained the ability to automatically analyze snapshots and compare snapshots contained in different dotMemory workspaces. This entails the introduction of a couple of additional views:\nAutomatic memory inspections: dotMemory gets the Inspections view, which shows a number of automatically detected memory issues.\nCross-workspace snapshot comparison: Now, you can compare snapshots from different profiling sessions, allowing for a more comprehensive memory analysis.\nThese features are available in the standalone version of dotMemory.\nExplain with AI for Dynamic Program Analysis \nThe Dynamic Program Analysis (DPA) tool window now features an Explain with AI button for issues related to memory allocation and database problems. This AI-driven feature offers detailed explanations and advice from AI Assistant on potential fixes directly within the Dynamic Program Analysis tool window to help you quickly understand and resolve even the most complex issues associated with memory allocation and working with databases. \nGame development\n[Godot] Debugging for GDScript\nRider 2024.2 EAP 5 introduces support for debugging GDScript in Godot. This update makes it easier for Godot developers to debug their scripts directly within Rider, streamlining the development process and providing a more integrated experience.\nFor the full list of changes included in this build, please refer to our issue tracker.\nDownload the EAP build \n                                                    \nWe encourage you to download the latest build, explore these new features, and share your feedback with us. Your insights are crucial in helping us refine these updates and deliver the best possible experience for all our users.",
        "dc:creator": "Sasha Ivanova",
        "content": "Rider 2024.2 EAP 5 has just landed! This build brings a variety of new features and improvements to enhance your development experience. As always, your feedback is invaluable in helping us refine these updates, so we encourage you to try out the new build and share your thoughts. UX/UI Reader mode Reader mode is now [&#8230;]",
        "contentSnippet": "Rider 2024.2 EAP 5 has just landed! This build brings a variety of new features and improvements to enhance your development experience. As always, your feedback is invaluable in helping us refine these updates, so we encourage you to try out the new build and share your thoughts. UX/UI Reader mode Reader mode is now […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=488770",
        "categories": [
          "net-tools",
          "eap",
          "releases",
          "rider",
          "reader-mode"
        ],
        "isoDate": "2024-07-01T16:54:50.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "article New updates to Planner comment notifications and settings in Planner Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Duncan MacMichael",
        "title": "Dive into native Windows development with new WinUI workload and template improvements",
        "link": "https://devblogs.microsoft.com/visualstudio/dive-into-native-windows-development-with-new-winui-workload-and-template-improvements/",
        "pubDate": "Tue, 02 Jul 2024 16:00:45 +0000",
        "content:encodedSnippet": "At //Build 2024, the WinUI team announced a renewed focus on WinUI as one of the premier app development frameworks we recommend for native Windows app development. To make it as seamless and easy as possible to get into coding, we created a new Windows Dev Center page, streamlined our Getting Started with WinUI documentation, and partnered with Visual Studio to improve the developer experience with workloads and templates. Today, we’ll focus on showing you the great new changes in Visual Studio along with a little bit of our thought process behind them and links to learn more!\n\nGetting started with the new workload\nIn Visual Studio 17.10, the new “Windows application development” workload is now available for developers to jump right in and get started with writing stylish, modern, and fast WinUI apps using .NET or C++ with only one click. This workload replaces the older “Universal Windows Platform development” workload with tools aimed at the latest generation of WinUI + the Windows App SDK. WinUI templates have also been given a fresh new icon and priority boost in the New Project template list, and they now include a new community-requested Unit Test template to help test WinUI apps more easily!\nTo get started with the new workload, follow these easy steps:\nOpen the Visual Studio Installer.\nUnder Workloads > Desktop & Mobile, select the “Windows application development” workload.\n\nIf you’re developing in C#, congrats, you’re finished! The workload includes .NET WinUI app development tools by default.\nIf you’d like to develop in C++ or if you need the tools for Universal Windows Development, select the optional “C++ WinUI app development tools” component. This will automatically select the Universal Windows Platform tools and C++ Universal Windows Platform tools components.\n\nThat’s it! In previous versions of Visual Studio, to develop with WinUI + the Windows App SDK you had to manually search for each required component in the list of optional components – and this was after reading the docs to find out what you needed! We also heard feedback that WinUI in the Windows App SDK, which represents the latest generation of WinUI that succeeds the Universal Windows Platform (UWP), was less prominent than its predecessor. With the new workload and components, we’ve addressed this feedback to make the newest tools and APIs clear, front-and-center, and available with one click!\nTake advantage of WinUI template improvements\nOnce you have the “Windows application development” workload installed, now it’s time to start creating projects. We got some great feedback here on the New Project screen as well – the WinUI templates were far down the list, which made them seem less important than other templates, and they needed a fresh coat of paint. We heard you, so we bumped the most-used WinUI templates closer to the top and added a sparkly new icon!\nGo to File > New Project to see these updates in action!\n\nThe rest of the templates aren’t much farther down, either; on most monitors, you probably won’t need to scroll to see them. In that list is one more addition we’d love to highlight – the new Unit Test template for WinUI! This was directly requested by you, the WinUI developer community, and we’re thrilled to introduce it alongside our other improvements to the WinUI workload and template experience.\nConclusion\nWe wanted to thank you again for all your for you. You’re helping to make it easier for new WinUI developers to embrace native app development on Windows and helping us produce the best native app development experience on Windows that we can.\nTo give us feedback on the platform directly, visit us on GitHub, or follow us on Twitter to stay up to date on releases and news.\nTo learn more about WinUI and for more info on getting started, check out our new Windows Dev Center page at https://aka.ms/windev.\nIf you’re interested in the full picture of what we talked about at //Build 2024 beyond our Visual Studio updates, check out these two sessions:\nNavigating Win32 App Development with WinUI and WPF | BRK241 (youtube.com)\nHow to create superior experiences with WinUI and WPF | BRK244 (youtube.com)\nWe appreciate the time you’ve spent reporting issues/suggestions and hope you continue to give us feedback when using Visual Studio on what you like and what we can improve. Your feedback is critical to help us make Visual Studio the best tool it can be! You can share feedback with us via Developer Community: report any bugs or issues via report a problem and share your suggestions for new features or improvements to existing ones.\nStay connected with the Visual Studio team by following us on YouTube, Twitter, LinkedIn, Twitch and on Microsoft Learn.\nThe post Dive into native Windows development with new WinUI workload and template improvements appeared first on Visual Studio Blog.",
        "dc:creator": "Duncan MacMichael",
        "content": "<p>At //Build 2024, the WinUI team announced a renewed focus on WinUI as one of the premier app development frameworks we recommend for native Windows app development. To make it as seamless and easy as possible to get into coding, we created a new Windows Dev Center page,</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/dive-into-native-windows-development-with-new-winui-workload-and-template-improvements/\">Dive into native Windows development with new WinUI workload and template improvements</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "At //Build 2024, the WinUI team announced a renewed focus on WinUI as one of the premier app development frameworks we recommend for native Windows app development. To make it as seamless and easy as possible to get into coding, we created a new Windows Dev Center page,\nThe post Dive into native Windows development with new WinUI workload and template improvements appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=249641",
        "categories": [
          "Visual Studio",
          ".NET",
          "Windows App SDK",
          "Windows application development",
          "WinUI"
        ],
        "isoDate": "2024-07-02T16:00:45.000Z"
      },
      {
        "creator": "Jessie Houghton",
        "title": "Let GitHub Copilot draft of your pull request description",
        "link": "https://devblogs.microsoft.com/visualstudio/let-github-copilot-draft-of-your-pull-request-description/",
        "pubDate": "Mon, 01 Jul 2024 07:00:02 +0000",
        "content:encodedSnippet": "Writing good pull request descriptions is essential for effective code reviews and collaboration. But it’s time-consuming and tedious, especially when you have multiple commits or complex changes. That’s why we’re highlighting a feature that will make your life better with the help of GitHub Copilot: generated pull request descriptions. GitHub Copilot examines your code changes and generates helpful summaries that you can edit and customize. Save your energy for your coding tasks and let GitHub Copilot provide extra context for your reviewers.\n\nDownload Visual Studio\n\nStarting with Visual Studio version 17.10 GA, to try these out, you’ll need to have an active GitHub Copilot subscription and the GitHub Copilot component installed and the Git Preview Features enabled in the GitHub Copilot Menu.\nGet going faster with generated pull request descriptions\nOne of the most popular features of GitHub Copilot is the ability to generate Git commit messages based on your code changes. We’ve heard awesome feedback on this feature, so we wanted to continue saving you time and improve your collaborations by enabling GitHub Copilot-powered pull request descriptions. You can now generate a first draft for your pull request and preview the markdown output. You’ll get assistance in providing important context to your colleagues for their reviews and get the added benefit of ensuring you include the right changes in your pull request.\nSelect “Add AI Generated Pull Request Description” sparkle pen icon within the Create a Pull Request window to see your description.\n\nHelp us go further\nSo far, we’ve heard customers are satisfied with their generated results, sharing that responses are accurate and useful, and inserting suggestions at a rate of 80%! Please share your ideas to improve this future and further power up Version Control with GitHub Copilot.\nTake the Survey\n\nWe appreciate the time you’ve spent reporting issues/suggestions and hope you continue to give us feedback when using Visual Studio on what you like and what we can improve. Your feedback is critical to help us make Visual Studio the best tool it can be! You can share feedback with us via Developer Community: report any bugs or issues via report a problem and share your suggestions for new features or improvements to existing ones.\nStay connected with the Visual Studio team by following us on YouTube, Twitter, LinkedIn, Twitch and on Microsoft Learn.\nThe post Let GitHub Copilot draft of your pull request description appeared first on Visual Studio Blog.",
        "dc:creator": "Jessie Houghton",
        "content": "<p>Writing good pull request descriptions is essential for effective code reviews and collaboration. But it’s time-consuming and tedious, especially when you have multiple commits or complex changes. That&#8217;s why we’re highlighting a feature that will make your life better with the help of GitHub Copilot: generated pull request descriptions.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/let-github-copilot-draft-of-your-pull-request-description/\">Let GitHub Copilot draft of your pull request description</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "Writing good pull request descriptions is essential for effective code reviews and collaboration. But it’s time-consuming and tedious, especially when you have multiple commits or complex changes. That’s why we’re highlighting a feature that will make your life better with the help of GitHub Copilot: generated pull request descriptions.\nThe post Let GitHub Copilot draft of your pull request description appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=249625",
        "categories": [
          "Visual Studio"
        ],
        "isoDate": "2024-07-01T07:00:02.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Dropbox Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": [
      {
        "creator": "sunyzero",
        "title": "AMD 7840HS 미니 PC, Firebat MN56 리뷰",
        "link": "http://sunyzero.tistory.com/298",
        "pubDate": "Sun, 30 Jun 2024 22:01:02 +0900",
        "author": "sunyzero",
        "comments": "http://sunyzero.tistory.com/298#entry298comment",
        "content": "<p data-ke-size=\"size16\">AMD의 7840HS CPU (내장 그래픽 780M)을 탑재한 미니PC Firebat mn56을 알리에서 구입했다. 지난번 n100 미니 PC도 좋지만 성능이 더 좋다는 미니PC도 궁금했기 때문이었다. 보통 Beelink나 GMKtek, Firebat 제품을 많이 구매하는데, Beelink는 약간 소음이 있다고 한다. 대형 플라워 팬을 가지고 있는 Firebat MN56이 조용하다길래 해당 제품으로 구매했다.</p>\n<p data-ke-size=\"size16\">보통 고성능 미니PC는 AMD의 7840HS나 7735HS를 많이 사용하는데, 비슷하게 보이지만 비교하면 CPU 세대가 다르고 7840HS쪽의 내장 그래픽이 훨씬 성능이 좋다는 것이 가장 큰 차이다. (AMD의 미니PC용 CPU는 십자리숫자가 세대를 의미한다. 따라서 77<span style=\"background-color: #f6e199;\">3</span>5 는 3세대, 77<span style=\"background-color: #f6e199;\">4</span>0은 4세대이다)</p>\n<p data-ke-size=\"size16\">24년 3월에 구입해서 4월초부터 사용해서 현재까지 약 2개월 정도 사용했고 그에 따라서 리뷰를 남긴다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size26\">1. 제품 스펙 및 특징</h2>\n<table style=\"background-color: #ffffff; color: #5c5c5c; text-align: start; border-collapse: collapse; width: 100%;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr>\n<td style=\"color: #666666;\">제품명</td>\n<td style=\"color: #666666;\">Firebat MN56</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">CPU</td>\n<td style=\"color: #666666;\">AMD Ryzen 7840HS [1]<br />3.8GHz, 8 core, 16MB cache, Memory(DDR5 5600Mhz)</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">RAM</td>\n<td style=\"color: #666666;\"><span style=\"background-color: #ffffff; color: #666666; text-align: start;\">16GB</span>&nbsp; = 8GB (DDR5, 5600MHz) x2&nbsp;<br />= 램이 약간 부족한 듯 싶어서 따로 삼성 DDR5 16GB를 2개 구입해서 업그레이드 했다.</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">SSD</td>\n<td style=\"color: #666666;\">NVMe 512GB (양쯔 메모리)</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">Network (Wired)</td>\n<td style=\"color: #666666;\">intel i226 (2.5Ghz)<br />Realtek RTL8111H (1Gbps)</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">Network (Wireless)</td>\n<td style=\"color: #666666;\">Intel AX200<br />- WiFi 6E, Bluetooth 5.3</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">USB</td>\n<td style=\"color: #666666;\"><span style=\"background-color: #f6e199;\">USB-C (USB4 40Gbps, DP-Alt 디스플레이 지원) x1</span><br />USB-A 3.2 Gen2 (10Gbps) x2 (전면)<br />USB-A 2.0 x2 (후면)</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">디스플레이</td>\n<td style=\"color: #666666;\">HDMI 2.1 (4K 60Hz) <span style=\"background-color: #ffffff; color: #666666; text-align: start;\">x1</span> <br />DP 1.4&nbsp; (4K 60Hz) <span style=\"background-color: #ffffff; color: #666666; text-align: start;\">x1</span></td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">Audio</td>\n<td style=\"color: #666666;\">Realtek audio<br />마이크, 헤드폰 겸용 3극 단자 지원</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">Power</td>\n<td style=\"color: #666666;\">20V/5A DC 어댑터</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">Price</td>\n<td style=\"color: #666666;\">$300 초반 (세금 포함)</td>\n</tr>\n</tbody>\n</table>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">Firebat MN56에서 제공하는 전후면 인터페이스는 아래 그림을 보면 쉽게 이해할 수 있다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"mn56 front rear.jpg\" data-origin-width=\"1084\" data-origin-height=\"915\"><span data-url=\"https://blog.kakaocdn.net/dn/GAq2q/btsIhvX9IVN/JjQGwwyK1OIaKK6oKxVuI0/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat mn56 7840HS - 후면(위), 전면(아래)\"><img src=\"https://blog.kakaocdn.net/dn/GAq2q/btsIhvX9IVN/JjQGwwyK1OIaKK6oKxVuI0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FGAq2q%2FbtsIhvX9IVN%2FJjQGwwyK1OIaKK6oKxVuI0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"mn56 front rear.jpg\" data-origin-width=\"1084\" data-origin-height=\"915\"/></span><figcaption>Firebat mn56 7840HS - 후면(위), 전면(아래)</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">위 사진에서 제품의 후면 및 전면 단자를 순서대로 적으면 아래와 같다.</p>\n<table style=\"background-color: #ffffff; color: #5c5c5c; text-align: start; border-collapse: collapse; width: 100%;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr>\n<td style=\"color: #666666;\">후면 단자 <br />(왼쪽부터)</td>\n<td style=\"color: #666666;\">전원(20V, 5A), 2.5G LAN (i226-v), 1G LAN(Realtek), DP 1.4, HDMI 2.1, USB 2.0 2개</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">전면 단자<br /><span style=\"background-color: #ffffff; color: #666666; text-align: start;\">(왼쪽부터)</span></td>\n<td style=\"color: #666666;\">전원 버튼, 헤드폰 3극 단자, USB 3.2 Gen2 (10Gbps) 2개, USB4 (DP-alt, PD지원), LED 버튼</td>\n</tr>\n</tbody>\n</table>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">후면의 USB-C 단자는 DC 전원 전용이므로 USB4나 TB4(썬더볼트4) 단자를 꼽으면 부팅하다가 그냥 꺼진다. 실제로 100W를 지원하는 썬더볼트4 독을 연결해봤는데 전원이 잠깐 들어왔다가 바로 꺼졌다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">원래 시스템에서 USB4 포트를 2개까지 지원하는데 1개만 만들어 둔 것은 좀 아쉽다고 생각한다. 만일 2개를 지원했다면 USB 허브 연결과 USB-C 외장 모니터까지 바로 연결할 수 있을텐데 말이다.</p>\n<p data-ke-size=\"size16\">전원 버튼이 매우 민감해서 헤드폰 잭이나 USB 단자를 꼽다가 눌러서 꺼트린 적이 있었다. 이건 좀 주의해야 할 듯 싶다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size26\">2. 내부 구조</h2>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">뒷판은 나사를 빼면 들어낼 수 있다. 딱히 조심해야 할 것은 없다. 뒷판은 VESA 홀 규격을 지원하고 있다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_20240325_203029_mn56.jpg\" data-origin-width=\"1200\" data-origin-height=\"1600\"><span data-url=\"https://blog.kakaocdn.net/dn/b8A0gu/btsIigTrIUz/jXkxvbHk9TmdykIqxiAu31/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 7840HS 뒷판 내부\"><img src=\"https://blog.kakaocdn.net/dn/b8A0gu/btsIigTrIUz/jXkxvbHk9TmdykIqxiAu31/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb8A0gu%2FbtsIigTrIUz%2FjXkxvbHk9TmdykIqxiAu31%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_20240325_203029_mn56.jpg\" data-origin-width=\"1200\" data-origin-height=\"1600\"/></span><figcaption>Firebat MN56 7840HS 뒷판 내부</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">램은 삼성 DDR5 5600으로 장착되어있고, SSD는 NVMe 양쯔 메모리 제품인 듯 싶다. 디램리스로 보인다. NVMe를 들어내면 아랫쪽에 intel AX200NGW 무선 모듈이 존재한다. 무선 모듈과 NVMe SSD와 간격이 너무 좁아서 NVMe에 양면 방열판은 사용이 불가하다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_20240325_203231 ax200ngw.jpg\" data-origin-width=\"1200\" data-origin-height=\"900\"><span data-url=\"https://blog.kakaocdn.net/dn/kU6cR/btsIgY7AYgB/eFqkfDa2jksh06E5djbYrk/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 7840HS 무선 모듈 intel AX200\"><img src=\"https://blog.kakaocdn.net/dn/kU6cR/btsIgY7AYgB/eFqkfDa2jksh06E5djbYrk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FkU6cR%2FbtsIgY7AYgB%2FeFqkfDa2jksh06E5djbYrk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_20240325_203231 ax200ngw.jpg\" data-origin-width=\"1200\" data-origin-height=\"900\"/></span><figcaption>Firebat MN56 7840HS 무선 모듈 intel AX200</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">CMOD clear 점퍼는 NVMe 슬롯 바로 근처에 빨간색 점퍼로 되어있다. 혹시라도 CMOS 설정을 잘못해서 부팅이 잘 안되면 클리어쪽으로 점퍼를 바꾸고 재부팅하면 된다. 물론 재부팅 후에는 다시 원상복구를 해야 한다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_20240325_203139 cmos clear.jpg\" data-origin-width=\"1200\" data-origin-height=\"900\"><span data-url=\"https://blog.kakaocdn.net/dn/dDXbRc/btsIixOczL2/CSJGztrzRfwapT1udZ8ja1/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 7840HS - CMOS clear jumper\"><img src=\"https://blog.kakaocdn.net/dn/dDXbRc/btsIixOczL2/CSJGztrzRfwapT1udZ8ja1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdDXbRc%2FbtsIixOczL2%2FCSJGztrzRfwapT1udZ8ja1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_20240325_203139 cmos clear.jpg\" data-origin-width=\"1200\" data-origin-height=\"900\"/></span><figcaption>Firebat MN56 7840HS - CMOS clear jumper</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">참고로 메인보드의 바이오스는 AMI를 사용하며, 설정할 수 있는 것은 별로 없으며, 전원 설정을 BALANCED, QUIET, PERFORMANCE 정도로 설정할 수 있는 정도만 만질 수 있다. 오버 기능도 있긴 한데, 가뜩이나 발열도 못잡는데 오버하면 CPU나 메인보드가 죽을 수도 있다고 생각된다.</p>\n<p data-ke-size=\"size16\">시스템에 대한 자세한 정보는 CPU-Z로 확인해보면 다음과 같이 살펴볼 수 있다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"firebat mn56 7840hs CPU-z.jpg\" data-origin-width=\"606\" data-origin-height=\"603\"><span data-url=\"https://blog.kakaocdn.net/dn/eGuSGF/btsIhv4VmwU/mLSWXb0ocjZUzDBLa2oKa1/img.jpg\" data-phocus=\"phocus\" data-alt=\"AMD 7840HS - CPU-Z\"><img src=\"https://blog.kakaocdn.net/dn/eGuSGF/btsIhv4VmwU/mLSWXb0ocjZUzDBLa2oKa1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FeGuSGF%2FbtsIhv4VmwU%2FmLSWXb0ocjZUzDBLa2oKa1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"firebat mn56 7840hs CPU-z.jpg\" data-origin-width=\"606\" data-origin-height=\"603\"/></span><figcaption>AMD 7840HS - CPU-Z</figcaption>\n</figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"firebat mn56 7840hs mainboard.jpg\" data-origin-width=\"606\" data-origin-height=\"603\"><span data-url=\"https://blog.kakaocdn.net/dn/ySi4Q/btsIjaLP2nB/0kk3Q7saNv3zOSJoij4n7K/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 mainboard, BIOS, PCIe\"><img src=\"https://blog.kakaocdn.net/dn/ySi4Q/btsIjaLP2nB/0kk3Q7saNv3zOSJoij4n7K/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FySi4Q%2FbtsIjaLP2nB%2F0kk3Q7saNv3zOSJoij4n7K%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"firebat mn56 7840hs mainboard.jpg\" data-origin-width=\"606\" data-origin-height=\"603\"/></span><figcaption>Firebat MN56 mainboard, BIOS, PCIe</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size26\">3. 발열 및 팬 소음</h2>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">전원 정책(power control policy)를 balanced로 두는 경우 유튜브나 음악을 틀어놓고, 구글 문서 작업을 할 경우 CPU 사용량은 10~20%이내를 유지했고, 온도도 매우 착했다. 아래 그림에서 볼 수 있듯이 평상시 온도는 CPU의 경우 40도 내외였고, 간혹 갑자기 로드가 치솟을 때도 70도를 넘지 않았다. CPU의 내장 그래픽인 GPU 코어의 경우 35~43도 정도로 매우 착했다. 그리고 삼성 DDR5 램의 경우 평상시에도 CPU보다 약간 더 높은 온도로서 약 45도 정도를 유지했다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"firebat mn56 7840hs HWmonitor - copy crop.jpg\" data-origin-width=\"942\" data-origin-height=\"1829\"><span data-url=\"https://blog.kakaocdn.net/dn/bORHss/btsIhw3QZSY/n8Y4KXBOD9V9lqbyVdAe7k/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 7840HS - CPU, GPU, RAM temperature\"><img src=\"https://blog.kakaocdn.net/dn/bORHss/btsIhw3QZSY/n8Y4KXBOD9V9lqbyVdAe7k/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbORHss%2FbtsIhw3QZSY%2Fn8Y4KXBOD9V9lqbyVdAe7k%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"firebat mn56 7840hs HWmonitor - copy crop.jpg\" data-origin-width=\"942\" data-origin-height=\"1829\"/></span><figcaption>Firebat MN56 7840HS - CPU, GPU, RAM temperature</figcaption>\n</figure>\n</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">다만 게임을 실행하면 온도가 매우 높은 수준으로 올라갔다. 테스트용 게임으로는 GTA5를 실행했고, FHD 해상도에 60Hz 중옵으로도 최하 70에서 80도 중반 이상까지 올라갔다. 심각할 정도로 열이 높았다.</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">특히 DDR5 램도 엄청나게 뜨거워서 75도를 왔다갔다 했다. 아래는 열화상 카메라로 찍은 사진이다. 원래 DDR5가 발열이 있긴 한데, 노트북용 램은 더 뜨거운것 같다. 아마도 겹쳐있어서 그런 것이 아닐까 싶다. 나중에 얇은 구리형 노트북용 램 방열판을 붙여봤는데 전혀 효과가 없었다. 혹시라도 램 방열판을 붙이실 분들은 그냥 하지 마시라고 권해드리고 싶다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_20240325_203029_firebat_mn56.jpg\" data-origin-width=\"1600\" data-origin-height=\"960\"><span data-url=\"https://blog.kakaocdn.net/dn/daVYnG/btsIgOcYJTm/RSq4dkTk1ucKaM1FL7x4y0/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 7840HS - temperature (game playing)\"><img src=\"https://blog.kakaocdn.net/dn/daVYnG/btsIgOcYJTm/RSq4dkTk1ucKaM1FL7x4y0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdaVYnG%2FbtsIgOcYJTm%2FRSq4dkTk1ucKaM1FL7x4y0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_20240325_203029_firebat_mn56.jpg\" data-origin-width=\"1600\" data-origin-height=\"960\"/></span><figcaption>Firebat MN56 7840HS - temperature (game playing)</figcaption>\n</figure>\n</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">특히 위 그림에 표시된 특정 부분이 뜨거웠다. 살펴보니 LR15 칩은 Vrms로 전원칩이고, 그 아래에 있는 JWH7030도 같은 전원쪽 칩셋인거 같은데, 특이하게 총 5개의 칩셋 중에 왼쪽의 2개만 뜨겁고 나머지는 미지근하다. 전원 칩셋 중에 2개만 열심히 일하는 것 같다. 그래서 라즈베리파이에 붙이는 용도로 샀던 방열판을 LR15에 붙여봤는데, 큰 효과는 없었다. 게다가 JWH7030은 너무 작아서 붙일 수 있는 방열판이 없었다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"resize_20240412_162752.jpg\" data-origin-width=\"1024\" data-origin-height=\"768\"><span data-url=\"https://blog.kakaocdn.net/dn/xcBNi/btsIhgtdjWN/tl3Yz7Fk9ZEwyVKXUal4y1/img.jpg\" data-phocus=\"phocus\" data-alt=\"Firebat MN56 - LR15, JWH7030 Vrms\"><img src=\"https://blog.kakaocdn.net/dn/xcBNi/btsIhgtdjWN/tl3Yz7Fk9ZEwyVKXUal4y1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FxcBNi%2FbtsIhgtdjWN%2Ftl3Yz7Fk9ZEwyVKXUal4y1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"resize_20240412_162752.jpg\" data-origin-width=\"1024\" data-origin-height=\"768\"/></span><figcaption>Firebat MN56 - LR15, JWH7030 Vrms</figcaption>\n</figure>\n</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">Firebat에서 뭔가 뒷판을 냉각할 수 있는 애드온 쿨러를 만들던지 해야지 이거 너무 뜨거워서 문제일 듯 싶다. 실제로 지금은 그냥 뒷판 따고 거기에 노트북 쿨러용 팬을 거치해서 쓰고 있다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size26\">4. 소프트웨어 드라이버</h2>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">n100의 경우 드라이버가 제대로 구비되지 않아서 좀 고생을 했는데, Firebat MN56 7840HS 제품은 거의 표준 드라이버를 사용해서 따로 드라이버를 백업 받을 필요가 없었다. 해당 제품은 AMD에서 종합 드라이버, 인텔 무선 드라이버를 다운로드해서 설치하면 끝이었다.[2] 나머지는 윈도우 기본 드라이버로 모두 인식되었다.</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">특히 i226-v 2.5Gbps LAN의 경우 드라이버를 다운로드 하는 방법과, 속도 저하 및 끊김 등의 문제가 생길 수 있으므로 이 글 아래에 있는 링크를 참고하기 바란다.</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">리눅스에서는 따로 드라이버를 설치해줄 필요가 없었다. Fedora 40 설치시 아무런 문제없이 잘 설치되었다. 현재는 윈도11, 리눅스를 듀얼 부팅으로 사용하고 있다.</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">참고로 미니 PC의 경우 기본으로 탑재되어있는 윈도우가 해킹 프로그램이 설치되어있는 경우도 있다고 하니, 그냥 밀어버리고 새롭게 설치하는 것이 좋다. 그런데 표준 드라이버를 사용하지 않는 경우에는 호환성에 문제가 있어서 드라이버를 미리 백업받는 것을 권장하지만, 이 제품(Firebat MN56)처럼 표준 드라이버를 사용하는 경우에는 그냥 포맷해도 문제가 없다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size26\">5. 총평</h2>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">전체적으로 발열이 문제인 것을 제외하면 호환성이나 관련 문제는 없었다. 이 제품은 장단점은 아래와 같다.</p>\n<table style=\"background-color: #ffffff; color: #5c5c5c; text-align: start; border-collapse: collapse; width: 100%;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr>\n<td style=\"color: #666666;\">장점</td>\n<td style=\"color: #666666;\">윗면에 대형 플라워 팬을 사용해서 소음이 적다.<br />AMD나 intel의 표준 하드웨어 드라이버를 사용하므로 소프트웨어 호환성 걱정이 없다.<br />USB4를 지원하므로 USB-C로 모니터 출력이나 혹은 썬더볼트 독을 연결하면 엄청난 확장을 할 수 있다.<br />평상시에는 10W 수준으로 적은 전력을 소비하는 장점이 있다.</td>\n</tr>\n<tr>\n<td style=\"color: #666666;\">단점</td>\n<td style=\"color: #666666;\">게임 실행시 발열이 엄청나게 발생한다. 뒷판을 열어서 식히지 않으면 장기적인 사용에서 문제가 될 가능성이 있다고 생각된다. <br />다만 일반 오피스 사용이나 유튜브 시청 정도로는 발열이 거의 없다.</td>\n</tr>\n</tbody>\n</table>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">이 제품은 게임 실행시 발열이 심했기에 따로 냉각하지 않으면 고장날지도 모른다는 생각이 들었다. 솔직히 80~90도에 가까운 발열을 제품이 계속 버틸 수 있을까 의문이다. 하지만 리눅스 서버로 사용하면 게임 실행시와 달리 발열도 없으므로 꽤 괜찮다고 생각한다.</p>\n<p style=\"background-color: #ffffff; color: #5c5c5c; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">레퍼런스</h2>\n<p data-ke-size=\"size16\">[1] AMD 7840hs spec. <a href=\"https://www.amd.com/ko/products/processors/laptop/ryzen/7000-series/amd-ryzen-7-7840hs.html\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://www.amd.com/ko/products/processors/laptop/ryzen/7000-series/amd-ryzen-7-7840hs.html</a></p>\n<p data-ke-size=\"size16\">[2] i225-v, i226-v 드라이버 설치 및 끊김 문제 설정, <a href=\"https://sunyzero.tistory.com/276\" target=\"_blank\" rel=\"noopener&nbsp;noreferrer\">https://sunyzero.tistory.com/276</a></p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\">히스토리</h2>\n<p data-ke-size=\"size16\">20240630 초안</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "AMD의 7840HS CPU (내장 그래픽 780M)을 탑재한 미니PC Firebat mn56을 알리에서 구입했다. 지난번 n100 미니 PC도 좋지만 성능이 더 좋다는 미니PC도 궁금했기 때문이었다. 보통 Beelink나 GMKtek, Firebat 제품을 많이 구매하는데, Beelink는 약간 소음이 있다고 한다. 대형 플라워 팬을 가지고 있는 Firebat MN56이 조용하다길래 해당 제품으로 구매했다.\n보통 고성능 미니PC는 AMD의 7840HS나 7735HS를 많이 사용하는데, 비슷하게 보이지만 비교하면 CPU 세대가 다르고 7840HS쪽의 내장 그래픽이 훨씬 성능이 좋다는 것이 가장 큰 차이다. (AMD의 미니PC용 CPU는 십자리숫자가 세대를 의미한다. 따라서 7735 는 3세대, 7740은 4세대이다)\n24년 3월에 구입해서 4월초부터 사용해서 현재까지 약 2개월 정도 사용했고 그에 따라서 리뷰를 남긴다.\n \n1. 제품 스펙 및 특징\n제품명\nFirebat MN56\n\n\nCPU\nAMD Ryzen 7840HS [1]\n3.8GHz, 8 core, 16MB cache, Memory(DDR5 5600Mhz)\n\n\nRAM\n16GB  = 8GB (DDR5, 5600MHz) x2 \n= 램이 약간 부족한 듯 싶어서 따로 삼성 DDR5 16GB를 2개 구입해서 업그레이드 했다.\n\n\nSSD\nNVMe 512GB (양쯔 메모리)\n\n\nNetwork (Wired)\nintel i226 (2.5Ghz)\nRealtek RTL8111H (1Gbps)\n\n\nNetwork (Wireless)\nIntel AX200\n- WiFi 6E, Bluetooth 5.3\n\n\nUSB\nUSB-C (USB4 40Gbps, DP-Alt 디스플레이 지원) x1\nUSB-A 3.2 Gen2 (10Gbps) x2 (전면)\nUSB-A 2.0 x2 (후면)\n\n\n디스플레이\nHDMI 2.1 (4K 60Hz) x1 \nDP 1.4  (4K 60Hz) x1\n\n\nAudio\nRealtek audio\n마이크, 헤드폰 겸용 3극 단자 지원\n\n\nPower\n20V/5A DC 어댑터\n\n\nPrice\n$300 초반 (세금 포함)\n\n\n\nFirebat MN56에서 제공하는 전후면 인터페이스는 아래 그림을 보면 쉽게 이해할 수 있다.\nFirebat mn56 7840HS - 후면(위), 전면(아래)\n\n\n위 사진에서 제품의 후면 및 전면 단자를 순서대로 적으면 아래와 같다.\n후면 단자 \n(왼쪽부터)\n전원(20V, 5A), 2.5G LAN (i226-v), 1G LAN(Realtek), DP 1.4, HDMI 2.1, USB 2.0 2개\n\n\n전면 단자\n(왼쪽부터)\n전원 버튼, 헤드폰 3극 단자, USB 3.2 Gen2 (10Gbps) 2개, USB4 (DP-alt, PD지원), LED 버튼\n\n\n\n후면의 USB-C 단자는 DC 전원 전용이므로 USB4나 TB4(썬더볼트4) 단자를 꼽으면 부팅하다가 그냥 꺼진다. 실제로 100W를 지원하는 썬더볼트4 독을 연결해봤는데 전원이 잠깐 들어왔다가 바로 꺼졌다.\n원래 시스템에서 USB4 포트를 2개까지 지원하는데 1개만 만들어 둔 것은 좀 아쉽다고 생각한다. 만일 2개를 지원했다면 USB 허브 연결과 USB-C 외장 모니터까지 바로 연결할 수 있을텐데 말이다.\n전원 버튼이 매우 민감해서 헤드폰 잭이나 USB 단자를 꼽다가 눌러서 꺼트린 적이 있었다. 이건 좀 주의해야 할 듯 싶다.\n \n2. 내부 구조\n뒷판은 나사를 빼면 들어낼 수 있다. 딱히 조심해야 할 것은 없다. 뒷판은 VESA 홀 규격을 지원하고 있다.\nFirebat MN56 7840HS 뒷판 내부\n\n\n램은 삼성 DDR5 5600으로 장착되어있고, SSD는 NVMe 양쯔 메모리 제품인 듯 싶다. 디램리스로 보인다. NVMe를 들어내면 아랫쪽에 intel AX200NGW 무선 모듈이 존재한다. 무선 모듈과 NVMe SSD와 간격이 너무 좁아서 NVMe에 양면 방열판은 사용이 불가하다.\nFirebat MN56 7840HS 무선 모듈 intel AX200\n\n\nCMOD clear 점퍼는 NVMe 슬롯 바로 근처에 빨간색 점퍼로 되어있다. 혹시라도 CMOS 설정을 잘못해서 부팅이 잘 안되면 클리어쪽으로 점퍼를 바꾸고 재부팅하면 된다. 물론 재부팅 후에는 다시 원상복구를 해야 한다.\nFirebat MN56 7840HS - CMOS clear jumper\n\n\n참고로 메인보드의 바이오스는 AMI를 사용하며, 설정할 수 있는 것은 별로 없으며, 전원 설정을 BALANCED, QUIET, PERFORMANCE 정도로 설정할 수 있는 정도만 만질 수 있다. 오버 기능도 있긴 한데, 가뜩이나 발열도 못잡는데 오버하면 CPU나 메인보드가 죽을 수도 있다고 생각된다.\n시스템에 대한 자세한 정보는 CPU-Z로 확인해보면 다음과 같이 살펴볼 수 있다.\nAMD 7840HS - CPU-Z\n\nFirebat MN56 mainboard, BIOS, PCIe\n\n\n \n \n3. 발열 및 팬 소음\n전원 정책(power control policy)를 balanced로 두는 경우 유튜브나 음악을 틀어놓고, 구글 문서 작업을 할 경우 CPU 사용량은 10~20%이내를 유지했고, 온도도 매우 착했다. 아래 그림에서 볼 수 있듯이 평상시 온도는 CPU의 경우 40도 내외였고, 간혹 갑자기 로드가 치솟을 때도 70도를 넘지 않았다. CPU의 내장 그래픽인 GPU 코어의 경우 35~43도 정도로 매우 착했다. 그리고 삼성 DDR5 램의 경우 평상시에도 CPU보다 약간 더 높은 온도로서 약 45도 정도를 유지했다.\nFirebat MN56 7840HS - CPU, GPU, RAM temperature\n\n\n다만 게임을 실행하면 온도가 매우 높은 수준으로 올라갔다. 테스트용 게임으로는 GTA5를 실행했고, FHD 해상도에 60Hz 중옵으로도 최하 70에서 80도 중반 이상까지 올라갔다. 심각할 정도로 열이 높았다.\n특히 DDR5 램도 엄청나게 뜨거워서 75도를 왔다갔다 했다. 아래는 열화상 카메라로 찍은 사진이다. 원래 DDR5가 발열이 있긴 한데, 노트북용 램은 더 뜨거운것 같다. 아마도 겹쳐있어서 그런 것이 아닐까 싶다. 나중에 얇은 구리형 노트북용 램 방열판을 붙여봤는데 전혀 효과가 없었다. 혹시라도 램 방열판을 붙이실 분들은 그냥 하지 마시라고 권해드리고 싶다.\nFirebat MN56 7840HS - temperature (game playing)\n\n\n특히 위 그림에 표시된 특정 부분이 뜨거웠다. 살펴보니 LR15 칩은 Vrms로 전원칩이고, 그 아래에 있는 JWH7030도 같은 전원쪽 칩셋인거 같은데, 특이하게 총 5개의 칩셋 중에 왼쪽의 2개만 뜨겁고 나머지는 미지근하다. 전원 칩셋 중에 2개만 열심히 일하는 것 같다. 그래서 라즈베리파이에 붙이는 용도로 샀던 방열판을 LR15에 붙여봤는데, 큰 효과는 없었다. 게다가 JWH7030은 너무 작아서 붙일 수 있는 방열판이 없었다.\nFirebat MN56 - LR15, JWH7030 Vrms\n\n\n \nFirebat에서 뭔가 뒷판을 냉각할 수 있는 애드온 쿨러를 만들던지 해야지 이거 너무 뜨거워서 문제일 듯 싶다. 실제로 지금은 그냥 뒷판 따고 거기에 노트북 쿨러용 팬을 거치해서 쓰고 있다.\n \n4. 소프트웨어 드라이버\nn100의 경우 드라이버가 제대로 구비되지 않아서 좀 고생을 했는데, Firebat MN56 7840HS 제품은 거의 표준 드라이버를 사용해서 따로 드라이버를 백업 받을 필요가 없었다. 해당 제품은 AMD에서 종합 드라이버, 인텔 무선 드라이버를 다운로드해서 설치하면 끝이었다.[2] 나머지는 윈도우 기본 드라이버로 모두 인식되었다.\n특히 i226-v 2.5Gbps LAN의 경우 드라이버를 다운로드 하는 방법과, 속도 저하 및 끊김 등의 문제가 생길 수 있으므로 이 글 아래에 있는 링크를 참고하기 바란다.\n \n리눅스에서는 따로 드라이버를 설치해줄 필요가 없었다. Fedora 40 설치시 아무런 문제없이 잘 설치되었다. 현재는 윈도11, 리눅스를 듀얼 부팅으로 사용하고 있다.\n참고로 미니 PC의 경우 기본으로 탑재되어있는 윈도우가 해킹 프로그램이 설치되어있는 경우도 있다고 하니, 그냥 밀어버리고 새롭게 설치하는 것이 좋다. 그런데 표준 드라이버를 사용하지 않는 경우에는 호환성에 문제가 있어서 드라이버를 미리 백업받는 것을 권장하지만, 이 제품(Firebat MN56)처럼 표준 드라이버를 사용하는 경우에는 그냥 포맷해도 문제가 없다.\n \n5. 총평\n전체적으로 발열이 문제인 것을 제외하면 호환성이나 관련 문제는 없었다. 이 제품은 장단점은 아래와 같다.\n장점\n윗면에 대형 플라워 팬을 사용해서 소음이 적다.\nAMD나 intel의 표준 하드웨어 드라이버를 사용하므로 소프트웨어 호환성 걱정이 없다.\nUSB4를 지원하므로 USB-C로 모니터 출력이나 혹은 썬더볼트 독을 연결하면 엄청난 확장을 할 수 있다.\n평상시에는 10W 수준으로 적은 전력을 소비하는 장점이 있다.\n\n\n단점\n게임 실행시 발열이 엄청나게 발생한다. 뒷판을 열어서 식히지 않으면 장기적인 사용에서 문제가 될 가능성이 있다고 생각된다. \n다만 일반 오피스 사용이나 유튜브 시청 정도로는 발열이 거의 없다.\n\n\n\n이 제품은 게임 실행시 발열이 심했기에 따로 냉각하지 않으면 고장날지도 모른다는 생각이 들었다. 솔직히 80~90도에 가까운 발열을 제품이 계속 버틸 수 있을까 의문이다. 하지만 리눅스 서버로 사용하면 게임 실행시와 달리 발열도 없으므로 꽤 괜찮다고 생각한다.\n \n레퍼런스\n[1] AMD 7840hs spec. https://www.amd.com/ko/products/processors/laptop/ryzen/7000-series/amd-ryzen-7-7840hs.html\n[2] i225-v, i226-v 드라이버 설치 및 끊김 문제 설정, https://sunyzero.tistory.com/276\n \n히스토리\n20240630 초안",
        "guid": "http://sunyzero.tistory.com/298",
        "categories": [
          "컴퓨터 관련/기타 등등",
          "amd 7840hs",
          "firebat mn56 mini pc",
          "i226-v",
          "미니PC",
          "알리 익스프레스"
        ],
        "isoDate": "2024-06-30T13:01:02.000Z"
      }
    ]
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": [
      {
        "creator": "subokim",
        "title": "SI 산업 가이드북 2024년 상반기 회고",
        "link": "https://subokim.wordpress.com/2024/07/03/si-%ec%82%b0%ec%97%85-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%b6%81-2024%eb%85%84-%ec%83%81%eb%b0%98%ea%b8%b0-%ed%9a%8c%ea%b3%a0/",
        "pubDate": "Wed, 03 Jul 2024 01:17:33 +0000",
        "dc:creator": "subokim",
        "comments": "https://subokim.wordpress.com/2024/07/03/si-%ec%82%b0%ec%97%85-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%b6%81-2024%eb%85%84-%ec%83%81%eb%b0%98%ea%b8%b0-%ed%9a%8c%ea%b3%a0/#respond",
        "content": "작년 12월 노희선 리더님 미팅 후 1월부터 만들고 있는 블로그북.갑,을 모두 경험 사다리가 끊긴 작은 SI 개발자들과 기업들에게 보탬이 될까 싶어 쓰게 되었습니다. 벌써 누적 조회수가 10만회가 넘었네요.아직 20% 정도 밖에 안 썼는데 일이 바빠서 진도가 잘 안나가는군요. &#8220;아웃소싱 생태계&#8221;, &#8220;엔터프라이즈 마켓&#8221;이라는 정확한 용어를 쓰고 싶었지만, 약간 자극 마케팅을 위해 &#8220;SI 산업&#8221;이라는 용어를 선택했습니다. 모두... <a class=\"more-link\" href=\"https://subokim.wordpress.com/2024/07/03/si-%ec%82%b0%ec%97%85-%ea%b0%80%ec%9d%b4%eb%93%9c%eb%b6%81-2024%eb%85%84-%ec%83%81%eb%b0%98%ea%b8%b0-%ed%9a%8c%ea%b3%a0/#more-13428\">Continue Reading &#8594;</a>",
        "contentSnippet": "작년 12월 노희선 리더님 미팅 후 1월부터 만들고 있는 블로그북.갑,을 모두 경험 사다리가 끊긴 작은 SI 개발자들과 기업들에게 보탬이 될까 싶어 쓰게 되었습니다. 벌써 누적 조회수가 10만회가 넘었네요.아직 20% 정도 밖에 안 썼는데 일이 바빠서 진도가 잘 안나가는군요. “아웃소싱 생태계”, “엔터프라이즈 마켓”이라는 정확한 용어를 쓰고 싶었지만, 약간 자극 마케팅을 위해 “SI 산업”이라는 용어를 선택했습니다. 모두... Continue Reading →",
        "guid": "http://subokim.wordpress.com/?p=13428",
        "categories": [
          "개발자의삶",
          "IT산업이야기",
          "IT스타트업"
        ],
        "isoDate": "2024-07-03T01:17:33.000Z"
      }
    ]
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": [
      {
        "title": "LLM 학습 데이터 작성 방법 ",
        "link": "http://daddynkidsmakers.blogspot.com/2024/07/llm.html",
        "pubDate": "2024-07-02T10:44:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은&nbsp;LLM 학습 데이터 작성 방법을 간략히 정리한다.<br /></div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl-IYGKlsmN-S-NaBbzLDtEWxVMQHDzn4GAqJyGZNoXqq46tHPTZbyOTN3rmbVxQlOSiFBKLc8qUQDWqEzrxa2wQT02wHhYjrIC0vscZt_gryqW3akHZwjT35-B_986Zj32S5vQ8dl3VP8m7iNtLkzeViywozSRapiolyEE5-HVGPup_Rt329u0fAqzFKg/s1200/llm-data-creation.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"600\" data-original-width=\"1200\" height=\"160\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgl-IYGKlsmN-S-NaBbzLDtEWxVMQHDzn4GAqJyGZNoXqq46tHPTZbyOTN3rmbVxQlOSiFBKLc8qUQDWqEzrxa2wQT02wHhYjrIC0vscZt_gryqW3akHZwjT35-B_986Zj32S5vQ8dl3VP8m7iNtLkzeViywozSRapiolyEE5-HVGPup_Rt329u0fAqzFKg/s320/llm-data-creation.png\" width=\"320\" /></a></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgq2UBjHyBh_OrW6AxkN0qDNAZqiBJs4Wp1fri2amPZVL0Jso-S2jD0Pl4IBZ_C0D-OTf2kqPdIODsqfBI1MKw-W7V9baLGDPZToadQKM_H4IKfnv6QH7UzjE6m8CZciaAYGCd1KMLXB2CIJmhGrAaax3zA_E2Ye6UVYrwRW547LRyM1coPTCwo7Mh4D_yV\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"498\" data-original-width=\"1152\" height=\"138\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgq2UBjHyBh_OrW6AxkN0qDNAZqiBJs4Wp1fri2amPZVL0Jso-S2jD0Pl4IBZ_C0D-OTf2kqPdIODsqfBI1MKw-W7V9baLGDPZToadQKM_H4IKfnv6QH7UzjE6m8CZciaAYGCd1KMLXB2CIJmhGrAaax3zA_E2Ye6UVYrwRW547LRyM1coPTCwo7Mh4D_yV\" width=\"320\" /></a></div><br /><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><br /></div></div><div style=\"text-align: left;\"><b>레퍼런스</b></div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://github.com/KristiyanVachev/Question-Generation\">Question-Generation: Generating multiple choice questions from text using Machine Learning</a></li><li><a href=\"https://github.com/holylovenia/question-answer-generation\">question-answer-generation: Question-answer generation from text</a></li><li><a href=\"https://github.com/nestordemeure/question_extractor\">question_extractor: Generate question/answer training pairs out of raw text.</a></li><li><a href=\"https://github.com/agusgun/qag-web\">qag-web: Website of Question Answer Generation</a></li><li><a href=\"https://github.com/MohammedAly22/GenQuest-RAG\">GenQuest-RAG: A Question Generation Application leveraging RAG and Weaviate vector store to be able to retrieve relative contexts and generate a more useful answer-aware questions</a></li><li><a href=\"https://github.com/topics/question-generator\">question-generator</a></li><li><a href=\"https://github.com/lamini-ai/docs-to-qa\">lamini-ai/docs-to-qa</a></li><li><a href=\"https://github.com/microsoft/llm-data-creation\">microsoft/llm-data-creation: Model, Code &amp; Data for the EMNLP'23 paper \"Making Large Language Models Better Data Creators\"</a></li><li><a href=\"https://github.com/facebookresearch/QA-Overlap\">facebookresearch/QA-Overlap: Code to support the paper \"Question and Answer Test-Train Overlap in Open-Domain Question Answering Datasets\"</a></li><li><a href=\"https://github.com/nalinrajendran/synthetic-LLM-QA-dataset-generator\">nalinrajendran/synthetic-LLM-QA-dataset-generator: Create synthetic datasets for training and testing Language Learning Models (LLMs) in a Question-Answering (QA) context</a></li><li><a href=\"https://github.com/night-chen/ToolQA\">night-chen/ToolQA: ToolQA, a new dataset to evaluate the capabilities of LLMs in answering challenging questions with external tools. It offers two levels (easy/hard) across eight real-life scenarios</a></li><li><a href=\"https://github.com/longluu/Medical-QA-LLM\">longluu/Medical-QA-LLM: Train LLMs on extractive Question-Answering in biomedical domain</a></li><li><a href=\"https://github.com/brmson/dataset-factoid-webquestions\">brmson/dataset-factoid-webquestions: WebQuestions QA Benchmarking Dataset</a></li><li><a href=\"https://github.com/ad-freiburg/large-qa-datasets\">ad-freiburg/large-qa-datasets: A collection of large question answering datasets</a></li></ul></div>",
        "contentSnippet": "이 글은 LLM 학습 데이터 작성 방법을 간략히 정리한다.\n\n\n\n\n\n\n\n\n레퍼런스\n\nQuestion-Generation: Generating multiple choice questions from text using Machine Learning\nquestion-answer-generation: Question-answer generation from text\nquestion_extractor: Generate question/answer training pairs out of raw text.\nqag-web: Website of Question Answer Generation\nGenQuest-RAG: A Question Generation Application leveraging RAG and Weaviate vector store to be able to retrieve relative contexts and generate a more useful answer-aware questions\nquestion-generator\nlamini-ai/docs-to-qa\nmicrosoft/llm-data-creation: Model, Code & Data for the EMNLP'23 paper \"Making Large Language Models Better Data Creators\"\nfacebookresearch/QA-Overlap: Code to support the paper \"Question and Answer Test-Train Overlap in Open-Domain Question Answering Datasets\"\nnalinrajendran/synthetic-LLM-QA-dataset-generator: Create synthetic datasets for training and testing Language Learning Models (LLMs) in a Question-Answering (QA) context\nnight-chen/ToolQA: ToolQA, a new dataset to evaluate the capabilities of LLMs in answering challenging questions with external tools. It offers two levels (easy/hard) across eight real-life scenarios\nlongluu/Medical-QA-LLM: Train LLMs on extractive Question-Answering in biomedical domain\nbrmson/dataset-factoid-webquestions: WebQuestions QA Benchmarking Dataset\nad-freiburg/large-qa-datasets: A collection of large question answering datasets",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-5980594092178287342",
        "isoDate": "2024-07-02T10:44:00.000Z"
      },
      {
        "title": "Langgraph 기반 다중 LLM 에이전트 개발하기",
        "link": "http://daddynkidsmakers.blogspot.com/2024/06/langgraph-llm.html",
        "pubDate": "2024-07-01T06:31:00.000Z",
        "author": "Daddy Maker",
        "content": "<div style=\"text-align: left;\">이 글은&nbsp;Langgraph를 이용해, 간단히 다중 LLM 에이전트를 개발하는 방법을 정리한 것이다.</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEihMsKtGKQbxsPM99lUm24tnF5T2Xphxr4q2D7v5S8C8Pnl2VqFCAo10mJIz8v3xdn4dRVv5FNVbrmtHVAfCVX4WAHLGbLknwZX2urilAjSjxMy3-hx2h36XZU-Ks82NzKQ-XifG9nhkmLQCwakGeubi-ITGuD705oj9LdtnjjAToqCQ1lDoPobebkthixW\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"544\" data-original-width=\"1600\" height=\"198\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEihMsKtGKQbxsPM99lUm24tnF5T2Xphxr4q2D7v5S8C8Pnl2VqFCAo10mJIz8v3xdn4dRVv5FNVbrmtHVAfCVX4WAHLGbLknwZX2urilAjSjxMy3-hx2h36XZU-Ks82NzKQ-XifG9nhkmLQCwakGeubi-ITGuD705oj9LdtnjjAToqCQ1lDoPobebkthixW=w582-h198\" width=\"582\" /></a></div><a href=\"https://zilliz.com/blog/local-agentic-rag-with-langraph-and-llama3\">Local Agentic RAG with LangGraph and Llama</a><br /><br /></div></div><div style=\"text-align: left;\"><div><b>개발 환경 설정</b></div><div>pip install langchain langgraph milvus</div><div><br /></div><div><b>RAG 처리하기</b></div><div><div>import os</div><div>from dotenv import load_dotenv</div><div>from typing import List</div><div>from typing_extensions import TypedDict</div><div>from langchain import hub</div><div>from langchain.globals import set_verbose, set_debug</div><div>from langchain_community.embeddings import HuggingFaceEmbeddings</div><div>from langchain_community.document_loaders import WebBaseLoader</div><div>from langchain_community.vectorstores import Chroma</div><div>from langchain_community.chat_models import ChatOllama</div><div>from langchain.prompts import PromptTemplate</div><div>from langchain.text_splitter import RecursiveCharacterTextSplitter</div><div>from langchain_core.output_parsers import JsonOutputParser</div><div>from langchain_core.output_parsers import StrOutputParser</div><div>from langchain_core.output_parsers import JsonOutputParser</div><div>from langchain.schema import Document</div><div><br /></div><div># setup environment for LLM RAG</div><div>load_dotenv()</div><div>set_debug(True)</div><div>set_verbose(True)</div><div><br /></div><div># Load documents</div><div>urls = [</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"https://lilianweng.github.io/posts/2023-06-23-agent/\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/\",</span></div><div>]</div><div><br /></div><div>docs = [WebBaseLoader(url).load() for url in urls]</div><div>docs_list = [item for sublist in docs for item in sublist]</div><div>text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>chunk_size=250, chunk_overlap=0</span></div><div>)</div><div>doc_splits = text_splitter.split_documents(docs_list)</div><div><br /></div><div># Create vectorstore and retriever</div><div>vectorstore = Chroma.from_documents(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents=doc_splits,</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>collection_name=\"rag_Chroma\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>embedding=HuggingFaceEmbeddings(),</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>persist_directory=\"./Chroma_rag.db\",</span></div><div><br /></div><div>)</div><div>retriever = vectorstore.as_retriever()</div><div><br /></div><div># Load LLM model using Ollama</div><div>local_llm = 'llama3'</div><div>llm = ChatOllama(model=local_llm, format=\"json\", temperature=0)</div><div><br /></div><div># Test grader prompt with JSON output</div><div>prompt = PromptTemplate(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>template=\"\"\"You are a grader assessing relevance&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>of a retrieved document to a user question. If the document contains keywords related to the user question,&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>grade it as relevant. It does not need to be a stringent test. The goal is to filter out erroneous retrievals.&nbsp;</span></div><div><span style=\"white-space: pre;\">\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Give a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question.</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Provide the binary score as a JSON with a single key 'score' and no premable or explaination.</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here is the retrieved document:&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{document}</span></div><div><span style=\"white-space: pre;\">\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here is the user question:&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{question}</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>input_variables=[\"question\", \"document\"],</span></div><div>)</div><div><br /></div><div>retrieval_grader = prompt | llm | JsonOutputParser()</div><div>question = \"agent memory\"</div><div>docs = retriever.invoke(question)</div><div>doc_txt = docs[1].page_content</div><div>print(retrieval_grader.invoke({\"question\": question, \"document\": doc_txt}))</div><div><br /></div><div># Test QA prompt</div><div>prompt = PromptTemplate(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>template=\"\"\"You are an assistant for question-answering tasks.&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know.&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Use three sentences maximum and keep the answer concise:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Question: {question}&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Context: {context}&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Answer:&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>input_variables=[\"question\", \"document\"],</span></div><div>)</div><div><br /></div><div>llm = ChatOllama(model=local_llm, temperature=0)</div><div><br /></div><div>def format_docs(docs): # Post-processing</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>return \"\\n\\n\".join(doc.page_content for doc in docs)</span></div><div><br /></div><div>rag_chain = prompt | llm | StrOutputParser() # Chain</div><div><br /></div><div>question = \"agent memory\"</div><div>docs = retriever.invoke(question)</div><div>generation = rag_chain.invoke({\"context\": docs, \"question\": question})</div><div>print(generation)</div><div><br /></div><div># Test hallucination grader prompt with JSON output</div><div>llm = ChatOllama(model=local_llm, format=\"json\", temperature=0)</div><div><br /></div><div>prompt = PromptTemplate(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>template=\"\"\"You are a grader assessing whether&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>an answer is grounded in / supported by a set of facts. Give a binary score 'yes' or 'no' score to indicate&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>whether the answer is grounded in / supported by a set of facts. Provide the binary score as a JSON with a&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>single key 'score' and no preamble or explanation.</span></div><div><span style=\"white-space: pre;\">\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here are the facts:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{documents}&nbsp;</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here is the answer:&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{generation}</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>input_variables=[\"generation\", \"documents\"],</span></div><div>)</div><div><br /></div><div>hallucination_grader = prompt | llm | JsonOutputParser()</div><div>generation = hallucination_grader.invoke({\"documents\": docs, \"generation\": generation})</div><div>print(generation)</div><div><br /></div><div># Test hallucination grader prompt&nbsp;</div><div>llm = ChatOllama(model=local_llm, format=\"json\", temperature=0)</div><div><br /></div><div>prompt = PromptTemplate(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>template=\"\"\"You are a grader assessing whether an&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>answer is useful to resolve a question. Give a binary score 'yes' or 'no' to indicate whether the answer is&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>useful to resolve a question. Provide the binary score as a JSON with a single key 'score' and no preamble or explanation.</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here is the answer:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{generation}&nbsp;</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Here is the question: {question}</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>input_variables=[\"generation\", \"question\"],</span></div><div>)</div><div><br /></div><div>answer_grader = prompt | llm | JsonOutputParser()</div><div>generation = answer_grader.invoke({\"question\": question,\"generation\": generation})</div><div>print(generation)</div><div><br /></div><div># Test router prompt</div><div>llm = ChatOllama(model=local_llm, format=\"json\", temperature=0)</div><div><br /></div><div>prompt = PromptTemplate(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>template=\"\"\"You are an expert at routing a&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>user question to a vectorstore or web search. Use the vectorstore for questions on LLM&nbsp; agents,&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>prompt engineering, and adversarial attacks. You do not need to be stringent with the keywords&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>in the question related to these topics. Otherwise, use web-search. Give a binary choice 'web_search'&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>or 'vectorstore' based on the question. Return the a JSON with a single key 'datasource' and&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>no premable or explaination.&nbsp;</span></div><div><span style=\"white-space: pre;\">\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Question to route:&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{question}\"\"\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>input_variables=[\"question\"],</span></div><div>)</div><div><br /></div><div>question_router = prompt | llm | JsonOutputParser()</div><div>question = \"llm agent memory\"</div><div>docs = retriever.get_relevant_documents(question)</div><div>doc_txt = docs[1].page_content</div><div>print(question_router.invoke({\"question\": question}))</div><div><br /></div><div><b>LLM 기반 다중 에이전트&nbsp;구현하기</b></div><div># Web search tool setup</div><div>from langchain_community.tools.tavily_search import TavilySearchResults</div><div>tavily_api_key = os.environ['TAVILY_API_KEY'] = &lt;<a href=\"https://app.tavily.com/home\">Travily API</a>&gt;</div><div>web_search_tool = TavilySearchResults(k=3,&nbsp; tavily_api_key=tavily_api_key)</div><div><br /></div><div># Define the graph state using langgraph</div><div>from langgraph.graph import END, StateGraph</div><div><br /></div><div>class GraphState(TypedDict):</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Represents the state of our graph.</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>Attributes:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>question: question</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>generation: LLM generation</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>web_search: whether to add search</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>documents: list of documents&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"\"\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question : str</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>generation : str</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>web_search : str</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents : List[str]</span></div><div><br /></div><div>def retrieve(state): # node. Retrieve documents from vectorstore</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args. state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns. state (dict): New key added to state, documents, that contains retrieved documents</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---RETRIEVE---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents = retriever.invoke(question)</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>return {\"documents\": documents, \"question\": question}</span></div><div><br /></div><div>def generate(state): # node. Generate answer using RAG on retrieved documents</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: state (dict): New key added to state, generation, that contains LLM generation</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---GENERATE---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents = state[\"documents\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>generation = rag_chain.invoke({\"context\": documents, \"question\": question})</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>return {\"documents\": documents, \"question\": question, \"generation\": generation}</span></div><div><br /></div><div>def grade_documents(state): # node. Determines whether the retrieved documents are relevant to the question If any document is not relevant, we will set a flag to run web search</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: state (dict): Filtered out irrelevant documents and updated web_search state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---CHECK DOCUMENT RELEVANCE TO QUESTION---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents = state[\"documents\"]</span></div><div><span style=\"white-space: pre;\">\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>filtered_docs = [] # Score each doc</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>web_search = \"No\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>for d in documents:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>score = retrieval_grader.invoke({\"question\": question, \"document\": d.page_content})</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>grade = score['score']</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>if grade.lower() == \"yes\": # Document relevant</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>print(\"---GRADE: DOCUMENT RELEVANT---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>filtered_docs.append(d)</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>else: # Document not relevant</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>print(\"---GRADE: DOCUMENT NOT RELEVANT---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span># We do not include the document in filtered_docs. We set a flag to indicate that we want to run web search</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>web_search = \"Yes\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>continue</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>return {\"documents\": filtered_docs, \"question\": question, \"web_search\": web_search}</span></div><div><span style=\"white-space: pre;\">\t</span></div><div>def web_search(state): # Web search based based on the question&nbsp;</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: state (dict): Appended web results to documents</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---WEB SEARCH---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents = state[\"documents\"]</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>docs = web_search_tool.invoke({\"query\": question}) # Web search</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>web_results = \"\\n\".join([d[\"content\"] for d in docs])</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>web_results = Document(page_content=web_results)</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>if documents is not None:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>documents.append(web_results)</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>else:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>documents = [web_results]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>return {\"documents\": documents, \"question\": question}</span></div><div><br /></div><div>def route_question(state): # Conditional edge. Route question to web search or RAG.</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: str: Next node to call</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---ROUTE QUESTION---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(question)</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>source = question_router.invoke({\"question\": question})&nbsp;&nbsp;</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(source)</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(source['datasource'])</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>if source['datasource'] == 'web_search':</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---ROUTE QUESTION TO WEB SEARCH---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>return \"websearch\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>elif source['datasource'] == 'vectorstore':</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---ROUTE QUESTION TO RAG---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>return \"vectorstore\"</span></div><div><br /></div><div>def decide_to_generate(state): # Determines whether to generate an answer, or add web search</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: str: Binary decision for next node to call</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---ASSESS GRADED DOCUMENTS---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>web_search = state[\"web_search\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>filtered_documents = state[\"documents\"]</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>if web_search == \"Yes\": # All documents have been filtered check_relevance. We will re-generate a new query</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---DECISION: ALL DOCUMENTS ARE NOT RELEVANT TO QUESTION, INCLUDE WEB SEARCH---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>return \"websearch\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>else: # We have relevant documents, so generate answer</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---DECISION: GENERATE---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>return \"generate\"</span></div><div><br /></div><div>def grade_generation_v_documents_and_question(state): # Conditional edge. Determines whether the generation is grounded in the document and answers question.</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Args: state (dict): The current graph state</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span># Returns: str: Decision for next node to call</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>print(\"---CHECK HALLUCINATIONS---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>question = state[\"question\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>documents = state[\"documents\"]</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>generation = state[\"generation\"]</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>score = hallucination_grader.invoke({\"documents\": documents, \"generation\": generation})</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>grade = score['score']</span></div><div><br /></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>if grade == \"yes\": # Check hallucination</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---DECISION: GENERATION IS GROUNDED IN DOCUMENTS---\")</span></div><div><span style=\"white-space: pre;\">\t\t</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>print(\"---GRADE GENERATION vs QUESTION---\") # Check question-answering</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>score = answer_grader.invoke({\"question\": question,\"generation\": generation})</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>grade = score['score']</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>if grade == \"yes\":</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>print(\"---DECISION: GENERATION ADDRESSES QUESTION---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>return \"useful\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>else:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>print(\"---DECISION: GENERATION DOES NOT ADDRESS QUESTION---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t\t</span>return \"not useful\"</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>else:</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>pprint(\"---DECISION: GENERATION IS NOT GROUNDED IN DOCUMENTS, RE-TRY---\")</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>return \"not supported\"</span></div><div><br /></div><div>workflow = StateGraph(GraphState)</div><div><br /></div><div># Define the nodes</div><div>workflow.add_node(\"websearch\", web_search) <span style=\"white-space: pre;\">\t</span># web search</div><div>workflow.add_node(\"retrieve\", retrieve) <span style=\"white-space: pre;\">\t</span># retrieve</div><div>workflow.add_node(\"grade_documents\", grade_documents) # grade documents</div><div>workflow.add_node(\"generate\", generate) <span style=\"white-space: pre;\">\t</span># generatae</div><div><br /></div><div># Build graph and compile</div><div>workflow.set_conditional_entry_point(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>route_question,</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"websearch\": \"websearch\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"vectorstore\": \"retrieve\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>},</span></div><div>)</div><div><br /></div><div>workflow.add_edge(\"retrieve\", \"grade_documents\")</div><div>workflow.add_conditional_edges(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"grade_documents\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>decide_to_generate,</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"websearch\": \"websearch\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"generate\": \"generate\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>},</span></div><div>)</div><div>workflow.add_edge(\"websearch\", \"generate\")</div><div>workflow.add_conditional_edges(</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>\"generate\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>grade_generation_v_documents_and_question,</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>{</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"not supported\": \"generate\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"useful\": END,</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>\"not useful\": \"websearch\",</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>},</span></div><div>)</div><div><br /></div><div>app = workflow.compile()</div><div><br /></div><div># Test the graph</div><div>from pprint import pprint</div><div>inputs = {\"question\": \"What are the types of agent memory?\"}</div><div>for output in app.stream(inputs):</div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t</span>for key, value in output.items():</span></div><div><span style=\"white-space: normal;\"><span style=\"white-space: pre;\">\t\t</span>pprint(f\"Finished running: {key}:\")</span></div><div>pprint(value[\"generation\"])</div></div><div><br /></div><div><b>실행 결과</b></div></div><div style=\"text-align: left;\">다음과 같이 출력되면 성공한 것이다..</div><div style=\"text-align: left;\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgsfFZv3fK3M_iyaFi2Iyc3i-SM2dth6KVTv9T0aICnZajPmvMEsgOheSoZ-mtZCZOzdLAWEEuYZ600VXIGPYsWVhGni820nlAvF-1hWSqUtr2vLMKeSqKDY50PYq2gKqpxQfswd_UES0Trb5k9CHFV9MUzpCNjJlrsDL4R1kQE6rFQfZ5BYlAwTBVTs9xg\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"729\" data-original-width=\"1444\" height=\"259\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgsfFZv3fK3M_iyaFi2Iyc3i-SM2dth6KVTv9T0aICnZajPmvMEsgOheSoZ-mtZCZOzdLAWEEuYZ600VXIGPYsWVhGni820nlAvF-1hWSqUtr2vLMKeSqKDY50PYq2gKqpxQfswd_UES0Trb5k9CHFV9MUzpCNjJlrsDL4R1kQE6rFQfZ5BYlAwTBVTs9xg=w510-h259\" width=\"510\" /></a></div></div><div style=\"text-align: left;\"><br /></div><div style=\"text-align: left;\"><b>레퍼런스</b></div><div style=\"text-align: left;\"><ul style=\"text-align: left;\"><li><a href=\"https://medium.com/@lifanov.a.v/integrating-langgraph-with-ollama-for-advanced-llm-applications-d6c10262dafa\">Integrating LangGraph with Ollama for Advanced LLM Applications | by Aleksandr Lifanov | Medium</a></li><li><a href=\"https://blog.paperspace.com/building-local-ai-agents-a-guide-to-langgraph-ai-agents-and-ollama/\">Building Local AI Agents: A Guide to LangGraph, AI Agents, and Ollama (paperspace.com)</a></li><li><a href=\"https://python.langchain.com/v0.2/docs/integrations/chat/ollama_functions/\">OllamaFunctions | LangChain</a></li><li><a href=\"https://medium.com/@daishadeniz/empowering-human-led-decision-flows-with-open-source-model-enabled-function-calls-in-langgraph-34c1acf7169d\">Empowering Human Led Decision Flows with Open Source Model Enabled Function Calls in Langgraph | by Daisha Drayton | Medium</a></li><li><a href=\"https://quickaitutorial.com/langgraph-adaptive-rag-llama3-python-project-easy-ai-chat-for-your-docs/\">LangGraph + Adaptive Rag + LLama3 Python Project: Easy AI/Chat For Your&nbsp;Docs 2024 (quickaitutorial.com)</a></li><li><a href=\"https://quickaitutorial.com/langgraph-create-your-hyper-ai-agent/\">LangGraph&nbsp;: Create Your Hyper AI&nbsp;Agent 2024 (quickaitutorial.com)</a></li></ul></div>",
        "contentSnippet": "이 글은 Langgraph를 이용해, 간단히 다중 LLM 에이전트를 개발하는 방법을 정리한 것이다.\n\n\nLocal Agentic RAG with LangGraph and Llama\n\n\n개발 환경 설정\npip install langchain langgraph milvus\n\n\nRAG 처리하기\n\nimport os\nfrom dotenv import load_dotenv\nfrom typing import List\nfrom typing_extensions import TypedDict\nfrom langchain import hub\nfrom langchain.globals import set_verbose, set_debug\nfrom langchain_community.embeddings import HuggingFaceEmbeddings\nfrom langchain_community.document_loaders import WebBaseLoader\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_community.chat_models import ChatOllama\nfrom langchain.prompts import PromptTemplate\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom langchain.schema import Document\n\n\n# setup environment for LLM RAG\nload_dotenv()\nset_debug(True)\nset_verbose(True)\n\n\n# Load documents\nurls = [\n\t\"https://lilianweng.github.io/posts/2023-06-23-agent/\",\n\t\"https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/\",\n\t\"https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/\",\n]\n\n\ndocs = [WebBaseLoader(url).load() for url in urls]\ndocs_list = [item for sublist in docs for item in sublist]\ntext_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\n\tchunk_size=250, chunk_overlap=0\n)\ndoc_splits = text_splitter.split_documents(docs_list)\n\n\n# Create vectorstore and retriever\nvectorstore = Chroma.from_documents(\n\tdocuments=doc_splits,\n\tcollection_name=\"rag_Chroma\",\n\tembedding=HuggingFaceEmbeddings(),\n\tpersist_directory=\"./Chroma_rag.db\",\n\n\n)\nretriever = vectorstore.as_retriever()\n\n\n# Load LLM model using Ollama\nlocal_llm = 'llama3'\nllm = ChatOllama(model=local_llm, format=\"json\", temperature=0)\n\n\n# Test grader prompt with JSON output\nprompt = PromptTemplate(\n\ttemplate=\"\"\"You are a grader assessing relevance \n\tof a retrieved document to a user question. If the document contains keywords related to the user question, \n\tgrade it as relevant. It does not need to be a stringent test. The goal is to filter out erroneous retrievals. \n\t\n\tGive a binary score 'yes' or 'no' score to indicate whether the document is relevant to the question.\n\tProvide the binary score as a JSON with a single key 'score' and no premable or explaination.\n\t \n\tHere is the retrieved document: \n\t{document}\n\t\n\tHere is the user question: \n\t{question}\n\t\"\"\",\n\tinput_variables=[\"question\", \"document\"],\n)\n\n\nretrieval_grader = prompt | llm | JsonOutputParser()\nquestion = \"agent memory\"\ndocs = retriever.invoke(question)\ndoc_txt = docs[1].page_content\nprint(retrieval_grader.invoke({\"question\": question, \"document\": doc_txt}))\n\n\n# Test QA prompt\nprompt = PromptTemplate(\n\ttemplate=\"\"\"You are an assistant for question-answering tasks. \n\tUse the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. \n\tUse three sentences maximum and keep the answer concise:\n\tQuestion: {question} \n\tContext: {context} \n\tAnswer: \n\t\"\"\",\n\tinput_variables=[\"question\", \"document\"],\n)\n\n\nllm = ChatOllama(model=local_llm, temperature=0)\n\n\ndef format_docs(docs): # Post-processing\n\treturn \"\\n\\n\".join(doc.page_content for doc in docs)\n\n\nrag_chain = prompt | llm | StrOutputParser() # Chain\n\n\nquestion = \"agent memory\"\ndocs = retriever.invoke(question)\ngeneration = rag_chain.invoke({\"context\": docs, \"question\": question})\nprint(generation)\n\n\n# Test hallucination grader prompt with JSON output\nllm = ChatOllama(model=local_llm, format=\"json\", temperature=0)\n\n\nprompt = PromptTemplate(\n\ttemplate=\"\"\"You are a grader assessing whether \n\tan answer is grounded in / supported by a set of facts. Give a binary score 'yes' or 'no' score to indicate \n\twhether the answer is grounded in / supported by a set of facts. Provide the binary score as a JSON with a \n\tsingle key 'score' and no preamble or explanation.\n\t\n\tHere are the facts:\n\t{documents} \n\n\n\tHere is the answer: \n\t{generation}\n\t\"\"\",\n\tinput_variables=[\"generation\", \"documents\"],\n)\n\n\nhallucination_grader = prompt | llm | JsonOutputParser()\ngeneration = hallucination_grader.invoke({\"documents\": docs, \"generation\": generation})\nprint(generation)\n\n\n# Test hallucination grader prompt \nllm = ChatOllama(model=local_llm, format=\"json\", temperature=0)\n\n\nprompt = PromptTemplate(\n\ttemplate=\"\"\"You are a grader assessing whether an \n\tanswer is useful to resolve a question. Give a binary score 'yes' or 'no' to indicate whether the answer is \n\tuseful to resolve a question. Provide the binary score as a JSON with a single key 'score' and no preamble or explanation.\n\t \n\tHere is the answer:\n\t{generation} \n\n\n\tHere is the question: {question}\n\t\"\"\",\n\tinput_variables=[\"generation\", \"question\"],\n)\n\n\nanswer_grader = prompt | llm | JsonOutputParser()\ngeneration = answer_grader.invoke({\"question\": question,\"generation\": generation})\nprint(generation)\n\n\n# Test router prompt\nllm = ChatOllama(model=local_llm, format=\"json\", temperature=0)\n\n\nprompt = PromptTemplate(\n\ttemplate=\"\"\"You are an expert at routing a \n\tuser question to a vectorstore or web search. Use the vectorstore for questions on LLM  agents, \n\tprompt engineering, and adversarial attacks. You do not need to be stringent with the keywords \n\tin the question related to these topics. Otherwise, use web-search. Give a binary choice 'web_search' \n\tor 'vectorstore' based on the question. Return the a JSON with a single key 'datasource' and \n\tno premable or explaination. \n\t\n\tQuestion to route: \n\t{question}\"\"\",\n\tinput_variables=[\"question\"],\n)\n\n\nquestion_router = prompt | llm | JsonOutputParser()\nquestion = \"llm agent memory\"\ndocs = retriever.get_relevant_documents(question)\ndoc_txt = docs[1].page_content\nprint(question_router.invoke({\"question\": question}))\n\n\nLLM 기반 다중 에이전트 구현하기\n# Web search tool setup\nfrom langchain_community.tools.tavily_search import TavilySearchResults\ntavily_api_key = os.environ['TAVILY_API_KEY'] = <Travily API>\nweb_search_tool = TavilySearchResults(k=3,  tavily_api_key=tavily_api_key)\n\n\n# Define the graph state using langgraph\nfrom langgraph.graph import END, StateGraph\n\n\nclass GraphState(TypedDict):\n\t\"\"\"\n\tRepresents the state of our graph.\n\n\n\tAttributes:\n\t\tquestion: question\n\t\tgeneration: LLM generation\n\t\tweb_search: whether to add search\n\t\tdocuments: list of documents \n\t\"\"\"\n\tquestion : str\n\tgeneration : str\n\tweb_search : str\n\tdocuments : List[str]\n\n\ndef retrieve(state): # node. Retrieve documents from vectorstore\n\t# Args. state (dict): The current graph state\n\t# Returns. state (dict): New key added to state, documents, that contains retrieved documents\n\tprint(\"---RETRIEVE---\")\n\tquestion = state[\"question\"]\n\tdocuments = retriever.invoke(question)\n\treturn {\"documents\": documents, \"question\": question}\n\n\ndef generate(state): # node. Generate answer using RAG on retrieved documents\n\t# Args: state (dict): The current graph state\n\t# Returns: state (dict): New key added to state, generation, that contains LLM generation\n\tprint(\"---GENERATE---\")\n\tquestion = state[\"question\"]\n\tdocuments = state[\"documents\"]\n\tgeneration = rag_chain.invoke({\"context\": documents, \"question\": question})\n\treturn {\"documents\": documents, \"question\": question, \"generation\": generation}\n\n\ndef grade_documents(state): # node. Determines whether the retrieved documents are relevant to the question If any document is not relevant, we will set a flag to run web search\n\t# Args: state (dict): The current graph state\n\t# Returns: state (dict): Filtered out irrelevant documents and updated web_search state\n\tprint(\"---CHECK DOCUMENT RELEVANCE TO QUESTION---\")\n\tquestion = state[\"question\"]\n\tdocuments = state[\"documents\"]\n\t\n\tfiltered_docs = [] # Score each doc\n\tweb_search = \"No\"\n\tfor d in documents:\n\t\tscore = retrieval_grader.invoke({\"question\": question, \"document\": d.page_content})\n\t\tgrade = score['score']\n\t\tif grade.lower() == \"yes\": # Document relevant\n\t\t\tprint(\"---GRADE: DOCUMENT RELEVANT---\")\n\t\t\tfiltered_docs.append(d)\n\t\telse: # Document not relevant\n\t\t\tprint(\"---GRADE: DOCUMENT NOT RELEVANT---\")\n\t\t\t# We do not include the document in filtered_docs. We set a flag to indicate that we want to run web search\n\t\t\tweb_search = \"Yes\"\n\t\t\tcontinue\n\treturn {\"documents\": filtered_docs, \"question\": question, \"web_search\": web_search}\n\t\ndef web_search(state): # Web search based based on the question \n\t# Args: state (dict): The current graph state\n\t# Returns: state (dict): Appended web results to documents\n\tprint(\"---WEB SEARCH---\")\n\tquestion = state[\"question\"]\n\tdocuments = state[\"documents\"]\n\n\n\tdocs = web_search_tool.invoke({\"query\": question}) # Web search\n\tweb_results = \"\\n\".join([d[\"content\"] for d in docs])\n\tweb_results = Document(page_content=web_results)\n\tif documents is not None:\n\t\tdocuments.append(web_results)\n\telse:\n\t\tdocuments = [web_results]\n\treturn {\"documents\": documents, \"question\": question}\n\n\ndef route_question(state): # Conditional edge. Route question to web search or RAG.\n\t# Args: state (dict): The current graph state\n\t# Returns: str: Next node to call\n\tprint(\"---ROUTE QUESTION---\")\n\tquestion = state[\"question\"]\n\tprint(question)\n\n\n\tsource = question_router.invoke({\"question\": question})  \n\tprint(source)\n\tprint(source['datasource'])\n\tif source['datasource'] == 'web_search':\n\t\tprint(\"---ROUTE QUESTION TO WEB SEARCH---\")\n\t\treturn \"websearch\"\n\telif source['datasource'] == 'vectorstore':\n\t\tprint(\"---ROUTE QUESTION TO RAG---\")\n\t\treturn \"vectorstore\"\n\n\ndef decide_to_generate(state): # Determines whether to generate an answer, or add web search\n\t# Args: state (dict): The current graph state\n\t# Returns: str: Binary decision for next node to call\n\tprint(\"---ASSESS GRADED DOCUMENTS---\")\n\tquestion = state[\"question\"]\n\tweb_search = state[\"web_search\"]\n\tfiltered_documents = state[\"documents\"]\n\n\n\tif web_search == \"Yes\": # All documents have been filtered check_relevance. We will re-generate a new query\n\t\tprint(\"---DECISION: ALL DOCUMENTS ARE NOT RELEVANT TO QUESTION, INCLUDE WEB SEARCH---\")\n\t\treturn \"websearch\"\n\telse: # We have relevant documents, so generate answer\n\t\tprint(\"---DECISION: GENERATE---\")\n\t\treturn \"generate\"\n\n\ndef grade_generation_v_documents_and_question(state): # Conditional edge. Determines whether the generation is grounded in the document and answers question.\n\t# Args: state (dict): The current graph state\n\t# Returns: str: Decision for next node to call\n\tprint(\"---CHECK HALLUCINATIONS---\")\n\tquestion = state[\"question\"]\n\tdocuments = state[\"documents\"]\n\tgeneration = state[\"generation\"]\n\n\n\tscore = hallucination_grader.invoke({\"documents\": documents, \"generation\": generation})\n\tgrade = score['score']\n\n\n\tif grade == \"yes\": # Check hallucination\n\t\tprint(\"---DECISION: GENERATION IS GROUNDED IN DOCUMENTS---\")\n\t\t\n\t\tprint(\"---GRADE GENERATION vs QUESTION---\") # Check question-answering\n\t\tscore = answer_grader.invoke({\"question\": question,\"generation\": generation})\n\t\tgrade = score['score']\n\t\tif grade == \"yes\":\n\t\t\tprint(\"---DECISION: GENERATION ADDRESSES QUESTION---\")\n\t\t\treturn \"useful\"\n\t\telse:\n\t\t\tprint(\"---DECISION: GENERATION DOES NOT ADDRESS QUESTION---\")\n\t\t\treturn \"not useful\"\n\telse:\n\t\tpprint(\"---DECISION: GENERATION IS NOT GROUNDED IN DOCUMENTS, RE-TRY---\")\n\t\treturn \"not supported\"\n\n\nworkflow = StateGraph(GraphState)\n\n\n# Define the nodes\nworkflow.add_node(\"websearch\", web_search) \t# web search\nworkflow.add_node(\"retrieve\", retrieve) \t# retrieve\nworkflow.add_node(\"grade_documents\", grade_documents) # grade documents\nworkflow.add_node(\"generate\", generate) \t# generatae\n\n\n# Build graph and compile\nworkflow.set_conditional_entry_point(\n\troute_question,\n\t{\n\t\t\"websearch\": \"websearch\",\n\t\t\"vectorstore\": \"retrieve\",\n\t},\n)\n\n\nworkflow.add_edge(\"retrieve\", \"grade_documents\")\nworkflow.add_conditional_edges(\n\t\"grade_documents\",\n\tdecide_to_generate,\n\t{\n\t\t\"websearch\": \"websearch\",\n\t\t\"generate\": \"generate\",\n\t},\n)\nworkflow.add_edge(\"websearch\", \"generate\")\nworkflow.add_conditional_edges(\n\t\"generate\",\n\tgrade_generation_v_documents_and_question,\n\t{\n\t\t\"not supported\": \"generate\",\n\t\t\"useful\": END,\n\t\t\"not useful\": \"websearch\",\n\t},\n)\n\n\napp = workflow.compile()\n\n\n# Test the graph\nfrom pprint import pprint\ninputs = {\"question\": \"What are the types of agent memory?\"}\nfor output in app.stream(inputs):\n\tfor key, value in output.items():\n\t\tpprint(f\"Finished running: {key}:\")\npprint(value[\"generation\"])\n\n\n실행 결과\n\n다음과 같이 출력되면 성공한 것이다..\n\n\n\n\n레퍼런스\n\nIntegrating LangGraph with Ollama for Advanced LLM Applications | by Aleksandr Lifanov | Medium\nBuilding Local AI Agents: A Guide to LangGraph, AI Agents, and Ollama (paperspace.com)\nOllamaFunctions | LangChain\nEmpowering Human Led Decision Flows with Open Source Model Enabled Function Calls in Langgraph | by Daisha Drayton | Medium\nLangGraph + Adaptive Rag + LLama3 Python Project: Easy AI/Chat For Your Docs 2024 (quickaitutorial.com)\nLangGraph : Create Your Hyper AI Agent 2024 (quickaitutorial.com)",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-4536090244844436384",
        "isoDate": "2024-07-01T06:31:00.000Z"
      },
      {
        "title": "ROS2 로봇 패키지 프로그램 개발 방법 정리",
        "link": "http://daddynkidsmakers.blogspot.com/2024/06/ros2_27.html",
        "pubDate": "2024-06-28T06:44:00.000Z",
        "author": "Daddy Maker",
        "content": "<p>이 글은&nbsp;ROS2 로봇 패키지 프로그램 개발 방법 정리한다.</p><p><b>URDF 모델링</b></p><div>시뮬레이션을 위한&nbsp;<a href=\"http://wiki.ros.org/urdf/Tutorials\">Universal Robot Description Format (URDF)</a>&nbsp;을 사용해 모델링한다. URDF는 XML포맷으로 로봇을 물리적으로 정의한다. 이 모델은 주요 두 컴포넌트가 있다.&nbsp;</div><div><ul><li>LINKS: 강체(RIGID PIECE)를 정의한다. 링크는 뼈와 같은 역할을 하며 각 조인트로 연결된다.</li><li>JOINTS: 조인트는 연결된 링크 간에 운동이 가능하게 한다. 조인트는 서보 모터 등으로 구현된다.</li></ul></div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjmlSGArtfXtKm8jLdQMdkbaMDaOCHYkMs6nFajpN5AfKfwjgUbUhKpivGVeYADUr03HfXvFYBp79KQWg_4jcIxgD05Wd_8JMWrwO4KCa9wYTrM7ZJwNln6q9Rtq2GVvxmLZsO4qlj03AGP492EabaEpxMCZOv5pBSxuprBCHUx-CMP9MV8_S-mL3Ig6c5g/s523/Screenshot%20from%202024-06-27%2019-04-49.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"403\" data-original-width=\"523\" height=\"215\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjmlSGArtfXtKm8jLdQMdkbaMDaOCHYkMs6nFajpN5AfKfwjgUbUhKpivGVeYADUr03HfXvFYBp79KQWg_4jcIxgD05Wd_8JMWrwO4KCa9wYTrM7ZJwNln6q9Rtq2GVvxmLZsO4qlj03AGP492EabaEpxMCZOv5pBSxuprBCHUx-CMP9MV8_S-mL3Ig6c5g/w278-h215/Screenshot%20from%202024-06-27%2019-04-49.png\" width=\"278\" /></a></div>회전 조인트는 라이다와 같이 회전 운동을 한다. 라이다를 가진 로버를 모델링을 위해, 터미널에서 다음을 설치한다.</div><div><div>sudo apt install ros-humble-joint-state-publisher-gui</div><div>sudo apt install ros-humble-xacro</div><br /></div><div><b>이동형 로버 모델링</b></div><div><div>연구를 위해, 간단한 이동형 로버를 모델링한다. 다음 명령을 실행한다.</div><div>cd ~/projects/ros2/src</div></div><div><div>ros2 pkg create --build-type ament_cmake basic_mobile_robot</div><div>mkdir config launch maps meshes models params rviz worlds</div><div>cd ~/projects/ros2</div><div>colcon build</div></div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEiVr7pRBJFjBnC8XyjTYcEXbbEPeby44CQj2y02RwQfJVqjZqjXQ7C6e-N0OgNPwYi-stoKNh3jS79pDOQ3dewFwEp5Duuor3goCh4vTL6VgVTwtLuJg5WK27iemLQBzv5YUsTH9faGOIDPMzbh0MZ2lwmLlGHZ2DfgFRbeJ_axeXpAJcroP5EF6HfdsB7_\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"135\" data-original-width=\"675\" height=\"80\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEiVr7pRBJFjBnC8XyjTYcEXbbEPeby44CQj2y02RwQfJVqjZqjXQ7C6e-N0OgNPwYi-stoKNh3jS79pDOQ3dewFwEp5Duuor3goCh4vTL6VgVTwtLuJg5WK27iemLQBzv5YUsTH9faGOIDPMzbh0MZ2lwmLlGHZ2DfgFRbeJ_axeXpAJcroP5EF6HfdsB7_=w400-h80\" width=\"400\" /></a></div><br />이제 다음과 유사한&nbsp;<a href=\"https://automaticaddison.com/coordinate-frames-and-transforms-for-ros-based-mobile-robots/\">로버 모델</a>을 만든다.&nbsp;</div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjyP0lfA6ttIr6N5N4FO6Yg7inkTYOYj-GPGaf3Ffznm0C_IWUQnpTp76BxDuv5kGCiMNVVMffMB_jzkgSaoRBjTDOhwRWLg6wa2vQFnss9FnMtOnNrMm3ib9wjxpOeAVH6FcrJbkiiQCeHQyOIUsh4SSa75WwS61JlSx9Xk7e_ErxLh9oqt1vJ1WlSU-i2\" style=\"margin-left: 1em; margin-right: 1em;\"></a><div class=\"separator\" style=\"clear: both;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjyP0lfA6ttIr6N5N4FO6Yg7inkTYOYj-GPGaf3Ffznm0C_IWUQnpTp76BxDuv5kGCiMNVVMffMB_jzkgSaoRBjTDOhwRWLg6wa2vQFnss9FnMtOnNrMm3ib9wjxpOeAVH6FcrJbkiiQCeHQyOIUsh4SSa75WwS61JlSx9Xk7e_ErxLh9oqt1vJ1WlSU-i2\" style=\"margin-left: 1em; margin-right: 1em;\"></a><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhpFeDg45tPiLpq2fJeH7IDZjiRuLcNDc_C0p5dnJh-hFeVgaYhrAb4wH3POV2_nJG5YM6drhyr5CasLLrm4MaudZIJr9Lyjdu_HIIkkVj0b1DP8BqwdXHwWn4V53ZM38zvZzoJvtf4JyTBO_YT1uki3XAo2o0wbvbX2V8fchHqpyvDGvNmdGjIiEveREML\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"376\" data-original-width=\"523\" height=\"144\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhpFeDg45tPiLpq2fJeH7IDZjiRuLcNDc_C0p5dnJh-hFeVgaYhrAb4wH3POV2_nJG5YM6drhyr5CasLLrm4MaudZIJr9Lyjdu_HIIkkVj0b1DP8BqwdXHwWn4V53ZM38zvZzoJvtf4JyTBO_YT1uki3XAo2o0wbvbX2V8fchHqpyvDGvNmdGjIiEveREML=w200-h144\" width=\"200\" /></a><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEjyP0lfA6ttIr6N5N4FO6Yg7inkTYOYj-GPGaf3Ffznm0C_IWUQnpTp76BxDuv5kGCiMNVVMffMB_jzkgSaoRBjTDOhwRWLg6wa2vQFnss9FnMtOnNrMm3ib9wjxpOeAVH6FcrJbkiiQCeHQyOIUsh4SSa75WwS61JlSx9Xk7e_ErxLh9oqt1vJ1WlSU-i2\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"409\" data-original-width=\"570\" height=\"144\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjyP0lfA6ttIr6N5N4FO6Yg7inkTYOYj-GPGaf3Ffznm0C_IWUQnpTp76BxDuv5kGCiMNVVMffMB_jzkgSaoRBjTDOhwRWLg6wa2vQFnss9FnMtOnNrMm3ib9wjxpOeAVH6FcrJbkiiQCeHQyOIUsh4SSa75WwS61JlSx9Xk7e_ErxLh9oqt1vJ1WlSU-i2=w200-h144\" width=\"200\" /></a></div></div><br /></div><div>이 모델은 두개의 바퀴(revolute joints), 앞 바퀴(caster wheel), IMU, GPS를 가진다.&nbsp;&nbsp;</div><div>cd&nbsp;~/projects/ros2/src/basic_mobile_robot/models</div><div>subl basic_mobile_bot_v1.urdf</div><div><br /></div><div>다음 코드를 입력한다.&nbsp;</div><div><pre class=\"ndfHFb-c4YZDc-fmcmS-DARUcf\" style=\"background-color: white; font-family: &quot;Courier New&quot;, Courier, monospace, arial, sans-serif; margin-bottom: 0px; margin-top: 0px; overflow-wrap: break-word; text-wrap: wrap; user-select: text;\"><span style=\"font-size: x-small;\">&lt;?xml version=\"1.0\" ?&gt;\n&lt;robot name=\"basic_mobile_bot\" xmlns:xacro=\"http://ros.org/wiki/xacro\"&gt;\n\n  &lt;!-- ****************** ROBOT CONSTANTS *******************************  --&gt;\n  &lt;!-- Define the size of the robot's main chassis in meters --&gt;\n  &lt;xacro:property name=\"base_width\" value=\"0.39\"/&gt;\n  &lt;xacro:property name=\"base_length\" value=\"0.70\"/&gt;\n  &lt;xacro:property name=\"base_height\" value=\"0.20\"/&gt;\n\t\n  &lt;!-- Define the shape of the robot's two back wheels in meters --&gt;\n  &lt;xacro:property name=\"wheel_radius\" value=\"0.14\"/&gt;\n  &lt;xacro:property name=\"wheel_width\" value=\"0.06\"/&gt;\n\n  &lt;!-- x-axis points forward, y-axis points to left, z-axis points upwards --&gt;\n  &lt;!-- Define the gap between the wheel and chassis along y-axis in meters --&gt;\n  &lt;xacro:property name=\"wheel_ygap\" value=\"0.035\"/&gt;\n\n  &lt;!-- Position the wheels along the z-axis --&gt;\n  &lt;xacro:property name=\"wheel_zoff\" value=\"0.05\"/&gt;\n\n  &lt;!-- Position the wheels along the x-axis --&gt;\n  &lt;xacro:property name=\"wheel_xoff\" value=\"0.221\"/&gt;\n\n  &lt;!-- Position the caster wheel along the x-axis --&gt;\n  &lt;xacro:property name=\"caster_xoff\" value=\"0.217\"/&gt;\n\n  &lt;!-- Define intertial property macros  --&gt;\n  &lt;xacro:macro name=\"box_inertia\" params=\"m w h d\"&gt;\n    &lt;inertial&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 ${pi/2}\"/&gt;\n      &lt;mass value=\"${m}\"/&gt;\n      &lt;inertia ixx=\"${(m/12) * (h*h + d*d)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(m/12) * (w*w + d*d)}\" iyz=\"0.0\" izz=\"${(m/12) * (w*w + h*h)}\"/&gt;\n    &lt;/inertial&gt;\n  &lt;/xacro:macro&gt;\n\n  &lt;xacro:macro name=\"cylinder_inertia\" params=\"m r h\"&gt;\n    &lt;inertial&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\" /&gt;\n      &lt;mass value=\"${m}\"/&gt;\n      &lt;inertia ixx=\"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy=\"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz=\"${(m/2) * (r*r)}\"/&gt;\n    &lt;/inertial&gt;\n  &lt;/xacro:macro&gt;\n\n  &lt;xacro:macro name=\"sphere_inertia\" params=\"m r\"&gt;\n    &lt;inertial&gt;\n      &lt;mass value=\"${m}\"/&gt;\n      &lt;inertia ixx=\"${(2/5) * m * (r*r)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(2/5) * m * (r*r)}\" iyz=\"0.0\" izz=\"${(2/5) * m * (r*r)}\"/&gt;\n    &lt;/inertial&gt;\n  &lt;/xacro:macro&gt;\n\n  &lt;!-- ****************** ROBOT BASE FOOTPRINT ***************************  --&gt;\n  &lt;!-- Define the center of the main robot chassis projected on the ground --&gt;\t\n  &lt;link name=\"base_footprint\"/&gt;\n\n  &lt;!-- The base footprint of the robot is located underneath the chassis --&gt;\n  &lt;joint name=\"base_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"base_footprint\"/&gt;\n    &lt;child link=\"base_link\" /&gt;\n    &lt;origin xyz=\"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy=\"0 0 0\"/&gt;\n  &lt;/joint&gt;\n\n  &lt;!-- ********************** ROBOT BASE *********************************  --&gt;\n  &lt;link name=\"base_link\"&gt;\n    &lt;visual&gt;\n      &lt;origin xyz=\"0 0 -0.05\" rpy=\"1.5707963267949 0 3.141592654\"/&gt;\n      &lt;geometry&gt;\n        &lt;mesh filename=\"package://basic_mobile_robot/meshes/robot_base.stl\" /&gt;\n      &lt;/geometry&gt;\n      &lt;material name=\"Red\"&gt;\n        &lt;color rgba=\"${255/255} ${0/255} ${0/255} 1.0\"/&gt;\n      &lt;/material&gt;\n    &lt;/visual&gt;\n\n    &lt;collision&gt;\n      &lt;geometry&gt;\n        &lt;box size=\"${base_length} ${base_width} ${base_height}\"/&gt;\n      &lt;/geometry&gt;\n    &lt;/collision&gt;\n\n    &lt;xacro:box_inertia m=\"40.0\" w=\"${base_width}\" d=\"${base_length}\" h=\"${base_height}\"/&gt;\n    \n  &lt;/link&gt;\n\n  &lt;gazebo reference=\"base_link\"&gt;\n    &lt;material&gt;Gazebo/Red&lt;/material&gt;\n  &lt;/gazebo&gt;\n\n  &lt;!-- *********************** DRIVE WHEELS ******************************  --&gt;\n\n  &lt;xacro:macro name=\"wheel\" params=\"prefix x_reflect y_reflect\"&gt;\n    &lt;link name=\"${prefix}_link\"&gt;\n      &lt;visual&gt;\n        &lt;origin xyz=\"0 0 0\" rpy=\"1.5707963267949 0 0\"/&gt;\n        &lt;geometry&gt;\n            &lt;cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/&gt;\n        &lt;/geometry&gt;\n        &lt;material name=\"White\"&gt;\n          &lt;color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/&gt;\n        &lt;/material&gt;\n      &lt;/visual&gt;\n      \n      &lt;collision&gt;\n        &lt;origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\"/&gt;\n        &lt;geometry&gt;\n          &lt;cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/&gt;\n        &lt;/geometry&gt;\n      &lt;/collision&gt;\n      \n      &lt;xacro:cylinder_inertia m=\"110.5\" r=\"${wheel_radius}\" h=\"${wheel_width}\"/&gt;\n      \n    &lt;/link&gt;\n\n    &lt;!-- Connect the wheels to the base_link at the appropriate location, and \n         define a continuous joint to allow the wheels to freely rotate about\n         an axis --&gt;\n    &lt;joint name=\"${prefix}_joint\" type=\"revolute\"&gt;\n      &lt;parent link=\"base_link\"/&gt;\n      &lt;child link=\"${prefix}_link\"/&gt;\n      &lt;origin xyz=\"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy=\"0 0 0\"/&gt;\n      &lt;limit upper=\"3.1415\" lower=\"-3.1415\" effort=\"30\" velocity=\"5.0\"/&gt;\n      &lt;axis xyz=\"0 1 0\"/&gt;\n    &lt;/joint&gt;\n  &lt;/xacro:macro&gt;\n\n  &lt;!-- Instantiate two wheels using the macro we just made through the \n       xacro:wheel tags. We also define the parameters to have one wheel\n       on both sides at the back of our robot (i.e. x_reflect=-1). --&gt;\n  &lt;xacro:wheel prefix=\"drivewhl_l\" x_reflect=\"-1\" y_reflect=\"1\" /&gt;\n  &lt;xacro:wheel prefix=\"drivewhl_r\" x_reflect=\"-1\" y_reflect=\"-1\" /&gt;\n\n  &lt;!-- *********************** CASTER WHEEL ******************************  --&gt;\n  &lt;!-- We add a caster wheel. It will be modeled as sphere.\n       We define the wheel’s geometry, material and the joint to connect it to \n       base_link at the appropriate location. --&gt;\n  &lt;link name=\"front_caster\"&gt;\n    &lt;visual&gt;\n      &lt;geometry&gt;\n        &lt;sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n      &lt;/geometry&gt;\n      &lt;material name=\"White\"&gt;\n        &lt;color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/&gt;\n      &lt;/material&gt;\n    &lt;/visual&gt;\n    &lt;collision&gt;\n      &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n      &lt;geometry&gt;\n        &lt;sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n      &lt;/geometry&gt;\n    &lt;/collision&gt;\n    &lt;xacro:sphere_inertia m=\"10.05\" r=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/&gt;\n  &lt;/link&gt;\n\n  &lt;gazebo reference=\"front_caster\"&gt;\n    &lt;mu1&gt;0.01&lt;/mu1&gt;\n    &lt;mu2&gt;0.01&lt;/mu2&gt;\n    &lt;material&gt;Gazebo/White&lt;/material&gt;\n  &lt;/gazebo&gt;\n\n  &lt;joint name=\"caster_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"base_link\"/&gt;\n    &lt;child link=\"front_caster\"/&gt;\n    &lt;origin xyz=\"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy=\"0 0 0\"/&gt;\n  &lt;/joint&gt;\n  \n  &lt;!-- *********************** IMU SETUP *********************************  --&gt;\n  &lt;!-- Each sensor must be attached to a link.                              --&gt; \n  \n  &lt;joint name=\"imu_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"base_link\"/&gt;\n    &lt;child link=\"imu_link\"/&gt;\n    &lt;origin xyz=\"-0.10 0 0.05\" rpy=\"0 0 0\"/&gt;\n  &lt;/joint&gt;\n\n  &lt;link name=\"imu_link\"/&gt;\n\n  &lt;!-- *********************** GPS SETUP **********************************  --&gt;\n  &lt;joint name=\"gps_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"base_link\"/&gt;\n    &lt;child link=\"gps_link\"/&gt;\n    &lt;origin xyz=\"0.10 0 0.05\" rpy=\"0 0 0\"/&gt;\n  &lt;/joint&gt;\n\n  &lt;link name=\"gps_link\"/&gt;\n\n&lt;/robot&gt;</span></pre></div><div><br /></div><div>이제 보이는 형태를 표현할 메쉬 파일을 STL 형식으로 다음 폴더에 저장한다. 해당 메쉬파일은&nbsp;<a href=\"https://drive.google.com/drive/folders/1e9yB8f_LD7ty0M1h_mbd0kB8Hxr4TvfV\">여기</a>(<a href=\"https://drive.google.com/drive/folders/1e9yB8f_LD7ty0M1h_mbd0kB8Hxr4TvfV\">https://drive.google.com/drive/folders/1e9yB8f_LD7ty0M1h_mbd0kB8Hxr4TvfV</a>) 에서 다운로드한다.</div><div>cd&nbsp;~/projects/ros2/src/basic_mobile_robot/meshes</div><div><br /></div><div>참고로, 이 메쉬 파일은 블렌더(blander)로 모델링된 것이다. 메쉬 저장 결과는 다음과 같다.</div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgyes9PvAn6Ecg_6QznGTSlViHCiGEIkEwe6EvVs9B_BxXQQBhdwYo52BfgIa4pVADvjK3QYlqMqdEKnzISrTqmwHOfZcl5oCyebiBG0bvmNotTse1aREXq04TBNKqZFwHYFwvkhqCnaLSWNt9LhNrzxVRXAeswQNPoN8YEnPbw59FP2-1B0PxL8XcIA7tD\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"350\" data-original-width=\"943\" height=\"149\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgyes9PvAn6Ecg_6QznGTSlViHCiGEIkEwe6EvVs9B_BxXQQBhdwYo52BfgIa4pVADvjK3QYlqMqdEKnzISrTqmwHOfZcl5oCyebiBG0bvmNotTse1aREXq04TBNKqZFwHYFwvkhqCnaLSWNt9LhNrzxVRXAeswQNPoN8YEnPbw59FP2-1B0PxL8XcIA7tD=w400-h149\" width=\"400\" /></a></div><div><br /></div><div>다음과 같이 명령 실행한다.</div><div>cd&nbsp;~/projects/ros2/src/basic_mobile_robot</div></div><div>subl package.xml</div><div><br /></div><div>이제 package.xml 파일을 다음과 같이 수정한다.</div><div><div>&nbsp; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt;</div><div>&nbsp; &lt;exec_depend&gt;<a href=\"https://automaticaddison.com/robot-state-publisher-vs-joint-state-publisher/\">joint_state_publisher</a>&lt;/exec_depend&gt;</div><div>&nbsp; &lt;exec_depend&gt;robot_state_publisher&lt;/exec_depend&gt;</div><div>&nbsp; &lt;exec_depend&gt;rviz&lt;/exec_depend&gt;</div><div>&nbsp; &lt;exec_depend&gt;xacro&lt;/exec_depend&gt;</div><div><br /></div>패키지 실행 파일(launch)을 생성한다.&nbsp;</div><div><div>cd ~/projects/ros2/src/basic_mobile_robot/launch</div><div>subl basic_mobile_bot_v1.launch.py</div></div><div><br /></div><div>실행 코드는 여기(<a href=\"https://drive.google.com/file/d/1pOgjTNuItNbn39nq0ztjxN0XBxj_v6H2/view\">https://drive.google.com/file/d/1pOgjTNuItNbn39nq0ztjxN0XBxj_v6H2/view</a>)서 다운로드해 넣는다.</div><div><div><span style=\"font-size: x-small;\">import os</span></div><div><span style=\"font-size: x-small;\">from launch import LaunchDescription</span></div><div><span style=\"font-size: x-small;\">from launch.actions import DeclareLaunchArgument</span></div><div><span style=\"font-size: x-small;\">from launch.conditions import IfCondition, UnlessCondition</span></div><div><span style=\"font-size: x-small;\">from launch.substitutions import Command, LaunchConfiguration</span></div><div><span style=\"font-size: x-small;\">from launch_ros.actions import Node</span></div><div><span style=\"font-size: x-small;\">from launch_ros.substitutions import FindPackageShare</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">def generate_launch_description():</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Set the path to different files and folders.</span></div><div><span style=\"font-size: x-small;\">&nbsp; pkg_share = FindPackageShare(package='basic_mobile_robot').find('basic_mobile_robot')</span></div><div><span style=\"font-size: x-small;\">&nbsp; default_launch_dir = os.path.join(pkg_share, 'launch')</span></div><div><span style=\"font-size: x-small;\">&nbsp; default_model_path = os.path.join(pkg_share, 'models/basic_mobile_bot_v1.urdf')</span></div><div><span style=\"font-size: x-small;\">&nbsp; robot_name_in_urdf = 'basic_mobile_bot'</span></div><div><span style=\"font-size: x-small;\">&nbsp; default_rviz_config_path = os.path.join(pkg_share, 'rviz/urdf_config.rviz')</span></div><div><span style=\"font-size: x-small;\">&nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; # Launch configuration variables specific to simulation</span></div><div><span style=\"font-size: x-small;\">&nbsp; gui = LaunchConfiguration('gui')</span></div><div><span style=\"font-size: x-small;\">&nbsp; model = LaunchConfiguration('model')</span></div><div><span style=\"font-size: x-small;\">&nbsp; rviz_config_file = LaunchConfiguration('rviz_config_file')</span></div><div><span style=\"font-size: x-small;\">&nbsp; use_robot_state_pub = LaunchConfiguration('use_robot_state_pub')</span></div><div><span style=\"font-size: x-small;\">&nbsp; use_rviz = LaunchConfiguration('use_rviz')</span></div><div><span style=\"font-size: x-small;\">&nbsp; use_sim_time = LaunchConfiguration('use_sim_time')</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Declare the launch arguments&nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_model_path_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='model',&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value=default_model_path,&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Absolute path to robot urdf file')</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_rviz_config_file_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='rviz_config_file',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value=default_rviz_config_path,</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Full path to the RVIZ config file to use')</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_use_joint_state_publisher_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='gui',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value='True',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Flag to enable joint_state_publisher_gui')</span></div><div><span style=\"font-size: x-small;\">&nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_use_robot_state_pub_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='use_robot_state_pub',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value='True',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Whether to start the robot state publisher')</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_use_rviz_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='use_rviz',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value='True',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Whether to start RVIZ')</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; declare_use_sim_time_cmd = DeclareLaunchArgument(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='use_sim_time',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; default_value='True',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; description='Use simulation (Gazebo) clock if true')</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; # Specify the actions</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Publish the joint state values for the non-fixed joints in the URDF file.</span></div><div><span style=\"font-size: x-small;\">&nbsp; start_joint_state_publisher_cmd = Node(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; condition=UnlessCondition(gui),</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; package='joint_state_publisher',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; executable='joint_state_publisher',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='joint_state_publisher')</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # A GUI to manipulate the joint state values</span></div><div><span style=\"font-size: x-small;\">&nbsp; start_joint_state_publisher_gui_node = Node(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; condition=IfCondition(gui),</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; package='joint_state_publisher_gui',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; executable='joint_state_publisher_gui',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='joint_state_publisher_gui')</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Subscribe to the joint states of the robot, and publish the 3D pose of each link.</span></div><div><span style=\"font-size: x-small;\">&nbsp; start_robot_state_publisher_cmd = Node(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; condition=IfCondition(use_robot_state_pub),</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; package='robot_state_publisher',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; executable='robot_state_publisher',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; parameters=[{'use_sim_time': use_sim_time,&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; 'robot_description': Command(['xacro ', model])}],</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; arguments=[default_model_path])</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Launch RViz</span></div><div><span style=\"font-size: x-small;\">&nbsp; start_rviz_cmd = Node(</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; condition=IfCondition(use_rviz),</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; package='rviz2',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; executable='rviz2',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; name='rviz2',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; output='screen',</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; arguments=['-d', rviz_config_file])</span></div><div><span style=\"font-size: x-small;\">&nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; # Create the launch description and populate</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld = LaunchDescription()</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Declare the launch options</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_model_path_cmd)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_rviz_config_file_cmd)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_use_joint_state_publisher_cmd)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_use_robot_state_pub_cmd)&nbsp;&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_use_rviz_cmd)&nbsp;</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(declare_use_sim_time_cmd)</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; # Add any actions</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(start_joint_state_publisher_cmd)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(start_joint_state_publisher_gui_node)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(start_robot_state_publisher_cmd)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ld.add_action(start_rviz_cmd)</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">&nbsp; return ld</span></div></div><div><br /></div><div>RViz를 이용해 모델을 확인할 것이다. 그러므로, RViz 설정 파일을 다음과 같이 만든다.</div><div><div>cd ~/projects/ros2/src/basic_mobile_robot/rviz</div><div>subl urdf_config.rviz</div></div><div><br /></div><div>설정 파일 내용은 여기(<a href=\"https://drive.google.com/file/d/1YTjMqv9q12kP_JCPLgp03-WqjtJ6vyi7/view\">https://drive.google.com/file/d/1YTjMqv9q12kP_JCPLgp03-WqjtJ6vyi7/view</a>)에서 다운로드 한다. 상세 설정은 다음과 같다.&nbsp;</div><div><div><span style=\"font-size: x-small;\">Panels:</span></div><div><span style=\"font-size: x-small;\">&nbsp; - Class: rviz_common/Displays</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Help Height: 78</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Name: Displays</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Property Tree Widget:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Expanded:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; - /Global Options1</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; - /Status1</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; - /RobotModel1/Links1</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; - /TF1</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Splitter Ratio: 0.5</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Tree Height: 557</span></div><div><span style=\"font-size: x-small;\">Visualization Manager:</span></div><div><span style=\"font-size: x-small;\">&nbsp; Class: \"\"</span></div><div><span style=\"font-size: x-small;\">&nbsp; Displays:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Alpha: 0.5</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Cell Size: 1</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Class: rviz_default_plugins/Grid</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Color: 160; 160; 164</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Enabled: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Name: Grid</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Alpha: 0.6</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Class: rviz_default_plugins/RobotModel</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Description Topic:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Depth: 5</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Durability Policy: Volatile</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; History Policy: Keep Last</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Reliability Policy: Reliable</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Value: /robot_description</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Enabled: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Name: RobotModel</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Visual Enabled: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/TF</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Enabled: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Name: TF</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Marker Scale: 0.3</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Show Arrows: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Show Axes: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Show Names: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; Enabled: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; Global Options:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Background Color: 48; 48; 48</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Fixed Frame: base_link</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Frame Rate: 30</span></div><div><span style=\"font-size: x-small;\">&nbsp; Name: root</span></div><div><span style=\"font-size: x-small;\">&nbsp; Tools:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/Interact</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Hide Inactive Objects: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/MoveCamera</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/Select</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/FocusCamera</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/Measure</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Line color: 128; 128; 0</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/SetInitialPose</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Topic:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Depth: 5</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Durability Policy: Volatile</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; History Policy: Keep Last</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Reliability Policy: Reliable</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Value: /initialpose</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: rviz_default_plugins/PublishPoint</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Single click: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Topic:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Depth: 5</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Durability Policy: Volatile</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; History Policy: Keep Last</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Reliability Policy: Reliable</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; &nbsp; Value: /clicked_point</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; - Class: nav2_rviz_plugins/GoalTool</span></div><div><span style=\"font-size: x-small;\">&nbsp; Transformation:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Current:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Class: rviz_default_plugins/TF</span></div><div><span style=\"font-size: x-small;\">&nbsp; Value: true</span></div><div><span style=\"font-size: x-small;\">&nbsp; Views:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Current:</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Class: rviz_default_plugins/Orbit</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Name: Current View</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Target Frame: &lt;Fixed Frame&gt;</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; &nbsp; Value: Orbit (rviz)</span></div><div><span style=\"font-size: x-small;\">&nbsp; &nbsp; Saved: ~</span></div></div><div><br /></div><div>빌드를 위한&nbsp; cmake 파일을 설정한다.</div><div><div>cd ~/projects/ros2/src/basic_mobile_robot</div><div>subl CMakeLists.txt</div></div><div><br /></div><div>다음 설정에서 적색 표시 부분을 추가한다.</div><div><div><span style=\"font-size: x-small;\">cmake_minimum_required(VERSION 3.8)</span></div><div><span style=\"font-size: x-small;\">project(basic_mobile_robot)</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")</span></div><div><span style=\"font-size: x-small;\">&nbsp; add_compile_options(-Wall -Wextra -Wpedantic)</span></div><div><span style=\"font-size: x-small;\">endif()</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\"># find dependencies</span></div><div><span style=\"font-size: x-small;\">find_package(ament_cmake REQUIRED)</span></div><div><span style=\"font-size: x-small;\"># uncomment the following section in order to fill in</span></div><div><span style=\"font-size: x-small;\"># further dependencies manually.</span></div><div><span style=\"font-size: x-small;\"># find_package(&lt;dependency&gt; REQUIRED)</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"color: red; font-size: x-small;\">install(</span></div><div><span style=\"color: red; font-size: x-small;\">&nbsp; DIRECTORY config launch maps meshes models params rviz src worlds</span></div><div><span style=\"color: red; font-size: x-small;\">&nbsp; DESTINATION share/${PROJECT_NAME}</span></div><div><span style=\"color: red; font-size: x-small;\">)</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">if(BUILD_TESTING)</span></div><div><span style=\"font-size: x-small;\">&nbsp; find_package(ament_lint_auto REQUIRED)</span></div><div><span style=\"font-size: x-small;\">&nbsp; # the following line skips the linter which checks for copyrights</span></div><div><span style=\"font-size: x-small;\">&nbsp; # comment the line when a copyright and license is added to all source files</span></div><div><span style=\"font-size: x-small;\">&nbsp; set(ament_cmake_copyright_FOUND TRUE)</span></div><div><span style=\"font-size: x-small;\">&nbsp; # the following line skips cpplint (only works in a git repo)</span></div><div><span style=\"font-size: x-small;\">&nbsp; # comment the line when this package is in a git repo and when</span></div><div><span style=\"font-size: x-small;\">&nbsp; # a copyright and license is added to all source files</span></div><div><span style=\"font-size: x-small;\">&nbsp; set(ament_cmake_cpplint_FOUND TRUE)</span></div><div><span style=\"font-size: x-small;\">&nbsp; ament_lint_auto_find_test_dependencies()</span></div><div><span style=\"font-size: x-small;\">endif()</span></div><div><span style=\"font-size: x-small;\"><br /></span></div><div><span style=\"font-size: x-small;\">ament_package()</span></div></div><div><br /></div><div><b>빌드 및 실행</b></div><div>다음과 같이 빌드한다.&nbsp;</div><div>cd ~/projects/ros2</div><div>colcon build</div><div><br /></div><div>다음과 같이 src 밑의 특정 패키지만 colcon 빌드할 수도 있다.</div><div>colcon build --packages-select basic_mobile_robot</div><div><div>colcon build --symlink-install --packages-select basic_mobile_robot</div><div><br /></div></div><div>다음과 같이 빌드 패키지 경로를 설정한다.</div><div>. install/setup.bash&nbsp;</div><div><br /></div><div>이제 새 터미널을 실행하고, 이 패키지를 실행해 본다.&nbsp;</div><div>ros2 launch -s basic_mobile_robot basic_mobile_bot_v1.launch.py</div><div><br /></div><div>rviz2를 실행한다.</div><div>rviz2 -d ./src/basic_mobile_robot/rviz/urdf_config.rviz&nbsp;</div><div><br /></div><div>다음과 같이 개발된 로버 모델이 보여진다.&nbsp;</div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/a/AVvXsEgrwLiWGckvjpHleqrVHdsN_dHBZ18gTbabtcVBsmrw4excWasNdO8EhuOrb1_9B7kwZ7Y2U6Aw9pwLtUwZ76spZfivJPkwAp8HYZ2UxvyWupocF31ucI2Nn1XRP97EHVCnGcljlgwkWjAPvgFlG2V-cZaX_RgENVW9YAmIok4x2WS36khB0o_9mBzA3Hmk\" style=\"margin-left: 1em; margin-right: 1em;\"><img alt=\"\" data-original-height=\"521\" data-original-width=\"1032\" height=\"162\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgrwLiWGckvjpHleqrVHdsN_dHBZ18gTbabtcVBsmrw4excWasNdO8EhuOrb1_9B7kwZ7Y2U6Aw9pwLtUwZ76spZfivJPkwAp8HYZ2UxvyWupocF31ucI2Nn1XRP97EHVCnGcljlgwkWjAPvgFlG2V-cZaX_RgENVW9YAmIok4x2WS36khB0o_9mBzA3Hmk\" width=\"320\" /></a></div><br />모델 좌표계를 확인하기 위해, 다음 명령을 실행한다.&nbsp;</div><div>sudo apt install ros-humble-tf2-tools</div><div>ros2 run tf2_tools view_frames.py</div><div>evince frames.pdf</div><div><br /></div><div>다음과 같이 각 링크와 조인트 좌표를 확인해 본다.&nbsp;</div><div>ros2 run tf2_ros tf2_echo base_link front_caster</div><div><br /></div><div><div><b>레퍼런스</b></div><div><ul><li><a href=\"https://automaticaddison.com/set-up-lidar-for-a-simulated-mobile-robot-in-ros-2/\">Set Up LIDAR for a Simulated Mobile Robot in ROS 2</a>&nbsp;(<a href=\"https://drive.google.com/drive/folders/1VrgqtETVSuheNITop0MXDy4BY3U8IphQ\">code</a>)</li><li><a href=\"https://automaticaddison.com/how-to-simulate-a-robot-using-gazebo-and-ros-2/\">Build the Warehouse Robot</a></li><li><a href=\"https://automaticaddison.com/how-to-simulate-a-robot-using-gazebo-and-ros-2/\">Create Model</a></li><li><a href=\"https://github.com/mgonzs13/ros2_rover\">ROS2 rover</a></li><li><a href=\"https://cafe.naver.com/openrt/24637\">ROS2 package development with python</a></li><li><a href=\"https://docs.ros.org/en/foxy/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.html\">Writing a simple publisher and subscriber (Python</a>)</li><li><a href=\"https://github.com/ros/urdf_tutorial/tree/ros2/\">URDF tutorial github</a>&nbsp;and&nbsp;<a href=\"https://docs.ros.org/en/rolling/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.html\">explain</a></li><li><a href=\"https://aleksandarhaber.com/how-to-create-urdf-and-launch-files-in-ros2-and-display-them-in-rviz/\">How to Create URDF and Launch Files in ROS2 and Display Them in Rviz</a></li><li><a href=\"https://www.theconstruct.ai/rviz2-tutorials-episode1-learn-tf/\">RVIZ2 Tutorials Episode Learn TF</a></li></ul></div></div>",
        "contentSnippet": "이 글은 ROS2 로봇 패키지 프로그램 개발 방법 정리한다.\nURDF 모델링\n시뮬레이션을 위한 Universal Robot Description Format (URDF) 을 사용해 모델링한다. URDF는 XML포맷으로 로봇을 물리적으로 정의한다. 이 모델은 주요 두 컴포넌트가 있다. \n\nLINKS: 강체(RIGID PIECE)를 정의한다. 링크는 뼈와 같은 역할을 하며 각 조인트로 연결된다.\nJOINTS: 조인트는 연결된 링크 간에 운동이 가능하게 한다. 조인트는 서보 모터 등으로 구현된다.\n\n\n\n회전 조인트는 라이다와 같이 회전 운동을 한다. 라이다를 가진 로버를 모델링을 위해, 터미널에서 다음을 설치한다.\n\nsudo apt install ros-humble-joint-state-publisher-gui\nsudo apt install ros-humble-xacro\n\n이동형 로버 모델링\n\n연구를 위해, 간단한 이동형 로버를 모델링한다. 다음 명령을 실행한다.\ncd ~/projects/ros2/src\n\nros2 pkg create --build-type ament_cmake basic_mobile_robot\nmkdir config launch maps meshes models params rviz worlds\ncd ~/projects/ros2\ncolcon build\n\n\n이제 다음과 유사한 로버 모델을 만든다. \n\n\n\n\n\n이 모델은 두개의 바퀴(revolute joints), 앞 바퀴(caster wheel), IMU, GPS를 가진다.  \ncd ~/projects/ros2/src/basic_mobile_robot/models\nsubl basic_mobile_bot_v1.urdf\n\n\n다음 코드를 입력한다. \n\n<?xml version=\"1.0\" ?>\n<robot name=\"basic_mobile_bot\" xmlns:xacro=\"http://ros.org/wiki/xacro\">\n\n  <!-- ****************** ROBOT CONSTANTS *******************************  -->\n  <!-- Define the size of the robot's main chassis in meters -->\n  <xacro:property name=\"base_width\" value=\"0.39\"/>\n  <xacro:property name=\"base_length\" value=\"0.70\"/>\n  <xacro:property name=\"base_height\" value=\"0.20\"/>\n\t\n  <!-- Define the shape of the robot's two back wheels in meters -->\n  <xacro:property name=\"wheel_radius\" value=\"0.14\"/>\n  <xacro:property name=\"wheel_width\" value=\"0.06\"/>\n\n  <!-- x-axis points forward, y-axis points to left, z-axis points upwards -->\n  <!-- Define the gap between the wheel and chassis along y-axis in meters -->\n  <xacro:property name=\"wheel_ygap\" value=\"0.035\"/>\n\n  <!-- Position the wheels along the z-axis -->\n  <xacro:property name=\"wheel_zoff\" value=\"0.05\"/>\n\n  <!-- Position the wheels along the x-axis -->\n  <xacro:property name=\"wheel_xoff\" value=\"0.221\"/>\n\n  <!-- Position the caster wheel along the x-axis -->\n  <xacro:property name=\"caster_xoff\" value=\"0.217\"/>\n\n  <!-- Define intertial property macros  -->\n  <xacro:macro name=\"box_inertia\" params=\"m w h d\">\n    <inertial>\n      <origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 ${pi/2}\"/>\n      <mass value=\"${m}\"/>\n      <inertia ixx=\"${(m/12) * (h*h + d*d)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(m/12) * (w*w + d*d)}\" iyz=\"0.0\" izz=\"${(m/12) * (w*w + h*h)}\"/>\n    </inertial>\n  </xacro:macro>\n\n  <xacro:macro name=\"cylinder_inertia\" params=\"m r h\">\n    <inertial>\n      <origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\" />\n      <mass value=\"${m}\"/>\n      <inertia ixx=\"${(m/12) * (3*r*r + h*h)}\" ixy = \"0\" ixz = \"0\" iyy=\"${(m/12) * (3*r*r + h*h)}\" iyz = \"0\" izz=\"${(m/2) * (r*r)}\"/>\n    </inertial>\n  </xacro:macro>\n\n  <xacro:macro name=\"sphere_inertia\" params=\"m r\">\n    <inertial>\n      <mass value=\"${m}\"/>\n      <inertia ixx=\"${(2/5) * m * (r*r)}\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"${(2/5) * m * (r*r)}\" iyz=\"0.0\" izz=\"${(2/5) * m * (r*r)}\"/>\n    </inertial>\n  </xacro:macro>\n\n  <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->\n  <!-- Define the center of the main robot chassis projected on the ground -->\t\n  <link name=\"base_footprint\"/>\n\n  <!-- The base footprint of the robot is located underneath the chassis -->\n  <joint name=\"base_joint\" type=\"fixed\">\n    <parent link=\"base_footprint\"/>\n    <child link=\"base_link\" />\n    <origin xyz=\"0.0 0.0 ${(wheel_radius+wheel_zoff)}\" rpy=\"0 0 0\"/>\n  </joint>\n\n  <!-- ********************** ROBOT BASE *********************************  -->\n  <link name=\"base_link\">\n    <visual>\n      <origin xyz=\"0 0 -0.05\" rpy=\"1.5707963267949 0 3.141592654\"/>\n      <geometry>\n        <mesh filename=\"package://basic_mobile_robot/meshes/robot_base.stl\" />\n      </geometry>\n      <material name=\"Red\">\n        <color rgba=\"${255/255} ${0/255} ${0/255} 1.0\"/>\n      </material>\n    </visual>\n\n    <collision>\n      <geometry>\n        <box size=\"${base_length} ${base_width} ${base_height}\"/>\n      </geometry>\n    </collision>\n\n    <xacro:box_inertia m=\"40.0\" w=\"${base_width}\" d=\"${base_length}\" h=\"${base_height}\"/>\n    \n  </link>\n\n  <gazebo reference=\"base_link\">\n    <material>Gazebo/Red</material>\n  </gazebo>\n\n  <!-- *********************** DRIVE WHEELS ******************************  -->\n\n  <xacro:macro name=\"wheel\" params=\"prefix x_reflect y_reflect\">\n    <link name=\"${prefix}_link\">\n      <visual>\n        <origin xyz=\"0 0 0\" rpy=\"1.5707963267949 0 0\"/>\n        <geometry>\n            <cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/>\n        </geometry>\n        <material name=\"White\">\n          <color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/>\n        </material>\n      </visual>\n      \n      <collision>\n        <origin xyz=\"0 0 0\" rpy=\"${pi/2} 0 0\"/>\n        <geometry>\n          <cylinder radius=\"${wheel_radius}\" length=\"${wheel_width}\"/>\n        </geometry>\n      </collision>\n      \n      <xacro:cylinder_inertia m=\"110.5\" r=\"${wheel_radius}\" h=\"${wheel_width}\"/>\n      \n    </link>\n\n    <!-- Connect the wheels to the base_link at the appropriate location, and \n         define a continuous joint to allow the wheels to freely rotate about\n         an axis -->\n    <joint name=\"${prefix}_joint\" type=\"revolute\">\n      <parent link=\"base_link\"/>\n      <child link=\"${prefix}_link\"/>\n      <origin xyz=\"${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}\" rpy=\"0 0 0\"/>\n      <limit upper=\"3.1415\" lower=\"-3.1415\" effort=\"30\" velocity=\"5.0\"/>\n      <axis xyz=\"0 1 0\"/>\n    </joint>\n  </xacro:macro>\n\n  <!-- Instantiate two wheels using the macro we just made through the \n       xacro:wheel tags. We also define the parameters to have one wheel\n       on both sides at the back of our robot (i.e. x_reflect=-1). -->\n  <xacro:wheel prefix=\"drivewhl_l\" x_reflect=\"-1\" y_reflect=\"1\" />\n  <xacro:wheel prefix=\"drivewhl_r\" x_reflect=\"-1\" y_reflect=\"-1\" />\n\n  <!-- *********************** CASTER WHEEL ******************************  -->\n  <!-- We add a caster wheel. It will be modeled as sphere.\n       We define the wheel’s geometry, material and the joint to connect it to \n       base_link at the appropriate location. -->\n  <link name=\"front_caster\">\n    <visual>\n      <geometry>\n        <sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/>\n      </geometry>\n      <material name=\"White\">\n        <color rgba=\"${255/255} ${255/255} ${255/255} 1.0\"/>\n      </material>\n    </visual>\n    <collision>\n      <origin xyz=\"0 0 0\" rpy=\"0 0 0\"/>\n      <geometry>\n        <sphere radius=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/>\n      </geometry>\n    </collision>\n    <xacro:sphere_inertia m=\"10.05\" r=\"${(wheel_radius+wheel_zoff-(base_height/2))}\"/>\n  </link>\n\n  <gazebo reference=\"front_caster\">\n    <mu1>0.01</mu1>\n    <mu2>0.01</mu2>\n    <material>Gazebo/White</material>\n  </gazebo>\n\n  <joint name=\"caster_joint\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"front_caster\"/>\n    <origin xyz=\"${caster_xoff} 0.0 ${-(base_height/2)}\" rpy=\"0 0 0\"/>\n  </joint>\n  \n  <!-- *********************** IMU SETUP *********************************  -->\n  <!-- Each sensor must be attached to a link.                              --> \n  \n  <joint name=\"imu_joint\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"imu_link\"/>\n    <origin xyz=\"-0.10 0 0.05\" rpy=\"0 0 0\"/>\n  </joint>\n\n  <link name=\"imu_link\"/>\n\n  <!-- *********************** GPS SETUP **********************************  -->\n  <joint name=\"gps_joint\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"gps_link\"/>\n    <origin xyz=\"0.10 0 0.05\" rpy=\"0 0 0\"/>\n  </joint>\n\n  <link name=\"gps_link\"/>\n\n</robot>\n\n\n이제 보이는 형태를 표현할 메쉬 파일을 STL 형식으로 다음 폴더에 저장한다. 해당 메쉬파일은 여기(https://drive.google.com/drive/folders/1e9yB8f_LD7ty0M1h_mbd0kB8Hxr4TvfV) 에서 다운로드한다.\ncd ~/projects/ros2/src/basic_mobile_robot/meshes\n\n\n참고로, 이 메쉬 파일은 블렌더(blander)로 모델링된 것이다. 메쉬 저장 결과는 다음과 같다.\n\n\n\n\n다음과 같이 명령 실행한다.\ncd ~/projects/ros2/src/basic_mobile_robot\n\nsubl package.xml\n\n\n이제 package.xml 파일을 다음과 같이 수정한다.\n\n  <buildtool_depend>ament_cmake</buildtool_depend>\n  <exec_depend>joint_state_publisher</exec_depend>\n  <exec_depend>robot_state_publisher</exec_depend>\n  <exec_depend>rviz</exec_depend>\n  <exec_depend>xacro</exec_depend>\n\n패키지 실행 파일(launch)을 생성한다. \n\ncd ~/projects/ros2/src/basic_mobile_robot/launch\nsubl basic_mobile_bot_v1.launch.py\n\n\n실행 코드는 여기(https://drive.google.com/file/d/1pOgjTNuItNbn39nq0ztjxN0XBxj_v6H2/view)서 다운로드해 넣는다.\n\nimport os\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.conditions import IfCondition, UnlessCondition\nfrom launch.substitutions import Command, LaunchConfiguration\nfrom launch_ros.actions import Node\nfrom launch_ros.substitutions import FindPackageShare\n\n\ndef generate_launch_description():\n\n\n  # Set the path to different files and folders.\n  pkg_share = FindPackageShare(package='basic_mobile_robot').find('basic_mobile_robot')\n  default_launch_dir = os.path.join(pkg_share, 'launch')\n  default_model_path = os.path.join(pkg_share, 'models/basic_mobile_bot_v1.urdf')\n  robot_name_in_urdf = 'basic_mobile_bot'\n  default_rviz_config_path = os.path.join(pkg_share, 'rviz/urdf_config.rviz')\n  \n  # Launch configuration variables specific to simulation\n  gui = LaunchConfiguration('gui')\n  model = LaunchConfiguration('model')\n  rviz_config_file = LaunchConfiguration('rviz_config_file')\n  use_robot_state_pub = LaunchConfiguration('use_robot_state_pub')\n  use_rviz = LaunchConfiguration('use_rviz')\n  use_sim_time = LaunchConfiguration('use_sim_time')\n\n\n  # Declare the launch arguments  \n  declare_model_path_cmd = DeclareLaunchArgument(\n    name='model', \n    default_value=default_model_path, \n    description='Absolute path to robot urdf file')\n    \n  declare_rviz_config_file_cmd = DeclareLaunchArgument(\n    name='rviz_config_file',\n    default_value=default_rviz_config_path,\n    description='Full path to the RVIZ config file to use')\n    \n  declare_use_joint_state_publisher_cmd = DeclareLaunchArgument(\n    name='gui',\n    default_value='True',\n    description='Flag to enable joint_state_publisher_gui')\n  \n  declare_use_robot_state_pub_cmd = DeclareLaunchArgument(\n    name='use_robot_state_pub',\n    default_value='True',\n    description='Whether to start the robot state publisher')\n\n\n  declare_use_rviz_cmd = DeclareLaunchArgument(\n    name='use_rviz',\n    default_value='True',\n    description='Whether to start RVIZ')\n    \n  declare_use_sim_time_cmd = DeclareLaunchArgument(\n    name='use_sim_time',\n    default_value='True',\n    description='Use simulation (Gazebo) clock if true')\n   \n  # Specify the actions\n\n\n  # Publish the joint state values for the non-fixed joints in the URDF file.\n  start_joint_state_publisher_cmd = Node(\n    condition=UnlessCondition(gui),\n    package='joint_state_publisher',\n    executable='joint_state_publisher',\n    name='joint_state_publisher')\n\n\n  # A GUI to manipulate the joint state values\n  start_joint_state_publisher_gui_node = Node(\n    condition=IfCondition(gui),\n    package='joint_state_publisher_gui',\n    executable='joint_state_publisher_gui',\n    name='joint_state_publisher_gui')\n\n\n  # Subscribe to the joint states of the robot, and publish the 3D pose of each link.\n  start_robot_state_publisher_cmd = Node(\n    condition=IfCondition(use_robot_state_pub),\n    package='robot_state_publisher',\n    executable='robot_state_publisher',\n    parameters=[{'use_sim_time': use_sim_time, \n    'robot_description': Command(['xacro ', model])}],\n    arguments=[default_model_path])\n\n\n  # Launch RViz\n  start_rviz_cmd = Node(\n    condition=IfCondition(use_rviz),\n    package='rviz2',\n    executable='rviz2',\n    name='rviz2',\n    output='screen',\n    arguments=['-d', rviz_config_file])\n  \n  # Create the launch description and populate\n  ld = LaunchDescription()\n\n\n  # Declare the launch options\n  ld.add_action(declare_model_path_cmd)\n  ld.add_action(declare_rviz_config_file_cmd)\n  ld.add_action(declare_use_joint_state_publisher_cmd)\n  ld.add_action(declare_use_robot_state_pub_cmd)  \n  ld.add_action(declare_use_rviz_cmd) \n  ld.add_action(declare_use_sim_time_cmd)\n\n\n  # Add any actions\n  ld.add_action(start_joint_state_publisher_cmd)\n  ld.add_action(start_joint_state_publisher_gui_node)\n  ld.add_action(start_robot_state_publisher_cmd)\n  ld.add_action(start_rviz_cmd)\n\n\n  return ld\n\n\nRViz를 이용해 모델을 확인할 것이다. 그러므로, RViz 설정 파일을 다음과 같이 만든다.\n\ncd ~/projects/ros2/src/basic_mobile_robot/rviz\nsubl urdf_config.rviz\n\n\n설정 파일 내용은 여기(https://drive.google.com/file/d/1YTjMqv9q12kP_JCPLgp03-WqjtJ6vyi7/view)에서 다운로드 한다. 상세 설정은 다음과 같다. \n\nPanels:\n  - Class: rviz_common/Displays\n    Help Height: 78\n    Name: Displays\n    Property Tree Widget:\n      Expanded:\n        - /Global Options1\n        - /Status1\n        - /RobotModel1/Links1\n        - /TF1\n      Splitter Ratio: 0.5\n    Tree Height: 557\nVisualization Manager:\n  Class: \"\"\n  Displays:\n    - Alpha: 0.5\n      Cell Size: 1\n      Class: rviz_default_plugins/Grid\n      Color: 160; 160; 164\n      Enabled: true\n      Name: Grid\n    - Alpha: 0.6\n      Class: rviz_default_plugins/RobotModel\n      Description Topic:\n        Depth: 5\n        Durability Policy: Volatile\n        History Policy: Keep Last\n        Reliability Policy: Reliable\n        Value: /robot_description\n      Enabled: true\n      Name: RobotModel\n      Visual Enabled: true\n    - Class: rviz_default_plugins/TF\n      Enabled: true\n      Name: TF\n      Marker Scale: 0.3\n      Show Arrows: true\n      Show Axes: true\n      Show Names: true\n  Enabled: true\n  Global Options:\n    Background Color: 48; 48; 48\n    Fixed Frame: base_link\n    Frame Rate: 30\n  Name: root\n  Tools:\n    - Class: rviz_default_plugins/Interact\n      Hide Inactive Objects: true\n    - Class: rviz_default_plugins/MoveCamera\n    - Class: rviz_default_plugins/Select\n    - Class: rviz_default_plugins/FocusCamera\n    - Class: rviz_default_plugins/Measure\n      Line color: 128; 128; 0\n    - Class: rviz_default_plugins/SetInitialPose\n      Topic:\n        Depth: 5\n        Durability Policy: Volatile\n        History Policy: Keep Last\n        Reliability Policy: Reliable\n        Value: /initialpose\n    - Class: rviz_default_plugins/PublishPoint\n      Single click: true\n      Topic:\n        Depth: 5\n        Durability Policy: Volatile\n        History Policy: Keep Last\n        Reliability Policy: Reliable\n        Value: /clicked_point\n    - Class: nav2_rviz_plugins/GoalTool\n  Transformation:\n    Current:\n      Class: rviz_default_plugins/TF\n  Value: true\n  Views:\n    Current:\n      Class: rviz_default_plugins/Orbit\n      Name: Current View\n      Target Frame: <Fixed Frame>\n      Value: Orbit (rviz)\n    Saved: ~\n\n\n빌드를 위한  cmake 파일을 설정한다.\n\ncd ~/projects/ros2/src/basic_mobile_robot\nsubl CMakeLists.txt\n\n\n다음 설정에서 적색 표시 부분을 추가한다.\n\ncmake_minimum_required(VERSION 3.8)\nproject(basic_mobile_robot)\n\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\n# uncomment the following section in order to fill in\n# further dependencies manually.\n# find_package(<dependency> REQUIRED)\n\n\ninstall(\n  DIRECTORY config launch maps meshes models params rviz src worlds\n  DESTINATION share/${PROJECT_NAME}\n)\n\n\nif(BUILD_TESTING)\n  find_package(ament_lint_auto REQUIRED)\n  # the following line skips the linter which checks for copyrights\n  # comment the line when a copyright and license is added to all source files\n  set(ament_cmake_copyright_FOUND TRUE)\n  # the following line skips cpplint (only works in a git repo)\n  # comment the line when this package is in a git repo and when\n  # a copyright and license is added to all source files\n  set(ament_cmake_cpplint_FOUND TRUE)\n  ament_lint_auto_find_test_dependencies()\nendif()\n\n\nament_package()\n\n\n빌드 및 실행\n다음과 같이 빌드한다. \ncd ~/projects/ros2\ncolcon build\n\n\n다음과 같이 src 밑의 특정 패키지만 colcon 빌드할 수도 있다.\ncolcon build --packages-select basic_mobile_robot\n\ncolcon build --symlink-install --packages-select basic_mobile_robot\n\n\n다음과 같이 빌드 패키지 경로를 설정한다.\n. install/setup.bash \n\n\n이제 새 터미널을 실행하고, 이 패키지를 실행해 본다. \nros2 launch -s basic_mobile_robot basic_mobile_bot_v1.launch.py\n\n\nrviz2를 실행한다.\nrviz2 -d ./src/basic_mobile_robot/rviz/urdf_config.rviz \n\n\n다음과 같이 개발된 로버 모델이 보여진다. \n\n\n모델 좌표계를 확인하기 위해, 다음 명령을 실행한다. \nsudo apt install ros-humble-tf2-tools\nros2 run tf2_tools view_frames.py\nevince frames.pdf\n\n\n다음과 같이 각 링크와 조인트 좌표를 확인해 본다. \nros2 run tf2_ros tf2_echo base_link front_caster\n\n\n레퍼런스\n\nSet Up LIDAR for a Simulated Mobile Robot in ROS 2 (code)\nBuild the Warehouse Robot\nCreate Model\nROS2 rover\nROS2 package development with python\nWriting a simple publisher and subscriber (Python)\nURDF tutorial github and explain\nHow to Create URDF and Launch Files in ROS2 and Display Them in Rviz\nRVIZ2 Tutorials Episode Learn TF",
        "id": "tag:blogger.com,1999:blog-5201956450461596914.post-9160893092522574980",
        "isoDate": "2024-06-28T06:44:00.000Z"
      }
    ]
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김병환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "푸른 산호초",
        "link": "https://kangmyounghun.blogspot.com/2024/06/blog-post.html",
        "pubDate": "2024-06-30T10:09:00.002Z",
        "author": "강명훈",
        "content": "<div>알 수 없는 유튜브 알고리즘이 들려준 노래. 세간을 떠들썩하게 했던 '하이브 사태'로 알게 된 뉴진스의 멤버 하니가 일본 공연에서 부른 푸른 산호초.</div><div><br /></div>\n<iframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" frameborder=\"0\" height=\"315\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/Rj7N4ThLGQY?si=qhlyMn-h1B1edRRH\" title=\"YouTube video player\" width=\"560\"></iframe>\n<div><br /></div><div><span><a name='more'></a></span></div><div>원곡.</div><div><br /></div>\n<iframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\" frameborder=\"0\" height=\"315\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/mrgApjHbRLw?si=ZK2RiFbPSKQyYXB-\" title=\"YouTube video player\" width=\"560\"></iframe>\n<div><br /></div><div>일본 버블 시대 풍요를 상징하는 노래라고 하는데 원곡도, 마츠다 세이코라는 가수도 처음이지만, 한껏 청량한 도입부가 인상적이면서도 아련하다. 마츠다 세이코는 뽕기가 있어서 좋고, 하니는 뽕기가 없어서 좋다.</div><div><br /></div>\n<div>노래와 가수가 서로의 청량함을 증폭시키는 시너지가 느껴진다. 마츠다 세이코의 무대를 보면 그 시절 제스쳐 하나하나가 새롭게 다가오는데, 하니가 기교 없이 깔끔하게 부르면서도 포인트를 잘 살린 것 같다.&nbsp;</div><div><br /></div><div>좋은날을 부르던 아이유의 치마 제스쳐도 떠오르고, 잘 모르는 분야지만 선곡, 스타일 등등 기획을 참 잘한 느낌. 영화는 봐도 일본 노래는 왠지 거부감이 있었는데, 이 노래는 귀에 잘 감긴다. 내가 일본 노래를 흥얼거리는 날이 오는구나. 그래 절반 남은 올해 노동요는 너다.</div><div><br /></div><div><div><i>아아 와타시노 코이와 미나미노 카제니 놋테 하시루와</i></div><div><i>아아 아오이 카제 키이테 하시레 아노 시마에</i></div><div><i>아나타토 아우타 비니</i></div><div><i>스베테오 와스레테 시마우노</i></div><div><i>하샤이다 와타시와 Little girl</i></div><div><i>아츠이 무네 키코에루데쇼</i></div><div><i>스하다니 키라키라 산 고쇼</i></div><div><i>후타릿 키리데 나가사레테모 이이노</i></div><div><i>아나타가 스키</i></div><div><i>아아 와타시노 코이와 미나미노 카제니 놋테 하시루와</i></div><div><i>아아 아오이 카제 키이테 하시레 아노 시마에</i></div><div><i><br /></i></div><div><i>나미다가 코보레 루노</i></div><div><i>야사시이 메오 시테 미나이데</i></div><div><i>우츠무키 카겐노 Little Rose</i></div><div><i>하나비라 후레테호시이노</i></div><div><i>나기사와 코이노 모스 그린</i></div><div><i>후타리노 호호가 치카즈이테 유쿠노요</i></div><div><i>아나타가 스키</i></div><div><i>아아 와타시노 코이와 미나미노 카제니 놋테 하시루와</i></div><div><i>아아 아오이 카제 키이테 하시레 아노 시마에</i></div></div><div><br /></div><div><b>관련 글</b></div><div><ul style=\"text-align: left;\"><li><a href=\"https://kangmyounghun.blogspot.com/2019/11/blog-post.html\">불티</a></li></ul></div>",
        "contentSnippet": "알 수 없는 유튜브 알고리즘이 들려준 노래. 세간을 떠들썩하게 했던 '하이브 사태'로 알게 된 뉴진스의 멤버 하니가 일본 공연에서 부른 푸른 산호초.\n\n\n\n\n\n\n원곡.\n\n\n\n\n\n일본 버블 시대 풍요를 상징하는 노래라고 하는데 원곡도, 마츠다 세이코라는 가수도 처음이지만, 한껏 청량한 도입부가 인상적이면서도 아련하다. 마츠다 세이코는 뽕기가 있어서 좋고, 하니는 뽕기가 없어서 좋다.\n\n\n노래와 가수가 서로의 청량함을 증폭시키는 시너지가 느껴진다. 마츠다 세이코의 무대를 보면 그 시절 제스쳐 하나하나가 새롭게 다가오는데, 하니가 기교 없이 깔끔하게 부르면서도 포인트를 잘 살린 것 같다. \n\n\n좋은날을 부르던 아이유의 치마 제스쳐도 떠오르고, 잘 모르는 분야지만 선곡, 스타일 등등 기획을 참 잘한 느낌. 영화는 봐도 일본 노래는 왠지 거부감이 있었는데, 이 노래는 귀에 잘 감긴다. 내가 일본 노래를 흥얼거리는 날이 오는구나. 그래 절반 남은 올해 노동요는 너다.\n\n\n아아 와타시노 코이와 미나미노 카제니 놋테 하시루와\n아아 아오이 카제 키이테 하시레 아노 시마에\n아나타토 아우타 비니\n스베테오 와스레테 시마우노\n하샤이다 와타시와 Little girl\n아츠이 무네 키코에루데쇼\n스하다니 키라키라 산 고쇼\n후타릿 키리데 나가사레테모 이이노\n아나타가 스키\n아아 와타시노 코이와 미나미노 카제니 놋테 하시루와\n아아 아오이 카제 키이테 하시레 아노 시마에\n\n\n나미다가 코보레 루노\n야사시이 메오 시테 미나이데\n우츠무키 카겐노 Little Rose\n하나비라 후레테호시이노\n나기사와 코이노 모스 그린\n후타리노 호호가 치카즈이테 유쿠노요\n아나타가 스키\n아아 와타시노 코이와 미나미노 카제니 놋테 하시루와\n아아 아오이 카제 키이테 하시레 아노 시마에\n\n\n관련 글\n\n불티",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-5155437865387451990",
        "isoDate": "2024-06-30T10:09:00.002Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": [
      {
        "title": "ZGC(Z Garbage Collector)",
        "link": "https://sungjk.github.io/2024/06/29/zgc.html",
        "pubDate": "2024-06-29T00:00:00+00:00",
        "content": "\n            \n            &lt;p&gt;ZGC(Z Garbage Collector)는 JVM 진영에서 Serial → Parallel → CMS → G1 이후에 새롭게 등장한 Garbage Collector 입니다. JDK 11에 Experimental로 추가되었고, JDK 15에서 Production Ready 상태로 전환되었으며, LDT 버전인 JDK 17에도 반영되었습니다. ZGC의 주요 목표 중 하나는 Stop-The-World(STW) 시간을 1ms 이하로 줄이는 것입니다.&lt;/p&gt;\n\n&lt;p&gt;과거에 CMS GC를 사용하는 애플리케이션을 운영하다보면 STW 시간이 길어지다 보면 요청을 제대로 처리하지 못하는 현상 때문에 애를 먹었던게 생각나네요. ZGC는 대용량 힙 메모리에서도 낮은 지연 시간(low latency)을 목표로 설계되었기 때문에, 이를 적용하는 것만으로도 충분한 가치가 있어보이는 GC 알고리즘이었습니다. 이번 글에서는 애플리케이션의 성능을 개선하면서 적용했던 ZGC에 대해 소개하려고 합니다.&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;zgc&quot;&gt;ZGC&lt;/h1&gt;\n\n&lt;p&gt;ZGC는 대용량 힙 메모리에서도 낮은 지연 시간(low latency)을 목표로 설계되었습니다. Heap Allocation, Compaction 등 거의 모든 면에서 변화가 있었기 때문에, 꼭 바로 이전에 나온 G1과 비교하지 않더라도 ZGC 자체로도 재미있는 피쳐들을 가지고 있습니다.&lt;/p&gt;\n\n&lt;p&gt;아래는 2023년 Oracle DevLive Level Up에서 발표된 &lt;a href=&quot;https://youtu.be/OnodHoNYE1Y?si=dtTtNzjkC-KK5ZIt&quot;&gt;Z Garbage Collector: The Next Generation&lt;/a&gt;에 소개된 ZGC의 특징들입니다.&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: 확장 가능하도록 설계되어 수백 MB에서 최대 수 TB 메모리 처리&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Low Latency&lt;/strong&gt;: 1MS 미만의 일정한 STW 시간(puase-time)&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Auto-tuning&lt;/strong&gt;: 성능 최적화에 필요한 튜닝의 양을 줄이기기 위해 GC의 많은 튜닝 설정들을 자동화&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Throughput&lt;/strong&gt;: 동일한 워크로드에서 전체 성능의 15% 내에서 성능 유지&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-00.png&quot; alt=&quot;ZGC&quot; title=&quot;ZGC&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-01.png&quot; alt=&quot;ZGC&quot; title=&quot;ZGC&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;Concurrent&lt;/strong&gt;:  ZGC는 대부분의 작업을 Java 애플리케이션 스레드가 실행되는 동안 동시에 수행. GC 동안 애플리케이션의 응답성을 유지하는 데 도움을 준다.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Constant pause times&lt;/strong&gt;:  GC 동안 발생하는 STW(pause-time)이 일정하게 유지되며, 힙 크기나 라이브 객체의 크기에 따라 비례적으로 증가하지 않는다.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Parallel&lt;/strong&gt;:  여러 스레드를 동시에 사용하여 GC 수행해서 더 빠르게 완료. Reference 할당마다 실행되는 Load Barrier를 통해 GC에 필요한 작업들을 멀티 스레드로 애플리케이션 스레드와 동시에 진행.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Compacting&lt;/strong&gt;:  메모리 단편화를 줄이기 위해 객체를 이동시켜서 메모리 할당 효율성을 높인다.\n    &lt;ul&gt;\n      &lt;li&gt;G1GC는 Compaction을 STW 동안 수행하는 반면, ZGC는 애플리케이션 스레드와 병렬로 수행.&lt;/li&gt;\n      &lt;li&gt;즉, 객체 이동 및 업데이트 작업을 애플리케이션이 실행되는 동안 동시에 수행한다.&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Region-based&lt;/strong&gt;:  메모리를 여러 영역으로 나누어 관리하며, 많은 가비지가 생성되는 영역에 집중하여 효율적으로 GC 수행&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;NUMA-aware&lt;/strong&gt;:  NUMA(Non-Uniform Memory Access) 아키텍처를 인식하고, CPU에 가까운 메모리에 객체를 할당하여 성능을 최적화&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Load barriers &amp;amp; Colored pointers&lt;/strong&gt;:\n    &lt;ul&gt;\n      &lt;li&gt;&lt;strong&gt;Load barriers&lt;/strong&gt;:  메모리 로드 시 특정 조건을 확인하는 메커니즘, G C중에도 안전한 메모리 접근을 보장&lt;/li&gt;\n      &lt;li&gt;&lt;strong&gt;Colored pointers&lt;/strong&gt;:  포인터에 색상을 지정하여 객체의 상태를 추적하고, 이를 통해 GC 효율적 수행&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Auto tuning&lt;/strong&gt;:  복잡한 설정 없이 자동으로 최적화되도록 설계되었다. 복잡한 설정을 조정할 필요 없이 ZGC의 혜택을 누릴 수 있다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-02.png&quot; alt=&quot;ZGC&quot; title=&quot;ZGC&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;heap-allocation&quot;&gt;Heap Allocation&lt;/h3&gt;\n\n&lt;p&gt;&lt;strong&gt;G1 GC(Garbage First Garbage Collector)&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n\n&lt;p&gt;G1GC는 Garbage Collection을 보다 효율적으로 수행하기 위해 Heap을 동일한 크기의 여러 힙 영역(Regions)으로 나눕니다. 그리고 각 Heap 영역은 서로 다른 역할을 담당합니다.&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Eden Space: 새로 생성된 객체들이 할당되는 공간.&lt;/li&gt;\n  &lt;li&gt;Survivor Space: Eden 영역에서 생존한 객체들이 이동되는 공간.&lt;/li&gt;\n  &lt;li&gt;Old Generation: Survivor 영역에서 생존한 오래된 객체들이 이동되는 공간.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/g1-heap-allocation.png&quot; alt=&quot;G1 Heap Allocation&quot; title=&quot;G1 Heap Allocation&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;ZGC (Z Garbage Collector)&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n\n&lt;p&gt;ZGC는 메모리 단편화를 줄이고 관리 효율성을 높이기 위해 다양한 크기의 메모리 블록으로 Heap을 나누어 사용합니다. 마찬가지로 각 Heap 영역은 서로 다른 역할을 담당합니다.&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;Small: 작은 객체들이 할당되는 영역.&lt;/li&gt;\n  &lt;li&gt;Medium: 중간 크기 객체들이 할당되는 영역.&lt;/li&gt;\n  &lt;li&gt;Large(N x 2 MB): 큰 객체들이 할당되는 영역. N은 객체 크기에 따라 달라집니다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-heap-allocation.png&quot; alt=&quot;ZGC Heap Allocation&quot; title=&quot;ZGC Heap Allocation&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;zgc를-도입하며-발생하는-trade-off&quot;&gt;ZGC를 도입하며 발생하는 Trade-off&lt;/h3&gt;\n\n&lt;p&gt;ZGC는 별도 설정 없이 자동으로 최적화까지 해주니 모든 면에서 우수해보입니다. 그런데 ZGC를 도입하며 발생할 수 있는 trade-off가 몇가지 있습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1) CPU 자원 효율 문제&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;ZGC는 초당 1ms 이하의 pause time을 유지하면서도 최대 16TB 크기의 힙을 지원하는 것으로 설계되었습니다. 대부분의 작업을 Java 애플리케이션 스레드가 실행되는 동안 동시에 수행하기 때문에, 그만큼 CPU 자원을 사용하게 되고, 이는 &lt;strong&gt;애플리케이션의 처리량(Throughput) 감소에 영향&lt;/strong&gt;을 줄 수 있습니다.&lt;/p&gt;\n\n&lt;p&gt;특히 초기 ZGC(~JDK 21)는 단일 세대 ZGC(Single-generational ZGC 또는 Non-generational ZGC)라고도 부르는데, 이제 막 생성된 객체와 오래된 객체 간의 구분이 따로 없어서 단일 세대라고 부릅니다. 그러다보니 GC 수행 과정에서 모든 객체를 대상으로 정리가 발생하기 때문에, CPU 활용 효율면에서는 조금은 더 취약합니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2) 객체 할당 지연(Allocation stall) 문제(← 1번으로 인해 발생)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;새로운 객체가 메모리에 할당되는 속도가 GC가 메모리를 회수하는 속도보다 빠를 때 할당 지연(Allocation stall) 문제가 발생합니다. 이건 메모리가 부족하기 때문에 발생하는데, GC가 메모리를 회수하는 동안 애플리케이션은 새로운 객체를 할당하기 위해 기다려야되고, 이로 인해 애플리케이션의 성능이 저하될 수 있습니다. 이건 1번으로 인한 부수 효과인데, 전체 힙 대상으로 한 번에 GC를 수행하기 때문에 처리가 오래 걸리기 때문입니다.&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;generational-zgc&quot;&gt;Generational ZGC&lt;/h1&gt;\n\n&lt;p&gt;그래서 이 문제를 해결하기 위해 JDK 21에 Generational ZGC이 등장했습니다. ZGC와 동일한데 Heap을 논리적으로 두 세대로 분리한 차이가 있습니다(Young, Old). 객체가 할당되면 먼저 자주 스캔되는 Young Generation에 배치되고, 객체가 충분히 오래 살아남으면 Old Generation으로 승격됩니다.&lt;/p&gt;\n\n&lt;p&gt;처리량 측면에서, Generational ZGC는 JDK 17의 단일 세대 ZGC 대비 약 10%의 개선을 보였으며, 약간의 저하가 있었던 JDK 21의 단일 세대 ZGC 대비 약 10% 이상의 성능 향상을 보였다고 합니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-young-old.png&quot; alt=&quot;ZGC Young &amp;amp; Old&quot; title=&quot;ZGC Young &amp;amp; Old&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;주요-차이점&quot;&gt;주요 차이점&lt;/h3&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-vs-generational-zgc.png&quot; alt=&quot;ZGC vs. Generational ZGC&quot; title=&quot;ZGC vs. Generational ZGC&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;performances&quot;&gt;Performances&lt;/h3&gt;\n\n&lt;p&gt;단일 세대와의 성능 차이는 &lt;a href=&quot;https://inside.java/2023/11/28/gen-zgc-explainer/&quot;&gt;Introducing Generational ZGC&lt;/a&gt;에 잘 소개되어 있으니 참고하시면 좋겠습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-performance-00.png&quot; alt=&quot;ZGC Performance&quot; title=&quot;ZGC Performance&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-performance-01.png&quot; alt=&quot;ZGC Performance&quot; title=&quot;ZGC Performance&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-performance-02.png&quot; alt=&quot;ZGC Performance&quot; title=&quot;ZGC Performance&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-performance-03.png&quot; alt=&quot;ZGC Performance&quot; title=&quot;ZGC Performance&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;h3 id=&quot;generational-zgc-활성화&quot;&gt;Generational ZGC 활성화&lt;/h3&gt;\n\n&lt;p&gt;Generational ZGC를 활성화하려면 ZGC 사용을 위한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseZGC&lt;/code&gt; 옵션에 더해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+ZGenerational&lt;/code&gt; argument도 추가해줘야 합니다(JDK 버전은 21 이상).&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;참고로, JDK 21에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+ZGenerational&lt;/code&gt; 옵션이 없으면 Single-generation ZGC가 기본값입니다. 따라서 이 옵션을 추가하지 않으면 단일 세대의 ZGC가 동작합니다.&lt;/li&gt;\n  &lt;li&gt;미래에는 Generational ZGC가 기본값이 될 예정이라고 합니다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;jvm-메모리-할당량이-커보이는-현상&quot;&gt;JVM 메모리 할당량이 커보이는 현상&lt;/h3&gt;\n\n&lt;p&gt;ZGC 적용 이후에 메트릭을 살펴보면 선언한 Max Heap Size 보다 더 큰 메모리가 관측됩니다. JVM 애플리케이션의 Max Heap Size를 3GB로 설정했는데, Grafana(export by prometheus)에서 관측된 메트릭은 2배 정도인 6GB가 관측되었습니다. 의도하지 않았는데 재밌는 현상입니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-heap-metric.png&quot; alt=&quot;ZGC JVM Heap&quot; title=&quot;ZGC JVM Heap&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;`jvm_memory_max_bytes`: The total memory (in bytes) in the JVM runtime.&lt;/center&gt;\n\n&lt;p&gt;&lt;strong&gt;1. 다중 매핑&lt;/strong&gt;:&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;ZGC는 동일한 주소(메모리)를 3개의 다른 view로 매핑: marked0, marked1, remapped&lt;/li&gt;\n  &lt;li&gt;이 3개의 view는 virtual memory address에 반영되는데, 동일 물리 메모리를 3개의 다른 가상 메모리에 맵핑되는 형태. 즉, 각 물리 메모리 페이지에 3개의 가상 페이지가 맵핑됩니다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;2. 가상 메모리 사용 증가:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;이런 다중 매핑으로 인해 virtual memory 사용량이 실제 physical memory 사용량보다 크게 나타날 수 있어요.&lt;/li&gt;\n  &lt;li&gt;예를 들어, 힙 사이즈가 1GB인 경우 virtual memory는 최대 3GB까지 관측될 수 있어요.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Generational GC 영향:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;만약 ZGC가 현재 Single-generation이 아닌 Young, Old 세대로 구성된 generational GC 으로 되면 맵핑 수가 6배까지 증가할 수 있어요.&lt;/li&gt;\n  &lt;li&gt;즉, max heap size의 6배에 해당하는 virtual memory 사용량이 관측될 수 있어요.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;결론은 ZGC의 다중 매핑으로 인해 memory 사용량이 실제보다 크게 관측되기 때문이다. 처음엔 Grafana JVM Metric만 보고 잘못 설정한게 있나 헷갈렸는데, 검색하다가 &lt;a href=&quot;https://stackoverflow.com/questions/57899020/zgc-max-heap-size-exceed-physical-memory/61470663#61470663&quot;&gt;Stackoverflow에 재미난 답변&lt;/a&gt;도 발견했다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-virtual-memory.png&quot; alt=&quot;ZGC Virtual Memory Space&quot; title=&quot;ZGC Virtual Memory Space&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;zgc-적용후-메트릭-변화&quot;&gt;ZGC 적용후 메트릭 변화&lt;/h1&gt;\n\n&lt;p&gt;ZGC를 적용하기 전에는 G1GC를 사용중이었고, Eden, Survivor 영역 그리고 jvm parameter 등에 대한 별도 튜닝은 하지 않고 기본 설정을 사용하고 있었습니다.&lt;/p&gt;\n\n&lt;h3 id=&quot;g1-gc-적용된-애플리케이션-메트릭&quot;&gt;G1 GC 적용된 애플리케이션 메트릭&lt;/h3&gt;\n\n&lt;p&gt;아래는 임의의 2개 Pod에서 CPU, Heap Memory와 STW에 의한 Pause Time을 관측한 결과다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/g1-0-memory.png&quot; alt=&quot;G1GC metric - memory&quot; title=&quot;G1GC metric - memory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Eden used: max(1.79Gb), avg(958MB) | CPU usage: system avg(0.114), max(0.137)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/g1-1-memory.png&quot; alt=&quot;G1GC metric - memory&quot; title=&quot;G1GC metric - memory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Eden used: max(1.77Gb), avg(888MB) | CPU usage: system avg(0.105), max(0.161)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/g1-0-pause-time.png&quot; alt=&quot;G1GC metric - pause time&quot; title=&quot;G1GC metric - pause time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Pause Time: max(1.6ms), avg(259μs)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/g1-1-pause-time.png&quot; alt=&quot;G1GC metric - pause time&quot; title=&quot;G1GC metric - pause time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Pause Time: max(1.87ms), avg(223μs)&lt;/center&gt;\n\n&lt;h3 id=&quot;zgc-적용된-애플리케이션-메트릭&quot;&gt;ZGC 적용된 애플리케이션 메트릭&lt;/h3&gt;\n\n&lt;p&gt;아래 메트릭도 마찬가지로 ZGC를 적용한 이후에 임의의 2개 Pod에서 CPU, Heap Memory와 STW에 의한 Pause Time을 관측한 결과다. 그런데 이 메트릭은 Generational ZGC가 아닌 Single-generation ZGC가 적용되었을때의 결과다. 그래서 메트릭을 보면 JVM Heap Memory 영역이 ZHeap 하나만 표현된걸 볼 수 있다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-0-memory.png&quot; alt=&quot;ZGC metric - memory&quot; title=&quot;ZGC metric - memory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Heap used: max(998MB), avg(616MB)  |  CPU usage: system avg(0.153), max(0.351)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-1-memory.png&quot; alt=&quot;ZGC metric - memory&quot; title=&quot;ZGC metric - memory&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Heap used: max(1.37GB), avg(798MB)  |  CPU usage: system avg(0.137), max(0.263)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-0-pause-time.png&quot; alt=&quot;ZGC metric - pause time&quot; title=&quot;ZGC metric - pause time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Pause Time:  max(66.7μs) avg(4.49μs)&lt;/center&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-1-pause-time.png&quot; alt=&quot;ZGC metric - pause time&quot; title=&quot;ZGC metric - pause time&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Pause Time:  max(66.7μs) avg(5.51μs)&lt;/center&gt;\n\n&lt;h3 id=&quot;메트릭-변화g1--non-gernerational-zgc&quot;&gt;메트릭 변화(G1 → Non Gernerational ZGC):&lt;/h3&gt;\n\n&lt;p&gt;Non Gernerational(Single-generational) ZGC를 적용하고 나서 CPU 사용량을 증가하고, Memory 사용량과 STW에 의한 Pause Time은 감소했습니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;memory usage:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;used 기준 약 1.68배 감소(1.16 GiB → 0.69 GiB)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;cpu usage:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;max 약 2배 증가 (0.137 → 0.351)&lt;/li&gt;\n  &lt;li&gt;avg 약 1.3배 증가 (0.105 → 0.137)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;pause time:&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;max 약 28배 감소(1.87ms → 66.7μs)&lt;/li&gt;\n  &lt;li&gt;avg 약 47배 감소(259μs → 5.51μs)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;다양한-요소를-고려해서-gc-알고리즘-선택하기&quot;&gt;다양한 요소를 고려해서 GC 알고리즘 선택하기&lt;/h1&gt;\n\n&lt;p&gt;GC를 선택할 때 throughput, latency, 리소스 사용량 등 다양한 요소를 고려해야 합니다. 예를 들어, G1과 ZGC는 각각 throughput과 latency 기준으로 애플리케이션 영향도가 달라질 수 있어요.&lt;/p&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;G1은 대부분의 시나리오에서 균형 잡힌 성능을 제공하지만, 변동 폭이 큰 객체 할당이나 오래 실행되는 작업에 적합한 경우가 있고,&lt;/li&gt;\n  &lt;li&gt;ZGC는 매우 짧은 pause time을 제공하지만 일부 시나리오에서는 G1보다 낮은 throuput을 보일 수 있습니다.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/gc-compare.png&quot; alt=&quot;GC&quot; title=&quot;GC&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;p&gt;위에서 ZGC를 적용한 애플리케이션은 제품 특성상 Low Latency를 보장해야 하고 STW로 인한 영향을 최소화해야 하기 때문에 CPU 리소스를 조금 희생하더라도 Memory와 Pause Time 감소라는 이점을 챙길 수 있었습니다. 따라서 애플리케이션의 특성과 요구 사항에 따라 적당한 GC를 선택하기를 권장드립니다. 이런 내용을 고려하지 않고 기본 설정을 변경하면 예상치 못한 장애를 맞을 수 있으니…&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1.Latency&lt;/strong&gt;:  애플리케이션의 빠른 응답이 중요한 경우, pause time을 최소화하는 GC 고려해보기&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;G1GC 또는 ZGC(Generational) 살펴보기&lt;/li&gt;\n  &lt;li&gt;힙 메모리 영역 조정해보기(ex. 객체 크기가 큰데 survivor 영역이 작으면 불필요하게 GC 자주 발생)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;2. Pause Time&lt;/strong&gt;:  STW에 따른 pause time이 중요한 경우, 마찬가지로 pause time을 최소화하는 GC 고려해보기&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;G1GC 또는 ZGC(Generational) 살펴보기&lt;/li&gt;\n  &lt;li&gt;실시간 데이터 스트리밍, 대규모 트랜잭션 시스템 등&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;3. Heap Memory capacity&lt;/strong&gt;:  애플리케이션의 메모리 사용량 및 힙 크기 중요한 경우&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;Parallel GC나 CMS GC 살펴보기&lt;/li&gt;\n  &lt;li&gt;Generational ZGC 살펴보기&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;4. Throughput&lt;/strong&gt;:  애플리케이션 처리량 최적화가 중요한 경우&lt;br /&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;Parallel GC 살펴보기&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h3 id=&quot;ps&quot;&gt;P.S.&lt;/h3&gt;\n\n&lt;p&gt;ZGC를 적용할 최초 시점에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+UseZGC&lt;/code&gt; 옵션만 사용해서 Single-generation ZGC를 사용했고, 메트릭 변화와 개선이 필요한 점들을 찾아보다가 Generational ZGC를 접하게 되어 지금은 Generational ZGC를 사용중입니다. Generational ZGC는 단일 세대에 비해 CPU 활용면에서 우수하기 때문에, JDK 21 버전 이상을 쓰고 있다면 (꼭) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:+ZGenerational&lt;/code&gt; 옵션을 추가해서 Generational ZGC를 활성화하시길 바랍니다.&lt;/p&gt;\n\n&lt;p&gt;&lt;img src=&quot;/images/2024/06/29/zgc-generational-cpu.png&quot; alt=&quot;Generational ZGC CPU usage&quot; title=&quot;Generational ZGC CPU usage&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;\n\n&lt;center&gt;Generational 적용 이후 CPU Usage 변화&lt;/center&gt;\n\n&lt;hr /&gt;\n\n&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=&quot;https://youtu.be/OnodHoNYE1Y?si=dtTtNzjkC-KK5ZIt&quot;&gt;Z Garbage Collector: The Next Generation&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://inside.java/2023/11/28/gen-zgc-explainer/&quot;&gt;Introducing Generational ZGC&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/21/gctuning/z-garbage-collector.html#GUID-FD855EE7-9ED3-46BF-8EA5-A73EB5096DDB&quot;&gt;The Z Garbage Collector&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=&quot;https://hub.packtpub.com/getting-started-with-z-garbage-collectorzgc-in-java-11-tutorial/&quot;&gt;Getting started with Z Garbage Collector (ZGC) in Java 11 [Tutorial]&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n            \n          ",
        "contentSnippet": "<p>ZGC(Z Garbage Collector)는 JVM 진영에서 Serial → Parallel → CMS → G1 이후에 새롭게 등장한 Garbage Collector 입니다. JDK 11에 Experimental로 추가되었고, JDK 15에서 Production Ready 상태로 전환되었으며, LDT 버전인 JDK 17에도 반영되었습니다. ZGC의 주요 목표 중 하나는 Stop-The-World(STW) 시간을 1ms 이하로 줄이는 것입니다.</p>\n\n<p>과거에 CMS GC를 사용하는 애플리케이션을 운영하다보면 STW 시간이 길어지다 보면 요청을 제대로 처리하지 못하는 현상 때문에 애를 먹었던게 생각나네요. ZGC는 대용량 힙 메모리에서도 낮은 지연 시간(low latency)을 목표로 설계되었기 때문에, 이를 적용하는 것만으로도 충분한 가치가 있어보이는 GC 알고리즘이었습니다. 이번 글에서는 애플리케이션의 성능을 개선하면서 적용했던 ZGC에 대해 소개하려고 합니다.</p>\n\n<hr />\n\n<h1 id=\"zgc\">ZGC</h1>\n\n<p>ZGC는 대용량 힙 메모리에서도 낮은 지연 시간(low latency)을 목표로 설계되었습니다. Heap Allocation, Compaction 등 거의 모든 면에서 변화가 있었기 때문에, 꼭 바로 이전에 나온 G1과 비교하지 않더라도 ZGC 자체로도 재미있는 피쳐들을 가지고 있습니다.</p>\n\n<p>아래는 2023년 Oracle DevLive Level Up에서 발표된 <a href=\"https://youtu.be/OnodHoNYE1Y?si=dtTtNzjkC-KK5ZIt\">Z Garbage Collector: The Next Generation</a>에 소개된 ZGC의 특징들입니다.</p>\n\n<ul>\n  <li><strong>Scalable</strong>: 확장 가능하도록 설계되어 수백 MB에서 최대 수 TB 메모리 처리</li>\n  <li><strong>Low Latency</strong>: 1MS 미만의 일정한 STW 시간(puase-time)</li>\n  <li><strong>Auto-tuning</strong>: 성능 최적화에 필요한 튜닝의 양을 줄이기기 위해 GC의 많은 튜닝 설정들을 자동화</li>\n  <li><strong>Throughput</strong>: 동일한 워크로드에서 전체 성능의 15% 내에서 성능 유지</li>\n</ul>\n\n<p><img src=\"/images/2024/06/29/zgc-00.png\" alt=\"ZGC\" title=\"ZGC\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/06/29/zgc-01.png\" alt=\"ZGC\" title=\"ZGC\" class=\"center-image\" /></p>\n\n<ul>\n  <li><strong>Concurrent</strong>:  ZGC는 대부분의 작업을 Java 애플리케이션 스레드가 실행되는 동안 동시에 수행. GC 동안 애플리케이션의 응답성을 유지하는 데 도움을 준다.</li>\n  <li><strong>Constant pause times</strong>:  GC 동안 발생하는 STW(pause-time)이 일정하게 유지되며, 힙 크기나 라이브 객체의 크기에 따라 비례적으로 증가하지 않는다.</li>\n  <li><strong>Parallel</strong>:  여러 스레드를 동시에 사용하여 GC 수행해서 더 빠르게 완료. Reference 할당마다 실행되는 Load Barrier를 통해 GC에 필요한 작업들을 멀티 스레드로 애플리케이션 스레드와 동시에 진행.</li>\n  <li><strong>Compacting</strong>:  메모리 단편화를 줄이기 위해 객체를 이동시켜서 메모리 할당 효율성을 높인다.\n    <ul>\n      <li>G1GC는 Compaction을 STW 동안 수행하는 반면, ZGC는 애플리케이션 스레드와 병렬로 수행.</li>\n      <li>즉, 객체 이동 및 업데이트 작업을 애플리케이션이 실행되는 동안 동시에 수행한다.</li>\n    </ul>\n  </li>\n  <li><strong>Region-based</strong>:  메모리를 여러 영역으로 나누어 관리하며, 많은 가비지가 생성되는 영역에 집중하여 효율적으로 GC 수행</li>\n  <li><strong>NUMA-aware</strong>:  NUMA(Non-Uniform Memory Access) 아키텍처를 인식하고, CPU에 가까운 메모리에 객체를 할당하여 성능을 최적화</li>\n  <li><strong>Load barriers &amp; Colored pointers</strong>:\n    <ul>\n      <li><strong>Load barriers</strong>:  메모리 로드 시 특정 조건을 확인하는 메커니즘, G C중에도 안전한 메모리 접근을 보장</li>\n      <li><strong>Colored pointers</strong>:  포인터에 색상을 지정하여 객체의 상태를 추적하고, 이를 통해 GC 효율적 수행</li>\n    </ul>\n  </li>\n  <li><strong>Auto tuning</strong>:  복잡한 설정 없이 자동으로 최적화되도록 설계되었다. 복잡한 설정을 조정할 필요 없이 ZGC의 혜택을 누릴 수 있다.</li>\n</ul>\n\n<p><img src=\"/images/2024/06/29/zgc-02.png\" alt=\"ZGC\" title=\"ZGC\" class=\"center-image\" /></p>\n\n<h3 id=\"heap-allocation\">Heap Allocation</h3>\n\n<p><strong>G1 GC(Garbage First Garbage Collector)</strong><br /></p>\n\n<p>G1GC는 Garbage Collection을 보다 효율적으로 수행하기 위해 Heap을 동일한 크기의 여러 힙 영역(Regions)으로 나눕니다. 그리고 각 Heap 영역은 서로 다른 역할을 담당합니다.</p>\n\n<ul>\n  <li>Eden Space: 새로 생성된 객체들이 할당되는 공간.</li>\n  <li>Survivor Space: Eden 영역에서 생존한 객체들이 이동되는 공간.</li>\n  <li>Old Generation: Survivor 영역에서 생존한 오래된 객체들이 이동되는 공간.</li>\n</ul>\n\n<p><img src=\"/images/2024/06/29/g1-heap-allocation.png\" alt=\"G1 Heap Allocation\" title=\"G1 Heap Allocation\" class=\"center-image\" /></p>\n\n<p><strong>ZGC (Z Garbage Collector)</strong><br /></p>\n\n<p>ZGC는 메모리 단편화를 줄이고 관리 효율성을 높이기 위해 다양한 크기의 메모리 블록으로 Heap을 나누어 사용합니다. 마찬가지로 각 Heap 영역은 서로 다른 역할을 담당합니다.</p>\n\n<ul>\n  <li>Small: 작은 객체들이 할당되는 영역.</li>\n  <li>Medium: 중간 크기 객체들이 할당되는 영역.</li>\n  <li>Large(N x 2 MB): 큰 객체들이 할당되는 영역. N은 객체 크기에 따라 달라집니다.</li>\n</ul>\n\n<p><img src=\"/images/2024/06/29/zgc-heap-allocation.png\" alt=\"ZGC Heap Allocation\" title=\"ZGC Heap Allocation\" class=\"center-image\" /></p>\n\n<h3 id=\"zgc를-도입하며-발생하는-trade-off\">ZGC를 도입하며 발생하는 Trade-off</h3>\n\n<p>ZGC는 별도 설정 없이 자동으로 최적화까지 해주니 모든 면에서 우수해보입니다. 그런데 ZGC를 도입하며 발생할 수 있는 trade-off가 몇가지 있습니다.</p>\n\n<p><strong>1) CPU 자원 효율 문제</strong></p>\n\n<p>ZGC는 초당 1ms 이하의 pause time을 유지하면서도 최대 16TB 크기의 힙을 지원하는 것으로 설계되었습니다. 대부분의 작업을 Java 애플리케이션 스레드가 실행되는 동안 동시에 수행하기 때문에, 그만큼 CPU 자원을 사용하게 되고, 이는 <strong>애플리케이션의 처리량(Throughput) 감소에 영향</strong>을 줄 수 있습니다.</p>\n\n<p>특히 초기 ZGC(~JDK 21)는 단일 세대 ZGC(Single-generational ZGC 또는 Non-generational ZGC)라고도 부르는데, 이제 막 생성된 객체와 오래된 객체 간의 구분이 따로 없어서 단일 세대라고 부릅니다. 그러다보니 GC 수행 과정에서 모든 객체를 대상으로 정리가 발생하기 때문에, CPU 활용 효율면에서는 조금은 더 취약합니다.</p>\n\n<p><strong>2) 객체 할당 지연(Allocation stall) 문제(← 1번으로 인해 발생)</strong></p>\n\n<p>새로운 객체가 메모리에 할당되는 속도가 GC가 메모리를 회수하는 속도보다 빠를 때 할당 지연(Allocation stall) 문제가 발생합니다. 이건 메모리가 부족하기 때문에 발생하는데, GC가 메모리를 회수하는 동안 애플리케이션은 새로운 객체를 할당하기 위해 기다려야되고, 이로 인해 애플리케이션의 성능이 저하될 수 있습니다. 이건 1번으로 인한 부수 효과인데, 전체 힙 대상으로 한 번에 GC를 수행하기 때문에 처리가 오래 걸리기 때문입니다.</p>\n\n<hr />\n\n<h1 id=\"generational-zgc\">Generational ZGC</h1>\n\n<p>그래서 이 문제를 해결하기 위해 JDK 21에 Generational ZGC이 등장했습니다. ZGC와 동일한데 Heap을 논리적으로 두 세대로 분리한 차이가 있습니다(Young, Old). 객체가 할당되면 먼저 자주 스캔되는 Young Generation에 배치되고, 객체가 충분히 오래 살아남으면 Old Generation으로 승격됩니다.</p>\n\n<p>처리량 측면에서, Generational ZGC는 JDK 17의 단일 세대 ZGC 대비 약 10%의 개선을 보였으며, 약간의 저하가 있었던 JDK 21의 단일 세대 ZGC 대비 약 10% 이상의 성능 향상을 보였다고 합니다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-young-old.png\" alt=\"ZGC Young &amp; Old\" title=\"ZGC Young &amp; Old\" class=\"center-image\" /></p>\n\n<h3 id=\"주요-차이점\">주요 차이점</h3>\n\n<p><img src=\"/images/2024/06/29/zgc-vs-generational-zgc.png\" alt=\"ZGC vs. Generational ZGC\" title=\"ZGC vs. Generational ZGC\" class=\"center-image\" /></p>\n\n<h3 id=\"performances\">Performances</h3>\n\n<p>단일 세대와의 성능 차이는 <a href=\"https://inside.java/2023/11/28/gen-zgc-explainer/\">Introducing Generational ZGC</a>에 잘 소개되어 있으니 참고하시면 좋겠습니다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-performance-00.png\" alt=\"ZGC Performance\" title=\"ZGC Performance\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/06/29/zgc-performance-01.png\" alt=\"ZGC Performance\" title=\"ZGC Performance\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/06/29/zgc-performance-02.png\" alt=\"ZGC Performance\" title=\"ZGC Performance\" class=\"center-image\" /></p>\n\n<p><img src=\"/images/2024/06/29/zgc-performance-03.png\" alt=\"ZGC Performance\" title=\"ZGC Performance\" class=\"center-image\" /></p>\n\n<h3 id=\"generational-zgc-활성화\">Generational ZGC 활성화</h3>\n\n<p>Generational ZGC를 활성화하려면 ZGC 사용을 위한 <code class=\"language-plaintext highlighter-rouge\">-XX:+UseZGC</code> 옵션에 더해 <code class=\"language-plaintext highlighter-rouge\">-XX:+ZGenerational</code> argument도 추가해줘야 합니다(JDK 버전은 21 이상).</p>\n\n<ul>\n  <li>참고로, JDK 21에서 <code class=\"language-plaintext highlighter-rouge\">-XX:+ZGenerational</code> 옵션이 없으면 Single-generation ZGC가 기본값입니다. 따라서 이 옵션을 추가하지 않으면 단일 세대의 ZGC가 동작합니다.</li>\n  <li>미래에는 Generational ZGC가 기본값이 될 예정이라고 합니다.</li>\n</ul>\n\n<h3 id=\"jvm-메모리-할당량이-커보이는-현상\">JVM 메모리 할당량이 커보이는 현상</h3>\n\n<p>ZGC 적용 이후에 메트릭을 살펴보면 선언한 Max Heap Size 보다 더 큰 메모리가 관측됩니다. JVM 애플리케이션의 Max Heap Size를 3GB로 설정했는데, Grafana(export by prometheus)에서 관측된 메트릭은 2배 정도인 6GB가 관측되었습니다. 의도하지 않았는데 재밌는 현상입니다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-heap-metric.png\" alt=\"ZGC JVM Heap\" title=\"ZGC JVM Heap\" class=\"center-image\" /></p>\n\n<center>`jvm_memory_max_bytes`: The total memory (in bytes) in the JVM runtime.</center>\n\n<p><strong>1. 다중 매핑</strong>:<br /></p>\n<ul>\n  <li>ZGC는 동일한 주소(메모리)를 3개의 다른 view로 매핑: marked0, marked1, remapped</li>\n  <li>이 3개의 view는 virtual memory address에 반영되는데, 동일 물리 메모리를 3개의 다른 가상 메모리에 맵핑되는 형태. 즉, 각 물리 메모리 페이지에 3개의 가상 페이지가 맵핑됩니다.</li>\n</ul>\n\n<p><strong>2. 가상 메모리 사용 증가:</strong><br /></p>\n<ul>\n  <li>이런 다중 매핑으로 인해 virtual memory 사용량이 실제 physical memory 사용량보다 크게 나타날 수 있어요.</li>\n  <li>예를 들어, 힙 사이즈가 1GB인 경우 virtual memory는 최대 3GB까지 관측될 수 있어요.</li>\n</ul>\n\n<p><strong>3. Generational GC 영향:</strong><br /></p>\n<ul>\n  <li>만약 ZGC가 현재 Single-generation이 아닌 Young, Old 세대로 구성된 generational GC 으로 되면 맵핑 수가 6배까지 증가할 수 있어요.</li>\n  <li>즉, max heap size의 6배에 해당하는 virtual memory 사용량이 관측될 수 있어요.</li>\n</ul>\n\n<p>결론은 ZGC의 다중 매핑으로 인해 memory 사용량이 실제보다 크게 관측되기 때문이다. 처음엔 Grafana JVM Metric만 보고 잘못 설정한게 있나 헷갈렸는데, 검색하다가 <a href=\"https://stackoverflow.com/questions/57899020/zgc-max-heap-size-exceed-physical-memory/61470663#61470663\">Stackoverflow에 재미난 답변</a>도 발견했다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-virtual-memory.png\" alt=\"ZGC Virtual Memory Space\" title=\"ZGC Virtual Memory Space\" class=\"center-image\" /></p>\n\n<hr />\n\n<h1 id=\"zgc-적용후-메트릭-변화\">ZGC 적용후 메트릭 변화</h1>\n\n<p>ZGC를 적용하기 전에는 G1GC를 사용중이었고, Eden, Survivor 영역 그리고 jvm parameter 등에 대한 별도 튜닝은 하지 않고 기본 설정을 사용하고 있었습니다.</p>\n\n<h3 id=\"g1-gc-적용된-애플리케이션-메트릭\">G1 GC 적용된 애플리케이션 메트릭</h3>\n\n<p>아래는 임의의 2개 Pod에서 CPU, Heap Memory와 STW에 의한 Pause Time을 관측한 결과다.</p>\n\n<p><img src=\"/images/2024/06/29/g1-0-memory.png\" alt=\"G1GC metric - memory\" title=\"G1GC metric - memory\" class=\"center-image\" /></p>\n\n<center>Eden used: max(1.79Gb), avg(958MB) | CPU usage: system avg(0.114), max(0.137)</center>\n\n<p><img src=\"/images/2024/06/29/g1-1-memory.png\" alt=\"G1GC metric - memory\" title=\"G1GC metric - memory\" class=\"center-image\" /></p>\n\n<center>Eden used: max(1.77Gb), avg(888MB) | CPU usage: system avg(0.105), max(0.161)</center>\n\n<p><img src=\"/images/2024/06/29/g1-0-pause-time.png\" alt=\"G1GC metric - pause time\" title=\"G1GC metric - pause time\" class=\"center-image\" /></p>\n\n<center>Pause Time: max(1.6ms), avg(259μs)</center>\n\n<p><img src=\"/images/2024/06/29/g1-1-pause-time.png\" alt=\"G1GC metric - pause time\" title=\"G1GC metric - pause time\" class=\"center-image\" /></p>\n\n<center>Pause Time: max(1.87ms), avg(223μs)</center>\n\n<h3 id=\"zgc-적용된-애플리케이션-메트릭\">ZGC 적용된 애플리케이션 메트릭</h3>\n\n<p>아래 메트릭도 마찬가지로 ZGC를 적용한 이후에 임의의 2개 Pod에서 CPU, Heap Memory와 STW에 의한 Pause Time을 관측한 결과다. 그런데 이 메트릭은 Generational ZGC가 아닌 Single-generation ZGC가 적용되었을때의 결과다. 그래서 메트릭을 보면 JVM Heap Memory 영역이 ZHeap 하나만 표현된걸 볼 수 있다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-0-memory.png\" alt=\"ZGC metric - memory\" title=\"ZGC metric - memory\" class=\"center-image\" /></p>\n\n<center>Heap used: max(998MB), avg(616MB)  |  CPU usage: system avg(0.153), max(0.351)</center>\n\n<p><img src=\"/images/2024/06/29/zgc-1-memory.png\" alt=\"ZGC metric - memory\" title=\"ZGC metric - memory\" class=\"center-image\" /></p>\n\n<center>Heap used: max(1.37GB), avg(798MB)  |  CPU usage: system avg(0.137), max(0.263)</center>\n\n<p><img src=\"/images/2024/06/29/zgc-0-pause-time.png\" alt=\"ZGC metric - pause time\" title=\"ZGC metric - pause time\" class=\"center-image\" /></p>\n\n<center>Pause Time:  max(66.7μs) avg(4.49μs)</center>\n\n<p><img src=\"/images/2024/06/29/zgc-1-pause-time.png\" alt=\"ZGC metric - pause time\" title=\"ZGC metric - pause time\" class=\"center-image\" /></p>\n\n<center>Pause Time:  max(66.7μs) avg(5.51μs)</center>\n\n<h3 id=\"메트릭-변화g1--non-gernerational-zgc\">메트릭 변화(G1 → Non Gernerational ZGC):</h3>\n\n<p>Non Gernerational(Single-generational) ZGC를 적용하고 나서 CPU 사용량을 증가하고, Memory 사용량과 STW에 의한 Pause Time은 감소했습니다.</p>\n\n<p><strong>memory usage:</strong><br /></p>\n<ul>\n  <li>used 기준 약 1.68배 감소(1.16 GiB → 0.69 GiB)</li>\n</ul>\n\n<p><strong>cpu usage:</strong><br /></p>\n<ul>\n  <li>max 약 2배 증가 (0.137 → 0.351)</li>\n  <li>avg 약 1.3배 증가 (0.105 → 0.137)</li>\n</ul>\n\n<p><strong>pause time:</strong><br /></p>\n<ul>\n  <li>max 약 28배 감소(1.87ms → 66.7μs)</li>\n  <li>avg 약 47배 감소(259μs → 5.51μs)</li>\n</ul>\n\n<hr />\n\n<h1 id=\"다양한-요소를-고려해서-gc-알고리즘-선택하기\">다양한 요소를 고려해서 GC 알고리즘 선택하기</h1>\n\n<p>GC를 선택할 때 throughput, latency, 리소스 사용량 등 다양한 요소를 고려해야 합니다. 예를 들어, G1과 ZGC는 각각 throughput과 latency 기준으로 애플리케이션 영향도가 달라질 수 있어요.</p>\n\n<ul>\n  <li>G1은 대부분의 시나리오에서 균형 잡힌 성능을 제공하지만, 변동 폭이 큰 객체 할당이나 오래 실행되는 작업에 적합한 경우가 있고,</li>\n  <li>ZGC는 매우 짧은 pause time을 제공하지만 일부 시나리오에서는 G1보다 낮은 throuput을 보일 수 있습니다.</li>\n</ul>\n\n<p><img src=\"/images/2024/06/29/gc-compare.png\" alt=\"GC\" title=\"GC\" class=\"center-image\" /></p>\n\n<p>위에서 ZGC를 적용한 애플리케이션은 제품 특성상 Low Latency를 보장해야 하고 STW로 인한 영향을 최소화해야 하기 때문에 CPU 리소스를 조금 희생하더라도 Memory와 Pause Time 감소라는 이점을 챙길 수 있었습니다. 따라서 애플리케이션의 특성과 요구 사항에 따라 적당한 GC를 선택하기를 권장드립니다. 이런 내용을 고려하지 않고 기본 설정을 변경하면 예상치 못한 장애를 맞을 수 있으니…</p>\n\n<p><strong>1.Latency</strong>:  애플리케이션의 빠른 응답이 중요한 경우, pause time을 최소화하는 GC 고려해보기<br /></p>\n<ul>\n  <li>G1GC 또는 ZGC(Generational) 살펴보기</li>\n  <li>힙 메모리 영역 조정해보기(ex. 객체 크기가 큰데 survivor 영역이 작으면 불필요하게 GC 자주 발생)</li>\n</ul>\n\n<p><strong>2. Pause Time</strong>:  STW에 따른 pause time이 중요한 경우, 마찬가지로 pause time을 최소화하는 GC 고려해보기<br /></p>\n<ul>\n  <li>G1GC 또는 ZGC(Generational) 살펴보기</li>\n  <li>실시간 데이터 스트리밍, 대규모 트랜잭션 시스템 등</li>\n</ul>\n\n<p><strong>3. Heap Memory capacity</strong>:  애플리케이션의 메모리 사용량 및 힙 크기 중요한 경우<br /></p>\n<ul>\n  <li>Parallel GC나 CMS GC 살펴보기</li>\n  <li>Generational ZGC 살펴보기</li>\n</ul>\n\n<p><strong>4. Throughput</strong>:  애플리케이션 처리량 최적화가 중요한 경우<br /></p>\n<ul>\n  <li>Parallel GC 살펴보기</li>\n</ul>\n\n<h3 id=\"ps\">P.S.</h3>\n\n<p>ZGC를 적용할 최초 시점에는 <code class=\"language-plaintext highlighter-rouge\">-XX:+UseZGC</code> 옵션만 사용해서 Single-generation ZGC를 사용했고, 메트릭 변화와 개선이 필요한 점들을 찾아보다가 Generational ZGC를 접하게 되어 지금은 Generational ZGC를 사용중입니다. Generational ZGC는 단일 세대에 비해 CPU 활용면에서 우수하기 때문에, JDK 21 버전 이상을 쓰고 있다면 (꼭) <code class=\"language-plaintext highlighter-rouge\">-XX:+ZGenerational</code> 옵션을 추가해서 Generational ZGC를 활성화하시길 바랍니다.</p>\n\n<p><img src=\"/images/2024/06/29/zgc-generational-cpu.png\" alt=\"Generational ZGC CPU usage\" title=\"Generational ZGC CPU usage\" class=\"center-image\" /></p>\n\n<center>Generational 적용 이후 CPU Usage 변화</center>\n\n<hr />\n\n<h1 id=\"references\">References</h1>\n<ul>\n  <li><a href=\"https://youtu.be/OnodHoNYE1Y?si=dtTtNzjkC-KK5ZIt\">Z Garbage Collector: The Next Generation</a></li>\n  <li><a href=\"https://inside.java/2023/11/28/gen-zgc-explainer/\">Introducing Generational ZGC</a></li>\n  <li><a href=\"https://docs.oracle.com/en/java/javase/21/gctuning/z-garbage-collector.html#GUID-FD855EE7-9ED3-46BF-8EA5-A73EB5096DDB\">The Z Garbage Collector</a></li>\n  <li><a href=\"https://hub.packtpub.com/getting-started-with-z-garbage-collectorzgc-in-java-11-tutorial/\">Getting started with Z Garbage Collector (ZGC) in Java 11 [Tutorial]</a></li>\n</ul>",
        "guid": "https://sungjk.github.io/2024/06/29/zgc.html",
        "isoDate": "2024-06-29T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": [
      {
        "creator": "고명환",
        "title": "강의안 | 라이프스타일 혁신과 소비자분석 - 창업(소상공인)",
        "link": "https://brunch.co.kr/@@LOc/236",
        "pubDate": "Sat, 29 Jun 2024 05:13:10 GMT",
        "author": "고명환",
        "content": "1. 라이프스타일 혁신과 소비자분석&nbsp;- Sample   2. 라이프스타일 혁신과 소비자분석 - 전체 강의안  https://docs.google.com/presentation/d/e/2PACX-1vRd9mQsLeUJt0WRSzN6GMeD_GsbGYKRhMXSU8VX8GUXqrpp_5tD_Qj-pkKgKGUTvw/pub?start=false&amp;loop=fals<img src= \"https://img1.daumcdn.net/thumb/R1280x0.fjpg/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fbrunch%2Fservice%2Fuser%2FLOc%2Fimage%2Fl3HWT25jT8EdQwyjhYCBzhVks3Q.JPG\" width=\"500\" />",
        "contentSnippet": "1. 라이프스타일 혁신과 소비자분석 - Sample   2. 라이프스타일 혁신과 소비자분석 - 전체 강의안  https://docs.google.com/presentation/d/e/2PACX-1vRd9mQsLeUJt0WRSzN6GMeD_GsbGYKRhMXSU8VX8GUXqrpp_5tD_Qj-pkKgKGUTvw/pub?start=false&loop=fals",
        "guid": "https://brunch.co.kr/@@LOc/236",
        "isoDate": "2024-06-29T05:13:10.000Z"
      }
    ]
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "윈도우 11 오래된 파일을 자동으로 삭제하는 방법",
        "link": "http://muzbox.tistory.com/483446",
        "pubDate": "Wed, 3 Jul 2024 18:14:27 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483446#entry483446comment",
        "content": "<p data-ke-size=\"size18\">&nbsp;윈도우 11에서 오래된 파일을 쉽게 찾고 삭제하는 방법입니다. 저장공간 센스를 사용하여 저장 공간을 효율적으로 관리할 수 있는 팁을 소개합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"윈도우 11에서 오래된 파일을 자동으로 삭제하는 방법.png\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/D1UTg/btsImcjnsoK/HkjTD6QmsXqxHBhGJgBsJ1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/D1UTg/btsImcjnsoK/HkjTD6QmsXqxHBhGJgBsJ1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FD1UTg%2FbtsImcjnsoK%2FHkjTD6QmsXqxHBhGJgBsJ1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"윈도우 11에서 오래된 파일을 자동으로 삭제하는 방법.png\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #009a87;\"><b>오래된&nbsp;파일을&nbsp;삭제해야&nbsp;하는&nbsp;이유</b></span> <br />&nbsp;</h3>\n<p data-ke-size=\"size18\">&nbsp;컴퓨터를 사용하다 보면 불필요한 파일들이 쌓여 저장 공간을 차지하게 됩니다. 이는 컴퓨터의 성능 저하를 일으키고, 중요한 파일을 저장할 공간을 부족하게 만들 수 있습니다. 특히, 프로그램 설치 시 생성되는 임시 파일, 다운로드 후 방치된 파일, 사용하지 않는 오래된 문서나 사진들이 저장 공간을 많이 차지하게 됩니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;따라서 주기적으로 이러한 파일들을 정리하는 것은 매우 중요합니다. 윈도우 11에서는 이러한 오래된 파일들을 효율적으로 찾아 삭제할 수 있는 효과적인 방법을 제공합니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #009a87;\"><b>저장공간&nbsp;센스&nbsp;사용하기</b></span></h3>\n<p data-ke-size=\"size18\">&nbsp;저장공간 센스는 윈도우 11에 내장된 기능으로, 자동으로 오래된 파일을 찾아 삭제해 줍니다. 이 기능을 설정하여 특정 조건에 따라 파일을 삭제하도록 할 수 있습니다. 수동으로 실행하거나 자동으로 실행되도록 설정할 수 있으며, 사용자는 이를 통해 저장 공간을 더욱 효율적으로 관리할 수 있습니다. 다음은 저장공간 센스를 설정하고 활용하는 방법에 대한 자세한 설명입니다. <br /><br />1.&nbsp;설정&nbsp;열기:&nbsp;`Windows&nbsp;+&nbsp;i`&nbsp;키를&nbsp;눌러&nbsp;설정&nbsp;앱을&nbsp;엽니다. <br />2. 시스템 선택: 왼쪽 사이드바에서 '시스템'을 선택하고 오른쪽 창에서 '저장소'를 클릭합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"01.png\" data-origin-width=\"1005\" data-origin-height=\"628\"><span data-url=\"https://blog.kakaocdn.net/dn/NRE8c/btsInDfWasC/5W7uY5bVdDwMXCH2QMuSok/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/NRE8c/btsInDfWasC/5W7uY5bVdDwMXCH2QMuSok/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FNRE8c%2FbtsInDfWasC%2F5W7uY5bVdDwMXCH2QMuSok%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"01.png\" data-origin-width=\"1005\" data-origin-height=\"628\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\"><br />3. 저장공간 센스 활성화: '저장소 관리' 섹션에서 '저장공간 센스' 옆의 토글을 켭니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"02.png\" data-origin-width=\"1005\" data-origin-height=\"628\"><span data-url=\"https://blog.kakaocdn.net/dn/O4GTL/btsIk3gzYyl/KkxrHFMNzcRrivApGPHaq0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/O4GTL/btsIk3gzYyl/KkxrHFMNzcRrivApGPHaq0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FO4GTL%2FbtsIk3gzYyl%2FKkxrHFMNzcRrivApGPHaq0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"02.png\" data-origin-width=\"1005\" data-origin-height=\"628\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\"><br />4. 파일 삭제 조건 설정: '임시 파일 정리' 섹션에서 옵션을 설정하여 자동으로 파일을 삭제하도록 합니다. 여기서 사용자는 '휴지통에 있는 파일 삭제'와 '다운로드 폴더에 있는 파일 삭제' 옵션을 설정할 수 있습니다. ▼ </p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"03.png\" data-origin-width=\"1005\" data-origin-height=\"628\"><span data-url=\"https://blog.kakaocdn.net/dn/b16vs3/btsInvh1yKh/afrx5SeKnSs0ahpKraO5K0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/b16vs3/btsInvh1yKh/afrx5SeKnSs0ahpKraO5K0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb16vs3%2FbtsInvh1yKh%2Fafrx5SeKnSs0ahpKraO5K0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"03.png\" data-origin-width=\"1005\" data-origin-height=\"628\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<blockquote data-ke-style=\"style2\"><span style=\"color: #ee2323;\"><b>[세부 설명]</b></span><br />- 저장 공간 센스 실행 주기: 저장공간 센스가 자동으로 실행되는 주기를 설정합니다. 옵션으로는 매일, 매주, 매월, 디스크 공간 부족 시 실행이 있습니다. <br />-&nbsp;휴지통&nbsp;파일&nbsp;삭제&nbsp;주기:&nbsp;휴지통에&nbsp;있는&nbsp;파일이&nbsp;지정된&nbsp;기간&nbsp;동안&nbsp;보관된&nbsp;후&nbsp;삭제되도록&nbsp;설정할&nbsp;수&nbsp;있습니다.&nbsp;선택할&nbsp;수&nbsp;있는&nbsp;기간은&nbsp;'삭제&nbsp;안&nbsp;함',&nbsp;'1일',&nbsp;'14일',&nbsp;'30일',&nbsp;'60일'입니다. <br />-&nbsp;다운로드&nbsp;폴더&nbsp;파일&nbsp;삭제&nbsp;주기:&nbsp;다운로드&nbsp;폴더에&nbsp;있는&nbsp;파일이&nbsp;지정된&nbsp;기간&nbsp;동안&nbsp;열리지&nbsp;않았을&nbsp;경우&nbsp;삭제되도록&nbsp;설정할&nbsp;수&nbsp;있습니다.&nbsp;선택할&nbsp;수&nbsp;있는&nbsp;기간은&nbsp;'삭제&nbsp;안&nbsp;함',&nbsp;'1일',&nbsp;'14일',&nbsp;'30일',&nbsp;'60일'입니다.</blockquote>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #009a87;\"><b>수동&nbsp;정리&nbsp;방법</b></span> </h3>\n<p data-ke-size=\"size18\">&nbsp;저장공간 센스 외에도 사용자는 수동으로 파일을 정리할 수 있습니다. 파일 탐색기를 열어 특정 폴더를 정리하거나, 디스크 정리 도구를 이용해 불필요한 파일을 삭제할 수 있습니다. 이러한 방법은 저장공간 센스와 병행하여 사용하면 더욱 효과적입니다. </p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;이와 같이 윈도우 11에서는 저장공간 센스를 활용하여 오래된 파일을 효율적으로 정리할 수 있습니다. 저장공간 센스의 자동 관리 기능을 통해 손쉽게 저장 공간을 확보하고, 필요에 따라 수동 정리 방법을 병행함으로써 컴퓨터의 성능을 유지할 수 있습니다. 각 방법의 장단점을 파악하여 자신에게 맞는 방법을 선택해 보세요. 이렇게 하면 컴퓨터의 저장 공간을 효과적으로 관리하고 더 쾌적한 환경에서 작업할 수 있습니다. </p>",
        "contentSnippet": "윈도우 11에서 오래된 파일을 쉽게 찾고 삭제하는 방법입니다. 저장공간 센스를 사용하여 저장 공간을 효율적으로 관리할 수 있는 팁을 소개합니다.\n\n\n \n오래된 파일을 삭제해야 하는 이유 \n \n 컴퓨터를 사용하다 보면 불필요한 파일들이 쌓여 저장 공간을 차지하게 됩니다. 이는 컴퓨터의 성능 저하를 일으키고, 중요한 파일을 저장할 공간을 부족하게 만들 수 있습니다. 특히, 프로그램 설치 시 생성되는 임시 파일, 다운로드 후 방치된 파일, 사용하지 않는 오래된 문서나 사진들이 저장 공간을 많이 차지하게 됩니다.\n \n 따라서 주기적으로 이러한 파일들을 정리하는 것은 매우 중요합니다. 윈도우 11에서는 이러한 오래된 파일들을 효율적으로 찾아 삭제할 수 있는 효과적인 방법을 제공합니다.\n \n저장공간 센스 사용하기\n 저장공간 센스는 윈도우 11에 내장된 기능으로, 자동으로 오래된 파일을 찾아 삭제해 줍니다. 이 기능을 설정하여 특정 조건에 따라 파일을 삭제하도록 할 수 있습니다. 수동으로 실행하거나 자동으로 실행되도록 설정할 수 있으며, 사용자는 이를 통해 저장 공간을 더욱 효율적으로 관리할 수 있습니다. 다음은 저장공간 센스를 설정하고 활용하는 방법에 대한 자세한 설명입니다. \n1. 설정 열기: `Windows + i` 키를 눌러 설정 앱을 엽니다. \n2. 시스템 선택: 왼쪽 사이드바에서 '시스템'을 선택하고 오른쪽 창에서 '저장소'를 클릭합니다. ▼\n\n\n\n3. 저장공간 센스 활성화: '저장소 관리' 섹션에서 '저장공간 센스' 옆의 토글을 켭니다. ▼\n\n\n \n4. 파일 삭제 조건 설정: '임시 파일 정리' 섹션에서 옵션을 설정하여 자동으로 파일을 삭제하도록 합니다. 여기서 사용자는 '휴지통에 있는 파일 삭제'와 '다운로드 폴더에 있는 파일 삭제' 옵션을 설정할 수 있습니다. ▼ \n\n\n \n[세부 설명]\n- 저장 공간 센스 실행 주기: 저장공간 센스가 자동으로 실행되는 주기를 설정합니다. 옵션으로는 매일, 매주, 매월, 디스크 공간 부족 시 실행이 있습니다. \n- 휴지통 파일 삭제 주기: 휴지통에 있는 파일이 지정된 기간 동안 보관된 후 삭제되도록 설정할 수 있습니다. 선택할 수 있는 기간은 '삭제 안 함', '1일', '14일', '30일', '60일'입니다. \n- 다운로드 폴더 파일 삭제 주기: 다운로드 폴더에 있는 파일이 지정된 기간 동안 열리지 않았을 경우 삭제되도록 설정할 수 있습니다. 선택할 수 있는 기간은 '삭제 안 함', '1일', '14일', '30일', '60일'입니다.\n \n \n수동 정리 방법 \n 저장공간 센스 외에도 사용자는 수동으로 파일을 정리할 수 있습니다. 파일 탐색기를 열어 특정 폴더를 정리하거나, 디스크 정리 도구를 이용해 불필요한 파일을 삭제할 수 있습니다. 이러한 방법은 저장공간 센스와 병행하여 사용하면 더욱 효과적입니다. \n \n \n 이와 같이 윈도우 11에서는 저장공간 센스를 활용하여 오래된 파일을 효율적으로 정리할 수 있습니다. 저장공간 센스의 자동 관리 기능을 통해 손쉽게 저장 공간을 확보하고, 필요에 따라 수동 정리 방법을 병행함으로써 컴퓨터의 성능을 유지할 수 있습니다. 각 방법의 장단점을 파악하여 자신에게 맞는 방법을 선택해 보세요. 이렇게 하면 컴퓨터의 저장 공간을 효과적으로 관리하고 더 쾌적한 환경에서 작업할 수 있습니다.",
        "guid": "http://muzbox.tistory.com/483446",
        "categories": [
          "윈도우 사용팁/윈도우11 사용법",
          "It",
          "디스크관리",
          "오래된 파일 자동삭제",
          "오래된파일삭제",
          "윈도우11 파일삭제",
          "자동 삭제 설정",
          "저장공간 센스",
          "컴퓨터 성능 향상",
          "테크플러스"
        ],
        "isoDate": "2024-07-03T09:14:27.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "멀티커맨더, 탭방식으로 효과적인 파일관리가 가능한 탐색기 대체 무료 프로그램",
        "link": "http://muzbox.tistory.com/483445",
        "pubDate": "Mon, 1 Jul 2024 13:27:15 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483445#entry483445comment",
        "content": "<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp; 탭 방식의 인터페이스와 다양한 고급 기능을 통해 윈도우 탐색기를 대체할 수 있는 '멀티커맨더 (Multi Commander)'를 소개합니다.</p>\n<table style=\"border-collapse: collapse; width: 95.6979%; height: 248px;\" border=\"1\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>분류</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">유틸리티/파일관리</td>\n<td style=\"width: 64.3682%; height: 248px; text-align: center;\" rowspan=\"4\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"516\" data-origin-height=\"330\"><span data-url=\"https://blog.kakaocdn.net/dn/UZle6/btsIhRthhTq/hCC5xlKsUmFMpqp9JUvCy0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/UZle6/btsIhRthhTq/hCC5xlKsUmFMpqp9JUvCy0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUZle6%2FbtsIhRthhTq%2FhCC5xlKsUmFMpqp9JUvCy0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"516\" data-origin-height=\"330\"/></span></figure>\n</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>사용범위</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">무료(개인)</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>사용환경</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\">Windows</td>\n</tr>\n<tr style=\"height: 62px;\"><!-- 첫 번째 열에 배경색을 노란색으로 설정 -->\n<td style=\"width: 13.1835%; height: 62px; text-align: center; background-color: #555555;\"><span style=\"color: #ffffff;\"><b>제작사</b></span></td>\n<td style=\"width: 22.4483%; height: 62px; text-align: center;\"><a href=\"https://multicommander.com/\" target=\"_blank\" rel=\"noopener\">Mathias&nbsp;Svensson</a></td>\n</tr>\n</tbody>\n</table>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b> 프로그램 소개</b></h2>\n<p data-ke-size=\"size18\">&nbsp; 파일 관리 작업이 지루하고 비효율적이라고 느껴질 때가 많죠? 특히나 많은 파일을 다뤄야 하는 전문가들에게는 더욱 그렇습니다. 그렇다면 '멀티커맨더'가 그 해결책이 될 수 있습니다. 이 파일 관리 도구는 탭 방식의 인터페이스와 강력한 기능을 제공하여, 효과적인 파일 관리를 유용합니다.&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">이번 포스팅에서는 '멀티커맨더' 에 대해 자세하게 소개합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"멀티커맨더.png\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/YlL9E/btsIixumtEj/vYxoXwhqHfqfHS5kVvylaK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/YlL9E/btsIixumtEj/vYxoXwhqHfqfHS5kVvylaK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FYlL9E%2FbtsIixumtEj%2FvYxoXwhqHfqfHS5kVvylaK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"멀티커맨더.png\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b> 주요 특징</b></h2>\n<p data-ke-size=\"size18\">'멀티커맨더'는&nbsp;파일&nbsp;관리에&nbsp;필요한&nbsp;모든&nbsp;기본&nbsp;기능을&nbsp;제공하며,&nbsp;여기에&nbsp;더해&nbsp;고급&nbsp;사용자를&nbsp;위한&nbsp;다양한&nbsp;특화&nbsp;기능이&nbsp;포함되어&nbsp;있습니다.&nbsp;그&nbsp;중에서도&nbsp;눈에&nbsp;띄는&nbsp;몇&nbsp;가지&nbsp;주요&nbsp;기능을&nbsp;소개합니다. </p>\n<p data-ke-size=\"size18\"><br />1. 듀얼 패널 인터페이스: '멀티커맨더'는 듀얼 패널 탭 방식의 인터페이스를 채택하여, 여러 폴더를 동시에 열어 작업할 수 있습니다. 이를 통해 파일 복사, 이동 등의 작업을 더욱 빠르고 효율적으로 수행할 수 있습니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1172\" data-origin-height=\"737\"><span data-url=\"https://blog.kakaocdn.net/dn/bnd9rC/btsIhytUMEK/rlDuEsU83kND2WPDC5gp10/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bnd9rC/btsIhytUMEK/rlDuEsU83kND2WPDC5gp10/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbnd9rC%2FbtsIhytUMEK%2FrlDuEsU83kND2WPDC5gp10%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1172\" data-origin-height=\"737\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\"><br /><br />2.&nbsp;자동&nbsp;작업&nbsp;기능:&nbsp;파일을&nbsp;복사하거나&nbsp;이동할&nbsp;때&nbsp;자동으로&nbsp;정렬하거나&nbsp;압축을&nbsp;해제하는&nbsp;기능이&nbsp;있어&nbsp;반복적인&nbsp;작업을&nbsp;크게&nbsp;줄여줍니다. <br /><br />3.&nbsp;고급&nbsp;파일&nbsp;검색:&nbsp;강력하고&nbsp;유연한&nbsp;파일&nbsp;검색&nbsp;기능을&nbsp;제공하여,&nbsp;원하는&nbsp;파일을&nbsp;빠르게&nbsp;찾을&nbsp;수&nbsp;있습니다.&nbsp;또한&nbsp;파일&nbsp;권한&nbsp;변경이나&nbsp;소유권&nbsp;가져오기&nbsp;등&nbsp;고급&nbsp;파일&nbsp;관리&nbsp;작업도&nbsp;손쉽게&nbsp;수행할&nbsp;수&nbsp;있습니다. <br /><br />4. 내장된 스크립트 엔진: 스크립트를 사용하여 다양한 작업을 자동화할 수 있습니다. 이를 통해 복잡한 파일 관리 작업을 효율적으로 처리할 수 있습니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1172\" data-origin-height=\"737\"><span data-url=\"https://blog.kakaocdn.net/dn/bhqtUu/btsIhuZBagI/ymlgFsdQkLccAt6dkkz3z1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bhqtUu/btsIhuZBagI/ymlgFsdQkLccAt6dkkz3z1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhqtUu%2FbtsIhuZBagI%2FymlgFsdQkLccAt6dkkz3z1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1172\" data-origin-height=\"737\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\"><br /><br />5.&nbsp;멀티미디어&nbsp;파일&nbsp;관리:&nbsp;이미지&nbsp;변환,&nbsp;회전,&nbsp;EXIF&nbsp;태그&nbsp;편집&nbsp;등&nbsp;다양한&nbsp;멀티미디어&nbsp;파일&nbsp;관리&nbsp;도구를&nbsp;제공하며,&nbsp;내부&nbsp;이미지&nbsp;뷰어를&nbsp;통해&nbsp;여러&nbsp;형식의&nbsp;이미지를&nbsp;바로&nbsp;확인할&nbsp;수&nbsp;있습니다. <br /><br />6.&nbsp;네트워크&nbsp;기능:&nbsp;FTP&nbsp;서버를&nbsp;가상&nbsp;파일&nbsp;시스템으로&nbsp;관리할&nbsp;수&nbsp;있으며,&nbsp;SSL/TLS&nbsp;지원을&nbsp;통해&nbsp;안전한&nbsp;파일&nbsp;전송이&nbsp;가능합니다.&nbsp;또한&nbsp;네트워크&nbsp;서버&nbsp;및&nbsp;공유&nbsp;폴더를&nbsp;쉽게&nbsp;탐색할&nbsp;수&nbsp;있습니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b>  프로그램 장단점</b></h2>\n<h4 data-ke-size=\"size20\"><b> 장점</b></h4>\n<blockquote data-ke-style=\"style3\"><b>1. 강력한 듀얼 패널 인터페이스</b>: 여러 폴더를 동시에 열어 작업할 수 있는 듀얼 패널 탭 방식으로, 파일 복사 및 이동 작업이 효율적입니다.<br /><b>2. 내장된 스크립트 엔진</b>:&nbsp; 스크립트를 사용해 다양한 작업을 자동화할 수 있어 효율적인 파일 관리가 가능합니다. <br /><b>3. 높은 커스터마이즈 가능성</b>: 레이아웃과 색상을 사용자의 스타일에 맞게 맞출 수 있으며, 플러그인과 확장을 통해 기능을 확장할 수 있습니다.<br /><b>4. 한글메뉴지원</b> : 자체한글 메뉴 지원은 초보자의 진입장벽을 낮추는데 효과적입니다.<br /><b>5. 포터블 지원</b> : 별도의 설치 과정없이 바로 사용할 수 있는 포터블버전을 제공하여 휴대성을 극대화 합니다.</blockquote>\n<h4 data-ke-size=\"size20\"><b> 단점</b></h4>\n<blockquote data-ke-style=\"style3\"><b>1. 복잡한 인터페이스</b>: 초보자에게는 많은 기능과 옵션이 다소 복잡하고 혼란스러울 수 있습니다. 기본적인 파일 관리자에 익숙한 사용자들에게는 학습 곡선이 있을 수 있습니다.<br /><b>2. 제한된 지원</b>: 주로 커뮤니티와 포럼을 통해 지원이 이루어지므로, 공식적인 기술 지원을 기대하기 어렵습니다. 문제 해결 시 사용자 스스로 찾아야 하는 경우가 많습니다.</blockquote>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b>  간단 활용법</b></h2>\n<p data-ke-size=\"size18\">'멀티커맨더'를&nbsp;최대한&nbsp;활용하기&nbsp;위해&nbsp;몇&nbsp;가지&nbsp;팁을&nbsp;공유합니다. <br /><br /><b>1.&nbsp;키보드&nbsp;단축키&nbsp;사용:&nbsp;</b>키보드&nbsp;단축키를&nbsp;사용하면&nbsp;마우스보다&nbsp;훨씬&nbsp;빠르게&nbsp;작업을&nbsp;수행할&nbsp;수&nbsp;있습니다.&nbsp;기본적인&nbsp;파일&nbsp;관리&nbsp;작업부터&nbsp;고급&nbsp;기능까지&nbsp;대부분의&nbsp;작업을&nbsp;키보드로&nbsp;수행할&nbsp;수&nbsp;있도록&nbsp;설정할&nbsp;수&nbsp;있습니다. <br /><br /><b>2.&nbsp;스크립트&nbsp;작성:</b>&nbsp;반복적인&nbsp;작업이&nbsp;많다면&nbsp;스크립트를&nbsp;작성하여&nbsp;자동화해&nbsp;보세요.&nbsp;'멀티커맨더'의&nbsp;내장된&nbsp;스크립트&nbsp;엔진을&nbsp;사용하면&nbsp;복잡한&nbsp;작업도&nbsp;간단하게&nbsp;처리할&nbsp;수&nbsp;있습니다. </p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1172\" data-origin-height=\"737\"><span data-url=\"https://blog.kakaocdn.net/dn/9pzVu/btsIheitjlW/eXpAeWjQsKzJwl71gm8CQk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/9pzVu/btsIheitjlW/eXpAeWjQsKzJwl71gm8CQk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F9pzVu%2FbtsIheitjlW%2FeXpAeWjQsKzJwl71gm8CQk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1172\" data-origin-height=\"737\"/></span></figure>\n</p>\n<p data-ke-size=\"size18\"><br /><b>3. 파일 보기 모드 변경</b>: 파일을 자세히 보고 싶을 때는 상세 보기 모드를, 전체적인 파일 구성을 확인하고 싶을 때는 썸네일 모드를 사용해 보세요. 상황에 맞게 파일 보기 모드를 변경하면 작업이 더욱 수월해집니다. <br /><br /><b>4. 플러그인 활용</b>: '멀티커맨더'는 다양한 플러그인을 지원합니다. 필요한 기능이 있다면 플러그인을 설치하여 기능을 확장해 보세요.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\"><b>  라이센스 정책</b></h2>\n<p data-ke-size=\"size18\">&nbsp;프리웨어로 제공되며, 개인 및 상업적 용도로 무료로 사용할 수 있습니다. 이는 사용자들이 무료로 프로그램을 다운로드하고 설치하여 사용할 수 있음을 의미합니다. 다만, 프로그램 개발을 지원하고자 하는 사용자는 기부를 통해 개발자를 후원할 수 있습니다.</p>\n<p data-ke-size=\"size18\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><b>⬇️ 프로그램 다운로드</b></h2>\n\n<p data-ke-size=\"size16\">&nbsp;</p>\n<figure id=\"og_1719807685432\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"website\" data-og-title=\"| MultiCommander - FileManager for professionals\" data-og-description=\"Downloads Download and use Multi Commander free of charge. If you want to support the development of Multi Commander you can make a donation. For Multi Commander SE and Multi Commander XP see bottom of page Download Full Installer 100% clean from third par\" data-og-host=\"multicommander.com\" data-og-source-url=\"https://multicommander.com/Downloads\" data-og-url=\"https://multicommander.com/Downloads\" data-og-image=\"\"><a href=\"https://multicommander.com/Downloads\" target=\"_blank\" rel=\"noopener\" data-source-url=\"https://multicommander.com/Downloads\">\n<div class=\"og-image\" style=\"background-image: url();\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">| MultiCommander - FileManager for professionals</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">Downloads Download and use Multi Commander free of charge. If you want to support the development of Multi Commander you can make a donation. For Multi Commander SE and Multi Commander XP see bottom of page Download Full Installer 100% clean from third par</p>\n<p class=\"og-host\" data-ke-size=\"size16\">multicommander.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "탭 방식의 인터페이스와 다양한 고급 기능을 통해 윈도우 탐색기를 대체할 수 있는 '멀티커맨더 (Multi Commander)'를 소개합니다.\n\n분류\n유틸리티/파일관리\n\n\n\n\n사용범위\n무료(개인)\n\n\n사용환경\nWindows\n\n\n제작사\nMathias Svensson\n\n\n\n \n 프로그램 소개\n  파일 관리 작업이 지루하고 비효율적이라고 느껴질 때가 많죠? 특히나 많은 파일을 다뤄야 하는 전문가들에게는 더욱 그렇습니다. 그렇다면 '멀티커맨더'가 그 해결책이 될 수 있습니다. 이 파일 관리 도구는 탭 방식의 인터페이스와 강력한 기능을 제공하여, 효과적인 파일 관리를 유용합니다. \n \n이번 포스팅에서는 '멀티커맨더' 에 대해 자세하게 소개합니다.\n\n\n \n 주요 특징\n'멀티커맨더'는 파일 관리에 필요한 모든 기본 기능을 제공하며, 여기에 더해 고급 사용자를 위한 다양한 특화 기능이 포함되어 있습니다. 그 중에서도 눈에 띄는 몇 가지 주요 기능을 소개합니다. \n1. 듀얼 패널 인터페이스: '멀티커맨더'는 듀얼 패널 탭 방식의 인터페이스를 채택하여, 여러 폴더를 동시에 열어 작업할 수 있습니다. 이를 통해 파일 복사, 이동 등의 작업을 더욱 빠르고 효율적으로 수행할 수 있습니다. ▼\n\n\n\n2. 자동 작업 기능: 파일을 복사하거나 이동할 때 자동으로 정렬하거나 압축을 해제하는 기능이 있어 반복적인 작업을 크게 줄여줍니다. \n3. 고급 파일 검색: 강력하고 유연한 파일 검색 기능을 제공하여, 원하는 파일을 빠르게 찾을 수 있습니다. 또한 파일 권한 변경이나 소유권 가져오기 등 고급 파일 관리 작업도 손쉽게 수행할 수 있습니다. \n4. 내장된 스크립트 엔진: 스크립트를 사용하여 다양한 작업을 자동화할 수 있습니다. 이를 통해 복잡한 파일 관리 작업을 효율적으로 처리할 수 있습니다. ▼\n\n\n\n5. 멀티미디어 파일 관리: 이미지 변환, 회전, EXIF 태그 편집 등 다양한 멀티미디어 파일 관리 도구를 제공하며, 내부 이미지 뷰어를 통해 여러 형식의 이미지를 바로 확인할 수 있습니다. \n6. 네트워크 기능: FTP 서버를 가상 파일 시스템으로 관리할 수 있으며, SSL/TLS 지원을 통해 안전한 파일 전송이 가능합니다. 또한 네트워크 서버 및 공유 폴더를 쉽게 탐색할 수 있습니다.\n \n \n  프로그램 장단점\n 장점\n1. 강력한 듀얼 패널 인터페이스: 여러 폴더를 동시에 열어 작업할 수 있는 듀얼 패널 탭 방식으로, 파일 복사 및 이동 작업이 효율적입니다.\n2. 내장된 스크립트 엔진:  스크립트를 사용해 다양한 작업을 자동화할 수 있어 효율적인 파일 관리가 가능합니다. \n3. 높은 커스터마이즈 가능성: 레이아웃과 색상을 사용자의 스타일에 맞게 맞출 수 있으며, 플러그인과 확장을 통해 기능을 확장할 수 있습니다.\n4. 한글메뉴지원 : 자체한글 메뉴 지원은 초보자의 진입장벽을 낮추는데 효과적입니다.\n5. 포터블 지원 : 별도의 설치 과정없이 바로 사용할 수 있는 포터블버전을 제공하여 휴대성을 극대화 합니다.\n 단점\n1. 복잡한 인터페이스: 초보자에게는 많은 기능과 옵션이 다소 복잡하고 혼란스러울 수 있습니다. 기본적인 파일 관리자에 익숙한 사용자들에게는 학습 곡선이 있을 수 있습니다.\n2. 제한된 지원: 주로 커뮤니티와 포럼을 통해 지원이 이루어지므로, 공식적인 기술 지원을 기대하기 어렵습니다. 문제 해결 시 사용자 스스로 찾아야 하는 경우가 많습니다.\n \n \n  간단 활용법\n'멀티커맨더'를 최대한 활용하기 위해 몇 가지 팁을 공유합니다. \n1. 키보드 단축키 사용: 키보드 단축키를 사용하면 마우스보다 훨씬 빠르게 작업을 수행할 수 있습니다. 기본적인 파일 관리 작업부터 고급 기능까지 대부분의 작업을 키보드로 수행할 수 있도록 설정할 수 있습니다. \n2. 스크립트 작성: 반복적인 작업이 많다면 스크립트를 작성하여 자동화해 보세요. '멀티커맨더'의 내장된 스크립트 엔진을 사용하면 복잡한 작업도 간단하게 처리할 수 있습니다. \n\n\n\n3. 파일 보기 모드 변경: 파일을 자세히 보고 싶을 때는 상세 보기 모드를, 전체적인 파일 구성을 확인하고 싶을 때는 썸네일 모드를 사용해 보세요. 상황에 맞게 파일 보기 모드를 변경하면 작업이 더욱 수월해집니다. \n4. 플러그인 활용: '멀티커맨더'는 다양한 플러그인을 지원합니다. 필요한 기능이 있다면 플러그인을 설치하여 기능을 확장해 보세요.\n \n  라이센스 정책\n 프리웨어로 제공되며, 개인 및 상업적 용도로 무료로 사용할 수 있습니다. 이는 사용자들이 무료로 프로그램을 다운로드하고 설치하여 사용할 수 있음을 의미합니다. 다만, 프로그램 개발을 지원하고자 하는 사용자는 기부를 통해 개발자를 후원할 수 있습니다.\n \n⬇️ 프로그램 다운로드\n \n\n \n| MultiCommander - FileManager for professionals\nDownloads Download and use Multi Commander free of charge. If you want to support the development of Multi Commander you can make a donation. For Multi Commander SE and Multi Commander XP see bottom of page Download Full Installer 100% clean from third par\nmulticommander.com",
        "guid": "http://muzbox.tistory.com/483445",
        "categories": [
          "추천 프리웨어/시스템관리,보안",
          "It",
          "공개자료실",
          "다중창파일탐색기",
          "멀티커맨더",
          "탭방식",
          "파일관리 프로그램",
          "파일탐색기",
          "파일탐색기 프로그램",
          "프리웨어"
        ],
        "isoDate": "2024-07-01T04:27:15.000Z"
      },
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "AI 사이트 추천, 'AI감지(AI Detection)' 부문 신규 업데이트 목록 24.06.28",
        "link": "http://muzbox.tistory.com/483444",
        "pubDate": "Fri, 28 Jun 2024 11:24:38 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483444#entry483444comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"AI Detection.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"><span data-url=\"https://blog.kakaocdn.net/dn/Uateu/btsIfDA72wn/8omJXE7AdnlNPSOfG4CSZk/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/Uateu/btsIfDA72wn/8omJXE7AdnlNPSOfG4CSZk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUateu%2FbtsIfDA72wn%2F8omJXE7AdnlNPSOfG4CSZk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"AI Detection.jpg\" data-origin-width=\"500\" data-origin-height=\"500\"/></span></figure>\n</p>\n<p style=\"text-align: center;\" data-ke-size=\"size18\"><b>AI&nbsp;감지(AI&nbsp;Detection)</b>는&nbsp;데이터에서&nbsp;객체,&nbsp;패턴&nbsp;또는&nbsp;이상&nbsp;징후를&nbsp;식별하고&nbsp;탐지하기&nbsp;위해&nbsp;인공지능&nbsp;기술을&nbsp;적용하는&nbsp;것입니다.&nbsp;여기에는&nbsp;이미지,&nbsp;오디오,&nbsp;비디오,&nbsp;텍스트&nbsp;감지가&nbsp;포함됩니다.&nbsp;</p>\n<p style=\"text-align: center;\" data-ke-size=\"size18\">&nbsp;</p>\n<p style=\"text-align: center;\" data-ke-size=\"size18\">AI&nbsp;모델은&nbsp;이미지에서&nbsp;객체를&nbsp;인식&nbsp;및&nbsp;분류하고,&nbsp;오디오&nbsp;신호를&nbsp;분석하고,&nbsp;비디오&nbsp;콘텐츠를&nbsp;처리하고,&nbsp;텍스트에서&nbsp;정보를&nbsp;추출하도록&nbsp;학습됩니다.&nbsp;AI&nbsp;탐지는&nbsp;보안,&nbsp;의료,&nbsp;고객&nbsp;서비스&nbsp;및&nbsp;기타&nbsp;산업&nbsp;분야에서&nbsp;다양하게&nbsp;적용되어&nbsp;더&nbsp;나은&nbsp;의사&nbsp;결정을&nbsp;위한&nbsp;자동화되고&nbsp;정확한&nbsp;데이터&nbsp;분석을&nbsp;가능하게&nbsp;합니다.</p>\n<h2 style=\"text-align: center;\" data-ke-size=\"size26\">&nbsp;<b><span style=\"color: #ef6f53;\">24년 6월 28일 기준 업데이트</span>한&nbsp;AI기술을&nbsp;활용한</b><b><span style=\"color: #99cefa;\"> AI&nbsp;Detection&nbsp;부문</span>의 </b><b>유용한 서비스를 소개합니다.</b></h2>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/665f5222bc480ed6e32f4992_copyrightcheck-ai-logo.png\" alt=\"Thumbnail\" width=\"197\" height=\"54\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Copyright Check AI</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">소셜 미디어 프로필에서 저작권 위반을 식별하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">AI는 소셜 미디어 프로필의 저작권 위반으로 인한 법적 분쟁의 위험을 식별하고 완화하기 위해 고안된 종합 감사 서비스를 제공합니다. 이 서비스는 독점적인 AI 소프트웨어를 사용하여 소셜 미디어 계정을 스캔하여 게시물이나 인플루언서 캠페인에서 저작권이 있는 음악의 무단 사용을 강조 표시합니다. 음악 업계에서는 저작물의 무단 사용에 대해 수백만 달러에 달하는 법적 조치를 적극적으로 취하고 있기 때문에 브랜드와 법무팀은 이 도구를 사용하여 비용이 많이 드는 소송을 피할 수 있습니다. 이 서비스는 자세한 보고서, 지속적인 모니터링, 합법적인 음악 사용에 대한 지침을 제공하므로 소셜 미디어 콘텐츠를 보호하고 저작권법을 준수하려는 기업에게 필수적인 자산이 될 것입니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://copyrightcheck.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/6639af4dc27df72f4a24edb7_Brand_Assets%252FgeoSpy_card.jpeg\" alt=\"Thumbnail\" width=\"196\" height=\"103\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;GeoSpy.ai</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">위성 이미지와 공간 데이터를 분석하고 해석하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">GeoSpy.ai는 인공 지능을 활용하여 위성 이미지와 공간 데이터를 분석하고 해석하는 최첨단 지리 공간 인텔리전스 도구입니다. 환경 모니터링, 도시 계획, 농업, 재난 대응, 군사 정찰 등 다양한 분야에 사용할 수 있습니다. 사람들은 토지 이용 패턴에 대한 인사이트를 얻고, 경관의 변화를 감지하고, 농작물의 상태를 모니터링하거나 전략적 계획을 세우기 위해 GeoSpy.ai를 사용할 수 있습니다. 대량의 복잡한 공간 정보를 빠르고 정확하게 처리하고 이해하는 능력은 지리적 맥락을 이해하는 것이 중요한 분야의 의사 결정자와 분석가에게 귀중한 자산이 될 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">베타테스트중</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://geospy.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/661ddcc4b25c42854d0c18df_InstantID.png\" alt=\"Thumbnail\" width=\"197\" height=\"106\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;InstantID</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">즉각적인 신원 확인을 위한 허깅 페이스 스페이스.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">인스턴트엑스는 허깅 페이스 스페이스 플랫폼에서 호스팅되는 디지털 도구로, 신원 확인 또는 인식 목적으로 설계된 것으로 보입니다. 제공된 콘텐츠에 구체적인 기능이 자세히 설명되어 있지는 않지만, 이름에서 알 수 있듯이 인공지능과 머신러닝 알고리즘을 사용하여 즉각적인 신원 확인 서비스를 제공할 수 있는 것으로 보입니다. 사용자 신원 확인을 통한 보안 강화, 로그인 프로세스 간소화, 자격증명 검증 자동화 등 다양한 용도로 인스턴트아이디를 사용할 수 있습니다. 빠르고 정확한 신원 확인을 위한 잠재력은 금융, 의료, 온라인 서비스 등 신원 확인이 중요한 분야에서 특히 유용할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://huggingface.co/spaces/InstantX/InstantID\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/66103966684fee69fcb0c201_thumbnail.png\" alt=\"Thumbnail\" width=\"195\" height=\"110\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Nuanced</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">AI가 생성한 이미지와 콘텐츠를 감지하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">온라인 서비스의 무결성과 신뢰성을 유지하기 위해 AI가 생성한 이미지와 콘텐츠를 탐지하는 최첨단 솔루션을 제공합니다. AI로 생성된 스팸, 어뷰징, 사기, 딥페이크가 증가함에 따라 사용자 생성 콘텐츠에 의존하는 플랫폼은 신뢰와 공신력을 유지하는 데 상당한 어려움을 겪고 있습니다. Nuanced의 알고리즘은 개인 식별 정보(PII)에 의존하지 않는 개인정보 보호 우선 접근 방식을 제공함으로써 AI 콘텐츠 생성의 급속한 발전에 앞서 나가도록 설계되었습니다. Nuanced의 API를 통합함으로써 기업은 사람이 직접 작성한 자료와 합성 창작물을 효율적으로 구분할 수 있으므로 콘텐츠 조정, 사기 탐지 및 콘텐츠의 진위 여부가 중요한 모든 서비스에 필수적인 도구가 될 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.nuanced.dev\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/660ee1254e33ac830b800888_circle-to-search-logo.png\" alt=\"Thumbnail\" width=\"196\" height=\"93\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Circle to Search</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">텍스트 선택을 대화형 검색 대화로 전환하는 Google 크롬 확장 프로그램입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">AI를 통합하여 기존 검색 쿼리를 대화형 대화로 전환함으로써 웹 검색을 개선하는 브라우저 확장 프로그램입니다. 사용자는 텍스트를 드래그하고 선택하기만 하면 보다 정교한 검색 환경을 시작할 수 있어 정확하고 맥락에 맞는 정보를 빠르게 얻을 수 있습니다. 이 도구는 검색 프로세스를 간소화하고 웹에서 정보를 보다 직관적이고 효율적으로 찾을 수 있는 방법을 제공하기 때문에 자주 검색을 하거나 대량의 온라인 데이터를 살펴봐야 하는 개인에게 특히 유용합니다. 시간을 절약하고 검색 결과의 정확도를 높이며 필요에 따라 맞춤화된 검색 환경을 즐길 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.circlesearch.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65f5225310210d3dbd8f5ccf_share.jpeg\" alt=\"Thumbnail\" width=\"199\" height=\"127\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;HealthKey</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">방대한 의료 기록을 간결한 환자 요약으로 종합하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">방대한 의료 기록을 간결한 환자 개요로 요약하여 환자 진료 준비 과정을 간소화하도록 설계된 AI 기반 도구입니다. 이 도구는 의료진에게 이해하기 쉬운 환자 일정과 건강 요약을 제공하며, 매일 아침 이메일로 전송할 수 있습니다. 기존 시스템과 통합할 수 있는 기능을 갖춘 HealthKey는 차트 준비에 소요되는 시간과 노력을 줄여 의료진이 수백 장의 의료 기록 대신 한 페이지 분량의 요약본을 검토할 수 있게 해줍니다. 이를 통해 의료진은 자신감과 효율성을 높여 환자 치료에 더 집중할 수 있습니다. HealthKey는 특히 관리 부담을 최소화하고, 환자 이력을 잘 파악하고, 제공하는 의료 서비스의 질을 개선하고자 하는 의료 서비스 제공자에게 유용합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://gethealthkey.com/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65decd804aa65b51438410f5_alex2.png\" alt=\"Thumbnail\" width=\"200\" height=\"141\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Extracta.ai</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">다양한 비정형 문서에서 정형 데이터를 추출하는 작업을 자동화하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">송장, 이력서, 계약서, 영수증과 같은 비정형 문서에서 정형 데이터를 추출하는 프로세스를 자동화하는 AI 기반 데이터 추출 플랫폼입니다. 사용자는 복잡한 교육 없이도 사용자 지정 추출 템플릿을 정의할 수 있으며, 스캔 이미지와 디지털 파일을 포함한 다양한 문서 유형을 지원합니다. Extracta.ai를 사용하면 데이터 처리를 간소화하고 수동 입력 오류를 줄이며 다양한 시스템과 원활하게 통합할 수 있어 재무 데이터 관리, 채용, 법률 운영, 비용 추적과 관련된 작업에서 시간을 절약하고 효율성을 높일 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://extracta.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65d9154b842bc728187ea384_646cd976e45bf35c29907471_linkedin-blurb.png\" alt=\"Thumbnail\" width=\"196\" height=\"103\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;EyePop.ai</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">이미지 및 동영상 분석을 위한 노코드 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">사용자 친화적인 컴퓨터 비전 플랫폼으로, 사용자가 기술적 전문 지식이 없어도 시각 데이터 분석을 간소화하고 AI 기반 인사이트를 제공할 수 있도록 설계되었습니다. 사용자는 코드가 없거나 적은 도구를 사용하여 이미지, 동영상 또는 실시간 스트림으로 작업할 수 있는 맞춤형 애플리케이션, 즉 '팝'을 손쉽게 구축할 수 있습니다. 프로필 사진 인증, 미디어 참여도 분석, 실시간 동영상 콘텐츠 인사이트와 같은 작업에 사용할 수 있습니다. 사람들은 접근 가능하고 효율적인 AI 기반 분석을 통해 시각적 콘텐츠의 잠재력을 쉽게 실현하고, 사용자 경험을 개선하고, 참여도를 높이고, 데이터 기반 의사 결정을 내릴 수 있도록 EyePop.ai를 사용할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">베타테스트중</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.eyepop.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65b9d3366f73a813d5c5fc8c_opengraph.png\" alt=\"Thumbnail\" width=\"200\" height=\"109\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Content Credentials</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">온라인 콘텐츠를 검증하는 도구로, 출처와 편집 내역을 확인할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">딥페이크, 음성 복제, 합성 미디어로 인한 문제를 해결하기 위해 고안된 기술입니다. 온라인 콘텐츠의 출처, 제작 방법, 편집 이력에 대한 질문에 답하면서 온라인 콘텐츠에 대한 접근 가능하고 정확한 정보를 제공합니다. 사용자는 클릭 한 번으로 중요한 세부 정보를 확인할 수 있어 온라인 콘텐츠에 대한 신뢰를 높일 수 있습니다. 크리에이터는 콘텐츠 자격 증명을 통해 인지도 향상, 마케팅 및 잠재고객 확보가 가능하므로 적절한 크레딧을 받을 수 있습니다. 콘텐츠 크리덴셜 핀은 사용자가 콘텐츠에 대한 추가 정보를 탐색할 수 있도록 하는 지표 역할을 합니다. 공개 표준, 변조 탐지, 책임 소재를 기반으로 하는 콘텐츠 크리덴셜은 보다 투명한 인터넷을 위해 전 세계적으로 시행되고 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://contentcredentials.org/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65b2c64bd54b402a45065554_opengraph-image.png\" alt=\"Thumbnail\" width=\"200\" height=\"200\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;X-ray Interpreter</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">엑스레이 이미지의 예비 해석을 위한 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">흉부, 치과, 복부, 골격 구조 등 다양한 유형의 엑스레이 이미지에 대한 예비 판독을 제공하도록 설계된 AI 기반 도구입니다. 사용자는 적은 비용으로 AI가 생성한 보고서를 빠르게 받아볼 수 있으며, 별도의 구독 요건이 없어 편리합니다. 의료 전문가와 상담하기 전에 엑스레이 이미지를 빠르게 초기 평가하여 인사이트를 얻거나 엑스레이에 나타난 세부 사항을 더 잘 이해하고자 하는 사람들이 사용할 수 있습니다. 이 도구는 사용 편의성과 개인정보 보호를 강조하지만, 전문적인 의학적 조언을 대체하기 위한 도구는 아닙니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://xrayinterpreter.com/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65ad64601f80bf47a057cd6d_verisoul-ai-logo.png\" alt=\"Thumbnail\" width=\"198\" height=\"65\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Verisoul</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">웹사이트와 모바일 플랫폼에서 가짜 사용자, 봇, 사기 행위를 탐지하고 방지하는 디지털 보안 솔루션입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">기업에 가짜 사용자, 봇, 사기 행위를 방지할 수 있는 도구를 제공하는 디지털 보안 플랫폼입니다. 단일 SDK 및 API를 통해 웹 및 모바일 애플리케이션과 통합되어 기업이 사용자 데이터를 쉽게 수집할 수 있습니다. 이 플랫폼은 AI 기반 인텔리전스를 사용하여 사용자가 진짜인지, 고유한지, 신뢰할 수 있는지 실시간으로 판단하고 사용자 상호 작용을 관리하기 위한 사용자 지정 가능한 노코드 워크플로우를 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.verisoul.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/6595bd7951c5cd7719a49c9b_og-image.jpeg\" alt=\"Thumbnail\" width=\"199\" height=\"130\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;ShotSolve</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">GPT-4 Vision을 사용하여 macOS의 스크린샷에서 질문을 해결하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">사용자가 촬영한 스크린샷을 기반으로 문제를 해결하는 무료 macOS 메뉴바 앱으로, GPT-4 Vision을 사용합니다. 이 앱은 OpenAI와 통합되며 사용자 지정 API 호스트, 컨텍스트 제한, 시스템 명령 및 사용자 지정 GPT 매개변수와 같은 고급 구성 옵션을 제공합니다. 또한 친숙한 UI, 범용 단축키, 빠른 성능의 Apple M1/M2용 기본 앱을 제공합니다. 무료로 사용할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://shotsolve.com/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/6593916d7c0c8d35467b2e47_5faca2dd77160e4a886bf0c932c3c46e.webp\" alt=\"Thumbnail\" width=\"200\" height=\"179\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Luxand.Cloud</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">얼굴 인식 및 검색을 애플리케이션에 통합하는 API입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">Luxand.cloud는 AI 기반 얼굴 검색 및 인식 API로, 사용자가 클라우드 API를 사용하여 웹사이트, 앱 또는 소프트웨어에 얼굴 인식을 통합할 수 있습니다. 사람의 얼굴을 정확하게 인식 및 비교하고, 이전에 이미지에 태그된 사람을 식별하고, 사진에서 나이, 성별, 감정을 감지할 수 있으며, 안전한 클라우드 스토리지를 제공합니다. 여러 프로그래밍 언어를 지원하며 비용 효율성과 확장성이 뛰어납니다. 또한 금융, 마케팅, 교육, 교통, 호텔, 소매업 등 다양한 산업에서 사용되고 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://luxand.cloud/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65959270f9a9e736e353170d_labelgpt-logo.png\" alt=\"Thumbnail\" width=\"199\" height=\"42\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;LabelGPT</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">레이블이 지정된 데이터를 생성하는 자동화된 데이터 주석 플랫폼입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">머신러닝 팀이 라벨이 지정된 대량의 데이터를 빠르게 생성할 수 있도록 지원하는 자동화된 데이터 주석 플랫폼입니다. 여러 기초 모델의 조합을 사용해 제로 샷 라벨링을 달성하므로 사용자는 데이터를 가져오고, 프롬프트로 클래스 이름을 지정하고, 높은 신뢰도 점수로 단 몇 분 만에 라벨을 생성할 수 있습니다. 또한 LabelGPT는 개방형 데이터 세트, 스마트 피드백 루프, 사전 라벨링 솔루션을 제공하여 프로세스 속도를 높입니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.labellerr.com/labelgpt\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65259ef142f4b52a810f4b46_llava-hliu-cc-logo.png\" alt=\"Thumbnail\" width=\"199\" height=\"120\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;LLaVa</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">고급 언어 및 시각 이해를 위한 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">범용 시각 및 언어 이해를 위해 설계된 혁신적인 대규모 멀티모달 모델입니다. 비전 인코더와 대규모 언어 모델(LLM)인 Vicuna를 결합하여 엔드 투 엔드 학습이 이루어집니다. LLaVA는 멀티모달 GPT-4의 성능을 모방한 인상적인 채팅 기능을 보여주며 과학 QA 작업에서 새로운 최첨단 정확도를 설정합니다. 이 도구의 핵심 기능은 언어 전용 GPT-4를 사용하여 멀티모달 언어-이미지 명령어 팔로잉 데이터를 생성하는 기능입니다. LLaVA는 공개적으로 사용 가능한 데이터, 모델 및 코드가 포함된 오픈 소스입니다. 시각적 채팅 애플리케이션 및 과학 분야 추론과 같은 작업에 맞게 미세 조정되어 두 영역 모두에서 높은 성능을 달성합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://llava.hliu.cc/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/651c4e008df211820a46da25_astica-logo.png\" alt=\"Thumbnail\" width=\"200\" height=\"99\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;astica</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">이미지와 문서의 비전 및 음성 인식, 전사, 검토를 위한 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">음성 및 시각 AI 기능을 제공하는 astica.ai의 코그너티브 API 데모입니다. 이미지와 문서를 읽고, 설명하고, 분류하고, 조정하고, 어시스턴트를 생성하고, 오디오 파일을 전사하고, 설명 오디오를 실시간으로 생성하는 데 도움을 줄 수 있습니다. 또한 이미지에 대한 정확하고 상세한 설명을 생성하고, 얼굴과 물체를 감지하고, 업로드된 이미지를 조정할 수 있습니다. 강력한 컴퓨터 비전과 한 줄로 통합되어 이미지를 설명하고, 얼굴과 물체를 감지하고, 업로드된 이미지를 조정할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.astica.org/vision/describe\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/65166a72e414ce0e5dd52e97_wasitai-og-fb-share-image-v1.png\" alt=\"Thumbnail\" width=\"200\" height=\"105\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;wasitai</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">AI가 생성한 이미지를 감지하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">와시타이 도구를 사용하면 이미지가 기계에 의해 생성되었는지 확인할 수 있습니다. 사용자는 이미지를 드래그 앤 드롭하거나 디바이스에서 이미지를 선택하면 도구가 이미지를 처리하여 사람이 생성한 것인지 기계가 생성한 것인지 확인합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://wasitai.com/api\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/651513285b6ca98c170f94ca_sticker-logo-small.png\" alt=\"Thumbnail\" width=\"199\" height=\"199\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;LookRight</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">시각적 인사이트를 얻을 수 있는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">컴퓨터 비전과 GPT 기술을 활용하여 다양한 상황에서 귀중한 인사이트와 피드백을 제공하는 혁신적인 도구입니다. 패션 선택에 대한 두 번째 의견이 필요하거나, 이미지 캡션에 대한 영감을 구하거나, 요리 창작물에 대한 피드백이 필요할 때 LookRight가 도움을 드릴 수 있습니다. 사용자 친화적인 인터페이스를 통해 쉽게 사용할 수 있으며, 지침이 필요할 때마다 신뢰할 수 있는 편견 없는 눈 역할을 해줍니다. LookRight는 최첨단 기술과 다양한 시각 관련 질문에 대한 실용적인 지원을 결합합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://lookright.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64f8b9475578d40953b69358_carbon-ai-logo.png\" alt=\"Thumbnail\" width=\"197\" height=\"115\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Carbon</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">llms 및 AI 개발을 위한 데이터 소스를 연결하고 관리하기 위한 통합 API입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">개발자가 모든 데이터 소스에 액세스하고 연결할 수 있는 통합된 LLM용 API입니다. 개발자가 일반 텍스트 검색, 청크 및 임베딩 생성, 데이터 소스 관리 등을 수행할 수 있는 AI 중심의 데이터 가져오기를 위한 풍부한 API 라이브러리를 제공합니다. 또한 Carbon에는 문서 관리, 임베딩 생성, 시맨틱 검색, SOC 2 규정 준수, 화이트 라벨, 자동 확장, 관리형 OAuth, 사용량 보고, 사용자 정의 빌드와 같은 기능도 포함되어 있습니다. 기업들은 수십 가지 파일 형식과 타사 서비스를 지원하여 비정형 데이터를 대규모로 활용할 수 있습니다. Carbon을 사용하면 10분 이내에 계정을 설정하고 한 달 동안 무제한으로 액세스할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://carbon.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64f8b19566cdaa77f4391570_automorphic-ai-logo.png\" alt=\"Thumbnail\" width=\"198\" height=\"70\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Automorphic</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">언어 모델, 빠른 로딩/적재 및 이지스 방화벽을 위한 솔루션 제품군입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">Automorphic은 단 10개의 샘플만으로 언어 모델에 지식을 주입하는 Infuse, 자체 개선 모델, 미세 조정된 어댑터의 빠른 로딩/적재, OpenAI API 호환, 공개적으로 공유되는 모델을 위한 Automorphic Hub 등 언어 모델을 위한 솔루션 제품군을 제공합니다. 또한 프롬프트 주입, 프롬프트 및 PII 유출, 유해한 언어 등을 감지할 수 있는 모델용 방화벽인 Aegis를 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://automorphic.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"4545.jpeg\" data-origin-width=\"3360\" data-origin-height=\"2100\"><span data-url=\"https://blog.kakaocdn.net/dn/dAufO5/btsIe0DT1OP/hBwT2fqTuBBFpfds9xS3iK/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/dAufO5/btsIe0DT1OP/hBwT2fqTuBBFpfds9xS3iK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdAufO5%2FbtsIe0DT1OP%2FhBwT2fqTuBBFpfds9xS3iK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"199\" height=\"124\" data-filename=\"4545.jpeg\" data-origin-width=\"3360\" data-origin-height=\"2100\"/></span></figure>\n</td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Undetectable AI</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">AI 방지 콘텐츠를 작성하고 AI 탐지를 제거할 수 있는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">콘텐츠 제작자가 AI 탐지기를 우회하는 사람처럼 키워드가 풍부한 콘텐츠를 작성할 수 있도록 도와주는 AI 탐지 제거 도구입니다. 이 도구는 검색 엔진에 최적화되어 탐지를 피할 수 있는 고유한 자료를 제공하며 작가, 블로거, 연구원, 마케터 등에게 이상적입니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://undetectable.ai/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px; height: 114px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/6496384f4f3d1c67b63d3e5d_64504635c77e117db44fef6b_holly%2520banner.png\" alt=\"Thumbnail\" width=\"196\" height=\"103\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Holly</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">채용 프로세스를 자동화하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">기업이 채용 프로세스를 자동화할 수 있도록 지원하는 인공지능 기반의 가상 채용 도구입니다. 엄선된 후보자 목록을 제공하고, 사용자를 대신하여 후보자와 소통하며, 피드백을 통해 학습하여 최상의 매칭을 제공합니다. 여러 플랫폼과 통합되어 있으며 사람 채용 담당자처럼 생각하고 행동하도록 설계되었습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.hollyhires.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64efc0addfc5e6f9797b3aad_cover.png\" alt=\"Thumbnail\" width=\"200\" height=\"105\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Airparser</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">이메일, PDF, 문서, 이미지 등에서 데이터 추출을 자동화하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">이메일, PDF, 문서, 이미지 등에서 데이터 추출을 자동화하는 도구입니다. GPT 기반 파서와 OCR 엔진을 사용해 구조화된 데이터를 실시간으로 추출하고, 6000개 이상의 앱으로 데이터를 내보낼 수 있습니다. 또한 웹후크, API, Excel로 다운로드와 같은 기능도 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://airparser.com/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64e6a31d3a32dbd75a200a38_64ae7fb1a42fb7f226d01507_Preview.png\" alt=\"Thumbnail\" width=\"196\" height=\"103\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Rainbow.ai</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">일기 예보 및 알림을 제공하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">사용자에게 정확하고 신뢰할 수 있는 날씨 정보를 제공하는 AI 기반 일기 예보 도구로, 사용자가 정보를 얻고 안전하게 지낼 수 있도록 도와줍니다. 정확한 위치의 날씨 변화에 대한 적시 알림을 제공하며, 사용자는 앱을 다운로드하여 날씨를 미리 파악할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.rainbow.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64dfb1b973cbf48a6da078e9_aijudge-pro-logo.png\" alt=\"Thumbnail\" width=\"198\" height=\"61\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;AI Judge</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">경합하는 두 당사자의 주장을 바탕으로 공정한 평결을 생성하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">인공지능 기술을 활용하여 분쟁 당사자 두 사람이 제시한 주장을 바탕으로 공정한 판결을 내리는 혁신적인 플랫폼입니다. 사용자가 분쟁에 대한 자신의 주장을 제출하면 AI 시스템이 각 당사자가 제시한 사실, 증거, 법적 원칙을 면밀히 분석하여 공정하고 공평한 판결을 내립니다. AI 알고리즘은 주장의 일관성, 증거의 강도, 법적 추론의 일관성 등 다양한 요소를 고려합니다. 또한, 사용자는 자격을 갖춘 법률 전문가에게 AI가 생성한 판결을 검토하도록 요청하여 추가적인 검토를 받을 수 있습니다. AI 판사는 제공된 정보를 바탕으로 객관적인 관점을 제시하여 분쟁 해결 프로세스를 용이하게 하도록 설계되었습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">무료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://aijudge.pro/\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64db111eb39c00515e4478a1_open-graph.png\" alt=\"Thumbnail\" width=\"198\" height=\"92\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Cerebrium</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">머신러닝 모델의 훈련, 배포 및 모니터링을 위한 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">단 몇 줄의 코드만으로 머신 러닝 모델을 쉽게 훈련, 배포, 모니터링할 수 있는 머신 러닝 프레임워크입니다. 사용자는 서버리스 GPU 모델을 배포하고, 모든 주요 프레임워크를 지원하고, LLM과 사용자 정의 모델을 연결하여 고유한 기능을 생성하고, 모델 전후에 로직을 추가하고, 모델을 자동으로 버전업하고, 1초 미만의 콜드 스타트를 할 수 있습니다. 또한 손쉬운 미세 조정, 최고의 ML 통합 가시성 플랫폼과의 통합, 기능 및 예측 드리프트 모니터링 기능도 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.cerebrium.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64d91e72a7edce3ad6c5fa31_pi-exchange-logo.png\" alt=\"Thumbnail\" width=\"200\" height=\"145\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;PI.EXCHANGE</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">코딩 없이 원시 데이터를 예측으로 변환하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">엔드투엔드 머신러닝 도구로, 사용자가 코딩 없이도 몇 분 만에 원시 데이터에서 예측으로 빠르게 전환할 수 있도록 지원합니다. 데이터 준비, 모델 개발, 데이터 보안 및 개인정보 보호, 통합 등의 기능을 제공합니다. 마케팅 팀, 데이터 과학자, 소프트웨어 엔지니어, 데이터 분석가, 기업가 등 다양한 업계에서 사용할 수 있습니다. 지식 허브, API 및 SDK 문서, 블로그 등의 리소스를 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.pi.exchange\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64d565c65cfb939c228aafb2_64b06c535a3bd010af0444cd_Screenshot%25202023-07-13%2520132007.png\" alt=\"Thumbnail\" width=\"200\" height=\"104\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Neum AI</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">AI 애플리케이션을 정확하고 최신 상태로 유지할 수 있는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">기업이 AI 애플리케이션을 최신의 정확한 상태로 유지할 수 있도록 도와주는 도구입니다. 이를 통해 사용자는 데이터 저장소를 연결하고, 벡터를 동기화하며, 데이터를 변환 및 임베드할 수 있습니다. 또한 역할 기반 액세스 제어 및 확장성과 같은 기능도 제공합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">부분 유료화</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.neum.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64c4876bf17b5825fc73d01f_64c1009cff11582af44bb5f0_website-preview.png\" alt=\"Thumbnail\" width=\"199\" height=\"132\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;LiarLiar.AI</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">실시간 동영상 피드에서 거짓말과 심박수 변동을 감지하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">AI의 힘을 활용하여 거짓말과 심박수 변동을 감지하는 혁신적인 거짓말 탐지 도구입니다. 사용자 친화적인 인터페이스로 설계되었으며 Zoom, Google Meet, Skype 등과 같은 인기 있는 화상 통화 소프트웨어와 호환됩니다. 한정된 기간 동안, LiarLiar는 단 29.99달러에 베타 버전을 평생 이용할 수 있는 혜택을 제공합니다. LiarLiar AI 도구는 고급 AI 알고리즘을 사용하여 실시간 비디오 피드를 분석하고 미세한 표정, 심박수 변동, 미묘한 신체 언어의 변화를 감지하여 진실성을 평가합니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://liarliar.ai\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<table style=\"border-collapse: collapse; width: 770px; border: 2px solid #000000; margin-bottom: 18px;\" border=\"1\" width=\"770px\" cellspacing=\"0\" cellpadding=\"0\" data-ke-align=\"alignLeft\"><colgroup><col style=\"mso-width-source: userset; mso-width-alt: 6368; width: 197.328px;\" width=\"197.328\" /><col style=\"width: 54pt;\" span=\"7\" width=\"72\" /></colgroup>\n<tbody>\n<tr style=\"height: 21px;\">\n<td class=\"xl63\" style=\"height: 114px; width: 197.328px; padding: 0; vertical-align: middle; text-align: center;\" rowspan=\"3\" height=\"147\"><img src=\"https://cdn.prod.website-files.com/63994dae1033718bee6949ce/64b7d752d2710c3c2ab6772b_agent-so-logo.png\" alt=\"Thumbnail\" width=\"199\" height=\"81\" /></td>\n<td class=\"xl64\" style=\"border-left: none; width: 214.625px; height: 21px; background-color: #ececec; font-weight: bold; font-size: 18px; padding-left: 5px;\" colspan=\"3\">&nbsp;Agent.so</td>\n<td class=\"xl65\" style=\"border-left: none; width: 286.703px; height: 21px; padding-left: 5px;\" colspan=\"4\">머신러닝 모델의 정확도와 성능을 평가하는 도구입니다.</td>\n</tr>\n<tr style=\"height: 77px;\">\n<td class=\"xl68\" style=\"height: 77px; border-left: none; width: 502.328px; padding-left: 5px;\" colspan=\"7\">머신러닝 모델의 성능을 평가하기 위한 도구입니다. 모델의 정확도는 물론 정확도, 리콜, F1 점수와 같은 기타 메트릭을 측정할 수 있습니다. 또한 기능 중요도 및 혼동 행렬과 같은 모델의 동작 및 특성에 대한 인사이트를 제공할 수 있습니다.</td>\n</tr>\n<tr style=\"height: 16px;\">\n<td class=\"xl67\" style=\"height: 16px; border-left: none; width: 214.625px; padding-left: 5px;\" colspan=\"3\">유료 (무료 체험판)</td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.75px; height: 16px; padding-left: 5px;\" colspan=\"2\"><a href=\"https://www.agent.so\" target=\"_blank\" rel=\"noopener\">바로가기</a></td>\n<td class=\"xl66\" style=\"border-left: none; width: 142.953px; height: 16px; padding-left: 5px;\" colspan=\"2\">&nbsp;</td>\n</tr>\n</tbody>\n</table>",
        "contentSnippet": "AI 감지(AI Detection)는 데이터에서 객체, 패턴 또는 이상 징후를 식별하고 탐지하기 위해 인공지능 기술을 적용하는 것입니다. 여기에는 이미지, 오디오, 비디오, 텍스트 감지가 포함됩니다. \n \nAI 모델은 이미지에서 객체를 인식 및 분류하고, 오디오 신호를 분석하고, 비디오 콘텐츠를 처리하고, 텍스트에서 정보를 추출하도록 학습됩니다. AI 탐지는 보안, 의료, 고객 서비스 및 기타 산업 분야에서 다양하게 적용되어 더 나은 의사 결정을 위한 자동화되고 정확한 데이터 분석을 가능하게 합니다.\n 24년 6월 28일 기준 업데이트한 AI기술을 활용한 AI Detection 부문의 유용한 서비스를 소개합니다.\n\n\n\n\n Copyright Check AI\n소셜 미디어 프로필에서 저작권 위반을 식별하는 도구입니다.\n\n\nAI는 소셜 미디어 프로필의 저작권 위반으로 인한 법적 분쟁의 위험을 식별하고 완화하기 위해 고안된 종합 감사 서비스를 제공합니다. 이 서비스는 독점적인 AI 소프트웨어를 사용하여 소셜 미디어 계정을 스캔하여 게시물이나 인플루언서 캠페인에서 저작권이 있는 음악의 무단 사용을 강조 표시합니다. 음악 업계에서는 저작물의 무단 사용에 대해 수백만 달러에 달하는 법적 조치를 적극적으로 취하고 있기 때문에 브랜드와 법무팀은 이 도구를 사용하여 비용이 많이 드는 소송을 피할 수 있습니다. 이 서비스는 자세한 보고서, 지속적인 모니터링, 합법적인 음악 사용에 대한 지침을 제공하므로 소셜 미디어 콘텐츠를 보호하고 저작권법을 준수하려는 기업에게 필수적인 자산이 될 것입니다.\n\n\n유료\n바로가기\n \n\n\n\n\n\n\n\n GeoSpy.ai\n위성 이미지와 공간 데이터를 분석하고 해석하는 도구입니다.\n\n\nGeoSpy.ai는 인공 지능을 활용하여 위성 이미지와 공간 데이터를 분석하고 해석하는 최첨단 지리 공간 인텔리전스 도구입니다. 환경 모니터링, 도시 계획, 농업, 재난 대응, 군사 정찰 등 다양한 분야에 사용할 수 있습니다. 사람들은 토지 이용 패턴에 대한 인사이트를 얻고, 경관의 변화를 감지하고, 농작물의 상태를 모니터링하거나 전략적 계획을 세우기 위해 GeoSpy.ai를 사용할 수 있습니다. 대량의 복잡한 공간 정보를 빠르고 정확하게 처리하고 이해하는 능력은 지리적 맥락을 이해하는 것이 중요한 분야의 의사 결정자와 분석가에게 귀중한 자산이 될 수 있습니다.\n\n\n베타테스트중\n바로가기\n \n\n\n\n\n\n\n\n InstantID\n즉각적인 신원 확인을 위한 허깅 페이스 스페이스.\n\n\n인스턴트엑스는 허깅 페이스 스페이스 플랫폼에서 호스팅되는 디지털 도구로, 신원 확인 또는 인식 목적으로 설계된 것으로 보입니다. 제공된 콘텐츠에 구체적인 기능이 자세히 설명되어 있지는 않지만, 이름에서 알 수 있듯이 인공지능과 머신러닝 알고리즘을 사용하여 즉각적인 신원 확인 서비스를 제공할 수 있는 것으로 보입니다. 사용자 신원 확인을 통한 보안 강화, 로그인 프로세스 간소화, 자격증명 검증 자동화 등 다양한 용도로 인스턴트아이디를 사용할 수 있습니다. 빠르고 정확한 신원 확인을 위한 잠재력은 금융, 의료, 온라인 서비스 등 신원 확인이 중요한 분야에서 특히 유용할 수 있습니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n Nuanced\nAI가 생성한 이미지와 콘텐츠를 감지하는 도구입니다.\n\n\n온라인 서비스의 무결성과 신뢰성을 유지하기 위해 AI가 생성한 이미지와 콘텐츠를 탐지하는 최첨단 솔루션을 제공합니다. AI로 생성된 스팸, 어뷰징, 사기, 딥페이크가 증가함에 따라 사용자 생성 콘텐츠에 의존하는 플랫폼은 신뢰와 공신력을 유지하는 데 상당한 어려움을 겪고 있습니다. Nuanced의 알고리즘은 개인 식별 정보(PII)에 의존하지 않는 개인정보 보호 우선 접근 방식을 제공함으로써 AI 콘텐츠 생성의 급속한 발전에 앞서 나가도록 설계되었습니다. Nuanced의 API를 통합함으로써 기업은 사람이 직접 작성한 자료와 합성 창작물을 효율적으로 구분할 수 있으므로 콘텐츠 조정, 사기 탐지 및 콘텐츠의 진위 여부가 중요한 모든 서비스에 필수적인 도구가 될 수 있습니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n Circle to Search\n텍스트 선택을 대화형 검색 대화로 전환하는 Google 크롬 확장 프로그램입니다.\n\n\nAI를 통합하여 기존 검색 쿼리를 대화형 대화로 전환함으로써 웹 검색을 개선하는 브라우저 확장 프로그램입니다. 사용자는 텍스트를 드래그하고 선택하기만 하면 보다 정교한 검색 환경을 시작할 수 있어 정확하고 맥락에 맞는 정보를 빠르게 얻을 수 있습니다. 이 도구는 검색 프로세스를 간소화하고 웹에서 정보를 보다 직관적이고 효율적으로 찾을 수 있는 방법을 제공하기 때문에 자주 검색을 하거나 대량의 온라인 데이터를 살펴봐야 하는 개인에게 특히 유용합니다. 시간을 절약하고 검색 결과의 정확도를 높이며 필요에 따라 맞춤화된 검색 환경을 즐길 수 있습니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n HealthKey\n방대한 의료 기록을 간결한 환자 요약으로 종합하는 도구입니다.\n\n\n방대한 의료 기록을 간결한 환자 개요로 요약하여 환자 진료 준비 과정을 간소화하도록 설계된 AI 기반 도구입니다. 이 도구는 의료진에게 이해하기 쉬운 환자 일정과 건강 요약을 제공하며, 매일 아침 이메일로 전송할 수 있습니다. 기존 시스템과 통합할 수 있는 기능을 갖춘 HealthKey는 차트 준비에 소요되는 시간과 노력을 줄여 의료진이 수백 장의 의료 기록 대신 한 페이지 분량의 요약본을 검토할 수 있게 해줍니다. 이를 통해 의료진은 자신감과 효율성을 높여 환자 치료에 더 집중할 수 있습니다. HealthKey는 특히 관리 부담을 최소화하고, 환자 이력을 잘 파악하고, 제공하는 의료 서비스의 질을 개선하고자 하는 의료 서비스 제공자에게 유용합니다.\n\n\n유료\n바로가기\n \n\n\n\n\n\n\n\n Extracta.ai\n다양한 비정형 문서에서 정형 데이터를 추출하는 작업을 자동화하는 도구입니다.\n\n\n송장, 이력서, 계약서, 영수증과 같은 비정형 문서에서 정형 데이터를 추출하는 프로세스를 자동화하는 AI 기반 데이터 추출 플랫폼입니다. 사용자는 복잡한 교육 없이도 사용자 지정 추출 템플릿을 정의할 수 있으며, 스캔 이미지와 디지털 파일을 포함한 다양한 문서 유형을 지원합니다. Extracta.ai를 사용하면 데이터 처리를 간소화하고 수동 입력 오류를 줄이며 다양한 시스템과 원활하게 통합할 수 있어 재무 데이터 관리, 채용, 법률 운영, 비용 추적과 관련된 작업에서 시간을 절약하고 효율성을 높일 수 있습니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n EyePop.ai\n이미지 및 동영상 분석을 위한 노코드 도구입니다.\n\n\n사용자 친화적인 컴퓨터 비전 플랫폼으로, 사용자가 기술적 전문 지식이 없어도 시각 데이터 분석을 간소화하고 AI 기반 인사이트를 제공할 수 있도록 설계되었습니다. 사용자는 코드가 없거나 적은 도구를 사용하여 이미지, 동영상 또는 실시간 스트림으로 작업할 수 있는 맞춤형 애플리케이션, 즉 '팝'을 손쉽게 구축할 수 있습니다. 프로필 사진 인증, 미디어 참여도 분석, 실시간 동영상 콘텐츠 인사이트와 같은 작업에 사용할 수 있습니다. 사람들은 접근 가능하고 효율적인 AI 기반 분석을 통해 시각적 콘텐츠의 잠재력을 쉽게 실현하고, 사용자 경험을 개선하고, 참여도를 높이고, 데이터 기반 의사 결정을 내릴 수 있도록 EyePop.ai를 사용할 수 있습니다.\n\n\n베타테스트중\n바로가기\n \n\n\n\n\n\n\n\n Content Credentials\n온라인 콘텐츠를 검증하는 도구로, 출처와 편집 내역을 확인할 수 있습니다.\n\n\n딥페이크, 음성 복제, 합성 미디어로 인한 문제를 해결하기 위해 고안된 기술입니다. 온라인 콘텐츠의 출처, 제작 방법, 편집 이력에 대한 질문에 답하면서 온라인 콘텐츠에 대한 접근 가능하고 정확한 정보를 제공합니다. 사용자는 클릭 한 번으로 중요한 세부 정보를 확인할 수 있어 온라인 콘텐츠에 대한 신뢰를 높일 수 있습니다. 크리에이터는 콘텐츠 자격 증명을 통해 인지도 향상, 마케팅 및 잠재고객 확보가 가능하므로 적절한 크레딧을 받을 수 있습니다. 콘텐츠 크리덴셜 핀은 사용자가 콘텐츠에 대한 추가 정보를 탐색할 수 있도록 하는 지표 역할을 합니다. 공개 표준, 변조 탐지, 책임 소재를 기반으로 하는 콘텐츠 크리덴셜은 보다 투명한 인터넷을 위해 전 세계적으로 시행되고 있습니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n X-ray Interpreter\n엑스레이 이미지의 예비 해석을 위한 도구입니다.\n\n\n흉부, 치과, 복부, 골격 구조 등 다양한 유형의 엑스레이 이미지에 대한 예비 판독을 제공하도록 설계된 AI 기반 도구입니다. 사용자는 적은 비용으로 AI가 생성한 보고서를 빠르게 받아볼 수 있으며, 별도의 구독 요건이 없어 편리합니다. 의료 전문가와 상담하기 전에 엑스레이 이미지를 빠르게 초기 평가하여 인사이트를 얻거나 엑스레이에 나타난 세부 사항을 더 잘 이해하고자 하는 사람들이 사용할 수 있습니다. 이 도구는 사용 편의성과 개인정보 보호를 강조하지만, 전문적인 의학적 조언을 대체하기 위한 도구는 아닙니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n Verisoul\n웹사이트와 모바일 플랫폼에서 가짜 사용자, 봇, 사기 행위를 탐지하고 방지하는 디지털 보안 솔루션입니다.\n\n\n기업에 가짜 사용자, 봇, 사기 행위를 방지할 수 있는 도구를 제공하는 디지털 보안 플랫폼입니다. 단일 SDK 및 API를 통해 웹 및 모바일 애플리케이션과 통합되어 기업이 사용자 데이터를 쉽게 수집할 수 있습니다. 이 플랫폼은 AI 기반 인텔리전스를 사용하여 사용자가 진짜인지, 고유한지, 신뢰할 수 있는지 실시간으로 판단하고 사용자 상호 작용을 관리하기 위한 사용자 지정 가능한 노코드 워크플로우를 제공합니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n ShotSolve\nGPT-4 Vision을 사용하여 macOS의 스크린샷에서 질문을 해결하는 도구입니다.\n\n\n사용자가 촬영한 스크린샷을 기반으로 문제를 해결하는 무료 macOS 메뉴바 앱으로, GPT-4 Vision을 사용합니다. 이 앱은 OpenAI와 통합되며 사용자 지정 API 호스트, 컨텍스트 제한, 시스템 명령 및 사용자 지정 GPT 매개변수와 같은 고급 구성 옵션을 제공합니다. 또한 친숙한 UI, 범용 단축키, 빠른 성능의 Apple M1/M2용 기본 앱을 제공합니다. 무료로 사용할 수 있습니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n Luxand.Cloud\n얼굴 인식 및 검색을 애플리케이션에 통합하는 API입니다.\n\n\nLuxand.cloud는 AI 기반 얼굴 검색 및 인식 API로, 사용자가 클라우드 API를 사용하여 웹사이트, 앱 또는 소프트웨어에 얼굴 인식을 통합할 수 있습니다. 사람의 얼굴을 정확하게 인식 및 비교하고, 이전에 이미지에 태그된 사람을 식별하고, 사진에서 나이, 성별, 감정을 감지할 수 있으며, 안전한 클라우드 스토리지를 제공합니다. 여러 프로그래밍 언어를 지원하며 비용 효율성과 확장성이 뛰어납니다. 또한 금융, 마케팅, 교육, 교통, 호텔, 소매업 등 다양한 산업에서 사용되고 있습니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n LabelGPT\n레이블이 지정된 데이터를 생성하는 자동화된 데이터 주석 플랫폼입니다.\n\n\n머신러닝 팀이 라벨이 지정된 대량의 데이터를 빠르게 생성할 수 있도록 지원하는 자동화된 데이터 주석 플랫폼입니다. 여러 기초 모델의 조합을 사용해 제로 샷 라벨링을 달성하므로 사용자는 데이터를 가져오고, 프롬프트로 클래스 이름을 지정하고, 높은 신뢰도 점수로 단 몇 분 만에 라벨을 생성할 수 있습니다. 또한 LabelGPT는 개방형 데이터 세트, 스마트 피드백 루프, 사전 라벨링 솔루션을 제공하여 프로세스 속도를 높입니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n LLaVa\n고급 언어 및 시각 이해를 위한 도구입니다.\n\n\n범용 시각 및 언어 이해를 위해 설계된 혁신적인 대규모 멀티모달 모델입니다. 비전 인코더와 대규모 언어 모델(LLM)인 Vicuna를 결합하여 엔드 투 엔드 학습이 이루어집니다. LLaVA는 멀티모달 GPT-4의 성능을 모방한 인상적인 채팅 기능을 보여주며 과학 QA 작업에서 새로운 최첨단 정확도를 설정합니다. 이 도구의 핵심 기능은 언어 전용 GPT-4를 사용하여 멀티모달 언어-이미지 명령어 팔로잉 데이터를 생성하는 기능입니다. LLaVA는 공개적으로 사용 가능한 데이터, 모델 및 코드가 포함된 오픈 소스입니다. 시각적 채팅 애플리케이션 및 과학 분야 추론과 같은 작업에 맞게 미세 조정되어 두 영역 모두에서 높은 성능을 달성합니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n astica\n이미지와 문서의 비전 및 음성 인식, 전사, 검토를 위한 도구입니다.\n\n\n음성 및 시각 AI 기능을 제공하는 astica.ai의 코그너티브 API 데모입니다. 이미지와 문서를 읽고, 설명하고, 분류하고, 조정하고, 어시스턴트를 생성하고, 오디오 파일을 전사하고, 설명 오디오를 실시간으로 생성하는 데 도움을 줄 수 있습니다. 또한 이미지에 대한 정확하고 상세한 설명을 생성하고, 얼굴과 물체를 감지하고, 업로드된 이미지를 조정할 수 있습니다. 강력한 컴퓨터 비전과 한 줄로 통합되어 이미지를 설명하고, 얼굴과 물체를 감지하고, 업로드된 이미지를 조정할 수 있습니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n wasitai\nAI가 생성한 이미지를 감지하는 도구입니다.\n\n\n와시타이 도구를 사용하면 이미지가 기계에 의해 생성되었는지 확인할 수 있습니다. 사용자는 이미지를 드래그 앤 드롭하거나 디바이스에서 이미지를 선택하면 도구가 이미지를 처리하여 사람이 생성한 것인지 기계가 생성한 것인지 확인합니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n LookRight\n시각적 인사이트를 얻을 수 있는 도구입니다.\n\n\n컴퓨터 비전과 GPT 기술을 활용하여 다양한 상황에서 귀중한 인사이트와 피드백을 제공하는 혁신적인 도구입니다. 패션 선택에 대한 두 번째 의견이 필요하거나, 이미지 캡션에 대한 영감을 구하거나, 요리 창작물에 대한 피드백이 필요할 때 LookRight가 도움을 드릴 수 있습니다. 사용자 친화적인 인터페이스를 통해 쉽게 사용할 수 있으며, 지침이 필요할 때마다 신뢰할 수 있는 편견 없는 눈 역할을 해줍니다. LookRight는 최첨단 기술과 다양한 시각 관련 질문에 대한 실용적인 지원을 결합합니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n Carbon\nllms 및 AI 개발을 위한 데이터 소스를 연결하고 관리하기 위한 통합 API입니다.\n\n\n개발자가 모든 데이터 소스에 액세스하고 연결할 수 있는 통합된 LLM용 API입니다. 개발자가 일반 텍스트 검색, 청크 및 임베딩 생성, 데이터 소스 관리 등을 수행할 수 있는 AI 중심의 데이터 가져오기를 위한 풍부한 API 라이브러리를 제공합니다. 또한 Carbon에는 문서 관리, 임베딩 생성, 시맨틱 검색, SOC 2 규정 준수, 화이트 라벨, 자동 확장, 관리형 OAuth, 사용량 보고, 사용자 정의 빌드와 같은 기능도 포함되어 있습니다. 기업들은 수십 가지 파일 형식과 타사 서비스를 지원하여 비정형 데이터를 대규모로 활용할 수 있습니다. Carbon을 사용하면 10분 이내에 계정을 설정하고 한 달 동안 무제한으로 액세스할 수 있습니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n Automorphic\n언어 모델, 빠른 로딩/적재 및 이지스 방화벽을 위한 솔루션 제품군입니다.\n\n\nAutomorphic은 단 10개의 샘플만으로 언어 모델에 지식을 주입하는 Infuse, 자체 개선 모델, 미세 조정된 어댑터의 빠른 로딩/적재, OpenAI API 호환, 공개적으로 공유되는 모델을 위한 Automorphic Hub 등 언어 모델을 위한 솔루션 제품군을 제공합니다. 또한 프롬프트 주입, 프롬프트 및 PII 유출, 유해한 언어 등을 감지할 수 있는 모델용 방화벽인 Aegis를 제공합니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n\n Undetectable AI\nAI 방지 콘텐츠를 작성하고 AI 탐지를 제거할 수 있는 도구입니다.\n\n\n콘텐츠 제작자가 AI 탐지기를 우회하는 사람처럼 키워드가 풍부한 콘텐츠를 작성할 수 있도록 도와주는 AI 탐지 제거 도구입니다. 이 도구는 검색 엔진에 최적화되어 탐지를 피할 수 있는 고유한 자료를 제공하며 작가, 블로거, 연구원, 마케터 등에게 이상적입니다.\n\n\n유료\n바로가기\n \n\n\n\n\n\n\n\n Holly\n채용 프로세스를 자동화하는 도구입니다.\n\n\n기업이 채용 프로세스를 자동화할 수 있도록 지원하는 인공지능 기반의 가상 채용 도구입니다. 엄선된 후보자 목록을 제공하고, 사용자를 대신하여 후보자와 소통하며, 피드백을 통해 학습하여 최상의 매칭을 제공합니다. 여러 플랫폼과 통합되어 있으며 사람 채용 담당자처럼 생각하고 행동하도록 설계되었습니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n Airparser\n이메일, PDF, 문서, 이미지 등에서 데이터 추출을 자동화하는 도구입니다.\n\n\n이메일, PDF, 문서, 이미지 등에서 데이터 추출을 자동화하는 도구입니다. GPT 기반 파서와 OCR 엔진을 사용해 구조화된 데이터를 실시간으로 추출하고, 6000개 이상의 앱으로 데이터를 내보낼 수 있습니다. 또한 웹후크, API, Excel로 다운로드와 같은 기능도 제공합니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n Rainbow.ai\n일기 예보 및 알림을 제공하는 도구입니다.\n\n\n사용자에게 정확하고 신뢰할 수 있는 날씨 정보를 제공하는 AI 기반 일기 예보 도구로, 사용자가 정보를 얻고 안전하게 지낼 수 있도록 도와줍니다. 정확한 위치의 날씨 변화에 대한 적시 알림을 제공하며, 사용자는 앱을 다운로드하여 날씨를 미리 파악할 수 있습니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n AI Judge\n경합하는 두 당사자의 주장을 바탕으로 공정한 평결을 생성하는 도구입니다.\n\n\n인공지능 기술을 활용하여 분쟁 당사자 두 사람이 제시한 주장을 바탕으로 공정한 판결을 내리는 혁신적인 플랫폼입니다. 사용자가 분쟁에 대한 자신의 주장을 제출하면 AI 시스템이 각 당사자가 제시한 사실, 증거, 법적 원칙을 면밀히 분석하여 공정하고 공평한 판결을 내립니다. AI 알고리즘은 주장의 일관성, 증거의 강도, 법적 추론의 일관성 등 다양한 요소를 고려합니다. 또한, 사용자는 자격을 갖춘 법률 전문가에게 AI가 생성한 판결을 검토하도록 요청하여 추가적인 검토를 받을 수 있습니다. AI 판사는 제공된 정보를 바탕으로 객관적인 관점을 제시하여 분쟁 해결 프로세스를 용이하게 하도록 설계되었습니다.\n\n\n무료\n바로가기\n \n\n\n\n\n\n\n\n Cerebrium\n머신러닝 모델의 훈련, 배포 및 모니터링을 위한 도구입니다.\n\n\n단 몇 줄의 코드만으로 머신 러닝 모델을 쉽게 훈련, 배포, 모니터링할 수 있는 머신 러닝 프레임워크입니다. 사용자는 서버리스 GPU 모델을 배포하고, 모든 주요 프레임워크를 지원하고, LLM과 사용자 정의 모델을 연결하여 고유한 기능을 생성하고, 모델 전후에 로직을 추가하고, 모델을 자동으로 버전업하고, 1초 미만의 콜드 스타트를 할 수 있습니다. 또한 손쉬운 미세 조정, 최고의 ML 통합 가시성 플랫폼과의 통합, 기능 및 예측 드리프트 모니터링 기능도 제공합니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n PI.EXCHANGE\n코딩 없이 원시 데이터를 예측으로 변환하는 도구입니다.\n\n\n엔드투엔드 머신러닝 도구로, 사용자가 코딩 없이도 몇 분 만에 원시 데이터에서 예측으로 빠르게 전환할 수 있도록 지원합니다. 데이터 준비, 모델 개발, 데이터 보안 및 개인정보 보호, 통합 등의 기능을 제공합니다. 마케팅 팀, 데이터 과학자, 소프트웨어 엔지니어, 데이터 분석가, 기업가 등 다양한 업계에서 사용할 수 있습니다. 지식 허브, API 및 SDK 문서, 블로그 등의 리소스를 제공합니다.\n\n\n유료 (무료 체험판)\n바로가기\n \n\n\n\n\n\n\n\n Neum AI\nAI 애플리케이션을 정확하고 최신 상태로 유지할 수 있는 도구입니다.\n\n\n기업이 AI 애플리케이션을 최신의 정확한 상태로 유지할 수 있도록 도와주는 도구입니다. 이를 통해 사용자는 데이터 저장소를 연결하고, 벡터를 동기화하며, 데이터를 변환 및 임베드할 수 있습니다. 또한 역할 기반 액세스 제어 및 확장성과 같은 기능도 제공합니다.\n\n\n부분 유료화\n바로가기\n \n\n\n\n\n\n\n\n LiarLiar.AI\n실시간 동영상 피드에서 거짓말과 심박수 변동을 감지하는 도구입니다.\n\n\nAI의 힘을 활용하여 거짓말과 심박수 변동을 감지하는 혁신적인 거짓말 탐지 도구입니다. 사용자 친화적인 인터페이스로 설계되었으며 Zoom, Google Meet, Skype 등과 같은 인기 있는 화상 통화 소프트웨어와 호환됩니다. 한정된 기간 동안, LiarLiar는 단 29.99달러에 베타 버전을 평생 이용할 수 있는 혜택을 제공합니다. LiarLiar AI 도구는 고급 AI 알고리즘을 사용하여 실시간 비디오 피드를 분석하고 미세한 표정, 심박수 변동, 미묘한 신체 언어의 변화를 감지하여 진실성을 평가합니다.\n\n\n유료\n바로가기\n \n\n\n\n\n\n\n\n Agent.so\n머신러닝 모델의 정확도와 성능을 평가하는 도구입니다.\n\n\n머신러닝 모델의 성능을 평가하기 위한 도구입니다. 모델의 정확도는 물론 정확도, 리콜, F1 점수와 같은 기타 메트릭을 측정할 수 있습니다. 또한 기능 중요도 및 혼동 행렬과 같은 모델의 동작 및 특성에 대한 인사이트를 제공할 수 있습니다.\n\n\n유료 (무료 체험판)\n바로가기",
        "guid": "http://muzbox.tistory.com/483444",
        "categories": [
          "AI, 미래기술/AI 검출",
          "AI Detection",
          "AI감지",
          "AI검출",
          "AI사이트 추천",
          "It",
          "이슈",
          "추천사이트",
          "테크플러스"
        ],
        "isoDate": "2024-06-28T02:24:38.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": [
      {
        "creator": "늑돌이",
        "title": "삼성, 최초의 3nm 갤럭시워치용 엑시노스 W1000 프로세서 발표",
        "link": "http://lazion.com/2513713",
        "pubDate": "Thu, 4 Jul 2024 09:19:31 +0900",
        "author": "늑돌이",
        "comments": "http://lazion.com/2513713#entry2513713comment",
        "content": "<h3 data-ke-size=\"size23\">삼성전자가 차기 <b>갤럭시 워치 시리즈에 들어갈 스마트워치용 프로세서 엑시노스(Exynos) W1000을 발표</b>했습니다.</h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"Firefox_Screenshot_2024-07-03T22-45-49.709Z_web.jpg\" data-origin-width=\"2148\" data-origin-height=\"1218\"><span data-url=\"https://blog.kakaocdn.net/dn/qKymo/btsInw9kIaw/JBG8jdlOwVwGTRIRQC7Aak/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/qKymo/btsInw9kIaw/JBG8jdlOwVwGTRIRQC7Aak/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FqKymo%2FbtsInw9kIaw%2FJBG8jdlOwVwGTRIRQC7Aak%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"Firefox_Screenshot_2024-07-03T22-45-49.709Z_web.jpg\" data-origin-width=\"2148\" data-origin-height=\"1218\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><b>Your little command center(당신의 작은 사령부)</b>라는 문장을 내세우고 있는 <b>엑시노스 W1000</b> 프로세서는 일반적인 AP가 아니라 <b>웨어러블 디바이스, 특히 스마트워치</b>를 위해 만들어진 제품입니다. 당연히 삼성전자의 새로운 갤럭시 워치 시리즈를 위한 제품이죠.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\"><a href=\"https://lazion.com/2513709\">조만간 열릴 삼성전자의 갤럭시 언팩 행사</a>를 앞두고 공개된 엑시노스 W1000의 주요 특징은 다음과 같습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>엑시노스 W1000의 특징</b></span></h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><b>새로운 아키텍처로 더 강력해진 성능</b></h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"mo-f1-1-624x352-exynosw1000.png\" data-origin-width=\"624\" data-origin-height=\"352\"><span data-url=\"https://blog.kakaocdn.net/dn/BkiB8/btsImhk06Qi/7ldRJEXIw7kc4nN3WcfNHK/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/BkiB8/btsImhk06Qi/7ldRJEXIw7kc4nN3WcfNHK/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FBkiB8%2FbtsImhk06Qi%2F7ldRJEXIw7kc4nN3WcfNHK%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"mo-f1-1-624x352-exynosw1000.png\" data-origin-width=\"624\" data-origin-height=\"352\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">듀얼코어였던 전작 엑시노스 W920/W930과는 달리 <b>빅리틀 방식의 5코어 AP 아키텍처</b>를 채택했습니다.</p>\n<p data-ke-size=\"size16\">Cortex-A78 1.6GHz 싱글코어와 Cortex-A55 1.5GHz 쿼드코어로 기존 제품보다 더 강력한 성능과 함께 부드러운 동작을 보여줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">전작인 <b>엑시노스 W930 대비 싱글코어 기준 최대 3.4배, 멀티코어 기준 최대 3.7배의 성능 향상</b>을 달성했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><b> 엑시노스 시리즈 최초의 3nm 공정 프로세서</b></h4>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">삼성전자 <b>엑시노스 시리즈 최초로 3nm 공정(3nm GAA)</b>을 채택했습니다. 웨어러블 디바이스에 필수적인 더 작은 크기로 높은 성능을 낼 수 있으며 배터리를 위한 공간 확보에도 유리합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"mo-f2-1-624x352-exynosw1000.png\" data-origin-width=\"624\" data-origin-height=\"352\"><span data-url=\"https://blog.kakaocdn.net/dn/3czqS/btsInkBiiy5/PGsUdI0XkVUcqHuAZR0Mik/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/3czqS/btsInkBiiy5/PGsUdI0XkVUcqHuAZR0Mik/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F3czqS%2FbtsInkBiiy5%2FPGsUdI0XkVUcqHuAZR0Mik%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"mo-f2-1-624x352-exynosw1000.png\" data-origin-width=\"624\" data-origin-height=\"352\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">엑시노스 W1000은 더 작은 크기와 뛰어난 열 관리를 위해 FOPLP(fan-out panel-level packaging)가, PMIC(power management IC)와 DRAM과 NAND를 올리기 위해 ePoP(embedded package on package) 기술이 적용되는 등 더 작은 크기로 구현하기 위한 첨단 패키징 기술이 들어갔습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><b>AOD 엔진 탑재</b></h4>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"v2-pc-f3-1156x640-exynosw1000_web.jpg\" data-origin-width=\"1156\" data-origin-height=\"640\"><span data-url=\"https://blog.kakaocdn.net/dn/m0T1v/btsInCVSuRD/DjFwRVb291U6RAPoC9SLV1/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/m0T1v/btsInCVSuRD/DjFwRVb291U6RAPoC9SLV1/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fm0T1v%2FbtsInCVSuRD%2FDjFwRVb291U6RAPoC9SLV1%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"v2-pc-f3-1156x640-exynosw1000_web.jpg\" data-origin-width=\"1156\" data-origin-height=\"640\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">Always-On-Display을 위한 AOD 엔진이 탑재되어 매일 사용시 더 또렷한 화면을 제공합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\"><b>저전력 성능 강화</b></h4>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"pc-f4-608x608-exynosw1000.png\" data-origin-width=\"608\" data-origin-height=\"608\"><span data-url=\"https://blog.kakaocdn.net/dn/dcc0Iu/btsImePczuO/jXrtTKcnRxEy0HRTxHYw2K/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/dcc0Iu/btsImePczuO/jXrtTKcnRxEy0HRTxHYw2K/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdcc0Iu%2FbtsImePczuO%2FjXrtTKcnRxEy0HRTxHYw2K%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"pc-f4-608x608-exynosw1000.png\" data-origin-width=\"608\" data-origin-height=\"608\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">전력 소모를 낮추기 위해 GPU에는 IFPO(Inter Frame Power Off)와 UUD(Ultra Under Drive) 기술이 적용되었으며, 통신을 담당한 모뎀 엔진에는 DVFS(Dynamic Voltage Frequency Scaling)이 구현되었습니다. 오디오에는 BLE(Bluetooth Low Energy)가 쓰였으며 메모리는 LPDDR5로 업그레이드되었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"pc-f2-608x608-exynosw1000.png\" data-origin-width=\"608\" data-origin-height=\"608\"><span data-url=\"https://blog.kakaocdn.net/dn/bsYXSM/btsInDmXiGy/fViKHi2RtjOVfAtxMNAj4k/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bsYXSM/btsInDmXiGy/fViKHi2RtjOVfAtxMNAj4k/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbsYXSM%2FbtsInDmXiGy%2FfViKHi2RtjOVfAtxMNAj4k%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"pc-f2-608x608-exynosw1000.png\" data-origin-width=\"608\" data-origin-height=\"608\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">삼성전자의 엑시노스 W1000 프로세서는 곧 공개될 새로운 갤럭시 워치 시리즈에 처음으로 채용되어 나올 것으로 보입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(자료 출처 : 삼성전자)</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h4 data-ke-size=\"size20\">관련 글</h4>\n<figure id=\"og_1720051836118\" contenteditable=\"false\" data-ke-type=\"opengraph\" data-ke-align=\"alignCenter\" data-og-type=\"article\" data-og-title=\"갤럭시 언팩  2024 두번째, 7월 10일 프랑스 파리에서 열린다\" data-og-description=\"삼성전자가 폴더블 스마트폰인 갤럭시 Z 시리즈를 위한 2024년 두번째 갤럭시 언팩 행사는 오는 7월 10일, 프랑스 파리에서 개최합니다.&nbsp;&nbsp;이번 갤럭시 언팩(Galaxy Unpacked 2024: Galaxy AI is Here) 행사의 \" data-og-host=\"lazion.com\" data-og-source-url=\"https://lazion.com/2513709\" data-og-url=\"https://lazion.com/2513709\" data-og-image=\"https://scrap.kakaocdn.net/dn/bIcaal/hyWrSeejqv/gg6jyX44gyTdkOMuhSm1kK/img.jpg?width=800&amp;height=450&amp;face=0_0_800_450,https://scrap.kakaocdn.net/dn/fY7SP/hyWvNCkrLh/jXcblLUKlx1EvvEqEpDbi1/img.jpg?width=800&amp;height=450&amp;face=0_0_800_450,https://scrap.kakaocdn.net/dn/phhQ9/hyWrNxgcjt/VRgjOJk3ledRCpjjxMpnt0/img.jpg?width=2048&amp;height=1152&amp;face=0_0_2048_1152\"><a href=\"https://lazion.com/2513709\" rel=\"noopener\" data-source-url=\"https://lazion.com/2513709\">\n<div class=\"og-image\" style=\"background-image: url('https://scrap.kakaocdn.net/dn/bIcaal/hyWrSeejqv/gg6jyX44gyTdkOMuhSm1kK/img.jpg?width=800&amp;height=450&amp;face=0_0_800_450,https://scrap.kakaocdn.net/dn/fY7SP/hyWvNCkrLh/jXcblLUKlx1EvvEqEpDbi1/img.jpg?width=800&amp;height=450&amp;face=0_0_800_450,https://scrap.kakaocdn.net/dn/phhQ9/hyWrNxgcjt/VRgjOJk3ledRCpjjxMpnt0/img.jpg?width=2048&amp;height=1152&amp;face=0_0_2048_1152');\">&nbsp;</div>\n<div class=\"og-text\">\n<p class=\"og-title\" data-ke-size=\"size16\">갤럭시 언팩 2024 두번째, 7월 10일 프랑스 파리에서 열린다</p>\n<p class=\"og-desc\" data-ke-size=\"size16\">삼성전자가 폴더블 스마트폰인 갤럭시 Z 시리즈를 위한 2024년 두번째 갤럭시 언팩 행사는 오는 7월 10일, 프랑스 파리에서 개최합니다.&nbsp;&nbsp;이번 갤럭시 언팩(Galaxy Unpacked 2024: Galaxy AI is Here) 행사의</p>\n<p class=\"og-host\" data-ke-size=\"size16\">lazion.com</p>\n</div>\n</a></figure>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "삼성전자가 차기 갤럭시 워치 시리즈에 들어갈 스마트워치용 프로세서 엑시노스(Exynos) W1000을 발표했습니다.\n \n\n\n \nYour little command center(당신의 작은 사령부)라는 문장을 내세우고 있는 엑시노스 W1000 프로세서는 일반적인 AP가 아니라 웨어러블 디바이스, 특히 스마트워치를 위해 만들어진 제품입니다. 당연히 삼성전자의 새로운 갤럭시 워치 시리즈를 위한 제품이죠.\n \n조만간 열릴 삼성전자의 갤럭시 언팩 행사를 앞두고 공개된 엑시노스 W1000의 주요 특징은 다음과 같습니다.\n \n엑시노스 W1000의 특징\n \n새로운 아키텍처로 더 강력해진 성능\n\n\n듀얼코어였던 전작 엑시노스 W920/W930과는 달리 빅리틀 방식의 5코어 AP 아키텍처를 채택했습니다.\nCortex-A78 1.6GHz 싱글코어와 Cortex-A55 1.5GHz 쿼드코어로 기존 제품보다 더 강력한 성능과 함께 부드러운 동작을 보여줍니다.\n \n전작인 엑시노스 W930 대비 싱글코어 기준 최대 3.4배, 멀티코어 기준 최대 3.7배의 성능 향상을 달성했습니다.\n \n \n 엑시노스 시리즈 최초의 3nm 공정 프로세서\n \n삼성전자 엑시노스 시리즈 최초로 3nm 공정(3nm GAA)을 채택했습니다. 웨어러블 디바이스에 필수적인 더 작은 크기로 높은 성능을 낼 수 있으며 배터리를 위한 공간 확보에도 유리합니다.\n\n\n엑시노스 W1000은 더 작은 크기와 뛰어난 열 관리를 위해 FOPLP(fan-out panel-level packaging)가, PMIC(power management IC)와 DRAM과 NAND를 올리기 위해 ePoP(embedded package on package) 기술이 적용되는 등 더 작은 크기로 구현하기 위한 첨단 패키징 기술이 들어갔습니다.\n \n \nAOD 엔진 탑재\n \n\n\n \nAlways-On-Display을 위한 AOD 엔진이 탑재되어 매일 사용시 더 또렷한 화면을 제공합니다.\n \n \n저전력 성능 강화\n \n\n\n \n전력 소모를 낮추기 위해 GPU에는 IFPO(Inter Frame Power Off)와 UUD(Ultra Under Drive) 기술이 적용되었으며, 통신을 담당한 모뎀 엔진에는 DVFS(Dynamic Voltage Frequency Scaling)이 구현되었습니다. 오디오에는 BLE(Bluetooth Low Energy)가 쓰였으며 메모리는 LPDDR5로 업그레이드되었습니다.\n \n \n\n\n \n삼성전자의 엑시노스 W1000 프로세서는 곧 공개될 새로운 갤럭시 워치 시리즈에 처음으로 채용되어 나올 것으로 보입니다.\n \n(자료 출처 : 삼성전자)\n \n관련 글\n\n \n갤럭시 언팩 2024 두번째, 7월 10일 프랑스 파리에서 열린다\n삼성전자가 폴더블 스마트폰인 갤럭시 Z 시리즈를 위한 2024년 두번째 갤럭시 언팩 행사는 오는 7월 10일, 프랑스 파리에서 개최합니다.  이번 갤럭시 언팩(Galaxy Unpacked 2024: Galaxy AI is Here) 행사의\nlazion.com",
        "guid": "http://lazion.com/2513713",
        "categories": [
          "#더작은모바일/#웨어러블#헬스케어#IoT"
        ],
        "isoDate": "2024-07-04T00:19:31.000Z"
      },
      {
        "creator": "늑돌이",
        "title": "LG전자, 네덜란드 개방형 스마트홈 기업 앳홈(Athom) 인수",
        "link": "http://lazion.com/2513712",
        "pubDate": "Wed, 3 Jul 2024 18:00:14 +0900",
        "author": "늑돌이",
        "comments": "http://lazion.com/2513712#entry2513712comment",
        "content": "<h3 data-ke-size=\"size23\">LG전자가 네덜란드의 스마트홈 플랫폼 기업인 <b>앳홈(Athom)을 인수</b>합니다.</h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"56766.jpg\" data-origin-width=\"856\" data-origin-height=\"544\"><span data-url=\"https://blog.kakaocdn.net/dn/vlsEj/btsIlSFpkOf/QO1vxs1gDkpkoVgte4TfKk/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/vlsEj/btsIlSFpkOf/QO1vxs1gDkpkoVgte4TfKk/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FvlsEj%2FbtsIlSFpkOf%2FQO1vxs1gDkpkoVgte4TfKk%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"56766.jpg\" data-origin-width=\"856\" data-origin-height=\"544\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">최근 LG전자는 네덜란드 엔스헤데(Enschede)에 본사를 둔 스마트홈 플랫폼 기업 앳홈(Athom)의 지분 80%를 인수하고, 향후 3년 내 나머지 20%를 인수하는 계약을 체결했습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>LG전자가 인수하는 앳홈(Athom)은 어떤 기업?</b></span></h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">앳홈은 2014년 설립된 스마트홈 플랫폼 기업으로 가전 및 IoT기기를 연결하는 스마트홈 허브 호미(Homey)를 보유하고 있습니다. 창립 후 10년 간 유럽 지역을 중심으로 성장했으며 유럽, 호주, 싱가포르에 이어 2023년에는 미국, 캐나다까지 출시 국가를 확대한 바 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">앳홈은 자체 개발한 허브와 운영체제(OS)를 바탕으로 독자적인 스마트홈 생태계를 조성했습니다. 대표 제품인 호미 프로(Homey Pro)는 5만여 종의 가전 및 IoT기기를 연결합니다. 와이파이(wi-fi), 블루투스(Bluetooth), 지웨이브(Z-Wave), 매터(Matter), 쓰레드(Thread) 등 다양한 연결 방식을 지원하여 개방성 면에서 높은 평가를 받고 있습니다.<br />&nbsp;<br />자체적으로 운영하는 호미 앱스토어에는 필립스, 이케아 등 전 세계 다양한 브랜드의 제품을 연결&middot;제어하는 애플리케이션이 1000여 개 등록되어 있어 고객은 앱스토어에서 앱을 다운로드해 손쉽게 기기와 연결하고 스마트홈을 구현할 수 있습니다. 앳홈이 구축한 오픈 플랫폼에서 개발자들이 활발히 활동하며 허브와 연결되는 브랜드 및 기기의 종류도 꾸준히 확대 중입니다. </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><b>LG전자+앳홈 = AI홈?</b></span></h3>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">LG전자는 수만 개의 가전과 센서&middot;조명 등 IoT기기를 연결하는 앳홈의 연결성과 LG 씽큐(LG ThinQ) 플랫폼에 적용예정인 생성형 AI를 활용해 고객을 이해하고 최적의 공간 솔루션을 제공하는 AI홈을 실현할 예정입니다</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">LG전자 정기현 플랫폼사업센터 부사장은 \"앳홈의 강점인 개방형 생태계와 연결성을 바탕으로 외부 연동 서비스를 확대하고, AI가전과의 시너지를 통해 고객에게 다양하고 입체적인 공간 경험을 제공할 것&rdquo;이라고 밝혔습니다.<br />&nbsp;<br />참고로 LG전자는 앳홈 인수 후에도 앳홈의 운영체계와 브랜드는 독립적으로 유지합니다. </p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(자료 출처 : LG전자)</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\">자사가 하기 힘든 일은 인수해서라고 해결하는 점은 나쁘지 않습니다만, 과연 LG전자가 이런 식의 생태계를 운영할 수 있는지 두고봐야겠죠.</p>",
        "contentSnippet": "LG전자가 네덜란드의 스마트홈 플랫폼 기업인 앳홈(Athom)을 인수합니다.\n \n\n\n \n최근 LG전자는 네덜란드 엔스헤데(Enschede)에 본사를 둔 스마트홈 플랫폼 기업 앳홈(Athom)의 지분 80%를 인수하고, 향후 3년 내 나머지 20%를 인수하는 계약을 체결했습니다.\n \n \nLG전자가 인수하는 앳홈(Athom)은 어떤 기업?\n \n앳홈은 2014년 설립된 스마트홈 플랫폼 기업으로 가전 및 IoT기기를 연결하는 스마트홈 허브 호미(Homey)를 보유하고 있습니다. 창립 후 10년 간 유럽 지역을 중심으로 성장했으며 유럽, 호주, 싱가포르에 이어 2023년에는 미국, 캐나다까지 출시 국가를 확대한 바 있습니다.\n \n앳홈은 자체 개발한 허브와 운영체제(OS)를 바탕으로 독자적인 스마트홈 생태계를 조성했습니다. 대표 제품인 호미 프로(Homey Pro)는 5만여 종의 가전 및 IoT기기를 연결합니다. 와이파이(wi-fi), 블루투스(Bluetooth), 지웨이브(Z-Wave), 매터(Matter), 쓰레드(Thread) 등 다양한 연결 방식을 지원하여 개방성 면에서 높은 평가를 받고 있습니다.\n \n자체적으로 운영하는 호미 앱스토어에는 필립스, 이케아 등 전 세계 다양한 브랜드의 제품을 연결·제어하는 애플리케이션이 1000여 개 등록되어 있어 고객은 앱스토어에서 앱을 다운로드해 손쉽게 기기와 연결하고 스마트홈을 구현할 수 있습니다. 앳홈이 구축한 오픈 플랫폼에서 개발자들이 활발히 활동하며 허브와 연결되는 브랜드 및 기기의 종류도 꾸준히 확대 중입니다. \n \n \nLG전자+앳홈 = AI홈?\n \nLG전자는 수만 개의 가전과 센서·조명 등 IoT기기를 연결하는 앳홈의 연결성과 LG 씽큐(LG ThinQ) 플랫폼에 적용예정인 생성형 AI를 활용해 고객을 이해하고 최적의 공간 솔루션을 제공하는 AI홈을 실현할 예정입니다\n \nLG전자 정기현 플랫폼사업센터 부사장은 \"앳홈의 강점인 개방형 생태계와 연결성을 바탕으로 외부 연동 서비스를 확대하고, AI가전과의 시너지를 통해 고객에게 다양하고 입체적인 공간 경험을 제공할 것”이라고 밝혔습니다.\n \n참고로 LG전자는 앳홈 인수 후에도 앳홈의 운영체계와 브랜드는 독립적으로 유지합니다. \n \n \n(자료 출처 : LG전자)\n \n자사가 하기 힘든 일은 인수해서라고 해결하는 점은 나쁘지 않습니다만, 과연 LG전자가 이런 식의 생태계를 운영할 수 있는지 두고봐야겠죠.",
        "guid": "http://lazion.com/2513712",
        "categories": [
          "#더작은모바일/#웨어러블#헬스케어#IoT",
          "athom",
          "homey",
          "IOT",
          "LG",
          "LGE",
          "M&amp;A",
          "News"
        ],
        "isoDate": "2024-07-03T09:00:14.000Z"
      }
    ]
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "(RULIWEB`Д')/",
        "title": "[MULTI] 액션과 로그라이트 사이에서 길을 찾다, 젠레스 존 제로",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2231",
        "pubDate": "Thu, 04 Jul 2024 11:38:47 +0900",
        "author": "(RULIWEB`Д')/",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i1.ruliweb.com/thumb/24/07/04/1907b401f2f4c329e.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2024-07-04T02:38:47.000Z"
      },
      {
        "creator": "［RULIWEB］",
        "title": "[PC] 추리는 선택지가 아닌 머리 속 질문에서 나온다, '언커버 더 스모킹 건'",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2230",
        "pubDate": "Mon, 01 Jul 2024 16:14:05 +0900",
        "author": "［RULIWEB］",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i3.ruliweb.com/thumb/24/07/01/1906d21501e5104c1.jpg\">",
        "contentSnippet": "",
        "categories": [
          "리뷰"
        ],
        "isoDate": "2024-07-01T07:14:05.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "khris'log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": []
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Hybrid's Notes",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": []
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": [
      {
        "creator": "megayuchi",
        "title": "인게임 음성채팅 기능 구현.",
        "link": "https://megayuchi.com/2024/07/04/%ec%9d%b8%ea%b2%8c%ec%9e%84-%ec%9d%8c%ec%84%b1%ec%b1%84%ed%8c%85-%ea%b8%b0%eb%8a%a5-%ea%b5%ac%ed%98%84/",
        "pubDate": "Thu, 04 Jul 2024 14:20:20 +0000",
        "content:encodedSnippet": "2024년 7월 4일 방송분입니다.",
        "dc:creator": "megayuchi",
        "comments": "https://megayuchi.com/2024/07/04/%ec%9d%b8%ea%b2%8c%ec%9e%84-%ec%9d%8c%ec%84%b1%ec%b1%84%ed%8c%85-%ea%b8%b0%eb%8a%a5-%ea%b5%ac%ed%98%84/#respond",
        "content": "2024년 7월 4일 방송분입니다.",
        "contentSnippet": "2024년 7월 4일 방송분입니다.",
        "guid": "http://megayuchi.com/?p=7028",
        "categories": [
          "Development",
          "Game Development",
          "Game Engine Development",
          "Voxel Horizon"
        ],
        "isoDate": "2024-07-04T14:20:20.000Z"
      }
    ]
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "기기와 앱의 무결성 보장부터 서비스 요청 보호까지: LINE의 기기 증명 서비스 - 1편",
        "link": "https://techblog.lycorp.co.jp/ko/line-device-attestation-1",
        "pubDate": "Mon, 01 Jul 2024 02:00:00 GMT",
        "content": "들어가며\n안녕하세요. Security R&D 팀의 김도연, 김영현, 박경준, 후바인 찰스, 안상환입니다. Security R&D 팀은 LY 그룹 서비스의 전반적인 보안을 강화하기 ...",
        "contentSnippet": "들어가며\n안녕하세요. Security R&D 팀의 김도연, 김영현, 박경준, 후바인 찰스, 안상환입니다. Security R&D 팀은 LY 그룹 서비스의 전반적인 보안을 강화하기 ...",
        "guid": "https://techblog.lycorp.co.jp/ko/line-device-attestation-1",
        "isoDate": "2024-07-01T02:00:00.000Z"
      },
      {
        "title": "대용량 AI 실시간 임베딩 데이터를 효율적으로 다루기",
        "link": "https://techblog.lycorp.co.jp/ko/how-to-efficiently-handle-massive-ai-real-time-embedding",
        "pubDate": "Fri, 28 Jun 2024 02:00:00 GMT",
        "content": "안녕하세요. LINE VOOM AI 조직의 서버 개발자 박찬우, 양유성입니다. 이번 글의 제목은 'Massive AI Real-time Embedding을 효율적으로 다루기'입니다...",
        "contentSnippet": "안녕하세요. LINE VOOM AI 조직의 서버 개발자 박찬우, 양유성입니다. 이번 글의 제목은 'Massive AI Real-time Embedding을 효율적으로 다루기'입니다...",
        "guid": "https://techblog.lycorp.co.jp/ko/how-to-efficiently-handle-massive-ai-real-time-embedding",
        "isoDate": "2024-06-28T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "이한",
    "category": "개인",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": [
      {
        "creator": "호돌맨",
        "title": "Almalinux 9.x minimal에서 logrotate가 안되는 문제",
        "link": "https://hodolman.com/61",
        "pubDate": "Thu, 4 Jul 2024 16:12:40 +0900",
        "author": "호돌맨",
        "comments": "https://hodolman.com/61#entry61comment",
        "content": "<blockquote data-ke-style=\"style1\"><p data-ke-size=\"size16\"><span style=\"font-family: 'Noto Serif KR';\"><p>사실 잘 작동하는지 확인 안했다. 실패하면 글 삭 ㄱ</p>\n</span></p></blockquote><h2>문제</h2>\n<p>Almalinux 8.7에서는 logrotate가 잘 됐는데 9.3으로 업데이트를 한 뒤로 안되기 시작했다.</p>\n<p>Nginx, 앱 로그 용량이 늘어나면 시스템에 좋지 않기때문에 조치를 취해보자.</p>\n<p><del>(Docker에서 실행하는 컨테이기때문에 서비스 재 배포를 통해 해결할 수 있지만..)</del></p>\n<p>아마도 RHEL계열 9.x minimal 버젼에서는 거의 대부분 발생할 문제라고 생각한다.</p>\n<h2>해결</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1024\" data-origin-height=\"1024\"><span data-url=\"https://blog.kakaocdn.net/dn/EkeJ5/btsInuYMYZS/Sw1zJ4oyv8r2dgw2QQZmbK/img.webp\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/EkeJ5/btsInuYMYZS/Sw1zJ4oyv8r2dgw2QQZmbK/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FEkeJ5%2FbtsInuYMYZS%2FSw1zJ4oyv8r2dgw2QQZmbK%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1024\" data-origin-height=\"1024\"/></span></figure>\n</p>\n<p>온갖 삽질을 다 했는데.. 무슨 이유 때문인지 9.x에서 <code>/etc/cron.daily/logrotate</code> 스크립트가 누락되어있다. (5252 어디까지 minimal 할 셈이냐?!)</p>\n<pre><code>#!/bin/sh\n\n/usr/sbin/logrotate /etc/logrotate.conf\nEXITVALUE=$?\nif [ $EXITVALUE != 0 ]; then\n    /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;\nfi\nexit $EXITVALUE</code></pre><p>위 스크립트 내용을을 <code>/etc/cron.daily/logrotate</code> 파일에 넣어주고 실행 권한(<code>$ chmod +x /etc/cron.daily/logrotate</code>)을 주면된다. 내부적으로 anacron에서 run-parts를 통해 실행하기때문에 실행 권한이 꼭 있어야 되는것 같다.</p>\n<p>만약 Dockerfile을 이용한다면 아래 명령어를 추가한다.</p>\n<pre><code>RUN echo $&#39;#!/bin/sh\\n\\\n/usr/sbin/logrotate /etc/logrotate.conf\\n\\\nEXITVALUE=$?\\n\\\nif [ $EXITVALUE != 0 ]; then\\n\\\n   /usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;\\n\\\nfi\\n\\\nexit $EXITVALUE&#39; &gt; /etc/cron.daily/logrotate\n\nRUN chmod 755 /etc/cron.daily/logrotate</code></pre>",
        "contentSnippet": "사실 잘 작동하는지 확인 안했다. 실패하면 글 삭 ㄱ\n\n문제\nAlmalinux 8.7에서는 logrotate가 잘 됐는데 9.3으로 업데이트를 한 뒤로 안되기 시작했다.\nNginx, 앱 로그 용량이 늘어나면 시스템에 좋지 않기때문에 조치를 취해보자.\n(Docker에서 실행하는 컨테이기때문에 서비스 재 배포를 통해 해결할 수 있지만..)\n아마도 RHEL계열 9.x minimal 버젼에서는 거의 대부분 발생할 문제라고 생각한다.\n해결\n\n\n온갖 삽질을 다 했는데.. 무슨 이유 때문인지 9.x에서 /etc/cron.daily/logrotate 스크립트가 누락되어있다. (5252 어디까지 minimal 할 셈이냐?!)\n#!/bin/sh\n\n/usr/sbin/logrotate /etc/logrotate.conf\nEXITVALUE=$?\nif [ $EXITVALUE != 0 ]; then\n    /usr/bin/logger -t logrotate \"ALERT exited abnormally with [$EXITVALUE]\"\nfi\nexit $EXITVALUE\n위 스크립트 내용을을 /etc/cron.daily/logrotate 파일에 넣어주고 실행 권한($ chmod +x /etc/cron.daily/logrotate)을 주면된다. 내부적으로 anacron에서 run-parts를 통해 실행하기때문에 실행 권한이 꼭 있어야 되는것 같다.\n만약 Dockerfile을 이용한다면 아래 명령어를 추가한다.\nRUN echo $'#!/bin/sh\\n\\\n/usr/sbin/logrotate /etc/logrotate.conf\\n\\\nEXITVALUE=$?\\n\\\nif [ $EXITVALUE != 0 ]; then\\n\\\n   /usr/bin/logger -t logrotate \"ALERT exited abnormally with [$EXITVALUE]\"\\n\\\nfi\\n\\\nexit $EXITVALUE' > /etc/cron.daily/logrotate\n\nRUN chmod 755 /etc/cron.daily/logrotate",
        "guid": "https://hodolman.com/61",
        "categories": [
          "개발/Linux,Server",
          "9.x",
          "linux",
          "logrotate"
        ],
        "isoDate": "2024-07-04T07:12:40.000Z"
      }
    ]
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": [
      {
        "title": "신뢰성 없는 네트워크",
        "link": "https://velog.io/@ahngj96/%EC%8B%A0%EB%A2%B0%EC%84%B1-%EC%97%86%EB%8A%94-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC",
        "pubDate": "Tue, 02 Jul 2024 18:04:41 GMT",
        "content": "<p>여기서 다루는 분산 시스템은 비공유 시스템으로 네트워크로 연결된 다수의 장비다. 네트워크는 이 장비들이 통신하는 유일한 수단이다. 각 장비는 자신만의 메모리와 디스크를 갖고 있으며 다른 장비의 메모리나 디스크에 접근할 수 없다고 가정한다.</p>\n<p>비공유가 시스템을 구축하는 유일한 방법은 아니지만 몇 가지 이유로 인터넷 서비스를 구축하는 주된 방법이 됐다.</p>\n<ul>\n<li>특별한 하드웨어가 필요하지 않아서 상대적으로 <strong>저렴</strong>하다.</li>\n<li><strong>상품화된 클라우드 서비스</strong>를 활용할 수 있다.</li>\n<li>지리적으로 분산된 여러 데이터센터에 <strong>중복 배치함으로써 높은 신뢰성</strong>을 확보할 수 있다.</li>\n</ul>\n<p>인터넷과 데이터센터 내부 네트워크 대부분은 <strong>비동기 패킷 네트워크</strong>이다. 노드는 다른 노드로 메시지를 보낼 수 있지만 네트워크는 <strong>메시지가 언제 도착할지 혹은 도착하기는 할 것인지 보장하지 않는다</strong>. 요청을 보내고 응답을 기다릴 때 여러 가지가 잘못될 수 있다.</p>\n<ol>\n<li>요청 손실 (네트워크 선 뽑기)</li>\n<li>요청 지연</li>\n<li>원격 노드 장애 (전원 다운)</li>\n<li>원격 노드가 일시적으로 응답을 멈춤 (GC)</li>\n<li>응답 손실</li>\n<li>응답 지연</li>\n</ol>\n<p>이런 문제를 다루는 흔한 방법은 <strong>타임아웃</strong>이다.</p>\n<blockquote>\n<p>현재 <em>TPM Agent</em>, <em>Collector</em>, <em>Tibero Master</em> 등 네트워크 연결에 타임아웃 로직이 들어가 있다. 대표적으로</p>\n<ol>\n<li><em>TPM Agent</em>가 <em>Collector</em>로 연결 요청했을 때</li>\n<li><em>Tibero Master</em>가 <em>Tibero</em>와 첫 세션 연결을 맺을 때</li>\n</ol>\n<p>번외. 네트워크 연결은 아니나 TPM Agent pipe read에도 타임아웃 로직이 있다.</p>\n</blockquote>\n<h1 id=\"현실의-네트워크-결함\">현실의 네트워크 결함</h1>\n<p>수십년 동안 컴퓨터 네트워크를 구축해 왔으나 아직 신뢰성 있는 네트워크를 만드는 방법을 알아내지는 못했다.</p>\n<p>네트워크 결함이 드물더라도 결함이 일어날 수 있다는 사실은 우리가 만드는 소프트웨어가 이를 처리할 수 있어야한다는 뜻이다. 네트워크 상으로 통신할 때마다 실패할 가능성이 있다. 네트워크 결함의 오류 처리가 정의되고 테스트되지 않는다면 나쁜 일이 제멋대로 생긴다. 예를 들어 클러스터가 교착 상태에 빠져 네트워크가 복구되더라도 영구적으로 요청을 처리할 수 없게 될 수 있으며, 심지어 모든 데이터를 지워버릴 수도 있다.</p>\n<p>반드시 네트워크 결함을 견뎌내도록(tolerating) 처리할 필요는 없다. 그러나 소프트웨어가 네트워크 문제에 어떻게 반응하는지 알고 <strong>시스템이 그로부터 복구할 수 있도록 보장</strong>해야 한다. 고의로 네트워크 문제를 유발하고 시스템의 반응을 테스트하는 것은 일리가 있다.(<a href=\"https://biggwang.github.io/2022/10/18/Component/%EC%B9%B4%EC%98%A4%EC%8A%A4%EB%AA%BD%ED%82%A4%EB%A1%9C%20%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C%20%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%20%EC%9E%A5%EC%95%A0%20%EC%A3%BC%EC%9E%85%ED%95%98%EA%B8%B0/\">카오스 몽키</a>)</p>\n<h2 id=\"결함-감지\">결함 감지</h2>\n<p>많은 시스템은 결함이 있는 노드를 자동으로 감지할 수 있어야 한다.</p>\n<p>예를 들어,</p>\n<ul>\n<li>로드 밸런서는 죽은 노드로 요청을 그만 보내야 한다.</li>\n<li>단일 리더 복제를 사용하는 분산 데이터베이스에서 리더에 장애가 나면 팔로워 중 하나가 리더로 승격돼야 한다.</li>\n</ul>\n<p>네트워크에 관한 불확실성 때문에 노드가 동작 중인지 아닌지 구별하기 어렵다. 어떤 특정한 환경에서는 뭔가 동작하지 않는다고 명시적으로 알려주는 피드백을 받을 수 있다.</p>\n<ul>\n<li>노드가 실행중인 장비에 연결할 수 있지만 목적지 포트에서 수신 대기하는 프로세스가 없다면 운영체제가 친절하게 <code>RST</code>나 <code>FIN</code> 패킷을 응답으로 보내서 TCP 연결을 닫거나 거부한다. 그러나 노드가 요청을 처리하다 죽었다면 원격 노드에서 데이터가 실제로 얼마나 처리됐는지 알 방법이 없다. <a href=\"https://velog.io/@ahngj96/%EA%B0%91%EC%9E%90%EA%B8%B0-%EC%97%B0%EA%B2%B0%EB%90%9C-%EB%AA%A8%EB%93%A0-%EC%88%98%EC%A7%91%EA%B8%B0%EC%97%90%EC%84%9C-%EC%88%98%EC%A7%91%EC%9D%B4-%EB%A9%88%EC%B7%84%EC%96%B4%EC%9A%94\">추가로 <code>FIN</code>응답 패칫 자체가 방화벽 등으로 인하여 아예 오지 않을 경우도 있다.</a></li>\n<li>노드 프로세스는 죽었지만, 노드 운영체제는 실행 중이라면 스크립트로 다른 노드에게 프로세스가 죽었다고 알려 타임아웃이 만료되기를 기다리지 않도록 할 수 있다.</li>\n<li>스위치 자체에 대한 접근을 할 수 있다면, 네트워크 스위치의 관리 인터페이스에 접근하여 질의를 보내 하드웨어 수준의 링크 장애를 감지할 수 있다.</li>\n<li>IP 주소에 도달할 수 없다고 라우터가 확신하면 <code>ICMP Destination Unreachable</code> 패킷으로 응답할 수도 있다.</li>\n</ul>\n<p>뭔가 잘못되면 운 좋게 오류 응답을 받을 수도 있지만 <strong>일반적으로 아무 응답도 받지 못할 것이라 가정</strong>해야 한다. 몇 번 재시도를 해 보고 TCP 재시도만 믿지 말고 <strong>애플리케이션 수준에서 재시도하고 타임아웃이 만료되기를 기다렸다가 타임아웃 내에 응답을 받지 못하면 마침내 노드가 죽었다고 선언</strong>할 수 있다.</p>\n<h2 id=\"타임아웃과-기약-없는-지연\">타임아웃과 기약 없는 지연</h2>\n<p>타임아웃만이 결함을 감지할 확실한 수단이라면 적정한 타임아웃 시간은 무엇일까? 간단한 답은 없다. 타임아웃이 길면 노드가 죽었다고 선언될 때까지 기다리는 시간이 길어지고, 성급하게 노드가 죽었다고 판단하면 일시적으로 느려진 상황일 뿐인데도 죽었다고 잘못 선언할 의험이 높아진다.</p>\n<p>패킷의 최대 지연 시간이 보장된 네트워크를 사용하는 가상의 시스템이 있다 가정하자. 모든 패킷은 <code>d</code> 시간 내에 전송되거나 손실되지만 전송 시간이 결코 <code>d</code> 보다 오래 걸리지 않는다. 또 장애가 나지 않는 노드는 항상 요청을 <code>r</code> 시간 이내에 처리한다고 할 때, 성공한 요청은 모두 <code>2d + r</code> 시간 내에 응답을 받는 다고 보장할 수 있다. 따라서 이럴 경우에는 <code>2d + r</code> 을 타임아웃으로 사용하는게 합리적이다. 그러나 우리가 사용하는 시스템은 대부분 이 중 어떤 것도 보장하지 않는다. 비동기 네트워크는 <strong>기약 없는 지연</strong>이 있고, 서버 구현은 대부분 어떤 최대 시간 내에 요청을 처리한다고 보장할 수 없다.</p>\n<h2 id=\"네트워크-혼잡과-큐-대기\">네트워크 혼잡과 큐 대기</h2>\n<p>컴퓨터 네트워크에서 패킷 지연의 변동성은 <strong>큐 대기</strong> 때문인 경우가 많다.</p>\n<ul>\n<li>여러 다른 노드가 동시에 같은 목적지로 패킷을 보내려고 하면 네트워크 스위치는 패킷을 큐에 넣고 한 번에 하나씩 목적지 네트워크 링크로 넘겨야한다. 들어오는 데이터가 많아서 스위치 큐를 꽉 채울 정도가 되면 패킷이 유실되어 재전송해야 한다.</li>\n<li>CPU가 바쁘면 애플리케이션에서 처리할 준비가 될 때까지 운영체제가 큐에 넣어 둔다.</li>\n<li>가상 환경에서 실행되는 운영체제는 다른 가상 장비가 CPU 코어를 점유하기에 네트워크 지연의 변동성이 크다.</li>\n<li><a href=\"https://steady-coding.tistory.com/507\">TCP는 흐름제어</a>를 수행한다. 데이터가 네트워크로 들어가기 전에도 부가적인 대기를 하게될 수 있다.</li>\n</ul>\n<p>공개 클라우드와 멀티 테넌트 데이터센터에서는 여러 소비자가 자원을 공유한다. 공유된 자원을 다른 사용자가 사용하는 것을 제어하거나 간파할 수 없으므로 자원을 많이 사용하는 누군가(<strong>시끄러운 이웃</strong>)가 가까이 있다면 네트워크 지연 변동이 클 수 있다.</p>\n<p>이런 환경에서는 <strong>실험적으로 타임아웃을 선택</strong>하는 수밖에 없다. 하나의 방법으로 고정된 타임아웃을 설정하는 대신 시스템이 지속적으로 응답 시간과 그들의 변동성을 측정하고 관잘된 응답 시간 분포에 따라 <strong>타임아웃을 자동으로 조절</strong>하게 할 수 있다(<a href=\"https://doc.akka.io/docs/akka/current/typed/failure-detector.html\">Phi Accrual failure detector</a>).</p>\n<h2 id=\"동기-네트워크-vs-비동기-네트워크\">동기 네트워크 vs 비동기 네트워크</h2>\n<p>왜 하드웨어 수준에서 패킷 전송 지연 시간의 최대치가 고정돼 있고 패킷을 유실하지 않는 신뢰성 있는 네트워크를 만들지 못할까?</p>\n<p><strong>고정 회선 전화 네트워크</strong>는 동기식인데, 통화를 하게되면 회선이 만들어진다. 통화를 하는 두 명 사이에 있는 전체 경로를 따라서 그 통화에 대해 <strong>고정되고 보장된 양의 대역폭이 할당</strong>된다. 회선은 통화가 끝날 때까지 유지된다.</p>\n<p>이럴 경우, 데이터가 여러 라우터를 거치더라도 큐 대기 문제를 겪지 않는다. 큐 대기가 없으므로 네트워크 종단 지연 시간의 최대치가 고정되어 있다. 이를 <strong>제한 있는 지연</strong>이라고 한다.</p>\n<p>전화 네트워크의 회선은 TCP 연결과 매우 다르다. <strong>TCP 연결</strong>의 패킷은 고정된 양의 예약된 대역폭인 전화 네트워크와 다르게 <strong>네트워크 대역폭을 기회주의적으로 사용</strong>한다. 인터넷이 만약 전화 네트워크처럼 회선 교환 네트워크라면 회선이 구성됐을 때 왕복 시간의 최대치를 보장할 수 있다. 하지만 이더넷과 IP는 큐 대기의 영향을 받는 패킷 교환 프로토콜이고 따라서 네트워크에 기약 없는 지연이 있다. 이들 프로토콜에는 회선의 개념이 없다.</p>\n<p>그럼에도 <strong>패킷 교환</strong>을 하는 이유는 <strong>순간적으로 몰리는 트래픽에 최적화</strong>됐기 때문이다. 회선은 통화를 하는 동안 보내는 초당 비트 개수가 상당히 고정돼 있는 음성과 영상 통화에 적합하다. 반면 웹 페이지 요청, 이메일 전송, 파일 전송은 특별한 대역폭 요구사항이 없다. 단지 가능하면 빨리 완료되기를 바랄 뿐이다.</p>\n<h2 id=\"지연-시간과-자원-사용률\">지연 시간과 자원 사용률</h2>\n<p>일반적으로 지연의 변동이 심한 것은 동적 자원 분할의 결과로 생각할 수 있다.</p>\n<blockquote>\n<p>정적 자원 분할 ➡︎ 고정된 대역폭을 정적 방식으로 분배\n동적 자원 분할 ➡︎ 최대 대역폭이 있고 여기에 패킷을 쏟아 부음</p>\n</blockquote>\n<p>자원을 정적으로 자원을 분할하면 지연 시간 보장이 가능하나, 그만큼 사용률이 줄어들어 비용이 커진다. 동적으로 자원을 분할하면 사용률으 늘어나 비용이 싸지지만 지연의 변동이 커진다.</p>\n<p><strong>네트워크에서 변동이 큰 지연은 자연 법칙이 아니라 단지 비용/이득 트레이드오프의 결과일 뿐이다.</strong></p>\n<h2 id=\"결론적으로\">결론적으로</h2>\n<p>현재 배포된 기술로는 네트워크의 지연과 신뢰성에 대해 어떤 보장도 할 수 없다. 네트워크 혼잡, 큐 대기, 기약 없는 지연이 발생할 것이라고 가정해야 한다. <strong>타임아웃에 올바른 값은 없으며 실험을 통해 결정해야 한다.</strong></p>\n<h1 id=\"reference\">Reference</h1>\n<p>데이터 중심 애플리케이션 설계 8장 분산 시스템의 골칫거리</p>\n",
        "contentSnippet": "여기서 다루는 분산 시스템은 비공유 시스템으로 네트워크로 연결된 다수의 장비다. 네트워크는 이 장비들이 통신하는 유일한 수단이다. 각 장비는 자신만의 메모리와 디스크를 갖고 있으며 다른 장비의 메모리나 디스크에 접근할 수 없다고 가정한다.\n비공유가 시스템을 구축하는 유일한 방법은 아니지만 몇 가지 이유로 인터넷 서비스를 구축하는 주된 방법이 됐다.\n특별한 하드웨어가 필요하지 않아서 상대적으로 저렴하다.\n상품화된 클라우드 서비스를 활용할 수 있다.\n지리적으로 분산된 여러 데이터센터에 중복 배치함으로써 높은 신뢰성을 확보할 수 있다.\n인터넷과 데이터센터 내부 네트워크 대부분은 비동기 패킷 네트워크이다. 노드는 다른 노드로 메시지를 보낼 수 있지만 네트워크는 메시지가 언제 도착할지 혹은 도착하기는 할 것인지 보장하지 않는다. 요청을 보내고 응답을 기다릴 때 여러 가지가 잘못될 수 있다.\n요청 손실 (네트워크 선 뽑기)\n요청 지연\n원격 노드 장애 (전원 다운)\n원격 노드가 일시적으로 응답을 멈춤 (GC)\n응답 손실\n응답 지연\n이런 문제를 다루는 흔한 방법은 타임아웃이다.\n현재 TPM Agent, Collector, Tibero Master 등 네트워크 연결에 타임아웃 로직이 들어가 있다. 대표적으로\nTPM Agent가 Collector로 연결 요청했을 때\nTibero Master가 Tibero와 첫 세션 연결을 맺을 때\n번외. 네트워크 연결은 아니나 TPM Agent pipe read에도 타임아웃 로직이 있다.\n현실의 네트워크 결함\n수십년 동안 컴퓨터 네트워크를 구축해 왔으나 아직 신뢰성 있는 네트워크를 만드는 방법을 알아내지는 못했다.\n네트워크 결함이 드물더라도 결함이 일어날 수 있다는 사실은 우리가 만드는 소프트웨어가 이를 처리할 수 있어야한다는 뜻이다. 네트워크 상으로 통신할 때마다 실패할 가능성이 있다. 네트워크 결함의 오류 처리가 정의되고 테스트되지 않는다면 나쁜 일이 제멋대로 생긴다. 예를 들어 클러스터가 교착 상태에 빠져 네트워크가 복구되더라도 영구적으로 요청을 처리할 수 없게 될 수 있으며, 심지어 모든 데이터를 지워버릴 수도 있다.\n반드시 네트워크 결함을 견뎌내도록(tolerating) 처리할 필요는 없다. 그러나 소프트웨어가 네트워크 문제에 어떻게 반응하는지 알고 시스템이 그로부터 복구할 수 있도록 보장해야 한다. 고의로 네트워크 문제를 유발하고 시스템의 반응을 테스트하는 것은 일리가 있다.(카오스 몽키)\n결함 감지\n많은 시스템은 결함이 있는 노드를 자동으로 감지할 수 있어야 한다.\n예를 들어,\n로드 밸런서는 죽은 노드로 요청을 그만 보내야 한다.\n단일 리더 복제를 사용하는 분산 데이터베이스에서 리더에 장애가 나면 팔로워 중 하나가 리더로 승격돼야 한다.\n네트워크에 관한 불확실성 때문에 노드가 동작 중인지 아닌지 구별하기 어렵다. 어떤 특정한 환경에서는 뭔가 동작하지 않는다고 명시적으로 알려주는 피드백을 받을 수 있다.\n노드가 실행중인 장비에 연결할 수 있지만 목적지 포트에서 수신 대기하는 프로세스가 없다면 운영체제가 친절하게 RST나 FIN 패킷을 응답으로 보내서 TCP 연결을 닫거나 거부한다. 그러나 노드가 요청을 처리하다 죽었다면 원격 노드에서 데이터가 실제로 얼마나 처리됐는지 알 방법이 없다. 추가로 FIN응답 패칫 자체가 방화벽 등으로 인하여 아예 오지 않을 경우도 있다.\n노드 프로세스는 죽었지만, 노드 운영체제는 실행 중이라면 스크립트로 다른 노드에게 프로세스가 죽었다고 알려 타임아웃이 만료되기를 기다리지 않도록 할 수 있다.\n스위치 자체에 대한 접근을 할 수 있다면, 네트워크 스위치의 관리 인터페이스에 접근하여 질의를 보내 하드웨어 수준의 링크 장애를 감지할 수 있다.\nIP 주소에 도달할 수 없다고 라우터가 확신하면 ICMP Destination Unreachable 패킷으로 응답할 수도 있다.\n뭔가 잘못되면 운 좋게 오류 응답을 받을 수도 있지만 일반적으로 아무 응답도 받지 못할 것이라 가정해야 한다. 몇 번 재시도를 해 보고 TCP 재시도만 믿지 말고 애플리케이션 수준에서 재시도하고 타임아웃이 만료되기를 기다렸다가 타임아웃 내에 응답을 받지 못하면 마침내 노드가 죽었다고 선언할 수 있다.\n타임아웃과 기약 없는 지연\n타임아웃만이 결함을 감지할 확실한 수단이라면 적정한 타임아웃 시간은 무엇일까? 간단한 답은 없다. 타임아웃이 길면 노드가 죽었다고 선언될 때까지 기다리는 시간이 길어지고, 성급하게 노드가 죽었다고 판단하면 일시적으로 느려진 상황일 뿐인데도 죽었다고 잘못 선언할 의험이 높아진다.\n패킷의 최대 지연 시간이 보장된 네트워크를 사용하는 가상의 시스템이 있다 가정하자. 모든 패킷은 d 시간 내에 전송되거나 손실되지만 전송 시간이 결코 d 보다 오래 걸리지 않는다. 또 장애가 나지 않는 노드는 항상 요청을 r 시간 이내에 처리한다고 할 때, 성공한 요청은 모두 2d + r 시간 내에 응답을 받는 다고 보장할 수 있다. 따라서 이럴 경우에는 2d + r 을 타임아웃으로 사용하는게 합리적이다. 그러나 우리가 사용하는 시스템은 대부분 이 중 어떤 것도 보장하지 않는다. 비동기 네트워크는 기약 없는 지연이 있고, 서버 구현은 대부분 어떤 최대 시간 내에 요청을 처리한다고 보장할 수 없다.\n네트워크 혼잡과 큐 대기\n컴퓨터 네트워크에서 패킷 지연의 변동성은 큐 대기 때문인 경우가 많다.\n여러 다른 노드가 동시에 같은 목적지로 패킷을 보내려고 하면 네트워크 스위치는 패킷을 큐에 넣고 한 번에 하나씩 목적지 네트워크 링크로 넘겨야한다. 들어오는 데이터가 많아서 스위치 큐를 꽉 채울 정도가 되면 패킷이 유실되어 재전송해야 한다.\nCPU가 바쁘면 애플리케이션에서 처리할 준비가 될 때까지 운영체제가 큐에 넣어 둔다.\n가상 환경에서 실행되는 운영체제는 다른 가상 장비가 CPU 코어를 점유하기에 네트워크 지연의 변동성이 크다.\nTCP는 흐름제어를 수행한다. 데이터가 네트워크로 들어가기 전에도 부가적인 대기를 하게될 수 있다.\n공개 클라우드와 멀티 테넌트 데이터센터에서는 여러 소비자가 자원을 공유한다. 공유된 자원을 다른 사용자가 사용하는 것을 제어하거나 간파할 수 없으므로 자원을 많이 사용하는 누군가(시끄러운 이웃)가 가까이 있다면 네트워크 지연 변동이 클 수 있다.\n이런 환경에서는 실험적으로 타임아웃을 선택하는 수밖에 없다. 하나의 방법으로 고정된 타임아웃을 설정하는 대신 시스템이 지속적으로 응답 시간과 그들의 변동성을 측정하고 관잘된 응답 시간 분포에 따라 타임아웃을 자동으로 조절하게 할 수 있다(Phi Accrual failure detector).\n동기 네트워크 vs 비동기 네트워크\n왜 하드웨어 수준에서 패킷 전송 지연 시간의 최대치가 고정돼 있고 패킷을 유실하지 않는 신뢰성 있는 네트워크를 만들지 못할까?\n고정 회선 전화 네트워크는 동기식인데, 통화를 하게되면 회선이 만들어진다. 통화를 하는 두 명 사이에 있는 전체 경로를 따라서 그 통화에 대해 고정되고 보장된 양의 대역폭이 할당된다. 회선은 통화가 끝날 때까지 유지된다.\n이럴 경우, 데이터가 여러 라우터를 거치더라도 큐 대기 문제를 겪지 않는다. 큐 대기가 없으므로 네트워크 종단 지연 시간의 최대치가 고정되어 있다. 이를 제한 있는 지연이라고 한다.\n전화 네트워크의 회선은 TCP 연결과 매우 다르다. TCP 연결의 패킷은 고정된 양의 예약된 대역폭인 전화 네트워크와 다르게 네트워크 대역폭을 기회주의적으로 사용한다. 인터넷이 만약 전화 네트워크처럼 회선 교환 네트워크라면 회선이 구성됐을 때 왕복 시간의 최대치를 보장할 수 있다. 하지만 이더넷과 IP는 큐 대기의 영향을 받는 패킷 교환 프로토콜이고 따라서 네트워크에 기약 없는 지연이 있다. 이들 프로토콜에는 회선의 개념이 없다.\n그럼에도 패킷 교환을 하는 이유는 순간적으로 몰리는 트래픽에 최적화됐기 때문이다. 회선은 통화를 하는 동안 보내는 초당 비트 개수가 상당히 고정돼 있는 음성과 영상 통화에 적합하다. 반면 웹 페이지 요청, 이메일 전송, 파일 전송은 특별한 대역폭 요구사항이 없다. 단지 가능하면 빨리 완료되기를 바랄 뿐이다.\n지연 시간과 자원 사용률\n일반적으로 지연의 변동이 심한 것은 동적 자원 분할의 결과로 생각할 수 있다.\n정적 자원 분할 ➡︎ 고정된 대역폭을 정적 방식으로 분배\n동적 자원 분할 ➡︎ 최대 대역폭이 있고 여기에 패킷을 쏟아 부음\n자원을 정적으로 자원을 분할하면 지연 시간 보장이 가능하나, 그만큼 사용률이 줄어들어 비용이 커진다. 동적으로 자원을 분할하면 사용률으 늘어나 비용이 싸지지만 지연의 변동이 커진다.\n네트워크에서 변동이 큰 지연은 자연 법칙이 아니라 단지 비용/이득 트레이드오프의 결과일 뿐이다.\n결론적으로\n현재 배포된 기술로는 네트워크의 지연과 신뢰성에 대해 어떤 보장도 할 수 없다. 네트워크 혼잡, 큐 대기, 기약 없는 지연이 발생할 것이라고 가정해야 한다. 타임아웃에 올바른 값은 없으며 실험을 통해 결정해야 한다.\nReference\n데이터 중심 애플리케이션 설계 8장 분산 시스템의 골칫거리",
        "guid": "https://velog.io/@ahngj96/%EC%8B%A0%EB%A2%B0%EC%84%B1-%EC%97%86%EB%8A%94-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC",
        "isoDate": "2024-07-02T18:04:41.000Z"
      },
      {
        "title": "결함과 부분 장애",
        "link": "https://velog.io/@ahngj96/%EA%B2%B0%ED%95%A8%EA%B3%BC-%EB%B6%80%EB%B6%84-%EC%9E%A5%EC%95%A0",
        "pubDate": "Sun, 30 Jun 2024 09:36:41 GMT",
        "content": "<p>단일 컴퓨터에서 실행되는 소프트웨어를 믿지 못할 근본적인 이유는 없다. 하드웨어가 올바르게 동작하면 같은 연산은 항상 같은 결과를 낸다(<strong>결정적이다</strong>).</p>\n<p>네트워크로 연결된 여러 컴퓨터에서 실행되는 소프트웨어를 작성할 때는 근본적으로 상황이 다르다. 분산 시스템에서는 더 이상 이상화된 시스템 모델에서 동작하지 않는다. 물리적 세계의 지저분한 현실(스위치 장애, 랙에서 주기적으로 일어나는 전원 사고, 데이터 센터 건물에 돌진하는 픽업 트럭 등)을 마주하게 된다.</p>\n<p>분산 시스템에서는 시스템의 어떤 부분은 잘 동작하지만 다른 부분은 예측할 수 없는 방식으로 고장 나는 것도 무리가 아니다. 이를 <strong>부분 장애</strong>라고 한다. 부분 장애는 <strong>비결정적</strong>이라서 어렵다.</p>\n<h1 id=\"클라우드-컴퓨팅과-슈퍼컴퓨팅\">클라우드 컴퓨팅과 슈퍼컴퓨팅</h1>\n<p>대규모 컴퓨팅 시스템 구축 방법에 관한 몇 가지 철학이 있다</p>\n<ul>\n<li>대규모 컴퓨팅의 한쪽 끝에는 고성능 컴퓨팅(high-performance computing, HPC) 분야가 있다. 수천 개의 CPU를 가진 슈퍼컴퓨터는 보통 일기예보나 원자와 분자의 움직임을 시뮬레이션하는 분자 동력학처럼 계산 비용이 매우 높은 과학 계산 작업에 쓰인다</li>\n<li>다른 극단에는 클라우드 컴퓨팅이 있다. 명확히 정의되지는 않지만 <a href=\"https://www.redhat.com/ko/topics/cloud-computing/what-is-multitenancy\">멀티 테넌트</a>(<a href=\"https://www.ibm.com/kr-ko/topics/multi-tenant\">참고</a>) 데이터센터, IP 네트워크로 연결된 상용 컴퓨터, 신축적/주문식 자원 할당, 계량 결제와 흔히 관려돼 있다.</li>\n<li>전통적인 기업형 데이터센터는 이 두 극단의 중간 지점에 있다.</li>\n</ul>\n<p>이런 철학에 따라 결함 처리 방법도 매우 다르다.</p>\n<p>슈퍼컴퓨터는 시스템의 어느 부분에 장애가 발생하면 단일 장비에서의 커널 패닉처럼 그냥 전체가 죽게 한다.</p>\n<p>인터넷 서비스를 구현하는 시스템은 보통 슈퍼컴퓨너와 매우 다르다.</p>\n<ul>\n<li>여러 인터넷 관련 애플리케이션은 언제라도 사용자에게 <strong>지연 시간이 낮은 서비스</strong>를 제공해야 한다. 반면 슈퍼컴퓨터는 오프라인 작업으로 멈췄다 재시작해도 인터넷 애플리케이션보다 충격이 덜하다.</li>\n<li>슈퍼컴퓨터는 전형적으로 특화된 하드웨어를 사용한다. 반면 <strong>클라우드 서비스</strong>의 노드는 <strong>상용 장비</strong>를 사용한다.</li>\n<li>거대한 데이터센터의 네트워크는 <a href=\"https://howdoesinternetwork.com/2019/clos-topology\">클로스 토폴로지</a>로 연결돼 있다. 슈퍼컴퓨터는 통신 패턴이 정해진 작업부하에서 높은 성능을 보여주는 <a href=\"https://en.wikipedia.org/wiki/Hypercube_internetwork_topology\">다차원 매시</a>나 <a href=\"https://en.wikipedia.org/wiki/Torus_interconnect\">토러스</a> 같은 특화된 네트워크 토폴로지를 자주 사용한다.</li>\n<li>클라우드 환경에서 <strong>가상 장비 하나의 성능이 좋지 않으면 그냥 그것을 죽이고 새 가상 장비를 요청</strong>할 수 있다.</li>\n<li>지리적으로 분산된 배포를 할 때 통신은 대부분 인터넷을 거치기 쉬운데 로컬 네트워크에 비해 느리고 신뢰성도 떨어진다. 슈퍼컴퓨터는 일반적으로 모든 노드가 가까운 곳에 함께 있다고 가정한다.</li>\n</ul>\n<blockquote>\n<p>분산 시스템이 동작하게 만들려면 부분 장애 가능성을 받아들이고 소프트웨어에 내결함성 메커니즘을 넣어야 한다.\n결함 처리는 소프트웨어 설계의 일부여야 하며 결함이 발생하면 소프트웨어가 어떻게 동작할지 알아야 한다.</p>\n</blockquote>\n<h2 id=\"reference\">Reference</h2>\n<p>데이터 중심 애플리케이션 설계 8장 분산 시스템의 골칫거리</p>\n",
        "contentSnippet": "단일 컴퓨터에서 실행되는 소프트웨어를 믿지 못할 근본적인 이유는 없다. 하드웨어가 올바르게 동작하면 같은 연산은 항상 같은 결과를 낸다(결정적이다).\n네트워크로 연결된 여러 컴퓨터에서 실행되는 소프트웨어를 작성할 때는 근본적으로 상황이 다르다. 분산 시스템에서는 더 이상 이상화된 시스템 모델에서 동작하지 않는다. 물리적 세계의 지저분한 현실(스위치 장애, 랙에서 주기적으로 일어나는 전원 사고, 데이터 센터 건물에 돌진하는 픽업 트럭 등)을 마주하게 된다.\n분산 시스템에서는 시스템의 어떤 부분은 잘 동작하지만 다른 부분은 예측할 수 없는 방식으로 고장 나는 것도 무리가 아니다. 이를 부분 장애라고 한다. 부분 장애는 비결정적이라서 어렵다.\n클라우드 컴퓨팅과 슈퍼컴퓨팅\n대규모 컴퓨팅 시스템 구축 방법에 관한 몇 가지 철학이 있다\n대규모 컴퓨팅의 한쪽 끝에는 고성능 컴퓨팅(high-performance computing, HPC) 분야가 있다. 수천 개의 CPU를 가진 슈퍼컴퓨터는 보통 일기예보나 원자와 분자의 움직임을 시뮬레이션하는 분자 동력학처럼 계산 비용이 매우 높은 과학 계산 작업에 쓰인다\n다른 극단에는 클라우드 컴퓨팅이 있다. 명확히 정의되지는 않지만 멀티 테넌트(참고) 데이터센터, IP 네트워크로 연결된 상용 컴퓨터, 신축적/주문식 자원 할당, 계량 결제와 흔히 관려돼 있다.\n전통적인 기업형 데이터센터는 이 두 극단의 중간 지점에 있다.\n이런 철학에 따라 결함 처리 방법도 매우 다르다.\n슈퍼컴퓨터는 시스템의 어느 부분에 장애가 발생하면 단일 장비에서의 커널 패닉처럼 그냥 전체가 죽게 한다.\n인터넷 서비스를 구현하는 시스템은 보통 슈퍼컴퓨너와 매우 다르다.\n여러 인터넷 관련 애플리케이션은 언제라도 사용자에게 지연 시간이 낮은 서비스를 제공해야 한다. 반면 슈퍼컴퓨터는 오프라인 작업으로 멈췄다 재시작해도 인터넷 애플리케이션보다 충격이 덜하다.\n슈퍼컴퓨터는 전형적으로 특화된 하드웨어를 사용한다. 반면 클라우드 서비스의 노드는 상용 장비를 사용한다.\n거대한 데이터센터의 네트워크는 클로스 토폴로지로 연결돼 있다. 슈퍼컴퓨터는 통신 패턴이 정해진 작업부하에서 높은 성능을 보여주는 다차원 매시나 토러스 같은 특화된 네트워크 토폴로지를 자주 사용한다.\n클라우드 환경에서 가상 장비 하나의 성능이 좋지 않으면 그냥 그것을 죽이고 새 가상 장비를 요청할 수 있다.\n지리적으로 분산된 배포를 할 때 통신은 대부분 인터넷을 거치기 쉬운데 로컬 네트워크에 비해 느리고 신뢰성도 떨어진다. 슈퍼컴퓨터는 일반적으로 모든 노드가 가까운 곳에 함께 있다고 가정한다.\n분산 시스템이 동작하게 만들려면 부분 장애 가능성을 받아들이고 소프트웨어에 내결함성 메커니즘을 넣어야 한다.\n결함 처리는 소프트웨어 설계의 일부여야 하며 결함이 발생하면 소프트웨어가 어떻게 동작할지 알아야 한다.\nReference\n데이터 중심 애플리케이션 설계 8장 분산 시스템의 골칫거리",
        "guid": "https://velog.io/@ahngj96/%EA%B2%B0%ED%95%A8%EA%B3%BC-%EB%B6%80%EB%B6%84-%EC%9E%A5%EC%95%A0",
        "isoDate": "2024-06-30T09:36:41.000Z"
      }
    ]
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "다시 본질로",
        "link": "https://www.thestartupbible.com/2024/07/back-to-the-basics.html",
        "pubDate": "Wed, 03 Jul 2024 21:24:00 +0000",
        "content:encodedSnippet": "이 블로그 방문자 중 나이키 주주가 있을지 모르겠지만, 나는 2005년부터 나이키 주식을 소량으로 꾸준히 사고 있다. 주식을 사는 이유가 그 회사에 대한 확신이 있어서 결국 돈을 벌기 위해서지만, 한 편으로는 그냥 나이키라는 회사와 이 회사가 만드는 제품의 팬으로서 회사의 일부를 소유하고 싶은 팬심도 크게 작용하고 있다.\n지난주에 나이키가 분기 실적을 발표했는데, 월가의 예상보다 낮은 실적이기도 했지만, 이보다 장기적으로 훨씬 더 우려되는 내용들이 많아서, 주가가 하루 만에 20% 폭락했다. 찾아보니 2001년 이후로 최악의 단일 주가 폭락이었고, 하루에 한화로 30조 원이 넘는 시가총액이 증발해 버렸다.\n주가 폭락에는 여러 가지 이유가 있었는데, 장기적으로 봤을 때 가장 큰 위협은 나이키가 요새 혁신에 소극적이고, 이에 따라 좋은 제품을 못 만들고 있다는 점이다. 동시에 그동안 죽었다고 생각됐던 뉴밸런스와 아식스 같은 오래된 브랜드가 지속적인 혁신으로 러닝 시장에서 나이키를 앞지르고 있고, Alo, Hoka와 On과 같은 새로운 브랜드가 MZ 세대뿐만 아니라 X 세대의 취향까지 잘 파악해서 나이키의 시장 점유율을 야금야금 먹어 치우고 있다는 게 전문가들의 분석이다. 이 외에도 중국 시장에서의 고전, 오프라인 매장을 버리고 온라인으로만 판매 채널을 집중한 점 등이 나이키 실적 부진의 직, 간접적인 원인이라고 한다.\n나이키 주주로서는 참 안타까운 일이고, 이제 나이키도 서서히 맛이 가고 있는 것 같으니 다른 종목으로 갈아타는 사람들도 상당히 많은 것 같다. 하지만, 거의 20년 동안 나이키의 주식을 보유하면서 이 회사가 위기와 역경에 어떻게 반응하고 대응하는지를 간접적으로 봤던 일인으로서 내 즉각적인 반응은, “time to buy more”였다.\n기업은 생명체와 같이 유기적으로 성장과 하락을 반복한다. 수년 동안 매일 운동하고 건강했던 사람도 조금만 방심하면 몇 달 만에 체중이 수십 킬로 불면서 비만이 될 수 있듯이, 기업 또한 계속 잘하다가 조금만 방심하거나, 몇 가지 중요한 결정을 잘 못 하면 금방 위기가 올 수 있다. 이건 우리가 투자하는 스타트업이나, 나이키와 같은 글로벌 No.1 대기업이나 마찬가지다. 두 기업 간에 큰 차이가 있다면, 스타트업은 한 번 이렇게 하락하면 버틸 수 있는 체력과 자금이 없어서 망할 확률이 높고, 대기업은 다시 재정비해서 반등할 수 있는 기회가 몇 번 더 있다는 것이지만, 여기서 내가 말하고자 하는 건 기업의 실적은 계속 up and down의 연속이라는 점이다.\n나이키는 어떻게 이 위기를 극복할까? 60년의 비즈니스 역사에서 이런 위기가 올 때마다 취했던 전략을 이번에도 똑같이 구사하지 않을까 생각한다. 그건 바로 본질로 돌아가고, 다시 기본기를 탄탄하게 다지는 것이다. 혁신과 좋은 제품으로 창업된 회사인만큼, 다시 한번 시장을 wow 시킬 수 있는 혁신적이고, 질 좋은 제품을 만들 것이라고 굳게 믿고 있다. 누구나 다 사업하다 보면 옆길로 빠질 수 있고, 본질을 잊어버릴 때가 있지만, 중요한 건 그럴 때마다 다시 기본으로 돌아올 수 있다면, 다시 시작할 수 있다. 이건 나이키나 우리가 투자하는 스타트업이나 다 마찬가지다.\n내가 너무너무 좋아해서, 아예 종이로 출력해서 가방에 항상 소지하고 다니는, 나이키의 창업가 필 나이트가 1970년대에 직원들과 공유했던 메모 내용을 여기에 한 번 적어본다. 이런 철학, 정신, 원칙 위에 만들어진 회사는 꼭 리바운드할 것이라고 믿는다:\n1/ Our business is change.\n2/ We’re on offense. All the time.\n3/ Perfect results count, not a perfect process.\nBreak the rules: fight the law.\n4/ This is as much about battle as about business.\n5/ Assume nothing.\nMake sure people keep their promises.\nPush yourselves push other.\nStretch the possible.\n6/ Live off the land.\n7/ Your job isn’t done until the job is done.\n8/ Dangers\nBureaucracy\nPersonal ambition\nEnergy takers vs. energy givers\nKnowing our weaknesses\nDon’t get too many things on the platter\n9/ It won’t be pretty.\n10/ If we do the right things we’ll make money damn near automatic.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/07/back-to-the-basics.html#respond",
        "content": "이 블로그 방문자 중 나이키 주주가 있을지 모르겠지만, 나는 2005년부터 나이키 주식을 소량으로 꾸준히 사고 있다. 주식을 사는 이유가 그 회사에 대한 확신이 있어서 결국 돈을 벌기 위해서지만, 한 편으로는 그냥 나이키라는 회사와 이 회사가 만드는 제품의 팬으로서 회사의 일부를 소유하고 싶은 팬심도 크게 작용하고 있다. 지난주에 나이키가 분기 실적을 발표했는데, 월가의 예상보다 낮은 실적이기도(...)",
        "contentSnippet": "이 블로그 방문자 중 나이키 주주가 있을지 모르겠지만, 나는 2005년부터 나이키 주식을 소량으로 꾸준히 사고 있다. 주식을 사는 이유가 그 회사에 대한 확신이 있어서 결국 돈을 벌기 위해서지만, 한 편으로는 그냥 나이키라는 회사와 이 회사가 만드는 제품의 팬으로서 회사의 일부를 소유하고 싶은 팬심도 크게 작용하고 있다. 지난주에 나이키가 분기 실적을 발표했는데, 월가의 예상보다 낮은 실적이기도(...)",
        "guid": "https://www.thestartupbible.com/?p=9142",
        "categories": [
          "Uncategorized",
          "failure",
          "FoundersAtWork",
          "inspiring",
          "sports",
          "strategy"
        ],
        "isoDate": "2024-07-03T21:24:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "반짝 유행과 대세",
        "link": "https://www.thestartupbible.com/2024/07/hype-or-mainstream.html",
        "pubDate": "Sun, 30 Jun 2024 21:30:00 +0000",
        "content:encodedSnippet": "얼마 전에 ‘요즘 애들’이라는 책을 읽었다. 이 책의 부제는 “가장 학력은 높고, 가장 많이 일하지만, 가장 적게 버는 세대”인데, MZ 세대에 대한 책이고, 시중에 나온 수많은 비슷한 책과 같이 MZ 세대는 이렇다 저렇다는 표면적인 이야기보단, 작가는 왜 MZ 세대가 가장 공부는 많이 하고, 가장 열심히 일하지만, 가장 적게 버는지를 어느 정도까지 분석하고 과학적으로 설명하려고 시도한다. 솔직히 말해서 이 책의 내용에 나는 대부분 공감할 수 없었는데, 어쨌든 요즘 애들도 우리와 비슷하게 본인들만의 어려움이 있는 것 같다.\nMZ 세대의 대표적인 특징이 평균을 싫어하고, 자기만의 독특한 개성을 중시하고, 뭔가 항상 새로운 걸 시도하는 것 같다. 이런 이유로 남이 하면 따라 하고, 남이 좋아하면 나도 좋아하는 우리 세대한테 잘 어필되고 판매되던 상품과 브랜드가 더 이상 빛을 못 보고 있다. 새로운 세대에게 잘 마케팅하고 판매하기 위해서 기존 브랜드는 과거 수십 년 동안 잘 작동하던 전략을 버리고 있고, 신생 브랜드는 지금까지 없던 방식과 전략으로 새로운 실험을 계속하고 있다.\n며칠 전에 운동하면서 잠깐 TV를 봤는데, 성수동 팝업 매장에서 다른 산업군의 브랜드와 콜라보를 계속하는 의류 브랜드를 구입하기 위해서 사람들이 아주 길게 줄을 서고 있는 광경이 보였다. 나는 처음 들어보는 브랜드였는데, “브랜드 x 다른 브랜드” 식으로 신발부터 옷까지 다양한 패션 아이템을 소량으로 출시하는 전략을 구사하는 회사였고, 젊은 친구들이 매장 밖에 긴 줄을 형성하면서 이 가게 안에 들어가서 즐겁고 비싼 쇼핑을 하는 뉴스 내용이었다.\n기자가 매장 직원도 인터뷰하고, 젊은 커플 고객도 인터뷰했는데, 양쪽 다 하는 말이 비슷했다. MZ 세대는 기성세대와는 다르게 트렌드에 상당히 민감하기 때문에, 이들에게 주목받고, 이들의 지갑을 열기 위해서는 지금까지의 영업/마케팅 방법을 과감하게 버리고, 완전히 새로운 방식으로, 그리고 이 새로운 방식조차 지속적으로 변형하면서 이들을 공략해야 한다는 내용이었다.\n우리도 다양한 사업, 그리고 다양한 사람들을 만난다. 창업가들의 나이는 점점 더 어려지고 있어서 우리가 만나는 많은 창업가들이 MZ 세대인데, 이들이 트렌드에 민감하고, 새로운 걸 좋아하고, 나 같은 세대의 사람들과는 모든 걸 다르게 보는 건 나도 잘 알고 있다. 하지만, 그렇다고 모든 회사가 이들의 취향에 모든 전략을 맞출 필요는 전혀 없다고 생각한다. 오히려 그렇게 하면 수십 년 동안 잘하던 사업의 기반이 흔들릴 것이라고 생각한다.\n일단 트렌드에 민감하다는 말을 조금 더 깊게 해석해 보면, 너무 유행을 탄다는 의미가 될 수도 있다. 유행을 타는 고객들은 브랜드에 대한 충성도가 없기 때문에, 이들에게 지속적으로 사랑받고 아주 오랜 기간 동안 꾸준하게 돈을 쓰게 만드는 게 힘들다. 트렌드를 세팅하고 리딩하는 세대일 수도 있지만, 어떻게 보면 사업의 확장에는 도움이 안 되는 대규모 뜨내기 세대가 될 수도 있다. 그리고 이 글의 오프닝에서 썼듯이, MZ 세대는 전반적으로 돈이 별로 없다. 소셜미디어상에서는 파급력이 강할진 몰라도, 막상 구매력이 그렇게 어마어마하진 않다.\n어떤 분들은 2년 반짝 사업을 성장시키고 적당한 가격에 팔고 빠질 목적으로 창업하지만, 내가 아는 대부분의 창업가들은 지속 가능한 사업을 만들고 있고, 지속 가능한 사업은 최소 10년이 걸린다. 이렇게 장기적인 안목으로 사업을 할 때, 반짝 유행하다가 없어질 것들과 지속적으로 유행해서 대세가 될 것들을 잘 구분해야 한다.\n유행과 대세를 어떻게 구분할까? 구분할 수 있는 방법은 없다. 그냥 장기적인 방향을 정하고, 이쪽으로 꾸준히 가는 수밖에 없다. 중간 중간에 여러 가지 트렌드와 새로운 유행이 생길 것인데, 그때마다 아무 생각 없이 남들이 가는 쪽으로 방향을 틀지 말고, 진지하게 고민해 보고 일시적인 유행이 아닌, 장기적인 대세가 될 수 있는 트렌드를 잘 선택하길 바란다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/07/hype-or-mainstream.html#comments",
        "content": "얼마 전에 ‘요즘 애들’이라는 책을 읽었다. 이 책의 부제는 “가장 학력은 높고, 가장 많이 일하지만, 가장 적게 버는 세대”인데, MZ 세대에 대한 책이고, 시중에 나온 수많은 비슷한 책과 같이 MZ 세대는 이렇다 저렇다는 표면적인 이야기보단, 작가는 왜 MZ 세대가 가장 공부는 많이 하고, 가장 열심히 일하지만, 가장 적게 버는지를 어느 정도까지 분석하고 과학적으로 설명하려고 시도한다.(...)",
        "contentSnippet": "얼마 전에 ‘요즘 애들’이라는 책을 읽었다. 이 책의 부제는 “가장 학력은 높고, 가장 많이 일하지만, 가장 적게 버는 세대”인데, MZ 세대에 대한 책이고, 시중에 나온 수많은 비슷한 책과 같이 MZ 세대는 이렇다 저렇다는 표면적인 이야기보단, 작가는 왜 MZ 세대가 가장 공부는 많이 하고, 가장 열심히 일하지만, 가장 적게 버는지를 어느 정도까지 분석하고 과학적으로 설명하려고 시도한다.(...)",
        "guid": "https://www.thestartupbible.com/?p=9139",
        "categories": [
          "Uncategorized",
          "books",
          "FoundersAtWork",
          "strategy",
          "Strong",
          "스타트업 바이블 QA"
        ],
        "isoDate": "2024-06-30T21:30:00.000Z"
      }
    ]
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": []
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": [
      {
        "creator": "지마켓 기술블로그",
        "title": "쿠버네티스 오퍼레이터를 Java로 개발해보기",
        "link": "https://dev.gmarket.com/112",
        "pubDate": "Mon, 1 Jul 2024 00:00:00 +0900",
        "author": "지마켓 기술블로그",
        "comments": "https://dev.gmarket.com/112#entry112comment",
        "content": "<p data-ke-size=\"size16\">이전 포스트:<span>&nbsp;</span><a style=\"color: #000000;\" href=\"https://dev.gmarket.com/102\">쿠버네티스 오퍼레이터를 Golang으로 개발해보기</a></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">안녕하세요.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">Cloud Strategy팀 박규민입니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">지난번에 Golang으로 쿠버네티스 오퍼레이터를 간단하게 만들어 봤습니다. 하지만 국내에서는 아무래도 Golang보다는 Java의 수요가 압도적으로 많은데요. 이번 포스트로 Java로 오퍼레이터를 구현하는 과정을 보여드리겠습니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Java Operator SDK</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"logo-2.png\" data-origin-width=\"2361\" data-origin-height=\"475\"><span data-url=\"https://blog.kakaocdn.net/dn/7MgTk/btsIizyEI7x/DTAZ1JCOopIkxTktCrtwXk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/7MgTk/btsIizyEI7x/DTAZ1JCOopIkxTktCrtwXk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F7MgTk%2FbtsIizyEI7x%2FDTAZ1JCOopIkxTktCrtwXk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"logo-2.png\" data-origin-width=\"2361\" data-origin-height=\"475\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">Java Operator SDK는 Kubernetes Client Java API인<span>&nbsp;<a style=\"color: #000000;\" href=\"https://github.com/fabric8io/kubernetes-client\">fabric8io</a>를</span><span>&nbsp;</span>기반으로 작성되어 있습니다. 이는 세부적으로 쿠버네티스와 상호 작용하기 위한 Low Level 단에서의 코드 작성 걱정 없이 개발자에게 친숙한 Java API를 사용하여 오퍼레이터를 쉽게 작성할 수 있도록 설계되어 있습니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Architecture</h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"JavaOperatorSDKArch.png\" data-origin-width=\"1542\" data-origin-height=\"1456\"><span data-url=\"https://blog.kakaocdn.net/dn/bOuXMQ/btsIjLyocZ6/RXLIPTAB75ZtgPHVqr6eoK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bOuXMQ/btsIjLyocZ6/RXLIPTAB75ZtgPHVqr6eoK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbOuXMQ%2FbtsIjLyocZ6%2FRXLIPTAB75ZtgPHVqr6eoK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"JavaOperatorSDKArch.png\" data-origin-width=\"1542\" data-origin-height=\"1456\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><b>Operator</b>는<span>&nbsp;</span><b>Controller</b><span>&nbsp;</span>클래스의 집합이며,<span>&nbsp;</span><b>Controller</b><span>&nbsp;</span>클래스가 Kubernetes 단일 리소스를 조정(Reconciling)해주는 역할을 합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><b>EventSourceManager</b>가 Controller와 관련된 여러<span>&nbsp;</span><b>EventSource</b>들의 수명 주기를 관리해 줍니다. 여기에서의<span>&nbsp;</span><b>Event</b>는 리소스 조정을 유발하는 사건을 의미합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><b>EventSource</b>에서<span>&nbsp;</span><b>EventProcessor</b>에 전파되는<span>&nbsp;</span><b>Event</b>를 생성합니다. (Controller와 관련된 기본 리소스의 변경 사항을 감시할 때는<span>&nbsp;</span><b>ControllerResourceEventSource</b>를 통해<span>&nbsp;</span><b>Event</b>를 전파하여 관련 상태를 캐싱합니다)<span>&nbsp;</span><b>Event</b>를 받은<span>&nbsp;</span><b>EventProcessor</b>에서 리소스가 아직 처리되지 않은 경우, 적절한<span>&nbsp;</span><b>Reconciler</b><span>&nbsp;</span>메소드로 호출하여 전달해 주는<span>&nbsp;</span><b>ReconcilerDispatcher</b>를 호출하여 필요한 모든 정보를 차례대로 전달합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><b>Reconciler</b><span>&nbsp;</span>메소드가 끝났을 때<span>&nbsp;</span><b>EventProcessor</b>가 다시 호출되어 실행을 완료하고<span>&nbsp;</span><b>Controller</b>의 상태를 업데이트합니다. 그리고<span>&nbsp;</span><b>Reconciler</b><span>&nbsp;</span>메소드에서 반환한 결과에 따라서 필요한 경우,<span>&nbsp;</span><b>ReconcilerDispatcher</b>는 Kubernetes API 서버에 호출합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">마지막으로<span>&nbsp;</span><b>EventProcessor</b>는 요청 재시도를 해야 할지, 그리고 동일한 리소스에 대해 수신된 후속<span>&nbsp;</span><b>Event</b>가 없는지 확인합니다. 이 중 어느 것도 일어나지 않으면,<span>&nbsp;</span><b>Event</b><span>&nbsp;</span>처리가 완료됩니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">직접 구현해야 할 포인트는?</h3>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">개발자들에게는 다음과 같은 구성 요소들을 Java Class로 만들 필요가 있습니다.</p>\n<ul style=\"list-style-type: disc; color: #24292f; text-align: start;\" data-ke-list-type=\"disc\">\n<li><b>Primary Resource</b>: k8s 클러스터에 배포할 CRD</li>\n<li><b>Spec, Status</b>: CRD에 필요한 내부 구성 요소\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>Spec</b>: 사용자가 CR에 적용할 상태 정의</li>\n<li><b>Status</b>: CR의 현재 상태</li>\n</ul>\n</li>\n<li><b>Reconciler</b>: Primary Resource의 변경사항을 감지하고 조정</li>\n<li><b>KubernetesDependentResource</b>: CRD 배포의 결과로 클러스터에서 만들고 싶은 각 K8s 리소스(DeploymentConfig, Service, Ingress 등)</li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Project 생성</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">먼저 Spring Boot 기반으로 프로젝트를 생성합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">Intellij 기준으로 Spring Initializr Generators 메뉴를 통해 프로젝트를 생성합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"729\" data-origin-height=\"731\"><span data-url=\"https://blog.kakaocdn.net/dn/ei7rHX/btsIhcY0LLB/g1j6tVaY0qkPf4P9RVpQck/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/ei7rHX/btsIhcY0LLB/g1j6tVaY0qkPf4P9RVpQck/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fei7rHX%2FbtsIhcY0LLB%2Fg1j6tVaY0qkPf4P9RVpQck%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"729\" data-origin-height=\"731\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"734\" data-origin-height=\"735\"><span data-url=\"https://blog.kakaocdn.net/dn/bSep4Q/btsIhvqtKD4/xmNwjs1kS4nPFl4Mildcc1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bSep4Q/btsIhvqtKD4/xmNwjs1kS4nPFl4Mildcc1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbSep4Q%2FbtsIhvqtKD4%2FxmNwjs1kS4nPFl4Mildcc1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"734\" data-origin-height=\"735\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">build.gradle에서 다음과 같이 수정합니다.</p>\n<pre id=\"code_1719796610958\" class=\"routeros\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>plugins {\n  id 'java'\n  id 'org.springframework.boot' version '3.3.1'\n  id 'io.spring.dependency-management' version '1.1.5'\n}\n\ngroup = 'com.example'\nversion = '0.0.1-SNAPSHOT'\n\njava {\n  toolchain {\n    languageVersion = JavaLanguageVersion.of(21)\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  annotationProcessor 'io.fabric8:crd-generator-apt:6.13.0'\n\n  implementation 'org.springframework.boot:spring-boot-starter'\n  implementation 'io.javaoperatorsdk:operator-framework-spring-boot-starter:5.5.0'\n\n  testImplementation 'org.springframework.boot:spring-boot-starter-test'\n  testImplementation 'io.javaoperatorsdk:operator-framework-spring-boot-starter-test:5.5.0'\n  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n}\n\ntasks.named('test') {\n  useJUnitPlatform()\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Custom Resource 작성</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">customresources라는 package를 만든 다음, 하위에 Spec, Status, Primary Resource Class를 만듭니다.</p>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Spec Class</h3>\n<pre id=\"code_1719796610959\" class=\"arduino\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.customresources;\n\n// Lombok @Data로도 적용 가능\npublic class PetclinicSpec {\n  private String image;\n  private Integer size;\n\n  public String getImage() {\n    return image;\n  }\n\n  public void setImage(String image) {\n    this.image = image;\n  }\n\n  public Integer getSize() {\n    return size;\n  }\n\n  public void setSize(Integer size) {\n    this.size = size;\n  }\n\n  public Integer getPort() {\n    return port;\n  }\n\n  public void setPort(Integer port) {\n    this.port = port;\n  }\n\n  private Integer port;\n}</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Status Class</h3>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">ObservedGenerationAwareStatus 클래스를 확장합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">이는 k8s의 controller가 Petclinic CR에 대한 변경사항을 추적할 수 있도록 Petclinic 오브젝트가 매번 변경될 때마다 Petclinic CR 내에 observedGeneration status 값을 증가시킵니다.</p>\n<pre id=\"code_1719796610963\" class=\"scala\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.customresources;\n\nimport io.javaoperatorsdk.operator.api.ObservedGenerationAwareStatus;\n\npublic class PetclinicStatus extends ObservedGenerationAwareStatus {\n}</code></pre>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Primary Resource Class</h3>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">Petclinic CR을 Class로 생성합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">CustomResource 추상클래스를 확장할 때 PetclinicSpec과 PetclinicStatus 클래스를 참조합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719796610964\" class=\"scala\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.customresources;\n\nimport io.fabric8.kubernetes.api.model.Namespaced;\nimport io.fabric8.kubernetes.client.CustomResource;\nimport io.fabric8.kubernetes.model.annotation.Group;\nimport io.fabric8.kubernetes.model.annotation.Version;\n\n@Group(\"spring.my.domain\")\n@Version(\"v1\")\npublic class Petclinic extends CustomResource&lt;PetclinicSpec, PetclinicStatus&gt; implements Namespaced {\n\n  @Override\n  public String toString() {\n    return \"Petclinic{spec=\" + spec + \", status=\" + status + \"}\";\n  }\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Dependent Resources 작성</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">dependentresources라는 package를 생성한 다음, 하위에 KubernetesDependentResource 클래스들을 만듭니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">CRUDKubernetesDependentResource 추상클래스를 확장하여 CRD에 필요한 k8s 리소스들의 manifest를 class로 정의합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">@KubernetesDependent 어노테이션을 통해 Petclinic CR의 변화에 대응하여 해당 k8s 리소스의 수명 주기를 관리합니다.</p>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Deployment</h3>\n<pre id=\"code_1719796610966\" class=\"reasonml\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.*;\nimport io.fabric8.kubernetes.api.model.apps.Deployment;\nimport io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicDeploymentResource extends CRUDKubernetesDependentResource&lt;Deployment, Petclinic&gt; {\n\n  public PetclinicDeploymentResource() {\n    super(Deployment.class);\n  }\n\n  @Override\n  protected Deployment desired(Petclinic petclinic, Context&lt;Petclinic&gt; context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new DeploymentBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n          .endMetadata()\n        .editSpec()\n          .withSelector(new LabelSelectorBuilder()\n            .addToMatchLabels(\"app\", petclinicName)\n            .build())\n          .withReplicas(petclinic.getSpec().getSize())\n          .withTemplate(new PodTemplateSpecBuilder()\n            .editMetadata()\n            .addToLabels(\"app\", petclinicName)\n            .endMetadata()\n            .editSpec()\n            .withContainers(new ContainerBuilder()\n                .withName(petclinicName + \"-container\")\n                .withImage(petclinic.getSpec().getImage())\n                .addToPorts(new ContainerPortBuilder()\n                  .withContainerPort(petclinic.getSpec().getPort())\n                  .build())\n                .build())\n            .endSpec()\n            .build())\n        .endSpec()\n        .build();\n  }\n}</code></pre>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Service</h3>\n<pre id=\"code_1719796610968\" class=\"reasonml\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.*;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicServiceResource extends CRUDKubernetesDependentResource&lt;Service, Petclinic&gt; {\n\n  public PetclinicServiceResource() {\n    super(Service.class);\n  }\n\n  @Override\n  protected Service desired(Petclinic petclinic, Context&lt;Petclinic&gt; context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new ServiceBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n        .endMetadata()\n        .editSpec()\n          .withType(\"NodePort\")\n          .addToSelector(\"app\", petclinicName)\n          .addToPorts(new ServicePortBuilder().withName(\"http\").withPort(petclinic.getSpec().getPort()).withProtocol(\"TCP\").withTargetPort(new IntOrStringBuilder().withValue(petclinic.getSpec().getPort()).build()).build())\n        .endSpec()\n        .build();\n  }\n}</code></pre>\n<h3 style=\"text-align: justify;\" data-ke-size=\"size23\">Ingress</h3>\n<pre id=\"code_1719796610970\" class=\"reasonml\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.ObjectMeta;\nimport io.fabric8.kubernetes.api.model.networking.v1.*;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicIngressResource extends CRUDKubernetesDependentResource&lt;Ingress, Petclinic&gt; {\n\n  public PetclinicIngressResource() {\n    super(Ingress.class);\n  }\n\n  @Override\n  protected Ingress desired(Petclinic petclinic, Context&lt;Petclinic&gt; context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new IngressBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n        .endMetadata()\n        .editSpec()\n          .withIngressClassName(\"nginx\")\n          .withRules(new IngressRuleBuilder()\n            .withHttp(new HTTPIngressRuleValueBuilder()\n              .withPaths(new HTTPIngressPathBuilder()\n                .withPath(\"/\")\n                .withPathType(\"Prefix\")\n                .withBackend(new IngressBackendBuilder()\n                  .withService(new IngressServiceBackendBuilder()\n                    .withName(petclinicName)\n                    .withPort(new ServiceBackendPortBuilder()\n                      .withNumber(petclinic.getSpec().getPort())\n                      .build())\n                    .build())\n                  .build())\n                .build())\n              .build())\n            .build())\n        .endSpec()\n        .build();\n  }\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Reconciler 작성</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">Petclinic Primary Resource의 변경사항을 감지하고 조정을 해주는 Reconciler 클래스를 작성합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">@ControllerConfiguration 어노테이션을 붙여 dependents 속성을 통해 @KubernetesDependent 어노테이션을 붙인 KubernetesDependentResource 클래스를 @Dependent 어노테이션으로 여기에 연결합니다.</p>\n<pre id=\"code_1719796610972\" class=\"css\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicDeploymentResource;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicIngressResource;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicServiceResource;\nimport io.javaoperatorsdk.operator.api.reconciler.*;\nimport io.javaoperatorsdk.operator.api.reconciler.dependent.Dependent;\nimport org.springframework.stereotype.Component;\n\n@ControllerConfiguration(\n    dependents = {\n        @Dependent(type = PetclinicDeploymentResource.class),\n        @Dependent(type = PetclinicServiceResource.class),\n        @Dependent(type = PetclinicIngressResource.class)\n    })\npublic class PetclinicReconciler implements Reconciler&lt;Petclinic&gt;, ErrorStatusHandler&lt;Petclinic&gt;, Cleaner&lt;Petclinic&gt; {\n\n  @Override\n  public UpdateControl&lt;Petclinic&gt; reconcile(Petclinic petclinic, Context&lt;Petclinic&gt; context) {\n    return UpdateControl.updateResourceAndPatchStatus(petclinic);\n  }\n\n  @Override\n  public DeleteControl cleanup(Petclinic petclinic, Context&lt;Petclinic&gt; context) {\n    return DeleteControl.defaultDelete();\n  }\n\n  @Override\n  public ErrorStatusUpdateControl&lt;Petclinic&gt; updateErrorStatus(Petclinic petclinic, Context&lt;Petclinic&gt; context, Exception e) {\n    return ErrorStatusUpdateControl.patchStatus(petclinic);\n  }\n\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Config 작성</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">해당 Reconciler 클래스와 직접 구현한 PetclinicOperator를 각각 Bean으로 등록하도록 Config 클래스를 config package 하위에 만듭니다.</p>\n<pre id=\"code_1719796610975\" class=\"kotlin\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava.config;\n\nimport com.example.petclinicoperatorjava.PetclinicReconciler;\nimport io.javaoperatorsdk.operator.Operator;\nimport io.javaoperatorsdk.operator.api.reconciler.Reconciler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.List;\n\n@Configuration\npublic class PetclinicOperatorConfig {\n\n  @Bean\n  public PetclinicReconciler petclinicReconciler() {\n    return new PetclinicReconciler();\n  }\n\n  @Bean(initMethod = \"start\", destroyMethod = \"stop\")\n  public Operator operator(List&lt;Reconciler&lt;?&gt;&gt; controllers) {\n    Operator operator = new Operator();\n    controllers.forEach(operator::register);\n    return operator;\n  }\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">k8s 클러스터에 CRD 적용</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">io.fabric8:crd-generator-apt 라이브러리에 의해 프로젝트 컴파일을 진행할 시 자동으로 build 디렉토리 내부에서 classpath/META-INF/fabric8 디렉토리에 yml 형식으로 생성됩니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">이를<span>&nbsp;</span><a style=\"color: #000000;\" href=\"https://dev.gmarket.com/102\">지난 시간</a>에 구축한 kind 기반의 로컬 k8s 클러스터에 CRD로 등록합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719796610977\" class=\"stylus\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>$ kubectl apply -f ./build/classes/java/main/META-INF/fabric8/petclinics.spring.my.domain-v1.yml\ncustomresourcedefinition.apiextensions.k8s.io/petclinics.spring.my.domain created</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">로컬 테스트</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">PetclinicOperatorJavaApplication에서 main 클래스를 실행합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"728\" data-origin-height=\"215\"><span data-url=\"https://blog.kakaocdn.net/dn/FZqVj/btsIhTxCzvm/UPwNvF6vnDwoi4mVvyXXKK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/FZqVj/btsIhTxCzvm/UPwNvF6vnDwoi4mVvyXXKK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FFZqVj%2FbtsIhTxCzvm%2FUPwNvF6vnDwoi4mVvyXXKK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"728\" data-origin-height=\"215\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">kind cluster에 Petclinic manifest가 적용이 잘 되는지 확인합니다.</p>\n<pre id=\"code_1719796610978\" class=\"routeros\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>$ kubectl config set-context --current --namespace=petclinic\n\n$ kubectl apply -f - &lt;&lt;EOF\napiVersion: spring.my.domain/v1\nkind: Petclinic\nmetadata:\n  name: sample\nspec:\n  image: springio/petclinic\n  size: 1\n  port: 8080\nEOF\npetclinic.spring.my.domain/sample created\n\n$ kubectl get all\nNAME                          READY   STATUS    RESTARTS   AGE\npod/sample-594c8976df-5gmzr   1/1     Running   0          47s\n\nNAME             TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE\nservice/sample   NodePort   10.96.34.237   &lt;none&gt;        8080:32494/TCP   48s\n\nNAME                     READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/sample   1/1     1            1           48s\n\nNAME                                DESIRED   CURRENT   READY   AGE\nreplicaset.apps/sample-594c8976df   1         1         1       48s\n\n$ kubectl get ing\nNAME     CLASS   HOSTS   ADDRESS     PORTS   AGE\nsample   nginx   *       localhost   80      69s</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><a style=\"color: #000000;\" href=\"http://xn--localhost-ji89a/\">http://localhost로</a><span>&nbsp;</span>접속하여 Petclinic 메인 화면이 나오는지 확인합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"700\" data-origin-height=\"448\"><span data-url=\"https://blog.kakaocdn.net/dn/bFksUj/btsIiUvN2Mz/NyISI6WutrjNV6z85Q4fC0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bFksUj/btsIiUvN2Mz/NyISI6WutrjNV6z85Q4fC0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbFksUj%2FbtsIiUvN2Mz%2FNyISI6WutrjNV6z85Q4fC0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"700\" data-origin-height=\"448\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Integration Test</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">@EnableMockOperator 어노테이션을 통해 k8s 클러스터를 mocking 하여 직접 구현한 Operator의 CRD를 적용하여 전용 통합 테스트를 작성할 수 있습니다.</p>\n<pre id=\"code_1719796610978\" class=\"css\" style=\"background-color: #f8f8f8; color: #383a42; text-align: start;\" data-ke-language=\"bash\" data-ke-type=\"codeblock\"><code>package com.example.petclinicoperatorjava;\n\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport io.javaoperatorsdk.operator.springboot.starter.test.EnableMockOperator;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@SpringBootTest\n@EnableMockOperator(crdPaths = \"classpath:META-INF/fabric8/petclinics.spring.my.domain-v1.yml\")\npublic class PetclinicOperatorUnitTest {\n\n  @Autowired\n  KubernetesClient k8sClient;\n\n  @Test\n  void whenContextLoaded_thenCrdApplied() {\n    assertThat(\n        k8sClient\n            .apiextensions()\n            .v1()\n            .customResourceDefinitions()\n            .withName(\"petclinics.spring.my.domain\")\n            .get()\n    ).isNotNull();\n  }\n}</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">Operator 배포</h2>\n<p data-ke-size=\"size16\">먼저 gradle build task를 실행하여 jar 파일을 생성합니다.</p>\n<p><figure class=\"imageblock alignLeft\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"668\" data-origin-height=\"688\"><span data-url=\"https://blog.kakaocdn.net/dn/OzmIc/btsIjIDEie7/dNVwb0vm9fo2IGK3NHQjG1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/OzmIc/btsIjIDEie7/dNVwb0vm9fo2IGK3NHQjG1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FOzmIc%2FbtsIjIDEie7%2FdNVwb0vm9fo2IGK3NHQjG1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"200\" height=\"206\" data-origin-width=\"668\" data-origin-height=\"688\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">프로젝트 루트 프로젝트 밑에 k8s라는 디렉토리를 만들어 다음과 같이 Dockerfile(./k8s/Dockerfile)을 정의합니다.</p>\n<pre id=\"code_1719968440583\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"shell\"><code>FROM bellsoft/liberica-openjdk-alpine:21\n\nCOPY build/libs/*-0.0.1-SNAPSHOT.jar /opt/app/app.jar\n\nEXPOSE 80\n\nCMD [\"java\", \"-showversion\", \"-jar\", \"/opt/app/app.jar\"]</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">프로젝트 루트 디렉토리에서 docker build 명령어를 실행하여 petclinic java operator 이미지를 생성합니다.</p>\n<pre id=\"code_1719968440583\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"shell\"><code># 개인 docker public registry에 petclinic java operator를 push합니다.\n# 현재 로컬 kind cluster에서의 worker node는 linux/arm64 기반이어서 맞출 필요가 있음\n$ docker build -f ./k8s/Dockerfile -t ycatt/petclinic-operator-java:0.0.1 . --platform \"linux/arm64\"\n\n$ docker login\n\n$ docker push ycatt/petclinic-operator-java:0.0.1</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">kind 로컬 클러스터에 다음과 같은 매니페스트 파일을 배포합니다. (./k8s/petclinic-operator.yaml)</p>\n<pre style=\"background-color: #ffffff; color: #080808; text-align: start;\" data-ke-language=\"go\"><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: petclinic-operator\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: petclinic-operator\nspec:\n  selector:\n    matchLabels:\n      app: petclinic-operator\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: petclinic-operator\n    spec:\n      serviceAccountName: petclinic-operator\n      containers:\n        - name: petclinic-operator\n          image: ycatt/petclinic-operator-java:0.0.1\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 80\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: petclinic-operator-admin\nsubjects:\n  - kind: ServiceAccount\n    name: petclinic-operator\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: petclinic-operator\n  apiGroup: \"\"\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: petclinic-operator\nrules:\n  - apiGroups:\n      - \"\"\n      - \"extensions\"\n      - \"apps\"\n    resources:\n      - deployments\n      - services\n      - pods\n      - pods/exec\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"apiextensions.k8s.io\"\n    resources:\n      - customresourcedefinitions\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"spring.my.domain\"\n    resources:\n      - petclinics\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"networking.k8s.io\"\n    resources:\n      - ingresses\n    verbs:\n      - '*'</code></pre>\n<pre id=\"code_1719968440585\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"shell\"><code>$ kubectl apply -f ./k8s/petclinic-operator.yaml\nserviceaccount/petclinic-operator created\ndeployment.apps/petclinic-operator created\nclusterrolebinding.rbac.authorization.k8s.io/petclinic-operator-admin created\nclusterrole.rbac.authorization.k8s.io/petclinic-operator created\n\n$ kubectl get pod -n default\nNAME                                  READY   STATUS    RESTARTS   AGE\npetclinic-operator-6dc9f97b96-qg84p   1/1     Running   0          20m\n\n$ kubectl logs petclinic-operator-6dc9f97b96-qg84p -n default\nopenjdk version \"21.0.3\" 2024-04-16 LTS\nOpenJDK Runtime Environment (build 21.0.3+10-LTS)\nOpenJDK 64-Bit Server VM (build 21.0.3+10-LTS, mixed mode)\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\n :: Spring Boot ::                (v3.3.1)\n\n2024-07-02T06:57:28.720Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : Starting PetclinicOperatorJavaApplication v0.0.1-SNAPSHOT using Java 21.0.3 with PID 1 (/opt/app/app.jar started by root in /)\n2024-07-02T06:57:28.723Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : No active profile set, falling back to 1 default profile: \"default\"\n2024-07-02T06:57:29.603Z  WARN 1 --- [petclinic-operator-java] [           main] ault ConfigurationService implementation : Configuration for reconciler 'petclinicreconciler' was not found. Known reconcilers: None.\n2024-07-02T06:57:29.619Z  INFO 1 --- [petclinic-operator-java] [           main] ault ConfigurationService implementation : Created configuration for reconciler com.example.petclinicoperatorjava.PetclinicReconciler with name petclinicreconciler\n2024-07-02T06:57:29.657Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Registered reconciler: 'petclinicreconciler' for resource: 'class com.example.petclinicoperatorjava.customresources.Petclinic' for namespace(s): [all namespaces]\n2024-07-02T06:57:29.659Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Operator SDK 4.9.1 (commit: 135b239) built on Tue May 28 08:09:11 GMT 2024 starting...\n2024-07-02T06:57:29.666Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Client version: 6.12.1\n2024-07-02T06:57:29.667Z  INFO 1 --- [petclinic-operator-java] [linicreconciler] i.j.operator.processing.Controller       : Starting 'petclinicreconciler' controller for reconciler: com.example.petclinicoperatorjava.PetclinicReconciler, resource: com.example.petclinicoperatorjava.customresources.Petclinic\n2024-07-02T06:57:30.233Z  INFO 1 --- [petclinic-operator-java] [linicreconciler] i.j.operator.processing.Controller       : 'petclinicreconciler' controller started\n2024-07-02T06:57:30.360Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : Started PetclinicOperatorJavaApplication in 1.885 seconds (process running for 2.43)</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">IDE에서 실행한 Petclinic Operator Application을 Terminate한 뒤, 기존에 로컬에서 테스트했던 Petclinic CR을 삭제하고 재생성하여 정상적으로 메인 페이지 접속이 되는 지 확인합니다.</p>\n<pre id=\"code_1719968440585\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"shell\"><code>$ kubectl delete petclinic --all\npetclinic.spring.my.domain \"sample\" deleted\n\n$ kubectl apply -f - &lt;&lt;EOF\napiVersion: spring.my.domain/v1\nkind: Petclinic\nmetadata:\n  name: sample\n  namespace: petclinic\nspec:\n  image: springio/petclinic\n  size: 1\n  port: 8080\nEOF\npetclinic.spring.my.domain/sample created\n\n$ kubectl get all -n petclinic\nNAME                          READY   STATUS    RESTARTS   AGE\npod/sample-594c8976df-k4944   1/1     Running   0          8s\n\nNAME             TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\nservice/sample   NodePort   10.96.140.108   &lt;none&gt;        8080:30502/TCP   8s\n\nNAME                     READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/sample   1/1     1            1           8s\n\nNAME                                DESIRED   CURRENT   READY   AGE\nreplicaset.apps/sample-594c8976df   1         1         1       8s\n\n$ kubectl get ing -n petclinic\nNAME     CLASS   HOSTS   ADDRESS     PORTS   AGE\nsample   nginx   *       localhost   80      44s\n\n# curl로 확인\n$ curl http://localhost:80 -v -o /dev/null\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 127.0.0.1:80...\n* Connected to localhost (127.0.0.1) port 80 (#0)\n&gt; GET / HTTP/1.1\n&gt; Host: localhost\n&gt; User-Agent: curl/8.1.2\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200\n&lt; Date: Tue, 02 Jul 2024 07:31:39 GMT\n&lt; Content-Type: text/html;charset=UTF-8\n&lt; Transfer-Encoding: chunked\n&lt; Connection: keep-alive\n&lt; Content-Language: en-US\n&lt;\n{ [3168 bytes data]\n100  3161    0  3161    0     0  10577      0 --:--:-- --:--:-- --:--:-- 10788\n* Connection #0 to host localhost left intact</code></pre>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">마치면서...</h2>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">이번 포스트에서는 Java를 사용하여 Kubernetes Operator를 직접 구현해 보았습니다. Golang에 비해 구조가 비교적 간단하고 친숙하여 더 쉽게 접근할 수 있다는 느낌이 있는데요. 기존 Java/Spring Boot 기반 서비스와의 연계성, 개발자 커뮤니티의 폭넓은 지원까지 생각해 본다면 Kubernetes Operator를 개발할 때 Java라는 언어로도 꽤나 매력적인 선택이 될 수 있습니다. Java Operator SDK 활용에 작은 도움이 되었기를 바라면서 글을 마치겠습니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">감사합니다.</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"text-align: justify;\" data-ke-size=\"size26\">참조</h2>\n<ul style=\"list-style-type: disc; color: #24292f; text-align: start;\" data-ke-list-type=\"disc\">\n<li><a href=\"https://javaoperatorsdk.io/docs\">https://javaoperatorsdk.io/docs</a></li>\n<li><a href=\"https://github.com/operator-framework/java-operator-sdk/tree/main/sample-operators\">https://github.com/operator-framework/java-operator-sdk/tree/main/sample-operators</a></li>\n<li><a href=\"https://www.baeldung.com/java-kubernetes-operator-sdk\">https://www.baeldung.com/java-kubernetes-operator-sdk</a></li>\n<li><a href=\"https://techtalk.11stcorp.com/2022/pdf/TECH-TALK-2022_SESSION-02.pdf\">https://techtalk.11stcorp.com/2022/pdf/TECH-TALK-2022_SESSION-02.pdf</a></li>\n</ul>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "이전 포스트: 쿠버네티스 오퍼레이터를 Golang으로 개발해보기\n \n \n안녕하세요.\nCloud Strategy팀 박규민입니다.\n \n \n지난번에 Golang으로 쿠버네티스 오퍼레이터를 간단하게 만들어 봤습니다. 하지만 국내에서는 아무래도 Golang보다는 Java의 수요가 압도적으로 많은데요. 이번 포스트로 Java로 오퍼레이터를 구현하는 과정을 보여드리겠습니다.\n \n \nJava Operator SDK\n\n\nJava Operator SDK는 Kubernetes Client Java API인 fabric8io를 기반으로 작성되어 있습니다. 이는 세부적으로 쿠버네티스와 상호 작용하기 위한 Low Level 단에서의 코드 작성 걱정 없이 개발자에게 친숙한 Java API를 사용하여 오퍼레이터를 쉽게 작성할 수 있도록 설계되어 있습니다.\n \n \n \nArchitecture\n\n\nOperator는 Controller 클래스의 집합이며, Controller 클래스가 Kubernetes 단일 리소스를 조정(Reconciling)해주는 역할을 합니다.\nEventSourceManager가 Controller와 관련된 여러 EventSource들의 수명 주기를 관리해 줍니다. 여기에서의 Event는 리소스 조정을 유발하는 사건을 의미합니다.\n \nEventSource에서 EventProcessor에 전파되는 Event를 생성합니다. (Controller와 관련된 기본 리소스의 변경 사항을 감시할 때는 ControllerResourceEventSource를 통해 Event를 전파하여 관련 상태를 캐싱합니다) Event를 받은 EventProcessor에서 리소스가 아직 처리되지 않은 경우, 적절한 Reconciler 메소드로 호출하여 전달해 주는 ReconcilerDispatcher를 호출하여 필요한 모든 정보를 차례대로 전달합니다.\n \nReconciler 메소드가 끝났을 때 EventProcessor가 다시 호출되어 실행을 완료하고 Controller의 상태를 업데이트합니다. 그리고 Reconciler 메소드에서 반환한 결과에 따라서 필요한 경우, ReconcilerDispatcher는 Kubernetes API 서버에 호출합니다.\n마지막으로 EventProcessor는 요청 재시도를 해야 할지, 그리고 동일한 리소스에 대해 수신된 후속 Event가 없는지 확인합니다. 이 중 어느 것도 일어나지 않으면, Event 처리가 완료됩니다.\n \n \n직접 구현해야 할 포인트는?\n개발자들에게는 다음과 같은 구성 요소들을 Java Class로 만들 필요가 있습니다.\nPrimary Resource: k8s 클러스터에 배포할 CRD\nSpec, Status: CRD에 필요한 내부 구성 요소\n\nSpec: 사용자가 CR에 적용할 상태 정의\nStatus: CR의 현재 상태\nReconciler: Primary Resource의 변경사항을 감지하고 조정\nKubernetesDependentResource: CRD 배포의 결과로 클러스터에서 만들고 싶은 각 K8s 리소스(DeploymentConfig, Service, Ingress 등)\n \nProject 생성\n먼저 Spring Boot 기반으로 프로젝트를 생성합니다.\nIntellij 기준으로 Spring Initializr Generators 메뉴를 통해 프로젝트를 생성합니다.\n\n\n \n\n\n \n \n \nbuild.gradle에서 다음과 같이 수정합니다.\nplugins {\n  id 'java'\n  id 'org.springframework.boot' version '3.3.1'\n  id 'io.spring.dependency-management' version '1.1.5'\n}\n\ngroup = 'com.example'\nversion = '0.0.1-SNAPSHOT'\n\njava {\n  toolchain {\n    languageVersion = JavaLanguageVersion.of(21)\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  annotationProcessor 'io.fabric8:crd-generator-apt:6.13.0'\n\n  implementation 'org.springframework.boot:spring-boot-starter'\n  implementation 'io.javaoperatorsdk:operator-framework-spring-boot-starter:5.5.0'\n\n  testImplementation 'org.springframework.boot:spring-boot-starter-test'\n  testImplementation 'io.javaoperatorsdk:operator-framework-spring-boot-starter-test:5.5.0'\n  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'\n}\n\ntasks.named('test') {\n  useJUnitPlatform()\n}\n \n \n \nCustom Resource 작성\ncustomresources라는 package를 만든 다음, 하위에 Spec, Status, Primary Resource Class를 만듭니다.\nSpec Class\npackage com.example.petclinicoperatorjava.customresources;\n\n// Lombok @Data로도 적용 가능\npublic class PetclinicSpec {\n  private String image;\n  private Integer size;\n\n  public String getImage() {\n    return image;\n  }\n\n  public void setImage(String image) {\n    this.image = image;\n  }\n\n  public Integer getSize() {\n    return size;\n  }\n\n  public void setSize(Integer size) {\n    this.size = size;\n  }\n\n  public Integer getPort() {\n    return port;\n  }\n\n  public void setPort(Integer port) {\n    this.port = port;\n  }\n\n  private Integer port;\n}\n \nStatus Class\nObservedGenerationAwareStatus 클래스를 확장합니다.\n이는 k8s의 controller가 Petclinic CR에 대한 변경사항을 추적할 수 있도록 Petclinic 오브젝트가 매번 변경될 때마다 Petclinic CR 내에 observedGeneration status 값을 증가시킵니다.\npackage com.example.petclinicoperatorjava.customresources;\n\nimport io.javaoperatorsdk.operator.api.ObservedGenerationAwareStatus;\n\npublic class PetclinicStatus extends ObservedGenerationAwareStatus {\n}\nPrimary Resource Class\nPetclinic CR을 Class로 생성합니다.\nCustomResource 추상클래스를 확장할 때 PetclinicSpec과 PetclinicStatus 클래스를 참조합니다.\n \npackage com.example.petclinicoperatorjava.customresources;\n\nimport io.fabric8.kubernetes.api.model.Namespaced;\nimport io.fabric8.kubernetes.client.CustomResource;\nimport io.fabric8.kubernetes.model.annotation.Group;\nimport io.fabric8.kubernetes.model.annotation.Version;\n\n@Group(\"spring.my.domain\")\n@Version(\"v1\")\npublic class Petclinic extends CustomResource<PetclinicSpec, PetclinicStatus> implements Namespaced {\n\n  @Override\n  public String toString() {\n    return \"Petclinic{spec=\" + spec + \", status=\" + status + \"}\";\n  }\n}\n \n \n \nDependent Resources 작성\ndependentresources라는 package를 생성한 다음, 하위에 KubernetesDependentResource 클래스들을 만듭니다.\nCRUDKubernetesDependentResource 추상클래스를 확장하여 CRD에 필요한 k8s 리소스들의 manifest를 class로 정의합니다.\n@KubernetesDependent 어노테이션을 통해 Petclinic CR의 변화에 대응하여 해당 k8s 리소스의 수명 주기를 관리합니다.\nDeployment\npackage com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.*;\nimport io.fabric8.kubernetes.api.model.apps.Deployment;\nimport io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicDeploymentResource extends CRUDKubernetesDependentResource<Deployment, Petclinic> {\n\n  public PetclinicDeploymentResource() {\n    super(Deployment.class);\n  }\n\n  @Override\n  protected Deployment desired(Petclinic petclinic, Context<Petclinic> context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new DeploymentBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n          .endMetadata()\n        .editSpec()\n          .withSelector(new LabelSelectorBuilder()\n            .addToMatchLabels(\"app\", petclinicName)\n            .build())\n          .withReplicas(petclinic.getSpec().getSize())\n          .withTemplate(new PodTemplateSpecBuilder()\n            .editMetadata()\n            .addToLabels(\"app\", petclinicName)\n            .endMetadata()\n            .editSpec()\n            .withContainers(new ContainerBuilder()\n                .withName(petclinicName + \"-container\")\n                .withImage(petclinic.getSpec().getImage())\n                .addToPorts(new ContainerPortBuilder()\n                  .withContainerPort(petclinic.getSpec().getPort())\n                  .build())\n                .build())\n            .endSpec()\n            .build())\n        .endSpec()\n        .build();\n  }\n}\nService\npackage com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.*;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicServiceResource extends CRUDKubernetesDependentResource<Service, Petclinic> {\n\n  public PetclinicServiceResource() {\n    super(Service.class);\n  }\n\n  @Override\n  protected Service desired(Petclinic petclinic, Context<Petclinic> context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new ServiceBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n        .endMetadata()\n        .editSpec()\n          .withType(\"NodePort\")\n          .addToSelector(\"app\", petclinicName)\n          .addToPorts(new ServicePortBuilder().withName(\"http\").withPort(petclinic.getSpec().getPort()).withProtocol(\"TCP\").withTargetPort(new IntOrStringBuilder().withValue(petclinic.getSpec().getPort()).build()).build())\n        .endSpec()\n        .build();\n  }\n}\nIngress\npackage com.example.petclinicoperatorjava.dependentresources;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport io.fabric8.kubernetes.api.model.ObjectMeta;\nimport io.fabric8.kubernetes.api.model.networking.v1.*;\nimport io.javaoperatorsdk.operator.api.reconciler.Context;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.CRUDKubernetesDependentResource;\nimport io.javaoperatorsdk.operator.processing.dependent.kubernetes.KubernetesDependent;\n\n@KubernetesDependent\npublic class PetclinicIngressResource extends CRUDKubernetesDependentResource<Ingress, Petclinic> {\n\n  public PetclinicIngressResource() {\n    super(Ingress.class);\n  }\n\n  @Override\n  protected Ingress desired(Petclinic petclinic, Context<Petclinic> context) {\n    final ObjectMeta petclinicMetadata = petclinic.getMetadata();\n    final String petclinicName = petclinicMetadata.getName();\n\n    return new IngressBuilder()\n        .editMetadata()\n          .withName(petclinicName)\n          .withNamespace(petclinicMetadata.getNamespace())\n          .addToLabels(\"app\", petclinicName)\n        .endMetadata()\n        .editSpec()\n          .withIngressClassName(\"nginx\")\n          .withRules(new IngressRuleBuilder()\n            .withHttp(new HTTPIngressRuleValueBuilder()\n              .withPaths(new HTTPIngressPathBuilder()\n                .withPath(\"/\")\n                .withPathType(\"Prefix\")\n                .withBackend(new IngressBackendBuilder()\n                  .withService(new IngressServiceBackendBuilder()\n                    .withName(petclinicName)\n                    .withPort(new ServiceBackendPortBuilder()\n                      .withNumber(petclinic.getSpec().getPort())\n                      .build())\n                    .build())\n                  .build())\n                .build())\n              .build())\n            .build())\n        .endSpec()\n        .build();\n  }\n}\n \n \n \nReconciler 작성\nPetclinic Primary Resource의 변경사항을 감지하고 조정을 해주는 Reconciler 클래스를 작성합니다.\n@ControllerConfiguration 어노테이션을 붙여 dependents 속성을 통해 @KubernetesDependent 어노테이션을 붙인 KubernetesDependentResource 클래스를 @Dependent 어노테이션으로 여기에 연결합니다.\npackage com.example.petclinicoperatorjava;\n\nimport com.example.petclinicoperatorjava.customresources.Petclinic;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicDeploymentResource;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicIngressResource;\nimport com.example.petclinicoperatorjava.dependentresources.PetclinicServiceResource;\nimport io.javaoperatorsdk.operator.api.reconciler.*;\nimport io.javaoperatorsdk.operator.api.reconciler.dependent.Dependent;\nimport org.springframework.stereotype.Component;\n\n@ControllerConfiguration(\n    dependents = {\n        @Dependent(type = PetclinicDeploymentResource.class),\n        @Dependent(type = PetclinicServiceResource.class),\n        @Dependent(type = PetclinicIngressResource.class)\n    })\npublic class PetclinicReconciler implements Reconciler<Petclinic>, ErrorStatusHandler<Petclinic>, Cleaner<Petclinic> {\n\n  @Override\n  public UpdateControl<Petclinic> reconcile(Petclinic petclinic, Context<Petclinic> context) {\n    return UpdateControl.updateResourceAndPatchStatus(petclinic);\n  }\n\n  @Override\n  public DeleteControl cleanup(Petclinic petclinic, Context<Petclinic> context) {\n    return DeleteControl.defaultDelete();\n  }\n\n  @Override\n  public ErrorStatusUpdateControl<Petclinic> updateErrorStatus(Petclinic petclinic, Context<Petclinic> context, Exception e) {\n    return ErrorStatusUpdateControl.patchStatus(petclinic);\n  }\n\n}\n \n \n \nConfig 작성\n해당 Reconciler 클래스와 직접 구현한 PetclinicOperator를 각각 Bean으로 등록하도록 Config 클래스를 config package 하위에 만듭니다.\npackage com.example.petclinicoperatorjava.config;\n\nimport com.example.petclinicoperatorjava.PetclinicReconciler;\nimport io.javaoperatorsdk.operator.Operator;\nimport io.javaoperatorsdk.operator.api.reconciler.Reconciler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.List;\n\n@Configuration\npublic class PetclinicOperatorConfig {\n\n  @Bean\n  public PetclinicReconciler petclinicReconciler() {\n    return new PetclinicReconciler();\n  }\n\n  @Bean(initMethod = \"start\", destroyMethod = \"stop\")\n  public Operator operator(List<Reconciler<?>> controllers) {\n    Operator operator = new Operator();\n    controllers.forEach(operator::register);\n    return operator;\n  }\n}\n \n \n \nk8s 클러스터에 CRD 적용\nio.fabric8:crd-generator-apt 라이브러리에 의해 프로젝트 컴파일을 진행할 시 자동으로 build 디렉토리 내부에서 classpath/META-INF/fabric8 디렉토리에 yml 형식으로 생성됩니다.\n이를 지난 시간에 구축한 kind 기반의 로컬 k8s 클러스터에 CRD로 등록합니다.\n \n$ kubectl apply -f ./build/classes/java/main/META-INF/fabric8/petclinics.spring.my.domain-v1.yml\ncustomresourcedefinition.apiextensions.k8s.io/petclinics.spring.my.domain created\n \n \n \n로컬 테스트\nPetclinicOperatorJavaApplication에서 main 클래스를 실행합니다.\n \n\n\nkind cluster에 Petclinic manifest가 적용이 잘 되는지 확인합니다.\n$ kubectl config set-context --current --namespace=petclinic\n\n$ kubectl apply -f - <<EOF\napiVersion: spring.my.domain/v1\nkind: Petclinic\nmetadata:\n  name: sample\nspec:\n  image: springio/petclinic\n  size: 1\n  port: 8080\nEOF\npetclinic.spring.my.domain/sample created\n\n$ kubectl get all\nNAME                          READY   STATUS    RESTARTS   AGE\npod/sample-594c8976df-5gmzr   1/1     Running   0          47s\n\nNAME             TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE\nservice/sample   NodePort   10.96.34.237   <none>        8080:32494/TCP   48s\n\nNAME                     READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/sample   1/1     1            1           48s\n\nNAME                                DESIRED   CURRENT   READY   AGE\nreplicaset.apps/sample-594c8976df   1         1         1       48s\n\n$ kubectl get ing\nNAME     CLASS   HOSTS   ADDRESS     PORTS   AGE\nsample   nginx   *       localhost   80      69s\n \nhttp://localhost로 접속하여 Petclinic 메인 화면이 나오는지 확인합니다.\n \n\n\n \n \n \nIntegration Test\n@EnableMockOperator 어노테이션을 통해 k8s 클러스터를 mocking 하여 직접 구현한 Operator의 CRD를 적용하여 전용 통합 테스트를 작성할 수 있습니다.\npackage com.example.petclinicoperatorjava;\n\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport io.javaoperatorsdk.operator.springboot.starter.test.EnableMockOperator;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@SpringBootTest\n@EnableMockOperator(crdPaths = \"classpath:META-INF/fabric8/petclinics.spring.my.domain-v1.yml\")\npublic class PetclinicOperatorUnitTest {\n\n  @Autowired\n  KubernetesClient k8sClient;\n\n  @Test\n  void whenContextLoaded_thenCrdApplied() {\n    assertThat(\n        k8sClient\n            .apiextensions()\n            .v1()\n            .customResourceDefinitions()\n            .withName(\"petclinics.spring.my.domain\")\n            .get()\n    ).isNotNull();\n  }\n}\n \n \n \nOperator 배포\n먼저 gradle build task를 실행하여 jar 파일을 생성합니다.\n\n\n \n \n프로젝트 루트 프로젝트 밑에 k8s라는 디렉토리를 만들어 다음과 같이 Dockerfile(./k8s/Dockerfile)을 정의합니다.\nFROM bellsoft/liberica-openjdk-alpine:21\n\nCOPY build/libs/*-0.0.1-SNAPSHOT.jar /opt/app/app.jar\n\nEXPOSE 80\n\nCMD [\"java\", \"-showversion\", \"-jar\", \"/opt/app/app.jar\"]\n \n \n프로젝트 루트 디렉토리에서 docker build 명령어를 실행하여 petclinic java operator 이미지를 생성합니다.\n# 개인 docker public registry에 petclinic java operator를 push합니다.\n# 현재 로컬 kind cluster에서의 worker node는 linux/arm64 기반이어서 맞출 필요가 있음\n$ docker build -f ./k8s/Dockerfile -t ycatt/petclinic-operator-java:0.0.1 . --platform \"linux/arm64\"\n\n$ docker login\n\n$ docker push ycatt/petclinic-operator-java:0.0.1\n \nkind 로컬 클러스터에 다음과 같은 매니페스트 파일을 배포합니다. (./k8s/petclinic-operator.yaml)\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: petclinic-operator\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: petclinic-operator\nspec:\n  selector:\n    matchLabels:\n      app: petclinic-operator\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: petclinic-operator\n    spec:\n      serviceAccountName: petclinic-operator\n      containers:\n        - name: petclinic-operator\n          image: ycatt/petclinic-operator-java:0.0.1\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 80\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: petclinic-operator-admin\nsubjects:\n  - kind: ServiceAccount\n    name: petclinic-operator\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: petclinic-operator\n  apiGroup: \"\"\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: petclinic-operator\nrules:\n  - apiGroups:\n      - \"\"\n      - \"extensions\"\n      - \"apps\"\n    resources:\n      - deployments\n      - services\n      - pods\n      - pods/exec\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"apiextensions.k8s.io\"\n    resources:\n      - customresourcedefinitions\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"spring.my.domain\"\n    resources:\n      - petclinics\n    verbs:\n      - '*'\n  - apiGroups:\n      - \"networking.k8s.io\"\n    resources:\n      - ingresses\n    verbs:\n      - '*'\n$ kubectl apply -f ./k8s/petclinic-operator.yaml\nserviceaccount/petclinic-operator created\ndeployment.apps/petclinic-operator created\nclusterrolebinding.rbac.authorization.k8s.io/petclinic-operator-admin created\nclusterrole.rbac.authorization.k8s.io/petclinic-operator created\n\n$ kubectl get pod -n default\nNAME                                  READY   STATUS    RESTARTS   AGE\npetclinic-operator-6dc9f97b96-qg84p   1/1     Running   0          20m\n\n$ kubectl logs petclinic-operator-6dc9f97b96-qg84p -n default\nopenjdk version \"21.0.3\" 2024-04-16 LTS\nOpenJDK Runtime Environment (build 21.0.3+10-LTS)\nOpenJDK 64-Bit Server VM (build 21.0.3+10-LTS, mixed mode)\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n\n :: Spring Boot ::                (v3.3.1)\n\n2024-07-02T06:57:28.720Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : Starting PetclinicOperatorJavaApplication v0.0.1-SNAPSHOT using Java 21.0.3 with PID 1 (/opt/app/app.jar started by root in /)\n2024-07-02T06:57:28.723Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : No active profile set, falling back to 1 default profile: \"default\"\n2024-07-02T06:57:29.603Z  WARN 1 --- [petclinic-operator-java] [           main] ault ConfigurationService implementation : Configuration for reconciler 'petclinicreconciler' was not found. Known reconcilers: None.\n2024-07-02T06:57:29.619Z  INFO 1 --- [petclinic-operator-java] [           main] ault ConfigurationService implementation : Created configuration for reconciler com.example.petclinicoperatorjava.PetclinicReconciler with name petclinicreconciler\n2024-07-02T06:57:29.657Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Registered reconciler: 'petclinicreconciler' for resource: 'class com.example.petclinicoperatorjava.customresources.Petclinic' for namespace(s): [all namespaces]\n2024-07-02T06:57:29.659Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Operator SDK 4.9.1 (commit: 135b239) built on Tue May 28 08:09:11 GMT 2024 starting...\n2024-07-02T06:57:29.666Z  INFO 1 --- [petclinic-operator-java] [           main] io.javaoperatorsdk.operator.Operator     : Client version: 6.12.1\n2024-07-02T06:57:29.667Z  INFO 1 --- [petclinic-operator-java] [linicreconciler] i.j.operator.processing.Controller       : Starting 'petclinicreconciler' controller for reconciler: com.example.petclinicoperatorjava.PetclinicReconciler, resource: com.example.petclinicoperatorjava.customresources.Petclinic\n2024-07-02T06:57:30.233Z  INFO 1 --- [petclinic-operator-java] [linicreconciler] i.j.operator.processing.Controller       : 'petclinicreconciler' controller started\n2024-07-02T06:57:30.360Z  INFO 1 --- [petclinic-operator-java] [           main] c.e.p.PetclinicOperatorJavaApplication   : Started PetclinicOperatorJavaApplication in 1.885 seconds (process running for 2.43)\n \n \nIDE에서 실행한 Petclinic Operator Application을 Terminate한 뒤, 기존에 로컬에서 테스트했던 Petclinic CR을 삭제하고 재생성하여 정상적으로 메인 페이지 접속이 되는 지 확인합니다.\n$ kubectl delete petclinic --all\npetclinic.spring.my.domain \"sample\" deleted\n\n$ kubectl apply -f - <<EOF\napiVersion: spring.my.domain/v1\nkind: Petclinic\nmetadata:\n  name: sample\n  namespace: petclinic\nspec:\n  image: springio/petclinic\n  size: 1\n  port: 8080\nEOF\npetclinic.spring.my.domain/sample created\n\n$ kubectl get all -n petclinic\nNAME                          READY   STATUS    RESTARTS   AGE\npod/sample-594c8976df-k4944   1/1     Running   0          8s\n\nNAME             TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\nservice/sample   NodePort   10.96.140.108   <none>        8080:30502/TCP   8s\n\nNAME                     READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/sample   1/1     1            1           8s\n\nNAME                                DESIRED   CURRENT   READY   AGE\nreplicaset.apps/sample-594c8976df   1         1         1       8s\n\n$ kubectl get ing -n petclinic\nNAME     CLASS   HOSTS   ADDRESS     PORTS   AGE\nsample   nginx   *       localhost   80      44s\n\n# curl로 확인\n$ curl http://localhost:80 -v -o /dev/null\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 127.0.0.1:80...\n* Connected to localhost (127.0.0.1) port 80 (#0)\n> GET / HTTP/1.1\n> Host: localhost\n> User-Agent: curl/8.1.2\n> Accept: */*\n>\n< HTTP/1.1 200\n< Date: Tue, 02 Jul 2024 07:31:39 GMT\n< Content-Type: text/html;charset=UTF-8\n< Transfer-Encoding: chunked\n< Connection: keep-alive\n< Content-Language: en-US\n<\n{ [3168 bytes data]\n100  3161    0  3161    0     0  10577      0 --:--:-- --:--:-- --:--:-- 10788\n* Connection #0 to host localhost left intact\n \n \n \n마치면서...\n이번 포스트에서는 Java를 사용하여 Kubernetes Operator를 직접 구현해 보았습니다. Golang에 비해 구조가 비교적 간단하고 친숙하여 더 쉽게 접근할 수 있다는 느낌이 있는데요. 기존 Java/Spring Boot 기반 서비스와의 연계성, 개발자 커뮤니티의 폭넓은 지원까지 생각해 본다면 Kubernetes Operator를 개발할 때 Java라는 언어로도 꽤나 매력적인 선택이 될 수 있습니다. Java Operator SDK 활용에 작은 도움이 되었기를 바라면서 글을 마치겠습니다.\n \n감사합니다.\n \n \n \n참조\nhttps://javaoperatorsdk.io/docs\nhttps://github.com/operator-framework/java-operator-sdk/tree/main/sample-operators\nhttps://www.baeldung.com/java-kubernetes-operator-sdk\nhttps://techtalk.11stcorp.com/2022/pdf/TECH-TALK-2022_SESSION-02.pdf",
        "guid": "https://dev.gmarket.com/112",
        "categories": [
          "Infra"
        ],
        "isoDate": "2024-06-30T15:00:00.000Z"
      },
      {
        "creator": "지마켓 기술블로그",
        "title": "신규 서비스 &quot;꿀템&quot;을 만들기 위한 여정(네? 다음달까지요?) -2편",
        "link": "https://dev.gmarket.com/111",
        "pubDate": "Sun, 30 Jun 2024 19:09:53 +0900",
        "author": "지마켓 기술블로그",
        "comments": "https://dev.gmarket.com/111#entry111comment",
        "content": "<p data-ke-size=\"size16\">안녕하세요. Web Frontend팀 이민하입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">지난 편에서 꿀템 서비스를 기획하고 필요한 개념들의 이름을 지어주며 이를 바탕으로 데이터베이스를 설계해 보았습니다. 이번 편에서는 어떤 기술 스택을 선택했는지 소개하도록 하겠습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\">기술 스택 선택과 개발</h2>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_Attraction Data Flow.png\" data-origin-width=\"1243\" data-origin-height=\"1266\"><span data-url=\"https://blog.kakaocdn.net/dn/bfyI3c/btsIiqIljjt/9dRXV13rdEc1Xofxlkjg8K/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bfyI3c/btsIiqIljjt/9dRXV13rdEc1Xofxlkjg8K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbfyI3c%2FbtsIiqIljjt%2F9dRXV13rdEc1Xofxlkjg8K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_Attraction Data Flow.png\" data-origin-width=\"1243\" data-origin-height=\"1266\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">External 망에는 기존에 BSD 프론트엔드 영역 어플리케이션들이 있습니다. node.js와 경량 웹프레임워크인 fastify로 되어있습니다. 프론트에서 api를 호출하면 attraction 집계 어플리케이션이 메인 데이터 저장소인 Oracle DB에서 데이터를 조회해 옵니다. 구매내역, 링크루 등 외부 api를 호출한 결과도 전달해 줍니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">저장된 데이터는 Admin화면을 통해 관리할 수 있습니다. 누가 어떤 피드를 작성했고 누가 좋아요 버튼을 눌렀는지, 구매는 얼마나 일어났는지 등을 확인할 수 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">프론트엔드는 별도의 서버를 구축하지 않고 플러그인 형태로 개발되었습니다.</h4>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><i>event<span>&nbsp;</span></i>&nbsp;관련 어플리케이션은 프론트엔드 이름이 붙어있지만 여러 프로모션 영역의 비즈니스 로직이 많이 들어있는 어플리케이션입니다. 이번 BSD는 랭킹 탭 옆에 신규 탭으로 꿀템 탭이 신설될 것이므로 event 어플리케이션 안에 신규 생성한 attraction 어플리케이션을 번들 형태로 import 했습니다.&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"371\" data-origin-height=\"439\"><span data-url=\"https://blog.kakaocdn.net/dn/z8xti/btsIjdIx4rI/wiAfSitPETSfPkJKYuglA1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/z8xti/btsIjdIx4rI/wiAfSitPETSfPkJKYuglA1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fz8xti%2FbtsIjdIx4rI%2FwiAfSitPETSfPkJKYuglA1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"371\" data-origin-height=\"439\"/></span></figure>\n</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>Typescript, React 18.2</li>\n<li><span style=\"color: #000000;\">Tanstack</span><span style=\"color: #000000;\"><span>&nbsp;</span>query (aka. react-query)&nbsp;</span></li>\n<li><span style=\"color: #000000;\">api</span><span style=\"color: #000000;\">&nbsp;fetching<span>&nbsp;</span></span><span style=\"color: #000000;\">기능을</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">꿀템의</span><span style=\"color: #000000;\"><span>&nbsp;</span>등록</span><span style=\"color: #000000;\">/</span><span style=\"color: #000000;\">편집</span><span style=\"color: #000000;\">/</span><span style=\"color: #000000;\">좋아요 처리에 개별적으로 상태를 관리하지 않아도&nbsp;</span><span style=\"color: #000000;\">되서</span><span style=\"color: #000000;\">&nbsp;개발에<span>&nbsp;</span></span><span style=\"color: #000000;\">유리하였고요</span></li>\n<li><span style=\"color: #000000;\"><span style=\"color: #000000;\">Tanstack</span><span style=\"color: #000000;\"><span>&nbsp;</span>virtual을 이용해 무한스크롤 기능을 구현하였습니다.</span></span></li>\n<li><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000; text-align: left;\">event-fe와 마찬가지로 Fastify 프레임워크를 사용하였습니다.</span></span></span></li>\n<li><span style=\"color: #000000;\"><span style=\"color: #000000;\"><span style=\"color: #000000; text-align: left;\"><span style=\"color: #000000; text-align: left;\">Vite로 번들링 하여 사내 배포시스템을 통해 배포하였습니다.</span></span></span></span></li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">또 아래의 특징을 갖고 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>attraction 집계 api 호출 및 사용자 입력값 검증 (xss 방어)</li>\n<li><span>이벤트 프론트 저장소가 분리되어 있고 꿀템 저장소(attraction 프론트엔드)도 별도라서 꿀템 쪽 fastify용 코드는 attraction 프론트에서 개발하고 결과물을 fastify plugin 형태의 npm 패키지로 생성해서 이벤트 프론트 쪽에서 가져다 쓰는 방식으로 구현</span></li>\n<li>개발 중에는 attraction 프론트엔드에서 이벤트 프론트의 구성과 유사하게 dev server를 띄워서 개발하였습니다.</li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">백엔드의 기술스택은 다음과 같습니다.</h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1623\" data-origin-height=\"717\"><span data-url=\"https://blog.kakaocdn.net/dn/b9xMAI/btsIg5enoCW/BkfchCPLK2359lfY4jUPX0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/b9xMAI/btsIg5enoCW/BkfchCPLK2359lfY4jUPX0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb9xMAI%2FbtsIg5enoCW%2FBkfchCPLK2359lfY4jUPX0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1623\" data-origin-height=\"717\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>이벤트 영역에서는 C#&nbsp;닷넷과&nbsp;Node.js로 이루어진 어플리케이션이 많은데 팀 내에서 처음으로&nbsp;Spring과&nbsp;Kotlin을 적용하여 어플리케이션을 개발했습니다. 오라클을 사용하니 Stored Procedure&nbsp;대신&nbsp;jpa와&nbsp;QueryDSL을 적용하였습니다.</li>\n<li>Admin 서비스는 스프링 멀티모듈로 만들어 웹 UI와 oracle에 접속할 api가 같은 도메인 모델을 공유하도록 하였습니다.</li>\n<li><span style=\"color: #000000;\">기존</span><span style=\"color: #000000;\"><span>&nbsp;</span>사내에서 사용되는<span>&nbsp;</span></span><span style=\"color: #000000;\">공통</span><span style=\"color: #000000;\"><span>&nbsp;</span>Admin 시스템은</span><span style=\"color: #000000;\"><span>&nbsp;</span>사용하는 모든 도메인이 관련 프론트엔드</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">저장소 한 곳에&nbsp;있다 보니&nbsp;개발</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">배포가 번거로울 때가 있습니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">프로젝트가 무거워 빌드에도 시간이 꽤 걸리고 어플리케이션 별로 자체 스케일링하기 어렵습니다</span><span style=\"color: #000000;\">. 관련 어드민</span><span style=\"color: #000000;\">에서는 외부 시스템과의 연동을 위해&nbsp;</span><span style=\"color: #000000;\">SSO(Single Sign On)</span><span style=\"color: #000000;\">을 지원합니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">이를 이용해 사내&nbsp;</span><span style=\"color: #000000;\">쿠버네티스</span><span style=\"color: #000000;\">&nbsp;시스템인&nbsp;</span><span style=\"color: #000000;\">fusion</span><span style=\"color: #000000;\">에 올릴 수 있는&nbsp;</span><span style=\"color: #000000;\">java/</span><span style=\"color: #000000;\">kotlin</span><span style=\"color: #000000;\">, node.js&nbsp;</span><span style=\"color: #000000;\">등으로 변경하면 관리포인트가 줄어 유지보수에 매우 도움이 됩니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">또한 닷넷&nbsp;</span><span style=\"color: #000000;\">프레임웍을</span><span style=\"color: #000000;\">&nbsp;쓰지 않기 때문에 맥북으로 개발이 가능해집니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span>하지만<span style=\"color: #000000;\"><span>&nbsp;</span>사내 어드민</span><span style=\"color: #000000;\">&nbsp;공통 기능은 자체적으로 구현해야 하고 별도의&nbsp;</span><span style=\"color: #000000;\">admin&nbsp;</span><span style=\"color: #000000;\">qa</span><span style=\"color: #000000;\">를 거쳐야 하므로 개발기간이 길어질 수 있어 개발과 유지보수의&nbsp;</span><span style=\"color: #000000;\">trade off&nbsp;</span><span style=\"color: #000000;\">관계라고 생각합니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">팀 내에서는 같은&nbsp;</span><span style=\"color: #000000;\">기술스택이지만 다른</span><span style=\"color: #000000;\">&nbsp;어드민</span><span style=\"color: #000000;\">을 작업하고 있었기 때문에 수월하게 적용할 수 있었습니다</span><span style=\"color: #000000;\">.</span></li>\n<li>HTMX +&nbsp;<span style=\"color: #000000;\">Thymeleaf</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">&rarr; 마찬가지로&nbsp;</span><span style=\"color: #000000;\">cshtml</span><span style=\"color: #000000;\">이 아닌&nbsp;</span><span style=\"color: #000000;\">htmx</span><span style=\"color: #000000;\">를 이용하여&nbsp;</span><span style=\"color: #000000;\">admin&nbsp;</span><span style=\"color: #000000;\">ui</span><span style=\"color: #000000;\">를</span><span style=\"color: #000000;\">&nbsp;구성했습니다</span><span style=\"color: #000000;\">.</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">완성도보다는 빠르게 기능을 구현하는데 목적을 둔 어플리케이션이지만&nbsp;</span><span style=\"color: #000000;\">htmx</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">적용을 테크니컬 챌린지라고 말씀드릴 수 있습니다</span><span style=\"color: #000000;\">. (</span><span style=\"color: #000000;\">물론 일정이&nbsp;</span><span style=\"color: #000000;\">촉박해질수록</span><span style=\"color: #000000;\">&nbsp;후회를&nbsp;안 할 수가&nbsp;없었지만</span><span style=\"color: #000000;\">..)</span></li>\n</ul>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\"><span style=\"color: #000000;\">HTMX에 대해 한마디 하자면...</span></h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1819\" data-origin-height=\"786\"><span data-url=\"https://blog.kakaocdn.net/dn/5jSUV/btsIjc3VwUN/s6saFkuUonBYG6RwuTW15K/img.png\" data-phocus=\"phocus\" data-alt=\"html만 봐도 이해하기 쉽습니다.\"><img src=\"https://blog.kakaocdn.net/dn/5jSUV/btsIjc3VwUN/s6saFkuUonBYG6RwuTW15K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F5jSUV%2FbtsIjc3VwUN%2Fs6saFkuUonBYG6RwuTW15K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"1819\" data-origin-height=\"786\"/></span><figcaption>html만 봐도 이해하기 쉽습니다.</figcaption>\n</figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">htmx</span><span style=\"color: #000000;\">는 별도의<span>&nbsp;</span></span><span style=\"color: #000000;\">스크립트를<span>&nbsp;</span></span><span style=\"color: #000000;\">이용하지<span>&nbsp;</span></span><span style=\"color: #000000;\">않고 서버와</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">ajax&nbsp;</span><span style=\"color: #000000;\">통신을<span>&nbsp;</span></span><span style=\"color: #000000;\">도와주는</span><span style=\"color: #000000;\">&nbsp;프론트엔드&nbsp;웹&nbsp;</span><span style=\"color: #000000;\">프레임워크입니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">기존에</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">통신하기</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">위해</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">수많은</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">js</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">코드를 만들어야<span>&nbsp;</span></span><span style=\"color: #000000;\">했는데 보일러 플레이트를 꽤<span>&nbsp;</span></span><span style=\"color: #000000;\">많이 없애&nbsp;코드량&nbsp;</span><span style=\"color: #000000;\">자체가 줄어드는 효과가 있습니다</span><span style=\"color: #000000;\">.</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&ldquo;</span><span style=\"color: #000000;\">hx</span><span style=\"color: #000000;\">-&rdquo;</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">프리픽스가</span><span style=\"color: #000000;\">&nbsp;붙은 속성을</span><span style=\"color: #000000;\"><span>&nbsp;</span>선언해 간편하게<span>&nbsp;</span></span><span style=\"color: #000000;\">원하는 데이터를 만들어 낼 수 있습니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">필요한 기능은&nbsp;</span><span style=\"color: #000000;\">Extension</span><span style=\"color: #000000;\">으로&nbsp;만들 수 있어 사용성이 무궁무진합니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">또 빌드 단계도 별도로 없어 즉시 개발할<span>&nbsp;</span></span><span style=\"color: #000000;\">수 있게 도와줍니다</span><span style=\"color: #000000;\">.</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">장단점이 아주 명확한데요</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">장점은<span>&nbsp;</span></span><span style=\"color: #000000;\">서버 통신할 때&nbsp;</span><span style=\"color: #000000;\">js</span><span style=\"color: #000000;\">는<span>&nbsp;</span></span><span style=\"color: #000000;\">정말<span>&nbsp;</span></span><span style=\"color: #000000;\">사용하지 않고&nbsp;</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">본연의 목적에 충실할 수 있다</span><span style=\"color: #000000;\">.&nbsp;</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">특히&nbsp;</span><span style=\"color: #000000;\">thymeleaf</span><span style=\"color: #000000;\">와 결합하면 레이아웃 재사용으로&nbsp;</span><span style=\"color: #000000;\">리액트의</span><span style=\"color: #000000;\">&nbsp;컴포넌트 재사용과</span><span style=\"color: #000000;\"><span>&nbsp;</span>같은 효과를 가질 수 있습니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">백엔드</span><span style=\"color: #000000;\">&nbsp;개발자 혼자서 프론트를 만들 수 있다는 것도 장점입니다</span><span style=\"color: #000000;\">.&nbsp;</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">단점은&nbsp;</span><span style=\"color: #000000;\">json</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">데이터로&nbsp;</span><span style=\"color: #000000;\">api</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">통신을 주고받았다 보니까 받았다 보니까&nbsp;</span><span style=\"color: #000000;\">html 시맨틱<span>&nbsp;</span></span><span style=\"color: #000000;\">태그를 응답받는 것에 적응할 시간이<span>&nbsp;</span></span><span style=\"color: #000000;\">필요하다는</span><span style=\"color: #000000;\"><span>&nbsp;</span>것과&nbsp; 간단한 통신을 해도 쉽지 않다는 것입니다. 특히 컨트롤러에서 @RequestBody만 주로 사용해 오다가 @RequestPart, @ModelAttribute로 바꾸고 data class가 바인딩되지 않는 이슈는 한참을 헤매게 만들었습니다.</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">데이터를 주고받는 데이터&nbsp;</span><span style=\"color: #000000;\">패킷량도</span><span style=\"color: #000000;\">&nbsp;많아져 트래픽이 많이 몰리는 프론트 서비스에서는 사용이 부담스러울<span>&nbsp;</span></span><span style=\"color: #000000;\">수 있습니다</span><span style=\"color: #000000;\">.&nbsp;</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">무엇보다 필요한 기능은 결국<span>&nbsp;</span></span><span style=\"color: #000000;\">js</span><span style=\"color: #000000;\">를&nbsp;써야 합니다 써야 합니다. Csv&nbsp;</span><span style=\"color: #000000;\">엑셀 다운로드</span><span style=\"color: #000000;\">, form reset</span><span style=\"color: #000000;\">이나&nbsp;</span><span style=\"color: #000000;\">date-picker</span><span style=\"color: #000000;\">를 사용하기&nbsp; 위한<span>&nbsp;</span></span><span style=\"color: #000000;\">공통 함수</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">작성</span><span style=\"color: #000000;\">..&nbsp;</span><span style=\"color: #000000;\">그리고&nbsp;</span><span style=\"color: #000000;\">typescript</span><span style=\"color: #000000;\">를 쓸 수 없다</span><span style=\"color: #000000;\">..는 것이 또 큰 단점이죠.<span>&nbsp;</span></span><span style=\"color: #000000;\">Htmx</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">레퍼런스가 많이 없어 거대한&nbsp;</span><span style=\"color: #000000;\">js</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">덩어리를 디버깅해 가며 입맛에 맞게 수정했던 경험도 있네요</span><span style=\"color: #000000;\">.&nbsp;</span></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>htmx에 대해 아주 신랄하게 까는 아티클이 공식 홈페이지에 게시되어 있습니다..(<a href=\"https://htmx.org/essays/htmx-sucks/\">https://htmx.org/essays/htmx-sucks/</a>)</li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">어플리케이션 구현할 때 기술스택에 있어서 정답은 없습니다. fastify 대신 express를 쓸 수도 있고 nest.js를 적용할 수도 있습니다. spring 대신에 ktor를 사용할 수도, htmx 대신에 handlebar나 rythm 템플릿, jsp를 쓸 수도 있고요. 다양한 기술들은 저마다의 다양한 장단점을 가지고 있습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">2주간 매일 스크럼을 진행했습니다.</h4>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">짧게는 1분 길게는 10분 정도의 데일리 스크럼을 진행했습니다. 현재 진행하고 있는 작업과 진척 상황을 공유했습니다. 데일리 스크럼을 통해 프로젝트의 불확실성을 조율할 수 있었고, 짧은 시간 동안만 진행하기 때문에 불필요한 추가 업무나 의논이 생기지 않았습니다. 또 별도의 회의실이 필요하지 않아 자리에 모여 진행할 수 있었습니다.</p>\n<p><figure class=\"imagegridblock\">\n  <div class=\"image-container\"><span data-url=\"https://blog.kakaocdn.net/dn/byPaT4/btsIgN58gfC/GI4zwyatupJwuyrn74ya31/img.png\" data-phocus=\"phocus\" style=\"width: 37.1105%; margin-right: 10px;\" data-filename=\"blob\" data-widthpercent=\"37.55\" data-is-animation=\"false\" data-origin-height=\"971\" data-origin-width=\"619\"><img src=\"https://blog.kakaocdn.net/dn/byPaT4/btsIgN58gfC/GI4zwyatupJwuyrn74ya31/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbyPaT4%2FbtsIgN58gfC%2FGI4zwyatupJwuyrn74ya31%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\"/></span><span data-url=\"https://blog.kakaocdn.net/dn/b265Qm/btsIiRyXJGs/7KFWncvKYgvW45SBUKex20/img.png\" data-phocus=\"phocus\" style=\"width: 61.7267%;\" data-filename=\"edited_blob\" data-widthpercent=\"62.45\" data-is-animation=\"false\" data-origin-height=\"580\" data-origin-width=\"615\"><img src=\"https://blog.kakaocdn.net/dn/b265Qm/btsIiRyXJGs/7KFWncvKYgvW45SBUKex20/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb265Qm%2FbtsIiRyXJGs%2F7KFWncvKYgvW45SBUKex20%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\"/></span></div>\n</figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">팀 내에서 자체 QA를 진행했습니다.</h4>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">서비스가 론칭되려면&nbsp;</span><span style=\"color: #000000;\">QA(</span><span style=\"color: #000000;\">Quality Assurance) 단계를 거쳐 서비스의 이상은 없는지 확인을 하는데요&nbsp;</span><span style=\"color: #000000;\">QE</span><span style=\"color: #000000;\">팀과 담당&nbsp;</span><span style=\"color: #000000;\">PM</span><span style=\"color: #000000;\">분들이 같이 진행을 합니다</span><span style=\"color: #000000;\">. 사내</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">PM&nbsp;</span><span style=\"color: #000000;\">분들의 리소스가 넉넉한 편이 아닙니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">이때 저희 팀원분들의 자체&nbsp;</span><span style=\"color: #000000;\">QA&nbsp;</span><span style=\"color: #000000;\">단계를 먼저 진행해 굉장히 많은 도움을 받을<span>&nbsp;</span></span><span style=\"color: #000000;\">수<span>&nbsp;</span></span><span style=\"color: #000000;\">있었습니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">서비스의 대략적인 프로세스만 설명하고 별도의 가이드가 제공되지 않은 상태로 자체&nbsp;</span><span style=\"color: #000000;\">QA</span><span style=\"color: #000000;\">를 진행했는데요</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">사소한 버그부터 불편하다고 생각하는 동선</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">혹은<span>&nbsp;</span></span><span style=\"color: #000000;\">추가<span>&nbsp;</span></span><span style=\"color: #000000;\">기획 아이디어 등 수준 높은 피드백을 받을<span>&nbsp;</span></span><span style=\"color: #000000;\">수 있었습니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">또한 참여하신 모두가&nbsp;개발자이신 만큼&nbsp;이를 개선할 방법을 제시해주시기도 하셨습니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">QA&nbsp;</span><span style=\"color: #000000;\">시나리오에 없는 내용들도 꼼꼼하게 봐주셨기 때문에 서비스가 더욱 견고해질<span>&nbsp;</span></span><span style=\"color: #000000;\">수<span>&nbsp;</span></span><span style=\"color: #000000;\">있었던 이유라고 생각합니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">론칭 준비 중인 쇼룸도 자체<span>&nbsp;</span></span><span style=\"color: #000000;\">QA를</span><span style=\"color: #000000;\">&nbsp;진행해서 굉장히 큰 도움을 받았는데요, 개인적으로 저는 이런 팀 문화가 매우 만족스럽습니다.&nbsp;</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1495\" data-origin-height=\"1409\"><span data-url=\"https://blog.kakaocdn.net/dn/cSFANb/btsIhfOy67j/SBBVQKBuCLj5BNPXHbLfBk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/cSFANb/btsIhfOy67j/SBBVQKBuCLj5BNPXHbLfBk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcSFANb%2FbtsIhfOy67j%2FSBBVQKBuCLj5BNPXHbLfBk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"1495\" data-origin-height=\"1409\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">개발을 하던 와중에 마주한 몇 가지 이슈 상황이 있었는데요, 몇 가지 소개해보도록 하겠습니다.</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">Oracle DB에서 pk가 순차적(serial)으로 채번 되지 않는 이유가 있었습니다.</h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"471\" data-origin-height=\"474\"><span data-url=\"https://blog.kakaocdn.net/dn/mWaQd/btsIhgUdCDf/Avu9Khhs4WB7TvSk43khtK/img.gif\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/mWaQd/btsIhgUdCDf/Avu9Khhs4WB7TvSk43khtK/img.gif\" srcset=\"https://blog.kakaocdn.net/dn/mWaQd/btsIhgUdCDf/Avu9Khhs4WB7TvSk43khtK/img.gif\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"471\" data-origin-height=\"474\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">기능을 구현하고&nbsp;</span><span style=\"color: #000000;\">dev&nbsp;</span><span style=\"color: #000000;\">테스트를 진행해 보니&nbsp;</span><span style=\"color: #000000;\">pk</span><span style=\"color: #000000;\">가 순차적이지 않고&nbsp;들쑥날쑥이었습니다들쑥날쑥 이었습니다.&nbsp;</span><span style=\"color: #000000;\">저는 주로 사용했던&nbsp;</span><span style=\"color: #000000;\">PostgreSQL</span><span style=\"color: #000000;\">에서는&nbsp;</span><span style=\"color: #000000;\">Serial&nbsp;</span><span style=\"color: #000000;\">데이터 타입이 존재해 기본적으로&nbsp;</span><span style=\"color: #000000;\">pk</span><span style=\"color: #000000;\">는 순서가 보장되었지만&nbsp;</span><span style=\"color: #000000;\">Oracle</span><span style=\"color: #000000;\">은 뭔가 달랐습니다</span><span style=\"color: #000000;\">.<span>&nbsp;</span></span><span style=\"color: #000000;\">OracleDB</span><span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">환경은&nbsp;</span><span style=\"color: #000000;\">RAC(Real Application Cluster)&nbsp;</span><span style=\"color: #000000;\">구조로 되어있습니다</span><span style=\"color: #000000;\">.&nbsp;</span><span style=\"color: #000000;\">네트워크 단의&nbsp;</span><span style=\"color: #000000;\">L4, L7&nbsp;</span><span style=\"color: #000000;\">스위치 같은&nbsp;</span><span style=\"color: #000000;\">로드밸런서와</span><span style=\"color: #000000;\">&nbsp;비슷한 역할을 하고 있는데요</span><span style=\"color: #000000;\">, N</span><span style=\"color: #000000;\">개의&nbsp;</span><span style=\"color: #000000;\">Instance</span><span style=\"color: #000000;\">를&nbsp;통해 동일&nbsp;</span><span style=\"color: #000000;\">DB</span><span style=\"color: #000000;\">에&nbsp;접근할 수 있는 방법입니다</span><span style=\"color: #000000;\">.</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">N</span><span style=\"color: #000000;\">개의&nbsp;</span><span style=\"color: #000000;\">Instance DB</span><span style=\"color: #000000;\">의 자원을 이용하기 때문에</span><span style=\"color: #000000;\">,&nbsp;</span><span style=\"color: #000000;\">한&nbsp;node&nbsp;node의 부하를 분산시키는 효과를 갖습니다</span><span style=\"color: #000000;\">.</span></p>\n<p style=\"text-align: left;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">위 RAC 구조에서 Sequence를 생성하게 되면 설정되어 있는 CACHE 옵션만큼 채번을 해 메모리로 올려둡니다. (CACHE 옵션이 20이라면 1번 node에서 1~20까지, 2번 node에서 21~40까지...)</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">실제 트랜잭션에서는 커넥션을 맺은 Instance의 채번 된 sequence를 가져오게 됩니다. 그래서 순서가 보장되지 않을 수 있는 것이죠 (1, 21, 41...) pk 채번이 비즈니스 적으로 반드시 순차적인 Sequence가 보장되어야 할 때(주문, 결제 관련 트랜잭션 등)는 ORDER 옵션을 사용해 순서를 보장할 수 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">그러나 RAC 구조에서&nbsp;CACHE + ORDER 옵션을 설정하고 Sequence의 NEXTVAL()을 사용해 채번을 하게 되면 Data Dictionary가 자주 변경 되고 E<span><span>xclusive instance SV lock을 필요로 하게 됩니다. 이는 동일 세션에서 Hang을 유발할 수 있기 때문에 DB에 부하를 주게 됩니다.<span>&nbsp;</span></span></span><span><span>Cache 크기를 크게 잡는다면 메모리 휘발로 인해 오히려 사용되지 않을 수 있으므로 적절한 캐시 크기를 잡는 것이 중요합니다.</span></span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">따라서 보통의 경우 유일함(Unique)만을 보장하고 싶다면 NO ORDER 옵션을 통해 Sequence를 채번하는 것이 좋습니다. 오라클에서도 CACHE 크기는 크게 잡고 NO ORDER 옵션을 권장합니다. (캐싱을 하지 않는 NO CACHE 옵션은 Oracle에서도 사용하지 말라고 권고) RAC에 대해 더 알고 싶다면<span>&nbsp;</span><a style=\"color: #0070d1;\" href=\"https://docs.oracle.com/en/database/oracle/oracle-database/19/racad/introduction-to-oracle-rac.html#GUID-D04AA2A7-2E68-4C5C-BD6E-36C62427B98E\">Oracle 공식 가이드</a>를 참고하세요.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">SP 대신 JPA, QueryDSL을 사용했습니다.</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">MSSQL의 경우에는 SP(Stored Procedure)라고 불리는 방식의 쿼링을 하는데 native query를 미리 만들어두고 이를 검수, 배포하여 어플리케이션에서 사용합니다. 쿼리의 성능을 보장하고 전사적으로 모니터링을 하기 위함입니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Oracle / MySQL의 경우에는 SP를 사용을 권장하지 않기 때문에 다른 DB팀의 검수 및 배포하지 않습니다. 대신 DB Consulting Jira를 통해 검수를 진행합니다. 사내에서 JPA, queryDSL 적용 가이드가 있었는데 다만 저희는 이러한 프로세스를 인지하지 못했었는데요, 실제로 dev 테스트 중에 DB Index를 설정하지 않아 조회 시 Full Scan이 일어났고 실행 시간이 매우 길어졌습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">그 후 실제 적용할 Query는 만들었으나 이를 queryDSL로 포팅하는 과정에서 애를 먹었습니다. Admin에서 구매건별 구매자, 구매 금액등을 검색조건과 매핑하기 위한 화면을 그릴 때 필요한 상황이 있었는데요, 구매데이터를 저희가 생성하는 게 아니라 링크루 서비스로부터 받아오기 때문에 join조건이 상당히 복잡한 쿼리였습니다. 그 와중에 from절과 join절에 서브 쿼리를 사용하는 것을 queryDSL에서 지원을 하지 않아 의도한 대로 쿼리를 만들어낼 수 없는 이슈였습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">여러 자료를 찾다가 subQuery 자체를 마치 View처럼 Entity화 하는 방법을 발견했고 이를 적용해 해결할 수 있었습니다.&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1346\" data-origin-height=\"1626\"><span data-url=\"https://blog.kakaocdn.net/dn/btOYPp/btsIgOqqvcT/OWJEHYQvgKSjgIBNThVbtK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/btOYPp/btsIgOqqvcT/OWJEHYQvgKSjgIBNThVbtK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtOYPp%2FbtsIgOqqvcT%2FOWJEHYQvgKSjgIBNThVbtK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"1346\" data-origin-height=\"1626\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">사내에선 다양한 도구를 활용해 프러덕을 만들어갑니다.</h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"1116\" data-origin-height=\"541\"><span data-url=\"https://blog.kakaocdn.net/dn/ecm9lG/btsIhArrUWA/WVZeDuwdz38blHp8SWnk8K/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/ecm9lG/btsIhArrUWA/WVZeDuwdz38blHp8SWnk8K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fecm9lG%2FbtsIhArrUWA%2FWVZeDuwdz38blHp8SWnk8K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"1116\" data-origin-height=\"541\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사내에서 정말 다양한 개발도구를 이용해 업무를 진행합니다. it 인프라를 적극 활용하는 것이 빠르고 정확하게 서비스를 만드는 과정이라고 생각합니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Git &amp; Github</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">개발소스는 형상관리 툴 중하나인 Git을 이용하고 있으며 사내 GitHub에서 소스 관리하고 있습니다. 협업을 하기 위한 필수 도구로 여러 개발자가 한 어플리케이션을 개발할 때 작업 내용, history 등을 볼 수 있습니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Jira</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">모든 업무의 끝과 끝에는 Jira가 있습니다. 업무의 최소 단위이기에 History 관리가 잘되어야 합니다. 사내 Infra 요청에도 Jira를 사용하기에 익숙해지는 것이 좋을 것 같습니다. 각종 문의도 jira를 통합니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Saturn Initializr</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">세상에는 다양한 개발 도구와 이를 도와주는 라이브러리들이 있는데 보안을 이유로 사내에서만 사용하는 패키지들이 있습니다. 백엔드 어플리케이션을 생성할 때 필요한 사내 패키지를 주입해 만들어주는 Saturn Initializr를 통해 더욱 빠르게 만들 수 있습니다.&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Fusion &amp; 사내 VM 툴</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사내 Cloud Native 오케스트레이션 툴인 Fusion은 RedHat이라는 회사에서 만든 Openshift라는 툴입니다. Github 주소로부터 개발소스를 불러와 빌드, 배포하고 라우팅 할 수 있는 강력한 도구입니다. BSD 같은 큰 이벤트를 앞두고 아주 쉽게 똑같은 서버를 복제해서 운영할 수 있기 때문에 개발자들에게 있어 필수로 다뤄야 하는 툴이라고 생각합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Cloud 자원이 아닌 가상 물리 서버인 Virtual Machine은 사내에선 다른 이름으로 제공해주고 있습니다. 저는 리눅스 서버를 다루는 게 편해서 해커톤이나 메세지큐 적용을 위한 poc를 해당 서비스를 통해 이용해 본 경험이 있습니다. 요새는 대부분의 툴들을 Docker 이미지로 받을 수 있으니 fusion을 이용하는 추세입니다. 사내에 docker 이미지 저장소에 원하는 이미지가 없다면 보안검수를 통해 등록하는 것이 가능합니다.&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Kibana &amp; 사내 로그 모니터링 시스템</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">쿠버네티스 환경에서 최소 단위의 하드웨어, 즉 서버를 Pod라고 부르는데 이 Pod 개수가 수십, 수백 개가 되면 각 서버 내에 적재되는 로그를 찾기가 매우 어렵습니다. Pod에 쌓이는 로그를 Elastic Search라는 검색엔진을 통해 취합하고 이를 시각화하는 도구인 Kibana를 통해 타임라인별 로그를 확인할 수 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">개발자가 유의미하다고 판단되는 로그를 모아 볼 수 있게 한 사내 서비스도 있습니다. 개발 환경별로 패키지가 제공되어 매우 간편하며 fusion을 이용하지 않는 기존 C# 닷넷에서도 해당 로깅 시스템을 이용하고 있습니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">nGrinder</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">부하 테스트를 위한 툴입니다. Naver에서 오픈소스로 만들었고 서버가 견딜 수 있는 트래픽을 의도적으로 부하를 주어 성능 테스트를 진행할 때 사용합니다. 이번 꿀템의 경우도 실제 서비스에 얼마나 많은 사람들이 방문할지 모르기 때문에 아주 많은 성능 테스트를 진행했습니다. ride가 10만 건, 100만 건 일 때 스트레스 테스트도 문제없었습니다. nGrinder 환경 세팅은 fusion을 통해 세팅할 수 있습니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">Datadog</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사내에서 사용하는 APM(Application Performance Monitoring) 툴입니다. 운영 중인 어플리케이션의 요청이 기록으로 남기 때문에 타임라인 별로 트래픽을 비교하고 에러 건수를 확인할 수 있습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"626\" data-origin-height=\"893\"><span data-url=\"https://blog.kakaocdn.net/dn/Em7AC/btsIjdhsHcD/HSJ156CrAKphjQATvPK00K/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/Em7AC/btsIjdhsHcD/HSJ156CrAKphjQATvPK00K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FEm7AC%2FbtsIjdhsHcD%2FHSJ156CrAKphjQATvPK00K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"626\" data-origin-height=\"893\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Dependency Map 등을 통해 에러가 어느 지점에서 발생했는지 유추할 수 있어 에러 추적에 용이합니다. 또한 경보 체계를 만들어 장애 발생 시 Teams나 Slack으로 alert이 갈 수 있도록 합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"306\" data-origin-height=\"593\"><span data-url=\"https://blog.kakaocdn.net/dn/bmbIPX/btsIioRixsp/pkYUzebQvjywqEm8kqlp3k/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bmbIPX/btsIioRixsp/pkYUzebQvjywqEm8kqlp3k/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbmbIPX%2FbtsIioRixsp%2FpkYUzebQvjywqEm8kqlp3k%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"306\" data-origin-height=\"593\"/></span></figure>\n</p>\n<h4 style=\"text-align: left;\" data-ke-size=\"size20\">&nbsp;</h4>\n<h4 style=\"text-align: left;\" data-ke-size=\"size20\"><span style=\"color: #000000;\">이번</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">서비스를</span><span style=\"color: #000000;\"><span>&nbsp;</span>런칭하면서<span>&nbsp;</span></span><span style=\"color: #000000;\">이런</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">의의가</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">있다고</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">생각합니다</span><span style=\"color: #000000;\">.</span></h4>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>급하게 POC를&nbsp;진행했음에도 불구하고&nbsp;빅스마일데이 기간 동안&nbsp;장애 없이 서비스했다는&nbsp;점</li>\n<li><span style=\"color: #000000;\">개발 조직으로부터 시작된 서비스 &rarr;<span>&nbsp;</span></span><span style=\"color: #000000;\">아이디어를</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">제시하는</span><span style=\"color: #000000;\"><span>&nbsp;것&nbsp;</span>뿐아니라<span>&nbsp;</span></span><span style=\"color: #000000;\">구현까지</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">단기간에</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">이루어진</span><span style=\"color: #000000;\"><span>&nbsp;</span></span><span style=\"color: #000000;\">케이스</span></li>\n<li>프러덕<span style=\"color: #000000;\">&nbsp;</span><span style=\"color: #000000;\">디벨롭은</span><span style=\"color: #000000;\">&nbsp;누구나 챌린지<span>&nbsp;</span></span><span style=\"color: #000000;\">할 수<span>&nbsp;</span></span><span style=\"color: #000000;\">있다</span><span style=\"color: #000000;\">. &rarr;&nbsp;</span><span style=\"color: #000000;\">긍정적인 영향 전파</span></li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">결국 꿀템이 오픈될 수 있었던 이유는 유관부서의 적극적인 협조가 있었기에 가능했습니다. 이 자리를 빌려 다시 한번 감사하다는 말씀드립니다.</span><span style=\"color: #000000;\">꿀템은 댓글 기능, 신고하기 기능 등 다양한 신규 기능을 가지고 한가위 빅세일에 다시 한번 진행할 예정입니다! 앞으로 성장할 꿀템 서비스를 잘 지켜봐 주세요!</span></p>",
        "contentSnippet": "안녕하세요. Web Frontend팀 이민하입니다.\n \n지난 편에서 꿀템 서비스를 기획하고 필요한 개념들의 이름을 지어주며 이를 바탕으로 데이터베이스를 설계해 보았습니다. 이번 편에서는 어떤 기술 스택을 선택했는지 소개하도록 하겠습니다.\n \n기술 스택 선택과 개발\n\n\n \nExternal 망에는 기존에 BSD 프론트엔드 영역 어플리케이션들이 있습니다. node.js와 경량 웹프레임워크인 fastify로 되어있습니다. 프론트에서 api를 호출하면 attraction 집계 어플리케이션이 메인 데이터 저장소인 Oracle DB에서 데이터를 조회해 옵니다. 구매내역, 링크루 등 외부 api를 호출한 결과도 전달해 줍니다. \n저장된 데이터는 Admin화면을 통해 관리할 수 있습니다. 누가 어떤 피드를 작성했고 누가 좋아요 버튼을 눌렀는지, 구매는 얼마나 일어났는지 등을 확인할 수 있습니다.\n \n프론트엔드는 별도의 서버를 구축하지 않고 플러그인 형태로 개발되었습니다.\nevent  관련 어플리케이션은 프론트엔드 이름이 붙어있지만 여러 프로모션 영역의 비즈니스 로직이 많이 들어있는 어플리케이션입니다. 이번 BSD는 랭킹 탭 옆에 신규 탭으로 꿀템 탭이 신설될 것이므로 event 어플리케이션 안에 신규 생성한 attraction 어플리케이션을 번들 형태로 import 했습니다. \n\n\n\nTypescript, React 18.2\nTanstack query (aka. react-query) \napi fetching 기능을, 꿀템의 등록/편집/좋아요 처리에 개별적으로 상태를 관리하지 않아도 되서 개발에 유리하였고요\nTanstack virtual을 이용해 무한스크롤 기능을 구현하였습니다.\nevent-fe와 마찬가지로 Fastify 프레임워크를 사용하였습니다.\nVite로 번들링 하여 사내 배포시스템을 통해 배포하였습니다.\n또 아래의 특징을 갖고 있습니다.\nattraction 집계 api 호출 및 사용자 입력값 검증 (xss 방어)\n이벤트 프론트 저장소가 분리되어 있고 꿀템 저장소(attraction 프론트엔드)도 별도라서 꿀템 쪽 fastify용 코드는 attraction 프론트에서 개발하고 결과물을 fastify plugin 형태의 npm 패키지로 생성해서 이벤트 프론트 쪽에서 가져다 쓰는 방식으로 구현\n개발 중에는 attraction 프론트엔드에서 이벤트 프론트의 구성과 유사하게 dev server를 띄워서 개발하였습니다.\n \n백엔드의 기술스택은 다음과 같습니다.\n\n\n \n이벤트 영역에서는 C# 닷넷과 Node.js로 이루어진 어플리케이션이 많은데 팀 내에서 처음으로 Spring과 Kotlin을 적용하여 어플리케이션을 개발했습니다. 오라클을 사용하니 Stored Procedure 대신 jpa와 QueryDSL을 적용하였습니다.\nAdmin 서비스는 스프링 멀티모듈로 만들어 웹 UI와 oracle에 접속할 api가 같은 도메인 모델을 공유하도록 하였습니다.\n기존 사내에서 사용되는 공통 Admin 시스템은 사용하는 모든 도메인이 관련 프론트엔드 저장소 한 곳에 있다 보니 개발, 배포가 번거로울 때가 있습니다. 프로젝트가 무거워 빌드에도 시간이 꽤 걸리고 어플리케이션 별로 자체 스케일링하기 어렵습니다. 관련 어드민에서는 외부 시스템과의 연동을 위해 SSO(Single Sign On)을 지원합니다. 이를 이용해 사내 쿠버네티스 시스템인 fusion에 올릴 수 있는 java/kotlin, node.js 등으로 변경하면 관리포인트가 줄어 유지보수에 매우 도움이 됩니다. 또한 닷넷 프레임웍을 쓰지 않기 때문에 맥북으로 개발이 가능해집니다. 하지만 사내 어드민 공통 기능은 자체적으로 구현해야 하고 별도의 admin qa를 거쳐야 하므로 개발기간이 길어질 수 있어 개발과 유지보수의 trade off 관계라고 생각합니다. 팀 내에서는 같은 기술스택이지만 다른 어드민을 작업하고 있었기 때문에 수월하게 적용할 수 있었습니다.\nHTMX + Thymeleaf → 마찬가지로 cshtml이 아닌 htmx를 이용하여 admin ui를 구성했습니다. 완성도보다는 빠르게 기능을 구현하는데 목적을 둔 어플리케이션이지만 htmx 적용을 테크니컬 챌린지라고 말씀드릴 수 있습니다. (물론 일정이 촉박해질수록 후회를 안 할 수가 없었지만..)\nHTMX에 대해 한마디 하자면...\nhtml만 봐도 이해하기 쉽습니다.\n\n\n \nhtmx는 별도의 스크립트를 이용하지 않고 서버와 ajax 통신을 도와주는 프론트엔드 웹 프레임워크입니다. 기존에 통신하기 위해 수많은 js 코드를 만들어야 했는데 보일러 플레이트를 꽤 많이 없애 코드량 자체가 줄어드는 효과가 있습니다.\n“hx-” 프리픽스가 붙은 속성을 선언해 간편하게 원하는 데이터를 만들어 낼 수 있습니다. 필요한 기능은 Extension으로 만들 수 있어 사용성이 무궁무진합니다. 또 빌드 단계도 별도로 없어 즉시 개발할 수 있게 도와줍니다.\n장단점이 아주 명확한데요, 장점은 서버 통신할 때 js는 정말 사용하지 않고 html 본연의 목적에 충실할 수 있다. \n특히 thymeleaf와 결합하면 레이아웃 재사용으로 리액트의 컴포넌트 재사용과 같은 효과를 가질 수 있습니다. 백엔드 개발자 혼자서 프론트를 만들 수 있다는 것도 장점입니다. \n단점은 json 데이터로 api 통신을 주고받았다 보니까 받았다 보니까 html 시맨틱 태그를 응답받는 것에 적응할 시간이 필요하다는 것과  간단한 통신을 해도 쉽지 않다는 것입니다. 특히 컨트롤러에서 @RequestBody만 주로 사용해 오다가 @RequestPart, @ModelAttribute로 바꾸고 data class가 바인딩되지 않는 이슈는 한참을 헤매게 만들었습니다.\n데이터를 주고받는 데이터 패킷량도 많아져 트래픽이 많이 몰리는 프론트 서비스에서는 사용이 부담스러울 수 있습니다. \n무엇보다 필요한 기능은 결국 js를 써야 합니다 써야 합니다. Csv 엑셀 다운로드, form reset이나 date-picker를 사용하기  위한 공통 함수 작성.. 그리고 typescript를 쓸 수 없다..는 것이 또 큰 단점이죠. Htmx 레퍼런스가 많이 없어 거대한 js 덩어리를 디버깅해 가며 입맛에 맞게 수정했던 경험도 있네요. \nhtmx에 대해 아주 신랄하게 까는 아티클이 공식 홈페이지에 게시되어 있습니다..(https://htmx.org/essays/htmx-sucks/)\n어플리케이션 구현할 때 기술스택에 있어서 정답은 없습니다. fastify 대신 express를 쓸 수도 있고 nest.js를 적용할 수도 있습니다. spring 대신에 ktor를 사용할 수도, htmx 대신에 handlebar나 rythm 템플릿, jsp를 쓸 수도 있고요. 다양한 기술들은 저마다의 다양한 장단점을 가지고 있습니다. \n \n2주간 매일 스크럼을 진행했습니다.\n짧게는 1분 길게는 10분 정도의 데일리 스크럼을 진행했습니다. 현재 진행하고 있는 작업과 진척 상황을 공유했습니다. 데일리 스크럼을 통해 프로젝트의 불확실성을 조율할 수 있었고, 짧은 시간 동안만 진행하기 때문에 불필요한 추가 업무나 의논이 생기지 않았습니다. 또 별도의 회의실이 필요하지 않아 자리에 모여 진행할 수 있었습니다.\n\n  \n\n \n팀 내에서 자체 QA를 진행했습니다.\n서비스가 론칭되려면 QA(Quality Assurance) 단계를 거쳐 서비스의 이상은 없는지 확인을 하는데요 QE팀과 담당 PM분들이 같이 진행을 합니다. 사내 PM 분들의 리소스가 넉넉한 편이 아닙니다. 이때 저희 팀원분들의 자체 QA 단계를 먼저 진행해 굉장히 많은 도움을 받을 수 있었습니다. 서비스의 대략적인 프로세스만 설명하고 별도의 가이드가 제공되지 않은 상태로 자체 QA를 진행했는데요, 사소한 버그부터 불편하다고 생각하는 동선, 혹은 추가 기획 아이디어 등 수준 높은 피드백을 받을 수 있었습니다. 또한 참여하신 모두가 개발자이신 만큼 이를 개선할 방법을 제시해주시기도 하셨습니다. QA 시나리오에 없는 내용들도 꼼꼼하게 봐주셨기 때문에 서비스가 더욱 견고해질 수 있었던 이유라고 생각합니다. 론칭 준비 중인 쇼룸도 자체 QA를 진행해서 굉장히 큰 도움을 받았는데요, 개인적으로 저는 이런 팀 문화가 매우 만족스럽습니다. \n\n\n \n개발을 하던 와중에 마주한 몇 가지 이슈 상황이 있었는데요, 몇 가지 소개해보도록 하겠습니다.\nOracle DB에서 pk가 순차적(serial)으로 채번 되지 않는 이유가 있었습니다.\n\n\n \n기능을 구현하고 dev 테스트를 진행해 보니 pk가 순차적이지 않고 들쑥날쑥이었습니다들쑥날쑥 이었습니다. 저는 주로 사용했던 PostgreSQL에서는 Serial 데이터 타입이 존재해 기본적으로 pk는 순서가 보장되었지만 Oracle은 뭔가 달랐습니다. OracleDB 환경은 RAC(Real Application Cluster) 구조로 되어있습니다. 네트워크 단의 L4, L7 스위치 같은 로드밸런서와 비슷한 역할을 하고 있는데요, N개의 Instance를 통해 동일 DB에 접근할 수 있는 방법입니다.\nN개의 Instance DB의 자원을 이용하기 때문에, 한 node node의 부하를 분산시키는 효과를 갖습니다.\n \n위 RAC 구조에서 Sequence를 생성하게 되면 설정되어 있는 CACHE 옵션만큼 채번을 해 메모리로 올려둡니다. (CACHE 옵션이 20이라면 1번 node에서 1~20까지, 2번 node에서 21~40까지...)\n실제 트랜잭션에서는 커넥션을 맺은 Instance의 채번 된 sequence를 가져오게 됩니다. 그래서 순서가 보장되지 않을 수 있는 것이죠 (1, 21, 41...) pk 채번이 비즈니스 적으로 반드시 순차적인 Sequence가 보장되어야 할 때(주문, 결제 관련 트랜잭션 등)는 ORDER 옵션을 사용해 순서를 보장할 수 있습니다.\n그러나 RAC 구조에서 CACHE + ORDER 옵션을 설정하고 Sequence의 NEXTVAL()을 사용해 채번을 하게 되면 Data Dictionary가 자주 변경 되고 Exclusive instance SV lock을 필요로 하게 됩니다. 이는 동일 세션에서 Hang을 유발할 수 있기 때문에 DB에 부하를 주게 됩니다. Cache 크기를 크게 잡는다면 메모리 휘발로 인해 오히려 사용되지 않을 수 있으므로 적절한 캐시 크기를 잡는 것이 중요합니다.\n따라서 보통의 경우 유일함(Unique)만을 보장하고 싶다면 NO ORDER 옵션을 통해 Sequence를 채번하는 것이 좋습니다. 오라클에서도 CACHE 크기는 크게 잡고 NO ORDER 옵션을 권장합니다. (캐싱을 하지 않는 NO CACHE 옵션은 Oracle에서도 사용하지 말라고 권고) RAC에 대해 더 알고 싶다면 Oracle 공식 가이드를 참고하세요.\n \nSP 대신 JPA, QueryDSL을 사용했습니다.\nMSSQL의 경우에는 SP(Stored Procedure)라고 불리는 방식의 쿼링을 하는데 native query를 미리 만들어두고 이를 검수, 배포하여 어플리케이션에서 사용합니다. 쿼리의 성능을 보장하고 전사적으로 모니터링을 하기 위함입니다.\nOracle / MySQL의 경우에는 SP를 사용을 권장하지 않기 때문에 다른 DB팀의 검수 및 배포하지 않습니다. 대신 DB Consulting Jira를 통해 검수를 진행합니다. 사내에서 JPA, queryDSL 적용 가이드가 있었는데 다만 저희는 이러한 프로세스를 인지하지 못했었는데요, 실제로 dev 테스트 중에 DB Index를 설정하지 않아 조회 시 Full Scan이 일어났고 실행 시간이 매우 길어졌습니다. \n그 후 실제 적용할 Query는 만들었으나 이를 queryDSL로 포팅하는 과정에서 애를 먹었습니다. Admin에서 구매건별 구매자, 구매 금액등을 검색조건과 매핑하기 위한 화면을 그릴 때 필요한 상황이 있었는데요, 구매데이터를 저희가 생성하는 게 아니라 링크루 서비스로부터 받아오기 때문에 join조건이 상당히 복잡한 쿼리였습니다. 그 와중에 from절과 join절에 서브 쿼리를 사용하는 것을 queryDSL에서 지원을 하지 않아 의도한 대로 쿼리를 만들어낼 수 없는 이슈였습니다.\n여러 자료를 찾다가 subQuery 자체를 마치 View처럼 Entity화 하는 방법을 발견했고 이를 적용해 해결할 수 있었습니다. \n\n\n \n사내에선 다양한 도구를 활용해 프러덕을 만들어갑니다.\n\n\n사내에서 정말 다양한 개발도구를 이용해 업무를 진행합니다. it 인프라를 적극 활용하는 것이 빠르고 정확하게 서비스를 만드는 과정이라고 생각합니다.\nGit & Github\n개발소스는 형상관리 툴 중하나인 Git을 이용하고 있으며 사내 GitHub에서 소스 관리하고 있습니다. 협업을 하기 위한 필수 도구로 여러 개발자가 한 어플리케이션을 개발할 때 작업 내용, history 등을 볼 수 있습니다.\nJira\n모든 업무의 끝과 끝에는 Jira가 있습니다. 업무의 최소 단위이기에 History 관리가 잘되어야 합니다. 사내 Infra 요청에도 Jira를 사용하기에 익숙해지는 것이 좋을 것 같습니다. 각종 문의도 jira를 통합니다.\nSaturn Initializr\n세상에는 다양한 개발 도구와 이를 도와주는 라이브러리들이 있는데 보안을 이유로 사내에서만 사용하는 패키지들이 있습니다. 백엔드 어플리케이션을 생성할 때 필요한 사내 패키지를 주입해 만들어주는 Saturn Initializr를 통해 더욱 빠르게 만들 수 있습니다. \nFusion & 사내 VM 툴\n사내 Cloud Native 오케스트레이션 툴인 Fusion은 RedHat이라는 회사에서 만든 Openshift라는 툴입니다. Github 주소로부터 개발소스를 불러와 빌드, 배포하고 라우팅 할 수 있는 강력한 도구입니다. BSD 같은 큰 이벤트를 앞두고 아주 쉽게 똑같은 서버를 복제해서 운영할 수 있기 때문에 개발자들에게 있어 필수로 다뤄야 하는 툴이라고 생각합니다.\nCloud 자원이 아닌 가상 물리 서버인 Virtual Machine은 사내에선 다른 이름으로 제공해주고 있습니다. 저는 리눅스 서버를 다루는 게 편해서 해커톤이나 메세지큐 적용을 위한 poc를 해당 서비스를 통해 이용해 본 경험이 있습니다. 요새는 대부분의 툴들을 Docker 이미지로 받을 수 있으니 fusion을 이용하는 추세입니다. 사내에 docker 이미지 저장소에 원하는 이미지가 없다면 보안검수를 통해 등록하는 것이 가능합니다. \nKibana & 사내 로그 모니터링 시스템\n쿠버네티스 환경에서 최소 단위의 하드웨어, 즉 서버를 Pod라고 부르는데 이 Pod 개수가 수십, 수백 개가 되면 각 서버 내에 적재되는 로그를 찾기가 매우 어렵습니다. Pod에 쌓이는 로그를 Elastic Search라는 검색엔진을 통해 취합하고 이를 시각화하는 도구인 Kibana를 통해 타임라인별 로그를 확인할 수 있습니다.\n개발자가 유의미하다고 판단되는 로그를 모아 볼 수 있게 한 사내 서비스도 있습니다. 개발 환경별로 패키지가 제공되어 매우 간편하며 fusion을 이용하지 않는 기존 C# 닷넷에서도 해당 로깅 시스템을 이용하고 있습니다.\nnGrinder\n부하 테스트를 위한 툴입니다. Naver에서 오픈소스로 만들었고 서버가 견딜 수 있는 트래픽을 의도적으로 부하를 주어 성능 테스트를 진행할 때 사용합니다. 이번 꿀템의 경우도 실제 서비스에 얼마나 많은 사람들이 방문할지 모르기 때문에 아주 많은 성능 테스트를 진행했습니다. ride가 10만 건, 100만 건 일 때 스트레스 테스트도 문제없었습니다. nGrinder 환경 세팅은 fusion을 통해 세팅할 수 있습니다.\nDatadog\n사내에서 사용하는 APM(Application Performance Monitoring) 툴입니다. 운영 중인 어플리케이션의 요청이 기록으로 남기 때문에 타임라인 별로 트래픽을 비교하고 에러 건수를 확인할 수 있습니다. \n \n\n\n \nDependency Map 등을 통해 에러가 어느 지점에서 발생했는지 유추할 수 있어 에러 추적에 용이합니다. 또한 경보 체계를 만들어 장애 발생 시 Teams나 Slack으로 alert이 갈 수 있도록 합니다.\n \n\n\n \n이번 서비스를 런칭하면서 이런 의의가 있다고 생각합니다.\n급하게 POC를 진행했음에도 불구하고 빅스마일데이 기간 동안 장애 없이 서비스했다는 점\n개발 조직으로부터 시작된 서비스 → 아이디어를 제시하는 것 뿐아니라 구현까지 단기간에 이루어진 케이스\n프러덕 디벨롭은 누구나 챌린지 할 수 있다. → 긍정적인 영향 전파\n결국 꿀템이 오픈될 수 있었던 이유는 유관부서의 적극적인 협조가 있었기에 가능했습니다. 이 자리를 빌려 다시 한번 감사하다는 말씀드립니다.꿀템은 댓글 기능, 신고하기 기능 등 다양한 신규 기능을 가지고 한가위 빅세일에 다시 한번 진행할 예정입니다! 앞으로 성장할 꿀템 서비스를 잘 지켜봐 주세요!",
        "guid": "https://dev.gmarket.com/111",
        "categories": [
          "Infra"
        ],
        "isoDate": "2024-06-30T10:09:53.000Z"
      },
      {
        "creator": "지마켓 기술블로그",
        "title": "신규 서비스 &quot;꿀템&quot;을 만들기 위한 여정(네? 다음달까지요?) -1편",
        "link": "https://dev.gmarket.com/110",
        "pubDate": "Sun, 30 Jun 2024 19:05:49 +0900",
        "author": "지마켓 기술블로그",
        "comments": "https://dev.gmarket.com/110#entry110comment",
        "content": "<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"615\" data-origin-height=\"838\"><span data-url=\"https://blog.kakaocdn.net/dn/cjtYHr/btsIhLfkog7/C7WNooK1WGD670vhLOcSK0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/cjtYHr/btsIhLfkog7/C7WNooK1WGD670vhLOcSK0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcjtYHr%2FbtsIhLfkog7%2FC7WNooK1WGD670vhLOcSK0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"615\" data-origin-height=\"838\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">안녕하세요. Web Frontend팀 이민하입니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">지난 빅스마일데이에 첫 론칭한 꿀템 피드 서비스! 이 서비스를 만들기 위한 여정을 여러분께 소개드리려고 합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\">Intro</h2>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">시작은 디지털 빅세일이 끝난 2월 말.. 저희 팀장님의&nbsp;한마디에서&nbsp;시작했습니다.</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\"챗GBT를 우리만 보기에 아깝지 않아..!?\"</blockquote>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_edited_chat-gbt.png\" data-origin-width=\"1280\" data-origin-height=\"803\"><span data-url=\"https://blog.kakaocdn.net/dn/c7vprO/btsIjd9JQyx/FsL1dGmSfYq8tePq7vynRk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/c7vprO/btsIjd9JQyx/FsL1dGmSfYq8tePq7vynRk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc7vprO%2FbtsIjd9JQyx%2FFsL1dGmSfYq8tePq7vynRk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_edited_chat-gbt.png\" data-origin-width=\"1280\" data-origin-height=\"803\"/></span></figure>\n</p>\n<p style=\"text-align: center;\" data-ke-size=\"size16\">챗GBT(Gmarket Best iTem)는 임직원분들이 직접 추천하는 상품을 모아둔 페이지로 하나하나가 진짜 꿀템입니다!</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">아깝다고 생각했습니다. 저도 GBT를 보며 많이 샀기 때문에 고객도 이 페이지를 같이 보면 구매가 많이 일어날 것이라고 생각했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">추가로 고객들이 게시글을 작성할 수 있다면..? 그러면 고객들이 우리 사이트에서 놀 수 있는 공간이 되지 않을까?</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">또한 사내에서도 우리 프러덕에 커뮤니티 기능을 넣어보자는 니즈가 있었다고 들었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">자신감이 생기기 시작했습니다. 우리 사이트에 새로운 활기를 불어넣어 줄 수 있을 것 같은 그런 자신감이 생겼습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">만들 수 있을 것 같은 기대감에 하나 잊어버린 것이 있었습니다.</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\"아 맞다 나 신규 서비스 만들어 본 적 없지!\"</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">네. 저는 입사하고 이벤트 플랫폼, 한반도 기획전, 패턴6를 담당하면서 기존 서비스의 개선 작업을 주로 해왔고 \"쇼룸\"이라는 서비스를 준비 중이었으나 아직 신규 서비스를 론칭해 본 경험은 없었습니다.&nbsp;그렇기 때문에 어디서부터 무엇을 작업해야 할지 머릿속에 그려지지 않았습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이 발표는 신규 서비스를 개발하려고 할 때 무엇을 준비해야 할지 막막한 \"개발자\"분들이 시행착오를 줄일 수 있도록 도움을 드리고자 준비하게 되었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\">지속 가능한 개발을 위한 설계</h2>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">지속 가능한 설계란 보통 환경의 수용능력 범위 내에서 개발하는 것을 말하는, 도시설계에서 사용하는 개념인데요, 어플리케이션 개발에 있어서 개발 비용이 너무 많이 소모되지 않으면서 꾸준히 디벨롭하고 개선할 수 있는 프러덕을 만드는 것과 일맥상통한다고 생각합니다. 그리고 이를 위해 확장성을 고려한 설계가 필요했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">첫 번째로 고민한 것은<span>&nbsp;</span><b>\"네이밍\"이었습니다.</b></h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"kishore_programmer_hardest_job.jpg\" data-origin-width=\"1200\" data-origin-height=\"1091\"><span data-url=\"https://blog.kakaocdn.net/dn/E2VtU/btsIipvUaqc/EMMTQ3NdzKisNDPBhwywC0/img.jpg\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/E2VtU/btsIipvUaqc/EMMTQ3NdzKisNDPBhwywC0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FE2VtU%2FbtsIipvUaqc%2FEMMTQ3NdzKisNDPBhwywC0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"kishore_programmer_hardest_job.jpg\" data-origin-width=\"1200\" data-origin-height=\"1091\"/></span></figure>\n</p>\n<p style=\"text-align: center;\" data-ke-size=\"size16\"><span data-alt=\"개발자에게 가장 어려운 일들\" data-phocus=\"phocus\" data-url=\"https://blog.kakaocdn.net/dn/KYfFS/btsIiOB8Idy/NGDiipC3CHuwPZXQ0JQrw0/img.jpg\"></span>개발자에게 가장 어려운 일들</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">개발자에게 있어 이름을 짓는다는 행위는 단순히 부르기 위한 목적보다 더 큰 의미가 있습니다. 이름만 듣고도 직관적으로 만드는 의도를 이해하는데 도움이 되어야 합니다. 저희도 구현하고자 하는 개념을 포괄할 수 있어야 한다고 생각했습니다. 또한 기존 개념과 헷갈리지 않도록 사내에서 사용되지 않는 단어를 선택해야 했습니다.&nbsp;그러다 문득</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">우리 사이트에서 놀 수 있어야 한다.. &rarr; 즐길 거리!? 그러면 게시글을 \"놀이 기구\"에 비유하면 어떨까?</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">챗GBT는 Padlet이라는 공유 게시판 서비스를 이용하였는데 그 padlet안에 게시글을 포스팅할 수 있는 빈 보드에 해당하는 영역을 \"<b>Attraction</b>\"이라 명명했습니다. 어트랙션은 놀이 공원의 놀이 기구라는 뜻으로 사용되곤 하지만 실제로는 매력,<span>&nbsp;</span><b>즐길 거리,</b><span>&nbsp;</span>명소 등의 뜻을 가지고 있습니다. 부동산 개발 업계에서는 도시의 랜드마크나 코엑스의 별마당 도서관처럼 상업 시설 내 차별화를 두는 장소를 어트랙션이라고 부르기도 합니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Attraction에 들어갈 게시글 하나하나는 놀이기구,<span>&nbsp;</span><b>탈 것</b>을 의미하는 \"<b>Ride</b>\"로 부르기로 하였습니다. Attraction 하위에 존재하며 등록, 수정이 가능한<span>&nbsp;<b>컨텐츠</b>입니다.해당</span> 프로젝트에서 가장 중요한 개념이며 Ride의 퀄리티에 따라 이 서비스의 흥행이 정해질 것이라 생각했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">마지막으로 Ride를 업로드할 수 있는 사람을 지칭하는 개념이 필요했습니다. 이 사람은 지마켓, 옥션의 회원 일 수도, 셀러 고객일 수도, 임직원 일 수도 있기 때문에 이를 포괄하는 개념이어야 했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">그러므로 Ride의 탑승객을 의미하는 \"<b>Passenger</b>\"로 명명했습니다.&nbsp;그렇게&nbsp;핵심 개념인&nbsp;<b>Attraction</b>,<span>&nbsp;</span><b>Ride</b>,<span>&nbsp;</span><b>Passenger<span>&nbsp;</span></b>가 탄생했고 자연스레 이 프로젝트의 이름은 지마켓의 놀이공원, \"<b>G-world</b>\"가 되었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">확장성을 염두에 두고 하위 속성을 정의하기 시작했습니다.</h4>\n<div id=\"SE-7018a7de-76c5-48e8-a382-557a8c7a8fa1\" style=\"color: #333333; text-align: start;\" data-compid=\"SE-7018a7de-76c5-48e8-a382-557a8c7a8fa1\" data-a11y-title=\"사진\">\n<div data-unitid=\"\" data-compid=\"SE-7018a7de-76c5-48e8-a382-557a8c7a8fa1\" data-direction=\"top\">\n<div id=\"SE-7018a7de-76c5-48e8-a382-557a8c7a8fa1\">\n<div>&nbsp;</div>\n<div data-unitid=\"SE-7018a7de-76c5-48e8-a382-557a8c7a8fa1\" data-compid=\"\" data-direction=\"top\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"936\" data-origin-height=\"611\"><span data-url=\"https://blog.kakaocdn.net/dn/pAiKg/btsIiOvq2kI/hOJpRplG7xakZV6x816Qlk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/pAiKg/btsIiOvq2kI/hOJpRplG7xakZV6x816Qlk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FpAiKg%2FbtsIiOvq2kI%2FhOJpRplG7xakZV6x816Qlk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"693\" data-origin-width=\"936\" data-origin-height=\"611\"/></span></figure>\n</div>\n</div>\n</div>\n</div>\n<p style=\"color: #333333; text-align: center;\" data-ke-size=\"size16\">프로젝트 이름을 정하고나서 머릿속에 있는 내용을 화이트보드에 정리해봤습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">팀원들과 본격적으로 G-world의 얼개를 짜기 시작했습니다. 개발자가 기획하는 것이다 보니 어떤 식으로 접근해야 할지 몰랐습니다. 해당 페이지를 어디에 노출시킬 것이며 어떤 속성이 필요한지를 고민했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Attraction은 챗GBT처럼 저희 영업본부 임직원 분들이 올릴 수도 있고, 고객들도 업로드할 수 있어야 했고<span>&nbsp;</span><span>상품을 공유했을 때 구매 적립받을 수 있도록 Linkrew 와의 연동이 필요하다고 생각했습니다. (Linkrew 란 누구나 상품 링크를 공유해 수익을 셰어 받는 지마켓의 신규 제휴서비스입니다.)</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><span>Ride는 상품은 구매 내역에서 불러오거나, 구매 내역 없이 단순히 상품을 추천하거나, 임직원이 올릴 수 있는 3가지 형태가 있을 수 있다고 판단했습니다. 그리고 구매 기록에 기반한 태그(첫 구매시기, 재구매 횟수 표시 등)를 게시하여 Ride의 리뷰 신뢰도를 높일 수 있는 방안을 생각해 보았습니다. 또한 Ride 내에 승객이 직접 해시태그를 넣고 이를 필터링할 수 있는 기능, 좋아요 표시를 통한 인기 Ride에 대한 리스팅 기능 등 정말 다양한 방안이 나왔습니다.</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Ride의 상품 카테고리를 통해 특정 기획전 콘셉트에 맞는, 혹은 유저가 원하는 상품의 Ride를 모아볼 수 있는 필터링 기능도 넣었습니다. 댓글 기능도 들어가야 커뮤니티로써 기능한다고 생각했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Content Quality에 대한 우려가 가장 큰 고민이었는데, 이용약관 동의 하기 위한 동선, 동일 상품의 Ride가 올라올 경우 모아서 보여준다던지, 콘텐츠가 활발하게 업로드될 수 있도록 승인 대신 선 게시 후 모니터링이 필요하다고 생각했고 이를 위한 신고 기능도 개발할 필요가 있음을 인지했습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사흘 동안 얼추 구상한 내용을 팀장님께 말씀드리고 피드백을 받았습니다.&nbsp; 최초 아이디어를 팀장님이 주신만큼 개발 가능한 범위와 설계 타당성에 대한 검증을 해주시고 조언에 따라 수정을 거쳤습니다.</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">이번 빅스마일데이(5월)에 적용할 POC(Proof of Concept)를 만들어보자!</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이 때는 3월 초. 그리고 저는 3월 중순에 오랜 기간 염원해 오던 미국 여행을 앞두고 있었습니다....</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">여행 가서 노트북을 펼치지 않으려면 지금 빠르게 설계를 마쳐야 한다는 위기의식이&nbsp;생겨났습니다. (<s><b>네? 다음 달까지요?)</b></s></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">본격적으로 테이블을 설계할 때가 됐습니다.</h4>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"926\" data-origin-height=\"435\"><span data-url=\"https://blog.kakaocdn.net/dn/ISiLd/btsIhW8LPZL/Y00ZE4UeOjkCCOZGwR6XL0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/ISiLd/btsIhW8LPZL/Y00ZE4UeOjkCCOZGwR6XL0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FISiLd%2FbtsIhW8LPZL%2FY00ZE4UeOjkCCOZGwR6XL0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"926\" data-origin-height=\"435\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\"><span data-alt=\"저는 개인적으로 PostgreSQL을 자주 사용해왔습니다.\" data-phocus=\"phocus\" data-url=\"https://blog.kakaocdn.net/dn/clHrBt/btsIiy0xi0b/3HWffXMx8ayaffsyidtw1K/img.png\"></span>저는 개인적으로 PostgreSQL을 자주 사용해 왔습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">가장 먼저 해야 할 일은 &ldquo;어떤 DBMS를 선택해야 하는가?&rdquo;입니다. 사내에선 다양한 DBMS를 이용해 다양한 프러덕을 만들고 있습니다. 각 DB는 저마다의 장단점을 가지고 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">저장할 데이터 양이 많지는 않으면서도 POC 끝나고 데이터의 사용성을 고려했을 때 정합성이 가장 중요하다고 생각했습니다. 따라서 팀 내에선 성능과 안전성을 고려하면 Oracle을 사용하는 데에 이견이 없었습니다.&nbsp;더불어 이번 BSD는 지마켓만 오픈하지만 옥션으로 확장할 수 있다는 생각도 있었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">테이블 명은 ATTRACTION, RIDE, PASSENGER가 정해졌지만 테이블 내 속성을 의미하는 칼럼은 해당 키워드를 사용하기에 길다고 느껴졌습니다. 그래서 각 단어의 축약형이 필요했는데 보통 개발자들은 영어 단어의 첫 글자를 제외한 모음을 지워서 3~5글자로 만듭니다. Attraction의 모음을 없애면 Attr이죠. 제가 방금 네이밍에 있어서 기존 개념과 헷갈리지 않아야 한다고 말씀드렸습니다. 해당 단어를 현재 사내에서 사용하고 있는지 먼저 찾아볼 필요가 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"792\" data-origin-height=\"532\"><span data-url=\"https://blog.kakaocdn.net/dn/raUXU/btsIg221gxc/BhYTckFu5BRhlL7GKO4eZ0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/raUXU/btsIg221gxc/BhYTckFu5BRhlL7GKO4eZ0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FraUXU%2FbtsIg221gxc%2FBhYTckFu5BRhlL7GKO4eZ0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"792\" data-origin-height=\"532\"/></span></figure>\n</p>\n<p style=\"text-align: center;\" data-ke-size=\"size16\"><span data-alt=\"사내 메타 데이터 관리 사이트\" data-phocus=\"phocus\" data-url=\"https://blog.kakaocdn.net/dn/KFe1Y/btsIjaSy1YO/PJ9kfxYH8Td6WLhIXjHQOk/img.png\"></span>사내 메타 데이터 관리 사이트</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사내 Meta data를 관리하는 사이트에서 표준 단어로 검색을 해봅니다. 이는 \"속성\"을 뜻하는 Attribute의 축약형과 동일합니다. 따라서 이 경우에는 \"<i>ATRC</i>\"로 축약형을 정하였습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Ride는 글자 수가 적기 때문에<span>&nbsp;</span><i>Ride</i><span>&nbsp;</span>그대로 사용해도 무방하다고 판단했고, Passenger는 탑승객의 항공업계 공식 약어인 \"<i>PAX</i>\"를 사용하기로 하였습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<div id=\"SE-edf0f392-5921-469f-8fbd-f17abe35c85f\" style=\"color: #333333; text-align: start;\" data-compid=\"SE-edf0f392-5921-469f-8fbd-f17abe35c85f\" data-a11y-title=\"사진\">\n<div>\n<div data-unitid=\"\" data-compid=\"SE-edf0f392-5921-469f-8fbd-f17abe35c85f\" data-direction=\"top\">\n<div>\n<div id=\"SE-edf0f392-5921-469f-8fbd-f17abe35c85f\">\n<div data-unitid=\"SE-edf0f392-5921-469f-8fbd-f17abe35c85f\" data-compid=\"\" data-direction=\"top\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"936\" data-origin-height=\"583\"><span data-url=\"https://blog.kakaocdn.net/dn/cTSUf5/btsIieuDaP9/goQwAD99fpdJccHkONTdS1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/cTSUf5/btsIieuDaP9/goQwAD99fpdJccHkONTdS1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcTSUf5%2FbtsIieuDaP9%2FgoQwAD99fpdJccHkONTdS1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"693\" data-origin-width=\"936\" data-origin-height=\"583\"/></span></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">테이블의 논리적인 칼럼명은 주로 한글 표기하고 물리적인 칼럼명은 영문으로 표기합니다. 칼럼의 Data Type은 DBMS 별로 조금씩 달라지긴 하나 보편적인 타입을 선언하였습니다. 그리고 해당 칼럼의 길이를 러프하게 정하고 Null 여부와 초기값 등을 설정하는 표를 만들었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Attraction을 기획하면서 구상한 내용을 담기 위해 테이블에 콘텐츠의 생성, 조회 권한 칼럼을 두었습니다. 이는 추후 유니버스 클럽 고객 만을 위한 Attraction을 만들 수도 있게 하였습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">디지털, 신선식품 등 특정 카테고리 상품군 만을 Ride로 올릴 수 있도록 Attraction Category 테이블을 설계했습니다. Attraction 테이블에 칼럼으로 넣지 않고 Category 테이블을 별도로 만든 이유는 Attraction이 기획전, 상품평, 코너 등에 사용될 수 있다고 판단하여 확장성을 고려한 설계가 필요하다고 느꼈기 때문입니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">데이터를 구조화하는 작업을 테이블의\"정규화\"라고 합니다. 중복 데이터를 없애기 위한 용도로도 사용되지만 여기서는<span>&nbsp;</span><b>데이터베이스의 구조 확장 시 재 디자인 하는 것을 최소화하기 위한 목적으로 사용</b>되었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<div id=\"SE-277c7b5a-3ca0-4429-9688-91b54c0432ea\" style=\"color: #333333; text-align: start;\" data-compid=\"SE-277c7b5a-3ca0-4429-9688-91b54c0432ea\" data-a11y-title=\"사진\">\n<div>\n<div data-unitid=\"\" data-compid=\"SE-277c7b5a-3ca0-4429-9688-91b54c0432ea\" data-direction=\"top\">\n<div>\n<div id=\"SE-277c7b5a-3ca0-4429-9688-91b54c0432ea\">\n<div>&nbsp;</div>\n<div data-unitid=\"SE-277c7b5a-3ca0-4429-9688-91b54c0432ea\" data-compid=\"\" data-direction=\"top\"><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"936\" data-origin-height=\"457\"><span data-url=\"https://blog.kakaocdn.net/dn/b5q0cX/btsIg2IGGrl/B38UcYfAvDZ8P1KL9LoKU1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/b5q0cX/btsIg2IGGrl/B38UcYfAvDZ8P1KL9LoKU1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb5q0cX%2FbtsIg2IGGrl%2FB38UcYfAvDZ8P1KL9LoKU1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"693\" data-origin-width=\"936\" data-origin-height=\"457\"/></span></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Ride는 우리 사이트의 상품과 연동할 수 있어야 했습니다. 이번 BSD에서는 BSD 기간에 태그가 붙은 상품을 구매한 경우에만 구매 내역에서 불러와 Ride Goods로 등록할 수 있게 하였습니다. 그 외 좋아요를 저장하는 Ride Recommend 테이블과 신고할 수 있는 Ride Report 테이블, 댓글을 저장할 Ride Comment 테이블을 설계하였습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"789\" data-origin-height=\"486\"><span data-url=\"https://blog.kakaocdn.net/dn/IvI1K/btsIhu5VM4R/cllKG7H66DWMeIDKbhLzR0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/IvI1K/btsIhu5VM4R/cllKG7H66DWMeIDKbhLzR0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FIvI1K%2FbtsIhu5VM4R%2FcllKG7H66DWMeIDKbhLzR0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"789\" data-origin-height=\"486\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Passenger의 경우에는 여태까지 사내에 없던 정말 생소한 개념이기에 테이블 설계하는데 애를 먹었습니다.&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">기본적으로 아래의 문제 상황이 존재했습니다.</p>\n<ol style=\"list-style-type: decimal; color: #333333; text-align: start;\" data-ke-list-type=\"decimal\">\n<li style=\"list-style-type: decimal;\">Gmarket의 id 중복 문제 &rarr; 기본 id들이 있기 때문에 Gmarket은 유니크한 id 식별자를 봐야 함</li>\n<li style=\"list-style-type: decimal;\">G/A 간 회원 식별자가 다른 것 &rarr; Auction 에는 회원 식별자가 없음</li>\n<li style=\"list-style-type: decimal;\">Admin도 참여할 수 있는 서비스 &rarr; Admin id가 G/A와 중복될 수 있음</li>\n</ol>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp; MyG, MyA 등의 내 정보와 연동하기 위해선 타 팀과의 논의가 필수불가결합니다. 하지만 커뮤니케이션 비용 절감 및 확장 가능성을 고려해 (지마켓 그 너머..) 유저아이디, 회원 식별자, 사이트 종류 세 가지 속성을 이용해 기존 지/옥/Admin 계정 정보와 논리적인 Relation을 맺는 것이 합리적이라 판단했습니다. 지마켓, 옥션, Admin 계정의 유저 id는 중복될 수가 있으므로 pax의 id 칼럼을 만들어 유저 id로 넣어두되 사이트 종류 칼럼으로 구분할 수 있습니다</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><span>따라서 Passenger 테이블의 pk</span><span>&nbsp;만을 보고 유일한 탑승객임을 보장할 수 있게 되었습니다.</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">추후 해당 승객의 등급, 뱃지 등 게이미픽케이션 요소를 넣기 위한 칼럼도 정의하였습니다.<span>&nbsp;</span><span>해당 탑승객에 대한 정보는 Passenger 테이블에만 저장됩니다.</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이 모든 속성은 G-world 서비스에서만 이용하는 것이기 때문에 개인정보를 저장하지 않는다는 것이 중요했습니다. (개인정보 보호테이블이 되면 Meta System 내에서 별도로 관리되어 관리 포인트가 많아집니다.)</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">기본적으로 모든 테이블에는 Insert Operator, Update Operator와 관련한 칼럼이 포함되어야 합니다. 그래서 해당 칼럼에 생성 승객과 수정 승객 번호를 넣으려고 했습니다. 그러나 담당 DA분께서 아래와 같은 가이드를 주셨습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">&nbsp;Insert Operator, Update Operator는 이 데이터를 (ROW) 만들거나 수정한 시스템(또는 플랫폼) 정보여야 합니다.<br />즉, 시스템명, Application명, Host 정보명(Pod명) 등을 뜻하며, 고객의 개인정보(로그인 ID 등)를 저장해서는 안됩니다.</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">따라서 별도로 공통 칼럼을 만들어 모든 테이블에 전부 넣어주었습니다.&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_edited_common-column.png\" data-origin-width=\"954\" data-origin-height=\"471\"><span data-url=\"https://blog.kakaocdn.net/dn/bwfs1w/btsIhurkrDl/sGZFl2RK61fQFdyxSElxM0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bwfs1w/btsIhurkrDl/sGZFl2RK61fQFdyxSElxM0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbwfs1w%2FbtsIhurkrDl%2FsGZFl2RK61fQFdyxSElxM0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_edited_common-column.png\" data-origin-width=\"954\" data-origin-height=\"471\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">설계는 항상 꼼꼼해야 하지만 칼럼 추가나 수정은 개발되는 기간 내내 발생할 수 있기 때문에 너무 완벽함을 추구해선 안됩니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">설계를 마치고 테이블을 생성했습니다.</h4>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">사내에서 주제영역으로 불리는 개념이 있는데 Database의 schema라고 생각해 주시면 이해가 잘 될 것 같습니다. 물리적인&nbsp;스키마명을&nbsp;통일해&nbsp;사용하지만&nbsp;실제&nbsp;주제영역은&nbsp;Meta&nbsp;데이터&nbsp;관리&nbsp;시스템을&nbsp;통해&nbsp;관리됩니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">G-world는 신규 서비스이므로 Attraction이라는 이름의 새로운 주제영역을 신청하였습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_edited_erd.png\" data-origin-width=\"2360\" data-origin-height=\"1727\"><span data-url=\"https://blog.kakaocdn.net/dn/bQVQLO/btsIhNRLYd7/Q5LlfPnWe5RrgFCKZotKI0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bQVQLO/btsIhNRLYd7/Q5LlfPnWe5RrgFCKZotKI0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbQVQLO%2FbtsIhNRLYd7%2FQ5LlfPnWe5RrgFCKZotKI0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_edited_erd.png\" data-origin-width=\"2360\" data-origin-height=\"1727\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">위처럼 Entity를 선언하고 Entity끼리의 Relationship을 맺어주면 ERD가 완성됩니다. 물리적, 논리적 ERD를 각각 구성해야 합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">참고로 사내에서는 실제 테이블이 생성될 때 외래키(FK)를 반영하지 않습니다. 외래키 라고 하는 것은 두 테이블을 연결시켜 주는 다리라고 생각하면 이해가 빠른데 Ride 테이블에 상위 테이블인 Attraction의 키 값이 있거나 Ride Goods 테이블에 Ride의 키 값이 들어있는 것을 말합니다. 보통 관계형 데이터베이스에 대해 배울 때는 PK와 FK 설정을 통한 데이터 무결성, 정합성 보장을 한다고 하지만 성능, 개발, 유지보수에 있어서 trade off 관계이기 때문에 현업에서는 물리적인 fk는 정의하지 않는 편입니다. 그러므로 Meta 시스템을 통해 정합성을 보장하려고 하죠.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h4 style=\"color: #000000; text-align: start;\" data-ke-size=\"size20\">이제 G-World를 소개하기로 했습니다.</h4>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">지난 일주일 간의 개발자들이 기획 / 설계한 것을 가지고 기획팀, 디자인팀과 자리를 마련해 팀장님이 처음으로 G-World에 대해 말씀드렸습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_edited_g월드 회의.png\" data-origin-width=\"724\" data-origin-height=\"446\"><span data-url=\"https://blog.kakaocdn.net/dn/bulzFh/btsIjxfTapb/NmK8ZUWiUO5GvkZpPOngo0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bulzFh/btsIjxfTapb/NmK8ZUWiUO5GvkZpPOngo0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbulzFh%2FbtsIjxfTapb%2FNmK8ZUWiUO5GvkZpPOngo0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_edited_g월드 회의.png\" data-origin-width=\"724\" data-origin-height=\"446\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: center;\" data-ke-size=\"size16\">걱정반 기대반이었습니다. 기획 / 디자인 리소스가 부족하면 이번 BSD에 보여주기는 힘들 것 같았습니다.&nbsp;</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">해봅시다!</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">다행히 긍정적으로 검토해 주시고 챌린지 해보자는 뜻이 모아졌습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이번 BSD는 5월 7일부터 시작했으므로 2달이 남아있었지만 QA 기간까지 끝내려면&nbsp;<b>한 달</b><span>&nbsp;</span>안에 기획 / 디자인 / 퍼블리싱 / 개발을 모두 마쳐야 했습니다.<s> (<b>네?! 다음 달 까지요!?</b>)</s></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><span>BSD에 진행하는 것이 확정이 되고 전 예정대로 휴가를 가게 되었습니다. 그 사이 팀원분들이 울퉁불퉁한 설계도에 필요한 테이블과 칼럼을 추가해 주시면서 무사히 G-world의 데이터베이스가 생성될 수 있었습니다.</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\"><span>다음 편에는 전체적인 Data Flow와 기술스택에 대해 소개해드리겠습니다.</span></p>",
        "contentSnippet": "안녕하세요. Web Frontend팀 이민하입니다.\n \n지난 빅스마일데이에 첫 론칭한 꿀템 피드 서비스! 이 서비스를 만들기 위한 여정을 여러분께 소개드리려고 합니다.\n \nIntro\n시작은 디지털 빅세일이 끝난 2월 말.. 저희 팀장님의 한마디에서 시작했습니다.\n\"챗GBT를 우리만 보기에 아깝지 않아..!?\"\n\n\n챗GBT(Gmarket Best iTem)는 임직원분들이 직접 추천하는 상품을 모아둔 페이지로 하나하나가 진짜 꿀템입니다!\n \n아깝다고 생각했습니다. 저도 GBT를 보며 많이 샀기 때문에 고객도 이 페이지를 같이 보면 구매가 많이 일어날 것이라고 생각했습니다.\n추가로 고객들이 게시글을 작성할 수 있다면..? 그러면 고객들이 우리 사이트에서 놀 수 있는 공간이 되지 않을까?\n또한 사내에서도 우리 프러덕에 커뮤니티 기능을 넣어보자는 니즈가 있었다고 들었습니다.\n자신감이 생기기 시작했습니다. 우리 사이트에 새로운 활기를 불어넣어 줄 수 있을 것 같은 그런 자신감이 생겼습니다.\n만들 수 있을 것 같은 기대감에 하나 잊어버린 것이 있었습니다.\n\"아 맞다 나 신규 서비스 만들어 본 적 없지!\"\n \n네. 저는 입사하고 이벤트 플랫폼, 한반도 기획전, 패턴6를 담당하면서 기존 서비스의 개선 작업을 주로 해왔고 \"쇼룸\"이라는 서비스를 준비 중이었으나 아직 신규 서비스를 론칭해 본 경험은 없었습니다. 그렇기 때문에 어디서부터 무엇을 작업해야 할지 머릿속에 그려지지 않았습니다.\n \n이 발표는 신규 서비스를 개발하려고 할 때 무엇을 준비해야 할지 막막한 \"개발자\"분들이 시행착오를 줄일 수 있도록 도움을 드리고자 준비하게 되었습니다.\n \n \n지속 가능한 개발을 위한 설계\n지속 가능한 설계란 보통 환경의 수용능력 범위 내에서 개발하는 것을 말하는, 도시설계에서 사용하는 개념인데요, 어플리케이션 개발에 있어서 개발 비용이 너무 많이 소모되지 않으면서 꾸준히 디벨롭하고 개선할 수 있는 프러덕을 만드는 것과 일맥상통한다고 생각합니다. 그리고 이를 위해 확장성을 고려한 설계가 필요했습니다.\n \n첫 번째로 고민한 것은 \"네이밍\"이었습니다.\n\n\n개발자에게 가장 어려운 일들\n \n개발자에게 있어 이름을 짓는다는 행위는 단순히 부르기 위한 목적보다 더 큰 의미가 있습니다. 이름만 듣고도 직관적으로 만드는 의도를 이해하는데 도움이 되어야 합니다. 저희도 구현하고자 하는 개념을 포괄할 수 있어야 한다고 생각했습니다. 또한 기존 개념과 헷갈리지 않도록 사내에서 사용되지 않는 단어를 선택해야 했습니다. 그러다 문득\n우리 사이트에서 놀 수 있어야 한다.. → 즐길 거리!? 그러면 게시글을 \"놀이 기구\"에 비유하면 어떨까?\n \n챗GBT는 Padlet이라는 공유 게시판 서비스를 이용하였는데 그 padlet안에 게시글을 포스팅할 수 있는 빈 보드에 해당하는 영역을 \"Attraction\"이라 명명했습니다. 어트랙션은 놀이 공원의 놀이 기구라는 뜻으로 사용되곤 하지만 실제로는 매력, 즐길 거리, 명소 등의 뜻을 가지고 있습니다. 부동산 개발 업계에서는 도시의 랜드마크나 코엑스의 별마당 도서관처럼 상업 시설 내 차별화를 두는 장소를 어트랙션이라고 부르기도 합니다. \nAttraction에 들어갈 게시글 하나하나는 놀이기구, 탈 것을 의미하는 \"Ride\"로 부르기로 하였습니다. Attraction 하위에 존재하며 등록, 수정이 가능한 컨텐츠입니다.해당 프로젝트에서 가장 중요한 개념이며 Ride의 퀄리티에 따라 이 서비스의 흥행이 정해질 것이라 생각했습니다.\n마지막으로 Ride를 업로드할 수 있는 사람을 지칭하는 개념이 필요했습니다. 이 사람은 지마켓, 옥션의 회원 일 수도, 셀러 고객일 수도, 임직원 일 수도 있기 때문에 이를 포괄하는 개념이어야 했습니다.\n그러므로 Ride의 탑승객을 의미하는 \"Passenger\"로 명명했습니다. 그렇게 핵심 개념인 Attraction, Ride, Passenger 가 탄생했고 자연스레 이 프로젝트의 이름은 지마켓의 놀이공원, \"G-world\"가 되었습니다.\n \n확장성을 염두에 두고 하위 속성을 정의하기 시작했습니다.\n \n\n\n\n\n\n프로젝트 이름을 정하고나서 머릿속에 있는 내용을 화이트보드에 정리해봤습니다.\n \n \n팀원들과 본격적으로 G-world의 얼개를 짜기 시작했습니다. 개발자가 기획하는 것이다 보니 어떤 식으로 접근해야 할지 몰랐습니다. 해당 페이지를 어디에 노출시킬 것이며 어떤 속성이 필요한지를 고민했습니다.\nAttraction은 챗GBT처럼 저희 영업본부 임직원 분들이 올릴 수도 있고, 고객들도 업로드할 수 있어야 했고 상품을 공유했을 때 구매 적립받을 수 있도록 Linkrew 와의 연동이 필요하다고 생각했습니다. (Linkrew 란 누구나 상품 링크를 공유해 수익을 셰어 받는 지마켓의 신규 제휴서비스입니다.)\n \nRide는 상품은 구매 내역에서 불러오거나, 구매 내역 없이 단순히 상품을 추천하거나, 임직원이 올릴 수 있는 3가지 형태가 있을 수 있다고 판단했습니다. 그리고 구매 기록에 기반한 태그(첫 구매시기, 재구매 횟수 표시 등)를 게시하여 Ride의 리뷰 신뢰도를 높일 수 있는 방안을 생각해 보았습니다. 또한 Ride 내에 승객이 직접 해시태그를 넣고 이를 필터링할 수 있는 기능, 좋아요 표시를 통한 인기 Ride에 대한 리스팅 기능 등 정말 다양한 방안이 나왔습니다.\nRide의 상품 카테고리를 통해 특정 기획전 콘셉트에 맞는, 혹은 유저가 원하는 상품의 Ride를 모아볼 수 있는 필터링 기능도 넣었습니다. 댓글 기능도 들어가야 커뮤니티로써 기능한다고 생각했습니다.\n \nContent Quality에 대한 우려가 가장 큰 고민이었는데, 이용약관 동의 하기 위한 동선, 동일 상품의 Ride가 올라올 경우 모아서 보여준다던지, 콘텐츠가 활발하게 업로드될 수 있도록 승인 대신 선 게시 후 모니터링이 필요하다고 생각했고 이를 위한 신고 기능도 개발할 필요가 있음을 인지했습니다.\n \n사흘 동안 얼추 구상한 내용을 팀장님께 말씀드리고 피드백을 받았습니다.  최초 아이디어를 팀장님이 주신만큼 개발 가능한 범위와 설계 타당성에 대한 검증을 해주시고 조언에 따라 수정을 거쳤습니다.\n이번 빅스마일데이(5월)에 적용할 POC(Proof of Concept)를 만들어보자!\n \n이 때는 3월 초. 그리고 저는 3월 중순에 오랜 기간 염원해 오던 미국 여행을 앞두고 있었습니다....\n여행 가서 노트북을 펼치지 않으려면 지금 빠르게 설계를 마쳐야 한다는 위기의식이 생겨났습니다. (네? 다음 달까지요?)\n \n본격적으로 테이블을 설계할 때가 됐습니다.\n\n\n저는 개인적으로 PostgreSQL을 자주 사용해 왔습니다.\n \n가장 먼저 해야 할 일은 “어떤 DBMS를 선택해야 하는가?”입니다. 사내에선 다양한 DBMS를 이용해 다양한 프러덕을 만들고 있습니다. 각 DB는 저마다의 장단점을 가지고 있습니다.\n저장할 데이터 양이 많지는 않으면서도 POC 끝나고 데이터의 사용성을 고려했을 때 정합성이 가장 중요하다고 생각했습니다. 따라서 팀 내에선 성능과 안전성을 고려하면 Oracle을 사용하는 데에 이견이 없었습니다. 더불어 이번 BSD는 지마켓만 오픈하지만 옥션으로 확장할 수 있다는 생각도 있었습니다.\n \n테이블 명은 ATTRACTION, RIDE, PASSENGER가 정해졌지만 테이블 내 속성을 의미하는 칼럼은 해당 키워드를 사용하기에 길다고 느껴졌습니다. 그래서 각 단어의 축약형이 필요했는데 보통 개발자들은 영어 단어의 첫 글자를 제외한 모음을 지워서 3~5글자로 만듭니다. Attraction의 모음을 없애면 Attr이죠. 제가 방금 네이밍에 있어서 기존 개념과 헷갈리지 않아야 한다고 말씀드렸습니다. 해당 단어를 현재 사내에서 사용하고 있는지 먼저 찾아볼 필요가 있습니다.\n \n\n\n사내 메타 데이터 관리 사이트\n \n사내 Meta data를 관리하는 사이트에서 표준 단어로 검색을 해봅니다. 이는 \"속성\"을 뜻하는 Attribute의 축약형과 동일합니다. 따라서 이 경우에는 \"ATRC\"로 축약형을 정하였습니다.\nRide는 글자 수가 적기 때문에 Ride 그대로 사용해도 무방하다고 판단했고, Passenger는 탑승객의 항공업계 공식 약어인 \"PAX\"를 사용하기로 하였습니다.\n \n\n\n\n\n\n\n\n \n \n테이블의 논리적인 칼럼명은 주로 한글 표기하고 물리적인 칼럼명은 영문으로 표기합니다. 칼럼의 Data Type은 DBMS 별로 조금씩 달라지긴 하나 보편적인 타입을 선언하였습니다. 그리고 해당 칼럼의 길이를 러프하게 정하고 Null 여부와 초기값 등을 설정하는 표를 만들었습니다.\nAttraction을 기획하면서 구상한 내용을 담기 위해 테이블에 콘텐츠의 생성, 조회 권한 칼럼을 두었습니다. 이는 추후 유니버스 클럽 고객 만을 위한 Attraction을 만들 수도 있게 하였습니다. \n디지털, 신선식품 등 특정 카테고리 상품군 만을 Ride로 올릴 수 있도록 Attraction Category 테이블을 설계했습니다. Attraction 테이블에 칼럼으로 넣지 않고 Category 테이블을 별도로 만든 이유는 Attraction이 기획전, 상품평, 코너 등에 사용될 수 있다고 판단하여 확장성을 고려한 설계가 필요하다고 느꼈기 때문입니다.\n데이터를 구조화하는 작업을 테이블의\"정규화\"라고 합니다. 중복 데이터를 없애기 위한 용도로도 사용되지만 여기서는 데이터베이스의 구조 확장 시 재 디자인 하는 것을 최소화하기 위한 목적으로 사용되었습니다.\n \n \n\n\n\n\n\n\n\n \nRide는 우리 사이트의 상품과 연동할 수 있어야 했습니다. 이번 BSD에서는 BSD 기간에 태그가 붙은 상품을 구매한 경우에만 구매 내역에서 불러와 Ride Goods로 등록할 수 있게 하였습니다. 그 외 좋아요를 저장하는 Ride Recommend 테이블과 신고할 수 있는 Ride Report 테이블, 댓글을 저장할 Ride Comment 테이블을 설계하였습니다. \n \n\n\n \nPassenger의 경우에는 여태까지 사내에 없던 정말 생소한 개념이기에 테이블 설계하는데 애를 먹었습니다. \n기본적으로 아래의 문제 상황이 존재했습니다.\nGmarket의 id 중복 문제 → 기본 id들이 있기 때문에 Gmarket은 유니크한 id 식별자를 봐야 함\nG/A 간 회원 식별자가 다른 것 → Auction 에는 회원 식별자가 없음\nAdmin도 참여할 수 있는 서비스 → Admin id가 G/A와 중복될 수 있음\n \n  MyG, MyA 등의 내 정보와 연동하기 위해선 타 팀과의 논의가 필수불가결합니다. 하지만 커뮤니케이션 비용 절감 및 확장 가능성을 고려해 (지마켓 그 너머..) 유저아이디, 회원 식별자, 사이트 종류 세 가지 속성을 이용해 기존 지/옥/Admin 계정 정보와 논리적인 Relation을 맺는 것이 합리적이라 판단했습니다. 지마켓, 옥션, Admin 계정의 유저 id는 중복될 수가 있으므로 pax의 id 칼럼을 만들어 유저 id로 넣어두되 사이트 종류 칼럼으로 구분할 수 있습니다\n따라서 Passenger 테이블의 pk 만을 보고 유일한 탑승객임을 보장할 수 있게 되었습니다.\n추후 해당 승객의 등급, 뱃지 등 게이미픽케이션 요소를 넣기 위한 칼럼도 정의하였습니다. 해당 탑승객에 대한 정보는 Passenger 테이블에만 저장됩니다.\n이 모든 속성은 G-world 서비스에서만 이용하는 것이기 때문에 개인정보를 저장하지 않는다는 것이 중요했습니다. (개인정보 보호테이블이 되면 Meta System 내에서 별도로 관리되어 관리 포인트가 많아집니다.)\n기본적으로 모든 테이블에는 Insert Operator, Update Operator와 관련한 칼럼이 포함되어야 합니다. 그래서 해당 칼럼에 생성 승객과 수정 승객 번호를 넣으려고 했습니다. 그러나 담당 DA분께서 아래와 같은 가이드를 주셨습니다.\n \n Insert Operator, Update Operator는 이 데이터를 (ROW) 만들거나 수정한 시스템(또는 플랫폼) 정보여야 합니다.\n즉, 시스템명, Application명, Host 정보명(Pod명) 등을 뜻하며, 고객의 개인정보(로그인 ID 등)를 저장해서는 안됩니다.\n \n따라서 별도로 공통 칼럼을 만들어 모든 테이블에 전부 넣어주었습니다. \n\n\n \n설계는 항상 꼼꼼해야 하지만 칼럼 추가나 수정은 개발되는 기간 내내 발생할 수 있기 때문에 너무 완벽함을 추구해선 안됩니다.\n \n설계를 마치고 테이블을 생성했습니다.\n사내에서 주제영역으로 불리는 개념이 있는데 Database의 schema라고 생각해 주시면 이해가 잘 될 것 같습니다. 물리적인 스키마명을 통일해 사용하지만 실제 주제영역은 Meta 데이터 관리 시스템을 통해 관리됩니다.\n \nG-world는 신규 서비스이므로 Attraction이라는 이름의 새로운 주제영역을 신청하였습니다.\n\n\n \n위처럼 Entity를 선언하고 Entity끼리의 Relationship을 맺어주면 ERD가 완성됩니다. 물리적, 논리적 ERD를 각각 구성해야 합니다.\n \n참고로 사내에서는 실제 테이블이 생성될 때 외래키(FK)를 반영하지 않습니다. 외래키 라고 하는 것은 두 테이블을 연결시켜 주는 다리라고 생각하면 이해가 빠른데 Ride 테이블에 상위 테이블인 Attraction의 키 값이 있거나 Ride Goods 테이블에 Ride의 키 값이 들어있는 것을 말합니다. 보통 관계형 데이터베이스에 대해 배울 때는 PK와 FK 설정을 통한 데이터 무결성, 정합성 보장을 한다고 하지만 성능, 개발, 유지보수에 있어서 trade off 관계이기 때문에 현업에서는 물리적인 fk는 정의하지 않는 편입니다. 그러므로 Meta 시스템을 통해 정합성을 보장하려고 하죠.\n \n이제 G-World를 소개하기로 했습니다.\n지난 일주일 간의 개발자들이 기획 / 설계한 것을 가지고 기획팀, 디자인팀과 자리를 마련해 팀장님이 처음으로 G-World에 대해 말씀드렸습니다.\n \n\n\n걱정반 기대반이었습니다. 기획 / 디자인 리소스가 부족하면 이번 BSD에 보여주기는 힘들 것 같았습니다. \n해봅시다!\n \n다행히 긍정적으로 검토해 주시고 챌린지 해보자는 뜻이 모아졌습니다.\n이번 BSD는 5월 7일부터 시작했으므로 2달이 남아있었지만 QA 기간까지 끝내려면 한 달 안에 기획 / 디자인 / 퍼블리싱 / 개발을 모두 마쳐야 했습니다. (네?! 다음 달 까지요!?)\nBSD에 진행하는 것이 확정이 되고 전 예정대로 휴가를 가게 되었습니다. 그 사이 팀원분들이 울퉁불퉁한 설계도에 필요한 테이블과 칼럼을 추가해 주시면서 무사히 G-world의 데이터베이스가 생성될 수 있었습니다.\n \n다음 편에는 전체적인 Data Flow와 기술스택에 대해 소개해드리겠습니다.",
        "guid": "https://dev.gmarket.com/110",
        "categories": [
          "Backend"
        ],
        "isoDate": "2024-06-30T10:05:49.000Z"
      },
      {
        "creator": "지마켓 기술블로그",
        "title": "조회 속도 개선하기 (ESM '문의하기' 기능 개편)",
        "link": "https://dev.gmarket.com/109",
        "pubDate": "Fri, 28 Jun 2024 14:33:09 +0900",
        "author": "지마켓 기술블로그",
        "comments": "https://dev.gmarket.com/109#entry109comment",
        "content": "<p data-ke-size=\"size16\"><span style=\"color: #000000;\">안녕하세요.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">Seller &amp; SD Engineering팀의 김민우입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이번 글은 ESM(지마켓 판매자 사이트)&nbsp;<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Apple SD Gothic Neo', Arial, sans-serif; letter-spacing: 0px;\">개편 중 '문의하기' 개발을 맡으며 겪었던 어려움과 이를 해결해 나가는 몇 가지 방법들을 소개하고자 합니다. 제가 개발 맡은 부분은 판매자에게&nbsp;<span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Apple SD Gothic Neo', Arial, sans-serif; letter-spacing: 0px;\">구매자의 문의내용을 담당하는 '게시판 문의', 그리고 CS(고객센터)에서 주는 '긴급 메시지'를 통합하여 지마켓과 옥션&nbsp; 두 사이트에 대해 각각 보여주는 통합 페이지를 개편시키는 일이었습니다.</span></span></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">각설하고 조회 성능을 올린 결과물부터 영상으로 보시죠.</span></p>\n<figure data-ke-type=\"video\" data-ke-style=\"alignCenter\" data-video-host=\"kakaotv\" data-video-url=\"https://tv.kakao.com/v/447762747\" data-video-thumbnail=\"https://scrap.kakaocdn.net/dn/uM4TY/hyWrN3VHEK/pIeDip5JAalfR0g4qhqofK/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080,https://scrap.kakaocdn.net/dn/cYLBr1/hyWrMxdO3h/a3JB4tA88U0J5SvKlXEoQ0/img.jpg?width=1920&amp;height=1080&amp;face=0_0_1920_1080\" data-video-width=\"860\" data-video-height=\"484\" data-video-origin-width=\"860\" data-video-origin-height=\"484\" data-ke-mobilestyle=\"widthContent\" data-video-play-service=\"daum_tistory\" data-original-url=\"\" data-video-title=\"\"><iframe src=\"https://play-tv.kakao.com/embed/player/cliplink/447762747?service=daum_tistory\" width=\"860\" height=\"484\" frameborder=\"0\" allowfullscreen=\"true\"></iframe>\n<figcaption style=\"display: none;\"></figcaption>\n</figure>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 영상에서 보셨듯이, 대형 셀러의 경우 한 페이지를 로드하는 데 기본 몇십 초가 걸립니다. 페이지를 넘길 때조차 마찬가지입니다. 상품이 많아질수록 문의도 증가하기 마련인데, 모든 문의에 일일이 답변하기는 어렵기 때문에 미응답으로 남는 경우가 많습니다. 이러한 어드민 페이지를 개편할 때 보통 프론트엔드 중심으로 성과를 드러내는 경우가 많았고, 저 역시 해당 프로젝트를 처음 배정받았을 때는 성능 개선에 대한 기획은 없었습니다. 백엔드 로직은 그대로 두되 UI/UX를 고치는 것이 본래 목적이었습니다. 하지만 백엔드 개발이 메인인 저는 충격적인 성능을 목격하고서, 이번 프로젝트에서 백엔드에서도 성과를 낼 수 있음을 보여주기 위해, 두려움과 동시에 최선을 다해야겠다고 마음먹었습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">저에게 주어진 과제의 걸림돌이었던 점을 나열해보겠습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>1. 답변까지 복수로 조회</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 구버전에서는 문의를 클릭해야만 해당 문의에 대한 답변을 볼 수 있었습니다. 많은 판매자 분들이 답변을 일괄적으로 처리하지 못하고 하나하나 처리해야 한다는 어려움을 호소해 주셨습니다. 그래서 새로운 버전에서는 답변 칸을 문의 옆에 짝지어 나열하는 UI/UX로 변경하게 되었습니다. 그러나 개발자로서 이미 몇십 초가 걸리는 조회 로직에 답변까지 함께 짝지어서 조회하려면 얼마나 더 오래 걸릴지 막막하기만 했습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"968\" data-origin-height=\"573\"><span data-url=\"https://blog.kakaocdn.net/dn/v6B6B/btsIhiwoEzq/oKejEx2d3Ueb2Bbuqd2GB1/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/v6B6B/btsIhiwoEzq/oKejEx2d3Ueb2Bbuqd2GB1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fv6B6B%2FbtsIhiwoEzq%2FoKejEx2d3Ueb2Bbuqd2GB1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"698\" height=\"413\" data-origin-width=\"968\" data-origin-height=\"573\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>2. 네 가지의 도메인을 데이터 구조는 그대로 두고 통합</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">앞서 서두에서 언급했듯이, 지마켓/옥션 각각의 '게시판 문의'와 '긴급 메시지'라는 비슷하지만 엄연히 다른 도메인을 한 가지 표에 통합해야 했습니다. 흔히 1번에 이어서 ESM 전용으로 조회하기 좋은 단순한 데이터베이스를 구상해 본다면 다음과 같습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"609\" data-origin-height=\"333\"><span data-url=\"https://blog.kakaocdn.net/dn/3u6UT/btsIgn6mYkn/PtNTU1ZVXHxsQaDplur87K/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/3u6UT/btsIgn6mYkn/PtNTU1ZVXHxsQaDplur87K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F3u6UT%2FbtsIgn6mYkn%2FPtNTU1ZVXHxsQaDplur87K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"609\" data-origin-height=\"333\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">서로 다른 정책과 프로세스를 가진 제각각&nbsp;2000년대 중반에 아우르는 유서 깊은 레거시들을&nbsp;전부 다 조사하는 것도 일이었지만, 데이터 자체를 그대로 둔 채로 통합하면서 속도 성능을 내야 하는 건 생각보다 큰 과제였습니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"639\" data-origin-height=\"526\"><span data-url=\"https://blog.kakaocdn.net/dn/d1sfXD/btsIgMY6LQF/kjPI2CtcBxsdjjFTlu6FaK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/d1sfXD/btsIgMY6LQF/kjPI2CtcBxsdjjFTlu6FaK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd1sfXD%2FbtsIgMY6LQF%2FkjPI2CtcBxsdjjFTlu6FaK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"639\" data-origin-height=\"526\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">데이터를&nbsp;분석하면서&nbsp;충격적이었던&nbsp;점은&nbsp;옥션&nbsp;긴급&nbsp;메시지를&nbsp;제외하고는&nbsp;'질문'과&nbsp;'답변'이&nbsp;같은&nbsp;테이블에&nbsp;섞여&nbsp;들어가&nbsp;있다는&nbsp;점이었습니다.&nbsp;한&nbsp;질문에&nbsp;대한&nbsp;답변을&nbsp;찾으려면&nbsp;셀프&nbsp;조인을&nbsp;해야&nbsp;했습니다.&nbsp;그렇다고&nbsp;파티션이&nbsp;되어&nbsp;있는&nbsp;것도&nbsp;아니었습니다.&nbsp;질문과&nbsp;답변이&nbsp;1:1&nbsp;관계도&nbsp;아니었고,&nbsp;한&nbsp;개의&nbsp;질문에&nbsp;대해&nbsp;여러&nbsp;번&nbsp;답변이&nbsp;가능한&nbsp;구조였습니다.&nbsp;가뜩이나&nbsp;답변&nbsp;하나&nbsp;가져오는&nbsp;데도&nbsp;몇십&nbsp;초가&nbsp;걸리는&nbsp;상황에서,&nbsp;같은&nbsp;테이블에서&nbsp;셀프&nbsp;조인하고&nbsp;여러&nbsp;답변&nbsp;중&nbsp;가장&nbsp;최신의&nbsp;답변을&nbsp;가져와야&nbsp;했습니다.</span><br /><br /><span style=\"color: #000000;\">통상적으로&nbsp;이런&nbsp;통합된&nbsp;페이지의&nbsp;성능을&nbsp;높이려면&nbsp;데이터&nbsp;구조부터&nbsp;바꾸거나&nbsp;기존&nbsp;테이블들을&nbsp;그대로&nbsp;두되,&nbsp;새로&nbsp;구상한&nbsp;테이블에&nbsp;기존&nbsp;테이블의&nbsp;데이터를&nbsp;배치나&nbsp;스트림을&nbsp;통해&nbsp;미리&nbsp;최신의&nbsp;답변을&nbsp;집계하고&nbsp;데이터를&nbsp;통합해서&nbsp;주기적으로&nbsp;업데이트하는&nbsp;것이&nbsp;최적의&nbsp;방법입니다.&nbsp;그러나&nbsp;개발&nbsp;공수&nbsp;기간이&nbsp;짧아&nbsp;이&nbsp;방법을&nbsp;적용할&nbsp;수&nbsp;없었습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>3. 대용량의 데이터베이스</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 해당 테이블들의 정확한 데이터양 수치를 서술하기에는 보안상의 이슈가 있을 것 같아 대략적으로 말씀드리자면, 상품 및 주문 도메인 관련 테이블들과 비슷하게 엄청난 볼륨을 가지고 있었습니다. 데이터베이스들의 생성 시기와 가장 오래된 데이터의 날짜를 비교해 보면, 그나마 한 번쯤은 데이터를 정리한 것 같습니다만, 근 10년간의 게시판 문의와 긴급 메시지들이 쌓여 있다는 점에서도 두려웠습니다. 대용량 데이터를 주로 다뤘던 경험상, 데이터베이스의 크기 자체는 대용량까지는 아니지만, 행(Row)의 수는 중견급 마켓의 상품 수와 맞먹을 정도였습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이&nbsp;때문에&nbsp;인덱스를&nbsp;새로&nbsp;추가하는&nbsp;것도&nbsp;이미&nbsp;큰&nbsp;데이터베이스에&nbsp;무리가&nbsp;가기에&nbsp;리스크가&nbsp;있었고,&nbsp;오래된&nbsp;데이터를&nbsp;비우는&nbsp;일도&nbsp;마이그레이션과&nbsp;더불어&nbsp;파티셔닝에&nbsp;신경&nbsp;써야&nbsp;했기&nbsp;때문에&nbsp;개발&nbsp;공수를&nbsp;맞추기에는&nbsp;부족했습니다.&nbsp;따라서&nbsp;추후&nbsp;옵션으로&nbsp;고려할&nbsp;수는&nbsp;있으나,&nbsp;기존&nbsp;데이터베이스&nbsp;테이블들을&nbsp;건드는&nbsp;일&nbsp;자체가&nbsp;당장은&nbsp;어렵다는&nbsp;것이&nbsp;확실했습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1003\" data-origin-height=\"941\"><span data-url=\"https://blog.kakaocdn.net/dn/dl47UQ/btsIfv45NBO/KzztgMTJMe226HdN5EV5Uk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/dl47UQ/btsIfv45NBO/KzztgMTJMe226HdN5EV5Uk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdl47UQ%2FbtsIfv45NBO%2FKzztgMTJMe226HdN5EV5Uk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"347\" height=\"326\" data-origin-width=\"1003\" data-origin-height=\"941\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이런 비슷한 상황에서 조회 속도를 어떻게 올릴 것인가를 고민하는 다른 여러 개발자들을 위해 제가 해결해 나간 과정을 소개합니다.&nbsp;</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">우선 방법 소개에 앞서, 잠깐 언급할 개념이 있습니다. 개발을&nbsp;대학&nbsp;전공으로&nbsp;배울&nbsp;때&nbsp;가장&nbsp;먼저&nbsp;입문하게&nbsp;되는&nbsp;것이&nbsp;'자료구조'와&nbsp;'알고리즘'&nbsp;수업입니다.&nbsp;'자료구조'는&nbsp;주로&nbsp;공간(메모리)을&nbsp;어떻게&nbsp;효율적으로&nbsp;활용할&nbsp;것인지를&nbsp;다루고,&nbsp;'알고리즘'은&nbsp;소요&nbsp;시간을&nbsp;얼마나&nbsp;줄일&nbsp;수&nbsp;있는지를&nbsp;공부합니다.&nbsp;이&nbsp;둘의&nbsp;관계는&nbsp;시간과&nbsp;공간을&nbsp;대표하는&nbsp;과목들로,&nbsp;컴퓨팅에&nbsp;대한&nbsp;중요한&nbsp;법칙을&nbsp;내포하고&nbsp;있다고&nbsp;생각합니다.&nbsp;일반적으로&nbsp;이&nbsp;시간과&nbsp;공간은&nbsp;반비례&nbsp;관계에&nbsp;있다고&nbsp;보시면&nbsp;됩니다&nbsp;(꼭&nbsp;그런&nbsp;것은&nbsp;아닙니다만&nbsp;대체로&nbsp;그렇습니다).</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">아래 그림처럼 A &rarr; B로 가는 경우의 수를 구하는 문제를 보면, 직접 선을 하나씩 그려가며 A에서 시작해서 B로 가는 선을 10개 그려서 경우의 수를 구할 수도 있습니다. 하지만 이렇게 풀면 시간이 오래 걸리고 결국 OMR 마킹도 못하고 내는 경우도 있을 겁니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"258\" data-origin-height=\"157\"><span data-url=\"https://blog.kakaocdn.net/dn/Mms0t/btsIhgehy5x/JA15Ab5k0j6AL6pmVvyXi1/img.png\" data-phocus=\"phocus\" data-alt=\"출처 : https://blog.naver.com/dongmin9313/221712819012\"><img src=\"https://blog.kakaocdn.net/dn/Mms0t/btsIhgehy5x/JA15Ab5k0j6AL6pmVvyXi1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FMms0t%2FbtsIhgehy5x%2FJA15Ab5k0j6AL6pmVvyXi1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"347\" height=\"211\" data-origin-width=\"258\" data-origin-height=\"157\"/></span><figcaption>출처 : https://blog.naver.com/dongmin9313/221712819012</figcaption>\n</figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000; text-align: start;\">하지만 우리는 아래 그림과 같은 방법으로도 풀 수 있다는 것을 초등학교와 고등학교 수학 시간에 배웠습니다. 이 방법으로는 A와 B를 한 번씩만 보고 넘기며, 각 칸에 정보를 저장해 가며 한 번에 해결할 수 있습니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"350\" data-origin-height=\"225\"><span data-url=\"https://blog.kakaocdn.net/dn/tH6Cy/btsIhxz4Xly/c3TV5YN74ONYOL9lZl6Re0/img.png\" data-phocus=\"phocus\" data-alt=\"출처 : https://blog.naver.com/dongmin9313/221712819012\"><img src=\"https://blog.kakaocdn.net/dn/tH6Cy/btsIhxz4Xly/c3TV5YN74ONYOL9lZl6Re0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FtH6Cy%2FbtsIhxz4Xly%2Fc3TV5YN74ONYOL9lZl6Re0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"355\" height=\"228\" data-origin-width=\"350\" data-origin-height=\"225\"/></span><figcaption>출처 : https://blog.naver.com/dongmin9313/221712819012</figcaption>\n</figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Apple SD Gothic Neo', Arial, sans-serif; letter-spacing: 0px; color: #000000;\">&nbsp; 공교롭게도,&nbsp;이&nbsp;방법을&nbsp;다시&nbsp;자료구조나&nbsp;알고리즘&nbsp;전공&nbsp;수업&nbsp;때&nbsp;파스칼의&nbsp;삼각형을&nbsp;배우며&nbsp;익히게&nbsp;됩니다.&nbsp;이러한&nbsp;프로그래밍&nbsp;기법을&nbsp;DP(동적&nbsp;계획법,&nbsp;dynamic&nbsp;programming)이라고&nbsp;배웁니다.&nbsp;백트래킹을&nbsp;하지&nbsp;않고도&nbsp;메모리를&nbsp;조금&nbsp;더&nbsp;쓰면&nbsp;경우의&nbsp;수를&nbsp;좀&nbsp;더&nbsp;빨리&nbsp;구할&nbsp;수&nbsp;있다는&nbsp;것입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Apple SD Gothic Neo', Arial, sans-serif; letter-spacing: 0px; color: #000000;\">&nbsp; 그러나 메모리와 같은 공간적인 개념은 저장공간의 효율적인 대중화로 인해 개발자들이 크게 신경 쓰지 않게 되었으며, 알고리즘 또한 다양한 라이브러리들이 많아서 코드에서는 잘 드러나지 않아 둘 다 간과되는 경우가 많습니다. 비즈니스에 직결되는 개발의 구현 여부만 신경 쓰다 보니, 구 ESM 문의하기도 처음에는 신경 써서 설계했겠지만, 10여 년이 지난 지금은 여러 요구사항들이 덧붙여져 땜질된 상태였습니다. 결과적으로 일부 구현에만 신경 쓴 여러 코드들이 전체적인 시간복잡도나 공간복잡도를 간과한 것들이 쌓이고 쌓여, 결국 어느새 엄청 느려진 조회 속도를 방치할 수밖에 없었습니다. 저 또한 이번에 개편한 코드가 몇십 년 후에는 땜질되어 느려질 수 있기 때문에, 이 프로젝트에 참여한 개발자들을 골라서 탓하는 것은 옳지 않다고 생각합니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">제가 이토록 시간과 공간의 반비례 관계를 강조해도 잊어버릴 수 있는 분들을 위해, 포켓몬스터 게임의 예를 들어 보겠습니다. 게임에는 '시간'을 관장하는 디아루가와 '공간'을 관장하는 펄기아라는 전설의 포켓몬이 항상 싸웁니다. (이 게임의 버전 이름이 공교롭게도 포켓몬스터 \"DP\"입니다.) 이 둘의 관계를 다시 떠올려 보면, 처리 시간을 줄이기 위해 어떤 방법을 선택해야 할지 판단이 더 빨리 설 것입니다.</span></p>\n<p style=\"color: #333333; text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"dialuga.jpg\" data-origin-width=\"578\" data-origin-height=\"327\"><span data-url=\"https://blog.kakaocdn.net/dn/LvHul/btsIfiZeEoF/wJKsHhJbphk8aNrKU68tn0/img.jpg\" data-phocus=\"phocus\" data-alt=\"출처 : https://www.pokemon.com\"><img src=\"https://blog.kakaocdn.net/dn/LvHul/btsIfiZeEoF/wJKsHhJbphk8aNrKU68tn0/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FLvHul%2FbtsIfiZeEoF%2FwJKsHhJbphk8aNrKU68tn0%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"642\" height=\"363\" data-filename=\"dialuga.jpg\" data-origin-width=\"578\" data-origin-height=\"327\"/></span><figcaption>출처 : https://www.pokemon.com</figcaption>\n</figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">다음은&nbsp;제가&nbsp;이와&nbsp;연관해서&nbsp;실마리를&nbsp;얻고&nbsp;구&nbsp;버전에서&nbsp;신&nbsp;버전으로&nbsp;로직을&nbsp;옮기며&nbsp;성능을&nbsp;해결해&nbsp;나가는&nbsp;부분에&nbsp;대한&nbsp;서술입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>1. 인덱스를 활용하지 못한 경우</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 인덱스는 데이터베이스를 빠르게 조회할 수 있다는 장점이 있지만, 데이터베이스의 각 행(row)을 기준으로 많은 공간을 사용하게 된다는 단점이 있습니다. 이는 공간을 내어주고 시간을 절약한다는 제 본론과 매우 부합하는 개념 중 하나입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 문의&nbsp;리스트를&nbsp;가져오는&nbsp;부분은&nbsp;신&nbsp;버전과&nbsp;구&nbsp;버전이&nbsp;대체로&nbsp;비슷합니다.&nbsp;두&nbsp;버전은&nbsp;동일한&nbsp;데이터베이스&nbsp;테이블을&nbsp;바라보고&nbsp;있으며,&nbsp;주로&nbsp;원하는&nbsp;검색&nbsp;필터를&nbsp;기준으로&nbsp;WHERE&nbsp;절에&nbsp;적용하고,&nbsp;테이블에&nbsp;없는&nbsp;추가적인&nbsp;데이터는&nbsp;따로&nbsp;JOIN을&nbsp;통해&nbsp;가져옵니다.&nbsp;그러나&nbsp;두&nbsp;버전의&nbsp;차이를&nbsp;만든&nbsp;원인&nbsp;중&nbsp;하나는&nbsp;SellerID를&nbsp;통합해서&nbsp;조회하는&nbsp;방법입니다.&nbsp;저희&nbsp;회사&nbsp;정책상&nbsp;ESM을&nbsp;보고&nbsp;있는&nbsp;한&nbsp;셀러는&nbsp;MasterID가&nbsp;있고,&nbsp;그&nbsp;아래에는&nbsp;여러&nbsp;하위&nbsp;SellerID들이&nbsp;있습니다.&nbsp;'문의하기'&nbsp;페이지는&nbsp;이러한&nbsp;MasterID에&nbsp;속한&nbsp;모든&nbsp;SellerID를&nbsp;가지고&nbsp;해당&nbsp;SellerID에게&nbsp;주어진&nbsp;문의들을&nbsp;전부&nbsp;조회해야&nbsp;합니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">가장 크리티컬 했던 요소 중 하나를 꼽자면 다음과 같은 코드입니다. (아래 코드는 예시입니다.)</span></p>\n<pre id=\"code_1719552499697\" class=\"cal\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>foreach (string sellerId in request.sellerList.Split(','))\n{\n    GetList(request); // SQL 실행\n}\n\n//Stored Procedure (SQL)\n\nSELECT ~~~\nFROM TABLE\n//기타 JOIN 생략\nWHERE SELLER_ID = @SELLER_ID\n   AND ~~~~</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">반면 제 것은 다음과 같습니다.</span></p>\n<pre id=\"code_1719552499697\" class=\"pgsql\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>SELECT ~~~~~\nFROM TABLE \n  JOIN STRING_SPLIT(@SELLER_ID_LIST, ',') AS SPLIT ON TABLE.SELLER_ID = SPLIT.value\n  //기타 JOIN 생략\n  WHERE ~~~~~~~</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">단순히 둘의 시간복잡도를 구상했을 때는 s를 셀러의 개수, q를 뽑아낸 문의 개수로 치환한다면 다음과 같습니다.</span><br /><br /></p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li style=\"color: #000000;\"><span style=\"color: #000000;\"><b>기존 접근법</b>:</span>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><span style=\"color: #000000;\">판매자 ID 분리: O(s)</span></li>\n<li><span style=\"color: #000000;\">각&nbsp;판매자별&nbsp;데이터&nbsp;가져오기:&nbsp;O(s&nbsp;*&nbsp;q&nbsp;log&nbsp;q)</span></li>\n<li><span style=\"color: #000000;\">가져온 데이터들 병합: O(s*q)</span></li>\n</ul>\n</li>\n<li style=\"color: #000000;\"><span style=\"color: #000000;\"><b>개선된 접근법</b>:</span>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><span style=\"color: #000000;\">판매자 ID 합치기: O(s)</span></li>\n<li><span style=\"color: #000000;\">SQL 쿼리 실행 및 JOIN: O(s*q)&nbsp; or s가 인덱스가 되어있으면<span style=\"text-align: left;\">&nbsp;O(q log s)</span></span></li>\n</ul>\n</li>\n</ul>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">다행히&nbsp;해당&nbsp;테이블들은&nbsp;SellerID에&nbsp;인덱스가&nbsp;걸려&nbsp;있으므로&nbsp;최종적으로&nbsp;시간복잡도는&nbsp;O(s&nbsp;*&nbsp;q&nbsp;log&nbsp;q)&nbsp;vs&nbsp;O(q&nbsp;log&nbsp;s)가&nbsp;됩니다.&nbsp;아래&nbsp;그래프에서도&nbsp;알&nbsp;수&nbsp;있듯이,&nbsp;Big&nbsp;O의&nbsp;경우&nbsp;n^2이&nbsp;걸리는&nbsp;순간&nbsp;엄청난&nbsp;소요&nbsp;시간&nbsp;차이가&nbsp;발생합니다.&nbsp;개발자&nbsp;취준생들에게&nbsp;이중&nbsp;for&nbsp;loop를&nbsp;최대한&nbsp;피하라고&nbsp;하는&nbsp;이유도&nbsp;여기&nbsp;있습니다.&nbsp;코딩&nbsp;테스트에서&nbsp;수행&nbsp;시간&nbsp;테스트가&nbsp;점수에&nbsp;포함되는&nbsp;것도&nbsp;그&nbsp;때문입니다.&nbsp;MasterID에&nbsp;딸린&nbsp;셀러&nbsp;개수가&nbsp;많을수록,&nbsp;테이블&nbsp;자체에&nbsp;있는&nbsp;총&nbsp;문의&nbsp;개수가&nbsp;많아질수록&nbsp;조회&nbsp;속도가&nbsp;느려질&nbsp;수밖에&nbsp;없는&nbsp;상황이었던&nbsp;것입니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1342\" data-origin-height=\"1094\"><span data-url=\"https://blog.kakaocdn.net/dn/ckotRr/btsIe0xNjRb/FWx2gHJ4YRG31NyksUXMh0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/ckotRr/btsIe0xNjRb/FWx2gHJ4YRG31NyksUXMh0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FckotRr%2FbtsIe0xNjRb%2FFWx2gHJ4YRG31NyksUXMh0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"607\" height=\"495\" data-origin-width=\"1342\" data-origin-height=\"1094\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">제가&nbsp;제시한&nbsp;방법의&nbsp;단점은,&nbsp;그래도&nbsp;JOIN을&nbsp;위해&nbsp;해당&nbsp;SELLER_ID_LIST를&nbsp;내부적으로&nbsp;임시&nbsp;테이블로&nbsp;만들고&nbsp;JOIN 하기&nbsp;때문에&nbsp;공간을&nbsp;포기하는&nbsp;셈이라는&nbsp;점입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>2. 임시 테이블과 JOIN 활용하기</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">또 다른 사례는 답변과의 임시테이블을 만들고 나서 JOIN 하는 방식입니다. 구버전에서 몇 SQL 들은 비록 답변을 하기 위해 질문을 클릭해야만 답변 내용을 표시해 주어서 답변 관련 JOIN은 필요 없을 줄 알았지만, 놀랍게도 답변 시각과 제목은 list로 같이 짝지어 보여주고 있었기 때문에 답변 관련 데이터들은 이미 답변과 짝도 짓고 있었던 셈입니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1552\" data-origin-height=\"249\"><span data-url=\"https://blog.kakaocdn.net/dn/bCzOqG/btsIhh5jTCf/HBIa2VI8tYF5npjk7WtudK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bCzOqG/btsIhh5jTCf/HBIa2VI8tYF5npjk7WtudK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbCzOqG%2FbtsIhh5jTCf%2FHBIa2VI8tYF5npjk7WtudK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"972\" height=\"156\" data-origin-width=\"1552\" data-origin-height=\"249\"/></span></figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">기존 전략은 단순히 답변 테이블과 JOIN 한 후에 WHERE 절로 검색 필터에 들어온 값들을 걸러내는 방식이었습니다.</span></p>\n<pre id=\"code_1719552499698\" class=\"n1ql\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>SELECT ~~~~\nFROM QUESTION\nLEFT JOIN ANSWER\nWHERE ~~~~~~</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 반면,&nbsp;저는&nbsp;인덱스가&nbsp;되는&nbsp;검색&nbsp;필터&nbsp;값들을&nbsp;먼저&nbsp;걸러낸&nbsp;임시&nbsp;테이블을&nbsp;만든&nbsp;후에&nbsp;JOIN을&nbsp;했습니다.&nbsp;이렇게&nbsp;하면&nbsp;한꺼번에&nbsp;JOIN 하는&nbsp;것보다&nbsp;후보지가&nbsp;줄어들고,&nbsp;나머지&nbsp;인덱스가&nbsp;걸리지&nbsp;않은&nbsp;것들은&nbsp;WHERE&nbsp;절에서&nbsp;거르더라도&nbsp;시간이&nbsp;덜&nbsp;걸립니다.&nbsp;이&nbsp;역시&nbsp;임시&nbsp;테이블을&nbsp;위해&nbsp;공간을&nbsp;더&nbsp;쓰는&nbsp;방식이지만,&nbsp;한편으로는&nbsp;더욱&nbsp;빠른&nbsp;속도를&nbsp;수행하게&nbsp;됩니다.</span></p>\n<pre id=\"code_1719552499699\" class=\"sql\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>WITH FilteredQuestions AS (\n    SELECT ~~~~\n    FROM QUESTION\n    LEFT JOIN ANSWER ON ~~~~\n    WHERE ~~~~(여기는 인덱스값) AND ~~~~ AND ~~~~\n)\nSELECT ~~~~\nFROM QUESTION\nJOIN FilteredQuestions ON ~~~~\nWHERE ~~~~ AND ~~~~</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 게다가 이번 개편을 통해 한 가지 호재가 더 있었습니다. 답변의 타이틀을 없앤다는 정책이 새로 만들어졌고, 답변이 없는 '미처리' 상태로 조회하는 것이 디폴트가 되었습니다. 따라서 판매자가 '미처리'된 문의 건들을 조회할 때는 굳이 답변을 JOIN 할 필요가 없게 되었습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">그래서 저는 사용자가 검색 필터로 넣는 '처리 상태' 값에 따라 쿼리를 분기 처리하는 아이디어를 냈습니다. 만약 '미처리' 상태로 조회할 경우, 답변과 JOIN 하지 않는 쿼리를 사용하고, '처리 완료'나 '전체'라는 값이 들어올 때만 위의 쿼리를 사용하는 것입니다</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719552499699\" class=\"bash\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"bash\"><code>SELECT ~~~~\nFROM QUESTION\nWHERE ~~~~~~</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>2. Hash Table (Map, Dictionary 등)을 적극적으로 활용하기</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>1) Enum에서 Map 활용하기&nbsp;</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 사실&nbsp;이&nbsp;또한&nbsp;코딩테스트를&nbsp;보게&nbsp;되면&nbsp;지겹도록&nbsp;익히게&nbsp;되는&nbsp;법칙이지만,&nbsp;Hash&nbsp;Table을&nbsp;사용하면&nbsp;시간&nbsp;복잡도가&nbsp;O(1)로&nbsp;월등히&nbsp;줄어듭니다. 생각보다 많은&nbsp;개발자들이&nbsp;놓치는&nbsp;것&nbsp;중&nbsp;하나는&nbsp;Hash&nbsp;Table이&nbsp;매칭/매핑할&nbsp;때&nbsp;무엇보다&nbsp;큰&nbsp;성능을&nbsp;발휘한다는&nbsp;점입니다.&nbsp;가장&nbsp;큰&nbsp;예시로는&nbsp;Enum을&nbsp;사용할&nbsp;때입니다.&nbsp;Enum은&nbsp;일종의&nbsp;나열된&nbsp;집합체로,&nbsp;가독성과&nbsp;해시&nbsp;성질&nbsp;덕분에&nbsp;많은&nbsp;코드에서도&nbsp;여전히&nbsp;많이&nbsp;발견됩니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', 'Apple SD Gothic Neo', Arial, sans-serif; letter-spacing: 0px; color: #000000;\">아래의 예시는 실제 코드는 아니고 제가 임시로 만든 코드입니다.</span></p>\n<pre id=\"code_1719552499700\" class=\"aspectj\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"java\"><code>import lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@Getter\n@RequiredArgsConstructor\npublic enum PhoneAreaEnum {\n    SEOUL(\"서울\", \"02\"),\n    BUSAN(\"부산\", \"051\"),\n    DAEGU(\"대구\", \"053\"),\n    INCHEON(\"인천\", \"032\"),\n    GWANGJU(\"광주\", \"062\"),\n    DAEJEON(\"대전\", \"042\");\n\n    private final String koreanName;\n    private final String code;\n\n    public static String findByCode(String code) {\n        for (PhoneAreaEnum area : PhoneAreaEnum.values()) {\n            if (area.getCode().equals(code)) {\n                return area.getKoreanName();\n            }\n        }\n        return null;\n    }\n}</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 여기서 만약 조회한 문의 건들 안에 code만 있어서 이를 front에서 표시하기 위한 koreanName을 가져와야 한다면 다음과 같이&nbsp;<span style=\"text-align: start;\">PhoneAreaEnum.findByCode(entity.code)를 썼을 텐데요. 보다시피 해당 코드는 for를 돌아 O(문의 결과 리스트 * Enum 개수)을 돌게 됩니다.</span></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719552499701\" class=\"processing\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"java\"><code>import lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Getter\n@RequiredArgsConstructor\npublic enum PhoneAreaEnum {\n    SEOUL(\"서울\", \"02\"),\n    BUSAN(\"부산\", \"051\"),\n    DAEGU(\"대구\", \"053\"),\n    INCHEON(\"인천\", \"032\"),\n    GWANGJU(\"광주\", \"062\"),\n    DAEJEON(\"대전\", \"042\");\n\n    private final String koreanName;\n    private final String code;\n\n    private static final Map&lt;String, PhoneAreaEnum&gt; codeToEnumMap = Arrays.stream(PhoneAreaEnum.values())\n            .collect(Collectors.toMap(PhoneAreaEnum::getCode, area -&gt; area));\n\n    public static String findByCode(String code) {\n        PhoneAreaEnum area = codeToEnumMap.get(code);\n        return (area != null) ? area.getKoreanName() : null;\n    }\n}</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">하지만&nbsp;이런&nbsp;식으로&nbsp;바꾸면&nbsp;처음에&nbsp;Map을&nbsp;세팅할&nbsp;때에만&nbsp;for&nbsp;loop가&nbsp;돌고,&nbsp;조회된&nbsp;건수를&nbsp;일일이&nbsp;매핑할&nbsp;때는&nbsp;미리&nbsp;만들어둔&nbsp;Map에서&nbsp;O(1)의&nbsp;시간&nbsp;복잡도로&nbsp;빠르게&nbsp;매핑해&nbsp;나갈&nbsp;수&nbsp;있습니다.&nbsp;특히,&nbsp;많은&nbsp;Enum&nbsp;값을&nbsp;다룰&nbsp;때&nbsp;이&nbsp;방법이&nbsp;유리합니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>2) 서비스 분기처리를 Map으로 하기</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이&nbsp;외에도&nbsp;사소한&nbsp;시간&nbsp;영향을&nbsp;주는&nbsp;if/else에&nbsp;대한&nbsp;얘기를&nbsp;Map과&nbsp;연관시켜&nbsp;살펴보겠습니다.&nbsp;저는&nbsp;통합&nbsp;조회&nbsp;API를&nbsp;만들었고,&nbsp;서로&nbsp;다른&nbsp;사이트인&nbsp;'지마켓'과&nbsp;'옥션',&nbsp;그리고&nbsp;각각의&nbsp;'게시판&nbsp;문의'와&nbsp;'긴급&nbsp;메시지'의&nbsp;비즈니스&nbsp;로직을&nbsp;다르게&nbsp;처리하고자&nbsp;했습니다.&nbsp;절차지향적인&nbsp;코드라면&nbsp;한&nbsp;컨트롤러에&nbsp;한&nbsp;서비스를&nbsp;사용하고,&nbsp;if/else나&nbsp;switch&nbsp;문을&nbsp;통해&nbsp;분기&nbsp;처리를&nbsp;했을&nbsp;겁니다.&nbsp;예를&nbsp;들어,&nbsp;'옥션&nbsp;게시판&nbsp;문의'가&nbsp;요청으로&nbsp;들어왔다면&nbsp;if(옥션)&nbsp;안에&nbsp;if(게시판&nbsp;문의)로&nbsp;중첩해서&nbsp;로직을&nbsp;썼거나,&nbsp;else&nbsp;if&nbsp;(옥션&nbsp;게시판&nbsp;문의)&nbsp;식으로&nbsp;썼을&nbsp;수도&nbsp;있습니다.&nbsp;다만,&nbsp;이&nbsp;방법은&nbsp;미세하지만&nbsp;if,&nbsp;else&nbsp;if,&nbsp;else&nbsp;if&nbsp;혹은&nbsp;if&nbsp;안에&nbsp;if를&nbsp;거치기&nbsp;때문에&nbsp;불필요한&nbsp;시간이&nbsp;소요됩니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">그래서&nbsp;저는&nbsp;handler들을&nbsp;자체적으로&nbsp;만들고,&nbsp;Spring에&nbsp;내장된&nbsp;handlerMap을&nbsp;사용하는&nbsp;것을&nbsp;권장합니다.</span><br /><br /><span style=\"color: #000000;\">예시를&nbsp;들자면&nbsp;다음과&nbsp;같은&nbsp;코드입니다.</span><br /><br /><span style=\"color: #000000;\">먼저 저의 케이스를 코드로 대강 풀이하자면 다음과 같습니다. 먼저 다음과 같이 handler interface를 만들어둡니다. 다음 코드들은 변수명도 다른 임의의 코드입니다.</span></p>\n<div style=\"background-color: #282c34; color: #bbbbbb;\">\n<pre class=\"routeros\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-language=\"java\"><code>public interface QnaQueryListHandler {\n    List&lt;MappedEntity&gt; processList(HandlerRequest request);\n}</code></pre>\n</div>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">다음, 옥션과 지마켓 각각의 인터페이스 혹은 추상 클래스로 각각 사이트별로 처리하는 방식을 먼저 정합니다. 저는 FeignClient를 의존성 주입하기 위해 추상 클래스를 사용했고, 'AbstractAuctionQnaQueryListHandler'와 'AbstractGmarketQnaQueryListHandler'를 만들어 각각 사이트별로 다른 방법을 오버라이딩하여 분기합니다.</span></p>\n<div style=\"background-color: #282c34; color: #bbbbbb;\">\n<pre class=\"aspectj\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-language=\"java\"><code>@Service\npublic abstract class AbstractAuctionQnaQueryListHandler implements QnaQueryListHandler {\n\n    private String extractIds(HandlerRequest request) {\n        // 해당 방법은 지마켓 옥션이 다르기 때문에 분기될만함.\n        return \"\";\n    }\n\n    @Override\n    public List&lt;MappedEntity&gt; processList(HandlerRequest request) {\n        String ids = extractIds(request);\n        return handleIds(ids, request);\n    }\n\n    protected abstract List&lt;? extends MappedEntity&gt; handleIds(String ids, HandlerRequest request);\n}</code></pre>\n</div>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">그런 다음, 옥션에 해당되는 게시판 문의에 대한 비즈니스 로직을 작성합니다.</span></p>\n<div style=\"background-color: #282c34; color: #bbbbbb;\">\n<pre class=\"scala\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-language=\"java\"><code>@Service(\"AUCTION_BOARD_INQUIRY_QUERY_LIST_HANDLER\")\npublic class AuctionBoardQueryListHandler extends AbstractAuctionQnaQueryListHandler {\n\n    @Override\n    protected List&lt;? extends MappedEntity&gt; handleIds(String ids, HandlerRequest request) {\n        // 생략\n        return new ArrayList&lt;&gt;();\n    }\n}</code></pre>\n</div>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이와&nbsp;같은&nbsp;방식으로&nbsp;지마켓&nbsp;긴급&nbsp;메시지,&nbsp;지마켓&nbsp;게시판&nbsp;문의,&nbsp;옥션&nbsp;긴급&nbsp;메시지도&nbsp;동일하게&nbsp;작성합니다.&nbsp;이렇게&nbsp;하면&nbsp;QnaQueryListHandler에&nbsp;묶인&nbsp;서비스들이&nbsp;하나의&nbsp;Map으로&nbsp;Spring에&nbsp;내장된&nbsp;기능에&nbsp;의해&nbsp;생성됩니다.&nbsp;이를&nbsp;서비스&nbsp;단에&nbsp;의존성&nbsp;주입하고&nbsp;사용하면&nbsp;됩니다.</span></p>\n<div style=\"background-color: #282c34; color: #bbbbbb;\">\n<pre class=\"dart\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-language=\"sql\"><code>@RequiredArgsConstructor\npublic class QnaQueryServiceImpl implements QnaQueryService {\n\n    private final Map&lt;String, QnaQueryListHandler&gt; qnaQueryListHandlerMap;\n    // 생략\n    \n    public QueryEntity&lt;QueryListQueryEntity&gt; getQueryList(QnaQueryListRequest qnaQueryListRequest) {\n        String handlerKey = String.format(\"%s_%s_QUERY_LIST_HANDLER\",\n            qnaQueryListRequest.getSite().name(), qnaQueryListRequest.getMessageType().name());\n        QnaQueryListHandler handler = qnaQueryListHandlerMap.get(handlerKey);\n        List&lt;QueryListJpaEntity&gt; jpaEntityList = handler.processList(qnaQueryListRequest);\n        // 생략\n    }\n}</code></pre>\n</div>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">해당 방법을 사용하면 서비스별로 if/else로 분기 처리하는 것을 보다는 가독성을 가져오면서도, 사이트별 혹은 문의 유형별 공통 기능들도 쉽게 유지보수하며 성능을 약간 더 향상할 수 있는 여지가 생깁니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>3. Multithread 활용하기</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; Java가&nbsp;Node&nbsp;계열의&nbsp;JavaScript나&nbsp;데이터&nbsp;구조화에&nbsp;유리한&nbsp;Python에&nbsp;밀리는&nbsp;추세라고는&nbsp;하지만,&nbsp;Interpreter&nbsp;언어들과&nbsp;달리&nbsp;Java가&nbsp;근본적으로&nbsp;가지고&nbsp;있는&nbsp;강점&nbsp;중&nbsp;하나는&nbsp;Multithread의&nbsp;활용성입니다.&nbsp;범용성이&nbsp;높다는&nbsp;Python도&nbsp;아직&nbsp;JVM의&nbsp;멀티스레딩과&nbsp;저용량&nbsp;성능을&nbsp;따라오지&nbsp;못하고&nbsp;있습니다.&nbsp;그러므로&nbsp;Java&nbsp;개발자라면&nbsp;Multithread를&nbsp;적재적소에&nbsp;활용해야&nbsp;한다고&nbsp;봅니다.&nbsp;특히&nbsp;성능을&nbsp;고려해야&nbsp;하는&nbsp;경우에는&nbsp;더욱&nbsp;그렇습니다.</span><br /><br /><span style=\"color: #000000;\">저의&nbsp;경우,&nbsp;웬만하면&nbsp;같은&nbsp;DB&nbsp;서버에&nbsp;묶여&nbsp;있고&nbsp;인덱스가&nbsp;있으면&nbsp;최대한&nbsp;JOIN을&nbsp;선호합니다.&nbsp;관계형&nbsp;데이터베이스는&nbsp;이를&nbsp;위해&nbsp;만들어진&nbsp;것이기&nbsp;때문입니다.&nbsp;하지만&nbsp;DB&nbsp;서버가&nbsp;같이&nbsp;묶여&nbsp;있지&nbsp;않거나&nbsp;인덱스가&nbsp;없다면&nbsp;JOIN은&nbsp;어렵습니다.&nbsp;따라서&nbsp;다른&nbsp;SQL이나&nbsp;API&nbsp;호출을&nbsp;통해&nbsp;데이터를&nbsp;얻은&nbsp;후,&nbsp;기존에&nbsp;조회된&nbsp;문의&nbsp;결과와&nbsp;매칭할&nbsp;수밖에&nbsp;없습니다.&nbsp;이럴&nbsp;때,&nbsp;문의&nbsp;결과&nbsp;리스트&nbsp;n개와&nbsp;다른&nbsp;데이터&nbsp;리스트&nbsp;m개를&nbsp;이중&nbsp;for문으로&nbsp;처리해서는&nbsp;안&nbsp;되고,&nbsp;아래&nbsp;예제와&nbsp;같이&nbsp;Map을&nbsp;먼저&nbsp;만들어줘야&nbsp;성능이&nbsp;나옵니다.</span><br /><br /></p>\n<pre id=\"code_1719552499704\" class=\"mipsasm\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"java\"><code>Map&lt;String, ExtraBasicInfoResponse&gt; extraInfoMap = extraUrlConfig.getExtraBasicInfoMap(extraNumbersList, siteId);</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">그&nbsp;후&nbsp;해당&nbsp;Map을&nbsp;가지고&nbsp;매칭을&nbsp;하면&nbsp;되는데,&nbsp;이때&nbsp;단순&nbsp;매칭을&nbsp;위해서는&nbsp;순서가&nbsp;중요하지&nbsp;않기&nbsp;때문에&nbsp;다음과&nbsp;같이&nbsp;Multithread를&nbsp;사용하여&nbsp;동시성&nbsp;있게&nbsp;처리하면&nbsp;조회&nbsp;성능을&nbsp;끌어올리는&nbsp;데&nbsp;도움이&nbsp;됩니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719552499704\" class=\"reasonml\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"java\"><code>return entityList.parallelStream()\n    .map(entity -&gt; {\n        TempEntity tempEntity = asEntity(entity);\n        ExtraBasicInfoResponse extraInfo = extraInfoMap.get(entity.getNo());\n        // 생략\n    });</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">다만, 단점은 메모리를 잡아먹기 때문에 해당 프로젝트에 같이 돌고 있는 다른 도메인들에게도 영향이 갈 수 있다는 점입니다. 제가 사용한 parallelStream은 단순하지만, 가독성을 위해 Stream 객체를 따로 만들어야 한다는 점과 Common ForkJoinPool을 사용하기 때문에 다른 곳에서도 해당 스레드풀을 사용하면 성능 향상이 예상보다 낮을 수 있습니다. 그렇다고 무작정 ForkJoinPool이나 ExecutorService와 같은 객체를 따로 만든다면 같은 parallelStream을 사용하는 도메인에는 영향을 주지 않지만 추가된 메모리 공간을 사용해야 합니다. 만약 여러 도메인들이 조회 성능만을 생각해 이런 식으로 풀을 추가했다가 총메모리를 초과해 GC 에러를 시켜 서버가 중단된다면 큰일입니다. 그러므로 더욱 신중하게 고려해야 합니다. 따라서 아무리 조회 성능을 향상한다 해도 메모리 공간을 지나치게 포기하면 안 됩니다. 다행히 저 코드 프로젝트는 parellelstream을 아직 쓰는 곳이 거의 없을뿐더러 '문의하기'처럼 규모가 있는 트래픽을 담당할만한 도메인이 아직까지는 없는 것으로 파악했습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\"><b>4. GROUP BY를 안 쓰고도 카운트 집계 성능 내는 방법</b></span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">가장&nbsp;문제가&nbsp;되는&nbsp;구버전의&nbsp;조회에는&nbsp;집계&nbsp;기능도&nbsp;포함되어&nbsp;있었습니다.&nbsp;집계를&nbsp;할&nbsp;때&nbsp;거의&nbsp;필수적으로&nbsp;쓰이는&nbsp;SQL문은&nbsp;GROUP&nbsp;BY입니다.&nbsp;GROUP&nbsp;BY는&nbsp;사용자에게&nbsp;다양한&nbsp;형태의&nbsp;데이터를&nbsp;제공하는&nbsp;유용한&nbsp;SQL문입니다.&nbsp;다만,&nbsp;GROUP&nbsp;BY를&nbsp;사용하면&nbsp;유형별&nbsp;임시&nbsp;공간이&nbsp;필요하고,&nbsp;그룹화를&nbsp;위해&nbsp;정렬을&nbsp;해야&nbsp;하므로&nbsp;일반적으로&nbsp;O(n&nbsp;log&nbsp;n)의&nbsp;시간복잡도를&nbsp;가집니다.</span><br /><br /><span style=\"color: #000000;\">예시로, 구버전이 사용하는 집계 함수는 다음과 같은 코드 형태입니다.</span></p>\n<pre id=\"code_1719552499704\" class=\"routeros\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>SELECT TYPE_CODE,\n       COUNT(*) AS COUNT\nFROM EXAMPLE\nWHERE CREATION_DATE BETWEEN @START_DATE AND @END_DATE\nGROUP BY TYPE_CODE;</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">신버전에서는 다음과 같이 집계를 수행할 수 있습니다. 단, 이 방법은 고정된 TYPE_CODE가 정해져 있어야 합니다. 예를 들어, 성별과 같이 단순한 기준으로 row 개수를 구할 때는 유용하지만, 직업별 row 개수처럼 특정되지 않은 채로 다양한 유형별 개수를 파악할 때는 사용하기 어렵습니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<pre id=\"code_1719552499704\" class=\"sql\" style=\"background-color: #f8f8f8; color: #383a42;\" data-ke-type=\"codeblock\" data-ke-language=\"sql\"><code>SELECT ISNULL(SUM(CASE WHEN TYPE_CODE = '1' THEN 1 ELSE 0 END), 0) AS FATHER,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '2' THEN 1 ELSE 0 END), 0) AS MOTHER,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '3' THEN 1 ELSE 0 END), 0) AS SON,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '4' THEN 1 ELSE 0 END), 0) AS DAUGHTER\nFROM EXAMPLE\nWHERE CREATION_DATE BETWEEN @START_DATE AND @END_DATE;</code></pre>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">이렇게&nbsp;변경하면&nbsp;GROUP&nbsp;BY처럼&nbsp;추가적인&nbsp;임시&nbsp;공간을&nbsp;거의&nbsp;사용하지&nbsp;않으며,&nbsp;집계&nbsp;결과를&nbsp;저장할&nbsp;몇&nbsp;개의&nbsp;변수&nbsp;공간만&nbsp;필요하고,&nbsp;한&nbsp;번만&nbsp;순회하면&nbsp;끝나기&nbsp;때문에&nbsp;시간복잡도&nbsp;역시&nbsp;O(n)에&nbsp;그칩니다.&nbsp;이처럼&nbsp;무작정&nbsp;시간과&nbsp;공간이&nbsp;반비례하는&nbsp;것은&nbsp;아닙니다.&nbsp;포켓몬에서도&nbsp;간혹&nbsp;디아루가와&nbsp;펄기아가&nbsp;힘을&nbsp;합칠&nbsp;때가&nbsp;있듯이&nbsp;말입니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"K7GRKntDNhD8N-aF7wZqD61_7f7Ngdcs7AHgft29NzxcHB9MrktRZLsjZmJxGWD-O_i8QwgnCBExRLTDjUPehHhbylFQO98XEE-ZmYs8B7KXAZsDYlc-beQA1knuUa8UzYexLPZ_MfCnmbeGq9EDFw.webp\" data-origin-width=\"1000\" data-origin-height=\"694\"><span data-url=\"https://blog.kakaocdn.net/dn/bkpWwZ/btsIfKAUplX/edF4VW3i0unLLnqJ40d5n0/img.webp\" data-phocus=\"phocus\" data-alt=\"출처 : https://pokemon.fandom.com/\"><img src=\"https://blog.kakaocdn.net/dn/bkpWwZ/btsIfKAUplX/edF4VW3i0unLLnqJ40d5n0/img.webp\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbkpWwZ%2FbtsIfKAUplX%2FedF4VW3i0unLLnqJ40d5n0%2Fimg.webp\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"560\" height=\"389\" data-filename=\"K7GRKntDNhD8N-aF7wZqD61_7f7Ngdcs7AHgft29NzxcHB9MrktRZLsjZmJxGWD-O_i8QwgnCBExRLTDjUPehHhbylFQO98XEE-ZmYs8B7KXAZsDYlc-beQA1knuUa8UzYexLPZ_MfCnmbeGq9EDFw.webp\" data-origin-width=\"1000\" data-origin-height=\"694\"/></span><figcaption>출처 : https://pokemon.fandom.com/</figcaption>\n</figure>\n</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\"><span style=\"color: #000000;\">&nbsp; 개편된&nbsp;ESM을&nbsp;오픈한&nbsp;지&nbsp;며칠&nbsp;안&nbsp;된&nbsp;지금,&nbsp;아직까지는&nbsp;큰&nbsp;문제가&nbsp;없어&nbsp;보입니다.&nbsp;더욱&nbsp;빨라진&nbsp;조회&nbsp;속도로&nbsp;인해&nbsp;조회&nbsp;빈도&nbsp;자체가&nbsp;예전에&nbsp;비해&nbsp;급속도로&nbsp;높아진&nbsp;점에서&nbsp;고무적이라고&nbsp;생각합니다.&nbsp;기획과&nbsp;UI/UX&nbsp;팀에서&nbsp;조회&nbsp;성능을&nbsp;위해&nbsp;적절한&nbsp;대안을&nbsp;찾고,&nbsp;정책적인&nbsp;변화를&nbsp;통해&nbsp;중복되는&nbsp;칼럼들을&nbsp;단건씩&nbsp;보이게&nbsp;하여&nbsp;조회&nbsp;성능에&nbsp;집중할&nbsp;수&nbsp;있게&nbsp;해준&nbsp;점에&nbsp;대해서도&nbsp;감사합니다.&nbsp;이러한&nbsp;변화는&nbsp;구매자의&nbsp;문의를&nbsp;보고&nbsp;싶어도&nbsp;답답한&nbsp;속도&nbsp;때문에&nbsp;못&nbsp;보고&nbsp;지나쳤던&nbsp;판매자들에게&nbsp;더&nbsp;큰&nbsp;기회를&nbsp;줄&nbsp;수&nbsp;있을&nbsp;것입니다.&nbsp;또한,&nbsp;물건을&nbsp;사기&nbsp;전에&nbsp;답변이&nbsp;오지&nbsp;않아&nbsp;망설였던&nbsp;고객들의&nbsp;발걸음을&nbsp;되돌릴&nbsp;수&nbsp;있을&nbsp;것이라&nbsp;기대합니다.</span></p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: justify;\" data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "안녕하세요.\nSeller & SD Engineering팀의 김민우입니다.\n \n이번 글은 ESM(지마켓 판매자 사이트) 개편 중 '문의하기' 개발을 맡으며 겪었던 어려움과 이를 해결해 나가는 몇 가지 방법들을 소개하고자 합니다. 제가 개발 맡은 부분은 판매자에게 구매자의 문의내용을 담당하는 '게시판 문의', 그리고 CS(고객센터)에서 주는 '긴급 메시지'를 통합하여 지마켓과 옥션  두 사이트에 대해 각각 보여주는 통합 페이지를 개편시키는 일이었습니다.\n \n각설하고 조회 성능을 올린 결과물부터 영상으로 보시죠.\n\n\n\n \n  영상에서 보셨듯이, 대형 셀러의 경우 한 페이지를 로드하는 데 기본 몇십 초가 걸립니다. 페이지를 넘길 때조차 마찬가지입니다. 상품이 많아질수록 문의도 증가하기 마련인데, 모든 문의에 일일이 답변하기는 어렵기 때문에 미응답으로 남는 경우가 많습니다. 이러한 어드민 페이지를 개편할 때 보통 프론트엔드 중심으로 성과를 드러내는 경우가 많았고, 저 역시 해당 프로젝트를 처음 배정받았을 때는 성능 개선에 대한 기획은 없었습니다. 백엔드 로직은 그대로 두되 UI/UX를 고치는 것이 본래 목적이었습니다. 하지만 백엔드 개발이 메인인 저는 충격적인 성능을 목격하고서, 이번 프로젝트에서 백엔드에서도 성과를 낼 수 있음을 보여주기 위해, 두려움과 동시에 최선을 다해야겠다고 마음먹었습니다.\n \n저에게 주어진 과제의 걸림돌이었던 점을 나열해보겠습니다.\n \n \n1. 답변까지 복수로 조회\n \n  구버전에서는 문의를 클릭해야만 해당 문의에 대한 답변을 볼 수 있었습니다. 많은 판매자 분들이 답변을 일괄적으로 처리하지 못하고 하나하나 처리해야 한다는 어려움을 호소해 주셨습니다. 그래서 새로운 버전에서는 답변 칸을 문의 옆에 짝지어 나열하는 UI/UX로 변경하게 되었습니다. 그러나 개발자로서 이미 몇십 초가 걸리는 조회 로직에 답변까지 함께 짝지어서 조회하려면 얼마나 더 오래 걸릴지 막막하기만 했습니다.\n \n \n\n\n \n \n \n2. 네 가지의 도메인을 데이터 구조는 그대로 두고 통합\n \n앞서 서두에서 언급했듯이, 지마켓/옥션 각각의 '게시판 문의'와 '긴급 메시지'라는 비슷하지만 엄연히 다른 도메인을 한 가지 표에 통합해야 했습니다. 흔히 1번에 이어서 ESM 전용으로 조회하기 좋은 단순한 데이터베이스를 구상해 본다면 다음과 같습니다.\n \n\n\n \n \n서로 다른 정책과 프로세스를 가진 제각각 2000년대 중반에 아우르는 유서 깊은 레거시들을 전부 다 조사하는 것도 일이었지만, 데이터 자체를 그대로 둔 채로 통합하면서 속도 성능을 내야 하는 건 생각보다 큰 과제였습니다.\n\n\n \n데이터를 분석하면서 충격적이었던 점은 옥션 긴급 메시지를 제외하고는 '질문'과 '답변'이 같은 테이블에 섞여 들어가 있다는 점이었습니다. 한 질문에 대한 답변을 찾으려면 셀프 조인을 해야 했습니다. 그렇다고 파티션이 되어 있는 것도 아니었습니다. 질문과 답변이 1:1 관계도 아니었고, 한 개의 질문에 대해 여러 번 답변이 가능한 구조였습니다. 가뜩이나 답변 하나 가져오는 데도 몇십 초가 걸리는 상황에서, 같은 테이블에서 셀프 조인하고 여러 답변 중 가장 최신의 답변을 가져와야 했습니다.\n통상적으로 이런 통합된 페이지의 성능을 높이려면 데이터 구조부터 바꾸거나 기존 테이블들을 그대로 두되, 새로 구상한 테이블에 기존 테이블의 데이터를 배치나 스트림을 통해 미리 최신의 답변을 집계하고 데이터를 통합해서 주기적으로 업데이트하는 것이 최적의 방법입니다. 그러나 개발 공수 기간이 짧아 이 방법을 적용할 수 없었습니다.\n \n \n3. 대용량의 데이터베이스\n \n  해당 테이블들의 정확한 데이터양 수치를 서술하기에는 보안상의 이슈가 있을 것 같아 대략적으로 말씀드리자면, 상품 및 주문 도메인 관련 테이블들과 비슷하게 엄청난 볼륨을 가지고 있었습니다. 데이터베이스들의 생성 시기와 가장 오래된 데이터의 날짜를 비교해 보면, 그나마 한 번쯤은 데이터를 정리한 것 같습니다만, 근 10년간의 게시판 문의와 긴급 메시지들이 쌓여 있다는 점에서도 두려웠습니다. 대용량 데이터를 주로 다뤘던 경험상, 데이터베이스의 크기 자체는 대용량까지는 아니지만, 행(Row)의 수는 중견급 마켓의 상품 수와 맞먹을 정도였습니다.\n \n이 때문에 인덱스를 새로 추가하는 것도 이미 큰 데이터베이스에 무리가 가기에 리스크가 있었고, 오래된 데이터를 비우는 일도 마이그레이션과 더불어 파티셔닝에 신경 써야 했기 때문에 개발 공수를 맞추기에는 부족했습니다. 따라서 추후 옵션으로 고려할 수는 있으나, 기존 데이터베이스 테이블들을 건드는 일 자체가 당장은 어렵다는 것이 확실했습니다.\n \n\n\n \n이런 비슷한 상황에서 조회 속도를 어떻게 올릴 것인가를 고민하는 다른 여러 개발자들을 위해 제가 해결해 나간 과정을 소개합니다. \n \n우선 방법 소개에 앞서, 잠깐 언급할 개념이 있습니다. 개발을 대학 전공으로 배울 때 가장 먼저 입문하게 되는 것이 '자료구조'와 '알고리즘' 수업입니다. '자료구조'는 주로 공간(메모리)을 어떻게 효율적으로 활용할 것인지를 다루고, '알고리즘'은 소요 시간을 얼마나 줄일 수 있는지를 공부합니다. 이 둘의 관계는 시간과 공간을 대표하는 과목들로, 컴퓨팅에 대한 중요한 법칙을 내포하고 있다고 생각합니다. 일반적으로 이 시간과 공간은 반비례 관계에 있다고 보시면 됩니다 (꼭 그런 것은 아닙니다만 대체로 그렇습니다).\n \n \n아래 그림처럼 A → B로 가는 경우의 수를 구하는 문제를 보면, 직접 선을 하나씩 그려가며 A에서 시작해서 B로 가는 선을 10개 그려서 경우의 수를 구할 수도 있습니다. 하지만 이렇게 풀면 시간이 오래 걸리고 결국 OMR 마킹도 못하고 내는 경우도 있을 겁니다.\n출처 : https://blog.naver.com/dongmin9313/221712819012\n\n\n \n하지만 우리는 아래 그림과 같은 방법으로도 풀 수 있다는 것을 초등학교와 고등학교 수학 시간에 배웠습니다. 이 방법으로는 A와 B를 한 번씩만 보고 넘기며, 각 칸에 정보를 저장해 가며 한 번에 해결할 수 있습니다.\n출처 : https://blog.naver.com/dongmin9313/221712819012\n\n\n \n  공교롭게도, 이 방법을 다시 자료구조나 알고리즘 전공 수업 때 파스칼의 삼각형을 배우며 익히게 됩니다. 이러한 프로그래밍 기법을 DP(동적 계획법, dynamic programming)이라고 배웁니다. 백트래킹을 하지 않고도 메모리를 조금 더 쓰면 경우의 수를 좀 더 빨리 구할 수 있다는 것입니다.\n \n  그러나 메모리와 같은 공간적인 개념은 저장공간의 효율적인 대중화로 인해 개발자들이 크게 신경 쓰지 않게 되었으며, 알고리즘 또한 다양한 라이브러리들이 많아서 코드에서는 잘 드러나지 않아 둘 다 간과되는 경우가 많습니다. 비즈니스에 직결되는 개발의 구현 여부만 신경 쓰다 보니, 구 ESM 문의하기도 처음에는 신경 써서 설계했겠지만, 10여 년이 지난 지금은 여러 요구사항들이 덧붙여져 땜질된 상태였습니다. 결과적으로 일부 구현에만 신경 쓴 여러 코드들이 전체적인 시간복잡도나 공간복잡도를 간과한 것들이 쌓이고 쌓여, 결국 어느새 엄청 느려진 조회 속도를 방치할 수밖에 없었습니다. 저 또한 이번에 개편한 코드가 몇십 년 후에는 땜질되어 느려질 수 있기 때문에, 이 프로젝트에 참여한 개발자들을 골라서 탓하는 것은 옳지 않다고 생각합니다.\n \n제가 이토록 시간과 공간의 반비례 관계를 강조해도 잊어버릴 수 있는 분들을 위해, 포켓몬스터 게임의 예를 들어 보겠습니다. 게임에는 '시간'을 관장하는 디아루가와 '공간'을 관장하는 펄기아라는 전설의 포켓몬이 항상 싸웁니다. (이 게임의 버전 이름이 공교롭게도 포켓몬스터 \"DP\"입니다.) 이 둘의 관계를 다시 떠올려 보면, 처리 시간을 줄이기 위해 어떤 방법을 선택해야 할지 판단이 더 빨리 설 것입니다.\n \n출처 : https://www.pokemon.com\n\n\n \n \n다음은 제가 이와 연관해서 실마리를 얻고 구 버전에서 신 버전으로 로직을 옮기며 성능을 해결해 나가는 부분에 대한 서술입니다.\n \n1. 인덱스를 활용하지 못한 경우\n \n  인덱스는 데이터베이스를 빠르게 조회할 수 있다는 장점이 있지만, 데이터베이스의 각 행(row)을 기준으로 많은 공간을 사용하게 된다는 단점이 있습니다. 이는 공간을 내어주고 시간을 절약한다는 제 본론과 매우 부합하는 개념 중 하나입니다.\n \n  문의 리스트를 가져오는 부분은 신 버전과 구 버전이 대체로 비슷합니다. 두 버전은 동일한 데이터베이스 테이블을 바라보고 있으며, 주로 원하는 검색 필터를 기준으로 WHERE 절에 적용하고, 테이블에 없는 추가적인 데이터는 따로 JOIN을 통해 가져옵니다. 그러나 두 버전의 차이를 만든 원인 중 하나는 SellerID를 통합해서 조회하는 방법입니다. 저희 회사 정책상 ESM을 보고 있는 한 셀러는 MasterID가 있고, 그 아래에는 여러 하위 SellerID들이 있습니다. '문의하기' 페이지는 이러한 MasterID에 속한 모든 SellerID를 가지고 해당 SellerID에게 주어진 문의들을 전부 조회해야 합니다.\n \n \n가장 크리티컬 했던 요소 중 하나를 꼽자면 다음과 같은 코드입니다. (아래 코드는 예시입니다.)\nforeach (string sellerId in request.sellerList.Split(','))\n{\n    GetList(request); // SQL 실행\n}\n\n//Stored Procedure (SQL)\n\nSELECT ~~~\nFROM TABLE\n//기타 JOIN 생략\nWHERE SELLER_ID = @SELLER_ID\n   AND ~~~~\n \n반면 제 것은 다음과 같습니다.\nSELECT ~~~~~\nFROM TABLE \n  JOIN STRING_SPLIT(@SELLER_ID_LIST, ',') AS SPLIT ON TABLE.SELLER_ID = SPLIT.value\n  //기타 JOIN 생략\n  WHERE ~~~~~~~\n \n단순히 둘의 시간복잡도를 구상했을 때는 s를 셀러의 개수, q를 뽑아낸 문의 개수로 치환한다면 다음과 같습니다.\n\n기존 접근법:\n\n판매자 ID 분리: O(s)\n각 판매자별 데이터 가져오기: O(s * q log q)\n가져온 데이터들 병합: O(s*q)\n개선된 접근법:\n\n판매자 ID 합치기: O(s)\nSQL 쿼리 실행 및 JOIN: O(s*q)  or s가 인덱스가 되어있으면 O(q log s)\n \n \n다행히 해당 테이블들은 SellerID에 인덱스가 걸려 있으므로 최종적으로 시간복잡도는 O(s * q log q) vs O(q log s)가 됩니다. 아래 그래프에서도 알 수 있듯이, Big O의 경우 n^2이 걸리는 순간 엄청난 소요 시간 차이가 발생합니다. 개발자 취준생들에게 이중 for loop를 최대한 피하라고 하는 이유도 여기 있습니다. 코딩 테스트에서 수행 시간 테스트가 점수에 포함되는 것도 그 때문입니다. MasterID에 딸린 셀러 개수가 많을수록, 테이블 자체에 있는 총 문의 개수가 많아질수록 조회 속도가 느려질 수밖에 없는 상황이었던 것입니다.\n\n\n제가 제시한 방법의 단점은, 그래도 JOIN을 위해 해당 SELLER_ID_LIST를 내부적으로 임시 테이블로 만들고 JOIN 하기 때문에 공간을 포기하는 셈이라는 점입니다.\n \n \n2. 임시 테이블과 JOIN 활용하기\n \n또 다른 사례는 답변과의 임시테이블을 만들고 나서 JOIN 하는 방식입니다. 구버전에서 몇 SQL 들은 비록 답변을 하기 위해 질문을 클릭해야만 답변 내용을 표시해 주어서 답변 관련 JOIN은 필요 없을 줄 알았지만, 놀랍게도 답변 시각과 제목은 list로 같이 짝지어 보여주고 있었기 때문에 답변 관련 데이터들은 이미 답변과 짝도 짓고 있었던 셈입니다.\n\n\n \n기존 전략은 단순히 답변 테이블과 JOIN 한 후에 WHERE 절로 검색 필터에 들어온 값들을 걸러내는 방식이었습니다.\nSELECT ~~~~\nFROM QUESTION\nLEFT JOIN ANSWER\nWHERE ~~~~~~\n \n  반면, 저는 인덱스가 되는 검색 필터 값들을 먼저 걸러낸 임시 테이블을 만든 후에 JOIN을 했습니다. 이렇게 하면 한꺼번에 JOIN 하는 것보다 후보지가 줄어들고, 나머지 인덱스가 걸리지 않은 것들은 WHERE 절에서 거르더라도 시간이 덜 걸립니다. 이 역시 임시 테이블을 위해 공간을 더 쓰는 방식이지만, 한편으로는 더욱 빠른 속도를 수행하게 됩니다.\nWITH FilteredQuestions AS (\n    SELECT ~~~~\n    FROM QUESTION\n    LEFT JOIN ANSWER ON ~~~~\n    WHERE ~~~~(여기는 인덱스값) AND ~~~~ AND ~~~~\n)\nSELECT ~~~~\nFROM QUESTION\nJOIN FilteredQuestions ON ~~~~\nWHERE ~~~~ AND ~~~~\n \n  게다가 이번 개편을 통해 한 가지 호재가 더 있었습니다. 답변의 타이틀을 없앤다는 정책이 새로 만들어졌고, 답변이 없는 '미처리' 상태로 조회하는 것이 디폴트가 되었습니다. 따라서 판매자가 '미처리'된 문의 건들을 조회할 때는 굳이 답변을 JOIN 할 필요가 없게 되었습니다.\n \n그래서 저는 사용자가 검색 필터로 넣는 '처리 상태' 값에 따라 쿼리를 분기 처리하는 아이디어를 냈습니다. 만약 '미처리' 상태로 조회할 경우, 답변과 JOIN 하지 않는 쿼리를 사용하고, '처리 완료'나 '전체'라는 값이 들어올 때만 위의 쿼리를 사용하는 것입니다\n \nSELECT ~~~~\nFROM QUESTION\nWHERE ~~~~~~\n \n \n2. Hash Table (Map, Dictionary 등)을 적극적으로 활용하기\n \n1) Enum에서 Map 활용하기 \n \n  사실 이 또한 코딩테스트를 보게 되면 지겹도록 익히게 되는 법칙이지만, Hash Table을 사용하면 시간 복잡도가 O(1)로 월등히 줄어듭니다. 생각보다 많은 개발자들이 놓치는 것 중 하나는 Hash Table이 매칭/매핑할 때 무엇보다 큰 성능을 발휘한다는 점입니다. 가장 큰 예시로는 Enum을 사용할 때입니다. Enum은 일종의 나열된 집합체로, 가독성과 해시 성질 덕분에 많은 코드에서도 여전히 많이 발견됩니다.\n \n아래의 예시는 실제 코드는 아니고 제가 임시로 만든 코드입니다.\nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\n@Getter\n@RequiredArgsConstructor\npublic enum PhoneAreaEnum {\n    SEOUL(\"서울\", \"02\"),\n    BUSAN(\"부산\", \"051\"),\n    DAEGU(\"대구\", \"053\"),\n    INCHEON(\"인천\", \"032\"),\n    GWANGJU(\"광주\", \"062\"),\n    DAEJEON(\"대전\", \"042\");\n\n    private final String koreanName;\n    private final String code;\n\n    public static String findByCode(String code) {\n        for (PhoneAreaEnum area : PhoneAreaEnum.values()) {\n            if (area.getCode().equals(code)) {\n                return area.getKoreanName();\n            }\n        }\n        return null;\n    }\n}\n \n  여기서 만약 조회한 문의 건들 안에 code만 있어서 이를 front에서 표시하기 위한 koreanName을 가져와야 한다면 다음과 같이 PhoneAreaEnum.findByCode(entity.code)를 썼을 텐데요. 보다시피 해당 코드는 for를 돌아 O(문의 결과 리스트 * Enum 개수)을 돌게 됩니다.\n \nimport lombok.Getter;\nimport lombok.RequiredArgsConstructor;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Getter\n@RequiredArgsConstructor\npublic enum PhoneAreaEnum {\n    SEOUL(\"서울\", \"02\"),\n    BUSAN(\"부산\", \"051\"),\n    DAEGU(\"대구\", \"053\"),\n    INCHEON(\"인천\", \"032\"),\n    GWANGJU(\"광주\", \"062\"),\n    DAEJEON(\"대전\", \"042\");\n\n    private final String koreanName;\n    private final String code;\n\n    private static final Map<String, PhoneAreaEnum> codeToEnumMap = Arrays.stream(PhoneAreaEnum.values())\n            .collect(Collectors.toMap(PhoneAreaEnum::getCode, area -> area));\n\n    public static String findByCode(String code) {\n        PhoneAreaEnum area = codeToEnumMap.get(code);\n        return (area != null) ? area.getKoreanName() : null;\n    }\n}\n \n하지만 이런 식으로 바꾸면 처음에 Map을 세팅할 때에만 for loop가 돌고, 조회된 건수를 일일이 매핑할 때는 미리 만들어둔 Map에서 O(1)의 시간 복잡도로 빠르게 매핑해 나갈 수 있습니다. 특히, 많은 Enum 값을 다룰 때 이 방법이 유리합니다.\n \n \n2) 서비스 분기처리를 Map으로 하기\n \n이 외에도 사소한 시간 영향을 주는 if/else에 대한 얘기를 Map과 연관시켜 살펴보겠습니다. 저는 통합 조회 API를 만들었고, 서로 다른 사이트인 '지마켓'과 '옥션', 그리고 각각의 '게시판 문의'와 '긴급 메시지'의 비즈니스 로직을 다르게 처리하고자 했습니다. 절차지향적인 코드라면 한 컨트롤러에 한 서비스를 사용하고, if/else나 switch 문을 통해 분기 처리를 했을 겁니다. 예를 들어, '옥션 게시판 문의'가 요청으로 들어왔다면 if(옥션) 안에 if(게시판 문의)로 중첩해서 로직을 썼거나, else if (옥션 게시판 문의) 식으로 썼을 수도 있습니다. 다만, 이 방법은 미세하지만 if, else if, else if 혹은 if 안에 if를 거치기 때문에 불필요한 시간이 소요됩니다.\n \n그래서 저는 handler들을 자체적으로 만들고, Spring에 내장된 handlerMap을 사용하는 것을 권장합니다.\n예시를 들자면 다음과 같은 코드입니다.\n먼저 저의 케이스를 코드로 대강 풀이하자면 다음과 같습니다. 먼저 다음과 같이 handler interface를 만들어둡니다. 다음 코드들은 변수명도 다른 임의의 코드입니다.\npublic interface QnaQueryListHandler {\n    List<MappedEntity> processList(HandlerRequest request);\n}\n \n다음, 옥션과 지마켓 각각의 인터페이스 혹은 추상 클래스로 각각 사이트별로 처리하는 방식을 먼저 정합니다. 저는 FeignClient를 의존성 주입하기 위해 추상 클래스를 사용했고, 'AbstractAuctionQnaQueryListHandler'와 'AbstractGmarketQnaQueryListHandler'를 만들어 각각 사이트별로 다른 방법을 오버라이딩하여 분기합니다.\n@Service\npublic abstract class AbstractAuctionQnaQueryListHandler implements QnaQueryListHandler {\n\n    private String extractIds(HandlerRequest request) {\n        // 해당 방법은 지마켓 옥션이 다르기 때문에 분기될만함.\n        return \"\";\n    }\n\n    @Override\n    public List<MappedEntity> processList(HandlerRequest request) {\n        String ids = extractIds(request);\n        return handleIds(ids, request);\n    }\n\n    protected abstract List<? extends MappedEntity> handleIds(String ids, HandlerRequest request);\n}\n \n그런 다음, 옥션에 해당되는 게시판 문의에 대한 비즈니스 로직을 작성합니다.\n@Service(\"AUCTION_BOARD_INQUIRY_QUERY_LIST_HANDLER\")\npublic class AuctionBoardQueryListHandler extends AbstractAuctionQnaQueryListHandler {\n\n    @Override\n    protected List<? extends MappedEntity> handleIds(String ids, HandlerRequest request) {\n        // 생략\n        return new ArrayList<>();\n    }\n}\n \n이와 같은 방식으로 지마켓 긴급 메시지, 지마켓 게시판 문의, 옥션 긴급 메시지도 동일하게 작성합니다. 이렇게 하면 QnaQueryListHandler에 묶인 서비스들이 하나의 Map으로 Spring에 내장된 기능에 의해 생성됩니다. 이를 서비스 단에 의존성 주입하고 사용하면 됩니다.\n@RequiredArgsConstructor\npublic class QnaQueryServiceImpl implements QnaQueryService {\n\n    private final Map<String, QnaQueryListHandler> qnaQueryListHandlerMap;\n    // 생략\n    \n    public QueryEntity<QueryListQueryEntity> getQueryList(QnaQueryListRequest qnaQueryListRequest) {\n        String handlerKey = String.format(\"%s_%s_QUERY_LIST_HANDLER\",\n            qnaQueryListRequest.getSite().name(), qnaQueryListRequest.getMessageType().name());\n        QnaQueryListHandler handler = qnaQueryListHandlerMap.get(handlerKey);\n        List<QueryListJpaEntity> jpaEntityList = handler.processList(qnaQueryListRequest);\n        // 생략\n    }\n}\n \n해당 방법을 사용하면 서비스별로 if/else로 분기 처리하는 것을 보다는 가독성을 가져오면서도, 사이트별 혹은 문의 유형별 공통 기능들도 쉽게 유지보수하며 성능을 약간 더 향상할 수 있는 여지가 생깁니다.\n \n3. Multithread 활용하기\n \n  Java가 Node 계열의 JavaScript나 데이터 구조화에 유리한 Python에 밀리는 추세라고는 하지만, Interpreter 언어들과 달리 Java가 근본적으로 가지고 있는 강점 중 하나는 Multithread의 활용성입니다. 범용성이 높다는 Python도 아직 JVM의 멀티스레딩과 저용량 성능을 따라오지 못하고 있습니다. 그러므로 Java 개발자라면 Multithread를 적재적소에 활용해야 한다고 봅니다. 특히 성능을 고려해야 하는 경우에는 더욱 그렇습니다.\n저의 경우, 웬만하면 같은 DB 서버에 묶여 있고 인덱스가 있으면 최대한 JOIN을 선호합니다. 관계형 데이터베이스는 이를 위해 만들어진 것이기 때문입니다. 하지만 DB 서버가 같이 묶여 있지 않거나 인덱스가 없다면 JOIN은 어렵습니다. 따라서 다른 SQL이나 API 호출을 통해 데이터를 얻은 후, 기존에 조회된 문의 결과와 매칭할 수밖에 없습니다. 이럴 때, 문의 결과 리스트 n개와 다른 데이터 리스트 m개를 이중 for문으로 처리해서는 안 되고, 아래 예제와 같이 Map을 먼저 만들어줘야 성능이 나옵니다.\n\nMap<String, ExtraBasicInfoResponse> extraInfoMap = extraUrlConfig.getExtraBasicInfoMap(extraNumbersList, siteId);\n \n그 후 해당 Map을 가지고 매칭을 하면 되는데, 이때 단순 매칭을 위해서는 순서가 중요하지 않기 때문에 다음과 같이 Multithread를 사용하여 동시성 있게 처리하면 조회 성능을 끌어올리는 데 도움이 됩니다.\n \nreturn entityList.parallelStream()\n    .map(entity -> {\n        TempEntity tempEntity = asEntity(entity);\n        ExtraBasicInfoResponse extraInfo = extraInfoMap.get(entity.getNo());\n        // 생략\n    });\n \n \n다만, 단점은 메모리를 잡아먹기 때문에 해당 프로젝트에 같이 돌고 있는 다른 도메인들에게도 영향이 갈 수 있다는 점입니다. 제가 사용한 parallelStream은 단순하지만, 가독성을 위해 Stream 객체를 따로 만들어야 한다는 점과 Common ForkJoinPool을 사용하기 때문에 다른 곳에서도 해당 스레드풀을 사용하면 성능 향상이 예상보다 낮을 수 있습니다. 그렇다고 무작정 ForkJoinPool이나 ExecutorService와 같은 객체를 따로 만든다면 같은 parallelStream을 사용하는 도메인에는 영향을 주지 않지만 추가된 메모리 공간을 사용해야 합니다. 만약 여러 도메인들이 조회 성능만을 생각해 이런 식으로 풀을 추가했다가 총메모리를 초과해 GC 에러를 시켜 서버가 중단된다면 큰일입니다. 그러므로 더욱 신중하게 고려해야 합니다. 따라서 아무리 조회 성능을 향상한다 해도 메모리 공간을 지나치게 포기하면 안 됩니다. 다행히 저 코드 프로젝트는 parellelstream을 아직 쓰는 곳이 거의 없을뿐더러 '문의하기'처럼 규모가 있는 트래픽을 담당할만한 도메인이 아직까지는 없는 것으로 파악했습니다.\n \n \n \n4. GROUP BY를 안 쓰고도 카운트 집계 성능 내는 방법\n \n가장 문제가 되는 구버전의 조회에는 집계 기능도 포함되어 있었습니다. 집계를 할 때 거의 필수적으로 쓰이는 SQL문은 GROUP BY입니다. GROUP BY는 사용자에게 다양한 형태의 데이터를 제공하는 유용한 SQL문입니다. 다만, GROUP BY를 사용하면 유형별 임시 공간이 필요하고, 그룹화를 위해 정렬을 해야 하므로 일반적으로 O(n log n)의 시간복잡도를 가집니다.\n예시로, 구버전이 사용하는 집계 함수는 다음과 같은 코드 형태입니다.\nSELECT TYPE_CODE,\n       COUNT(*) AS COUNT\nFROM EXAMPLE\nWHERE CREATION_DATE BETWEEN @START_DATE AND @END_DATE\nGROUP BY TYPE_CODE;\n \n신버전에서는 다음과 같이 집계를 수행할 수 있습니다. 단, 이 방법은 고정된 TYPE_CODE가 정해져 있어야 합니다. 예를 들어, 성별과 같이 단순한 기준으로 row 개수를 구할 때는 유용하지만, 직업별 row 개수처럼 특정되지 않은 채로 다양한 유형별 개수를 파악할 때는 사용하기 어렵습니다.\n \nSELECT ISNULL(SUM(CASE WHEN TYPE_CODE = '1' THEN 1 ELSE 0 END), 0) AS FATHER,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '2' THEN 1 ELSE 0 END), 0) AS MOTHER,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '3' THEN 1 ELSE 0 END), 0) AS SON,\n       ISNULL(SUM(CASE WHEN TYPE_CODE = '4' THEN 1 ELSE 0 END), 0) AS DAUGHTER\nFROM EXAMPLE\nWHERE CREATION_DATE BETWEEN @START_DATE AND @END_DATE;\n \n이렇게 변경하면 GROUP BY처럼 추가적인 임시 공간을 거의 사용하지 않으며, 집계 결과를 저장할 몇 개의 변수 공간만 필요하고, 한 번만 순회하면 끝나기 때문에 시간복잡도 역시 O(n)에 그칩니다. 이처럼 무작정 시간과 공간이 반비례하는 것은 아닙니다. 포켓몬에서도 간혹 디아루가와 펄기아가 힘을 합칠 때가 있듯이 말입니다.\n \n \n출처 : https://pokemon.fandom.com/\n\n\n \n \n \n  개편된 ESM을 오픈한 지 며칠 안 된 지금, 아직까지는 큰 문제가 없어 보입니다. 더욱 빨라진 조회 속도로 인해 조회 빈도 자체가 예전에 비해 급속도로 높아진 점에서 고무적이라고 생각합니다. 기획과 UI/UX 팀에서 조회 성능을 위해 적절한 대안을 찾고, 정책적인 변화를 통해 중복되는 칼럼들을 단건씩 보이게 하여 조회 성능에 집중할 수 있게 해준 점에 대해서도 감사합니다. 이러한 변화는 구매자의 문의를 보고 싶어도 답답한 속도 때문에 못 보고 지나쳤던 판매자들에게 더 큰 기회를 줄 수 있을 것입니다. 또한, 물건을 사기 전에 답변이 오지 않아 망설였던 고객들의 발걸음을 되돌릴 수 있을 것이라 기대합니다.",
        "guid": "https://dev.gmarket.com/109",
        "categories": [
          "Backend"
        ],
        "isoDate": "2024-06-28T05:33:09.000Z"
      },
      {
        "creator": "지마켓 기술블로그",
        "title": "경력 입사자의 스크럼 스프린트 적응기 (with Jira software)",
        "link": "https://dev.gmarket.com/108",
        "pubDate": "Fri, 28 Jun 2024 14:22:21 +0900",
        "author": "지마켓 기술블로그",
        "comments": "https://dev.gmarket.com/108#entry108comment",
        "content": "<p data-ke-size=\"size16\">⚠️<span>&nbsp;</span><span style=\"color: red;\">본 글은 스크럼 표준 이론을 설명하는 것이 아닙니다.</span></p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">안녕하세요. Dev platform 팀 임진욱입니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">지마켓의 Jira, Wiki, GIthub, CI/CD 시스템을 담당하고 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">지마켓으로 이직 후, 1년간 업무를 진행하며 스크럼을 사용하는 경험기를 다룹니다.<br />(  스크럼에 대해서 더 알고 싶은 사람은<span>&nbsp;</span><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum\">스크럼 설명 - Jira software</a><span>&nbsp;</span>문서를 참고하면 도움이 됩니다.)</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\n<p style=\"color: #666666;\" data-ke-size=\"size16\">스크럼이란?<br />스크럼은 팀이 일련의 가치, 원칙 및 관행을 바탕으로 작업을 구조화하고 관리할 수 있도록 지원하는 애자일 프로젝트 관리 프레임워크입니다.<br />스크럼은 팀이 경험을 통해 배우고, 문제를 해결하면서 스스로 구성하며, 얻은 것과 잃은 것을 되돌아보며 지속적으로 개선하도록 유도합니다.</p>\n</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;시스템 관리 엔지니어로서 연속적으로 이어지는 운영 업무들을 짧은 단위로 목표를 정해서 스크럼을 하는 것이 좋아하지 않았습니다. 억지스레 '완료' 처리를 하게 되는 경우가 생기거나, 연속적인 업무의 경우, 계획한 스프린트에서 끝내지 못하고 다음 스프린트로 연기하는 경우도 있었습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">이직 후, 데일리 스크럼을 하는 것을 보고 \"여기도 스크럼을 하는구나!\" 하고 좋아하지 않았습니다. 하지만 팀에서 프로젝트를 이끌어 가는 것을 보고, 업무를 진행하는데 도움이 될 수 있겠다!라는 생각이 들었습니다. 이러한 생각이 들었던 이유는 아래와 같습니다.  </p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>⭐️ 팀장님이 회고때 관여를 하지 않습니다. (회고 운영 X, 팀원과 같은 위치에서 참여)</li>\n<li>플래닝 때 백로그 목표와 내용을 명확히 한다.</li>\n<li>데일리 미팅 시 짧게 진행되도록 노력한다. (스탠딩 미팅)</li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">그럼 실제로 어떻게 일하고 있는지 보여드리도록 하겠습니다.</p>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\">&nbsp;</h2>\n<h2 style=\"color: #000000; text-align: start;\" data-ke-size=\"size26\">이렇게 일하고 있어요  &zwj; </h2>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">스크럼의 단계는 아래와 같이 진행하고 있으며, 각 단계별로 어떻게 진행하고 있는지에 대해 경험을 공유드리겠습니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">스크럼 단계</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Sprint planning -&gt; Daily scrum -&gt; Sprint review -&gt; Sprint retrospective</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">스프린트 플래닝</h3>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\n<p style=\"color: #666666;\" data-ke-size=\"size16\">이번 스프린트에서 어떤 작업을 할 수 있으며, 선택한 작업은 어떻게 완료하는가?</p>\n</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;위 목적을 달성하기 위하여 팀원들과 시간을 들여 논의를 합니다. 저희 팀은 스프린트를 진행할 때, 스크럼 단계에 따라 작업을 할 수 있도록 Jira board를 활용합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;스프린트가 달성해야 하는 목표 항목을<span>&nbsp;<b>백로그</b>&nbsp;로</span> 생성합니다. 계획을 잘하기 위해서는 백로그를 긴 시간을 할애하여 생성하여야 합니다. 백로그 생성 시 알 수 없는 부분이 많거나 위험도가 높은 작업을 백로그로 등록하는 것은 지양해야 합니다. 작업 범위가 크거나 불확실성이 높은 작업은 세분화하고, 다음 스프린트를 위해 작업의 일부를 남겨 두어도 좋습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;프로젝트 관리자는 달성해야 하는 목표에 따라 스프린트를 생성합니다. 이때, 목표와 스프린트 기간과 시작일을 설정합니다. 스크럼을 통해 업무를 다년간 하며, 팀 스타일에 맞춰가고 있습니다. 스프린트 기간의 경우도 초기에는 대중적으로 사용하는 2주로 설정하였습니다. 저희 팀의 경우, 2주의 스프린트 기간이 너무 짧다는 의견이 스프린트 회고 때 있었고, 현재는 4주 기준으로 스프린트를 진행하고 있습니다. 즉, 시작일은 월초, 끝나는 시간은 월 말으로 설정되어 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"856\"><span data-url=\"https://blog.kakaocdn.net/dn/ydamS/btsIgYLJ95I/jU7VEv8NLXDjkjYLYGMxbK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/ydamS/btsIgYLJ95I/jU7VEv8NLXDjkjYLYGMxbK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FydamS%2FbtsIgYLJ95I%2FjU7VEv8NLXDjkjYLYGMxbK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"856\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"955\"><span data-url=\"https://blog.kakaocdn.net/dn/bwr47b/btsIfevIAf5/G1WuH8keJgZpqzI1tZcpgk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bwr47b/btsIfevIAf5/G1WuH8keJgZpqzI1tZcpgk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbwr47b%2FbtsIfevIAf5%2FG1WuH8keJgZpqzI1tZcpgk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"955\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">Jira board에서 스프린트가 생성되면 해당 스프린트에서 달성해야 하는 목표에 맞는 백로그를 스프린트에 등록하면 '스프린트 플래닝'을 위한 준비가 됩니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1680\" data-origin-height=\"636\"><span data-url=\"https://blog.kakaocdn.net/dn/p5i5X/btsIfGL3on9/zSHqcKnm3pKsJsI8sUtqj0/img.gif\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/p5i5X/btsIfGL3on9/zSHqcKnm3pKsJsI8sUtqj0/img.gif\" srcset=\"https://blog.kakaocdn.net/dn/p5i5X/btsIfGL3on9/zSHqcKnm3pKsJsI8sUtqj0/img.gif\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1680\" data-origin-height=\"636\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;스프린트 플래닝 회의는 프로젝트에 관여된 모든 사람이 함께 모여 진행합니다. 스프린트 플래닝 회의는 아침부터 오후까지 길게 잡고, 스프린트 목표를 이루기 위하여 백로그를 공유합니다. 형식적인 브리핑이 아닌 함께 하는 팀원들이 업무 내용을 이해할 수 있도록 상세하게 설명을 해야 합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;각 이슈마다 업무 설명이 끝난 후, '스토리 포인트'를 설정하게 되는데, '스토리 포인트'는 누가 해당 업무를 처리하는지 관계없이 해당 업무를 처리하는데 얼마큼 시간이 필요할지 생각하여 투표하고, 의견을 종합하여 최종 스토리 포인트를 결정합니다. 저희 팀은 'Planning Poker'를 이용하여 스토리 포인트를 측정합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"685\"><span data-url=\"https://blog.kakaocdn.net/dn/OQ7cC/btsIfV3haa3/IG5qq9RHLE3M4kkcBaIKoK/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/OQ7cC/btsIfV3haa3/IG5qq9RHLE3M4kkcBaIKoK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FOQ7cC%2FbtsIfV3haa3%2FIG5qq9RHLE3M4kkcBaIKoK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"685\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"640\" data-origin-height=\"345\"><span data-url=\"https://blog.kakaocdn.net/dn/P6AS7/btsIgGEzL6z/PVeTFM2sgVy6QgGGE3rc21/img.gif\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/P6AS7/btsIgGEzL6z/PVeTFM2sgVy6QgGGE3rc21/img.gif\" srcset=\"https://blog.kakaocdn.net/dn/P6AS7/btsIgGEzL6z/PVeTFM2sgVy6QgGGE3rc21/img.gif\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"640\" data-origin-height=\"345\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;이슈마다 '스토리 포인트' 할당이 끝나면, 이슈 담당자를 정합니다. 너무 많은 스토리를 가져오거나, 속도를 과대 평가하거나, 스프린트에서 완료할 수 없는 작업을 가져오지 말아야 합니다. 품질 또는 기술적 부채를 잊지 말아야 할 점입니다.</p>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\n<p style=\"color: #666666;\" data-ke-size=\"size16\">\"자신 또는 팀이 실패할 수밖에 없는 계획을 세우지 말아야 합니다.\"</p>\n</blockquote>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1170\"><span data-url=\"https://blog.kakaocdn.net/dn/bHyON5/btsIfVhTeqU/ncPYshvbUQKh4Q208PcBw0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bHyON5/btsIfVhTeqU/ncPYshvbUQKh4Q208PcBw0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbHyON5%2FbtsIfVhTeqU%2FncPYshvbUQKh4Q208PcBw0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1170\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1407\"><span data-url=\"https://blog.kakaocdn.net/dn/bhTTaT/btsIheOi07i/KBpMd0BVrujyWCBqhvKZ01/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/bhTTaT/btsIheOi07i/KBpMd0BVrujyWCBqhvKZ01/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbhTTaT%2FbtsIheOi07i%2FKBpMd0BVrujyWCBqhvKZ01%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1407\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;이슈 담당자까지 지정이 완료되고 나면 프로젝트 관리자는 달성가능한 '스토리 포인트'가 할당된 지 확인하고 스프린트를 시작합니다.</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">데일리 스크럼</h3>\n<blockquote style=\"color: #666666; text-align: left;\" data-ke-style=\"style2\">\n<p style=\"color: #666666;\" data-ke-size=\"size16\">데일리 스크럽은 핵심 팀(제품 소유자, 개발자 및 스크럼 마스터)이 매일 아침 참여하는 회의입니다. 진행률을 논의하고 업무 진행을 방해하는 요소를 파악하기 위한 짧은 회의입니다. 참석자들이 회의에 서서 참여하면 회의가 짧게 진행되기 때문에 '스탠드업 미팅'이라고도 불려집니다. 데일리 스크럼에서 중요한 점은 보고 형식이 되면 안 됩니다. 모두가 팀의 상태와 진행률을 알 수 있도록, \"우리\"라는 개념을 강조합니다.</p>\n</blockquote>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">저희 팀은 오전 10시에 회의를 진행하며 아래의 두 가지를 위주로 이야기하고 있습니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><b>어제 어떤 작업을 했습니다.</b></li>\n<li><b>오늘 무슨 일을 하고 있습니다.</b></li>\n<li><i>어떤 이슈가 나를 방해합니다. (위 두 개의 답변을 하며 함께 공유합니다)</i></li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;보고 형식으로 팀장님께 이야기하는 것이 아닌, 참여자들끼리 상황 공유를 하고 도움을 줄 수 있는 경우 의견을 냅니다. 또한 회의가 끝난 후 함께 문제를 해결하는 시간을 가지기도 합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">스프린트 리뷰</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">저희 팀은 스프린트를 4주 단위로 하고 있으며, 스프린트 리뷰와 회고는 월 마지막주 화요일에 하고 있습니다. 스프린트 리뷰 포맷은 아래와 같습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_9review_fin.png\" data-origin-width=\"3000\" data-origin-height=\"867\"><span data-url=\"https://blog.kakaocdn.net/dn/ceF86t/btsIgFr7UuC/QRmh4MgL7z2eGmYERVzIik/img.png\" data-phocus=\"phocus\" data-alt=\"sprint review\"><img src=\"https://blog.kakaocdn.net/dn/ceF86t/btsIgFr7UuC/QRmh4MgL7z2eGmYERVzIik/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FceF86t%2FbtsIgFr7UuC%2FQRmh4MgL7z2eGmYERVzIik%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_9review_fin.png\" data-origin-width=\"3000\" data-origin-height=\"867\"/></span><figcaption>sprint review</figcaption>\n</figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">스프린트 리뷰는 스프린트 동안 달성하고자 했던 목표와 \"결과물\"에 중점을 두고 리뷰를 합니다. 발표자는 스프린트 기간 동안 작업한 내용을 시각적으로 보여주고, 팀원은 피드백과 KPT (Keep, Problem, Try)를 작성해 줍니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">저희가 하는 것 중, 특이점은 \"Story Point Check\" 항목이 있는데, 스프린트 회고 때 나온 의견의 결과물로 스토리 포인트를 잘 설정하기 위하여 스프린트 리뷰 때, 설정한 스토리 포인트와 실제 본인이 작업하며 느낀 스토리 포인트에 대한 확인을 하고 있습니다. (선택적으로 하고 싶은 사람만 하고 있습니다)</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">스프린트 회고 ⭐️⭐️⭐️</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">스프린트 회고는 업무 관련된 회고가 아닌, 스프린트를 진행하면서 작업방법, 프로세스, 환경 등 교훈을 정리하고 팀 프로세스 개선을 위한 활동입니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">스프린트가 성숙해지기 위해서는 회고가 가장 중요하다고 생각합니다. 개인적으로 팀이 스크럼에 잘 적응할 수 있었던 이유는 스프린트 회고 문화를 잘 정착시켰기 때문이라 생각됩니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>직책자(팀장/PM)의 주도로 회고를 하지 않는다.</li>\n<li>회고 진행자는 팀원이 돌아가며 진행한다.</li>\n<li>팀원들의 적극적인 참여가 필요합니다.</li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">제가 생각하는 저희 팀이 회고를 잘 적응할 수 있었던 이유입니다. 한국의 문화적 특성상 직책자가 주도하는 회의에서는 자유로운 토론이 되지 않는 경우가 있습니다. 보통 스크럼 마스터가 회고를 진행하는데, 한 명의 고정된 진행자가 있을 경우, 팀원의 참여도가 점점 떨어질 수 있습니다. 팀원이 돌아가며 회고 진행을 할 경우, 진행자는 회고를 준비하고 이끌어 가기 위해 학습합니다. 이런 경험이 쌓이며 성숙된 문화가 정착되고 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">회고 툴은 회고 진행자가 전적으로 준비해오고 있습니다. 고정된 툴을 사용해야 하는 것도 아닙니다. 회고 툴을 사용한 것 중, 제일 좋았던 툴은<span>&nbsp;<a style=\"color: #0070d1;\" href=\"https://retrotool.io/\">retrotool</a>&nbsp;입니다.</span></p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1670\"><span data-url=\"https://blog.kakaocdn.net/dn/VRQ4A/btsIgYEYWKV/ruv7R7A0DLsmYAwJfKUQn0/img.png\" data-phocus=\"phocus\" data-alt=\"스프린트 회고\"><img src=\"https://blog.kakaocdn.net/dn/VRQ4A/btsIgYEYWKV/ruv7R7A0DLsmYAwJfKUQn0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FVRQ4A%2FbtsIgYEYWKV%2Fruv7R7A0DLsmYAwJfKUQn0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1670\"/></span><figcaption>스프린트 회고</figcaption>\n</figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">회고 진행자는<span>&nbsp;<a style=\"color: #0070d1;\" href=\"https://retrotool.io/\">retrotool</a>&nbsp;에서</span> 아래 칼럼을 생성하여 회고를 준비합니다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>[잘한 점/성공의 원인] : 칭찬하거나, 스프린트 진행 중 긍정적이었던 부분</li>\n<li>[부족한 점/장애물] : 부족하거나, 스프린트 진행 중 방해 요소</li>\n<li>[개선 방법]</li>\n<li>[개선방법(누적)] : 누적된 개선 방법 (문화로 정착할 경우 졸업)</li>\n</ul>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">진행 방법은 아래와 같습니다.</p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\" data-ke-style=\"style8\" data-ke-align=\"alignLeft\">\n<tbody>\n<tr>\n<td style=\"width: 33.3333%; text-align: center;\">절차</td>\n<td style=\"width: 33.3333%; text-align: center;\">내용</td>\n<td style=\"width: 33.3333%; text-align: center;\">시간</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">아이스브레이킹</td>\n<td style=\"width: 33.3333%;\">팀원과의 대화</td>\n<td style=\"width: 33.3333%;\">5 ~ 10분</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">개선방법 (누적) 공유</td>\n<td style=\"width: 33.3333%;\">&nbsp;</td>\n<td style=\"width: 33.3333%;\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">잘한점</td>\n<td style=\"width: 33.3333%;\">잘한점 작성</td>\n<td style=\"width: 33.3333%;\">5분</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">공유</td>\n<td style=\"width: 33.3333%;\">작성 내용 확인 및 공유</td>\n<td style=\"width: 33.3333%;\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">부족한점</td>\n<td style=\"width: 33.3333%;\">부족한점 작성</td>\n<td style=\"width: 33.3333%;\">5분</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">공유</td>\n<td style=\"width: 33.3333%;\">작성 내용 확인 및 공유</td>\n<td style=\"width: 33.3333%;\">&nbsp;</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">개선점</td>\n<td style=\"width: 33.3333%;\">개선점 작성</td>\n<td style=\"width: 33.3333%;\">5분</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">공유</td>\n<td style=\"width: 33.3333%;\">개선점 공유 및 평가</td>\n<td style=\"width: 33.3333%;\">&nbsp;</td>\n</tr>\n</tbody>\n</table>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;회고에 자유로운 대화를 하기 위하여 회고에 앞서 아이스브레이킹을 진행합니다. 밸런스 게임이나 이상형 월드컵 등으로 자유로운 분위기로 대화를 할 수 있는 환경을 준비합니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;지금까지 누적된 개선방법(누적)을 공유하고, 이번 스프린트에 잘한 점을 '5분'동안 각자 작성합니다.<span>&nbsp;</span><a style=\"color: #0070d1;\" href=\"https://retrotool.io/\">retrotool</a><span>&nbsp;</span>툴은 포스트잇 형태로 익명으로 작성 가능합니다. 업무 내용 외 스프린트를 진행하며, 칭찬하고 싶은 사람이나 좋았던 것에 대한 작성을 합니다. 팀원들이 작성한 내용을 보고, 공감이 될 경우 포스트잇을 클릭(LIKE)합니다. 회고 진행자는 공감이 많이 된 순으로 작성된 내용에 대해서 팀원들의 의견을 듣는 시간을 가집니다. 이때, 꼭 작성자가 본인이 쓴 내용을 이야기하지 않아도 됩니다. 부족한 점도 좋은 점과 동일하게 작성하고 공유합니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1676\"><span data-url=\"https://blog.kakaocdn.net/dn/0Bfdj/btsIfte7Uy1/ZsIoFxLsSloKpaK50uDVb0/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/0Bfdj/btsIfte7Uy1/ZsIoFxLsSloKpaK50uDVb0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F0Bfdj%2FbtsIfte7Uy1%2FZsIoFxLsSloKpaK50uDVb0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"blob\" data-origin-width=\"3000\" data-origin-height=\"1676\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;잘한 점과 부족한 점에 대한 공유가 끝나면, 팀원들이 '5분'간 각자 개선점을 작성합니다. 개선점 작성이 끝나면 진행자는 개선점을 공유합니다. 누적된 개선 사항 중, 이미 문화로 정착되었거나 불필요하다고 느낄 경우 '졸업'을 시키고, 새로운 개선 사항을 추가해 줍니다. 회고에서 나온 개선사항은 언제든 팀원들이 볼 수 있는 공간에 정리해 둡니다. (저희의 경우 주간회의록 제일 상단에 정리해 둡니다.)</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">모든 회고가 완료되면, 회고 진행자는 회고록을 작성합니다.  </p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_blob\" data-origin-width=\"1496\" data-origin-height=\"1332\"><span data-url=\"https://blog.kakaocdn.net/dn/zqyzu/btsIeUqMjBm/hUD1ITk7EZqRD3XQKMNyTk/img.png\" data-phocus=\"phocus\"><img src=\"https://blog.kakaocdn.net/dn/zqyzu/btsIeUqMjBm/hUD1ITk7EZqRD3XQKMNyTk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fzqyzu%2FbtsIeUqMjBm%2FhUD1ITk7EZqRD3XQKMNyTk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_blob\" data-origin-width=\"1496\" data-origin-height=\"1332\"/></span></figure>\n</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">&nbsp;</h3>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">스프린트 종료</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">프로젝트 관리자는 지정된 날짜에 스프린트를 종료를 팀원에 알리고 종료를 합니다.<br />그 후, 새로운 스프린트를 작성하고, 플래닝을 준비합니다.</p>\n<h1 style=\"color: #000000; text-align: start;\">&nbsp;</h1>\n<h1 style=\"color: #000000; text-align: start;\">맺음말</h1>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">스크럼 이론이 존재하고, 이를 지원하는 Tool로 지원을 받을 수 있습니다.<span>&nbsp;</span><span style=\"color: #ef5369;\"><b>중요한 점은 협업하는 팀이 목표를 달성하기 위하여 사용하는 방법론이므로 정답이 존재하지 않는다는 것입니다.</b></span><span>&nbsp;</span>회사마다 팀마다 맞는 문화를 만들어 협업 및 업무에 도움이 되는 방법을 찾아가는 것이 좋습니다.</p>\n<h1 style=\"color: #000000; text-align: start;\">&nbsp;</h1>\n<h1 style=\"color: #000000; text-align: start;\">참고 자료</h1>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">용어 설명</h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">백로그(Backlog) : 프로젝트 관리, 소프트웨어 개발, 업무 관리 등 다양한 분야에서 사용되는 용어로, 완료되지 않은 작업 항목들의 리스트나 목록을 가리킵니다.<br />스크럼 마스터 : 스크럼의 전문가로 스크럼 프레임워크를 따르도록 보장합니다</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">&nbsp;</h3>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\">참고 문서</h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><a style=\"color: #0070d1;\" href=\"https://brunch.co.kr/@jhw28/34\">스크럼과 스프린트</a></li>\n<li><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum\">스크럼 설명 - Jira software</a></li>\n<li><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum/sprint-planning\">스프린트 계획</a></li>\n<li><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum/standups\">데일리 스크럼</a></li>\n<li><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum/scrum-master\">스크럼 마스터</a></li>\n<li><a style=\"color: #0070d1;\" href=\"https://www.atlassian.com/ko/agile/scrum/retrospectives\">회고</a></li>\n</ul>",
        "contentSnippet": "⚠️ 본 글은 스크럼 표준 이론을 설명하는 것이 아닙니다.\n \n안녕하세요. Dev platform 팀 임진욱입니다.\n지마켓의 Jira, Wiki, GIthub, CI/CD 시스템을 담당하고 있습니다.\n \n지마켓으로 이직 후, 1년간 업무를 진행하며 스크럼을 사용하는 경험기를 다룹니다.\n(  스크럼에 대해서 더 알고 싶은 사람은 스크럼 설명 - Jira software 문서를 참고하면 도움이 됩니다.)\n스크럼이란?\n스크럼은 팀이 일련의 가치, 원칙 및 관행을 바탕으로 작업을 구조화하고 관리할 수 있도록 지원하는 애자일 프로젝트 관리 프레임워크입니다.\n스크럼은 팀이 경험을 통해 배우고, 문제를 해결하면서 스스로 구성하며, 얻은 것과 잃은 것을 되돌아보며 지속적으로 개선하도록 유도합니다.\n \n \n 시스템 관리 엔지니어로서 연속적으로 이어지는 운영 업무들을 짧은 단위로 목표를 정해서 스크럼을 하는 것이 좋아하지 않았습니다. 억지스레 '완료' 처리를 하게 되는 경우가 생기거나, 연속적인 업무의 경우, 계획한 스프린트에서 끝내지 못하고 다음 스프린트로 연기하는 경우도 있었습니다.\n이직 후, 데일리 스크럼을 하는 것을 보고 \"여기도 스크럼을 하는구나!\" 하고 좋아하지 않았습니다. 하지만 팀에서 프로젝트를 이끌어 가는 것을 보고, 업무를 진행하는데 도움이 될 수 있겠다!라는 생각이 들었습니다. 이러한 생각이 들었던 이유는 아래와 같습니다.  \n⭐️ 팀장님이 회고때 관여를 하지 않습니다. (회고 운영 X, 팀원과 같은 위치에서 참여)\n플래닝 때 백로그 목표와 내용을 명확히 한다.\n데일리 미팅 시 짧게 진행되도록 노력한다. (스탠딩 미팅)\n그럼 실제로 어떻게 일하고 있는지 보여드리도록 하겠습니다.\n \n이렇게 일하고 있어요  ‍ \n스크럼의 단계는 아래와 같이 진행하고 있으며, 각 단계별로 어떻게 진행하고 있는지에 대해 경험을 공유드리겠습니다.\n스크럼 단계\nSprint planning -> Daily scrum -> Sprint review -> Sprint retrospective\n스프린트 플래닝\n이번 스프린트에서 어떤 작업을 할 수 있으며, 선택한 작업은 어떻게 완료하는가?\n \n 위 목적을 달성하기 위하여 팀원들과 시간을 들여 논의를 합니다. 저희 팀은 스프린트를 진행할 때, 스크럼 단계에 따라 작업을 할 수 있도록 Jira board를 활용합니다.\n \n 스프린트가 달성해야 하는 목표 항목을 백로그 로 생성합니다. 계획을 잘하기 위해서는 백로그를 긴 시간을 할애하여 생성하여야 합니다. 백로그 생성 시 알 수 없는 부분이 많거나 위험도가 높은 작업을 백로그로 등록하는 것은 지양해야 합니다. 작업 범위가 크거나 불확실성이 높은 작업은 세분화하고, 다음 스프린트를 위해 작업의 일부를 남겨 두어도 좋습니다.\n \n 프로젝트 관리자는 달성해야 하는 목표에 따라 스프린트를 생성합니다. 이때, 목표와 스프린트 기간과 시작일을 설정합니다. 스크럼을 통해 업무를 다년간 하며, 팀 스타일에 맞춰가고 있습니다. 스프린트 기간의 경우도 초기에는 대중적으로 사용하는 2주로 설정하였습니다. 저희 팀의 경우, 2주의 스프린트 기간이 너무 짧다는 의견이 스프린트 회고 때 있었고, 현재는 4주 기준으로 스프린트를 진행하고 있습니다. 즉, 시작일은 월초, 끝나는 시간은 월 말으로 설정되어 있습니다.\n\n\n\n \nJira board에서 스프린트가 생성되면 해당 스프린트에서 달성해야 하는 목표에 맞는 백로그를 스프린트에 등록하면 '스프린트 플래닝'을 위한 준비가 됩니다.\n\n\n 스프린트 플래닝 회의는 프로젝트에 관여된 모든 사람이 함께 모여 진행합니다. 스프린트 플래닝 회의는 아침부터 오후까지 길게 잡고, 스프린트 목표를 이루기 위하여 백로그를 공유합니다. 형식적인 브리핑이 아닌 함께 하는 팀원들이 업무 내용을 이해할 수 있도록 상세하게 설명을 해야 합니다.\n \n 각 이슈마다 업무 설명이 끝난 후, '스토리 포인트'를 설정하게 되는데, '스토리 포인트'는 누가 해당 업무를 처리하는지 관계없이 해당 업무를 처리하는데 얼마큼 시간이 필요할지 생각하여 투표하고, 의견을 종합하여 최종 스토리 포인트를 결정합니다. 저희 팀은 'Planning Poker'를 이용하여 스토리 포인트를 측정합니다.\n\n\n\n 이슈마다 '스토리 포인트' 할당이 끝나면, 이슈 담당자를 정합니다. 너무 많은 스토리를 가져오거나, 속도를 과대 평가하거나, 스프린트에서 완료할 수 없는 작업을 가져오지 말아야 합니다. 품질 또는 기술적 부채를 잊지 말아야 할 점입니다.\n\"자신 또는 팀이 실패할 수밖에 없는 계획을 세우지 말아야 합니다.\"\n\n\n\n 이슈 담당자까지 지정이 완료되고 나면 프로젝트 관리자는 달성가능한 '스토리 포인트'가 할당된 지 확인하고 스프린트를 시작합니다.\n데일리 스크럼\n데일리 스크럽은 핵심 팀(제품 소유자, 개발자 및 스크럼 마스터)이 매일 아침 참여하는 회의입니다. 진행률을 논의하고 업무 진행을 방해하는 요소를 파악하기 위한 짧은 회의입니다. 참석자들이 회의에 서서 참여하면 회의가 짧게 진행되기 때문에 '스탠드업 미팅'이라고도 불려집니다. 데일리 스크럼에서 중요한 점은 보고 형식이 되면 안 됩니다. 모두가 팀의 상태와 진행률을 알 수 있도록, \"우리\"라는 개념을 강조합니다.\n \n저희 팀은 오전 10시에 회의를 진행하며 아래의 두 가지를 위주로 이야기하고 있습니다.\n어제 어떤 작업을 했습니다.\n오늘 무슨 일을 하고 있습니다.\n어떤 이슈가 나를 방해합니다. (위 두 개의 답변을 하며 함께 공유합니다)\n 보고 형식으로 팀장님께 이야기하는 것이 아닌, 참여자들끼리 상황 공유를 하고 도움을 줄 수 있는 경우 의견을 냅니다. 또한 회의가 끝난 후 함께 문제를 해결하는 시간을 가지기도 합니다.\n \n스프린트 리뷰\n저희 팀은 스프린트를 4주 단위로 하고 있으며, 스프린트 리뷰와 회고는 월 마지막주 화요일에 하고 있습니다. 스프린트 리뷰 포맷은 아래와 같습니다.\n \nsprint review\n\n\n스프린트 리뷰는 스프린트 동안 달성하고자 했던 목표와 \"결과물\"에 중점을 두고 리뷰를 합니다. 발표자는 스프린트 기간 동안 작업한 내용을 시각적으로 보여주고, 팀원은 피드백과 KPT (Keep, Problem, Try)를 작성해 줍니다.\n저희가 하는 것 중, 특이점은 \"Story Point Check\" 항목이 있는데, 스프린트 회고 때 나온 의견의 결과물로 스토리 포인트를 잘 설정하기 위하여 스프린트 리뷰 때, 설정한 스토리 포인트와 실제 본인이 작업하며 느낀 스토리 포인트에 대한 확인을 하고 있습니다. (선택적으로 하고 싶은 사람만 하고 있습니다)\n \n스프린트 회고 ⭐️⭐️⭐️\n스프린트 회고는 업무 관련된 회고가 아닌, 스프린트를 진행하면서 작업방법, 프로세스, 환경 등 교훈을 정리하고 팀 프로세스 개선을 위한 활동입니다.\n \n스프린트가 성숙해지기 위해서는 회고가 가장 중요하다고 생각합니다. 개인적으로 팀이 스크럼에 잘 적응할 수 있었던 이유는 스프린트 회고 문화를 잘 정착시켰기 때문이라 생각됩니다.\n \n직책자(팀장/PM)의 주도로 회고를 하지 않는다.\n회고 진행자는 팀원이 돌아가며 진행한다.\n팀원들의 적극적인 참여가 필요합니다.\n \n제가 생각하는 저희 팀이 회고를 잘 적응할 수 있었던 이유입니다. 한국의 문화적 특성상 직책자가 주도하는 회의에서는 자유로운 토론이 되지 않는 경우가 있습니다. 보통 스크럼 마스터가 회고를 진행하는데, 한 명의 고정된 진행자가 있을 경우, 팀원의 참여도가 점점 떨어질 수 있습니다. 팀원이 돌아가며 회고 진행을 할 경우, 진행자는 회고를 준비하고 이끌어 가기 위해 학습합니다. 이런 경험이 쌓이며 성숙된 문화가 정착되고 있습니다.\n회고 툴은 회고 진행자가 전적으로 준비해오고 있습니다. 고정된 툴을 사용해야 하는 것도 아닙니다. 회고 툴을 사용한 것 중, 제일 좋았던 툴은 retrotool 입니다.\n스프린트 회고\n\n\n회고 진행자는 retrotool 에서 아래 칼럼을 생성하여 회고를 준비합니다.\n[잘한 점/성공의 원인] : 칭찬하거나, 스프린트 진행 중 긍정적이었던 부분\n[부족한 점/장애물] : 부족하거나, 스프린트 진행 중 방해 요소\n[개선 방법]\n[개선방법(누적)] : 누적된 개선 방법 (문화로 정착할 경우 졸업)\n진행 방법은 아래와 같습니다.\n절차\n내용\n시간\n\n\n아이스브레이킹\n팀원과의 대화\n5 ~ 10분\n\n\n개선방법 (누적) 공유\n \n \n\n\n잘한점\n잘한점 작성\n5분\n\n\n공유\n작성 내용 확인 및 공유\n \n\n\n부족한점\n부족한점 작성\n5분\n\n\n공유\n작성 내용 확인 및 공유\n \n\n\n개선점\n개선점 작성\n5분\n\n\n공유\n개선점 공유 및 평가\n \n\n\n\n \n 회고에 자유로운 대화를 하기 위하여 회고에 앞서 아이스브레이킹을 진행합니다. 밸런스 게임이나 이상형 월드컵 등으로 자유로운 분위기로 대화를 할 수 있는 환경을 준비합니다.\n \n \n 지금까지 누적된 개선방법(누적)을 공유하고, 이번 스프린트에 잘한 점을 '5분'동안 각자 작성합니다. retrotool 툴은 포스트잇 형태로 익명으로 작성 가능합니다. 업무 내용 외 스프린트를 진행하며, 칭찬하고 싶은 사람이나 좋았던 것에 대한 작성을 합니다. 팀원들이 작성한 내용을 보고, 공감이 될 경우 포스트잇을 클릭(LIKE)합니다. 회고 진행자는 공감이 많이 된 순으로 작성된 내용에 대해서 팀원들의 의견을 듣는 시간을 가집니다. 이때, 꼭 작성자가 본인이 쓴 내용을 이야기하지 않아도 됩니다. 부족한 점도 좋은 점과 동일하게 작성하고 공유합니다.\n\n\n 잘한 점과 부족한 점에 대한 공유가 끝나면, 팀원들이 '5분'간 각자 개선점을 작성합니다. 개선점 작성이 끝나면 진행자는 개선점을 공유합니다. 누적된 개선 사항 중, 이미 문화로 정착되었거나 불필요하다고 느낄 경우 '졸업'을 시키고, 새로운 개선 사항을 추가해 줍니다. 회고에서 나온 개선사항은 언제든 팀원들이 볼 수 있는 공간에 정리해 둡니다. (저희의 경우 주간회의록 제일 상단에 정리해 둡니다.)\n \n모든 회고가 완료되면, 회고 진행자는 회고록을 작성합니다.  \n \n\n\n \n스프린트 종료\n프로젝트 관리자는 지정된 날짜에 스프린트를 종료를 팀원에 알리고 종료를 합니다.\n그 후, 새로운 스프린트를 작성하고, 플래닝을 준비합니다.\n \n맺음말\n스크럼 이론이 존재하고, 이를 지원하는 Tool로 지원을 받을 수 있습니다. 중요한 점은 협업하는 팀이 목표를 달성하기 위하여 사용하는 방법론이므로 정답이 존재하지 않는다는 것입니다. 회사마다 팀마다 맞는 문화를 만들어 협업 및 업무에 도움이 되는 방법을 찾아가는 것이 좋습니다.\n \n참고 자료\n용어 설명\n백로그(Backlog) : 프로젝트 관리, 소프트웨어 개발, 업무 관리 등 다양한 분야에서 사용되는 용어로, 완료되지 않은 작업 항목들의 리스트나 목록을 가리킵니다.\n스크럼 마스터 : 스크럼의 전문가로 스크럼 프레임워크를 따르도록 보장합니다\n \n참고 문서\n스크럼과 스프린트\n스크럼 설명 - Jira software\n스프린트 계획\n데일리 스크럼\n스크럼 마스터\n회고",
        "guid": "https://dev.gmarket.com/108",
        "categories": [
          "Infra"
        ],
        "isoDate": "2024-06-28T05:22:21.000Z"
      }
    ]
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "한식 신드롬에 힘입어, K-식품주 주가도 비상하고 있어요",
        "link": "https://blog.toss.im/article/economic-terms-20-kfoodstocks",
        "pubDate": "Thu, 04 Jul 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}\n.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-p4abj2{display:contents;line-height:1.55;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}🔖 이번 주 경제 용어\nK-식품주\n.css-1kxrhf3{white-space:pre-wrap;}이번 주 경제 용어는 환경에 관심 가지기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n해외에서 열풍을 일으키고 있는 K-푸드를 수출하는 기업들의 주식을 말해요.\n\n\n지구촌 날씨가 펄펄 끓고 있습니다. 최근 국내는 물론 북반구 여러 나라에서조차 폭염이 몰아치고 있어요. 이러한 땡볕 더위는 단순히 계절적 변화 때문만이 아니라, 기후 변화의 영향이라는 우려가 제기되고 있습니다. 앞으로도 매우 더운 여름을 보내야 할 것이라는 전망도 나오고 있고요.\n이렇게 올 여름 폭염 예보에 주가가 오르고 있는 우리나라 식품주가 있습니다. 무더운 날씨를 조금이라도 시원하게 보내기 위해 자꾸 찾게되는 아이스크림이 그 주인공인데요. 대표적으로 오랜 세월 우리 입맛을 사로잡은 아이스크림이자 MZ 세대의 밈(meme)이 되어버린 국민 아이스크림 브랜드, 메로나가 전세계적으로도 폭발적인 인기를 누리고 있다고 합니다.\n다들 한 번 쯤은 들어보셨을 “올 때 메로나” 밈은 외출한 언니에게 집에 오는 길에 메로나를 사다달라 부탁하려다가, 실수로 택배 기사에게 문자를 보내게 된 에피소드에서 시작되었는데요. 택배 기사가 실제로 메로나를 사다주면서 인터넷 커뮤니티에 이 사건이 올라왔고, 큰 화제가 됐어요. 이후 웹툰에서도 패러디되며 더더욱 유명해졌습니다. 여러모로 사랑을 듬뿍 받는 메로나 아이스크림이 해외에서도 큰 사랑을 받게 되면서 밈도 전파됐고, 전 세계 22개국에서 “All That Melona (올 때 메로나)”라 외친다 하네요.\n특히 북미 시장에서는 연간 1,800만 개 이상의 메로나가 판매되는 등 K-빙과 선봉장 역할을 톡톡히 해내고 있는데요. 최근에는 전세계적으로 더위가 극심해지고, K-콘텐츠 영향도 커지면서 미국 코스트코에서 품절 사태까지 빚어내는 등 더욱 화제가 되고 있다 합니다.\n원래 음식료 산업은 대부분 자국민 대상이었고 시장 규모 또한 국내에 한정되어 있었기에, 전통적인 내수 산업으로 구분됐었는데요. 한국 음식에 대한 글로벌 선호도가 높아지면서 국내 식품 기업에도 변화가 일어나고 있습니다. 내수 중심의 상품에서 해외 고객의 입맛을 사로잡기 위한 상품의 다변화에도 노력을 기울이고 있어요. 다양한 현지화 전략으로 전세계 시장을 공략하고 있습니다.\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}\"아직도 배고프다\" 수출주 변신한 식품주\n(매일경제 2024.6.16)\n해외에서 'K푸드'가 인기를 끌면서 식료품주들 주가가 동시다발적으로 오르고 있다. '불닭볶음면'으로 북미·유럽에서 선풍적인 인기를 얻고 있는 삼양식품이 1분기에 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}어닝 서프라이즈를 내면서 식료품주들은 최근 한 달 코스피 주가 상승률 상위 종목 대부분을 차지하고 있다.\n한 달간 CJ씨푸드 주가가 120.6% 오른 것을 비롯해 해태제과식품은 72.4%, 빙그레는 46.1% 상승했다. 코스피는 연초 이후 3% 올랐지만 음식료 업종은 24% 상승했다. 사조대림, 사조산업, 사조씨푸드는 지난 14일 동시에 상한가를 기록했다. 냉동김밥이 미국에 수출될 것이란 기대 때문이다.\n식료품주 상한가는 최근 한 달간 드문 일이 아니다. 식료품 업종 내 투자자들이 관심을 갖는 테마가 바뀌면서 여러 종목이 차례로 상한가를 기록하고 있다.\n1분기 어닝 서프라이즈 발표로 5월 17일 삼양식품이 상한가를 기록한 데 이어 지난 10일에는 빨리 찾아온 더위로 빙과류 매출이 늘어날 것이라는 기대에 크라운제과와 해태제과식품이 상한가를 쳤다. 11일엔 막걸리 수출 기대로 국순당이, 13일엔 불닭볶음면 소스를 생산하는 에스앤디가 가격제한폭까지 주가가 치솟았다. 주가가 계속 상승하는 섹터이다 보니 호재성 뉴스가 바로 반영된다.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}식품주들의 동반 주가 랠리는 수출 모멘텀 영향이 크다. 내수 방어주였던 식품주들이 K컬처와 K푸드 유행으로 '수출 성장주'가 됐다. 국내 음식료 시장 규모가 89조원 수준이라면 글로벌 음식료 시장 규모는 9000조원에 달한다.(중략)\n\n\nK-팝에서 시작된 K-콘텐츠가 글로벌에서 큰 인기를 얻으면서, K-뷰티는 물론 K-푸드까지 열풍을 일으키고 있습니다. 한국국제문화교류진흥원이 발간한 ‘2024 해외한류실태조사’에 따르면, 한류 경험자 중 한국 음식을 이용한 사람의 비율은 75.2%로 11개 콘텐츠 중 가장 높은 것으로 나타났어요.\n한식이 마음에 드는 이유로는 ‘맛이 있어서’(55.4%)가 가장 높고, 다음으로 ‘영화, 드라마 등에서 본 한식 문화를 경험할 수 있어서’(25.3%), ‘가격이 적당해서’(24.1%) 등이 꼽혔습니다. 특히 1위인 맛에 대한 만족감이 2위 응답률보다 2배 격차로 높았고, 대륙별 호감 요인 1위 역시 ‘맛이 있어서’로 조사되었는데요. 단순히 콘텐츠에서 접하고 나서 경험하는 것 이상으로 맛 자체에 대한 호감도가 높아 인기가 많은 것으로 해석할 수 있겠습니다.\n\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}출처: 2024 해외한류실태조사, 한국국제문화교류진흥원 KOFICE\n코스트코, 월마트 같은 미국 주류 유통채널에도 K-푸드 진출이 확대되고 있어요. 이는 K-푸드가 단순히 교민들을 위한 향수의 대상만이 아니라, 세계인들에게 사랑받는 가치있는 상품으로 자리매김했다는 의미입니다.\n앞서 예시로 든 빙그레의 메로나는 달콤하고 시원한 맛으로 전 세계 소비자들의 입맛을 사로잡은 아이스크림이 되었고요. 삼양식품의 불닭볶음면은 핵불닭, 오리지널, 짜장, 크림 까르보 등 여러가지 맛을 출시하며 매운 정도의 레벨을 다양한 맛 시리즈로 풀어내고 있습니다. BBQ 치킨도 프라이드 치킨 이외에 양념, 간장, 마늘 등 세계인들의 입맛에 맞게 다양한 조리법을 개발했고요.\nK-푸드의 해외 시장 진출 확대와 더불어 관련 기업과 ETF에 대한 투자도 활발하게 이루어지고 있습니다. K-식품주 대표로는 빙그레, 삼양식품, CJ제일제당, 농심, 오리온, 오뚜기, 사조산업, 사조대림, 동원F&B 등이 있고요. ETF로는 HANARO Fn K-푸드 ETF, KRX300 필수소비재 지수 ETF 등이 있습니다.\n\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n푸드테크(Food-Tech): 식품(Food)과 기술(Technology)의 합성어. 식품 산업에 정보통신기술(ICT), 인공지능(AI), 빅데이터 등의 기술을 접목하여 혁신적인 서비스나 제품을 개발하는 것을 말해요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "내수 방어주에서 수출 성장주가 된 K-식품주",
        "contentSnippet": "내수 방어주에서 수출 성장주가 된 K-식품주",
        "guid": "https://blog.toss.im/article/economic-terms-20-kfoodstocks",
        "isoDate": "2024-07-04T02:00:00.000Z"
      },
      {
        "title": "왜 유럽은 똑같은 화폐를 쓸까?",
        "link": "https://blog.toss.im/article/behindthemoney-5",
        "pubDate": "Tue, 02 Jul 2024 02:12:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}💡 이 글에서 알 수 있는 것들\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}유럽이 유로화를 만든 이유 \n아시아에 단일화폐가 없는 이유 \n여러 나라가 똑같은 화폐를 쓸 때의 장·단점 \n\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n한국은 원화, 일본은 엔화, 중국은 위안화를 쓴다. 미국 달러처럼 초국가적인 돈도 있지만 대부분은 나라별로 정한 화폐를 사용하고 있다. 그런데 유럽은 다르다. 유로화. 프랑스를 가든, 그리스를 가든 일부 국가를 제외하고는 지중해부터 북유럽까지 모두 같은 화폐를 쓴다.\n이제 휴가철이다. 여행하면 유럽 아닌가. 훌쩍 떠나고 싶은 마음과 함께 유로화의 장단을 생각해 본다. 한 번만 환전하면 여러 나라에서 같은 돈을 사용할 수 있어 편하다. 하지만 화폐가치에 차이가 없기 때문에 낮은 물가의 혜택을 보기 어렵기도 하다.\n2008년 그리스 재정위기처럼 경제적으로 취약한 나라에서 금융 위기가 닥치면, 독일이나 프랑스 같은 유럽 내 선진 국가가 돈을 써서 문제를 해결하기도 한다. 그리스 재정위기 당시, 프랑스의 니콜라 사르코지 전 대통령은 \"유럽연합 내 회원국의 문제는 유로존 안에서 해결해야 한다\"며 유로존 국가들의 결속을 강조하기도 했다. 이 또한 우리에겐 낯선 모습이다. 이 독특한 문화는 어디에서 시작된 것일까?\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n유로화를 만든 진짜 이유\n유럽이 똑같은 화폐를 쓰기 시작한 건 1999년, 지금으로부터 25년 전이다. 당시 유럽중앙은행 총재였던 뵘 뒤젠베르크는 유로화가 국제통화가 될 것이며, ‘의도적으로 도전하는 것은 아니지만 달러의 지위를 흔들 것’이라고 말했다.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}유럽이 이런 선택을 한 이유는 미국 때문이었다. 1945년 2차 세계대전 이후, 미국은 세계패권국가가 되었고 달러 역시 기축통화가 되었다. 쉽게 말하면, 세상에 존재하는 모든 돈이 미국 달러를 기준으로 평가되는 세상이 만들어진 것이다. 하지만 이때만 하더라도 유럽 입장에서는 아쉬울 것이 없었다. 전쟁 이후 극도로 피폐한 상황에서 미국의 경제적 지원은 절대적이었기 때문이다.\n미국은 1947년부터 1951년까지 일명 ‘마셜플랜(Marshall Plan)’을 실시했다. 서유럽 16개 국가에 약 130억 달러, 식료품부터 원자재와 기계 장비까지 엄청난 돈을 쏟아부었다. 미국의 도움으로 유럽은 GDP와 산업생산을 늘리며 전후 회복을 가속화할 수 있었고 동시에 미국 중심의 세계경제가 자리를 잡게 되었다.\n하지만 1970년대 들어 상황이 바뀐다. 프랑스는 유럽의 자존심을 내세우며 미국과 대립하는 정책을 추진했고 독일은 '라인강의 기적'이라 불리며 눈부신 경제성장을 이루어낸다. 같은 시기 미국 경제는 위축되기 시작했다. 1980년대 레이건 대통령 시절에는 일명 ‘.css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}쌍둥이 적자’가 미국을 괴롭혔다.\n\n📌 쌍둥이 적자(Twin Deficits)\n\n미국 로널드 레이건 대통령은 일명 ‘레이거노믹스'를 추진했다. 적극적인 감세정책과 기업 중심의 경제 정책을 추진한 것이다. 덕분에 세금은 줄어들고 정부 지출이 늘어났는데 부족한 돈을 메꾸기 위해 정부가 국채를 발행하자 이번에는 달러의 가격이 높아졌다. 세계 여러 나라들이 미국 국채를 적극적으로 사들였기 때문이다. 달러의 가치가 높아진다는 것은 미국 제품의 가격이 올라가는 것을 의미했고, 그로 인해 미국 제품의 수출 감소로 인한 경상수지 적자가 발생했다. 결국 걷히는 세금보다 정부 지출이 많은 ‘재정수지 적자’와 수입이 수출보다 많아 생기는 ‘경상수지 적자’가 동시에 일어났다. 이를 일명 '쌍둥이 적자'라고 하는데 미국, 영국 등 신자유주의 정책을 펼친 국가에서 발생한 문제들이다.\n\n그렇다면 이 시기 유럽이 미국을 제치고 세계 경제를 주도하게 되었을까? 그렇지도 않았다. 일명 신자유주의, 미국은 막대한 자본을 유럽 시장에 투자했고 유럽과 미국의 시장 경제는 얽히고설켜 있었다. 유럽은 미국을 벗어나지 못했고 미국의 불황이 유럽의 불황으로 이어지는 등 여러 문제가 발생하자, 그 대안으로 유럽은 독자적인 통화체제를 마련하고자 했다.\n미국의 영향력을 차단하고, 유럽의 위상을 새롭게 하며, 세계 경제에서 보다 주도적인 지위를 구축하겠다는 생각이었다. 유럽은 1991년부터 통합 화폐를 준비했고 1999년 유로화가 등장한다.\n화폐로 똘똘 뭉치는 시대, \n우리는 IMF를 맞았다\n유로화가 등장할 무렵, 우리나라의 상황은 좋지 않았다. 1997년 3월, 대한민국 외환위기의 시발점인 한보사태가 일어난다. 4월에는 삼미와 진로, 5월에는 대동과 한신공영, 7월에는 기아자동차, 10월에는 쌍방울, 11월에는 해태, 12월에는 고려증권과 한라그룹 등 국내 굴지의 기업들이 줄줄이 쓰러져 나갔다.\n경제 위기는 우리나라 뿐만이 아니었다. 아시아가 흔들리기 시작했다. 1997년 7월부터는 태국이 흔들렸다. 태국의 화폐인 바트 환율이 20% 이상 떨어진 것이다. 153억 달러의 경상수지 적자가 문제였다. 바트 화폐의 평가 절하가 계속되었고, 태국 정부는 8월 들어 IMF(국제통화기금)에 지원을 요청한다.\n바트화 가치가 갑자기 떨어지면서 인도네시아, 말레이시아, 필리핀, 한국 등으로 파장이 확대됐다. 아시아 각국의 화폐 가치가 급락하고, 외국에서 투자한 돈도 빠르게 빠져나가며 아시아 외환 시장이 마비되었다. 이러한 여파 가운데 1997년 말 우리나라도 외환위기를 맞게 된다.\n이에 반해, 1990년대 중반 미국은 캐나다와 멕시코를 끌어들여 북미자유무역협정(NAFTA)을 체결해 ‘달러블록’을 강화했다. 각국의 통화를 미국 달러에 연동하거나, 달러와 밀접한 관계를 맺는 경제정책을 펼쳐나간 것이다. 같은 맥락에서 유로화의 등장은 ‘유로블록'으로 해석되었다. 아시아만 ‘통화블록'이 없으니 아시아의 처지는 위태로울 수밖에 없었다.\n유로화에 대응한 한중일 공동화폐?\n이러한 변화에 민감하게 반응했던 나라는 일본이었다. 1997년 말 일본은 아시아통화기금(AMF)을 제안했다. 일본은 미국이 주도하는 IMF가 동아시아 경제 위기 극복에 도움이 되지 못한다고 비판했고, 그 대안으로 일본을 중심으로 한 엔화의 국제화, 동아시아 기금 마련, 아시아 금융 블록 등을 제안했다.\n당시 일본은 한국을 포함한 신흥공업국가(NICs)에 엄청난 자본투자를 하고 있었기 때문에 불가능한 발상이 아니었다. 하지만 미국은 강력하게 반발했다. 달러를 벗어나서 독자적인 엔화 시스템을 구축한다는 것은 미국의 동아시아 패권에 문제가 생길 수 있는 발상이기 때문이다.\n일본이 주도하는 아시아 경제? 한국은 물론이고 중국 또한 결코 반길 수 없었다. 오랜 역사적 은원관계가 청산되지 않은 상황에서 일본 주도의 아시아 통화블록은 또 다른 제국주의로 해석될 수밖에 없었다. 더구나 2000년대 이후 중국은 한국과 일본을 추월해 압도적인 경제성장을 이어갔기 때문에 ‘한중일 FTA’, ‘한중일공동화폐’ 등 여러 아이디어는 말 그대로 아이디어에 멈추고 말았다.\n한중일의 경제 규모를 합치면 미국이나 유럽을 압도할 수준임에도 불구하고 왜 지금까지 아시아는 유럽처럼 연합하지 못했을까? 해답은 통화가 아니라 역사에 있다.\n반백 년의 고민,\n유로화는 단순한 경제적 결합이 아니다\n20세기 전반 유럽은 두 차례의 세계대전을 경험했다. 영국, 프랑스, 독일 그리고 러시아로 나뉘어 정말이지 오랫동안 싸워왔다. 프랑스의 경제학자이자 정치인인 장 모네는 유럽이 어떻게 해야 평화에 도달할 수 있을지 고민했다. 민족주의와 제국주의가 유럽을 전쟁터로 만들었다고 생각했던 장 모네는 민족 국가가 아닌 유럽 공동체, 식민지가 아닌 공동 시장을 주장했다.\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n만약 유럽 국가들이 한 번 더 서로에 대항하여 스스로를 보호하려 한다면, 다시 한번 막강한 군대를 만드는 것이 필요할 것이다(...) 우리는 그것이 얼마나 돈이 드는지 안다. 사회 개혁은 군비지출 압력으로 제약받거나 지연될 것이다. 유럽은 또 한 번 공포 속에서 창출되게 될 것이다(...) 번영과 사회적 진보를 누리기 위해서 유럽의 국가들은 연방이거나 혹은 그들을 단일 경제 단위로 만들어 줄 수 있는 ‘유럽 단일체(European entity)’를 구성해야 한다.\n– 장모네, 《유럽 통합의 아버지 장 모네 회고록⟫ 중.css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n일명 모네 플랜. ‘이익을 두고 다투는 것이 아니라 더 큰 이익을 위해 협력한다’라는 그의 비전은 전쟁의 악몽에서 벗어나고픈 유럽인들에게 큰 영향을 미쳤다. 프랑스 대통령 드골과 독일의 총리 아데나워는 유럽 공동체를 이루기 위해 적극적인 화해 협력 정책을 추진했고, 영국도 동참하면서 1950년대 유럽철강공동체(ECSC)가 등장하게 된다. 철강은 산업혁명의 핵심 자원으로 오랜 기간 분쟁의 원인이었다. 하지만 이제는 협력의 도구가 된 것이다.\n협력은 협력의 역사를 낳았다. 냉전이 붕괴되자 서유럽은 낙후된 동유럽을 품으며 유럽 공동체를 확대해 갔고, 여러 단계를 거쳐 오늘날 유럽연합(EU)으로 발전했다. 유로화는 이러한 노력의 결정체라고 할 수 있다. 파시즘이나 나치즘 같은 극단적인 민족주의를 제어하고 미국을 견제할 수 있는 독자적인 시장을 구축하려는 시도이기도 했다.\n유로화가 도입된 1999년 유럽의 경제는 2.8% 성장, 다음해에는 3.5% 성장했다. 화폐간  거래비용이 감소하고, 유로화를 쓰는 국가 사이의 거래가 더욱 활발해졌다. 국가간 환율 불확실성이 사라지면서 유럽은 하나의 시장이 되었고 그만큼 성장이 가속화되었기 때문이다.\n그렇다고 유로화가 만능은 아니었다. 2007년 서브프라임 모기지 사태로 촉발된 미국발 금융 위기가 일어났을 때 유럽의 경제지도자들은 유로화를 기반으로 한 유럽 경제가 미국의 위기에 영향을 받지 않을 것으로 생각했다. 하지만 그렇지 않았다. 미국발 금융 파생상품은 유럽과도 긴밀히 얽혀 있었기 때문에 여파가 굉장했다. \n또한 장점이 곧 단점. 유로화의 등장 이후 유럽중앙은행은 단일 통화 정책을 실시했고, 개별 국가의 경제 상황에 맞춘 통화 정책은 불가능해졌다. 현실적으로 존재하는 국가간 격차를 해결하기 어려워진 것이다.\n중요한 사실은 앞으로 유럽이, 유로화가 어떻게 될 것인가보다는 우리가, 우리나라가, 우리나라를 둘러싼 동북아시아가 어떻게 될 것인가이다. 그들이 지난 수십 년간 평화를 도모하고 새로운 길을 개척하는 동안 어쩌면 우리는 반복된 갈등의 수렁에서 헤매고 있었던 것은 아닐까. 유로화는 단순한 경제적 결합이 아닌 깊은 역사적 경험과 고뇌의 산물이다. 이제 우리도 그러한 노력을 할 때가 되었다.\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고자료 \n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 이지영 Graphic 이은호 조수희",
        "content": "유럽은 ‘이것’ 때문에 유로화를 만들었다.",
        "contentSnippet": "유럽은 ‘이것’ 때문에 유로화를 만들었다.",
        "guid": "https://blog.toss.im/article/behindthemoney-5",
        "isoDate": "2024-07-02T02:12:00.000Z"
      },
      {
        "title": "토스 ‘머니북’, 베스트셀러 등극… 서울국제도서전 참가 성료",
        "link": "https://blog.toss.im/article/toss-moneybook-store",
        "pubDate": "Tue, 02 Jul 2024 01:52:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}토스 머니북, 베스트셀러 올라… 출간 한 달여 만에 10쇄 인쇄 돌입\n‘2024 서울국제도서전’ 토스 부스 방문객은 6천 명 넘어\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n\n.css-1kxrhf3{white-space:pre-wrap;}토스가 ‘2024 서울국제도서전’ 참가를 성황리에 마쳤다.\n2024 서울국제도서전은 지난 6월 26일(수)부터 30일(일)까지 서울 삼성동 코엑스에서 열렸다. 지난 5월 <더 머니북(THE MONEY BOOK): 잘 살아갈 우리를 위한 금융생활 안내서>(이하 ‘머니북’)을 펴낸 토스는 출판사로서 이번 도서전에 참가했다. 머니북은 토스의 앱 내 콘텐츠 서비스 ‘오늘의 머니 팁'과 콘텐츠 플랫폼 ‘토스피드’의 콘텐츠들을 엮어서 재구성한 책이다.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n토스는 일상에 꼭 필요한 물건들로 채워진 상점 콘셉트의 부스를 마련했다. 이름도 ‘더 머니북 스토어(THE MONEY BOOK STORE)’로 붙였다. 냉장고에는 식료품을, 진열장에는 다양한 생필품을 소품으로 배치해 머니북에 담긴 금융 지식이 일상에 꼭 필요한 물건과 같다는 의미를 전하고자 했다.\n\n특히 과소비 방지, 내 집 마련, 재산 불리기, 노후 준비 등 6가지 키워드 중 개인의 금융 관심사에 맞는 주제를 선택하고 원하는 속지를 조합해 나만의 머니북을 만드는 '북 바인딩' 이벤트가 큰 사랑을 받았다. 자신만의 머니북을 만들기 위해 부스 입장을 기다리는 방문객 줄이 길게 늘어서는 등 진풍경도 연출됐다.\n\n집계 결과 방문객 1인당 대기부터 체류까지 평균 1시간가량을 토스 부스에서 보낸 것으로 나타났다. 2024 서울국제도서전이 진행되는 닷새간 부스에는 6천 명 이상이 방문했다. 머니북 스토어와 나만의 머니북 관련 내용을 SNS에 인증한 건수는 1천 건을 넘겼다.\n토스 브랜드 커뮤니케이션을 총괄하는 윤기열 헤드는 \"누구나 쉽고 평등하게 금융 생활을 할 수 있는 세상을 만들고자 하는 토스의 브랜드 비전에 따라 일상에 꼭 필요한 금융 상식을 엮어낸 머니북이 큰 사랑을 받아 기쁘다”라며 “특히, 머니북을 통해 다양한 온오프라인 공간에서 많은 분들이 토스라는 브랜드를 더 가까이 경험할 수 있어 뜻깊었다”라고 밝혔다. 이어 “어렵고 멀게만 느껴지던 금융과 보다 친숙해지고, 나아가 실생활에 도움으로 이어진다면 그것이야말로 머니북 프로젝트의 진정한 결실이라 할 수 있을 것”이라고 전했다.\n\n머니북은 출간 한 달여 만에 교보문고 종합 베스트셀러 5위(온라인 2위), 온라인 경제경영 분야 1위, 예스24 경제경영 분야 2위 및 알라딘 경제경영 분야 1위에 오르며 베스트셀러에 등극했다. 판매 부수는 3만 부를 넘어서며 10쇄 인쇄에 돌입했다. 토스는 머니북 판매 수익금을 모두 금융소외층을 위해 사용할 예정이다. (끝)",
        "content": "출간 한 달여 만에 10쇄 인쇄에 돌입했어요.",
        "contentSnippet": "출간 한 달여 만에 10쇄 인쇄에 돌입했어요.",
        "guid": "https://blog.toss.im/article/toss-moneybook-store",
        "isoDate": "2024-07-02T01:52:00.000Z"
      },
      {
        "title": "편의점 갈 필요 없는 교통카드 충전하기: 토스로 티머니 충전하는 법 ",
        "link": "https://blog.toss.im/article/toss-tmoney",
        "pubDate": "Mon, 01 Jul 2024 00:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-oni540{position:relative;width:100%;height:0;padding-bottom:56.25%;}\n.css-122y91a{position:absolute;top:0;left:0;width:100%;height:100%;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}버스 곧 도착할 예정인데, 교통카드 잔액이 부족하다면? 편의점 갈 필요 없이 토스 이용해 티머니 충전 바로 할 수 있어요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n토스 이용해 티머니 충전하는 법\n1. 오른쪽 하단 ‘전체’를 누른 후 ‘교통카드 조회 충전’ 메뉴를 선택해 주세요. \n.css-1pgssrp{max-width:100%;border-radius:16px;}.css-wgpbp3{display:block;margin-top:6px;}.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}토스로 티머니 충전하는 법\n2. 편의점에서 산 티머니 교통카드나 토스에서 발급받은 토스유스카드 중 잔액을 조회하거나 충전할 카드의 버튼을 눌러주세요. \n\n3. 티머니 로고가 있는 교통카드를 휴대폰 뒷면에 댄 상태로 3초 이상 기다려주세요. 이 때 너무 빨리 떼면 카드를 인식할 수 없어요.  \n\n4. 교통카드가 등록되면 충전을 시작할 수 있는데요. 충전할 금액을 입력한 다음 휴대폰 뒷면에 교통카드를 대면 충전을 진행할 수 있어요.",
        "content": "티머니 충전소 찾아 헤매지 않아도 돼요.",
        "contentSnippet": "티머니 충전소 찾아 헤매지 않아도 돼요.",
        "guid": "https://blog.toss.im/article/toss-tmoney",
        "isoDate": "2024-07-01T00:00:00.000Z"
      },
      {
        "title": "국내 여행할 때 숙박·식음료 할인받기: 디지털 관광주민증",
        "link": "https://blog.toss.im/article/money-policies-15",
        "pubDate": "Fri, 28 Jun 2024 05:32:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}국내 여행을 계획 중이라면 ‘디지털 관광주민증(이하 관광주민증)’을 활용해 보세요. 관광주민증은 인구 감소 위기 지역의 관광 활성화를 위해 발급하는 일종의 ‘명예주민증’이에요.\n관광주민증을 소지하면 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}여행 시 관람, 체험, 식음료, 숙박, 쇼핑 등 다양한 할인 혜택을 받을 수 있어요. 전국 34개 지역, 800여 곳에서 관광주민증을 사용할 수 있는데요. 대표적으로 경기 가평군 가평브릿지집라인 20% 할인, 전북 임실군 치즈테마파크 10% 할인, 충북 영동군 일라이트호텔 30% 할인, 경북 영덕 고래불국민야영장 20% 할인 등 혜택이 무척 다양해요. .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}대한민국 구석구석 누리집에서 지역별 혜택을 더 자세히 확인할 수 있어요.\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-1pgssrp{max-width:100%;border-radius:16px;}\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}출처: 대한민국 구석구석 누리집 \n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}관광주민증 발급 방법\n➀ 대한민국 구석구석 누리집(korean.visitkorea.or.kr) 접속 후 로그인\n➁  ‘여행정보→디지털 관광주민증’ 메뉴에서 현재 거주 지역과 관광주민증 발급받을 지역 선택하면 끝\n*현재 거주지에서 관광주민증을 발급받는 것은 불가능해요.\n관광주민증 사용 방법\n할인 혜택 받을 방문지에서 QR코드를 스캔해 할인증 다운 받은 후 직원에게 제시\n교통비 할인도 놓치지 마세요. 코레일에서는 6월 30일까지 각종 할인 혜택을 제공해요. 열차 35% 할인, 역사 매장 이용권 5% 할인, KTX 2만 원 할인권 증정 등이에요.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 이지영 Graphic 조수희",
        "content": "관람, 체험, 식음료, 숙박, 쇼핑 등 할인 혜택을 받을 수 있어요.",
        "contentSnippet": "관람, 체험, 식음료, 숙박, 쇼핑 등 할인 혜택을 받을 수 있어요.",
        "guid": "https://blog.toss.im/article/money-policies-15",
        "isoDate": "2024-06-28T05:32:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]