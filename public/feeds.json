[
  {
    "name": "ㅍㅍㅅㅅ",
    "category": "큐레이팅",
    "posts": []
  },
  {
    "name": "C++ Team Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Augustin Popa",
        "title": "What’s New in vcpkg (July 2024)",
        "link": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-july-2024/",
        "pubDate": "Thu, 01 Aug 2024 19:15:40 +0000",
        "content:encodedSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2024.07.12 release, 2024-07-10 tool release, as well as changes to vcpkg documentation throughout July. This month’s release includes some minor changes to output, bug fixes, and documentation improvements.\nSome stats for this period:\nThere are now 2,457 total ports available in the vcpkg public registry. A port is a versioned recipe for building a package from source, such as a C or C++ library.\n17 new ports were added to the open-source registry.\n315 updates were made to existing ports. As always, we validate each change to a port by building all other ports that depend on or are depended by the library that is being updated for our 13 main triplets.\n28 contributors submitted PRs, issues, or participated in discussions in the main repo.\nThe main vcpkg repo has over 6,200 forks and 22,400 stars on GitHub.\n \nvcpkg changelog (2024.07.12 release)\nThe following notable changes were made in this release:\nAdded VxWorks as a platform expression (PR: Microsoft/vcpkg-tool#1427, thanks @Neumann-A!).\nvcpkg now uses curl to download on Windows when proxy authentication is required (PR: Microsoft/vcpkg-tool#1434, thanks @sylvlecl!).\nvcpkg now raises errors for certain invalid overlay port manifests: malformed JSON, missing “name” field, and missing “version:” field (PR: Microsoft/vcpkg-tool#1435, thanks @dg0yt!).\nMade error message clearer when attempting to download sources from an invalid URL when installing a port (PR: Microsoft/vcpkg-tool#1411, thanks @autoantwort!).\nImproved asset caching output to make it clear if it is enabled and what specific actions vcpkg is taking (PR: Microsoft/vcpkg-tool#1409).\nBug fixes:\n\nFixed x-update-baseline incorrectly updating the baseline field when the registry is configured with a reference. The correct behavior is to use the latest commit of the reference branch when set (PR: Microsoft/vcpkg-tool#1414).\nFixed post-build check that forbids putting absolute paths in installed packages to also check .csh and .pl files for these paths (PR: Microsoft/vcpkg-tool#1426, thanks @dg0yt!).\nFixed incorrect vcpkg export help message when specifying an output directory (PR: Microsoft/vcpkg-tool#1450, thanks @myd7349!).\nFixed vcpkg.exe sometimes failing to determine the version of a downloaded nuget.exe (PR: Microsoft/vcpkg-tool#1451, thanks @kazssym!).\n \nDocumentation changes\nAdded docs for AUTHORIZATION_TOKEN in vcpkg_from_gitlab (PR: Microsoft/vcpkg-docs#328, thanks, @autoantwort!).\nDocumented STRIP_TRAILING_WHITESPACE for the vcpkg_execute_required_process function (PR: Microsoft/vcpkg-docs#348).\nDocumented VCPKG_USE_HOST_TOOLS CMake option in Host dependencies article (PR: Microsoft/vcpkg-docs#306).\nClarified level of support for different Unix/Linux distros in Supported hosts article (PRs: Microsoft/vcpkg-docs#339, Microsoft/vcpkg-docs#345, Microsoft/vcpkg-docs#341, thanks @SchaichAlonso!).\nOther typo and bug fixes (thanks @autoantwort, @Suisse00, and @kwsp!).\nIf you have any suggestions for our documentation, please submit an issue in our GitHub repo or see the box at the bottom of a particular article.\n\n \nTotal ports available for tested triplets\ntriplet\nports available\n\n\nx64-windows\n2,323\n\n\nx86-windows\n2,231\n\n\nx64-windows-static\n2,203\n\n\nx64-windows-static-md\n2,237\n\n\narm64-windows\n1,915\n\n\nx64-uwp\n1,285\n\n\narm64-uwp\n1,252\n\n\nx64-linux\n2,293\n\n\nx64-osx\n2,170\n\n\narm64-osx\n2,090\n\n\narm-neon-android\n1,593\n\n\nx64-android\n1,665\n\n\narm64-android\n1,641\n\n\n\nWhile vcpkg supports a much larger variety of target platforms and architectures (as community triplets), the list above is validated exhaustively to ensure updated ports don’t break other ports in the catalog.\n \nThank you to our contributors\nvcpkg couldn’t be where it is today without contributions from our open-source community. Thank you for your continued support! The following people contributed to the vcpkg, vcpkg-tool, or vcpkg-docs repos in this release:\ndg0yt (26 commits)\nc8ef (21 commits)\nautoantwort (19 commits)\nNeumann-A (7 commits)\nmiyanyan (6 commits)\nnlogozzo (5 commits)\nm-kuhn (4 commits)\ntalregev (4 commits)\nxiaozhuai (4 commits)\nwaywardmonkeys (3 commits)\nRT2Code (2 commits)\nmyd7349 (3 commits)\nMehdiChinoune (1 commit)\nomarhogni (1 commit)\nmoritz-h (1 commit)\nalagoutte (1 commit)\nTradias (1 commit)\npast-due (1 commit)\nAenBleidd (1 commit)\ncoryan (1 commit)\nSchaichAlonso (1 commit)\nSuisse00 (1 commit)\nkwsp (1 commit)\n \nLearn more\nYou can find the full 2024.07.12 release notes on GitHub for the main repo. Recent updates to the vcpkg tool can be viewed on the vcpkg-tool Releases page. To contribute to vcpkg documentation, visit the vcpkg-docs repo. If you’re new to vcpkg or curious about how a package manager can make your life easier as a C/C++ developer, check out the vcpkg website – vcpkg.io.\nIf you would like to contribute to vcpkg and its library catalog, or want to give us feedback on anything, check out our GitHub repo. Please report bugs or request updates to ports in our issue tracker or join more general discussion in our discussion forum.\nThe post What’s New in vcpkg (July 2024) appeared first on C++ Team Blog.",
        "dc:creator": "Augustin Popa",
        "comments": "https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-july-2024/#respond",
        "content": "<p>This blog post summarizes changes to the vcpkg package manager as part of the 2024.07.12 release, 2024-07-10 tool release, as well as changes to vcpkg documentation throughout July. This month’s release includes some minor changes to output, bug fixes, and documentation improvements.</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/cppblog/whats-new-in-vcpkg-july-2024/\">What’s New in vcpkg (July 2024)</a> appeared first on <a href=\"https://devblogs.microsoft.com/cppblog\">C++ Team Blog</a>.</p>\n",
        "contentSnippet": "This blog post summarizes changes to the vcpkg package manager as part of the 2024.07.12 release, 2024-07-10 tool release, as well as changes to vcpkg documentation throughout July. This month’s release includes some minor changes to output, bug fixes, and documentation improvements.\nThe post What’s New in vcpkg (July 2024) appeared first on C++ Team Blog.",
        "guid": "https://devblogs.microsoft.com/cppblog/?p=34467",
        "categories": [
          "C++",
          "Vcpkg",
          "vcpkg"
        ],
        "isoDate": "2024-08-01T19:15:40.000Z"
      }
    ]
  },
  {
    "name": "Facebook Engineering",
    "category": "기업",
    "posts": [
      {
        "creator": "",
        "title": "RoCE networks for distributed AI training at scale",
        "link": "https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/",
        "pubDate": "Mon, 05 Aug 2024 16:00:26 +0000",
        "content:encodedSnippet": "AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B.\nThis week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta over the past few years to support our large-scale distributed AI training workload. \nOur paper, “RDMA over Ethernet for Distributed AI Training at Meta Scale,” provides the details on how we design, implement, and operate one of the world’s largest AI networks at scale.\nThe growing prevalence of AI has introduced a new era of communication demands. Distributed training, in particular, imposes the most significant strain on data center networking infrastructure. For instance, a typical generative AI (GenAI) job may necessitate tight coordination of tens of thousands of GPUs over the course of several weeks. Constructing a reliable, high-performance network infrastructure capable of accommodating this burgeoning demand necessitates a reevaluation of data center network design.\nWhen Meta introduced distributed GPU-based training, we decided to construct specialized data center networks tailored for these GPU clusters. We opted for RDMA Over Converged Ethernet version 2 (RoCEv2) as the inter-node communication transport for the majority of our AI capacity. \nWe have successfully expanded our RoCE networks, evolving from prototypes to the deployment of numerous clusters, each accommodating thousands of GPUs. These RoCE clusters support an extensive range of production distributed GPU training jobs, including ranking, content recommendation, content understanding, natural language processing, and GenAI model training, among other workloads.\nTopology\nWe built a dedicated backend network specifically for distributed training. This allowed us to evolve, operate, and scale independently from the rest of the data center network. To support large language models (LLMs), we expanded the backend network towards the DC-scale, e.g., incorporating topology-awareness into the training job scheduler.\nThe separation\nThe training cluster relies on two independent networks: the frontend (FE) network for tasks such as data ingestion, checkpointing, and logging, and the backend (BE) network for training, as depicted below.\nA training rack is connected to both the FE and BE of the data center network. The FE has a hierarchy of network layers – rack switches (RSWs), fabric switches (FSWs), and higher – that houses the storage warehouse, which provides GPUs with the necessary input data for training workloads. We ensure that there is enough ingress bandwidth on the rack switch to not hinder the training workload.\nThe BE is a specialized fabric that connects all RDMA NICs in a non-blocking architecture, providing high bandwidth, low latency, and lossless transport between any two GPUs in the cluster, regardless of their physical location. This backend fabric utilizes the RoCEv2 protocol, which encapsulates the RDMA service in UDP packets for transport over the network.\nAI Zone\nOur BE networks have undergone several transformations. Initially, our GPU clusters used a simple star topology with a few AI racks connected to a central Ethernet switch running the non-routable RoCEv1 protocol. This setup had clear limitations in GPU scale and switch redundancy. Therefore, we swiftly transitioned to a fabric-based architecture for extended scalability and higher availability. \nWe designed a two-stage Clos topology for AI racks, known as an AI Zone. The rack training switch (RTSW), serving as the leaf switch, offers scale-up connectivity for GPUs within the rack using copper-based DAC cables. The spine tier, composed of modular cluster training switches (CTSW), provides scale-out connectivity among all racks in the cluster. The CTSW has deep buffers statically divided over the ports in the chassis. The RTSWs connect to CTSWs via single-mode fiber and 400G pluggable transceivers.\n\nThe AI Zones are designed to support a large number of interconnected GPUs in a non-blocking manner. However, emerging AI advancements, such as LLMs like Llama, demand a GPU scale larger than what a single AI zone provides. To accommodate this, we designed an aggregator training switch (ATSW) layer that connects the CTSWs in a data center building, expanding the RoCE domain beyond a single AI Zone. \nNote, the cross-AI Zone connectivity is oversubscribed by design, with network traffic balanced using ECMP. To mitigate the performance bottleneck for cross-AI Zone traffic, we enhanced the training job scheduler to find a “minimum cut” when dividing the training nodes into different AI Zones, reducing the cross-AI Zone traffic and thus collective completion time. The scheduler does this by learning the position of GPU servers in the logical topology to recommend a rank assignment. \nRouting\nThe scaling of compute power and network topology discussed above led to the question of how to efficiently balance and route the massive training traffic. Specifically, the AI training workloads had several challenging characteristics: \nLow entropy: Compared to traditional data center workloads, the number and the diversity of flows for AI workloads are much smaller and the flow patterns are usually repetitive and predictable. \nBurstiness: On the time dimension, the flows usually exhibit the “on and of”’ nature in the time granularity of milliseconds. \nElephant flows: For each burst, the intensity of each flow could reach up to the line rate of NICs. \nECMP and path pinning\nWe initially considered the widely adopted ECMP, which places flows randomly based on the hashes on the five-tuple: source and destination IPs, source and destination UDP ports, and protocol. However, and as expected, ECMP rendered poor performance for the training workload due to the low flow entropy. \nAlternatively, we designed and deployed a path-pinning scheme in the initial years of our deployment. This scheme routed packets to specific paths based on the destination “slice” (the index of the RTSW downlink). This worked well if each rack was fully assigned to the same job and there was no failure in the network. However, this was seldom true. We saw that the rack can be partially allocated to a job, with only one of the two hosts in the rack using the uplink bandwidth. This fragmented job placement caused uneven traffic distribution and congestion on the uplinks of the particular RTSW and degraded the training performance up to more than 30%. Further, network failures on a uplink or a CTSW caused the affected flows to be unevenly reassigned to other CTSWs by ECMP. Those reassigned flows collided with other existing flows and slowed down the whole training job.\nWe mitigated the immediate impact of these flow collisions by upgrading the bandwidth of the RTSW uplinks bandwidth by 2x. Hence we allowed for the RTSW uplink capacity to be 1:2 under-subscribed compared to the RTSW downlink capacity. While this mitigated the immediate performance impact, this was an expensive solution as it required 2x network capacity. Thus, we recognized this as a short-term mitigation and proceeded to further stages of routing evolution. \nQueue pair scaling\nWe next revisited ECMP with an intent to increase the number of flows for hierarchical collectives through the queue pair (QP) scaling software feature in the collective library. \nTo account for this, we configured switches to perform Enhanced ECMP (E-ECMP) to additionally hash on the destination QP field of a RoCE packet using the UDF capability of the switch ASIC. This increased entropy and, compared to baseline ECMP without QP scaling, we observed that E-ECMP along with QP scaling showed performance improvement of up to 40% for the AllReduce collective.\n\nWe evaluated two QP scaling strategies. The first involved splitting each message meant to be posted over a single QP, instead onto multiple QPs resulting in multiple flows. But it also produced smaller message sizes on fabric as well as multiple ACKs. The second approach involved posting each message to a different queue, in a round-robin fashion. For the NIC message sizes demonstrated in our production with NCCL, we observed the latter to be performing well. This feature has been important for ECMP scalability by increasing the network flows for hierarchical collectives like AllReduce.\nWhile we improved ECMP performance with QP scaling, the underlying probabilistic nature of hashing was a persistent downside of this routing scheme. Also, the need to customize the QP scaling factor and methodology based on the workload type, while workable in the short-term, presented long-term operational complexity.\nCongestion control\nAs we transitioned to 400G deployments, we attempted to tune DCQCN to adapt to new network speeds and topology. However, with default DCQCN settings and doubled ECN thresholds compared to 200G networks, performance was degraded. Further investigation revealed that DCQCN implementation in firmware has changed, introducing bugs and reduced visibility with problems relating to correct CNP counting. \nWe proceeded without DCQCN for our 400G deployments. At this time, we have had over a year of experience with just PFC for flow control, without any other transport-level congestion control. We have observed stable performance and lack of persistent congestion for training collectives. \nReceiver-driven traffic admission\nTo mitigate the congestion for 400G and beyond, we co-designed the collective library and RoCE transport to enforce receiver-driven traffic admission for better performance. The diagram below shows that the GPU-to-GPU communication architecture in our production training clusters predominantly uses two-stage copy and receiver-initiated communication via the NCCL collective library. Each GPU’s high bandwidth memory (HBM) maintains multiple channels for parallel transmission of chunked collective messages. The sender GPU threads first copy data from the compute buffer to an available channel buffer. The sender CPU proxy thread can only post an RDMA write request after receiving a clear-to-send (CTS) packet from the receiver, which includes the size and memory information. The receiver’s GPU threads then copy the channel buffer contents to the destination compute buffer. Finally, CPU proxy threads on both sides recycle the channel buffer, and the receiver CPU proxy sends another CTS packet once the channel buffer is ready.\n\nWe effectively leverage this mechanism as a receiver-driven traffic admission to limit the amount of in-flight traffic on the network, especially when congestion starts to build up. However, configuring the right setting can be challenging as: \nThe number of channels is limited due to the resource contention on GPU threads with concurrent compute operations; \nSetting the channel buffer size requires a more careful balance between congestion spreading and bandwidth under-utilization than Infiniband due to RoCE’s more coarse-grained flow control and possible end-host slowness. \nThus, we took two steps to improve the performance. First, we experimentally determined the right parameter settings for the number of channels and channel buffer size across various training job sizes and collective types. Second, we implemented high priority queuing at switches for CTS packets to expedite the notifications and mitigate potential bandwidth starvation.\nCongestion control has been a focal point of research in RDMA networks. DCQCN has been the gold standard for storage-focused networks. However, our experience with distributed AI training workloads provides a different perspective on tailoring the congestion control algorithms. Despite turning off DCQCN and multiple instances of RTSW sending PFC to a deep-buffer CTSW, we have not encountered a scenario over the last four years where production AI training traffic causes the CTSW to send PFCs to RTSWs persistently. \nOur current solution depends on careful coordination between the collective communication library and the network. It may depend on the relative throughput between GPU and network, which may not be applicable to all scenarios. We encourage the research community to put more focus on this topic.\nMoving forward\nThe design and operation of large-scale RoCE networks for distributed AI training workloads have evolved to meet the increasing demands of computational density and scale. By segregating FE and BE networks, employing various routing schemes, and optimizing collective traffic patterns, we have been able to build a performant and reliable network infrastructure. These designs and insights underline the importance of deeply understanding the training workload and translating these implications into network component design, ultimately contributing to the advancement of distributed AI training infrastructure.\nWith the fast growing trend of GenAI workload, our network infrastructure will evolve rapidly. \nRead the paper\nRDMA over Ethernet for Distributed AI Training at Meta Scale\nAcknowledgements\nWe would like to thank all contributors to the paper, including Rui Miao, Shengbao Zheng, Sai Jayesh Bondu, Guilherme Goes, Hany Morsy, Rohit Puri, Adi Mohammad Riftadi, Ashmitha Jeevaraj Shetty, Jingyi Yang, Shuqiang Zhang, Mikel Jimenez Fernandez, Shashi Gandham, Omar Baldonado. Many current and former people in the Network Infrastructure team at Meta have contributed to productionizing RoCE networks for AI training over the years. In particular, we would like to acknowledge Srinivas Sridharan, Petr Lapukhov, Jose Leitao, and Brandon Taylor. This work is a close collaboration with our partners in Meta’s AI Production Engineering, AI and Systems Co-design, and AI Hardware Systems teams.\nThe post RoCE networks for distributed AI training at scale appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B. This week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/roce-network-distributed-ai-training-at-scale/\">RoCE networks for distributed AI training at scale</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "AI networks play an important role in interconnecting tens of thousands of GPUs together, forming the foundational infrastructure for training, enabling large models with hundreds of billions of parameters such as LLAMA 3.1 405B. This week at ACM SIGCOMM 2024 in Sydney, Australia, we are sharing details on the network we have built at Meta [...]\nRead More...\nThe post RoCE networks for distributed AI training at scale appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21522",
        "categories": [
          "AI Research",
          "Data Center Engineering",
          "ML Applications",
          "Networking & Traffic"
        ],
        "isoDate": "2024-08-05T16:00:26.000Z"
      },
      {
        "creator": "",
        "title": "DCPerf: An open source benchmark suite for hyperscale compute applications",
        "link": "https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/",
        "pubDate": "Mon, 05 Aug 2024 15:55:14 +0000",
        "content:encodedSnippet": "We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments.\nWe hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products.\nDCPerf is available now on GitHub.\nHyperscale and cloud datacenter deployments constitute the largest market share of server deployments in the world today. Workloads developed by large-scale internet companies running in their datacenters have very different characteristics than those in high performance computing (HPC) or traditional enterprise market segments. Therefore, server design considerations, trade-offs and objectives for datacenter use cases are also significantly different from other market segments and require a different set of benchmarks and evaluation methodology. Existing benchmarks fall short of capturing these characteristics and hence do not provide a reliable avenue to design and optimize modern server and datacenter designs.\nIntroducing DCPerf\nMeta developed DCPerf, a collection of benchmarks to represent the diverse categories of workloads that run in cloud deployments. Each benchmark within DCPerf is designed by referencing a large application within Meta’s production server fleet. \nWe used several new techniques to ensure benchmark representativeness, ranging from low-level hardware microarchitecture features to application and library usage profiles, to analyze production workloads and capture the important characteristics of these workloads in DCPerf. Designing and optimizing hardware and software on future server platforms using these benchmarks willmore closely translate into improved efficiency of hyperscaler  production deployments. \nDCPerf’s design process.\nOver the past few years, we have continuously enhanced these benchmarks to make them compatible with different instruction set architectures, including x86 and ARM. We also validated that the benchmarks can be used to evaluate emerging industry trends, (e.g., chiplet-based architectures), and added support for multi-tenancy so that benchmarks can scale and make use of rapidly increasing core counts on modern server platforms. \n\nUsing DCPerf to improve Meta’s compute server designs\nWe have been using DCPerf internally, in addition to the SPEC CPU benchmark suite, for product evaluation at Meta to make the right configuration choices for our data center deployments. DCPerf also helps us make early performance projections that are used for capacity planning, identify performance bugs in hardware and system software, and jointly optimize the platform with our hardware industry collaborators. \nDCPerf provides a much richer set of application software diversity and helps get better coverage signals on platform performance versus existing benchmarks such as SPEC CPU. Due to these benefits, we have also started using DCPerf to assist with our decision making process on which platforms to deploy in our data centers. \nDCPerf captures the core and SOC microarchitecture characteristics of data center applications. Graph compares  Instruction-Per-Cycle of production applications, DCPerf and SPEC CPU. Red circles highlight that DCPerf more accurately represents IPC of production applications.\nDCPerf more closely captures the power and frequency characteristics of data center applications. This graph compares the average core frequency of production applications, DCPerf and SPEC CPU. Red circles highlight that DCPerf more accurately represents the frequency characteristics of production applications.\nImproving state-of-the-art computing platforms with our hardware industry collaborators using DCPerf\nOver the last two years we have collaborated with leading CPU vendors to further validate DCPerf on pre silicon and/or early silicon setups to debug performance issues and identify hardware and system software optimizations on their roadmap products. There have been multiple instances where we have been able to identify  performance optimizations in areas such as CPU core microarchitecture settings and SOC power management optimizations. \nThe graphic below shows areas of HW/SW design where we have seen DCPerf being representative of production usage and being beneficial for delivering relevant performance signals and help with optimizations as well as areas of future work.\n\nWe are thankful for our collaborators’ support and contributions using DCPerf to drive innovation in such an important and complex area and expect to continue improving the benchmarks with new version releases over time to adapt to emerging technologies. \nEnabling innovations through open collaboration\nToday, we are open-sourcing DCPerf with the goal to create a collaborative and open source reference benchmark that can be used to design, develop, debug, optimize, and improve state-of-the-art in compute platform designs for hyperscale. \nAs an open source benchmark suite, DCPerf has the potential to become an industry standard method to capture important workload characteristics of compute workloads that run in hyperscale datacenter deployments. \nGet DCPerf on GitHub\nDCPerf is available now on GitHub\nThe post DCPerf: An open source benchmark suite for hyperscale compute applications appeared first on Engineering at Meta.",
        "dc:creator": "",
        "content": "<p>We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments. We hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products. DCPerf is available now on GitHub. Hyperscale and cloud datacenter [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2024/08/05/data-center-engineering/dcperf-open-source-benchmark-suite-for-hyperscale-compute-applications/\">DCPerf: An open source benchmark suite for hyperscale compute applications</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n",
        "contentSnippet": "We are open-sourcing DCPerf, a collection of benchmarks that represents the diverse categories of workloads that run in data center cloud deployments. We hope that DCperf can be used more broadly by academia, the hardware industry, and internet companies to design and evaluate future products. DCPerf is available now on GitHub. Hyperscale and cloud datacenter [...]\nRead More...\nThe post DCPerf: An open source benchmark suite for hyperscale compute applications appeared first on Engineering at Meta.",
        "guid": "https://engineering.fb.com/?p=21502",
        "categories": [
          "Data Center Engineering",
          "Open Source"
        ],
        "isoDate": "2024-08-05T15:55:14.000Z"
      }
    ]
  },
  {
    "name": "eBay Tech Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Twitter Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Netflix TechBlog",
    "category": "기업",
    "posts": [
      {
        "creator": "Netflix Technology Blog",
        "title": "Investigation of a Cross-regional Network Performance Issue",
        "link": "https://netflixtechblog.com/investigation-of-a-cross-regional-network-performance-issue-422d6218fdf1?source=rss----2615bd06b42e---4",
        "pubDate": "Mon, 05 Aug 2024 22:18:00 GMT",
        "content:encodedSnippet": "Hechao Li, Roger Cruz\nCloud Networking Topology\nNetflix operates a highly efficient cloud computing infrastructure that supports a wide array of applications essential for our SVOD (Subscription Video on Demand), live streaming and gaming services. Utilizing Amazon AWS, our infrastructure is hosted across multiple geographic regions worldwide. This global distribution allows our applications to deliver content more effectively by serving traffic closer to our customers. Like any distributed system, our applications occasionally require data synchronization between regions to maintain seamless service delivery.\nThe following diagram shows a simplified cloud network topology for cross-region traffic.\n\nThe Problem At First Glance\nOur Cloud Network Engineering on-call team received a request to address a network issue affecting an application with cross-region traffic. Initially, it appeared that the application was experiencing timeouts, likely due to suboptimal network performance. As we all know, the longer the network path, the more devices the packets traverse, increasing the likelihood of issues. For this incident, the client application is located in an internal subnet in the US region while the server application is located in an external subnet in a European region. Therefore, it is natural to blame the network since packets need to travel long distances through the internet.\nAs network engineers, our initial reaction when the network is blamed is typically, “No, it can’t be the network,” and our task is to prove it. Given that there were no recent changes to the network infrastructure and no reported AWS issues impacting other applications, the on-call engineer suspected a noisy neighbor issue and sought assistance from the Host Network Engineering team.\nBlame the Neighbors\nIn this context, a noisy neighbor issue occurs when a container shares a host with other network-intensive containers. These noisy neighbors consume excessive network resources, causing other containers on the same host to suffer from degraded network performance. Despite each container having bandwidth limitations, oversubscription can still lead to such issues.\nUpon investigating other containers on the same host — most of which were part of the same application — we quickly eliminated the possibility of noisy neighbors. The network throughput for both the problematic container and all others was significantly below the set bandwidth limits. We attempted to resolve the issue by removing these bandwidth limits, allowing the application to utilize as much bandwidth as necessary. However, the problem persisted.\nBlame the Network\nWe observed some TCP packets in the network marked with the RST flag, a flag indicating that a connection should be immediately terminated. Although the frequency of these packets was not alarmingly high, the presence of any RST packets still raised suspicion on the network. To determine whether this was indeed a network-induced issue, we conducted a tcpdump on the client. In the packet capture file, we spotted one TCP stream that was closed after exactly 30 seconds.\nSYN at 18:47:06\n\nAfter the 3-way handshake (SYN,SYN-ACK,ACK), the traffic started flowing normally. Nothing strange until FIN at 18:47:36 (30 seconds later)\n\nThe packet capture results clearly indicated that it was the client application that initiated the connection termination by sending a FIN packet. Following this, the server continued to send data; however, since the client had already decided to close the connection, it responded with RST packets to all subsequent data from the server.\nTo ensure that the client wasn’t closing the connection due to packet loss, we also conducted a packet capture on the server side to verify that all packets sent by the server were received. This task was complicated by the fact that the packets passed through a NAT gateway (NGW), which meant that on the server side, the client’s IP and port appeared as those of the NGW, differing from those seen on the client side. Consequently, to accurately match TCP streams, we needed to identify the TCP stream on the client side, locate the raw TCP sequence number, and then use this number as a filter on the server side to find the corresponding TCP stream.\nWith packet capture results from both the client and server sides, we confirmed that all packets sent by the server were correctly received before the client sent a FIN.\nNow, from the network point of view, the story is clear. The client initiated the connection requesting data from the server. The server kept sending data to the client with no problem. However, at a certain point, despite the server still having data to send, the client chose to terminate the reception of data. This led us to suspect that the issue might be related to the client application itself.\nBlame the Application\nIn order to fully understand the problem, we now need to understand how the application works. As shown in the diagram below, the application runs in the us-east-1 region. It reads data from cross-region servers and writes the data to consumers within the same region. The client runs as containers, whereas the servers are EC2 instances.\nNotably, the cross-region read was problematic while the write path was smooth. Most importantly, there is a 30-second application-level timeout for reading the data. The application (client) errors out if it fails to read an initial batch of data from the servers within 30 seconds. When we increased this timeout to 60 seconds, everything worked as expected. This explains why the client initiated a FIN — because it lost patience waiting for the server to transfer data.\n\nCould it be that the server was updated to send data more slowly? Could it be that the client application was updated to receive data more slowly? Could it be that the data volume became too large to be completely sent out within 30 seconds? Sadly, we received negative answers for all 3 questions from the application owner. The server had been operating without changes for over a year, there were no significant updates in the latest rollout of the client, and the data volume had remained consistent.\nBlame the Kernel\nIf both the network and the application weren’t changed recently, then what changed? In fact, we discovered that the issue coincided with a recent Linux kernel upgrade from version 6.5.13 to 6.6.10. To test this hypothesis, we rolled back the kernel upgrade and it did restore normal operation to the application.\nHonestly speaking, at that time I didn’t believe it was a kernel bug because I assumed the TCP implementation in the kernel should be solid and stable (Spoiler alert: How wrong was I!). But we were also out of ideas from other angles.\nThere were about 14k commits between the good and bad kernel versions. Engineers on the team methodically and diligently bisected between the two versions. When the bisecting was narrowed to a couple of commits, a change with “tcp” in its commit message caught our attention. The final bisecting confirmed that this commit was our culprit.\nInterestingly, while reviewing the email history related to this commit, we found that another user had reported a Python test failure following the same kernel upgrade. Although their solution was not directly applicable to our situation, it suggested that a simpler test might also reproduce our problem. Using strace, we observed that the application configured the following socket options when communicating with the server:\n[pid 1699] setsockopt(917, SOL_IPV6, IPV6_V6ONLY, [0], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_SNDBUF, [131072], 4) = 0\n[pid 1699] setsockopt(917, SOL_SOCKET, SO_RCVBUF, [65536], 4) = 0\n[pid 1699] setsockopt(917, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nWe then developed a minimal client-server C application that transfers a file from the server to the client, with the client configuring the same set of socket options. During testing, we used a 10M file, which represents the volume of data typically transferred within 30 seconds before the client issues a FIN. On the old kernel, this cross-region transfer completed in 22 seconds, whereas on the new kernel, it took 39 seconds to finish.\nThe Root Cause\nWith the help of the minimal reproduction setup, we were ultimately able to pinpoint the root cause of the problem. In order to understand the root cause, it’s essential to have a grasp of the TCP receive window.\nTCP Receive Window\nSimply put, the TCP receive window is how the receiver tells the sender “This is how many bytes you can send me without me ACKing any of them”. Assuming the sender is the server and the receiver is the client, then we have:\n\nThe Window Size\nNow that we know the TCP receive window size could affect the throughput, the question is, how is the window size calculated? As an application writer, you can’t decide the window size, however, you can decide how much memory you want to use for buffering received data. This is configured using SO_RCVBUF socket option we saw in the strace result above. However, note that the value of this option means how much application data can be queued in the receive buffer. In man 7 socket, there is\nSO_RCVBUF\nSets or gets the maximum socket receive buffer in bytes.\n The kernel doubles this value (to allow space for\n bookkeeping overhead) when it is set using setsockopt(2),\n and this doubled value is returned by getsockopt(2). The\n default value is set by the\n /proc/sys/net/core/rmem_default file, and the maximum\n allowed value is set by the /proc/sys/net/core/rmem_max\n file. The minimum (doubled) value for this option is 256.\nThis means, when the user gives a value X, then the kernel stores 2X in the variable sk->sk_rcvbuf. In other words, the kernel assumes that the bookkeeping overhead is as much as the actual data (i.e. 50% of the sk_rcvbuf).\nsysctl_tcp_adv_win_scale\nHowever, the assumption above may not be true because the actual overhead really depends on a lot of factors such as Maximum Transmission Unit (MTU). Therefore, the kernel provided this sysctl_tcp_adv_win_scale which you can use to tell the kernel what the actual overhead is. (I believe 99% of people also don’t know how to set this parameter correctly and I’m definitely one of them. You’re the kernel, if you don’t know the overhead, how can you expect me to know?).\nAccording to the sysctl doc,\ntcp_adv_win_scale — INTEGER\nObsolete since linux-6.6 Count buffering overhead as bytes/2^tcp_adv_win_scale (if tcp_adv_win_scale > 0) or bytes-bytes/2^(-tcp_adv_win_scale), if it is <= 0.\nPossible values are [-31, 31], inclusive.\nDefault: 1\nFor 99% of people, we’re just using the default value 1, which in turn means the overhead is calculated by rcvbuf/2^tcp_adv_win_scale = 1/2 * rcvbuf. This matches the assumption when setting the SO_RCVBUF value.\nLet’s recap. Assume you set SO_RCVBUF to 65536, which is the value set by the application as shown in the setsockopt syscall. Then we have:\n\nSO_RCVBUF = 65536\nrcvbuf = 2 * 65536 = 131072\noverhead = rcvbuf / 2 = 131072 / 2 = 65536\nreceive window size = rcvbuf — overhead = 131072–65536 = 65536\n\n(Note, this calculation is simplified. The real calculation is more complex.)\nIn short, the receive window size before the kernel upgrade was 65536. With this window size, the application was able to transfer 10M data within 30 seconds.\nThe Change\nThis commit obsoleted sysctl_tcp_adv_win_scale and introduced a scaling_ratio that can more accurately calculate the overhead or window size, which is the right thing to do. With the change, the window size is now rcvbuf * scaling_ratio.\nSo how is scaling_ratio calculated? It is calculated using skb->len/skb->truesize where skb->len is the length of the tcp data length in an skb and truesize is the total size of the skb. This is surely a more accurate ratio based on real data rather than a hardcoded 50%. Now, here is the next question: during the TCP handshake before any data is transferred, how do we decide the initial scaling_ratio? The answer is, a magic and conservative ratio was chosen with the value being roughly 0.25.\nNow we have:\n\nSO_RCVBUF = 65536\nrcvbuf = 2 * 65536 = 131072\nreceive window size = rcvbuf * 0.25 = 131072 * 0.25 = 32768\n\nIn short, the receive window size halved after the kernel upgrade. Hence the throughput was cut in half, causing the data transfer time to double.\nNaturally, you may ask, I understand that the initial window size is small, but why doesn’t the window grow when we have a more accurate ratio of the payload later (i.e. skb->len/skb->truesize)? With some debugging, we eventually found out that the scaling_ratio does get updated to a more accurate skb->len/skb->truesize, which in our case is around 0.66. However, another variable, window_clamp, is not updated accordingly. window_clamp is the maximum receive window allowed to be advertised, which is also initialized to 0.25 * rcvbuf using the initial scaling_ratio. As a result, the receive window size is capped at this value and can’t grow bigger.\nThe Fix\nIn theory, the fix is to update window_clamp along with scaling_ratio. However, in order to have a simple fix that doesn’t introduce other unexpected behaviors, our final fix was to increase the initial scaling_ratio from 25% to 50%. This will make the receive window size backward compatible with the original default sysctl_tcp_adv_win_scale.\nMeanwhile, notice that the problem is not only caused by the changed kernel behavior but also by the fact that the application sets SO_RCVBUF and has a 30-second application-level timeout. In fact, the application is Kafka Connect and both settings are the default configurations (receive.buffer.bytes=64k and request.timeout.ms=30s). We also created a kafka ticket to change receive.buffer.bytes to -1 to allow Linux to auto tune the receive window.\nConclusion\nThis was a very interesting debugging exercise that covered many layers of Netflix’s stack and infrastructure. While it technically wasn’t the “network” to blame, this time it turned out the culprit was the software components that make up the network (i.e. the TCP implementation in the kernel).\nIf tackling such technical challenges excites you, consider joining our Cloud Infrastructure Engineering teams. Explore opportunities by visiting Netflix Jobs and searching for Cloud Engineering positions.\nAcknowledgments\nSpecial thanks to our stunning colleagues Alok Tiagi, Artem Tkachuk, Ethan Adams, Jorge Rodriguez, Nick Mahilani, Tycho Andersen and Vinay Rayini for investigating and mitigating this issue. We would also like to thank Linux kernel network expert Eric Dumazet for reviewing and applying the patch.\n\nInvestigation of a Cross-regional Network Performance Issue was originally published in Netflix TechBlog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Netflix Technology Blog",
        "guid": "https://medium.com/p/422d6218fdf1",
        "categories": [
          "tcp",
          "debugging",
          "kernel",
          "network",
          "linux"
        ],
        "isoDate": "2024-08-05T22:18:00.000Z"
      }
    ]
  },
  {
    "name": "JetBrains: Developer Tools for Professionals and Teams – Company Blog | JetBrains",
    "category": "기업",
    "posts": [
      {
        "creator": "Dmitrii Korovin",
        "title": "TeamCity 2024.07.1 Bug Fix Is Out",
        "link": "https://blog.jetbrains.com/teamcity/2024/08/teamcity-2024-07-1-bug-fix/",
        "pubDate": "Tue, 06 Aug 2024 14:55:30 +0000",
        "content:encodedSnippet": "The 2024.07.1 bug fix for TeamCity On-Premises is now available for download! \nThis bug fix update resolves over 30 issues, including failing Maven builds in containers, agent Windows services not locating the bundled JRE, new licensing mechanism problems, and more. In addition, version 2024.07.1 resolves multiple important security issues and performance problems, which is why we always recommend installing bug-fix releases as soon as possible.\nFor the complete list of the issues fixed in this version, please refer to our release notes.\nAs with other minor updates, TeamCity 2024.07.1 shares the same data format with all 2024.07.x releases, allowing you to easily upgrade or downgrade within these versions without the need to back up or restore.\nWe recommend upgrading to apply the latest improvements and security fixes to your TeamCity server.\nBefore you start, read our upgrade notes and use one of the following options to upgrade:\nUpgrade from your recent version with our automatic update.\nDownload the new version from the JetBrains website.\nPull the TeamCity Docker image.\nThank you for submitting issues and voting on them. Your feedback is invaluable in helping us improve TeamCity. \nIf you encounter any problems or have suggestions, please report them via our forum or issue tracker.\nHappy building!",
        "dc:creator": "Dmitrii Korovin",
        "content": "The 2024.07.1 bug fix for TeamCity On-Premises is now available for download!&#160; This bug fix update resolves over 30 issues, including failing Maven builds in containers, agent Windows services not locating the bundled JRE, new licensing mechanism problems, and more. In addition, version 2024.07.1 resolves multiple important security issues and performance problems, which is why [&#8230;]",
        "contentSnippet": "The 2024.07.1 bug fix for TeamCity On-Premises is now available for download!  This bug fix update resolves over 30 issues, including failing Maven builds in containers, agent Windows services not locating the bundled JRE, new licensing mechanism problems, and more. In addition, version 2024.07.1 resolves multiple important security issues and performance problems, which is why […]",
        "guid": "https://blog.jetbrains.com/?post_type=teamcity&p=499122",
        "categories": [
          "bug-fix",
          "news"
        ],
        "isoDate": "2024-08-06T14:55:30.000Z"
      },
      {
        "creator": "Regina Muradova",
        "title": "JetBrains Academy: New in August",
        "link": "https://blog.jetbrains.com/education/2024/08/06/jetbrains-academy-new-in-august/",
        "pubDate": "Tue, 06 Aug 2024 11:35:53 +0000",
        "content:encodedSnippet": "August is here already! We hope you haven’t forgotten to book a break so you can fully enjoy your last summer month. Unless you’re in the southern hemisphere, of course. But just because it isn’t summer where you are doesn’t mean you shouldn’t take a well-deserved break, too! One great way to get into vacation mode is to have a read through our new Football Analysis project. In it, you’ll explore data using some of the favorite tools of data analysts: Python and SQL.\nSo far in August, we’ve released two new courses, made some improvements to our Python Developer program, introduced a new Machine Learning track category, and added certificates for two more courses. \nMoreover, we’ve also created three new projects and more than 20 topics for you to try. We care a lot about making sure our content is not only useful but also fun – so you can truly enjoy it.\nNow, let’s dive into the updates in more detail.\nNew courses and projects\nMachine learning operations\n🆕 Course: MLOps Engineer (Beta)\nThis course is for anyone looking to apply DevOps principles, like continuous integration and delivery, to the machine learning workflow. It teaches you how to set up and manage machine learning models in real-world applications, ensuring they run smoothly and efficiently.\nReinforcement learning\n🆕 Course: Introduction to Reinforcement Learning (Beta)\nReinforcement learning is a subfield of machine learning that focuses on teaching agents how to make decisions based on rewards and penalties. Reinforcement learning is like training a puppy. Just as a puppy learns by receiving a reward when it behaves well and being scolded when it misbehaves, reinforcement learning algorithms learn in a similar fashion as they attempt to solve a problem.\nUpon the completion of this course, you’ll have built the following exclusive projects.\n🆕 Project: Learn to Play Atari (Beta). Easy\nImagine teaching a computer to play a game and improve on its own. This project explores reinforcement learning, where we program a virtual “agent” to learn and make better decisions over time. You’ll use Python and the Gymnasium library to create and train this agent. By the end, you’ll see how computers can learn from trial and error, just like humans, mastering tasks through practice. It’s a hands-on way to grasp the basics of artificial intelligence and machine learning.\n🆕 Project: Market Agents Using FinRL (Beta). Challenging\nThis project uses the FinRL library to analyze the stock market and optimize trading strategies with reinforcement learning. You’ll go through steps like data collection, cleaning, model training, backtesting, and fine-tuning. The goal is to create adaptable trading strategies based on historical stock data. By the end, you’ll understand how to apply reinforcement learning to financial markets, from data gathering to strategy optimization.\nAndroid\n🆕 Project: DroidChat (Android ChatGPT Client)\nThis project focuses on developing a chatbot for Android, exploring the use of AI in creating a virtual conversational companion. It involves designing algorithms, crafting a user-friendly interface, and enhancing the chatbot’s functionality and intelligence. The project showcases the challenges and innovations in mobile app development, highlighting the growing use of AI in various fields.\nUpdated course\nPython Developer\nThe Python Developer program is designed to mirror the real-world demands of Python professionals. We’ve integrated new content, including advanced topics and additional projects, to ensure you gain the proficiency needed to excel in today’s dynamic programming environment.\nNew learning topics\nMachine learning: Q-learning, Time series data preprocessing, Deep Q-learning, The Gymnasium Atari environment, Introduction to FinRL\nKotlin: Introduction to KMP\nJavaScript: Advanced testing with Jest, Advanced testing with Mocha\nFundamentals: Teamwork: Collaborate with team members, Teamwork: Contribute effectively to projects, Teamwork: Contribute effectively to projects, Build Tools: basics, Effective communication for frontend developers, Webpack, Web Scraping with BeautifulSoup and Utilizing Generative AI\nMobile: Animation APIs overview, Checkbox, Radio Button, and Switch, Top app bar and bottom navigation bar in Jetpack Compose, Lazy lists and grids in Jetpack Compose, Lazy lists in Jetpack Compose\nAmazon Web Services: Overview of AWS ML Services, Introduction to Serverless computing, Serverless computing with AWS Lambda, Connecting to an EC2 instance, Amazon S3 Concepts, Overview of AWS Application Integration Services\nNew certificates available\nWe added certificates for two courses: Introduction to NLP and Coding Machine Learning Algorithms. Earn your certificate upon completing these courses and showcase your expertise to potential employers.\n\n\n\n\nCourses and projects marked as Beta are still in testing. If you’re interested in checking out Beta projects on the platform, make sure the Beta-tester feature is enabled in your profile settings.\n\n\n\n\nIf you have any questions or if you would like to share your feedback, feel free to leave a comment below, contact us at academy@jetbrains.com, or share your thoughts with us on X or LinkedIn.\nHappy learning!\nYour JetBrains Academy team",
        "dc:creator": "Regina Muradova",
        "content": "August is here already! We hope you haven’t forgotten to book a break so you can fully enjoy your last summer month. Unless you’re in the southern hemisphere, of course. But just because it isn’t summer where you are doesn’t mean you shouldn’t take a well-deserved break, too! One great way to get into vacation [&#8230;]",
        "contentSnippet": "August is here already! We hope you haven’t forgotten to book a break so you can fully enjoy your last summer month. Unless you’re in the southern hemisphere, of course. But just because it isn’t summer where you are doesn’t mean you shouldn’t take a well-deserved break, too! One great way to get into vacation […]",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=499103",
        "categories": [
          "jetbrains-academy",
          "learning-courses",
          "project-based-learning",
          "machine-learning",
          "online-learning",
          "python"
        ],
        "isoDate": "2024-08-06T11:35:53.000Z"
      },
      {
        "creator": "Julia Shashkova",
        "title": "IntelliJ IDEA 2024.1.5 is Out",
        "link": "https://blog.jetbrains.com/idea/2024/08/intellij-idea-2024-1-5/",
        "pubDate": "Tue, 06 Aug 2024 05:41:31 +0000",
        "content:encodedSnippet": "We’ve just released IntelliJ IDEA 2024.1.5.\nYou can update to this version from inside the IDE, using the Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our website.\nHere are the most notable updates:\nFixed the issue where the terminal would open slowly when the ulimit -n value was set too high. [IJPL-103736]\nThe HTTP Client no longer sends an HTTP request with a Content-Type: text/plain header when a specific Content-Type has already been set by the user. [IJPL-65366]\nFixed the issue where viewing package details in the package.json sometimes resulted in an exception. [IJPL-150388]\nFixed issues with missing translations when Chinese, Korean, or Japanese localization is enabled. [IJPL-86423, IJPL-148265]\nFixed the “Registry key is not defined” error when running the Spring Boot application via Gateway WSL. [IJPL-156767]\nFixed the issue where the command line formatter hung when using the -dry flags on a project with Java files that were not fully formatted. [IJPL-150213]\n\n\n\n\nTo find out more details about the issues resolved, please refer to the release notes.\nIf you encounter any bugs, please report them to our issue tracker.\nHappy developing!",
        "dc:creator": "Julia Shashkova",
        "content": "We’ve just released IntelliJ IDEA 2024.1.5. You can update to this version from inside the IDE, using the Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our website. Here are the most notable updates: To find out more details about the issues resolved, please refer to [&#8230;]",
        "contentSnippet": "We’ve just released IntelliJ IDEA 2024.1.5. You can update to this version from inside the IDE, using the Toolbox App, or using snaps if you are a Ubuntu user. You can also download it from our website. Here are the most notable updates: To find out more details about the issues resolved, please refer to […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=498446",
        "categories": [
          "releases",
          "2024-1",
          "bug-fix-update",
          "intellij-idea-2024-1",
          "intellij-idea-2024-1-5"
        ],
        "isoDate": "2024-08-06T05:41:31.000Z"
      },
      {
        "creator": "Olga Bedrina",
        "title": "TeamCity Pipelines Pulse, Issue #5: Smooth Parameter Replacement",
        "link": "https://blog.jetbrains.com/teamcity/2024/08/teamcity-pipelines-pulse-issue5-smooth-parameter-replacement/",
        "pubDate": "Mon, 05 Aug 2024 19:37:14 +0000",
        "content:encodedSnippet": "💡 TeamCity Pipelines by JetBrains is a new approach to CI/CD that offers blazing-fast pipelines to optimize your development flow. We release a new version every three weeks, and here’s what’s new in the latest edition.\nImagine you could define parameters when configuring a pipeline and see their values right away, without all of the guesswork when you need to reference them later on. It would make the pipeline setup so much smoother!\nIn TeamCity Pipelines, we’ve made it possible to do just that. Meet the new parameter option with autocomplete (available in YAML, too).\n\n\n\n\nOnce you define a parameter, you can then reference it in places like the Script content field or the YAML editor when configuring your pipeline.\nWhen you hover over a parameter name in the script, you’ll conveniently see its value in the tooltip. No more context switching to find out what your parameter values are!\n\n\n\n\nOptimization tips: New and improved\nTeamCity Pipelines now allows you to speed up your CI process by parallelizing tests, though this functionality is currently only available for Maven and Gradle runners (more options are coming soon). \nWe’ve also added a clear indication in the UI of what runners are supported when parallelizing tests.\n\n\n\n\nBug fixes and improvements\nWe’ve been busy developing new features and ensuring our existing ones work smoothly. Below is a short list of what’s been fixed.\n\n\n\n\n\nParallel tests: Initially, it can be hard to tell if you’ve successfully enabled Parallel Tests. The feature only kicks in after the first pipeline run, as it needs the initial data to get going. So, if you enable the feature and run the pipeline but don’t see parallel results right away, don’t worry! It’s not broken – just warming up! We’ve now added a clear indication in the UI for that.\n\n\n\n\nPreviously, when you tried importing a YAML file when the TeamCity server was selected as the storage location, it would result in an error. We’ve now fixed that.\n\n\n\n\nWe’ve fixed the issue that made TeamCity Pipelines throw an error if you tried to create a secret with an already existing parameter name.\nParameter values used to be lost when switching to job settings, unless you explicitly clicked Done, but not anymore! Now, all of your data is right there where you left it.\n\n\n\n\nPreviously, TeamCity Pipelines would clean up job artifacts while still marking them as valid for reuse. We’ve fixed that.\n\n\n\n\nTeamCity Pipelines no longer unnecessarily asks you to reload the page, even after you’ve clicked the Save button.\n\n\n\n\nIf you haven’t run a build yet, its duration now correctly shows as 0 (as opposed to <1s previously).\n\n\n\n\n\nThe Will be triggered in function in the schedule trigger settings used to show incorrect information. This has now been fixed.\nDid you know?\nUnlike other CI solutions, we don’t just add more CPU resources so that your builds run faster. Instead, TeamCity Pipelines uses smart optimization features like test parallelization and job reuse to make sure your builds really run faster 😎\n\n\n\n\nThat’s it! If you haven’t tried TeamCity Pipelines yet, you can set up your account here. It’s free during Beta.\nLearn more about TeamCity Pipelines\nAs always, feel free to reach out to us by leaving a comment to this post. We appreciate every single piece of feedback. \nYours truly,\nTeamCity Pipelines team",
        "dc:creator": "Olga Bedrina",
        "content": "💡 TeamCity Pipelines by JetBrains is a new approach to CI/CD that offers blazing-fast pipelines to optimize your development flow. We release a new version every three weeks, and here&#8217;s what&#8217;s new in the latest edition. Imagine you could define parameters when configuring a pipeline and see their values right away, without all of the [&#8230;]",
        "contentSnippet": "💡 TeamCity Pipelines by JetBrains is a new approach to CI/CD that offers blazing-fast pipelines to optimize your development flow. We release a new version every three weeks, and here’s what’s new in the latest edition. Imagine you could define parameters when configuring a pipeline and see their values right away, without all of the […]",
        "guid": "https://blog.jetbrains.com/?post_type=teamcity&p=498899",
        "categories": [
          "news",
          "releases",
          "release",
          "teamcity-pipelines",
          "teamcity-pipelines-pulse"
        ],
        "isoDate": "2024-08-05T19:37:14.000Z"
      },
      {
        "creator": "Teodor Irkhin",
        "title": "Meet Renovated Kotlin Support – K2 Mode: What You Need to Know",
        "link": "https://blog.jetbrains.com/idea/2024/08/meet-the-renovated-kotlin-support-k2-mode/",
        "pubDate": "Mon, 05 Aug 2024 08:02:03 +0000",
        "content:encodedSnippet": "In this post, we’ve gathered the essential information about K2 mode in IntelliJ IDEA.\nWhat does K2 mode do?\nK2 mode is a new implementation of the Kotlin support within IntelliJ IDEA that improves the stability of the IDE while also setting the foundation for supporting future Kotlin language features.\nWhat is the difference between K2 mode and Kotlin K2 compiler?\nThe K2 compiler is responsible for compiling Kotlin code for Kotlin language version 2.0 or newer. If you want to compile a project with the K2 compiler, you’ll need to specify the Kotlin 2.0 language version in the project’s build settings (in build.gradle.kts or pom.xml files).\nK2 mode doesn’t depend on the Kotlin compiler version specified in the project’s build settings. K2 mode was designed to leverage the K2 compiler’s advanced capabilities for faster and more reliable Kotlin code analysis. K2 mode in IntelliJ IDEA only affects code highlighting, code completion, and other IDE features.\nWhich features does K2 mode currently support?\nStarting with IntelliJ IDEA 2024.2, K2 mode supports the vast majority of IDE features, including build.gradle.kts scripts, Kotlin Multiplatform (KMP) projects, most refactorings, code highlighting, completion, debugging, and more.\nSupport for Kotlin/Wasm, scratch files (scratches), and less commonly used refactorings will be added soon.\nHow to enable K2 mode?\nTo enable K2 mode, go to Preferences/Settings | Languages & Frameworks | Kotlin and tick the Enable K2 Kotlin Mode checkbox.\n\n\n\n\nWhich IntelliJ IDEA and Kotlin versions are compatible with K2 mode?\nK2 mode is compatible with Kotlin versions 1.9 and newer. It is integrated with IntelliJ IDEA starting from v2024.1.\n\n\n\n\nWill K2 mode break or affect my code?\nK2 mode in IntelliJ IDEA does not impact code compilation but solely influences code analysis in your IDE.\nWhy does IntelliJ IDEA return the “plugin is incompatible with K2 mode” error?\nSome third-party IntelliJ IDEA plugins may currently be unavailable because of recent changes to the Kotlin Plugin API. We’re actively working on assisting plugin authors to quickly make their plugins compatible with K2 mode.\nJoin us in shaping K2 mode!\nWe aim to enable K2 mode by default starting with IntelliJ IDEA 2024.3 by the end of the year, which is why we need your feedback now!\nHelp us fine-tune K2 mode so that we can launch it at its best. Please share your experience in our public Slack channel or via YouTrack.\nHappy developing!",
        "dc:creator": "Teodor Irkhin",
        "content": "In this post, we’ve gathered the essential information about K2 mode in IntelliJ IDEA. What does K2 mode do? K2 mode is a new implementation of the Kotlin support within IntelliJ IDEA that improves the stability of the IDE while also setting the foundation for supporting future Kotlin language features. What is the difference between [&#8230;]",
        "contentSnippet": "In this post, we’ve gathered the essential information about K2 mode in IntelliJ IDEA. What does K2 mode do? K2 mode is a new implementation of the Kotlin support within IntelliJ IDEA that improves the stability of the IDE while also setting the foundation for supporting future Kotlin language features. What is the difference between […]",
        "guid": "https://blog.jetbrains.com/?post_type=idea&p=498222",
        "categories": [
          "news",
          "kotlin"
        ],
        "isoDate": "2024-08-05T08:02:03.000Z"
      },
      {
        "creator": "Rachel Appel",
        "title": "dotInsights | August 2024",
        "link": "https://blog.jetbrains.com/dotnet/2024/08/01/dotinsights-august-2024/",
        "pubDate": "Thu, 01 Aug 2024 12:57:08 +0000",
        "content:encodedSnippet": "Did you know? In 1936, Russian engineer Vladimir Lukyanov built a mechanical computer known as a Water Integrator that carefully manipulated water in a room full of interconnected pipes and pumps. The water level in various chambers represented stored numbers, and the computer could solve complex mathematical equations. I’m sure the last thing Vladimir wanted was a memory leak, am I right? 🤣\nWikipedia: https://en.wikipedia.org/wiki/Water_integrator\n\n\n\n\nWelcome to dotInsights by JetBrains! This newsletter is the home of recent .NET and software development-related content.\n🌟 Featured Content\nThis month, we bring you featured content from Dan Clarke! Dan is an independent developer and consultant, specialising in .NET, Azure, and Kubernetes. He also hosts the Unhandled Exception Podcast; the .NET Oxford user-group; has a YouTube channel; newsletter; and a couple of Dometrain courses. Outside of work, Dan is a father of two, enjoys playing the guitar, and is an obsessive gym-goer.\nHey all! 👋 A massive thank you to JetBrains for inviting me on to be a guest author! As a huge fan of both ReSharper and Rider, this is a great honour!\nToday I want to talk about developer productivity. This is something I’ve always been interested in – perhaps because I don’t see myself as naturally being super-productive – so over time I’ve intentionally tried to learn tips and tricks to improve and get things done a bit faster.\nWhen reading about developer productivity, I come across the term “10x developer” quite a bit. I find this term interesting, but also quite detrimental. The main thing I dislike about it is the word “developer”. This suggests an individual that is an order of magnitude better than average. A so-called rockstar developer. Well, good for them. But let’s instead change the term to be more helpful to the average developer. Let’s call it “10x development” instead. In software development, there are massive multipliers to be had depending on how a task is approached. A developer who knows lots of productivity techniques and tools will be more productive. But I think the term “10x developer” focuses on the wrong thing. It focused on the individual, rather than the tasks themselves.\nHere are a few examples…\nYou need to fixup namespaces across your entire solution. Do you do it manually in each file? Or do you hit a keyboard shortcut so your IDE does it for you in seconds? How many “X” is that time-saving? 100-1000x maybe? Learning your IDE (Rider of course! 😉), and its various shortcuts – will mean you spend less time doing those things manually yourself.\nYou spend 2 months building a feature. Or you discover a library that does it for you. 2 months vs 1 hour? 300x?\nYou have a process that’s repeatable and needs to be done often. You manually do this process each day for the next few years. Or you automate it to get all that time back. 1000x?\nYou have a performance issue in your app. You manually try to work it out by putting logs and timers in code. Or you’ve previously learnt how to use a profiling tool which very quickly gives you a detailed analysis of what’s going on.\nAs developers, we have so much opportunity and power to automate tasks, leverage IDEs and tooling, and complete tasks WAY faster. I can’t think of another industry which allows the level of productivity hacking that we have.\nAnd lastly – of course, do make sure you’re being productive on the right things! You don’t want to be more productive at making your big ball of mud codebase even worse! Sometimes a great way to be more productive is to KISS (Keep It Super Simple) 🙂\nDeveloper productivity is a huge (and fascinating) topic, with many aspects to it. I wrote a blog post quite a few years ago that delves into more areas – eg. compound learning; note-taking; and focus. Speaking of focus – the Pomodoro technique is something I use heavily, which I’ve personally found has made a huge difference to my focus levels. I’ve recently recorded a short video about how I use this technique together with taking Pomodoro notes.\n🔗 Links\nHere’s the latest from the developer community.\nService Discovery in .NET – Microsoft Learn \nMoving from Controllers to Minimal API – Christian Brevik\nAuto-redirect in REST client tools – Damir Arh\nImage Analysis with Phi 3 Vision – Juanlu Elgurre\nAll the lists in .NET MAUI – David Ortinau\nHow to use the tasks view in JetBrains Rider – Khalid Abuhakmeh\nUnit Testing Best Practices in .NET C# – Ahmed Tarek\nBehind the Scenes of Collection Expressions Part 4: The Spread Element – Andrew Lock\nReadonly immutable and frozen collections in .NET and C# 13 Semi Auto-Properties– NDepend\nCreating Hashes in .NET – Damien Bowden\nAsync isn’t always async – Peter Toft Jølving\nIs .NET Aspire NuGet for Cloud Service Dependencies? – Phil Haack\nRefactoring a functional and reactive .NET MAUI app to a declarative UI using C# markup – Richard Woollcott\nTentative Roadmap for Wolverine 3.0 and Network Round Trips are Evil – Jeremy Miller\nDiscovering .NET codebases using code coverage and NCrunch – Tore Nestenius\nAutomate your .NET SDK updates for consistent and reproducible builds with global.json and Renovate – Anthony Simmon\nGetting to the (shadow)root of Vue 3 custom elements – Jaime Jones\nAvalonia and OpenGL Demo – Mårten Rånge\nShould Interfaces Be Asynchronous? – Mark Seemann\nBeef Lang (Where’s the Beef?!) – Beef Lang\nC# Wasm Recipes – SerratedSharp\nAppCenter is retiring! This is how to use Application Insights for your .NET MAUI apps! – Daniel Hindrikes\nUsing ASP.NET Core OData with MongoDB Atlas – Rachelle Palmer\nBreakpoint Show Episode 24 – Amazing Discovery in .NET 9 – Breakpoint Show\nNanoRabbit (NuGet Package) – RabbitMQ API wrapper for .NET – GC Chen\nSoloDB (NuGet Package) – Document database interface over SQLite – Radu\nMermaidDotNet (NuGet Package) – Generate Mermaid diagrams with a C# interface – Nicolas Maurice\nThe Happy State of Property-Based Testing in C# – Anthony Lloyd\nPolars vs. Pandas – Jodie Burchell\n🔦 From our .NET Guide\nEach month, we feature tutorials or tips from our .NET Guide. Here are some pieces of useful knowledge worth filing away in your brain for future development.\nHigh quality software requires high quality documentation. But let’s face it, writing docs just isn’t a fun part of software development for most folks. But now we have AI to create those docs for us. These XML docs generated by AI aren’t just to help devs understand the code, but these XML comments are also used by tools to help explain what the code is supposed to do.\nGenerate Documentation\n                                                    \nNows a great time to get into game development, and in this tutorial learn how to write your very first game with Godot Engine and JetBrains Rider. It’ll be amazing fun!\nHow to Build Pong with Godot and JetBrains Rider\n                                                    \nASP.NET Core developers predominantly spend their development time on the server, trying their best to steer clear of the scary world of client-side development. But here’s a secret, it doesn’t have to be a daunting prospect to build client-side experiences if you use HTMX.\nHTMX for ASP.NET Core Developers\n                                                    \n\n\n\n\n☕ Coffee Break\nTake a break to catch some fun social posts.\npic.twitter.com/mqWxflfw2M\n— Simon (@_smcf) July 4, 2024\n \n\n\n\n\nWhat do you think, folks? #dropTheDot pic.twitter.com/iX6Z711tBE\n— Maarten Balliauw @maartenballiauw@mastodon.online (@maartenballiauw) August 10, 2022\n \n\n\n\n🗞️ JetBrains News\nWhat’s going on at JetBrains? Check it out here:\nWayland Support Preview in 2024.2 – The year of Linux on the desktop\nQodana Self-hosted with 40% off – Code analysis and quality control tools\nIntroducing Grazie – The AI Writing Companion for People in Tech –  Improve your communication skills\nThe New UI Becomes the Default in 2024.2\n\n\n\n\n✉️ Comments? Questions? Send us an  email.\nSubscribe to the dotInsights Newsletter",
        "dc:creator": "Rachel Appel",
        "content": "Did you know? In 1936, Russian engineer Vladimir Lukyanov built a mechanical computer known as a Water Integrator that carefully manipulated water in a room full of interconnected pipes and pumps. The water level in various chambers represented stored numbers, and the computer could solve complex mathematical equations. I&#8217;m sure the last thing Vladimir wanted [&#8230;]",
        "contentSnippet": "Did you know? In 1936, Russian engineer Vladimir Lukyanov built a mechanical computer known as a Water Integrator that carefully manipulated water in a room full of interconnected pipes and pumps. The water level in various chambers represented stored numbers, and the computer could solve complex mathematical equations. I’m sure the last thing Vladimir wanted […]",
        "guid": "https://blog.jetbrains.com/?post_type=dotnet&p=495129",
        "categories": [
          "net-tools",
          "dotinsights"
        ],
        "isoDate": "2024-08-01T12:57:08.000Z"
      },
      {
        "creator": "Andrey Gushchin",
        "title": "CLion 2024.2 Release Candidate",
        "link": "https://blog.jetbrains.com/clion/2024/08/2024-2-release-candidate/",
        "pubDate": "Thu, 01 Aug 2024 12:31:56 +0000",
        "content:encodedSnippet": "The next major CLion release is around the corner, and the v2024.2 RC is already available!\nTo install CLion 2024.2 RC (build 242.20224.214), download it from our website, update via the Toolbox App, or use this snap package (for Ubuntu). You need an active subscription or a trial license to use the CLion 2024.2 RC.\n\n\n\n\nHere are the highlights:\nThe following bugs have been fixed: \n\nUI texts now appear in the proper translated version when you’re using a language other than English and the new language engine (CLion Nova) is enabled (CPP-39474).\nThe std::byte hex value is now displayed correctly in the debugger (CPP-22952).\nSticky lines now correctly work with a switch/case construction (CPP-38015).\nThe incorrect behavior of volume bindings in the Docker toolchain has been fixed (CPP-39116).\nOther updates: \n\nThe AI name suggestions list now appears when the Rename and Change signature refactorings are taking place with CLion Nova enabled (CPP-37181).\nCLion’s Features Trainer now contains lessons about Code Assistant (CPP-37769).\nThe full release notes are available here. Give this build a try, and help us improve CLion by reporting any problems you find to our issue tracker. The final release is just around the corner, so stay tuned!\nDOWNLOAD CLION 2024.2 RC\nYour CLion team\nJetBrains\nThe Drive to Develop",
        "dc:creator": "Andrey Gushchin",
        "content": "The next major CLion release is around the corner, and the v2024.2 RC is already available! To install CLion 2024.2 RC (build 242.20224.214), download it from our website, update via the Toolbox App, or use this snap package (for Ubuntu). You need an active subscription or a trial license to use the CLion 2024.2 RC. [&#8230;]",
        "contentSnippet": "The next major CLion release is around the corner, and the v2024.2 RC is already available! To install CLion 2024.2 RC (build 242.20224.214), download it from our website, update via the Toolbox App, or use this snap package (for Ubuntu). You need an active subscription or a trial license to use the CLion 2024.2 RC. […]",
        "guid": "https://blog.jetbrains.com/?post_type=clion&p=498027",
        "categories": [
          "eap",
          "news",
          "2024-2",
          "release-candidate"
        ],
        "isoDate": "2024-08-01T12:31:56.000Z"
      },
      {
        "creator": "Maria Sharobaeva",
        "title": "JetBrains Academy – July Digest",
        "link": "https://blog.jetbrains.com/education/2024/07/31/jetbrains-academy-july-digest/",
        "pubDate": "Wed, 31 Jul 2024 16:36:28 +0000",
        "content:encodedSnippet": "Summer’s almost gone! Don’t delay upgrading your tech skills. Our July digest has it all: a new Git starter kit, fresh courses, top projects you can work on, career tips, events, and free educational licenses. Dive in and level up!\nAdvance Your Tech Skills\nFree Git Starter Pack\nMaster Git for real projects! Dive into our video guide and interactive free Git course. Plus, get a promo code for one month of free learning on any Hyperskill course of your choice.\nLearn More\n                                                    \nIntroduction to IDE Code Refactoring in Java\nCheck out our new in-IDE course that makes refactoring fun and easy! You’ll learn how to format and tweak your code to be more readable and robust, along with the best code style and formatting practices. Try it today for free and see how it helps you level up as a programmer!\nStart Learning \n                                                    \nCode Real Projects While Learning\nAt JetBrains Academy, you’ll tackle real-world projects to build your portfolio and prepare you for job interviews. For Android development, you can complete projects like “Zookeeper” to master data storage, “Indigo Card Game” to showcase OOP skills, and “Stopwatch with Productivity Timer” for a complete app development experience. Choose your course and get job-ready!\nPick a Course\n                                                    \nCareer Tips\n5 Books Every Beginner Programmer Should Read\nWe’ve rounded up five must-read books for every beginner programmer. Build your coding library and get inspired!\nLearn More\n                                                    \nTeach Coding With JetBrains Academy\nActive Learning with the Capture the Flag Game\nJoin us on Tuesday, August 13, at 3:00 pm UTC to discover how you can teach effectively in a lazy way using the “Capture the Flag” game and how it empowers students to take ownership of their learning journey.\nRegister Now\n                                                    \nFree Educational Licenses\nTeach effectively using real IDEs! With free JetBrains IDEs, you can create courses, demonstrate how development tools work, and automate your teaching tasks. Share your knowledge and experience with students with our free educational licenses.\nDiscover More",
        "dc:creator": "Maria Sharobaeva",
        "content": "Summer’s almost gone! Don’t delay upgrading your tech skills. Our July digest has it all: a new Git starter kit, fresh courses, top projects you can work on, career tips, events, and free educational licenses. Dive in and level up!",
        "contentSnippet": "Summer’s almost gone! Don’t delay upgrading your tech skills. Our July digest has it all: a new Git starter kit, fresh courses, top projects you can work on, career tips, events, and free educational licenses. Dive in and level up!",
        "guid": "https://blog.jetbrains.com/?post_type=education&p=497952",
        "categories": [
          "digest",
          "jetbrains-academy",
          "newsletter"
        ],
        "isoDate": "2024-07-31T16:36:28.000Z"
      },
      {
        "creator": "Kerry Beetge",
        "title": "Code Quality: Leadership Strategies for Finding and Supporting Quality-Focused Developers",
        "link": "https://blog.jetbrains.com/qodana/2024/07/leadership-code-quality/",
        "pubDate": "Wed, 31 Jul 2024 13:25:35 +0000",
        "content:encodedSnippet": "Table of Contents\n\nWhy is prioritizing code quality so important?\nPutting the right team together\nCreating a culture of quality\nDefining and identifying performance challenges\nBalancing business needs with soft skills and the developer experience\nFinal words\n\nYou don’t have to do it alone – Meet Qodana for code quality\n\nToday we’re joined by Educator, Entrepreneur, and European Team Lead (Orange Cyber Defence NL) Herman Du Preez, who offers insights into finding and supporting quality-focused developers. In this first installment of our new Qodana Leadership Series, we deep dive into the nuances of sourcing and nurturing developer talent in your team, especially if code quality is one of your main drivers. Let’s get started! \nWhy is prioritizing code quality so important?\nBuilding successful software products starts with getting the right team on board, but as any technical recruiter or team lead will tell you, this is often easier said than done. One of the greatest challenges leaders face is balancing culture, competency, and potential in order to grow teams that prioritize code and product quality as daily mantra – from the bottom up. \nCode quality standards are vital in business, as they enhance reliability and reduce errors and crashes for a better user experience. They facilitate easier updates and maintenance, improving team efficiency. This also allows for scaling business growth and, despite the upfront time investment, proves cost-efficient in the long run by reducing post-deployment hiccups. \nWell-structured code promotes better team collaboration. Therefore, maintaining code quality is a key strategy impacting product stability, team productivity, and overall business success.\nIn fact, the cost of poor code quality can be measured. According to Forbes, “poor software” cost the U.S. economy $2.08 trillion in 2020 alone. So how do we find quality focused developers?\n\n\n\n\nPutting the right team together\n“A person who is underperforming or not a fit is a failure on my part. I chose them, I interviewed them, and I hired them. And in a worst case scenario, firing an underperformer can take a lot of time and effort” says Herman Du Preez, when asked about what he looks for in new team candidates. \n“So when I’m recruiting for my team, I’m looking for that fire. The people you want at your side need to share a passion for the thing you’re trying to do, whether they’re trying to configure a new tool, learn a new (coding) language, or brute force a bank’s VPN endpoint.\n\n\n\n\n“The reality of IT is that you can’t compete against the person who’s been up at night working on what they’re interested in, who lives and breathes solving problems, or who finds creative executions. I look for the people who are constantly thinking about the problems they couldn’t solve.” \nDu Preez’s sentiment seems to be echoed in results from the 2022 Stack Overflow Developer Survey, which show that more than 63% of employed developers and managers spend over 30 minutes a day searching for answers and solutions to problems. \nBut aside from “fire”, more specifically defined as drive, interest, and obsession, what other qualities can indicate compatibility with a quality-focused team? Attention to detail, a desire for continuous improvement, motivation, and familiarity with quality assurance frameworks could all suggest a candidate is a good fit.  \nFrom 2022 Stack Overflow Developer Survey\n\n\n\nCreating a culture of quality\nWhile attracting quality-focused developers is an important factor in itself, leaders can also foster a culture of quality in the team. Building this culture is a strategic move that can accelerate project completion and improve the end product. But what does this look like in practice?\n1. Setting clear quality standards: Leaders can establish clear, easy-to-understand standards for code quality that align with both the team’s capacity and the project’s goals. This can include detailing expected methods, defining naming conventions, emphasizing comment etiquette, and much more. It can also be a democratic process, taking into account the opinions and desires of the team. \n2. Leading by example: Leaders should embody the qualities they want to see. They can do this by diving into code reviews themselves, giving thorough feedback, and “walking the talk”. As renowned business educator Marshall Goldsmith once famously said: “One of the most important things a leader can do is to lead by example. If you want everyone else to be passionate, committed, motivated, and dedicated – you go first.”  \n3. Encouraging peer reviews: Implementing and encouraging code review as a regular part of the development process enhances its importance in the team’s mind. This can lead to better knowledge sharing and a collaborative environment while improving overall code quality.\n“​​In a group of 11 programs developed by the same group of people, the first 5 were developed without reviews. The remaining 6 were developed with reviews. After all the programs were released to production, the first 5 had an average of 4.5 errors per 100 lines of code. The 6 that had been inspected had an average of only 0.82 errors per 100. Reviews cut the errors by over 80 percent.” – Steve McConall, CodeComplete\n4. Empowering education: High-quality training and resources can enhance your team’s knowledge of good programming habits and refactoring techniques, and the effective use of testing frameworks can support a team mentality that prioritizes quality. This training could be in the form of workshops, online courses, or knowledge-sharing sessions. \n“In a previous role in a small company, we would hire people only to find they had learned bad habits and didn’t follow methodologies properly. So we hired fresh out of university and trained them ourselves over 4 to 6 months to get them started,” says Du Preez. \n\n\n\n\n5. Utilizing quality assurance tools: Encourage the use of static analysis tools, linters, or advanced integrated development environments (IDEs) that spot and highlight issues in the code. Coupled with continuous integration tools, these can flag potential issues quickly. For example, in an empirical study on the effectiveness of static C code analyzers for vulnerability detection, 77% of open-source projects (from a sample of 168,214) used code analyzers to detect vulnerabilities, which makes sense given that C and C++ are among the languages that are at the root of most vulnerabilities.  \n6. Rewarding quality: Incorporate recognition or incentives for creating high-quality code. This could be in team meetings, via emails, or in performance reviews. By highlighting success stories within the team, others may be motivated to follow suit.\n7. Making quality a part of regular discussions: Regularly emphasize the importance of quality in meetings, reviews, and team check-ins. Also, constructively address issues or bottlenecks challenging the team’s ability to produce high-quality code. \n8. Promoting a psychologically safe environment: Encourage an environment where it’s safe to admit mistakes and learn from them. This can help you catch and rectify code issues earlier, and it reinforces a quality-first mindset.\nDu Preez’s take on this? “You’re allowed to make every mistake once. In fact, I encourage you to get out there and speed that process up. My career is a stack of failures propping up some successes and it’s working. Sometimes we are so focused on the impact of the mistake that we lose the opportunity.” \nWhen asked about practical ways to create safety, he added that “anonymous questions should be in place for learning, etc. It’s easy to implement with forms, and participants should be able to check the source code and see that it’s really anonymous.”\n\n\n\n\n9. Balancing quality and speed: Make sure that while striving for high-quality code, developers aren’t burdened with unrealistic expectations around speed. Overworking can lead to more errors in code, which defeats the purpose of a quality-first approach.\nBy incorporating these strategies, team leaders can foster a robust code quality culture, leading to better products and a more cohesive, empowered team. But what happens when this doesn’t work out?\nDefining and identifying performance challenges\nRobust analysis of your codebase can help you identify potential problems like code smells, security vulnerabilities, duplications, and discrepancies with coding standards. By reviewing these insights, you can pinpoint areas where your developers might be struggling. \nYou can also use tools to suggest solutions for the issues it identifies, allowing “underperforming” or inexperienced developers to learn and improve over time. This creates a learning opportunity that doesn’t require you to be actively involved at every step. You can focus on other leadership tasks like relationship building. \nOver and above this, detailed objective reports can help you track progress over time. By evaluating these reports, you can identify worrying patterns or failures to adhere to coding standards. This can help you spot underperformance or organizational challenges early.\nRemember, it’s important to use the insights from tools like Qodana as a basis for supportive discussions with your developers about opportunities for improvement and growth, rather than as a punitive measure. A feel of continuous learning and improvement can greatly boost a team’s performance.\nBalancing business needs with soft skills and the developer experience\nIt’s no secret that strong communication skills, the ability to problem solve, and a good level of emotional intelligence will take you far as a leader. But the will to delegate, resolve conflict, and mentor effectively are equally as important. \n“Don’t forget encouragement,” says Du Preez. “It’s a simple thing but I’ve seen people take ideas they never would have tried and run with them because they were encouraged to do so. Now its conference talks and new service lines as a result. What the average person often needs is someone to look at their work and encourage them to take action.”\nFinal words\nOne of the ways we can define a quality focused leader is by their flexibility and desire to navigate change. According to Du Preez, “it’s okay to try new things, and if it fails, fall back. But a bad leader gets locked into the rigidity of what a service looks like so they’re killing ideas.” \nYou don’t have to do it alone – Meet Qodana for code quality\nFind advocates in your team who want to support the goal of increasing product quality and code excellence. Get business buy-in by communicating the importance of product quality. Use tools that fit your business use case to help reduce errors, establish quality gates, and support learning. \nQodana can be integrated into your team’s CI/CD pipeline so that code quality checks become a routine part of your development process. This ongoing oversight can help you catch performance issues in real time, improve education, and cultivate a culture of code quality within your team. \n\n\n\n\nTry Qodana\nIf you’d like to contact him, you can get in touch on LinkedIn or leave a comment below.",
        "dc:creator": "Kerry Beetge",
        "content": "Today we’re joined by Educator, Entrepreneur, and European Team Lead (Orange Cyber Defence NL) Herman Du Preez, who offers insights into finding and supporting quality-focused developers. In this first installment of our new Qodana Leadership Series, we deep dive into the nuances of sourcing and nurturing developer talent in your team, especially if code quality [&#8230;]",
        "contentSnippet": "Today we’re joined by Educator, Entrepreneur, and European Team Lead (Orange Cyber Defence NL) Herman Du Preez, who offers insights into finding and supporting quality-focused developers. In this first installment of our new Qodana Leadership Series, we deep dive into the nuances of sourcing and nurturing developer talent in your team, especially if code quality […]",
        "guid": "https://blog.jetbrains.com/?post_type=qodana&p=496512",
        "categories": [
          "articles-2",
          "best-practices",
          "insights",
          "interviews",
          "jetbrains",
          "opinion",
          "tips-tricks",
          "code-quality",
          "qodana",
          "web-applications",
          "web-development"
        ],
        "isoDate": "2024-07-31T13:25:35.000Z"
      },
      {
        "creator": "Ksenia Shneyveys",
        "title": "KotlinConf 2025 Tickets Are Now on Sale!",
        "link": "https://blog.jetbrains.com/kotlin/2024/07/kotlinconf-2025-tickets-on-sale/",
        "pubDate": "Wed, 31 Jul 2024 10:04:01 +0000",
        "content:encodedSnippet": "The countdown to KotlinConf 2025 has officially begun, and we’re excited to announce that tickets are now on sale for this premier event, which will take place from May 21–23, 2025, in Copenhagen, Denmark!\nOrganized by JetBrains, this is the largest Kotlin event in the world. Starting today, you can secure your spot at KotlinConf 2025, with tickets available while supplies last.\nGet Your Tickets Now\nSuper Early Bird Tickets have the lowest prices, so book early to save big!\nEarly Bird Tickets: Did you miss the Super Early Bird tickets? No problem. Early Bird tickets still offer a significant discount over the regular prices. But hurry, these spots are limited.\nRegular Admission tickets: KotlinConf usually sells out months in advance, so make sure you get your tickets early. \nWorkshop tickets: You can purchase a workshop-only ticket for an additional deep dive into specific Kotlin topics, offering hands-on learning experiences under the guidance of industry experts. Workshops take place on the first day of KotlinConf, May 21, 2025. You can attend only one workshop, as they run simultaneously. Seats for each workshop are limited, so register soon to secure your place.\n\n\n\n\nSecure Your Spot\nWorkshops:\nAsynchronous Programming with Kotlin Coroutines Intermediate | Sebastian Aigner\nMaster the art of async programming with Kotlin coroutines and flows. This workshop covers the essentials of coroutine contexts, structured concurrency, and Kotlin Flows, enhancing your skills for building modern, concurrent applications.\nDeep Dive into Kotlin Multiplatform: Advanced Techniques for Seamless Code Sharing Intermediate/Advanced | Pamella Hill & Konstantin Tskhovrebov \nThis advanced workshop is designed for experienced Kotlin Multiplatform developers. Explore native integrations, advanced Kotlin Multiplatform for iOS, code quality, app quality, and managing workflows.\nHands-On Kotlin Web Development with Ktor Introductory/Intermediate | Anton Arhipov & Leonid Stashevskii \nLearn the ins and outs of Ktor, a flexible framework for HTTP applications with Kotlin. This workshop covers everything from handling requests to WebSockets, databases, authentication, testing, and deployment, with hands-on coding throughout.\nBuilding a Shared UI with Compose Multiplatform Intermediate/Advanced | Márton Braun & Victor Kropp \nDiscover how to build a shared UI in Kotlin with Compose Multiplatform. This workshop will explore how Compose works across platforms, providing hands-on experience with the latest APIs, best practices, and advanced topics like interoperability, accessibility, and testing.\nMore workshop topics are on the way!\nFollowing the workshops, the main conference days, May 22–23, will feature a range of sessions, talks, and networking opportunities designed to provide deep insights and connections within the Kotlin community. \nGet Your Tickets Now\nTo get a glimpse of what’s in store for you at the conference, you can watch the recordings of the KotlinConf 2024 recap.\nBe sure to check out kotlinconf.com for more information, join our Slack, and follow us on X for the latest updates and announcements.\nJoin us in Copenhagen for KotlinConf’25, and be part of the future of the Kotlin community. See you there!",
        "dc:creator": "Ksenia Shneyveys",
        "content": "The countdown to KotlinConf 2025 has officially begun, and we&#8217;re excited to announce that tickets are now on sale for this premier event, which will take place from May 21–23, 2025, in Copenhagen, Denmark! Organized by JetBrains, this is the largest Kotlin event in the world. Starting today, you can secure your spot at KotlinConf [&#8230;]",
        "contentSnippet": "The countdown to KotlinConf 2025 has officially begun, and we’re excited to announce that tickets are now on sale for this premier event, which will take place from May 21–23, 2025, in Copenhagen, Denmark! Organized by JetBrains, this is the largest Kotlin event in the world. Starting today, you can secure your spot at KotlinConf […]",
        "guid": "https://blog.jetbrains.com/?post_type=kotlin&p=497770",
        "categories": [
          "news",
          "kotlinconf",
          "sendtoall"
        ],
        "isoDate": "2024-07-31T10:04:01.000Z"
      }
    ]
  },
  {
    "name": "Airbnb Engineering & Data Science",
    "category": "기업",
    "posts": [
      {
        "creator": "Ran Zhang",
        "title": "Apache Flink® on Kubernetes",
        "link": "https://medium.com/airbnb-engineering/apache-flink-on-kubernetes-84425d66ee11?source=rss----53c7c27702d5---4",
        "pubDate": "Wed, 31 Jul 2024 17:04:52 GMT",
        "content:encodedSnippet": "Airbnb’s Use of A New Flink platform evolved from Apache Hadoop® Yarn\n\nIntroduction\nAt Airbnb, Apache Flink was introduced in 2018 as a supplementary solution for stream processing. It ran alongside Apache Spark™ Streaming for several years before transitioning to become the primary stream processing platform. In this blog post, we will delve into the evolution of Flink architecture at Airbnb and compare our prior Hadoop Yarn platform with the current Kubernetes-based architecture. Additionally, we will discuss the efforts undertaken throughout the migration process and explore the challenges that arose during this journey. In the end we will summarize the impact, learnings along the way and future plans.\nArchitecture Evolution\nThe evolution of Airbnb’s streaming processing architecture based on Apache Flink can be categorized into three distinct phases:\nPhase One: Flink jobs operated on Hadoop Yarn with Apache Airflow serving as the job scheduler.\nAround 2018, several teams at Airbnb adopted Flink as their streaming processing engine, mainly due to its superior low-latency capabilities compared to Spark Streaming. During this period, Flink jobs were running on Hadoop Yarn, and Airflow was employed as the workflow manager for task scheduling and dependency management.\nThe selection of Airflow as the workflow manager was largely influenced by its widespread use in addressing various job scheduling needs, as there were no other user-friendly open-source alternatives readily available at that time. Each team was responsible for handling their Airflow Directed Acyclic Graphs (DAGs), job source code, and the requisite dependency JARs. Typically, Flink JAR files were locally built before deployment to Amazon S3.\n\nThe architecture catered to our requirements during that period with a limited range of use cases.\nFrom 2019 onwards, Apache Flink gained significant traction at Airbnb, replacing Spark Streaming as the primary stream processing platform. With the scaling in usage of Flink we encountered various challenges and limitations in this architecture. To begin with, Airflow’s batch-oriented design, relying on polling intervals, did not match Airbnb’s needs, and we experienced significant delays in job start and failure recovery, often causing SLA violations for low-latency use cases. Airflow also caused a singleton issue as duplicate job submissions occasionally occur due to race conditions among Airflow workers and user operations not following expected patterns. Besides, Airflow’s Directed Acyclic Graph (DAG) structure is complex and does not function well with some of Airbnb’s streaming use cases. We also encountered engineering context mismatch in this architecture: product engineers might find themselves unfamiliar with Apache Airflow and Hadoop, resulting in a steep learning curve when setting up new Apache Flink jobs.\nTo tackle the above technical and operational challenges, we started to explore new possibilities. Our initial step involved replacing Airflow with a customized lightweight streaming job scheduler, marking the inception of Phase Two.\nPhase Two: Flink jobs operated on Hadoop Yarn, with a lightweight streaming job scheduler.\n\nAt a high level, Airflow was replaced by a lightweight streaming job scheduler operating on Kubernetes. The job scheduler contains a master node and a pool of worker nodes:\nThe master node is responsible for managing the metadata of all Flink jobs and ensuring the proper life cycle of each worker node. This includes tasks such as parsing user-provided job configurations, synchronizing metadata and job statuses with Apache Zookeeper™, and ensuring that worker nodes consistently maintain their expected states.\nA worker node is responsible for handling the dependencies and life cycle of a single Flink job. Workers package the necessary dependencies, submit the Flink job to Hadoop Yarn, continuously monitor its status, and in the event of a failure, it triggers an immediate restart.\nThe Phase 2 design resulted in faster turnaround time and reduced downtime during job restarts. It also resolved single point of failure issues with Zookeeper.\nAs usage of Flink grew, we encountered new challenges in Phase Two:\n\nLack of CI/CD: Flink developers had to devise their own version control strategies.\nAbsence of native secrets management: There is no vanilla secrets management on Hadoop Yarn.\nLimited resource and dependency isolation: Each supported Flink version had to be manually preinstalled on the Yarn cluster. While Yarn’s resource queues could provide some level of resource isolation, job-level isolation was absent.\nService Discovery complexity: As more use cases were onboarded, each potentially requiring access to various internal Airbnb services, configuring service access on Yarn proved to be cumbersome. It forced a binary choice between enabling service access for the entire cluster or none at all.\nMonitoring and debugging challenges: Managing and maintaining the logging pipeline and SSH access became non-trivial tasks on a multi-tenant Yarn cluster.\nOngoing complexity and dependencies: Although the Flink job scheduler was lightweight compared to Airflow, it introduced additional complexities.\n\nPhase Three (current state): Flink jobs run on Kubernetes, and the job scheduler is eliminated.\nDeploying Flink on Kubernetes allows direct Flink deployment on a running Kubernetes cluster. With this integration we can explore enabling efficient autoscaling and the Kubernetes operator to simplify the management of Flink jobs and clusters.\nFlink on Kubernetes offers several advantages over Hadoop Yarn addressing the above challenges:\n\nDeveloper experience: Standardized by integrating with the existing CI/CD systems.\nSecrets Management: With Flink on Kubernetes, each Flink job can securely store its own secrets within the pods. This provides a more secure way to manage sensitive information.\nIsolated Environment: Jobs running on Flink on Kubernetes benefit from isolation at both the resource and dependency levels. Each job can run on its dedicated Flink version if supported by its image, allowing for better management of dependencies.\nEnhanced Monitoring: Integration with Airbnb’s pre-defined logging and metric sidecars on Kubernetes simplifies setup and improves monitoring. This enables detailed insights into individual pods and rate limiting for logging per pod, making it easier to track and troubleshoot issues.\nService Discovery: Flink jobs now adhere to Airbnb’s standardized approach for service discovery, using the cluster mesh. This ensures consistent and reliable communication between services.\nSimplified SSH access: Users with the appropriate permissions can now SSH into the Flink pod without the need for an SSH tunnel. This provides greater flexibility and control over SSH permissions per job.\n\nAdditionally, we’ve observed an increasing level of Kubernetes support and adoption within the Flink community, which increased our confidence in running Flink on Kubernetes.\nIt’s worth mentioning that Kubernetes brings its own risks and limitations. For instance, a single Flink task manager failover can lead to the pause of the entire job process. This can pose issues in scenarios with frequent node rotations within Kubernetes and large jobs deployed with hundreds of task managers. For context, node rotation on Kubernetes is performed to ensure the operability and stability of the cluster. It involves replacing existing nodes with new ones, typically with updated configurations or to perform maintenance tasks, with the goals of applying host configuration changes, maintaining node balance and enhancing operational efficiency. In comparison, node rotations on Yarn occur less frequently, so the impact on job availability is less significant. We will explore how we are mitigating these challenges in the Future Work section.\nComponents Deep Dive\nBelow is an overview of our current architecture:\n\nTo provide a better understanding of the system, below is a deep dive of the five primary components, as well as how users interact with them when setting up a new Flink job:\n\nJob configurations: This serves as an abstraction layer over Kubernetes and CI/CD components, providing Flink users with a simplified interface for creating Flink application templates. It shields users from the complexities of the underlying Kubernetes infrastructure. Flink users define the core specifications of their Flink job via a configuration file. This includes critical information like the entrypoint class name, job parallelism, and the necessary ingress services and sinks.\n\nImage management: This component involves the pre-construction of Flink base images, which are bundled with essential dependencies required to access Airbnb resources. These images are stored in Amazon Elastic Container Registry and can be readily deployed with user Jars or further customized to meet specific user needs.\n\nCI/CD: By introducing a few customizations to support Flink’s stateful deployment, we’ve integrated Flink with our existing CI/CD system, providing a standardized version control and continuous delivery experience. Flink jobs are deployed within Kubernetes, each residing in its distinct namespace to ensure isolation and effective administration.\n\nFlink portal: an API service that offers essential features for managing the states of Flink jobs. These features include stopping a Flink job with a savepoint and querying completed checkpoints on Amazon S3. Additionally, it provides a self-service UI portal, enabling users to monitor and check the status of their jobs. Users also gain access to critical job state management functionalities, empowering them to either initiate the job from a bootstrapped savepoint or resume it from a previous checkpoint.\n\nFlink job runtime: Each Flink job is deployed as an independent application cluster on Kubernetes. To ensure fault tolerance and state storage, Zookeeper, ETCD, and Amazon S3 are utilized. Additionally, pre-configured sidecar containers accompany the Flink containers to provide support for critical functions such as logging, metrics, DNS, and more. A service mesh is employed to facilitate communication between Flink jobs and other microservices.\n\nImpact\nImproved Developer Velocity\nOnboarding Flink jobs is faster, where our developers noted that it takes hours instead of days, and developers can focus more on their application logic.\nImprovement in Flink Job Availability and Latency\nThe architecture of Flink on Kubernetes improves job availability and scheduling latency by eliminating certain components of the Flink client and job scheduler found in Flink on Yarn.\nCost Savings in Infrastructure\nThe streamlining of Flink infrastructure complexity and the removal of certain components, such as the job scheduler, have resulted in cost savings in our infrastructure. Additionally, by running Flink jobs on a shared Kubernetes cluster at Airbnb, we could potentially improve the overall cost efficiency of our company’s infrastructure.\nFuture Work\nImprovement in Job Availability\nIn the Flink world, node rotations in Kubernetes can cause job restarts and result in downtime. While Flink itself can recover from job restarts without data loss, the potential downtime and availability impact may be unfavorable for highly latency-sensitive applications. To address this, there are a few approaches we are evaluating.\n\nReducing the number of node rotations to minimize job restarts.\nFaster job recovery.\n\nEnable Job Autoscaling\nWith the introduction of Reactive Mode in Flink 1.13, users can dynamically adjust the parallelism of their jobs without the need for a job restart. This job auto scaling feature can enhance job stability and cost efficiency. In the future we could enable autoscaling for Flink Kubernetes workloads by leveraging system metrics (such as CPU usage) and Flink metrics (such as backpressure), to determine the appropriate parallelism.\nFlink Kubernetes Operator\nThe Flink Kubernetes Operator utilizes Custom Resources and functions as a controller to manage the entire production lifecycle of Flink applications. By leveraging the operator, we can streamline the operation and deployment processes for Flink jobs. It provides better control over deployment and lifecycle of jobs, and an out of box solution for autoscaling and auto tuning.\nConclusion\nTo summarize, the migration of Airbnb’s streaming processing architecture based on Apache Flink from Hadoop Yarn to Kubernetes has been a significant milestone in enhancing our streaming data processing capabilities. This transition has resulted in a more streamlined and user-friendly experience for Flink developers. By overcoming challenges that were complex to address on Yarn, we have laid the foundation for more efficient and effective streaming data processing.\nAs we look ahead, we are committed to further refining our approach and resolving any remaining challenges. We are enthusiastic about the ongoing growth and potential of Apache Flink within our company, and we anticipate continued innovation and improvement in the future.\nIf this kind of work sounds appealing to you, check out our open roles — we’re hiring!\nAppreciations\nThe Flink on Kubernetes platform would not have been possible without cross-functional and cross-org collaborators as well as leadership support. They include, but are not limited to: Jingwei Lu, Long Zhang, Daniel Low, Weibo He, Zack Loebel-Begelman, Justin Cunningham, Adam Kocoloski, Liyin Tang and Nathan Towery.\nSpecial thanks to the broader Airbnb data community members who provided input or aid to the implementation team throughout the design, development, and launch phases.\nWe also want to thank Wei Hou and Xu Zhang for their support in authoring this post during their time at Airbnb.\n****************\nApache Spark™, Apache Airflow™, and Apache ZooKeeper™ are trademarks of The Apache Software Foundation.\nApache Flink® and Apache Hadoop® are registered trademarks of The Apache Software Foundation.\nKubernetes® is a registered trademark of The Linux Foundation.\nAmazon S3 and AWS are trademarks of Amazon.com, Inc. or its affiliates.\nAll product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.\n\nApache Flink® on Kubernetes was originally published in The Airbnb Tech Blog on Medium, where people are continuing the conversation by highlighting and responding to this story.",
        "dc:creator": "Ran Zhang",
        "guid": "https://medium.com/p/84425d66ee11",
        "categories": [
          "kubernetes",
          "apache",
          "engineering",
          "infrastructure",
          "open-source"
        ],
        "isoDate": "2024-07-31T17:04:52.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "PayPal Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "article New updates to Planner comment notifications and settings in Planner Blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Visual Studio Blog",
    "category": "기업",
    "posts": [
      {
        "creator": "Carlos Guerra Vazquez",
        "title": "Introducing the revamped Attach to Process experience",
        "link": "https://devblogs.microsoft.com/visualstudio/introducing-the-revamped-attach-to-process-experience/",
        "pubDate": "Tue, 06 Aug 2024 10:00:36 +0000",
        "content:encodedSnippet": "One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio, the Attach to Process dialog allows you to quickly attach the debugger to the processes you want to inspect and troubleshoot. While this feature has been around for a long time, its current design has room for modernization to better fit the latest versions of Visual Studio. Thus, we used this opportunity to improve the Attach to Process experience introducing a revamped and refreshed UI. Along with the new UI, we also took some time to introduce additional features users had requested and improved performance and accessibility.\n\nThe first thing you may notice is that the new UI visual style was updated to be consistent with the rest of Visual Studio, as well as supporting dark mode or any other VS theme you are using. The refreshed layout is not just about looks—it’s designed to save space and reduce clutter. This means you can easily find and select the processes you want to debug, even when working with smaller window sizes. It’s a cleaner, more intuitive experience that keeps everything you need within easy reach.\nWhat’s new in the Attach to Process dialog?\nFollowing are the new features and improvements to the dialog:\nTheming support: The dialog now adapts to your preferred VS theme.\n\n\nDecluttering: We revamped the view to reduce clutter and give back vertical space. This includes having the connection information hidden as a tooltip and having the Code Type be selected through a combo box in the dialog, instead of requiring a separate window like the old dialog did.\n\nIntroduced Local and Remote connection types: We added a new “Local” only connection type that simplifies the view when only debugging processes on your own machine. The existing “Default” connection was renamed into “Remote (Windows)”, as the new default connection is the Local one.\nImproved performance: Rendering time of both the tree view and flat view of the processes was improved. This should be especially noticeable for the tree view.\nCollapsible items in the Tree view: The dialog now allows you to collapse child processes shown in the Tree view. Helping you reduce clutter.\n\nPersistence of columns positions and widths on the processes list: The dialog now remembers the positions and widths of the columns on the processes list. This way you don’t have to adjust them every time you re-open VS.\nIntegrated “Track Window” experience: When selecting a process using the Track Window toggle, any window you selected will be highlighted on the processes list. Allowing you to see its information before deciding to attach, or you can attach directly to it though a double click.\nBuffered Text Search: The dialog now lets you start typing the name of the process you are searching as soon as the dialog opens and even before the processes are loaded. The dialog will buffer your input and apply it as soon as the processes are available, saving you some time in your workflow.\nOther changes:\nThe search now supports wildcards, hexadecimal search, property filters and multiple process search.\n\nProcess icons are shown on the lists. (Local connection only)\n\nPreview of the selected processes. You can double click on it to scroll to the selected process on the list.\n\nThe last attached process name is shown on the reattach menu item. (Only on VS 17.11)\n\nTry it out and let us know what you think\nThe new Attach to Process dialog is available in Visual Studio 2022 version 17.10 and later. You can access it from the Debug > Attach to Process menu or by pressing Ctrl+Alt+P. We hope you enjoy using it and find it more productive and pleasant than the old one. If you have any thoughts or suggestions, please share them with us on the Developer Community site or just leave a comment below. Your feedback is very important to us.\nStay connected with the Visual Studio team by following us on Twitter @VS_Debugger, Twitter @VisualStudio, YouTube, and LinkedIn.\nThe post Introducing the revamped Attach to Process experience appeared first on Visual Studio Blog.",
        "dc:creator": "Carlos Guerra Vazquez",
        "content": "<p>One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio,</p>\n<p>The post <a href=\"https://devblogs.microsoft.com/visualstudio/introducing-the-revamped-attach-to-process-experience/\">Introducing the revamped Attach to Process experience</a> appeared first on <a href=\"https://devblogs.microsoft.com/visualstudio\">Visual Studio Blog</a>.</p>\n",
        "contentSnippet": "One of the most powerful and frequently used features of Visual Studio is the Attach to Process dialog, which enables you to debug processes running on your machine or on a remote machine. For anything you could develop using Visual Studio,\nThe post Introducing the revamped Attach to Process experience appeared first on Visual Studio Blog.",
        "guid": "https://devblogs.microsoft.com/visualstudio/?p=250065",
        "categories": [
          "Visual Studio",
          "Debugging and Diagnostics",
          "UI Refresh",
          "Visual Studio 2022"
        ],
        "isoDate": "2024-08-06T10:00:36.000Z"
      }
    ]
  },
  {
    "name": "Instagram Engineering",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Joshua",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권재명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김석기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권진호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강대명",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권정혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "줌구",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수보",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김시은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "곽민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김범진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민서",
    "category": "개인",
    "posts": []
  },
  {
    "name": "I am not Okay",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권창현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권기호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강태욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권용진",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권영재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김승호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김병환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for boyism Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성준의 린스타트업과 디자인씽킹",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권혁우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김준형",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강동혁",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고종범",
    "category": "개인",
    "posts": []
  },
  {
    "name": "cheese10yun",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구자철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "FSS",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권동준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김용일",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도균",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김상훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김동우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권윤학",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김민준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김만수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "엘키",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태환",
    "category": "개인",
    "posts": [
      {
        "title": "Compose 함수는 어떤 조건으로 나누는것이 좋을까?(Stateful, stateless)",
        "link": "https://thdev.tech/compose/2024/08/04/Android-Compose-Split-Funcation/",
        "pubDate": "Sun, 04 Aug 2024 00:00:00 +0000",
        "content": "<p>Compose 함수는 어떠한 조건을 사용해 나누는 것이 좋을까? 고려하면 좋을 것은 무엇일까?</p>\n\n<ul>\n  <li>스크린으로 나눈다?</li>\n  <li>컴포넌트로 나눈다?</li>\n  <li>무조건 많이 나눈다?</li>\n</ul>\n\n<p>답은 없지만 최소한 어떤 규칙을 가지고 나눌 수 있을지 고민하고 적용한 부분을 정리해 본다.</p>\n\n<p><br /></p>\n\n<h3>이 글에서 알아볼 내용</h3>\n\n<ul>\n  <li>코드의 분리 관점을 무엇으로 볼지를 고민해 본 글이다.</li>\n  <li>글에 오류가 있을 수 있으니 참고만 하길</li>\n</ul>\n\n<!--more-->\n\n<p><br /></p>\n\n<h2>발표 자료</h2>\n\n<script defer=\"\" class=\"speakerdeck-embed\" data-id=\"4adc96f79a254caea0c859ff66a19494\" data-ratio=\"1.7777777777777777\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n\n<p><br /></p>\n\n<h2>풀 코드를 통해 함수를 분리해 보자</h2>\n\n<p>작성한 코드는 <code class=\"language-plaintext highlighter-rouge\">@Composalbe</code> MainScreen 함수 하나로 작성하였다.</p>\n\n<p>이 코드는 총 311줄로 아래와 같은 단점이 생긴다.</p>\n\n<ul>\n  <li>함수를 분리하지 않는 경우 새로운 Screen이 추가되면 기존 코드에 이어질 수 있다.</li>\n  <li>기존 코드의 수정도 어렵다.</li>\n</ul>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/all.png\" alt=\"all\" /></p>\n\n<p><a href=\"https://github.com/taehwandev/Android-BlogExample/blob/main/sample/compose/compose-example-01/src/main/java/tech/thdev/compose/web/sample/MainActivityBackup.kt\">Github - MainActivityBackup.kt 전체 코드</a></p>\n\n<p>이 코드는 어디까지나 분리 없이, 설명하기 위한 방식을 선택하기 위해 작성한 코드이다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MainActivityBackup</span> <span class=\"p\">:</span> <span class=\"nc\">ComponentActivity</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">:</span> <span class=\"nc\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">)</span>\n        <span class=\"nf\">enableEdgeToEdge</span><span class=\"p\">()</span>\n        <span class=\"nf\">setContent</span> <span class=\"p\">{</span>\n            <span class=\"nc\">MyApplicationTheme</span> <span class=\"p\">{</span>\n                <span class=\"nc\">MainScreen</span><span class=\"p\">(</span>\n                    <span class=\"n\">list</span> <span class=\"p\">=</span> <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n                        <span class=\"nc\">NavigationSample</span><span class=\"p\">(</span>\n                            <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"s\">\"HOME\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_home_24</span><span class=\"p\">,</span>\n                            <span class=\"n\">trigger</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"nc\">NavigationSample</span><span class=\"p\">(</span>\n                            <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"s\">\"WEB\"</span><span class=\"p\">,</span>\n                            <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_web_24</span><span class=\"p\">,</span>\n                            <span class=\"n\">trigger</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">WEB</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">),</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n  * MainScreen의 전체 코드\n  **/</span>\n<span class=\"nd\">@SuppressLint</span><span class=\"p\">(</span><span class=\"s\">\"SetJavaScriptEnabled\"</span><span class=\"p\">)</span>\n<span class=\"nd\">@OptIn</span><span class=\"p\">(</span><span class=\"nc\">ExperimentalMaterial3Api</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">MainScreen</span><span class=\"p\">(</span>\n    <span class=\"n\">list</span><span class=\"p\">:</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">NavigationSample</span><span class=\"p\">&gt;,</span>\n    <span class=\"n\">navController</span><span class=\"p\">:</span> <span class=\"nc\">NavHostController</span> <span class=\"p\">=</span> <span class=\"nf\">rememberNavController</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">navBackStackEntry</span> <span class=\"k\">by</span> <span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"nf\">currentBackStackEntryAsState</span><span class=\"p\">()</span> <span class=\"c1\">// Navigation 활용을 위한 코드</span>\n    <span class=\"kd\">val</span> <span class=\"py\">currentDestination</span> <span class=\"p\">=</span> <span class=\"n\">navBackStackEntry</span><span class=\"o\">?.</span><span class=\"n\">destination</span>\n    <span class=\"nc\">Scaffold</span><span class=\"p\">(</span>\n        <span class=\"n\">topBar</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n            <span class=\"nc\">TopAppBar</span><span class=\"p\">(</span>\n                <span class=\"n\">title</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">currentDestination</span><span class=\"o\">?.</span><span class=\"n\">route</span> <span class=\"o\">?:</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">bottomBar</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n            <span class=\"nc\">NavigationBar</span> <span class=\"p\">{</span>\n                <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"nf\">forEach</span> <span class=\"p\">{</span> <span class=\"n\">screen</span> <span class=\"p\">-&gt;</span>\n                    <span class=\"nc\">NavigationBarItem</span><span class=\"p\">(</span>\n                        <span class=\"n\">label</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                        <span class=\"n\">selected</span> <span class=\"p\">=</span> <span class=\"n\">currentDestination</span><span class=\"o\">?.</span><span class=\"n\">hierarchy</span><span class=\"o\">?.</span><span class=\"nf\">any</span> <span class=\"p\">{</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">route</span> <span class=\"p\">==</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">trigger</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"p\">}</span> <span class=\"p\">==</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n                        <span class=\"n\">icon</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">icon</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                            <span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"nf\">navigate</span><span class=\"p\">(</span><span class=\"n\">screen</span><span class=\"p\">.</span><span class=\"n\">trigger</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nf\">popUpTo</span><span class=\"p\">(</span><span class=\"n\">navController</span><span class=\"p\">.</span><span class=\"n\">graph</span><span class=\"p\">.</span><span class=\"nf\">findStartDestination</span><span class=\"p\">().</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                    <span class=\"n\">saveState</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                <span class=\"p\">}</span>\n                                <span class=\"n\">launchSingleTop</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                <span class=\"n\">restoreState</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxSize</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nc\">Box</span><span class=\"p\">(</span>\n            <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kd\">val</span> <span class=\"py\">context</span> <span class=\"p\">=</span> <span class=\"nc\">LocalContext</span><span class=\"p\">.</span><span class=\"n\">current</span>\n            <span class=\"nc\">CompositionLocalProvider</span><span class=\"p\">(</span><span class=\"nc\">LocalWebOwner</span> <span class=\"n\">provides</span> <span class=\"nc\">WebView</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"nc\">NavHost</span><span class=\"p\">(</span>\n                    <span class=\"n\">navController</span> <span class=\"p\">=</span> <span class=\"n\">navController</span><span class=\"p\">,</span>\n                    <span class=\"n\">startDestination</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"n\">enterTransition</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">EnterTransition</span><span class=\"p\">.</span><span class=\"nc\">None</span> <span class=\"p\">},</span>\n                    <span class=\"n\">exitTransition</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nc\">ExitTransition</span><span class=\"p\">.</span><span class=\"nc\">None</span> <span class=\"p\">},</span>\n                <span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">composable</span><span class=\"p\">(</span><span class=\"n\">route</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">HOME</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n                        <span class=\"nc\">Column</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">LazyColumn</span><span class=\"p\">(</span>\n                                <span class=\"n\">contentPadding</span> <span class=\"p\">=</span> <span class=\"nc\">PaddingValues</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n                                <span class=\"n\">verticalArrangement</span> <span class=\"p\">=</span> <span class=\"nc\">Arrangement</span><span class=\"p\">.</span><span class=\"nf\">spacedBy</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n                                    <span class=\"nc\">Surface</span><span class=\"p\">(</span><span class=\"n\">shape</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">shapes</span><span class=\"p\">.</span><span class=\"n\">small</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">editMode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                            <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                                                <span class=\"kd\">var</span> <span class=\"py\">changeItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n                                                <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n                                                    <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">changeItem</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">new</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n                                                    <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n                                                <span class=\"p\">)</span>\n\n                                                <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                                            <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n                                                                <span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">-&gt;</span>\n                                                                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">index</span> <span class=\"p\">==</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                                        <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n                                                                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                                                        <span class=\"n\">listItem</span>\n                                                                    <span class=\"p\">}</span>\n                                                                <span class=\"p\">},</span>\n                                                            <span class=\"p\">)</span>\n                                                        <span class=\"p\">},</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                                                    <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">newList</span> <span class=\"p\">-&gt;</span> <span class=\"n\">newList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">},</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n                                                <span class=\"p\">}</span>\n                                            <span class=\"p\">}</span>\n                                        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                            <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Gray</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"mf\">0.3f</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n                                                <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Text</span><span class=\"p\">(</span>\n                                                        <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                                                        <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">)</span>\n\n                                                    <span class=\"nc\">IconButton</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">newList</span> <span class=\"p\">-&gt;</span> <span class=\"n\">newList</span><span class=\"p\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">})</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n                                                        <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_close_24</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"s\">\"remove\"</span><span class=\"p\">)</span>\n                                                    <span class=\"p\">}</span>\n                                                <span class=\"p\">}</span>\n\n                                                <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                                    <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                                        <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n                                                            <span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">map</span> <span class=\"p\">{</span> <span class=\"n\">listItem</span> <span class=\"p\">-&gt;</span>\n                                                                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">listItem</span> <span class=\"p\">==</span> <span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                                    <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n                                                                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                                                                    <span class=\"n\">listItem</span>\n                                                                <span class=\"p\">}</span>\n                                                            <span class=\"p\">},</span>\n                                                        <span class=\"p\">)</span>\n                                                    <span class=\"p\">},</span>\n                                                    <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                                                <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                                    <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"edit\"</span><span class=\"p\">)</span>\n                                                <span class=\"p\">}</span>\n                                            <span class=\"p\">}</span>\n                                        <span class=\"p\">}</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n\n                            <span class=\"nc\">Button</span><span class=\"p\">(</span>\n                                <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                    <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">items</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">.</span><span class=\"nf\">toMutableList</span><span class=\"p\">().</span><span class=\"nf\">also</span> <span class=\"p\">{</span> <span class=\"n\">list</span> <span class=\"p\">-&gt;</span> <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">))</span> <span class=\"p\">})</span>\n                                <span class=\"p\">},</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"New\"</span><span class=\"p\">)</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"nf\">composable</span><span class=\"p\">(</span><span class=\"n\">route</span> <span class=\"p\">=</span> <span class=\"nc\">NavigationSample</span><span class=\"p\">.</span><span class=\"nc\">Trigger</span><span class=\"p\">.</span><span class=\"nc\">WEB</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kd\">val</span> <span class=\"py\">chromeClient</span> <span class=\"p\">=</span> <span class=\"nc\">CustomWebChromeClient</span><span class=\"p\">()</span>\n                        <span class=\"kd\">val</span> <span class=\"py\">client</span> <span class=\"p\">=</span> <span class=\"nc\">CustomWebViewClient</span><span class=\"p\">()</span>\n\n                        <span class=\"kd\">val</span> <span class=\"py\">webView</span> <span class=\"p\">=</span> <span class=\"nc\">LocalWebOwner</span><span class=\"p\">.</span><span class=\"n\">current</span>\n\n                        <span class=\"kd\">var</span> <span class=\"py\">url</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"s\">\"https://thdev.tech/\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                        <span class=\"nc\">Column</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxSize</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n                            <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n                                <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">url</span><span class=\"p\">,</span>\n                                <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">url</span> <span class=\"p\">=</span> <span class=\"n\">new</span> <span class=\"p\">},</span>\n                                <span class=\"n\">keyboardOptions</span> <span class=\"p\">=</span> <span class=\"nc\">KeyboardOptions</span><span class=\"p\">(</span><span class=\"n\">imeAction</span> <span class=\"p\">=</span> <span class=\"nc\">ImeAction</span><span class=\"p\">.</span><span class=\"nc\">Search</span><span class=\"p\">),</span>\n                                <span class=\"n\">keyboardActions</span> <span class=\"p\">=</span> <span class=\"nc\">KeyboardActions</span><span class=\"p\">(</span><span class=\"n\">onSearch</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">loadUrl</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">}),</span>\n                                <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">8</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n                            <span class=\"p\">)</span>\n\n                            <span class=\"nc\">BoxWithConstraints</span><span class=\"p\">(</span><span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">width</span> <span class=\"p\">=</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">.</span><span class=\"n\">hasFixedWidth</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">MATCH_PARENT</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span> <span class=\"p\">}</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">height</span> <span class=\"p\">=</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">constraints</span><span class=\"p\">.</span><span class=\"n\">hasFixedHeight</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">MATCH_PARENT</span> <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span> <span class=\"p\">}</span>\n                                <span class=\"kd\">val</span> <span class=\"py\">layoutParams</span> <span class=\"p\">=</span> <span class=\"nc\">FrameLayout</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n\n                                <span class=\"nc\">LaunchedEffect</span><span class=\"p\">(</span><span class=\"n\">key1</span> <span class=\"p\">=</span> <span class=\"nc\">Unit</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">loadUrl</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n                                <span class=\"nc\">BackHandler</span> <span class=\"p\">{</span>\n                                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">webView</span><span class=\"o\">?.</span><span class=\"nf\">canGoBack</span><span class=\"p\">()</span> <span class=\"p\">==</span> <span class=\"k\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                        <span class=\"n\">webView</span><span class=\"p\">.</span><span class=\"nf\">goBack</span><span class=\"p\">()</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">}</span>\n\n                                <span class=\"nc\">AndroidView</span><span class=\"p\">(</span>\n                                    <span class=\"n\">factory</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n                                        <span class=\"kd\">val</span> <span class=\"py\">parentLayout</span> <span class=\"p\">=</span> <span class=\"nc\">FrameLayout</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">).</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                                            <span class=\"kd\">val</span> <span class=\"py\">web</span> <span class=\"p\">=</span> <span class=\"n\">webView</span> <span class=\"o\">?:</span> <span class=\"nc\">WebView</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n                                            <span class=\"n\">web</span><span class=\"p\">.</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                                                <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">layoutParams</span> <span class=\"p\">=</span> <span class=\"n\">layoutParams</span>\n                                                <span class=\"n\">settings</span><span class=\"p\">.</span><span class=\"nf\">run</span> <span class=\"p\">{</span>\n                                                    <span class=\"n\">javaScriptEnabled</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"n\">defaultTextEncodingName</span> <span class=\"p\">=</span> <span class=\"s\">\"UTF-8\"</span>\n                                                    <span class=\"n\">loadWithOverviewMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"n\">useWideViewPort</span> <span class=\"p\">=</span> <span class=\"k\">true</span>\n                                                    <span class=\"nf\">setSupportZoom</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n\n                                                    <span class=\"n\">mixedContentMode</span> <span class=\"p\">=</span>\n                                                        <span class=\"nc\">WebSettings</span><span class=\"p\">.</span><span class=\"nc\">MIXED_CONTENT_COMPATIBILITY_MODE</span>\n                                                    <span class=\"nf\">setNetworkAvailable</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n                                                    <span class=\"n\">cacheMode</span> <span class=\"p\">=</span> <span class=\"nc\">WebSettings</span><span class=\"p\">.</span><span class=\"nc\">LOAD_DEFAULT</span>\n\n                                                    <span class=\"nf\">setSupportMultipleWindows</span><span class=\"p\">(</span><span class=\"k\">true</span><span class=\"p\">)</span>\n                                                <span class=\"p\">}</span>\n\n                                                <span class=\"n\">webChromeClient</span> <span class=\"p\">=</span> <span class=\"n\">chromeClient</span>\n                                                <span class=\"n\">webViewClient</span> <span class=\"p\">=</span> <span class=\"n\">client</span>\n                                            <span class=\"p\">}</span>\n                                            <span class=\"nf\">addView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">)</span>\n                                        <span class=\"p\">}</span>\n                                        <span class=\"n\">parentLayout</span>\n                                    <span class=\"p\">},</span>\n                                    <span class=\"n\">onRelease</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">parentFrame</span> <span class=\"p\">-&gt;</span>\n                                        <span class=\"p\">(</span><span class=\"n\">parentFrame</span><span class=\"p\">.</span><span class=\"n\">children</span><span class=\"p\">.</span><span class=\"nf\">first</span><span class=\"p\">()</span> <span class=\"k\">as</span><span class=\"p\">?</span> <span class=\"nc\">WebView</span><span class=\"p\">)</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span> <span class=\"n\">web</span> <span class=\"p\">-&gt;</span>\n                                            <span class=\"n\">parentFrame</span><span class=\"p\">.</span><span class=\"nf\">removeView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">)</span>\n                                        <span class=\"p\">}</span>\n                                    <span class=\"p\">}</span>\n                                <span class=\"p\">)</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2>어떤 식으로 분리할까?</h2>\n\n<p>함수를 분리하는 룰은 다양할 수 있다.</p>\n\n<ul>\n  <li>클린 코드 방식을 적용하여 함수는 하나의 역할과 맡는 이름을 가지도록 한다</li>\n  <li>선언형 UI에서 이야기하는 Stateful, Stateless를 이해한 분리</li>\n</ul>\n\n<p>클린 코드 방식으론 최대한 많이 나누고, 적절한 함수명을 써주는 것이 맞다. 하지만 선언형 UI를 작성하는 컴포즈이니 우린 선언형 UI 방식을 따라 Preview 가능한 형태로 만들어보도록 한다.</p>\n\n<p><br /></p>\n\n<h2>위 코드를 몇 가지로 나눠보자</h2>\n\n<p>Navigation을 활용하고 있으니 크게 몇 가지로 나눌 수 있는데, 필자가 일반적으로 분리하는 방식은 아래와 같다.</p>\n\n<ul>\n  <li>Screen : 화면 단위로 나눈다</li>\n  <li>Components : Screen에 맞는 Components</li>\n  <li>Design Components : 일반적인 디자인 시스템의 Components</li>\n</ul>\n\n<p>Screen은 화면인데 화면도 여러 개일 수 있다. Navigation을 포함하는 화면도 Screen이고, Navigation에 포함하는 Composable 역시 Screen이다.</p>\n\n<p>Screen에 포함하는 단위 몇 가지는 Components 단위를 합쳐서 만든 UI로 분리할 수 있다.</p>\n\n<p>그리고 마지막으로 Design Components는 Material design을 감싸 내부 UI를 구현하는 부분이다. 이 부분을 잘 나누면 팩토리처럼 합쳐서 하나의 화면 구성하는 것이 가능하다.</p>\n\n<p><br /></p>\n\n<h2>HomeScreen 분리</h2>\n\n<p>MainScreen에서 HomeScreen을 우선 분리해보았다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">Column</span> <span class=\"p\">{</span>\n       <span class=\"nc\">LazyColumn</span> <span class=\"p\">{</span>\n           <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n               <span class=\"nc\">Surface</span><span class=\"p\">(</span>\n                   <span class=\"n\">shape</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">shapes</span><span class=\"p\">.</span><span class=\"n\">small</span><span class=\"p\">,</span>\n               <span class=\"p\">)</span> <span class=\"p\">{</span>\n                   <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">editMode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                       <span class=\"nc\">Column</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">}</span>\n                   <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                       <span class=\"nc\">Column</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">}</span>\n                   <span class=\"p\">}</span>\n               <span class=\"p\">}</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n\n       <span class=\"nc\">Button</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"cm\">/* 생략 */</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"New\"</span><span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에 대한 Preview는 아래와 같은데, 적합하지 않은 Preview인데, 그냥 흰 화면에 하단 버튼 하나만 보이는 정도이다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_01.png\" alt=\"step_01\" /></p>\n\n<p>이제 이 코드를 기반으로 Preview 가능하도록 수정하는 방법을 이야기해 본다.</p>\n\n<p><br /></p>\n\n<h2>Stateful versus stateless</h2>\n\n<p>Compose에서 제공하는 공식 문서에서 Stateful과 Stateless에 대한 설명을 포함하고 있다.</p>\n\n<p><a href=\"https://developer.android.com/develop/ui/compose/state\">State and Jetpack Compose - 공식 문서</a></p>\n\n<p>Stateful과 Stateless를 통해 코드를 분리할 수 있는데,</p>\n\n<ul>\n  <li>Stateful\n    <ul>\n      <li>remember를 사용해 객체를 저장하는 Composable 포함</li>\n    </ul>\n  </li>\n  <li>stateless\n    <ul>\n      <li>외부에서 값을 변경하거나 이벤트로 전달할 수 있는 형태</li>\n    </ul>\n  </li>\n</ul>\n\n<p>stateful은 <code class=\"language-plaintext highlighter-rouge\">remember</code>를 포함하여 상태를 갖는 Composable 구성하기에 테스트하기 어렵다. 그래서 stateless 형태를 만들고, 외부에서 값을 전달하고, 필요한 event를 외부로 전달 받아 사용할 수 있도록 작업하는 것이다.</p>\n\n<p>그래서 보통은 3가지로 나누는 게 가능하다.</p>\n\n<ul>\n  <li>Stateful : ViewModel을 통해 값을 받거나, <code class=\"language-plaintext highlighter-rouge\">remember {}</code>를 통해 값을 임시 저장하는 부분</li>\n  <li>Stateless : 외부에서 주입하는 값에 따라 화면이 그려지고, 이벤트를 외부로 보낼 수 있는 함수</li>\n  <li>Preview : Stateless를 이용한 Preview를 처리</li>\n</ul>\n\n<p><br /></p>\n\n<h3>Stateful</h3>\n\n<p>stateful은 외부에서 viewModel을 통해 값을 remember로 감싸거나, 상태를 기억하도록 만드는게 주 목적이다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">val</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Event...</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>Stateless</h3>\n\n<p>stateless는 외부 값의 주입을 받을 수 있도록 작성한다.</p>\n\n<p>이렇게 해야 Preview를 처리할 수 있고, 재사용 가능한 형태도 만들 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">,</span> <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">LazyColumn</span> <span class=\"p\">{</span>\n       <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"p\">-&gt;</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span>\n               <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n               <span class=\"n\">style</span> <span class=\"p\">=</span> <span class=\"nc\">MaterialTheme</span><span class=\"p\">.</span><span class=\"n\">typography</span><span class=\"p\">.</span><span class=\"n\">bodyMedium</span><span class=\"p\">,</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n                    <span class=\"p\">.</span><span class=\"nf\">clickable</span><span class=\"p\">(</span><span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이를 도식화하면 아래와 같다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/udf-hello-screen.png\" alt=\"udf-hello-screen\" /></p>\n\n<p>stateless로 코드를 작성한다는 것은 아래와 같은 장점을 가진다.</p>\n\n<p>이 내용은 구글 공식 문서에 제공하는 내용으로 원 문서를 참고하면 좋다.</p>\n\n<ul>\n  <li>단일 정보 소스: 상태를 복제하는 대신 옮겼기 때문에 정보 소스가 하나만 있습니다. 버그 방지에 도움이 됩니다.</li>\n  <li>캡슐화됨: 스테이트풀(Stateful) 컴포저블 만 상태를 수정할 수 있습니다. 철저히 내부적 속성입니다.</li>\n  <li>공유 가능함: 호이스팅한 상태를 여러 컴포저블과 공유할 수 있습니다. 다른 컴포저블에서 name을 읽으려는 경우 호이스팅을 통해 그렇게 할 수 있습니다.</li>\n  <li>가로채기 가능함: 스테이트리스(Stateless) 컴포저블의 호출자는 상태를 변경하기 전에 이벤트를 무시할지 수정할지 결정할 수 있습니다.</li>\n  <li>분리됨: 스테이트리스(Stateless) 컴포저블의 상태가 저장될 수 있습니다. 액세스할 수 있습니다 예를 들어 이제 name를 ViewModel로 이동할 수 있습니다.</li>\n</ul>\n\n<p><br /></p>\n\n<h3>다시 돌아와서</h3>\n\n<p>이전에 작성한 HomeScreen 함수에 대해 아래와 같이 Stateful을 작성한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">(</span><span class=\"nf\">emptyList</span><span class=\"p\">()))</span> <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span>\n       <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">,</span>\n       <span class=\"n\">onEvent</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이전에 HomeScreen에서는 <code class=\"language-plaintext highlighter-rouge\">remember {}</code> 부분을 지우고 외부에서 주입받을 수 있도록 parameters로 변경한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeScreen</span><span class=\"p\">(</span>\n   <span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">,</span>\n   <span class=\"n\">onEvent</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">listItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 생략</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이렇게 수정하면서 Preview가 가능해졌고, 좀 더 유연하게 사용할 수 있게 되었다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span>\n   <span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">listItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span>\n           <span class=\"nc\">ListItem</span><span class=\"p\">(</span>\n               <span class=\"nf\">listOf</span><span class=\"p\">(</span>\n                   <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span>\n                       <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"message\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n                   <span class=\"p\">),</span>\n                   <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">(</span>\n                       <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n                   <span class=\"p\">),</span>\n               <span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeScreen</span><span class=\"p\">(</span>\n       <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">listItem</span><span class=\"p\">,</span>\n       <span class=\"n\">onEvent</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">listItem</span> <span class=\"p\">=</span> <span class=\"n\">it</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에 대한 Preview는 아래와 같다.</p>\n\n<p>한 번에 editMode와 viewMode를 확인할 수 있다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_02.png\" alt=\"step_02\" /></p>\n\n<p><br /></p>\n\n<h2>Preview의 장점</h2>\n\n<p>Preview를 사용함으로써 다양한 기기 사이즈의 Preview를 바로 확인할 수 있다.</p>\n\n<ul>\n  <li>테블릿, 폴더블, 일반 기기, 작은 기기 등</li>\n</ul>\n\n<p>코드 상황에 따라 빠른 테스트도 가능하다.</p>\n\n<p><br /></p>\n\n<h2>Screen에 맞는 Components 분리</h2>\n\n<p>Screen을 분리하더라도 여전히 코드 양이 많다. Screen 용 Components를 분리하면 상황에 맞는 코드를 좀 더 빠르게 확인할 수 있다.</p>\n\n<p>여기서는 크게 2개를 나눌 수 있다.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">EditMode</th>\n      <th style=\"text-align: center\">ViewMode</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">값 입력 및 삭제</td>\n      <td style=\"text-align: center\">수정 및 View</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_01.png\" alt=\"step_03_01\" /></td>\n      <td style=\"text-align: center\"><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_02.png\" alt=\"step_03_02\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<p><br /></p>\n\n<h3>EditMode</h3>\n\n<p>분리하는 건 이전과 동일한데, 여기선 stateful이 필요하진 않아 stateless를 기준으로 분리한다.</p>\n\n<p>외부 주입 기준이 HomeScreen에서 값을 저장하고, event를 처리하고 있기 때문에 HomeItemEdit에서는 별도로 처리할 부분이 없다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeItemEdit</span><span class=\"p\">(</span>\n   <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditModeOff</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">onCancel</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Column</span><span class=\"p\">(</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"kd\">var</span> <span class=\"py\">changeItem</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n       <span class=\"nc\">TextField</span><span class=\"p\">(</span>\n           <span class=\"n\">value</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">onValueChange</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">new</span> <span class=\"p\">-&gt;</span> <span class=\"n\">changeItem</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">new</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">()</span>\n       <span class=\"p\">)</span>\n       <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Button</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditModeOff</span><span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n           <span class=\"nc\">Button</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onCancel</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"X\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>EditMode Preview</h3>\n\n<p>EditMode에 대해 Stateless로 작업하였기에 아래와 같이 바로 테스트 가능한 형태를 만들 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeItemEdit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">item</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span><span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n   <span class=\"nc\">HomeItemEdit</span><span class=\"p\">(</span>\n       <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">,</span>\n       <span class=\"n\">onEditModeOff</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"n\">changeItem</span> <span class=\"p\">-&gt;</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">changeItem</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n               <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">false</span><span class=\"p\">,</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">},</span>\n       <span class=\"n\">onCancel</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span>\n       <span class=\"p\">},</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Preview는 아래와 같다. 이때의 장점은 마우스를 통해 런타임 체크도 가능하다는 점이다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_03.png\" alt=\"step_03_03\" /></p>\n\n<p><br /></p>\n\n<h3>ViewMode</h3>\n\n<p>ViewMode 역시 동일한 방식으로 Stateless로 작성한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeItemView</span><span class=\"p\">(</span>\n   <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">onRemove</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditMode</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Column</span><span class=\"p\">(</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"nc\">Color</span><span class=\"p\">.</span><span class=\"nc\">Gray</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"mf\">0.3f</span><span class=\"p\">))</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span>\n               <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n               <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n           <span class=\"p\">)</span>\n\n           <span class=\"nc\">IconButton</span><span class=\"p\">(</span>\n               <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onRemove</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n           <span class=\"p\">)</span> <span class=\"p\">{</span>\n               <span class=\"nc\">Icon</span><span class=\"p\">(</span><span class=\"n\">painter</span> <span class=\"p\">=</span> <span class=\"nf\">painterResource</span><span class=\"p\">(</span><span class=\"n\">id</span> <span class=\"p\">=</span> <span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">drawable</span><span class=\"p\">.</span><span class=\"n\">baseline_close_24</span><span class=\"p\">),</span> <span class=\"n\">contentDescription</span> <span class=\"p\">=</span> <span class=\"s\">\"remove\"</span><span class=\"p\">)</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n\n       <span class=\"nc\">Button</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditMode</span><span class=\"p\">()</span> <span class=\"p\">},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">.</span><span class=\"nf\">fillMaxWidth</span><span class=\"p\">().</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">horizontal</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">).</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">top</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">,</span> <span class=\"n\">bottom</span> <span class=\"p\">=</span> <span class=\"mi\">16</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"edit\"</span><span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>ViewMode - Preview</h3>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeItemView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kd\">var</span> <span class=\"py\">item</span> <span class=\"k\">by</span> <span class=\"nf\">remember</span> <span class=\"p\">{</span>\n       <span class=\"nf\">mutableStateOf</span><span class=\"p\">(</span>\n  <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">.</span><span class=\"nc\">NEW</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"message~!!!!\\naaaa\"</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"nc\">HomeItemView</span><span class=\"p\">(</span>\n       <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">,</span>\n       <span class=\"n\">onRemove</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"c1\">// Do nothing</span>\n       <span class=\"p\">},</span>\n       <span class=\"n\">onEditMode</span> <span class=\"p\">=</span> <span class=\"p\">{</span>\n           <span class=\"n\">item</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"nf\">copy</span><span class=\"p\">(</span>\n               <span class=\"n\">editMode</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n           <span class=\"p\">)</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>View에서는 event 처리에 대한 코드가 별거 없으니 가볍게 넘어갈 수 있다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_03_04.png\" alt=\"step_03_04\" /></p>\n\n<p><br /></p>\n\n<h2>Tip</h2>\n\n<p>Stateless에서 Stateful 코드를 부르면 결국 stateless로 작성하는 것이 크게 의미가 없단 소리다.</p>\n\n<p>당연히 이렇게 작성할 일은 없고, stateless에서는 stateless로 작성한 코드를 부르는 것이 당연하지만 맞는 것이다.</p>\n\n<p><br /></p>\n\n<h2>몇 가지 알아두면 좋을 것</h2>\n\n<h3>함수는 어디까지 나누는 게 맞을까?</h3>\n\n<p>아래와 같이 무작정 많이 나누는 것이 올바를 것인가?</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n* Button의 재사용이 불가, Save 전용\n* 함수를 나눈다는 장점은 있지만 필요할까?\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">SaveButton</span><span class=\"p\">(</span>\n   <span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onEditModeOff</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">:</span> <span class=\"nc\">ListItem</span><span class=\"p\">.</span><span class=\"nc\">Item</span><span class=\"p\">)</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"nf\">onEditModeOff</span><span class=\"p\">(</span><span class=\"n\">changeItem</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">SaveText</span><span class=\"p\">()</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n* Text 하나 뿐인데 굳이...?\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">SaveText</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드에서는 Button에 포함하는 <code class=\"language-plaintext highlighter-rouge\">SaveText</code>까지 함수로 나누었다. Button에는 TextStyle과 TextColor까지 포함하고 있다. 별도의 스타일을 지정하지 않으면 상위룰을 따라가게 된다.</p>\n\n<p>그래서 굳이 이렇게까지 나눌 필요는 없다.</p>\n\n<p>이보다는 아래와 같이 나누는 것이 더 좋다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cm\">/**\n* Button을 재사용할 수 있도록 수정\n*/</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**\n* 사용하는 경우\n*/</span>\n<span class=\"nc\">Row</span> <span class=\"p\">{</span>\n   <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"p\">},</span>\n       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n   <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{</span> <span class=\"p\">},</span>\n       <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"x\"</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n           <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Text만을 가지는 Button을 기본으로 만들고, 이를 활용한 Preview 2가지를 해보면 아래와 같다.</p>\n\n<p><img src=\"/images/posts/2024/Android-Compose-Split-Funcation/step_04_01.png\" alt=\"step_04_01\" /></p>\n\n<p><br /></p>\n\n<h3>Modifier의 위치</h3>\n\n<p>Modifier는 권장으론 필수 값 바로 다음에 Modifier가 오도록 적용해야 한다.</p>\n\n<p>아래의 코드는 옵션 값 바로 다음에 Modifier를 적용했고, 필수 값은 맨 아래에 두었다. 권장하는 순서와 하나도 맞지 않다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이를 권장 가이드대로 수정하면 아래와 같이 수정되어야 한다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3>Modifier를 적용할 때는</h3>\n\n<p>Modifier를 사용할 때는 함수의 파라미터 순서 그대로 사용할 수도 있지만 개인적으론 Modifier를 최 하단으로 이동시켜 사용하고 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Preview</span><span class=\"p\">(</span><span class=\"n\">showBackground</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n<span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">PreviewHomeButton</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Row</span> <span class=\"p\">{</span>\n       <span class=\"cm\">/* 필자가 추천하는 위치 */</span>\n       <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"Save\"</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n\n       <span class=\"cm\">/* 일반적인 위치? */</span>\n       <span class=\"nc\">HomeButton</span><span class=\"p\">(</span>\n           <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">weight</span><span class=\"p\">(</span><span class=\"mf\">1f</span><span class=\"p\">)</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"p\">=</span> <span class=\"mi\">10</span><span class=\"p\">.</span><span class=\"n\">dp</span><span class=\"p\">),</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"s\">\"x\"</span><span class=\"p\">,</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>개인적으론 Modifier 관련 설정이 계속 길어지다 보니 하단으로 내려 사용하고 있다.</p>\n\n<p><br /></p>\n\n<h3>Container에 따른 Modifier 위치는?</h3>\n\n<p>외부에서 바라볼 때는 당연하게도 container에 modifier가 적용될 것으로 기대할 수 있다. 하지만 아래와 같은 코드라면?</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nf\">HomeButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span> <span class=\"p\">=</span> <span class=\"p\">{},</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>이 코드는 적합하지 않다. 어느 누구도 Text에 modifier가 적용될 거라고 생각하지 못하기 때문이다.</p>\n\n<p><br /></p>\n\n<h2>디자인 컴포넌트</h2>\n\n<p>디자인 컴포넌트는 꼭 필수는 아니지만 있는 것이 좋다. 회사마다 디자인 시스템을 가지고 있는 경우도 있겠지만, 아닌 경우도 있을 것이다. 아닌 경우라고 하더라도 공통화를 해두면 나중에 수정하기 좋아진다.</p>\n\n<ul>\n  <li>Text\n    <ul>\n      <li>Text를 앱 내의 공통 Components로 작성할 경우 TextStyle 등을 한 번에 적용하는 것이 가능</li>\n    </ul>\n  </li>\n  <li>Button\n    <ul>\n      <li>디자인 가이드에 따라 Button을 공통화하고, 디자인을 적용할 수 있다(사용의 편리)</li>\n    </ul>\n  </li>\n  <li>TextField\n    <ul>\n      <li>디자인 가이드에 따라 TextField을 공통화</li>\n    </ul>\n  </li>\n</ul>\n\n<p>와 같은 정도로 분리할 수 있을 것이다.</p>\n\n<p>여기서는 위에 Tip으로 작성한 Button 부분을 디자인 컴포넌트로 분리하고 이를 적용하는 방법을 적어본다.</p>\n\n<p><br /></p>\n\n<h3>Button Components</h3>\n\n<p>공용 버튼 컴포넌트는 아래와 같이 작성할 수 있다.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Composable</span>\n<span class=\"k\">fun</span> <span class=\"nf\">ExampleButton</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n   <span class=\"n\">onClick</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"p\">-&gt;</span> <span class=\"nc\">Unit</span><span class=\"p\">,</span>\n   <span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"nc\">Modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span><span class=\"p\">,</span>\n   <span class=\"n\">enabled</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">,</span>\n   <span class=\"n\">contentPadding</span><span class=\"p\">:</span> <span class=\"nc\">PaddingValues</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nc\">ContentPadding</span><span class=\"p\">,</span>\n   <span class=\"n\">textStyle</span><span class=\"p\">:</span> <span class=\"nc\">TextStyle</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"n\">defaultTextStyle</span><span class=\"p\">,</span>\n   <span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nc\">ExampleButtonColors</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nf\">filledButtonColors</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"nc\">Button</span><span class=\"p\">(</span>\n       <span class=\"n\">onClick</span> <span class=\"p\">=</span> <span class=\"n\">onClick</span><span class=\"p\">,</span>\n       <span class=\"n\">colors</span> <span class=\"p\">=</span> <span class=\"nc\">ButtonDefaults</span><span class=\"p\">.</span><span class=\"nf\">buttonColors</span><span class=\"p\">(</span>\n           <span class=\"n\">containerColor</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">containerColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n           <span class=\"n\">contentColor</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">contentColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n       <span class=\"p\">),</span>\n       <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"n\">modifier</span>\n           <span class=\"p\">.</span><span class=\"nf\">defaultMinSize</span><span class=\"p\">(</span><span class=\"n\">minHeight</span> <span class=\"p\">=</span> <span class=\"nc\">ExampleButtonDefaults</span><span class=\"p\">.</span><span class=\"nc\">MinHeight</span><span class=\"p\">)</span>\n   <span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"nc\">Text</span><span class=\"p\">(</span>\n           <span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">text</span><span class=\"p\">,</span>\n           <span class=\"n\">style</span> <span class=\"p\">=</span> <span class=\"n\">textStyle</span><span class=\"p\">,</span>\n           <span class=\"n\">color</span> <span class=\"p\">=</span> <span class=\"n\">colors</span><span class=\"p\">.</span><span class=\"nf\">contentColor</span><span class=\"p\">().</span><span class=\"n\">value</span><span class=\"p\">,</span>\n           <span class=\"n\">modifier</span> <span class=\"p\">=</span> <span class=\"nc\">Modifier</span>\n               <span class=\"p\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"n\">contentPadding</span><span class=\"p\">)</span>\n       <span class=\"p\">)</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h4>Parameters 종류</h4>\n\n<p>Parameters는 크게 2개로 나뉘는데</p>\n\n<ul>\n  <li>필수 값 : 함수에 꼭 주입해야 할 정보</li>\n  <li>옵션 값 : 코틀린에 기본 값을 정의한다.</li>\n</ul>\n\n<p>이 옵션 값에도 2 가지로 나뉜다.</p>\n\n<ul>\n  <li>옵션 - inline : 누가 보아도 바로 확인할 수 있는 true/false 와 같은 정보</li>\n  <li>옵션 - Defaults : 옵션 Defaults는 내부에서 정의한 값, 높이나 스타일이나 padding 등의 정보</li>\n</ul>\n\n<p>이를 잘 반영해 디자인 시스템을 분리할 수 있다.</p>\n\n<p><br /></p>\n\n<h2>마무리</h2>\n\n<p>이 글에서는 MainScreen에서 작성한 코드를 HomeScreen &gt; HomeScreen에 대한 Components &gt; 디자인 Components까지 분리하는 과정을 담았다.</p>\n\n<p>꼭 필요한 부분을 포함하여 작성하였고, 다음 글에서는 CompositionLocal과 관련한 글을 이어서 작성한다.</p>\n\n",
        "contentSnippet": "Compose 함수는 어떠한 조건을 사용해 나누는 것이 좋을까? 고려하면 좋을 것은 무엇일까?\n스크린으로 나눈다?\n컴포넌트로 나눈다?\n무조건 많이 나눈다?\n답은 없지만 최소한 어떤 규칙을 가지고 나눌 수 있을지 고민하고 적용한 부분을 정리해 본다.\n\n이 글에서 알아볼 내용\n코드의 분리 관점을 무엇으로 볼지를 고민해 본 글이다.\n글에 오류가 있을 수 있으니 참고만 하길\n\n발표 자료\n\n\n\n\n\n풀 코드를 통해 함수를 분리해 보자\n작성한 코드는 @Composalbe MainScreen 함수 하나로 작성하였다.\n이 코드는 총 311줄로 아래와 같은 단점이 생긴다.\n함수를 분리하지 않는 경우 새로운 Screen이 추가되면 기존 코드에 이어질 수 있다.\n기존 코드의 수정도 어렵다.\n\nGithub - MainActivityBackup.kt 전체 코드\n이 코드는 어디까지나 분리 없이, 설명하기 위한 방식을 선택하기 위해 작성한 코드이다.\n\nclass MainActivityBackup : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            MyApplicationTheme {\n                MainScreen(\n                    list = listOf(\n                        NavigationSample(\n                            title = \"HOME\",\n                            icon = R.drawable.baseline_home_24,\n                            trigger = NavigationSample.Trigger.HOME,\n                        ),\n                        NavigationSample(\n                            title = \"WEB\",\n                            icon = R.drawable.baseline_web_24,\n                            trigger = NavigationSample.Trigger.WEB,\n                        ),\n                    ),\n                )\n            }\n        }\n    }\n}\n\n/**\n  * MainScreen의 전체 코드\n  **/\n@SuppressLint(\"SetJavaScriptEnabled\")\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nprivate fun MainScreen(\n    list: List<NavigationSample>,\n    navController: NavHostController = rememberNavController(),\n) {\n    val navBackStackEntry by navController.currentBackStackEntryAsState() // Navigation 활용을 위한 코드\n    val currentDestination = navBackStackEntry?.destination\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(text = currentDestination?.route ?: \"\") },\n            )\n        },\n        bottomBar = {\n            NavigationBar {\n                list.forEach { screen ->\n                    NavigationBarItem(\n                        label = { Text(text = screen.title) },\n                        selected = currentDestination?.hierarchy?.any { it.route == screen.trigger.name } == true,\n                        icon = { Icon(painter = painterResource(id = screen.icon), contentDescription = screen.title) },\n                        onClick = {\n                            navController.navigate(screen.trigger.name) {\n                                popUpTo(navController.graph.findStartDestination().id) {\n                                    saveState = true\n                                }\n                                launchSingleTop = true\n                                restoreState = true\n                            }\n                        }\n                    )\n                }\n            }\n        },\n        modifier = Modifier.fillMaxSize()\n    ) {\n        Box(\n            modifier = Modifier.padding(it)\n        ) {\n            val context = LocalContext.current\n            CompositionLocalProvider(LocalWebOwner provides WebView(context)) {\n                NavHost(\n                    navController = navController,\n                    startDestination = NavigationSample.Trigger.HOME.name,\n                    enterTransition = { EnterTransition.None },\n                    exitTransition = { ExitTransition.None },\n                ) {\n                    composable(route = NavigationSample.Trigger.HOME.name) {\n                        var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n                        Column {\n                            LazyColumn(\n                                contentPadding = PaddingValues(20.dp),\n                                verticalArrangement = Arrangement.spacedBy(10.dp),\n                                modifier = Modifier.fillMaxWidth().weight(1f)\n                            ) {\n                                items(listItem.items) { item ->\n                                    Surface(shape = MaterialTheme.shapes.small) {\n                                        if (item.editMode) {\n                                            Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {\n                                                var changeItem by remember { mutableStateOf(item) }\n                                                TextField(\n                                                    value = changeItem.text,\n                                                    onValueChange = { new -> changeItem = changeItem.copy(text = new) },\n                                                    modifier = Modifier.fillMaxWidth()\n                                                )\n\n                                                Row {\n                                                    Button(\n                                                        onClick = {\n                                                            listItem = listItem.copy(\n                                                                items = listItem.items.map { listItem ->\n                                                                    if (listItem.index == item.index) {\n                                                                        changeItem.copy(editMode = false)\n                                                                    } else {\n                                                                        listItem\n                                                                    }\n                                                                },\n                                                            )\n                                                        },\n                                                        modifier = Modifier.weight(1f)\n                                                    ) { Text(text = \"Save\") }\n\n                                                    Button(\n                                                        onClick = { listItem = listItem.copy(items = listItem.items.toMutableList().also { newList -> newList.remove(item) }) },\n                                                        modifier = Modifier.weight(1f).padding(start = 10.dp)\n                                                    ) { Text(text = \"X\") }\n                                                }\n                                            }\n                                        } else {\n                                            Column(modifier = Modifier.fillMaxWidth().background(color = Color.Gray.copy(0.3f))) {\n                                                Row {\n                                                    Text(\n                                                        text = item.text,\n                                                        modifier = Modifier.weight(1f).padding(horizontal = 16.dp).padding(top = 16.dp)\n                                                    )\n\n                                                    IconButton(onClick = { listItem = listItem.copy(items = listItem.items.toMutableList().also { newList -> newList.remove(item) }) }) {\n                                                        Icon(painter = painterResource(id = R.drawable.baseline_close_24), contentDescription = \"remove\")\n                                                    }\n                                                }\n\n                                                Button(\n                                                    onClick = {\n                                                        listItem = listItem.copy(\n                                                            items = listItem.items.map { listItem ->\n                                                                if (listItem == item) {\n                                                                    listItem.copy(editMode = true)\n                                                                } else {\n                                                                    listItem\n                                                                }\n                                                            },\n                                                        )\n                                                    },\n                                                    modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(top = 10.dp, bottom = 16.dp)\n                                                ) {\n                                                    Text(text = \"edit\")\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            Button(\n                                onClick = {\n                                    listItem = listItem.copy(items = listItem.items.toMutableList().also { list -> list.add(ListItem.Item(index = list.size, text = \"\", editMode = true)) })\n                                },\n                                modifier = Modifier.padding(20.dp)\n                            ) {\n                                Text(text = \"New\")\n                            }\n                        }\n                    }\n\n                    composable(route = NavigationSample.Trigger.WEB.name) {\n                        val chromeClient = CustomWebChromeClient()\n                        val client = CustomWebViewClient()\n\n                        val webView = LocalWebOwner.current\n\n                        var url by remember { mutableStateOf(\"https://thdev.tech/\") }\n\n                        Column(modifier = Modifier.fillMaxSize()) {\n                            TextField(\n                                value = url,\n                                onValueChange = { new -> url = new },\n                                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),\n                                keyboardActions = KeyboardActions(onSearch = { webView?.loadUrl(url) }),\n                                modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(bottom = 8.dp)\n                            )\n\n                            BoxWithConstraints(modifier = Modifier.weight(1f)) {\n                                val width = if (constraints.hasFixedWidth) { ViewGroup.LayoutParams.MATCH_PARENT } else { ViewGroup.LayoutParams.WRAP_CONTENT }\n                                val height = if (constraints.hasFixedHeight) { ViewGroup.LayoutParams.MATCH_PARENT } else { ViewGroup.LayoutParams.WRAP_CONTENT }\n                                val layoutParams = FrameLayout.LayoutParams(width, height)\n\n                                LaunchedEffect(key1 = Unit) { webView?.loadUrl(url) }\n\n                                BackHandler {\n                                    if (webView?.canGoBack() == true) {\n                                        webView.goBack()\n                                    }\n                                }\n\n                                AndroidView(\n                                    factory = {\n                                        val parentLayout = FrameLayout(context).apply {\n                                            val web = webView ?: WebView(context)\n\n                                            web.apply {\n                                                this.layoutParams = layoutParams\n                                                settings.run {\n                                                    javaScriptEnabled = true\n                                                    defaultTextEncodingName = \"UTF-8\"\n                                                    loadWithOverviewMode = true\n                                                    useWideViewPort = true\n                                                    setSupportZoom(true)\n\n                                                    mixedContentMode =\n                                                        WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE\n                                                    setNetworkAvailable(true)\n                                                    cacheMode = WebSettings.LOAD_DEFAULT\n\n                                                    setSupportMultipleWindows(true)\n                                                }\n\n                                                webChromeClient = chromeClient\n                                                webViewClient = client\n                                            }\n                                            addView(web)\n                                        }\n                                        parentLayout\n                                    },\n                                    onRelease = { parentFrame ->\n                                        (parentFrame.children.first() as? WebView)?.let { web ->\n                                            parentFrame.removeView(web)\n                                        }\n                                    }\n                                )\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\n어떤 식으로 분리할까?\n함수를 분리하는 룰은 다양할 수 있다.\n클린 코드 방식을 적용하여 함수는 하나의 역할과 맡는 이름을 가지도록 한다\n선언형 UI에서 이야기하는 Stateful, Stateless를 이해한 분리\n클린 코드 방식으론 최대한 많이 나누고, 적절한 함수명을 써주는 것이 맞다. 하지만 선언형 UI를 작성하는 컴포즈이니 우린 선언형 UI 방식을 따라 Preview 가능한 형태로 만들어보도록 한다.\n\n위 코드를 몇 가지로 나눠보자\nNavigation을 활용하고 있으니 크게 몇 가지로 나눌 수 있는데, 필자가 일반적으로 분리하는 방식은 아래와 같다.\nScreen : 화면 단위로 나눈다\nComponents : Screen에 맞는 Components\nDesign Components : 일반적인 디자인 시스템의 Components\nScreen은 화면인데 화면도 여러 개일 수 있다. Navigation을 포함하는 화면도 Screen이고, Navigation에 포함하는 Composable 역시 Screen이다.\nScreen에 포함하는 단위 몇 가지는 Components 단위를 합쳐서 만든 UI로 분리할 수 있다.\n그리고 마지막으로 Design Components는 Material design을 감싸 내부 UI를 구현하는 부분이다. 이 부분을 잘 나누면 팩토리처럼 합쳐서 하나의 화면 구성하는 것이 가능하다.\n\nHomeScreen 분리\nMainScreen에서 HomeScreen을 우선 분리해보았다.\n\n@Composable\ninternal fun HomeScreen() {\n    var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   Column {\n       LazyColumn {\n           items(listItem.items) { item ->\n               Surface(\n                   shape = MaterialTheme.shapes.small,\n               ) {\n                   if (item.editMode) {\n                       Column() { /* 생략 */ }\n                   } else {\n                       Column() { /* 생략 */ }\n                   }\n               }\n           }\n       }\n\n       Button(\n           onClick = { /* 생략 */ },\n           modifier = Modifier\n               .padding(20.dp)\n       ) {\n           Text(text = \"New\")\n       }\n   }\n}\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeScreen() {\n   HomeScreen()\n}\n\n\n이 코드에 대한 Preview는 아래와 같은데, 적합하지 않은 Preview인데, 그냥 흰 화면에 하단 버튼 하나만 보이는 정도이다.\n\n이제 이 코드를 기반으로 Preview 가능하도록 수정하는 방법을 이야기해 본다.\n\nStateful versus stateless\nCompose에서 제공하는 공식 문서에서 Stateful과 Stateless에 대한 설명을 포함하고 있다.\nState and Jetpack Compose - 공식 문서\nStateful과 Stateless를 통해 코드를 분리할 수 있는데,\nStateful\n    \nremember를 사용해 객체를 저장하는 Composable 포함\nstateless\n    \n외부에서 값을 변경하거나 이벤트로 전달할 수 있는 형태\nstateful은 remember를 포함하여 상태를 갖는 Composable 구성하기에 테스트하기 어렵다. 그래서 stateless 형태를 만들고, 외부에서 값을 전달하고, 필요한 event를 외부로 전달 받아 사용할 수 있도록 작업하는 것이다.\n그래서 보통은 3가지로 나누는 게 가능하다.\nStateful : ViewModel을 통해 값을 받거나, remember {}를 통해 값을 임시 저장하는 부분\nStateless : 외부에서 주입하는 값에 따라 화면이 그려지고, 이벤트를 외부로 보낼 수 있는 함수\nPreview : Stateless를 이용한 Preview를 처리\n\nStateful\nstateful은 외부에서 viewModel을 통해 값을 remember로 감싸거나, 상태를 기억하도록 만드는게 주 목적이다.\n\n@Composable\ninternal fun HomeScreen() {\n   val listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   HomeScreen(listItem) {\n    // Event...\n   }\n}\n\n\n\nStateless\nstateless는 외부 값의 주입을 받을 수 있도록 작성한다.\n이렇게 해야 Preview를 처리할 수 있고, 재사용 가능한 형태도 만들 수 있다.\n\n@Composable\ninternal fun HomeScreen(listItem: ListItem, onClick: () -> Unit) {\n   LazyColumn {\n       items(listItem.items) { item ->\n           Text(\n               text = item.text,\n               style = MaterialTheme.typography.bodyMedium,\n               modifier = Modifier\n                    .clickable(onClick = onClick)\n           )\n       }\n   }\n}\n\n\n이를 도식화하면 아래와 같다.\n\nstateless로 코드를 작성한다는 것은 아래와 같은 장점을 가진다.\n이 내용은 구글 공식 문서에 제공하는 내용으로 원 문서를 참고하면 좋다.\n단일 정보 소스: 상태를 복제하는 대신 옮겼기 때문에 정보 소스가 하나만 있습니다. 버그 방지에 도움이 됩니다.\n캡슐화됨: 스테이트풀(Stateful) 컴포저블 만 상태를 수정할 수 있습니다. 철저히 내부적 속성입니다.\n공유 가능함: 호이스팅한 상태를 여러 컴포저블과 공유할 수 있습니다. 다른 컴포저블에서 name을 읽으려는 경우 호이스팅을 통해 그렇게 할 수 있습니다.\n가로채기 가능함: 스테이트리스(Stateless) 컴포저블의 호출자는 상태를 변경하기 전에 이벤트를 무시할지 수정할지 결정할 수 있습니다.\n분리됨: 스테이트리스(Stateless) 컴포저블의 상태가 저장될 수 있습니다. 액세스할 수 있습니다 예를 들어 이제 name를 ViewModel로 이동할 수 있습니다.\n\n다시 돌아와서\n이전에 작성한 HomeScreen 함수에 대해 아래와 같이 Stateful을 작성한다.\n\n@Composable\ninternal fun HomeScreen() {\n   var listItem by remember { mutableStateOf(ListItem(emptyList())) }\n\n   HomeScreen(\n       listItem = listItem,\n       onEvent = {\n           listItem = it\n       }\n   )\n}\n\n\n이전에 HomeScreen에서는 remember {} 부분을 지우고 외부에서 주입받을 수 있도록 parameters로 변경한다.\n\n@Composable\nprivate fun HomeScreen(\n   listItem: ListItem,\n   onEvent: (listItem: ListItem) -> Unit,\n) {\n    // 생략\n}\n\n\n이렇게 수정하면서 Preview가 가능해졌고, 좀 더 유연하게 사용할 수 있게 되었다.\n\n@Preview(\n   showBackground = true,\n)\n@Composable\nprivate fun PreviewHomeScreen() {\n   var listItem by remember {\n       mutableStateOf(\n           ListItem(\n               listOf(\n                   ListItem.Item(\n                       index = 0,\n                       text = \"message\",\n                       editMode = false,\n                   ),\n                   ListItem.Item(\n                       index = 1,\n                       text = \"\",\n                       editMode = true,\n                   ),\n               )\n           )\n       )\n   }\n\n   HomeScreen(\n       listItem = listItem,\n       onEvent = {\n           listItem = it\n       }\n   )\n}\n\n\n이 코드에 대한 Preview는 아래와 같다.\n한 번에 editMode와 viewMode를 확인할 수 있다.\n\n\nPreview의 장점\nPreview를 사용함으로써 다양한 기기 사이즈의 Preview를 바로 확인할 수 있다.\n테블릿, 폴더블, 일반 기기, 작은 기기 등\n코드 상황에 따라 빠른 테스트도 가능하다.\n\nScreen에 맞는 Components 분리\nScreen을 분리하더라도 여전히 코드 양이 많다. Screen 용 Components를 분리하면 상황에 맞는 코드를 좀 더 빠르게 확인할 수 있다.\n여기서는 크게 2개를 나눌 수 있다.\nEditMode\n      ViewMode\n    \n값 입력 및 삭제\n      수정 및 View\n    \n\n      \n    \n\nEditMode\n분리하는 건 이전과 동일한데, 여기선 stateful이 필요하진 않아 stateless를 기준으로 분리한다.\n외부 주입 기준이 HomeScreen에서 값을 저장하고, event를 처리하고 있기 때문에 HomeItemEdit에서는 별도로 처리할 부분이 없다.\n\n@Composable\ninternal fun HomeItemEdit(\n   item: ListItem.Item,\n   onEditModeOff: (changeItem: ListItem.Item) -> Unit,\n   onCancel: () -> Unit,\n) {\n   Column(\n       modifier = Modifier.fillMaxWidth().padding(16.dp)\n   ) {\n       var changeItem by remember(item) { mutableStateOf(item) }\n       TextField(\n           value = changeItem.text,\n           onValueChange = { new -> changeItem = changeItem.copy(text = new) },\n           modifier = Modifier.fillMaxWidth()\n       )\n       Row {\n           Button(\n               onClick = { onEditModeOff(changeItem) },\n               modifier = Modifier.weight(1f)\n           ) { Text(text = \"Save\") }\n\n           Button(\n               onClick = { onCancel() },\n               modifier = Modifier.weight(1f).padding(start = 10.dp)\n           ) { Text(text = \"X\") }\n       }\n   }\n}\n\n\n\nEditMode Preview\nEditMode에 대해 Stateless로 작업하였기에 아래와 같이 바로 테스트 가능한 형태를 만들 수 있다.\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeItemEdit() {\n   var item by remember {\n       mutableStateOf(ListItem.Item.NEW)\n   }\n   HomeItemEdit(\n       item = item,\n       onEditModeOff = { changeItem ->\n           item = changeItem.copy(\n               editMode = false,\n           )\n       },\n       onCancel = {\n           item = ListItem.Item.NEW\n       },\n   )\n}\n\n\nPreview는 아래와 같다. 이때의 장점은 마우스를 통해 런타임 체크도 가능하다는 점이다.\n\n\nViewMode\nViewMode 역시 동일한 방식으로 Stateless로 작성한다.\n\n@Composable\ninternal fun HomeItemView(\n   item: ListItem.Item,\n   onRemove: () -> Unit,\n   onEditMode: () -> Unit,\n) {\n   Column(\n       modifier = Modifier.fillMaxWidth().background(color = Color.Gray.copy(0.3f))\n   ) {\n       Row {\n           Text(\n               text = item.text,\n               modifier = Modifier.weight(1f).padding(horizontal = 16.dp).padding(top = 16.dp)\n           )\n\n           IconButton(\n               onClick = { onRemove() },\n           ) {\n               Icon(painter = painterResource(id = R.drawable.baseline_close_24), contentDescription = \"remove\")\n           }\n       }\n\n       Button(\n           onClick = { onEditMode() },\n           modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp).padding(top = 10.dp, bottom = 16.dp)\n       ) {\n           Text(text = \"edit\")\n       }\n   }\n}\n\n\n\nViewMode - Preview\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeItemView() {\n   var item by remember {\n       mutableStateOf(\n  ListItem.Item.NEW.copy(text = \"message~!!!!\\naaaa\")\n   )\n   }\n\n   HomeItemView(\n       item = item,\n       onRemove = {\n           // Do nothing\n       },\n       onEditMode = {\n           item = item.copy(\n               editMode = true,\n           )\n       }\n   )\n}\n\n\nView에서는 event 처리에 대한 코드가 별거 없으니 가볍게 넘어갈 수 있다.\n\n\nTip\nStateless에서 Stateful 코드를 부르면 결국 stateless로 작성하는 것이 크게 의미가 없단 소리다.\n당연히 이렇게 작성할 일은 없고, stateless에서는 stateless로 작성한 코드를 부르는 것이 당연하지만 맞는 것이다.\n\n몇 가지 알아두면 좋을 것\n함수는 어디까지 나누는 게 맞을까?\n아래와 같이 무작정 많이 나누는 것이 올바를 것인가?\n\n/**\n* Button의 재사용이 불가, Save 전용\n* 함수를 나눈다는 장점은 있지만 필요할까?\n*/\n@Composable\nprivate fun SaveButton(\n   changeItem: ListItem.Item,\n   modifier: Modifier,\n   onEditModeOff: (changeItem: ListItem.Item) -> Unit,\n) {\n   Button(\n       onClick = { onEditModeOff(changeItem) },\n       modifier = modifier\n   ) {\n       SaveText()\n   }\n}\n\n/**\n* Text 하나 뿐인데 굳이...?\n*/\n@Composable\nprivate fun SaveText() {\n   Text(text = \"Save\")\n}\n\n\n이 코드에서는 Button에 포함하는 SaveText까지 함수로 나누었다. Button에는 TextStyle과 TextColor까지 포함하고 있다. 별도의 스타일을 지정하지 않으면 상위룰을 따라가게 된다.\n그래서 굳이 이렇게까지 나눌 필요는 없다.\n이보다는 아래와 같이 나누는 것이 더 좋다.\n\n/**\n* Button을 재사용할 수 있도록 수정\n*/\n@Composable\nprivate fun HomeButton(\n   onClick: () -> Unit,\n   modifier: Modifier = Modifier,\n   text: String,\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n/**\n* 사용하는 경우\n*/\nRow {\n   HomeButton(\n       onClick = { },\n       text = \"Save\",\n       modifier = Modifier\n           .weight(1f)\n   )\n   HomeButton(\n       onClick = { },\n       text = \"x\",\n       modifier = Modifier\n           .weight(1f)\n           .padding(start = 10.dp)\n   )\n}\n\n\nText만을 가지는 Button을 기본으로 만들고, 이를 활용한 Preview 2가지를 해보면 아래와 같다.\n\n\nModifier의 위치\nModifier는 권장으론 필수 값 바로 다음에 Modifier가 오도록 적용해야 한다.\n아래의 코드는 옵션 값 바로 다음에 Modifier를 적용했고, 필수 값은 맨 아래에 두었다. 권장하는 순서와 하나도 맞지 않다.\n\n@Composable\nprivate fun HomeButton(\n   onClick: () -> Unit = {},\n   modifier: Modifier = Modifier,\n   text: String,\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n\n이를 권장 가이드대로 수정하면 아래와 같이 수정되어야 한다.\n\n@Composable\nprivate fun HomeButton(\n   text: String,\n   modifier: Modifier = Modifier,\n   onClick: () -> Unit = {},\n) {\n   Button(\n       onClick = onClick,\n       modifier = modifier\n   ) {\n       Text(text = text)\n   }\n}\n\n\n\nModifier를 적용할 때는\nModifier를 사용할 때는 함수의 파라미터 순서 그대로 사용할 수도 있지만 개인적으론 Modifier를 최 하단으로 이동시켜 사용하고 있다.\n\n@Preview(showBackground = true)\n@Composable\nprivate fun PreviewHomeButton() {\n   Row {\n       /* 필자가 추천하는 위치 */\n       HomeButton(\n           onClick = {},\n           text = \"Save\",\n           modifier = Modifier\n               .weight(1f)\n       )\n\n       /* 일반적인 위치? */\n       HomeButton(\n           onClick = {},\n           modifier = Modifier\n               .weight(1f)\n               .padding(start = 10.dp),\n           text = \"x\",\n       )\n   }\n}\n\n\n개인적으론 Modifier 관련 설정이 계속 길어지다 보니 하단으로 내려 사용하고 있다.\n\nContainer에 따른 Modifier 위치는?\n외부에서 바라볼 때는 당연하게도 container에 modifier가 적용될 것으로 기대할 수 있다. 하지만 아래와 같은 코드라면?\n\n@Composable\nprivate fun HomeButton(\n   text: String,\n   modifier: Modifier = Modifier,\n   onClick: () -> Unit = {},\n) {\n   Button(\n       onClick = onClick,\n   ) {\n       Text(\n           text = text,\n           modifier = modifier\n       )\n   }\n}\n\n\n이 코드는 적합하지 않다. 어느 누구도 Text에 modifier가 적용될 거라고 생각하지 못하기 때문이다.\n\n디자인 컴포넌트\n디자인 컴포넌트는 꼭 필수는 아니지만 있는 것이 좋다. 회사마다 디자인 시스템을 가지고 있는 경우도 있겠지만, 아닌 경우도 있을 것이다. 아닌 경우라고 하더라도 공통화를 해두면 나중에 수정하기 좋아진다.\nText\n    \nText를 앱 내의 공통 Components로 작성할 경우 TextStyle 등을 한 번에 적용하는 것이 가능\nButton\n    \n디자인 가이드에 따라 Button을 공통화하고, 디자인을 적용할 수 있다(사용의 편리)\nTextField\n    \n디자인 가이드에 따라 TextField을 공통화\n와 같은 정도로 분리할 수 있을 것이다.\n여기서는 위에 Tip으로 작성한 Button 부분을 디자인 컴포넌트로 분리하고 이를 적용하는 방법을 적어본다.\n\nButton Components\n공용 버튼 컴포넌트는 아래와 같이 작성할 수 있다.\n\n@Composable\nfun ExampleButton(\n   text: String,\n   onClick: () -> Unit,\n   modifier: Modifier = Modifier,\n   enabled: Boolean = true,\n   contentPadding: PaddingValues = ExampleButtonDefaults.ContentPadding,\n   textStyle: TextStyle = ExampleButtonDefaults.defaultTextStyle,\n   colors: ExampleButtonColors = ExampleButtonDefaults.filledButtonColors(),\n) {\n   Button(\n       onClick = onClick,\n       colors = ButtonDefaults.buttonColors(\n           containerColor = colors.containerColor().value,\n           contentColor = colors.contentColor().value,\n       ),\n       modifier = modifier\n           .defaultMinSize(minHeight = ExampleButtonDefaults.MinHeight)\n   ) {\n       Text(\n           text = text,\n           style = textStyle,\n           color = colors.contentColor().value,\n           modifier = Modifier\n               .padding(contentPadding)\n       )\n   }\n}\n\n\n\nParameters 종류\nParameters는 크게 2개로 나뉘는데\n필수 값 : 함수에 꼭 주입해야 할 정보\n옵션 값 : 코틀린에 기본 값을 정의한다.\n이 옵션 값에도 2 가지로 나뉜다.\n옵션 - inline : 누가 보아도 바로 확인할 수 있는 true/false 와 같은 정보\n옵션 - Defaults : 옵션 Defaults는 내부에서 정의한 값, 높이나 스타일이나 padding 등의 정보\n이를 잘 반영해 디자인 시스템을 분리할 수 있다.\n\n마무리\n이 글에서는 MainScreen에서 작성한 코드를 HomeScreen > HomeScreen에 대한 Components > 디자인 Components까지 분리하는 과정을 담았다.\n꼭 필요한 부분을 포함하여 작성하였고, 다음 글에서는 CompositionLocal과 관련한 글을 이어서 작성한다.",
        "guid": "https://thdev.tech/compose/2024/08/04/Android-Compose-Split-Funcation/",
        "isoDate": "2024-08-04T00:00:00.000Z"
      }
    ]
  },
  {
    "name": "김슬기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김광현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김영우",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강명훈",
    "category": "개인",
    "posts": [
      {
        "title": "정규표현식 테스트할 때",
        "link": "https://kangmyounghun.blogspot.com/2024/08/blog-post_2.html",
        "pubDate": "2024-08-02T13:42:00.001Z",
        "author": "강명훈",
        "content": "<div>애용하는 regex101.com은 g<span style=\"font-size: x-small;\">(lobal)</span>과 m<span style=\"font-size: x-small;\">(ultiline)</span> 수정자 사용이 디폴트.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4C70LdwoVvmzvcIP9yi_fGdyXajiVSu35UXPC6pRKLUxe3ZZsoyPUOEltRTY8_3rqbEx2hEa_5yPQ5KsWpvEeBt9YNDtDV5H5oJ01Kp8rA3b9WnCzz0JI0cIKktOwKN0_gXr2hmFxlwtkhLUK95ScgddveyYqRxBQ4TsGhQzwHwnnMopJ__qAllDG-CWZ/s1280/regex.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"687\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEh4C70LdwoVvmzvcIP9yi_fGdyXajiVSu35UXPC6pRKLUxe3ZZsoyPUOEltRTY8_3rqbEx2hEa_5yPQ5KsWpvEeBt9YNDtDV5H5oJ01Kp8rA3b9WnCzz0JI0cIKktOwKN0_gXr2hmFxlwtkhLUK95ScgddveyYqRxBQ4TsGhQzwHwnnMopJ__qAllDG-CWZ/s520/regex.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>문자 하나 검사하는 데 195개 매치?</b></td></tr></tbody></table><br />\n<div><span><a name='more'></a></span>정규표현식 기본 동작은 최초 매칭 성공 후 중지. 하지만 g 옵션을 사용하면 가능한 모든 매칭 결과를 보여준다. 테스트 문자열 개행이 많을 때, 한마디로 줄이 여러 개일 때 편리.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgO_ckJcwaFwpMSZGP0HUyioOk7PgfmGYwuB12NFM1fc2lA4qP-onvnBHtJgKuZ6s3SZHWQfvcXzGip_IoZvqGb1mXw-KaRS6u3qpV_HBvv7Rok7UddilbnJs8evABs4K5qEeQgqXBnpDE3bZSkAA-cAHzz63rPaLLgz6NrUjC04_HxqudDCaHFoeCS-GnS/s1280/regex2.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"686\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgO_ckJcwaFwpMSZGP0HUyioOk7PgfmGYwuB12NFM1fc2lA4qP-onvnBHtJgKuZ6s3SZHWQfvcXzGip_IoZvqGb1mXw-KaRS6u3qpV_HBvv7Rok7UddilbnJs8evABs4K5qEeQgqXBnpDE3bZSkAA-cAHzz63rPaLLgz6NrUjC04_HxqudDCaHFoeCS-GnS/s520/regex2.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>g 옵션 끄면 1개</b></td></tr></tbody></table><br />\n<div>하지만 테스트 문자열이 한 줄일 땐 검사 과정이 헷갈릴 수 있다. g 옵션 때문에 수량자 <span style=\"font-family: courier;\">*</span>의 최소 범위인 0개까지 검사함.</div><div><br /></div>\n<table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"tr-caption-container\" style=\"margin-left: auto; margin-right: auto;\"><tbody><tr><td style=\"text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkSZb3oYSOBDZKlg2KplqwXa6k4bf3001-DOVujW39u7wRx0ZvWJMpcVZQGWHyWGE9CmdpXed6h640A_kH6Ah9yhIJ_60UeAYN6841pjPPgWCBlpvBmjTgT39kIA6TS-BbPbHUEM5HTscwzCeb08zafRGxnKXEtRJ4Wd0JwA0TyLhVLCGyYCsrxOQPjNSA/s1280/regex3.png\" style=\"margin-left: auto; margin-right: auto;\"><img border=\"0\" data-original-height=\"603\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgkSZb3oYSOBDZKlg2KplqwXa6k4bf3001-DOVujW39u7wRx0ZvWJMpcVZQGWHyWGE9CmdpXed6h640A_kH6Ah9yhIJ_60UeAYN6841pjPPgWCBlpvBmjTgT39kIA6TS-BbPbHUEM5HTscwzCeb08zafRGxnKXEtRJ4Wd0JwA0TyLhVLCGyYCsrxOQPjNSA/s520/regex3.png\" width=\"520\" /></a></td></tr><tr><td class=\"tr-caption\" style=\"text-align: center;\"><b>통으로 하나 검사했는데?</b></td></tr></tbody></table><br />\n<div>디폴트라 까먹기 쉬운데, 매칭 결과나 검사 단계가 예상보다 많다 싶으면 g 옵션을 꺼보자.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjInc8KIoQUVo4g8Ma6mGRM9nehlcp6gOqKSLotGBBuA50LDLhacfn5BntSkYZq3PRkwYsFdTnMjN7RXCi7CU_86vTpwwMv9rLafEkCnRwrQa3tDKsUHKbbUbGsBU3sHc1UcTd7ukQThVM4t-khfJ5U3APTPNhuEtoPaJ7UJqKFMBw81C3Kk01kQo_jouHY/s1280/regex4.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"602\" data-original-width=\"1280\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjInc8KIoQUVo4g8Ma6mGRM9nehlcp6gOqKSLotGBBuA50LDLhacfn5BntSkYZq3PRkwYsFdTnMjN7RXCi7CU_86vTpwwMv9rLafEkCnRwrQa3tDKsUHKbbUbGsBU3sHc1UcTd7ukQThVM4t-khfJ5U3APTPNhuEtoPaJ7UJqKFMBw81C3Kk01kQo_jouHY/s520/regex4.png\" width=\"520\" /></a></div><br />\n<div><b>관련 글</b></div><div><div><ul><li><a href=\"http://kangmyounghun.blogspot.kr/2016/02/blog-post_25.html\" target=\"_blank\">정규표현식 학습 사이트</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2021/09/blog-post.html\" target=\"\">정규표현식 몰라도 된다</a></li><li><a href=\"https://kangmyounghun.blogspot.com/2024/04/ip.html\">IP 주소를 검사하는 정규표현식</a></li></ul></div></div>",
        "contentSnippet": "애용하는 regex101.com은 g(lobal)과 m(ultiline) 수정자 사용이 디폴트.\n\n\n\n\n문자 하나 검사하는 데 195개 매치?\n\n\n정규표현식 기본 동작은 최초 매칭 성공 후 중지. 하지만 g 옵션을 사용하면 가능한 모든 매칭 결과를 보여준다. 테스트 문자열 개행이 많을 때, 한마디로 줄이 여러 개일 때 편리.\n\n\n\n\ng 옵션 끄면 1개\n\n\n하지만 테스트 문자열이 한 줄일 땐 검사 과정이 헷갈릴 수 있다. g 옵션 때문에 수량자 *의 최소 범위인 0개까지 검사함.\n\n\n\n\n통으로 하나 검사했는데?\n\n\n디폴트라 까먹기 쉬운데, 매칭 결과나 검사 단계가 예상보다 많다 싶으면 g 옵션을 꺼보자.\n\n\n\n\n관련 글\n\n\n정규표현식 학습 사이트\n정규표현식 몰라도 된다\nIP 주소를 검사하는 정규표현식",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-3774098957882638730",
        "isoDate": "2024-08-02T13:42:00.001Z"
      },
      {
        "title": "스플렁크 위주로 해주세요",
        "link": "https://kangmyounghun.blogspot.com/2024/08/blog-post.html",
        "pubDate": "2024-08-01T07:18:00.024Z",
        "author": "강명훈",
        "content": "<div>교육기획 담당자에게서 가장 많이 듣는 얘기. 담당자 입장에선 스플렁크 교육으로 결재 받았는데 계획서만 보면 고작 반나절 정도 시간만 할당되어 있으니 답답할만 하다.</div><div><br /></div><div></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhC7aF60Ep6c2NbL6-OCTAfgCucE-7rCogPsltJWtHI4NF3ik7B8Gf5ocpm9A7eyve3xJQSLYGAoXx6Rkh7kp-BDDlmhZZHOAJGP6XRCl5tre3QVManDdkL7ygqQG0IUckm0mElMxeUjd8PcvtCNM3XB9AjEk9HN80a_Z9jPm8iP35NChoZchYDD0N0JLd7/s1303/plan.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"697\" data-original-width=\"1303\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhC7aF60Ep6c2NbL6-OCTAfgCucE-7rCogPsltJWtHI4NF3ik7B8Gf5ocpm9A7eyve3xJQSLYGAoXx6Rkh7kp-BDDlmhZZHOAJGP6XRCl5tre3QVManDdkL7ygqQG0IUckm0mElMxeUjd8PcvtCNM3XB9AjEk9HN80a_Z9jPm8iP35NChoZchYDD0N0JLd7/s520/plan.png\" width=\"520\" /></a></div>\n<div><br /></div><div><span><a name='more'></a></span>그래서 각 단위는 스플렁크 필수 기반 기술이거나, 단위 주제 모두 스플렁크를 활용한다는 보충 설명이 필수.&nbsp;</div><div><br /></div><div><b><span style=\"font-size: x-large;\">왜 이런 상황이 자주 발생할까?&nbsp;</span></b></div><div><br /></div><div>다음은 목조주책 건축 커리큘럼.</div><div><br /></div>\n<div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqLkYmN2Ag8otkF-ervs0Y42A-hGIjmygDCZjIWELtkcUf928e6c8lye1qLn1QQiQ_CpTZ06vAJB2xJHUdUKJazv2fWTY4CcUWAyzlyWKf1wfXNoq9UO7nVfbqDyYegVEsyQR5bvMjCvsVrNofkG87EMy9waRjF-qmQz9Tkk13cwx7c6FrbmQCNOH96hWq/s1129/curri.png\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1068\" data-original-width=\"1129\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgqLkYmN2Ag8otkF-ervs0Y42A-hGIjmygDCZjIWELtkcUf928e6c8lye1qLn1QQiQ_CpTZ06vAJB2xJHUdUKJazv2fWTY4CcUWAyzlyWKf1wfXNoq9UO7nVfbqDyYegVEsyQR5bvMjCvsVrNofkG87EMy9waRjF-qmQz9Tkk13cwx7c6FrbmQCNOH96hWq/s520/curri.png\" width=\"520\" /></a></div><div><br /></div><div>해당 과정을 보고 망치, 톱질은 언제 배우나 궁금해 하는 이가 있을까? 건축의 역사부터 설계, 골조, 단열 등의 과정 하나하나가 건축의 필요조건이며, 전 과정이 조화를 이뤄야만 좋은 집이 지어진다는 사실을 모르는 이는 없을 것이다.</div><div><br /></div><div>집은 생존의 필수 조건. 관심도가 높기 때문에 인류 역사만큼 오랜 기간 많은 정보가 공유되어 온데다, 결정적으로 직접 짓지 않아도 살아보면 알 수 있다. 좋은 집인지 아닌지, 어디에 문제가 있는지.</div><div><br /></div><div>매일 경험치가 쌓이니 비전문가라도 튼튼한 기반 위에 집을 지어야 한다는 기본 상식 정도는 알게 된다. 망치, 톱이 중요한 게 아니라는 것도 자연스럽게 인지.&nbsp;</div><div><br /></div><div><b><span style=\"font-size: x-large;\">반면 데이터 분석은&nbsp;</span></b></div><div><br /></div><div>평소 접할 일이 별로 없어서인지 수천 년 전 조상님때부터 하던 통계 분석 똑같이 하는 건데도 낯설다. 머신러닝이 유행하면서 데이터 분석 분야는 높은 수준의 수학/통계 지식이 필수라는 고정관념까지 생김.</div><div><blockquote style=\"text-align: center;\"><i><a href=\"https://kangmyounghun.blogspot.com/2019/03/blog-post_26.html\" target=\"_blank\">농사를 짓게 되면서 온도를 측정하고 강수량을 쟀으며, 군인을 뽑고 세금을 걷기 위해 인구 수를 셌다. 숫자로 자연 및 사회 현상을 이해하려는 통계분석을 시작한 것</a></i></blockquote></div><div><div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEAneM5fTf0qgyrVV3E-HJMSIMkN8sg8MnCzZneDIu-zk-LT344EDUGBMj1YJGFGdKu-yzmt6nFFMT2EPfDxW3_GJcLduR4oCAuikxSaxP1j1TC7tFj7CLzbzcS83bfjM_i4qZXo16hp0q9Ryoa_K6nuY80dzvjRdRIe9GYTPO-I91MPUBB9_QRQFZqqgR/s653/5-1.jpg.webp\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"653\" data-original-width=\"500\" height=\"400\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEAneM5fTf0qgyrVV3E-HJMSIMkN8sg8MnCzZneDIu-zk-LT344EDUGBMj1YJGFGdKu-yzmt6nFFMT2EPfDxW3_GJcLduR4oCAuikxSaxP1j1TC7tFj7CLzbzcS83bfjM_i4qZXo16hp0q9Ryoa_K6nuY80dzvjRdRIe9GYTPO-I91MPUBB9_QRQFZqqgR/w306-h400/5-1.jpg.webp\" width=\"306\" /></a></div><div><br /></div></div></div><div>물론 검색/광고 등 머신러닝이 주로 주력하는 분야가 돈을 버는 분야, 돈을 벌기 위해 사람을 분석해야 하는 분야라는 점에서는 어느 정도 사실이다. 거짓말이 가능한 사람을 분석하는 게 쉽진 않겠지.</div><div><br /></div><div>그런데 내가 20년 가까이 컴퓨터 로그 분석하면서 느낀 건, 더하고 빼는 산수 수준으로도 분석이 되더라는 것. 왜 쉽지? 나름 고민끝에 내린 결론은 컴퓨터는 거짓말을 못하니까.</div><div><br /></div><div>하지만 한번 생긴 고정관념은 쉽게 깨지지 않고, 그래서 머신러닝은 부담스러운 이들이 스플렁크나 엘라스틱처럼 유명한 제품을 쓰면 데이터 분석이 쉬워질거라는 생각을 하게 되지 않나 싶다. <strike><span style=\"font-size: x-small;\">유명한 제품 쓴다는 거 자체에 만족하기도</span></strike></div><div><br /></div><div>이런 경향은 특히 빅데이터가 유행하면서 심해졌다. 통계 분석으로 향해야할 관심이 온통 하둡 등의 데이터 인프라 기술로 쏠리면서 많은 이들이 수단을 목적으로 착각하게 된 것.</div><div><br /></div><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiNe4sjgNuc5iULZYOHqJS-XTNXADmqsZp0sq4ENmIliN9RzwYO7B8Ip08MBf_CW0-7kMIQcuxUoGD4pJCNfw2uuQVMltN-zjbIUdDrA0IftK2fpO9pRvU4US6asP9t3oNXm-ypjbdMJP_R6yCT8TjaLdxVpciQ4c_KJiuy8Cl-JzH9GQ0-6VdfvUkYndnJ/s2048/Meme-Index-Analyzing-fads-and-sensations-on-the-Internet-by-Miguel-Romero-at-Big-Data-Spain-2017-11-2048.webp\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" data-original-height=\"1152\" data-original-width=\"2048\" height=\"225\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiNe4sjgNuc5iULZYOHqJS-XTNXADmqsZp0sq4ENmIliN9RzwYO7B8Ip08MBf_CW0-7kMIQcuxUoGD4pJCNfw2uuQVMltN-zjbIUdDrA0IftK2fpO9pRvU4US6asP9t3oNXm-ypjbdMJP_R6yCT8TjaLdxVpciQ4c_KJiuy8Cl-JzH9GQ0-6VdfvUkYndnJ/w400-h225/Meme-Index-Analyzing-fads-and-sensations-on-the-Internet-by-Miguel-Romero-at-Big-Data-Spain-2017-11-2048.webp\" width=\"400\" /></a></div><div><br /></div><div>이런 착각은 망치/톱 숙달 부족이 좋은 집이 지어지지 않는 이유, 스플렁크/엘라스틱 숙달 부족이 데이터 분석 실패 이유라는 착각으로 이어진다. 숙달이 부족하다 생각되니 더 열심히 수단에 매달리고, 더 열심히 비법같은 걸 찾게 된다.</div><div><blockquote style=\"text-align: center;\"><i><a href=\"http://www.itdaily.kr/news/articleView.html?idxno=48688\" target=\"_blank\">Toolset에 관한 맹신은 사용자의 의도까지 알아서 일을 해주는 컴퓨터가 미래에 등장하기 전까지는 돈을 낭비하고 일을 그르치는 지름길이다. 물론 Toolset은 반드시 필요하지만 하둡이건 SAS건 R이건, 그런 것들은 망치나 대패이지 설계자가 아니란 뜻</a></i></blockquote></div><div><br /></div><div><b><span style=\"font-size: x-large;\">나가며</span></b></div><div><br /></div><div>자고로 돈 주는 사람이 보고 싶은 걸 보여주고, 듣고 싶은 걸 들려줘야 돈이 되는 법. 망치, 톱 팔라는 사람에게 자꾸 설계도 강조하는 게 맞는 걸까? 장사는 그렇게 하는 거 아니라는데<span style=\"font-size: x-small;\">(..)</span></div><div><p></p><blockquote style=\"text-align: center;\"><a href=\"http://www.itdaily.kr/news/articleView.html?idxno=58698\" target=\"_blank\"><i>기타 회사가 제대로 된 기타 연주자가 되는 것이 얼마나 어려운지를 계속 강조한다면 그들의 사업에 도움이 될까? 그냥 ‘이 기타는 당신의 기타 히어로가 사용하는 바로 그것입니다 ’라고 말하는 것이 훨씬 쉽고 간편한 판매방식</i>&nbsp;</a></blockquote><p></p><blockquote style=\"text-align: center;\"><blockquote class=\"tr_bq\"><i><a href=\"https://kangmyounghun.blogspot.com/2020/02/blog-post_19.html\" target=\"_blank\">당신은 \"이것을 선택하면 이사회 /투자자 /상사에게&nbsp; ~라고 말할 수 있습니다 \"라는 대답을 마케팅해야 한다</a></i></blockquote></blockquote></div><div><div><b><br /></b></div><div><b>관련 글</b></div><div><ul><li><a href=\"https://kangmyounghun.blogspot.com/2024/06/4th.html\">데이터 분석이 쉬워지는 비법 - 4th</a></li></ul></div></div>",
        "contentSnippet": "교육기획 담당자에게서 가장 많이 듣는 얘기. 담당자 입장에선 스플렁크 교육으로 결재 받았는데 계획서만 보면 고작 반나절 정도 시간만 할당되어 있으니 답답할만 하다.\n\n\n\n\n\n그래서 각 단위는 스플렁크 필수 기반 기술이거나, 단위 주제 모두 스플렁크를 활용한다는 보충 설명이 필수. \n\n\n왜 이런 상황이 자주 발생할까? \n\n\n다음은 목조주책 건축 커리큘럼.\n\n\n\n\n\n해당 과정을 보고 망치, 톱질은 언제 배우나 궁금해 하는 이가 있을까? 건축의 역사부터 설계, 골조, 단열 등의 과정 하나하나가 건축의 필요조건이며, 전 과정이 조화를 이뤄야만 좋은 집이 지어진다는 사실을 모르는 이는 없을 것이다.\n\n\n집은 생존의 필수 조건. 관심도가 높기 때문에 인류 역사만큼 오랜 기간 많은 정보가 공유되어 온데다, 결정적으로 직접 짓지 않아도 살아보면 알 수 있다. 좋은 집인지 아닌지, 어디에 문제가 있는지.\n\n\n매일 경험치가 쌓이니 비전문가라도 튼튼한 기반 위에 집을 지어야 한다는 기본 상식 정도는 알게 된다. 망치, 톱이 중요한 게 아니라는 것도 자연스럽게 인지. \n\n\n반면 데이터 분석은 \n\n\n평소 접할 일이 별로 없어서인지 수천 년 전 조상님때부터 하던 통계 분석 똑같이 하는 건데도 낯설다. 머신러닝이 유행하면서 데이터 분석 분야는 높은 수준의 수학/통계 지식이 필수라는 고정관념까지 생김.\n\n농사를 짓게 되면서 온도를 측정하고 강수량을 쟀으며, 군인을 뽑고 세금을 걷기 위해 인구 수를 셌다. 숫자로 자연 및 사회 현상을 이해하려는 통계분석을 시작한 것\n\n\n\n\n\n\n물론 검색/광고 등 머신러닝이 주로 주력하는 분야가 돈을 버는 분야, 돈을 벌기 위해 사람을 분석해야 하는 분야라는 점에서는 어느 정도 사실이다. 거짓말이 가능한 사람을 분석하는 게 쉽진 않겠지.\n\n\n그런데 내가 20년 가까이 컴퓨터 로그 분석하면서 느낀 건, 더하고 빼는 산수 수준으로도 분석이 되더라는 것. 왜 쉽지? 나름 고민끝에 내린 결론은 컴퓨터는 거짓말을 못하니까.\n\n\n하지만 한번 생긴 고정관념은 쉽게 깨지지 않고, 그래서 머신러닝은 부담스러운 이들이 스플렁크나 엘라스틱처럼 유명한 제품을 쓰면 데이터 분석이 쉬워질거라는 생각을 하게 되지 않나 싶다. 유명한 제품 쓴다는 거 자체에 만족하기도\n\n\n이런 경향은 특히 빅데이터가 유행하면서 심해졌다. 통계 분석으로 향해야할 관심이 온통 하둡 등의 데이터 인프라 기술로 쏠리면서 많은 이들이 수단을 목적으로 착각하게 된 것.\n\n\n\n\n\n이런 착각은 망치/톱 숙달 부족이 좋은 집이 지어지지 않는 이유, 스플렁크/엘라스틱 숙달 부족이 데이터 분석 실패 이유라는 착각으로 이어진다. 숙달이 부족하다 생각되니 더 열심히 수단에 매달리고, 더 열심히 비법같은 걸 찾게 된다.\n\nToolset에 관한 맹신은 사용자의 의도까지 알아서 일을 해주는 컴퓨터가 미래에 등장하기 전까지는 돈을 낭비하고 일을 그르치는 지름길이다. 물론 Toolset은 반드시 필요하지만 하둡이건 SAS건 R이건, 그런 것들은 망치나 대패이지 설계자가 아니란 뜻\n\n\n나가며\n\n\n자고로 돈 주는 사람이 보고 싶은 걸 보여주고, 듣고 싶은 걸 들려줘야 돈이 되는 법. 망치, 톱 팔라는 사람에게 자꾸 설계도 강조하는 게 맞는 걸까? 장사는 그렇게 하는 거 아니라는데(..)\n\n\n기타 회사가 제대로 된 기타 연주자가 되는 것이 얼마나 어려운지를 계속 강조한다면 그들의 사업에 도움이 될까? 그냥 ‘이 기타는 당신의 기타 히어로가 사용하는 바로 그것입니다 ’라고 말하는 것이 훨씬 쉽고 간편한 판매방식 \n\n\n당신은 \"이것을 선택하면 이사회 /투자자 /상사에게  ~라고 말할 수 있습니다 \"라는 대답을 마케팅해야 한다\n\n\n\n\n관련 글\n\n데이터 분석이 쉬워지는 비법 - 4th",
        "id": "tag:blogger.com,1999:blog-2597780270996323853.post-8677747390731880275",
        "isoDate": "2024-08-01T07:18:00.024Z"
      }
    ]
  },
  {
    "name": "김민장",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕홍",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성중",
    "category": "개인",
    "posts": []
  },
  {
    "name": "구교준",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김덕기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "고명환",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성희",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강성훈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강병수",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김봉현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강형석",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김수로",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강미경",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김성현",
    "category": "개인",
    "posts": []
  },
  {
    "name": "강진우",
    "category": "개인",
    "posts": [
      {
        "creator": "강진우",
        "title": "지금 이 순간에 충실하라 - 평범한 직장인의 고민 일기",
        "link": "https://brunch.co.kr/@@3Y0/78",
        "pubDate": "Sun, 04 Aug 2024 13:48:07 GMT",
        "author": "강진우",
        "content": "휴가의 마지막 날, 아쉬움을 달래려 집으로 출발하기 전에 카페에 들렀다. 빵도 맛있고, 커피도 맛있다는, 그리고 무엇보다 통창으로 보이는 바다가 일품이라는 카페를 찾아갔다.&nbsp;역시나 유명한 곳이라서 그런지 오전 10시에 찾아갔는데도 자리는 거의 만석이었다. (그 카페의 오픈 시간은 오전 9시이다.) 1층과 2층을 쭉 훑어보다가 (3층은 루프탑이어서 이 날씨에",
        "contentSnippet": "휴가의 마지막 날, 아쉬움을 달래려 집으로 출발하기 전에 카페에 들렀다. 빵도 맛있고, 커피도 맛있다는, 그리고 무엇보다 통창으로 보이는 바다가 일품이라는 카페를 찾아갔다. 역시나 유명한 곳이라서 그런지 오전 10시에 찾아갔는데도 자리는 거의 만석이었다. (그 카페의 오픈 시간은 오전 9시이다.) 1층과 2층을 쭉 훑어보다가 (3층은 루프탑이어서 이 날씨에",
        "guid": "https://brunch.co.kr/@@3Y0/78",
        "isoDate": "2024-08-04T13:48:07.000Z"
      }
    ]
  },
  {
    "name": "권민재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "권태관",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김도곤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "칡토스의 게임 개발",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김선철",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김놀부",
    "category": "개인",
    "posts": []
  },
  {
    "name": "프리웨어 이야기",
    "category": "개인",
    "posts": [
      {
        "creator": "어떤오후의 프리웨어 이야기",
        "title": "클로드(Claude)에서 GPTs와 같은 프로젝트(Projects) 사용법",
        "link": "http://muzbox.tistory.com/483453",
        "pubDate": "Thu, 1 Aug 2024 13:58:04 +0900",
        "author": "어떤오후의 프리웨어 이야기",
        "comments": "http://muzbox.tistory.com/483453#entry483453comment",
        "content": "<p data-ke-size=\"size16\">현재 대화형 AI 챗봇 시장은 OpenAI의 ChatGPT가 선두를 달리고 있지만, Anthropic의 Claude 3.5가 주목할 만한 경쟁자로 부상하고 있습니다. Claude 3.5는 뛰어난 언어 이해력과 생성 능력, 그리고 200K 토큰의 넓은 컨텍스트 창을 자랑하며 시장에서 독특한 위치를 차지하고 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_claude projects.jpg\" data-origin-width=\"1200\" data-origin-height=\"630\"><span data-url=\"https://blog.kakaocdn.net/dn/cWn5B2/btsIRPIx6hY/HLKPSsFVmlEXrbk1iYC7rk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/cWn5B2/btsIRPIx6hY/HLKPSsFVmlEXrbk1iYC7rk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/cWn5B2/btsIRPIx6hY/HLKPSsFVmlEXrbk1iYC7rk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcWn5B2%2FbtsIRPIx6hY%2FHLKPSsFVmlEXrbk1iYC7rk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" width=\"700\" height=\"368\" data-filename=\"edited_claude projects.jpg\" data-origin-width=\"1200\" data-origin-height=\"630\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;특히 Claude 3.5의 강점은 정확성, 윤리적 판단력, 그리고 복잡한 작업 수행 능력에 있습니다. 이러한 특징들로 인해 Claude는 학술 연구, 비즈니스 분석, 창의적 작업 등 벌써부터 다양한 분야에서 선호되고 있는데요.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">이러한 배경에서 Anthropic이 새롭게 선보인 'Claude Projects'는 AI와의 협업을 한 단계 더 발전시키는 혁신적인 도구입니다. 이 기능은 사용자가 자신만의 맞춤형 AI 환경을 구축하고, 팀원들과 함께 AI의 도움을 받아 효율적으로 작업할 수 있게 해줍니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">본 기사에서는 이 Claude Projects의 사용법과 특징을 상세히 소개하여, 독자들이 이 강력한 AI 도구를 어떻게 활용할 수 있는지 안내하고자 합니다. ChatGPT의 GPTs와 비교하여 Claude Projects만의 고유한 장점들을 살펴보고, 실제 활용 사례들을 통해 그 잠재력을 확인해 보겠습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>1. 클로드 프로젝트 (Claude Projects) 란?</b></span></h2>\n<p data-ke-size=\"size16\">클로드 프로젝트(Claude Projects)는 앤트로픽(Anthropic)이 개발한 혁신적인 AI 협업 도구입니다. OpenAI의 맞춤형 GPT(GPTs)와 유사한 기능을 제공하면서도, 클로드의 강력한 성능을 활용할 수 있게 해줍니다. 사용자들은 이를 통해 자신만의 맞춤형 AI 환경을 구축하고, 팀원들과 함께 AI의 도움을 받아 효율적으로 작업할 수 있습니다.</p>\n<p data-ke-size=\"size16\">클로드 3.5 소넷을 기반으로 한 이 프로젝트는 AI와의 협업을 새로운 차원으로 끌어올리는 획기적인 도구입니다. 단순한 질의응답을 넘어, 복잡한 프로젝트 관리와 팀 협업을 위한 다양한 기능을 제공합니다.</p>\n<h3 data-ke-size=\"size23\"><span style=\"color: #006dd7;\"><i>클로드 프로젝트 (Claude Projects) 주요 특징</i></span></h3>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>맞춤형 Custom Instructions 설정</li>\n<li>맞춤형 지식 기반 구축</li>\n<li>200K 컨텍스트 창 지원 (약 500페이지 분량)</li>\n<li>팀 공유 기능</li>\n<li>아티팩트(Artifacts) 생성 기능</li>\n</ul>\n<p data-ke-size=\"size16\">이러한 특징들을 통해 클로드 프로젝트는 단순한 챗봇을 넘어 진정한 AI 협업 도구로 자리매김하고 있습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>2. GPTs와 같은 맞춤형 클로드 사용법</b></span></h2>\n<p data-ke-size=\"size16\">클로드 프로젝트의 핵심 기능을 \"SEO 요건을 만족하는 IT 제품리뷰 블로그 기사 작성\" 예시를 통해 살펴보겠습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_DSFSDF.png\" data-origin-width=\"488\" data-origin-height=\"375\"><span data-url=\"https://blog.kakaocdn.net/dn/c78naT/btsISXeChJh/Y3o4kkHyxbsztFNUuFUEs0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/c78naT/btsISXeChJh/Y3o4kkHyxbsztFNUuFUEs0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/c78naT/btsISXeChJh/Y3o4kkHyxbsztFNUuFUEs0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc78naT%2FbtsISXeChJh%2FY3o4kkHyxbsztFNUuFUEs0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_DSFSDF.png\" data-origin-width=\"488\" data-origin-height=\"375\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><b><span style=\"color: #006dd7;\"><i>Project knowledge 설정</i></span></b></h3>\n<p data-ke-size=\"size16\">IT 제품리뷰 블로그를 위한 클로드 프로젝트를 설정할 때, Project knowledge 라 불리는 다음과 같은 Custom Instructions을 사용할 수 있습니다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-origin-width=\"1056\" data-origin-height=\"277\"><span data-url=\"https://blog.kakaocdn.net/dn/bP1GBQ/btsISMK8ctg/yKgMbSfNzJKkd6adNCrqMk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bP1GBQ/btsISMK8ctg/yKgMbSfNzJKkd6adNCrqMk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bP1GBQ/btsISMK8ctg/yKgMbSfNzJKkd6adNCrqMk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbP1GBQ%2FbtsISMK8ctg%2FyKgMbSfNzJKkd6adNCrqMk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-origin-width=\"1056\" data-origin-height=\"277\"/></span></figure>\n</p>\n<h3 data-ke-size=\"size23\"><b><span style=\"color: #006dd7;\"><i>맞춤형 지식 기반 구축</i></span></b></h3>\n<p data-ke-size=\"size16\">IT 제품리뷰 블로그를 위해 다음과 같은 텍스트나 PDF등의 자료를 클로드 프로젝트에 업로드하여 맞춤형 지식 기반을 구축할 수 있습니다:</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>구글 상위 노출에 최적화된 블로그 기사를 작성하는 방법</li>\n<li>IT 제품 리뷰 블로그 기사 예시</li>\n</ul>\n<p data-ke-size=\"size16\">이를 통해 클로드는 최신 제품 정보, 리뷰 작성 스타일, 그리고 SEO 최적화 요령을 학습하게 됩니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>3. 클로드 프로젝트로 챗봇 만들기&nbsp;</b></span></h2>\n<p data-ke-size=\"size16\">클로드 프로젝트를 이용하여 '구글 상위노출 IT 제품 리뷰 블로그 기사 작성' 챗봇을 만드는 과정을 소개합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\"><b><span style=\"color: #006dd7;\"><i>맞춤형 지식 사전 생성</i></span></b></h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">1. IT 제품리뷰 블로그를 위해 Claude 가 사전에 학습할 지식을 추가합니다. 이 또한 Claude를 통해 만들 수 있습니다.</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp; a. 먼저 '구글 상위 노출에 최적화된 블로그 기사를 작성하는 방법'을 작성하게 합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_01.png\" data-origin-width=\"951\" data-origin-height=\"580\"><span data-url=\"https://blog.kakaocdn.net/dn/bf5Amh/btsIRxVseO9/KPXsdZHi3jHgGKgrhGvuG1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bf5Amh/btsIRxVseO9/KPXsdZHi3jHgGKgrhGvuG1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bf5Amh/btsIRxVseO9/KPXsdZHi3jHgGKgrhGvuG1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbf5Amh%2FbtsIRxVseO9%2FKPXsdZHi3jHgGKgrhGvuG1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_01.png\" data-origin-width=\"951\" data-origin-height=\"580\"/></span></figure>\n<figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_02.png\" data-origin-width=\"906\" data-origin-height=\"517\"><span data-url=\"https://blog.kakaocdn.net/dn/nCUZd/btsISenCnqj/QLKRUkn3bKvkjw37yUwkXk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/nCUZd/btsISenCnqj/QLKRUkn3bKvkjw37yUwkXk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/nCUZd/btsISenCnqj/QLKRUkn3bKvkjw37yUwkXk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FnCUZd%2FbtsISenCnqj%2FQLKRUkn3bKvkjw37yUwkXk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_02.png\" data-origin-width=\"906\" data-origin-height=\"517\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp; b. 위의 내용을 기반으로 'IT 제품 리뷰 블로그 기사를 작성할 때 SEO를 고려한 작성 지침'을 만듭니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_03.png\" data-origin-width=\"942\" data-origin-height=\"526\"><span data-url=\"https://blog.kakaocdn.net/dn/1c5tB/btsITB3d3RB/bxHyMyJNKrPEKhK7kDHFGK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/1c5tB/btsITB3d3RB/bxHyMyJNKrPEKhK7kDHFGK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/1c5tB/btsITB3d3RB/bxHyMyJNKrPEKhK7kDHFGK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F1c5tB%2FbtsITB3d3RB%2FbxHyMyJNKrPEKhK7kDHFGK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_03.png\" data-origin-width=\"942\" data-origin-height=\"526\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp; c. 마지막으로 위의 치침을 기반으로 템플릿으로 계속 사용할 이상적인 '블로그 기사 예시'를 생성합니다. 이 3가지 결과물을 pdf 또는 txt 파일로 저장합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_04.png\" data-origin-width=\"1554\" data-origin-height=\"803\"><span data-url=\"https://blog.kakaocdn.net/dn/bOk6VM/btsITmd6WnA/TfIv1PXkNU1frzKGBZYTcK/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bOk6VM/btsITmd6WnA/TfIv1PXkNU1frzKGBZYTcK/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bOk6VM/btsITmd6WnA/TfIv1PXkNU1frzKGBZYTcK/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbOk6VM%2FbtsITmd6WnA%2FTfIv1PXkNU1frzKGBZYTcK%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_04.png\" data-origin-width=\"1554\" data-origin-height=\"803\"/></span></figure>\n</p>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h3 style=\"color: #000000; text-align: start;\" data-ke-size=\"size23\"><b><span style=\"color: #006dd7;\"><i>프로젝트 만들기</i></span></b></h3>\n<p style=\"color: #333333; text-align: start;\" data-ke-size=\"size16\">1. Claude 좌측 메뉴에서 \"Projects'를 클릭합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_05.png\" data-origin-width=\"1037\" data-origin-height=\"610\"><span data-url=\"https://blog.kakaocdn.net/dn/QWI13/btsIQZ5UnMn/Ka3vt4WkrUnvSwOJNXPpUk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/QWI13/btsIQZ5UnMn/Ka3vt4WkrUnvSwOJNXPpUk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/QWI13/btsIQZ5UnMn/Ka3vt4WkrUnvSwOJNXPpUk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FQWI13%2FbtsIQZ5UnMn%2FKa3vt4WkrUnvSwOJNXPpUk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_05.png\" data-origin-width=\"1037\" data-origin-height=\"610\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">2. Projects 화면에서 우측 상단의 '프로젝트 생성' 버튼을 클릭합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_06.png\" data-origin-width=\"1048\" data-origin-height=\"640\"><span data-url=\"https://blog.kakaocdn.net/dn/lnMqO/btsITuwfCtB/ZlPKk54xYFdtw2VSrpu9tk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/lnMqO/btsITuwfCtB/ZlPKk54xYFdtw2VSrpu9tk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/lnMqO/btsITuwfCtB/ZlPKk54xYFdtw2VSrpu9tk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FlnMqO%2FbtsITuwfCtB%2FZlPKk54xYFdtw2VSrpu9tk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_06.png\" data-origin-width=\"1048\" data-origin-height=\"640\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">3. 프로젝트의 이름과 간단한 설명을 작성합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_07.png\" data-origin-width=\"1044\" data-origin-height=\"608\"><span data-url=\"https://blog.kakaocdn.net/dn/nwXI8/btsITT3BMNm/Jn9knBSl56kHA6pB31Lkv0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/nwXI8/btsITT3BMNm/Jn9knBSl56kHA6pB31Lkv0/img.png\"><img src=\"https://blog.kakaocdn.net/dn/nwXI8/btsITT3BMNm/Jn9knBSl56kHA6pB31Lkv0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FnwXI8%2FbtsITT3BMNm%2FJn9knBSl56kHA6pB31Lkv0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_07.png\" data-origin-width=\"1044\" data-origin-height=\"608\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">4.&nbsp; 다음 화면에서 우측의 'Add Content'를 클릭하여 위에서 생성한 3개의 pdf 를 업로드 합니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_09.png\" data-origin-width=\"1040\" data-origin-height=\"606\"><span data-url=\"https://blog.kakaocdn.net/dn/z6NQB/btsISLMdXWp/3QhrOpLoA8Ym9lHUtOx95K/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/z6NQB/btsISLMdXWp/3QhrOpLoA8Ym9lHUtOx95K/img.png\"><img src=\"https://blog.kakaocdn.net/dn/z6NQB/btsISLMdXWp/3QhrOpLoA8Ym9lHUtOx95K/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fz6NQB%2FbtsISLMdXWp%2F3QhrOpLoA8Ym9lHUtOx95K%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_09.png\" data-origin-width=\"1040\" data-origin-height=\"606\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">5. 이제&nbsp; Project 의 세부 지침을 설정하기 위해 'Set custom instructions'를 클릭한 후 아래 예시와 같이 사용자 지침을 입력한 후 저장합니다.▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_10.png\" data-origin-width=\"1053\" data-origin-height=\"656\"><span data-url=\"https://blog.kakaocdn.net/dn/1sDJ2/btsIQ13IRrI/gTHzvSZ4xYNkdnKwkYukSk/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/1sDJ2/btsIQ13IRrI/gTHzvSZ4xYNkdnKwkYukSk/img.png\"><img src=\"https://blog.kakaocdn.net/dn/1sDJ2/btsIQ13IRrI/gTHzvSZ4xYNkdnKwkYukSk/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F1sDJ2%2FbtsIQ13IRrI%2FgTHzvSZ4xYNkdnKwkYukSk%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_10.png\" data-origin-width=\"1053\" data-origin-height=\"656\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">6. 완성된 프로젝트를 테스트 한 결과입니다. 상품명, 제품 스펙, 제품사진만으로 상세한 제품리뷰기사가 작성된 것을 확인할 수 있습니다. ▼</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"edited_11.png\" data-origin-width=\"1732\" data-origin-height=\"893\"><span data-url=\"https://blog.kakaocdn.net/dn/bMf11g/btsIQZESHC4/mc8Qbxam1GnH6uo6v3Skw1/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/bMf11g/btsIQZESHC4/mc8Qbxam1GnH6uo6v3Skw1/img.png\"><img src=\"https://blog.kakaocdn.net/dn/bMf11g/btsIQZESHC4/mc8Qbxam1GnH6uo6v3Skw1/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbMf11g%2FbtsIQZESHC4%2Fmc8Qbxam1GnH6uo6v3Skw1%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"edited_11.png\" data-origin-width=\"1732\" data-origin-height=\"893\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<h2 data-ke-size=\"size26\"><span style=\"color: #009a87;\"><b>4. 결론</b></span></h2>\n<p data-ke-size=\"size16\">&nbsp;클로드 프로젝트는 GPTs와 같은 기존 도구들과 비교해 더 넓은 컨텍스트 이해, 강력한 커스터마이징, 그리고 팀 협업 기능 등 여러 장점을 제공합니다. 앞으로 클로드 프로젝트가 어떻게 발전하고, 우리의 업무 방식을 어떻게 변화시킬지 지켜보는 것도 흥미로울 것 같습니다.</p>",
        "contentSnippet": "현재 대화형 AI 챗봇 시장은 OpenAI의 ChatGPT가 선두를 달리고 있지만, Anthropic의 Claude 3.5가 주목할 만한 경쟁자로 부상하고 있습니다. Claude 3.5는 뛰어난 언어 이해력과 생성 능력, 그리고 200K 토큰의 넓은 컨텍스트 창을 자랑하며 시장에서 독특한 위치를 차지하고 있습니다.\n\n\n \n 특히 Claude 3.5의 강점은 정확성, 윤리적 판단력, 그리고 복잡한 작업 수행 능력에 있습니다. 이러한 특징들로 인해 Claude는 학술 연구, 비즈니스 분석, 창의적 작업 등 벌써부터 다양한 분야에서 선호되고 있는데요.\n \n이러한 배경에서 Anthropic이 새롭게 선보인 'Claude Projects'는 AI와의 협업을 한 단계 더 발전시키는 혁신적인 도구입니다. 이 기능은 사용자가 자신만의 맞춤형 AI 환경을 구축하고, 팀원들과 함께 AI의 도움을 받아 효율적으로 작업할 수 있게 해줍니다.\n \n본 기사에서는 이 Claude Projects의 사용법과 특징을 상세히 소개하여, 독자들이 이 강력한 AI 도구를 어떻게 활용할 수 있는지 안내하고자 합니다. ChatGPT의 GPTs와 비교하여 Claude Projects만의 고유한 장점들을 살펴보고, 실제 활용 사례들을 통해 그 잠재력을 확인해 보겠습니다.\n \n1. 클로드 프로젝트 (Claude Projects) 란?\n클로드 프로젝트(Claude Projects)는 앤트로픽(Anthropic)이 개발한 혁신적인 AI 협업 도구입니다. OpenAI의 맞춤형 GPT(GPTs)와 유사한 기능을 제공하면서도, 클로드의 강력한 성능을 활용할 수 있게 해줍니다. 사용자들은 이를 통해 자신만의 맞춤형 AI 환경을 구축하고, 팀원들과 함께 AI의 도움을 받아 효율적으로 작업할 수 있습니다.\n클로드 3.5 소넷을 기반으로 한 이 프로젝트는 AI와의 협업을 새로운 차원으로 끌어올리는 획기적인 도구입니다. 단순한 질의응답을 넘어, 복잡한 프로젝트 관리와 팀 협업을 위한 다양한 기능을 제공합니다.\n클로드 프로젝트 (Claude Projects) 주요 특징\n맞춤형 Custom Instructions 설정\n맞춤형 지식 기반 구축\n200K 컨텍스트 창 지원 (약 500페이지 분량)\n팀 공유 기능\n아티팩트(Artifacts) 생성 기능\n이러한 특징들을 통해 클로드 프로젝트는 단순한 챗봇을 넘어 진정한 AI 협업 도구로 자리매김하고 있습니다.\n \n \n2. GPTs와 같은 맞춤형 클로드 사용법\n클로드 프로젝트의 핵심 기능을 \"SEO 요건을 만족하는 IT 제품리뷰 블로그 기사 작성\" 예시를 통해 살펴보겠습니다.\n\n\nProject knowledge 설정\nIT 제품리뷰 블로그를 위한 클로드 프로젝트를 설정할 때, Project knowledge 라 불리는 다음과 같은 Custom Instructions을 사용할 수 있습니다.\n\n\n맞춤형 지식 기반 구축\nIT 제품리뷰 블로그를 위해 다음과 같은 텍스트나 PDF등의 자료를 클로드 프로젝트에 업로드하여 맞춤형 지식 기반을 구축할 수 있습니다:\n구글 상위 노출에 최적화된 블로그 기사를 작성하는 방법\nIT 제품 리뷰 블로그 기사 예시\n이를 통해 클로드는 최신 제품 정보, 리뷰 작성 스타일, 그리고 SEO 최적화 요령을 학습하게 됩니다.\n \n \n \n3. 클로드 프로젝트로 챗봇 만들기 \n클로드 프로젝트를 이용하여 '구글 상위노출 IT 제품 리뷰 블로그 기사 작성' 챗봇을 만드는 과정을 소개합니다.\n \n맞춤형 지식 사전 생성\n1. IT 제품리뷰 블로그를 위해 Claude 가 사전에 학습할 지식을 추가합니다. 이 또한 Claude를 통해 만들 수 있습니다.\n \n  a. 먼저 '구글 상위 노출에 최적화된 블로그 기사를 작성하는 방법'을 작성하게 합니다. ▼\n\n\n\n \n \n  b. 위의 내용을 기반으로 'IT 제품 리뷰 블로그 기사를 작성할 때 SEO를 고려한 작성 지침'을 만듭니다. ▼\n\n\n \n \n  c. 마지막으로 위의 치침을 기반으로 템플릿으로 계속 사용할 이상적인 '블로그 기사 예시'를 생성합니다. 이 3가지 결과물을 pdf 또는 txt 파일로 저장합니다. ▼\n\n\n \n \n프로젝트 만들기\n1. Claude 좌측 메뉴에서 \"Projects'를 클릭합니다. ▼\n\n\n \n \n2. Projects 화면에서 우측 상단의 '프로젝트 생성' 버튼을 클릭합니다. ▼\n\n\n \n \n3. 프로젝트의 이름과 간단한 설명을 작성합니다. ▼\n\n\n \n \n4.  다음 화면에서 우측의 'Add Content'를 클릭하여 위에서 생성한 3개의 pdf 를 업로드 합니다. ▼\n\n\n \n \n5. 이제  Project 의 세부 지침을 설정하기 위해 'Set custom instructions'를 클릭한 후 아래 예시와 같이 사용자 지침을 입력한 후 저장합니다.▼\n\n\n \n \n6. 완성된 프로젝트를 테스트 한 결과입니다. 상품명, 제품 스펙, 제품사진만으로 상세한 제품리뷰기사가 작성된 것을 확인할 수 있습니다. ▼\n\n\n \n \n4. 결론\n 클로드 프로젝트는 GPTs와 같은 기존 도구들과 비교해 더 넓은 컨텍스트 이해, 강력한 커스터마이징, 그리고 팀 협업 기능 등 여러 장점을 제공합니다. 앞으로 클로드 프로젝트가 어떻게 발전하고, 우리의 업무 방식을 어떻게 변화시킬지 지켜보는 것도 흥미로울 것 같습니다.",
        "guid": "http://muzbox.tistory.com/483453",
        "categories": [
          "AI, 미래기술/채팅",
          "claude projects",
          "gpts",
          "인공지능",
          "클로드",
          "클로드 프로젝트",
          "클로드3.5"
        ],
        "isoDate": "2024-08-01T04:58:04.000Z"
      }
    ]
  },
  {
    "name": "동우리의 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "하테나",
    "category": "개인",
    "posts": []
  },
  {
    "name": "늑돌이네 라지온",
    "category": "개인",
    "posts": [
      {
        "creator": "늑돌이",
        "title": "삼성, 8세대 V낸드 8단 1TB TLC 마이크로SD PRO Plus, EVO Plus 메모리 카드 출시",
        "link": "https://lazion.com/2513721",
        "pubDate": "Thu, 1 Aug 2024 14:37:35 +0900",
        "author": "늑돌이",
        "comments": "https://lazion.com/2513721#entry2513721comment",
        "content": "<h3 data-ke-size=\"size23\">삼성전자가 <b>1TB 마이크로SD</b> 카드인 <b>PRO Plus</b>와<b> EVO Plus</b>를 출시합니다.</h3>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"1028147215_20240801100625_6507580520.jpg\" data-origin-width=\"1000\" data-origin-height=\"563\"><span data-url=\"https://blog.kakaocdn.net/dn/DpLeM/btsITi3Uo9i/iworxiLPUAkl9JDdsZ5uck/img.jpg\" data-phocus=\"https://blog.kakaocdn.net/dn/DpLeM/btsITi3Uo9i/iworxiLPUAkl9JDdsZ5uck/img.jpg\"><img src=\"https://blog.kakaocdn.net/dn/DpLeM/btsITi3Uo9i/iworxiLPUAkl9JDdsZ5uck/img.jpg\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FDpLeM%2FbtsITi3Uo9i%2FiworxiLPUAkl9JDdsZ5uck%2Fimg.jpg\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"1028147215_20240801100625_6507580520.jpg\" data-origin-width=\"1000\" data-origin-height=\"563\"/></span></figure>\n</p>\n<p data-ke-size=\"size16\">1Tb TLC(Triple Level Cell) 8세대 V낸드를 8단으로 쌓아 패키징한 PRO Plus와 EVO Plus 1TB 마이크로SD 메모리 카드는 각각 초당 최대 180MB(메가바이트), 160MB의 연속 읽기 속도를 제공하며 기존 최대 용량이었던 512MB에서 두배의 용량을 자랑합니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">두 제품은 28나노 컨트롤러를 통해 전력 효율을 개선해 배터리 소모량을 줄였으며 ECC(Error Correction Code) 엔진의 한 종류인 LDPC(Low Density Parity Check) 크기를 1KB에서 2KB로 늘려 데이터 유실을 최소화하고 제품 신뢰성을 높였습니다.</p>\n<p data-ke-size=\"size16\"><br />속도 면에서도 PRO Plus와 EVO Plus 1TB 제품은 UHS 스피드 클래스 3(<b>U3</b>)*, 비디오 스피드 클래스 30(<b>V30</b>)**, <b>A2</b>*** 등급을 갖추었습니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">삼성전자의 새로운 마이크로SD <b>PRO Plus와 EVO Plus 1TB 제품의 가격은 각각 $125.99(약 17만2천원), $115.99(약 15만 8천원)</b>입니다.</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<blockquote data-ke-style=\"style3\">관련 용어<br /><br />*UHS 스피드 클래스 3(U3) : SD 어소시에이션에서 규정한 고성능 메모리카드 속도 규격. U3는 최소 초당 30MB의 쓰기속도를 규정해 풀HD 촬영에 최적의 조건을 제공.<br /><br />** 비디오 스피드 클래스(V30) : UHS 인터페이스 제품에 실시간 비디오 녹화를 지원하는 고속 비디오 전송 속도를 의미. V30은 30MB/s의 연속 쓰기 속도를 지원<br /><br />*** A2(Application Performance Class) : 메모리카드의 임의 읽기/쓰기 속도에 대한 규격. A2 규격은 최소 4000 IOPS 임의 읽기 속도와 2000 IOPS의 임의 쓰기 속도를 지원</blockquote>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p style=\"text-align: right;\" data-ke-size=\"size16\">(출처 : <a href=\"https://www.samsung.com/sec/\" target=\"_blank\" rel=\"noopener\">삼성전자</a>)</p>\n<p data-ke-size=\"size16\">&nbsp;</p>",
        "contentSnippet": "삼성전자가 1TB 마이크로SD 카드인 PRO Plus와 EVO Plus를 출시합니다.\n\n\n1Tb TLC(Triple Level Cell) 8세대 V낸드를 8단으로 쌓아 패키징한 PRO Plus와 EVO Plus 1TB 마이크로SD 메모리 카드는 각각 초당 최대 180MB(메가바이트), 160MB의 연속 읽기 속도를 제공하며 기존 최대 용량이었던 512MB에서 두배의 용량을 자랑합니다.\n \n두 제품은 28나노 컨트롤러를 통해 전력 효율을 개선해 배터리 소모량을 줄였으며 ECC(Error Correction Code) 엔진의 한 종류인 LDPC(Low Density Parity Check) 크기를 1KB에서 2KB로 늘려 데이터 유실을 최소화하고 제품 신뢰성을 높였습니다.\n속도 면에서도 PRO Plus와 EVO Plus 1TB 제품은 UHS 스피드 클래스 3(U3)*, 비디오 스피드 클래스 30(V30)**, A2*** 등급을 갖추었습니다.\n \n삼성전자의 새로운 마이크로SD PRO Plus와 EVO Plus 1TB 제품의 가격은 각각 $125.99(약 17만2천원), $115.99(약 15만 8천원)입니다.\n \n관련 용어\n*UHS 스피드 클래스 3(U3) : SD 어소시에이션에서 규정한 고성능 메모리카드 속도 규격. U3는 최소 초당 30MB의 쓰기속도를 규정해 풀HD 촬영에 최적의 조건을 제공.\n** 비디오 스피드 클래스(V30) : UHS 인터페이스 제품에 실시간 비디오 녹화를 지원하는 고속 비디오 전송 속도를 의미. V30은 30MB/s의 연속 쓰기 속도를 지원\n*** A2(Application Performance Class) : 메모리카드의 임의 읽기/쓰기 속도에 대한 규격. A2 규격은 최소 4000 IOPS 임의 읽기 속도와 2000 IOPS의 임의 쓰기 속도를 지원\n \n(출처 : 삼성전자)",
        "guid": "https://lazion.com/2513721",
        "categories": [
          "#주변기기/#메모리#저장장치#보안",
          "1TB",
          "EVO PLUS",
          "flash",
          "MICROSD",
          "News",
          "PRO Plus",
          "Samsung",
          "SEC"
        ],
        "isoDate": "2024-08-01T05:37:35.000Z"
      }
    ]
  },
  {
    "name": "루리웹 - 루리웹 리뷰 게시판",
    "category": "게임",
    "posts": [
      {
        "creator": "｜RULIWEB｜",
        "title": "[게임툰] 세계가 망한 것 치곤 사람이 많네, 원스 휴먼",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2237",
        "pubDate": "Wed, 31 Jul 2024 18:56:01 +0900",
        "author": "｜RULIWEB｜",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i3.ruliweb.com/thumb/24/07/31/1910856774551ad6b.jpg\">",
        "contentSnippet": "",
        "categories": [
          "게임툰"
        ],
        "isoDate": "2024-07-31T09:56:01.000Z"
      },
      {
        "creator": "(RULIWEB`Д')/",
        "title": "[MULTI] 차이나조이 2024, 관련 기사 종합",
        "link": "https://bbs.ruliweb.com/news/board/11/read/2236",
        "pubDate": "Wed, 31 Jul 2024 18:38:32 +0900",
        "author": "(RULIWEB`Д')/",
        "content": "<img width=\"236\" height=\"177\" src=\"https://i2.ruliweb.com/thumb/24/07/31/191080502a14c329e.jpg\">",
        "contentSnippet": "",
        "categories": [
          "특집"
        ],
        "isoDate": "2024-07-31T09:38:32.000Z"
      }
    ]
  },
  {
    "name": "Reasontobe",
    "category": "개인",
    "posts": []
  },
  {
    "name": "자유로운 생활",
    "category": "개인",
    "posts": []
  },
  {
    "name": "에스티마의 인터넷이야기 EstimaStory.com",
    "category": "개인",
    "posts": []
  },
  {
    "name": "나긋한 개발 - 데비안 리눅스와 프로그램 언어",
    "category": "개인",
    "posts": []
  },
  {
    "name": "일상을 여행처럼...",
    "category": "개인",
    "posts": []
  },
  {
    "name": "khris'log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Just hack'em",
    "category": "개인",
    "posts": []
  },
  {
    "name": "C++ Truths",
    "category": "개인",
    "posts": []
  },
  {
    "name": "jacking75",
    "category": "개인",
    "posts": [
      {
        "title": "golang - Go에서 text/template 을 사용하여 문서 만들기",
        "link": "https://jacking75.github.io/go_20240806/",
        "pubDate": "Tue, 06 Aug 2024 00:00:00 +0900",
        "content": "<iframe width=\"1024\" height=\"1024\" src=\"https://docs.google.com/document/d/e/2PACX-1vT0sm3PW19IAPBwHeP7zCbUh9HGHn6TisJC3lQZIORISgNF3tEGv1HKR8rNvWJ7x4sW-noX-y_AH31W/pub?embedded=true\"></iframe>\n\n",
        "contentSnippet": "",
        "guid": "https://jacking75.github.io/go_20240806/",
        "isoDate": "2024-08-05T15:00:00.000Z"
      }
    ]
  },
  {
    "name": "Joel on Software",
    "category": "개인",
    "posts": []
  },
  {
    "name": "벤자민로그",
    "category": "개인",
    "posts": [
      {
        "title": "주말 출근",
        "link": "https://jeho.page/essay/2024/08/04/weekend-work.html",
        "pubDate": "2024-08-04T11:41:00.000Z",
        "author": "김재호",
        "content": "<p>신입사원 때.<br />\n주말 출근하는 걸 참 좋아했습니다.<br />\n토요일, 일요일엔 느즈막이 일어나서 회사로 출근했습니다.<br />\n회사 앞 맥도날드에서 햄버거를 하나 사서 들어가는 게 저의 행복이었습니다.</p>\n\n<p>한 3년 정도 그렇게 한 것 같습니다.</p>\n\n<p>코딩은 거의 안 했습니다.<br />\n회사 일을 하러 간 건 아니었으니까.</p>\n\n<p>아무도 없는 사무실에서 책상 위에 두 다리를 올리고 책을 읽고.<br />\n나중에 보려고 저장해 놨던 블로그들도 읽어보고.<br />\n웹서핑도 하고.<br />\n책상 앞에 앉아 있으면 마음이 그렇게 편안했습니다.</p>\n\n<p>가족들이 처가 댁에 가서 오랜만에 혼자 있는 시간을 가졌습니다.<br />\n뭘 하고 지내면 좋을까 하다가 사무실에 출근하기로 했습니다.<br />\n정말 오랜만에 토요일 일요일을 혼자 사무실에서 보냈습니다.<br />\n그때랑 똑같이 편안하고 좋습니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2022/08/29/feel-comfortable.html\">언제쯤이면 편해질 수 있을까요?</a></li>\n  <li><a href=\"/essay/2023/08/01/summer-vacation.html\">여름 휴가는 회사가 최고지</a></li>\n</ul>",
        "contentSnippet": "신입사원 때.\n한 3년 정도 그렇게 한 것 같습니다.\n코딩은 거의 안 했습니다.\n아무도 없는 사무실에서 책상 위에 두 다리를 올리고 책을 읽고.\n가족들이 처가 댁에 가서 오랜만에 혼자 있는 시간을 가졌습니다.\n\n함께 읽으면 좋은 글:\n언제쯤이면 편해질 수 있을까요?\n여름 휴가는 회사가 최고지",
        "summary": "신입사원 때. 주말 출근하는 걸 참 좋아했습니다. 토요일, 일요일엔 느즈막이 일어나서 회사로 출근했습니다. 회사 앞 맥도날드에서 햄버거를 하나 사서 들어가는 게 저의 행복이었습니다.",
        "id": "https://jeho.page/essay/2024/08/04/weekend-work",
        "isoDate": "2024-08-04T11:41:00.000Z"
      },
      {
        "title": "휴가 기간엔 사무실이 최고",
        "link": "https://jeho.page/essay/2024/08/03/library-vacation.html",
        "pubDate": "2024-08-03T06:18:00.000Z",
        "author": "김재호",
        "content": "<p>어릴 적부터 이상했습니다.<br />\n왜 사람들은 가장 더울 때 휴가를 갈까?<br />\n숨도 턱턱 막힐 정도로 더운데.<br />\n게다가 비싼 웃돈까지 주고.</p>\n\n<p>오래전 에어컨도 없던 시절,<br />\n일도 못할 정도로 더우니 차라리 (강제로) 휴가나 가라고 한 것이 시작 아니었을까?</p>\n\n<p>이렇게 더운 날 휴가를 가는 게 좋아서 가는 것만은 아닐 겁니다.<br />\n아이들이 방학을 해서.<br />\n회사에서 휴가를 강요해서.</p>\n\n<p>요즘엔 실내가 더 시원해서 한여름엔 회사나 학교에 가는 게 더 좋은 것 같습니다.<br />\n다들 휴가를 떠난 조용한 사무실에서 일하는 것을 좋아했습니다.<br />\n1인 개발자로 지내는 지금도 여전히 그렇습니다.<br />\n35도의 더위에 시원한 사무실에 와서 앉아 있으니 천국이 여기인 것 같습니다.</p>\n\n<p>남들 따라 하지 않고 살게 되면서 좋은 점은 내가 가고 싶을 때 휴가를 갈 수 있다는 것.<br />\n4월과 5월 그리고 9월과 10월.<br />\n국내 여행은 이때 주로 갑니다.<br />\n천천히 길을 걷기만 해도 행복하다는 느낌이 드는 계절.<br />\n이런 계절이야말로 ‘성수기’ 요금을 받아야 하는 건데.</p>\n\n<p>뭔가 거꾸로 됐습니다.<br />\n<a href=\"https://brunch.co.kr/@buildingking/87\">거꾸로 사는</a> 저에게는 좋은 일입니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2023/08/01/summer-vacation.html\">여름 휴가는 회사가 최고지</a></li>\n  <li><a href=\"https://brunch.co.kr/@buildingking/87\">남들과 반대로 살기</a></li>\n</ul>",
        "contentSnippet": "어릴 적부터 이상했습니다.\n오래전 에어컨도 없던 시절,\n이렇게 더운 날 휴가를 가는 게 좋아서 가는 것만은 아닐 겁니다.\n요즘엔 실내가 더 시원해서 한여름엔 회사나 학교에 가는 게 더 좋은 것 같습니다.\n남들 따라 하지 않고 살게 되면서 좋은 점은 내가 가고 싶을 때 휴가를 갈 수 있다는 것.\n뭔가 거꾸로 됐습니다.\n거꾸로 사는 저에게는 좋은 일입니다.\n\n함께 읽으면 좋은 글:\n여름 휴가는 회사가 최고지\n남들과 반대로 살기",
        "summary": "어릴 적부터 이상했습니다. 왜 사람들은 가장 더울 때 휴가를 갈까? 숨도 턱턱 막힐 정도로 더운데. 게다가 비싼 웃돈까지 주고.",
        "id": "https://jeho.page/essay/2024/08/03/library-vacation",
        "isoDate": "2024-08-03T06:18:00.000Z"
      },
      {
        "title": "1년에 몇 개나 커밋하세요?",
        "link": "https://jeho.page/essay/2024/08/01/commit-count.html",
        "pubDate": "2024-07-31T17:02:00.000Z",
        "author": "김재호",
        "content": "<p>한 해 동안 커밋을 몇 개 정도 했나 살펴보는 걸 좋아합니다.<br />\n열심히 살았다는 증거이니까.</p>\n\n<p>오래전부터 그랬던 것 같습니다.<br />\n가끔 이렇게 캡처도 해놓은 걸 보면요.</p>\n\n<p><img src=\"/assets/img/2015_commit.png\" alt=\"2015년 커밋\" /><br />\n<em>2015년, 카카오플레이스를 만들 때</em></p>\n\n<p>커밋을 많이 한다는 것에 아주 특별한 의미를 부여하는 건 아닙니다만…<br />\n그래도 스스로의 노력을 측정하기 위해 대략적인 개수 정도는 알고 싶습니다.</p>\n\n<p>물론 커밋을 잘게 잘게 쪼개는 걸 좋아하는 스타일도 있고,<br />\n합쳐서 하는 스타일도 있기 때문에 다른 사람들의 개수와 비교할 필요는 없습니다.</p>\n\n<p>회사 다닐 때는 2,000개 정도를 했던 것 같습니다.<br />\n가장 많이 했던 해에는 4,000개.<br />\n아마 카톡 서버를 만들던 2013년이나 2014년.</p>\n\n<p>최근 5년 동안은 어땠는지도 한 번 살펴봤습니다.\n<img src=\"/assets/img/commits.png\" alt=\"최근 5년 동안의 커밋\" /><br />\n<em>회사를 그만두고 최근 5년간 평균 커밋은 약 1,200개</em></p>\n\n<p>매일 조금씩이라도 코딩하려 노력하고는 있지만, 회사를 그만둔 이후로는 2,000개를 넘기기가 힘듭니다.<br />\n2023년에는 1,000개도 못 채웠네요. (많이 놀러 다니긴 했습니다 😂)<br />\n잔디는 빽빽하게 잘 차있더라도 집중도에서 크게 차이가 나는 것.</p>\n\n<p>매일 회사에 출근한다는 것이 개발자로서 얼마나 유리한 것인가 생각이 들기도 하고…<br />\n좀 더 열심히 해서 다시 2,000개를 채워 보고 싶다는 생각도 듭니다.</p>\n\n<p><br />\n<em>함께 읽으면 좋은 글:</em></p>\n<ul>\n  <li><a href=\"/essay/2022/01/05/daily-coding.html\">매일매일 코딩하기</a></li>\n</ul>",
        "contentSnippet": "한 해 동안 커밋을 몇 개 정도 했나 살펴보는 걸 좋아합니다.\n오래전부터 그랬던 것 같습니다.\n\n2015년, 카카오플레이스를 만들 때\n커밋을 많이 한다는 것에 아주 특별한 의미를 부여하는 건 아닙니다만…\n물론 커밋을 잘게 잘게 쪼개는 걸 좋아하는 스타일도 있고,\n회사 다닐 때는 2,000개 정도를 했던 것 같습니다.\n최근 5년 동안은 어땠는지도 한 번 살펴봤습니다.\n\n회사를 그만두고 최근 5년간 평균 커밋은 약 1,200개\n매일 조금씩이라도 코딩하려 노력하고는 있지만, 회사를 그만둔 이후로는 2,000개를 넘기기가 힘듭니다.\n매일 회사에 출근한다는 것이 개발자로서 얼마나 유리한 것인가 생각이 들기도 하고…\n\n함께 읽으면 좋은 글:\n매일매일 코딩하기",
        "summary": "한 해 동안 커밋을 몇 개 정도 했나 살펴보는 걸 좋아합니다. 열심히 살았다는 증거이니까.",
        "id": "https://jeho.page/essay/2024/08/01/commit-count",
        "isoDate": "2024-07-31T17:02:00.000Z"
      }
    ]
  },
  {
    "name": "악보쓰는 프로그래머",
    "category": "개인",
    "posts": []
  },
  {
    "name": "쭌안아빠",
    "category": "개인",
    "posts": []
  },
  {
    "name": "A Gangster World",
    "category": "개인",
    "posts": []
  },
  {
    "name": "요우의 내맘대로 블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자스럽다",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Against All Odds.",
    "category": "개인",
    "posts": []
  },
  {
    "name": "움직이는 게임서버",
    "category": "개인",
    "posts": []
  },
  {
    "name": "이상욱",
    "category": "개인",
    "posts": []
  },
  {
    "name": "임철재",
    "category": "개인",
    "posts": []
  },
  {
    "name": "어쩐지 오늘은",
    "category": "개인",
    "posts": []
  },
  {
    "name": "oddpoet’s étude",
    "category": "개인",
    "posts": []
  },
  {
    "name": "0x00 - NULL",
    "category": "개인",
    "posts": []
  },
  {
    "name": "퇴근 후 서버다운",
    "category": "개인",
    "posts": []
  },
  {
    "name": "coolspeed",
    "category": "개인",
    "posts": []
  },
  {
    "name": "오늘도 끄적끄적",
    "category": "개인",
    "posts": []
  },
  {
    "name": "dx11 Vanica's Lifelog - 夢が夢で終わらないように",
    "category": "개인",
    "posts": []
  },
  {
    "name": "초코사랑",
    "category": "개인",
    "posts": []
  },
  {
    "name": "ZeroCho Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Hybrid's Notes",
    "category": "개인",
    "posts": []
  },
  {
    "name": "imays게임엔진개발자",
    "category": "개인",
    "posts": []
  },
  {
    "name": "RSS feed for hurinmon Blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "기억보단 기록을",
    "category": "개인",
    "posts": [
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "행복한 일들은 매일 있다",
        "link": "http://jojoldu.tistory.com/795",
        "pubDate": "Mon, 5 Aug 2024 22:58:03 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "http://jojoldu.tistory.com/795#entry795comment",
        "content": "<p data-ke-size=\"size16\">예전에 곰돌이 푸? 동화에서 봤던 것 같은데,<br />다음의 글귀가 오래 오래 기억에 남았다.</p>\n<p data-ke-size=\"size16\">\"<b>매일 매일 행복할 순 없지만, 행복한 일은 매일 매일 있다</b>.\"</p>\n<p data-ke-size=\"size16\">구내 식당에 내가 좋아하는 메뉴가 나왔을 때,<br />횡단보도에 도착하자마자 신호가 바뀔 때,<br />헬스장에서 내가 좋아하는 노래가 나올 때 등등<br />사소한 행복한 일들이 많다.</p>\n<p><figure class=\"imageblock alignCenter\" data-ke-mobileStyle=\"widthOrigin\" data-filename=\"1.png\" data-origin-width=\"1084\" data-origin-height=\"1120\"><span data-url=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" data-phocus=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" data-alt=\"아침 식사가 너무 맛있었던 날\"><img src=\"https://blog.kakaocdn.net/dn/ylXaz/btsIWaYYGIF/RFQDtEuGxVXbX54MhU8WE0/img.png\" srcset=\"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FylXaz%2FbtsIWaYYGIF%2FRFQDtEuGxVXbX54MhU8WE0%2Fimg.png\" onerror=\"this.onerror=null; this.src='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png'; this.srcset='//t1.daumcdn.net/tistory_admin/static/images/no-image-v1.png';\" data-filename=\"1.png\" data-origin-width=\"1084\" data-origin-height=\"1120\"/></span><figcaption>아침 식사가 너무 맛있었던 날</figcaption>\n</figure>\n</p>\n<p data-ke-size=\"size16\">&nbsp;</p>\n<p data-ke-size=\"size16\">하지만 이런 사소하지만 누가 봐도 좋은 것들이 아니더라도,<br />하루의 대부분은 행복한 일들이다.</p>\n<p data-ke-size=\"size16\">회의가 많은 날은 회의실 이동하느라 많이 걸어 1만보를 채우기 위해 굳이 따로 시간을 낼 필요가 없어서 좋다.<br />일이 많아 늦게 가는 날은 비싼 저녁 식사를 먹을 수 있고, 집까지 택시로 갈 수 있어서 좋다.<br />오전 회의가 늦게 끝나 점심을 늦게 먹는 날은 혼자서 조용히 식사를 하면서 생각을 정리할 수 있어서 좋다.</p>\n<p data-ke-size=\"size16\"><b>행복한 것도 습관이다</b>.<br />작은 것에도 행복한 것을 습관으로 들이지 않으면,<br />큰 돈을 벌어도,<br />높은 지위에 올라도,<br />내가 원하는 어떠한 무언가를 얻는 그러한 아주 큰 쾌락이 와도 그걸 행복으로 만들 수 없다.</p>\n<p data-ke-size=\"size16\">행복한 일은 매일 매일 있다.</p>",
        "contentSnippet": "예전에 곰돌이 푸? 동화에서 봤던 것 같은데,\n다음의 글귀가 오래 오래 기억에 남았다.\n\"매일 매일 행복할 순 없지만, 행복한 일은 매일 매일 있다.\"\n구내 식당에 내가 좋아하는 메뉴가 나왔을 때,\n횡단보도에 도착하자마자 신호가 바뀔 때,\n헬스장에서 내가 좋아하는 노래가 나올 때 등등\n사소한 행복한 일들이 많다.\n아침 식사가 너무 맛있었던 날\n\n\n \n하지만 이런 사소하지만 누가 봐도 좋은 것들이 아니더라도,\n하루의 대부분은 행복한 일들이다.\n회의가 많은 날은 회의실 이동하느라 많이 걸어 1만보를 채우기 위해 굳이 따로 시간을 낼 필요가 없어서 좋다.\n일이 많아 늦게 가는 날은 비싼 저녁 식사를 먹을 수 있고, 집까지 택시로 갈 수 있어서 좋다.\n오전 회의가 늦게 끝나 점심을 늦게 먹는 날은 혼자서 조용히 식사를 하면서 생각을 정리할 수 있어서 좋다.\n행복한 것도 습관이다.\n작은 것에도 행복한 것을 습관으로 들이지 않으면,\n큰 돈을 벌어도,\n높은 지위에 올라도,\n내가 원하는 어떠한 무언가를 얻는 그러한 아주 큰 쾌락이 와도 그걸 행복으로 만들 수 없다.\n행복한 일은 매일 매일 있다.",
        "guid": "http://jojoldu.tistory.com/795",
        "categories": [
          "생각정리",
          "스타트업",
          "인프랩",
          "커리어",
          "회사 생활"
        ],
        "isoDate": "2024-08-05T13:58:03.000Z"
      },
      {
        "creator": "향로 (기억보단 기록을)",
        "title": "&quot;개발자도 회사의 조직원이다&quot; 를 보고",
        "link": "http://jojoldu.tistory.com/794",
        "pubDate": "Thu, 1 Aug 2024 09:22:36 +0900",
        "author": "향로 (기억보단 기록을)",
        "comments": "http://jojoldu.tistory.com/794#entry794comment",
        "content": "<p data-ke-size=\"size16\">최근에 배기홍 대표님의 아래 글을 보았다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li><a href=\"https://www.thestartupbible.com/2024/03/business-before-technology.html\">THE STARTUP BIBLE - 개발자도 회사의 조직원이다</a></li>\n</ul>\n<p data-ke-size=\"size16\">배기홍 대표님의 글은 항상 생각할거리를 던져주셔서 재밌게 보는데, 이번 글은 요즘의 불황시기에 겹쳐서 많이 언급되는 주제라 한번 더 생각하게 되었다.</p>\n<p data-ke-size=\"size16\">글은 개발자가 아닌 VC 분들이나 대표님 혹은 조직의 리더라면 충분히 이야기할 수 있는 주제인 것 같다.</p>\n<p data-ke-size=\"size16\">핵심으로 생각되는 문장은 다음과 같다.</p>\n<blockquote data-ke-style=\"style2\">\n<p data-ke-size=\"size16\">어떻게 생각해 보면 너무나 당연한데,<br />우리 주변, 또는 우리 회사의 많은 개발자들이 그냥 본인들이 풀고 싶은 문제를 풀고, 본인들이 개발하고 싶은 기능을 개발하고, 기술적으로 어려운 문제를 코드로 미화하고 싶어 한다.<br />단순히 엔지니어링 측면에서 보면 이게 대단하게 보일 수도 있지만,<br />이런 <b>결과물들이 회사의 경영진들이 설정한 핵심 지표와 연관 없다면</b>,<br /><b>이들은 조직에 전혀 기여하지 못하고, 오히려 스타트업을 좀 먹고 있는 존재들</b>이다.<br />...<br />이런 지적을 받았지만, 개선되지 않는다면 이런 분들은 회사에서 해고해야 한다.<br /><b>개발자들도 회사의 조직원이고, 모든 스타트업 조직원의 목표는 단 하나다</b>.<br /><b>좋은 제품을 만들어서 돈을 버는 것이다</b>.<br />...<br />우리 같은 투자자는 좋은 개발자에게 투자하는 것도 아니고, 좋은 기술에 투자하는 것도 아니다.<br /><b>이 기술과 개발력이 만들 좋은 비즈니스의 가능성에 투자하는 것</b>이다.<br />비즈니스와는 상관없는 코딩과 기술에만 집착하는 사람들은 회사에서 일하지 말고 그냥 학교에서 공부하거나 연구소에서 연구하는 걸 권장한다.<br />우리는 이 코드가 만드는 제품, 그 제품이 만드는 사업, 그리고 그 사업이 만드는 매출에만 관심 있다.</p>\n</blockquote>\n<p data-ke-size=\"size16\">나도 당연히 팀원일때는 이런 이야기가 보이면 감정적이게 되고, 방어적인 태도를 취했다.</p>\n<ul style=\"list-style-type: disc;\" data-ke-list-type=\"disc\">\n<li>개발자들이 이야기하는 리팩토링에 대해서 경영진이 너무 중요성을 모른다던가</li>\n<li>정말 그렇게까지 사업의 방향성을 이해못하는 순진무구한 개발자가 세상에 얼마나 된다던가</li>\n<li>일부의 사례를 가지고 직군 전체를 다 매도하고 있다던가</li>\n</ul>\n<p data-ke-size=\"size16\">등등의 일단 부정적인 감정부터 들었다.</p>\n<p data-ke-size=\"size16\">하지만 매니저 역할을 하고나서부터는 이런 주제에 대해서 좀 더 드라이하게 바라볼 수 있게 되었다.<br />\"~~류의 개발자라면 당장 해고해야한다\" 와 같이 문장이 날 서있는 것 같아도 그럼에도 전달하고자 하시는 것이 무엇인지 명확히 이해가 된다.</p>\n<p data-ke-size=\"size16\">그리고 \"이런건 왜 개발직군이 대상일때가 많을까\" 하는 생각도 들었다.</p>\n<p data-ke-size=\"size16\">모든 직군이 제품과 사업에 이득이 되는 일을 해야하는 것은 너무나 당연하다.<br />다만 개발직군은 그 특성상 <b>개발자 작업물 내부의 비효율을 개선하는 작업이 실제 제품과 사업에 얼마나 기여하는지 증명하기가 어렵다</b>.</p>\n<p data-ke-size=\"size16\">그러다보니 기술과 사업, 제품에 두루두루 이해도가 있고 다른 C레벨과 합리적으로 의견을 나눌 수 있는 CTO가 있는 조직을 대부분 선호한다.<br />이런 CTO가 있는 조직과 아닌 조직은 의사 결정 과정이 크게 다를 수 밖에 없고, 좋지 못한 경험을 한번이라도 해본 실무자들은 가능한 CTO가 있는 조직에 합류하려고 한다.</p>\n<p data-ke-size=\"size16\">근데 이게 꼭 개발 직군에만 해당할까?<br />조직 전반의 사업적 방향과 맞지 않는 자신만의 취향을 고집하는 PM, PO도 계시고,<br />본인의 디자인 취향에 매몰된 디자이너 분들이 계시고,<br />그로쓰 도구와 방법론에 심취한 마케터, 데이터 분석가 분들도 계신다.</p>\n<p data-ke-size=\"size16\">요즘 주변 스타트업의 여러 직군들과 이야기를 나누다 보면 이 지점이 항상 궁금하다.<br />그리고 함께 일했던 타 직군분들은 나를, 그리고 우리팀을 어떻게 평가할지도 궁금해졌다.</p>",
        "contentSnippet": "최근에 배기홍 대표님의 아래 글을 보았다.\nTHE STARTUP BIBLE - 개발자도 회사의 조직원이다\n배기홍 대표님의 글은 항상 생각할거리를 던져주셔서 재밌게 보는데, 이번 글은 요즘의 불황시기에 겹쳐서 많이 언급되는 주제라 한번 더 생각하게 되었다.\n글은 개발자가 아닌 VC 분들이나 대표님 혹은 조직의 리더라면 충분히 이야기할 수 있는 주제인 것 같다.\n핵심으로 생각되는 문장은 다음과 같다.\n어떻게 생각해 보면 너무나 당연한데,\n우리 주변, 또는 우리 회사의 많은 개발자들이 그냥 본인들이 풀고 싶은 문제를 풀고, 본인들이 개발하고 싶은 기능을 개발하고, 기술적으로 어려운 문제를 코드로 미화하고 싶어 한다.\n단순히 엔지니어링 측면에서 보면 이게 대단하게 보일 수도 있지만,\n이런 결과물들이 회사의 경영진들이 설정한 핵심 지표와 연관 없다면,\n이들은 조직에 전혀 기여하지 못하고, 오히려 스타트업을 좀 먹고 있는 존재들이다.\n...\n이런 지적을 받았지만, 개선되지 않는다면 이런 분들은 회사에서 해고해야 한다.\n개발자들도 회사의 조직원이고, 모든 스타트업 조직원의 목표는 단 하나다.\n좋은 제품을 만들어서 돈을 버는 것이다.\n...\n우리 같은 투자자는 좋은 개발자에게 투자하는 것도 아니고, 좋은 기술에 투자하는 것도 아니다.\n이 기술과 개발력이 만들 좋은 비즈니스의 가능성에 투자하는 것이다.\n비즈니스와는 상관없는 코딩과 기술에만 집착하는 사람들은 회사에서 일하지 말고 그냥 학교에서 공부하거나 연구소에서 연구하는 걸 권장한다.\n우리는 이 코드가 만드는 제품, 그 제품이 만드는 사업, 그리고 그 사업이 만드는 매출에만 관심 있다.\n나도 당연히 팀원일때는 이런 이야기가 보이면 감정적이게 되고, 방어적인 태도를 취했다.\n개발자들이 이야기하는 리팩토링에 대해서 경영진이 너무 중요성을 모른다던가\n정말 그렇게까지 사업의 방향성을 이해못하는 순진무구한 개발자가 세상에 얼마나 된다던가\n일부의 사례를 가지고 직군 전체를 다 매도하고 있다던가\n등등의 일단 부정적인 감정부터 들었다.\n하지만 매니저 역할을 하고나서부터는 이런 주제에 대해서 좀 더 드라이하게 바라볼 수 있게 되었다.\n\"~~류의 개발자라면 당장 해고해야한다\" 와 같이 문장이 날 서있는 것 같아도 그럼에도 전달하고자 하시는 것이 무엇인지 명확히 이해가 된다.\n그리고 \"이런건 왜 개발직군이 대상일때가 많을까\" 하는 생각도 들었다.\n모든 직군이 제품과 사업에 이득이 되는 일을 해야하는 것은 너무나 당연하다.\n다만 개발직군은 그 특성상 개발자 작업물 내부의 비효율을 개선하는 작업이 실제 제품과 사업에 얼마나 기여하는지 증명하기가 어렵다.\n그러다보니 기술과 사업, 제품에 두루두루 이해도가 있고 다른 C레벨과 합리적으로 의견을 나눌 수 있는 CTO가 있는 조직을 대부분 선호한다.\n이런 CTO가 있는 조직과 아닌 조직은 의사 결정 과정이 크게 다를 수 밖에 없고, 좋지 못한 경험을 한번이라도 해본 실무자들은 가능한 CTO가 있는 조직에 합류하려고 한다.\n근데 이게 꼭 개발 직군에만 해당할까?\n조직 전반의 사업적 방향과 맞지 않는 자신만의 취향을 고집하는 PM, PO도 계시고,\n본인의 디자인 취향에 매몰된 디자이너 분들이 계시고,\n그로쓰 도구와 방법론에 심취한 마케터, 데이터 분석가 분들도 계신다.\n요즘 주변 스타트업의 여러 직군들과 이야기를 나누다 보면 이 지점이 항상 궁금하다.\n그리고 함께 일했던 타 직군분들은 나를, 그리고 우리팀을 어떻게 평가할지도 궁금해졌다.",
        "guid": "http://jojoldu.tistory.com/794",
        "categories": [
          "생각정리",
          "CTO",
          "개발자",
          "개발팀",
          "매출",
          "사업",
          "스타트업",
          "스트롱벤처스"
        ],
        "isoDate": "2024-08-01T00:22:36.000Z"
      }
    ]
  },
  {
    "name": "WestwoodForever's Dev Log",
    "category": "개인",
    "posts": []
  },
  {
    "name": "허니몬(Honeymon)의 자바guru",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Wolf Loves Fox :: 일상",
    "category": "개인",
    "posts": []
  },
  {
    "name": "Game Programmer Life",
    "category": "개인",
    "posts": []
  },
  {
    "name": "IT 프리랜서 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "yuchi's dev",
    "category": "개인",
    "posts": []
  },
  {
    "name": "만화로 나누는 자유/오픈소스 소프트웨어 이야기",
    "category": "개인",
    "posts": []
  },
  {
    "name": "신현석(Hyeonseok Shin)",
    "category": "개인",
    "posts": []
  },
  {
    "name": "한상곤 - Sigmadream",
    "category": "개인",
    "posts": []
  },
  {
    "name": "개발자 울이 노트",
    "category": "개인",
    "posts": []
  },
  {
    "name": "즐거운 개발자 :: 네이버  블로그",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황제펭귄의 게임개발이야기 [여기는 한국]",
    "category": "개인",
    "posts": []
  },
  {
    "name": "LINE ENGINEERING",
    "category": "기업",
    "posts": [
      {
        "title": "LY의 QA 엔지니어가 생성형 AI를 이용해 품질 활동의 생산성을 높이는 방법",
        "link": "https://techblog.lycorp.co.jp/ko/increase-productivity-of-quality-activities-with-generative-ai",
        "pubDate": "Fri, 02 Aug 2024 02:00:00 GMT",
        "content": "들어가며\n최근 업계에 생성형 AI가 도입되면서 소프트웨어 개발 과정에서 개발 품질을 유지하면서 생산성을 향상시킬 수 있는 새로운 방법을 제공하고 있는데요. 그에 반해 QA의 품질 ...",
        "contentSnippet": "들어가며\n최근 업계에 생성형 AI가 도입되면서 소프트웨어 개발 과정에서 개발 품질을 유지하면서 생산성을 향상시킬 수 있는 새로운 방법을 제공하고 있는데요. 그에 반해 QA의 품질 ...",
        "guid": "https://techblog.lycorp.co.jp/ko/increase-productivity-of-quality-activities-with-generative-ai",
        "isoDate": "2024-08-02T02:00:00.000Z"
      }
    ]
  },
  {
    "name": "뱅크샐러드 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "우아한형제들 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "TOAST Meetup",
    "category": "기업",
    "posts": []
  },
  {
    "name": "ZUM 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "SK Planet",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Spoqa tech blog",
    "category": "기업",
    "posts": []
  },
  {
    "name": "팀 왈도 번역팀",
    "category": "게임",
    "posts": []
  },
  {
    "name": "이한",
    "category": "개인",
    "posts": []
  },
  {
    "name": "근원님",
    "category": "개인",
    "posts": []
  },
  {
    "name": "황의윤",
    "category": "개인",
    "posts": []
  },
  {
    "name": "호돌맨",
    "category": "개인",
    "posts": []
  },
  {
    "name": "박우빈",
    "category": "개인",
    "posts": []
  },
  {
    "name": "문다영",
    "category": "개인",
    "posts": []
  },
  {
    "name": "유수민",
    "category": "개인",
    "posts": []
  },
  {
    "name": "안건주",
    "category": "개인",
    "posts": []
  },
  {
    "name": "손현호",
    "category": "개인",
    "posts": []
  },
  {
    "name": "STARTUP BIBLE",
    "category": "개인",
    "posts": [
      {
        "creator": "Kihong Bae",
        "title": "평판 만들기",
        "link": "https://www.thestartupbible.com/2024/08/on-your-reputation-preceding-you.html",
        "pubDate": "Sun, 04 Aug 2024 21:29:00 +0000",
        "content:encodedSnippet": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기 때문에, 그냥 미국에 투자하면 돈을 어느 정도 벌 수 있어서, 굳이 우리같이 한국 시장에 투자하는 펀드에 투자할 이유가 매우 강하진 않은 것 같다.\n그래도 우린 돈을 모아야 하기 때문에, 나는 정기적으로 해외 투자자들을 만나서 열심히 영업하고 있는데, 그동안 스트롱의 성적이 그렇게 나쁘지 않음에도 투자자들을 시원하게 설득하는 게 매우 어렵다. 그래서 한 2~3주 외국 나갔다 다시 한국 들어올 때 빈손이면(=돈을 한 푼도 못 받음) 힘이 많이 빠지긴 한다.\n하지만, 최근에 내가 외국 투자자들과 이야기를 해보면, 당장 돈을 주진 않지만, 아주 기분 좋은 피드백을 주는 분들이 있었다. 처음 만나는 어떤 투자자가 악수하면서 “우리 이미 Strong에 대해서 들어봤어. Your reputation precedes you.”라는 말을 하는데, 먼 땅에서 처음 만나는 사람이 이런 말을 하는 걸 들으니까, 기분이 묘하게 좋긴 했다. 실은 이 말은 부정적으로 사용될 수도 있고, 긍정적으로 사용될 수도 있는데, 내 앞에서 이 말을 직접 했으니까 아마도 긍정적인 의미였을 거로 생각한다. 우리말로 번역하면 “스트롱의 평판은 익히 들었기 때문에 너희 믿을 만 한 거 알고 있어.” 정도의 의미일 것 같다.\n아마도 이 말은 우리가 투자를 엄청나게 잘해서라기 보단, 10년 넘게 크게 욕먹거나 나쁜 짓하지 않고 꾸준히 투자하고 있어서 들었던 것 같다. 평판이라는 건 하루아침에 만들어지지 않고, 오랜 시간에 걸쳐서 조금씩 만들어지는 것이고, 이 또한 내가 자주 강조하는 복리의 힘이 제대로 작용하는, 정량화하기 힘들지만, 우리 같은 VC뿐만이 아니라, 모든 사람들에게 어쩌면 가장 중요한 인생/직장에서의 KPI가 아닐까 싶다.\n투자하다 보면 성적표가 계속 왔다 갔다 한다. 누구나 다 아는 유니콘 회사에 투자해서 돈을 벌 수도 있고, 누구나 다 아는 대박 망하는 회사에 투자해서 돈을 잃을 수도 있다. 중요한 건, 부침을 반복하면서도 자기만의 철학으로 투자를 꾸준히 해야지만, 투자자로서의 평판을 만들 수 있다. 그냥 계속 한 우물을 꾸준히 파다 보면, 그 분야에서 오랫동안 사업을 할 수 있고, 오랫동안 사업을 하면서 살아남으면 항상 좋은 기회가 생기는 걸 나는 몇 번 경험했다. 그리고 이렇게 오랫동안 좋은 사업을 하면 평판이라는 게 조금씩 만들어진다.\n이건 우리 같은 투자자에게만 해당하는 게 아니라, 우리가 투자하는 창업가들에게도 그대로 적용된다. 우리 주변에는 유행만 쫓아가면서 3년 만에 돈 좀 벌어서 엑싯하고 싶어 하는 창업가들도 너무나 많고, 이 중 똑똑하고 사업 잘하는 분들도 많다. 하지만, 스트롱이 투자하고 싶어 하는 창업가들은 최소 10년은 바라보면서 꾸준히 사업 하는 사람들이다. 그래서 나는 유행에 너무 민감해서 한 우물을 못 파는 창업가들을 그다지 선호하지 않는다.(물론, 우리가 투자한 창업가들도 이런 분들이 있다). 이들은 대부분 쉽게 사업을 하고 싶어 하고, 유행을 좇고, 피보팅을 끊임없이 한다. 물론, 이렇게 해서 잘 되는 경우도 가끔 봤지만, 대부분 그냥 맥없이 망한다. 그리고 이런 분들은 평판이란 것 자체가 안 만들어진다.\n한국에서도 이런 말을 요새 들었는데, 미국에서도 이제 창업가들이 일만 하지 말고 적극적으로 본인을 홍보하고, 소셜미디어에서 하루 종일 떠들어야 하고, 여기저기 강연도 다니고, 다른 회사에 개인 투자도 하고, 딴짓도 많이 해야지 사업도 잘 한다는 이야기를 들었다. 뭐, 누구나 다 자기만의 생각이 있지만, 나는 이 말에 별로 동의할 수 없다. 내가 아는 좋은 사업을 만든 모든 창업가는 절대로 딴짓하는 사람들이 없기 때문이고, 사업가로서의 평판은 본인의 사업으로 오랜 시간에 걸쳐서 만들어지기 때문이다.\n제품과 고객에게 집착하고, 좋은 사람들을 회사로 데려오는데 시간을 쓰는 대신, 행사만 다니고 자기 홍보만 하면 초반에는 바이럴을 만들고, 어쩌면 펀딩은 크게 받을 수도 있겠지만, 실제로 10년 이상 가는 사업을 만드는 창업가는 없었던 것 같다. 창업가나 VC나 펀딩을 크게 받거나 큰 펀드를 만들면 단기적으론 유명해지겠지만, 장기적인 평판을 만드는 건 좋은 사업과 좋은 투자이고, 이건 인내심이 없으면 불가능하다.\n아무리 복싱 연습을 열심히 해도, 실제 링 위로 올라가는 건 정말 어렵다. 하지만, 링 위에 올라가는 것도 어렵지만, 더 어려운 건 링 위에서 12라운드 동안 계속 버티면서 싸우는 거다. 평판은 이렇게 만들어지는 것이다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/08/on-your-reputation-preceding-you.html#comments",
        "content": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기(...)",
        "contentSnippet": "작년에도 12개월이 참 빨리 지나갔는데, 올해는 시간이 더 빨리 가는 것 같다. 우린 올해도 창업가들 많이 만나고 있고, 투자도 열심히 하고 있다. 그리고 동시에 새로운 펀드도 만들고 있는데, 요새 워낙 경기가 안 좋아서 남의 돈을 받는 게 정말 어렵다는 걸 매번 느끼고 있다. 특히, 미국 투자자들은 미국의 주식 시장이 워낙 좋고, 미국 VC들의 성적도 좋기(...)",
        "guid": "https://www.thestartupbible.com/?p=9171",
        "categories": [
          "Uncategorized",
          "FoundersAtWork",
          "korea",
          "reputation",
          "sports",
          "Strong",
          "vc",
          "스타트업 바이블 QA"
        ],
        "isoDate": "2024-08-04T21:29:00.000Z"
      },
      {
        "creator": "Kihong Bae",
        "title": "전력 증강자",
        "link": "https://www.thestartupbible.com/2024/08/force-multiplier.html",
        "pubDate": "Wed, 31 Jul 2024 21:43:00 +0000",
        "content:encodedSnippet": "미국 사업가들이 자주 하는 말과 비즈니스 관련 글을 보면 가끔 등장하는 어휘 중 force multiplier라는 단어가 있다. 원래 군대에서 유래된 말인데 찾아보니 우리말의 정확한 어휘는 ‘전력 증강자’ 또는 ‘전력 승수’이고, 사전적인 의미는 전투 부대에 추가적으로 사용되었을 때 부대의 전투력을 두드러지게 증가시키고 나아가서 부대의 임무 성공 가능성을 높이는 역량 혹은 능력이다. 이런 전력 증강자의 대표적인 사례가 특수부대, GPS와 같은 기술, 또는 육해공군의 연합 등이다.\n이 단어는 스타트업 분야에서도 꽤 다양한 의미로 자주 사용되는데, 2주 전에 미국에서 어떤 창업가와 이야기하다가 이 force multiplier라는 말을 내가 오랜만에 언급됐다.\n나는 모르는 사람이랑 절대로 말을 안 한다. 특히나 비행기에서는 조용히 가는 걸 선호해서 옆 사람이랑 눈도 되도록 맞추지 않고, 누가 말을 걸어도 두 번째 질문은 못 하게 아주 단답형으로 대답하는 편이다. 이날은 어떤 젊은 백인 여성분이 내 옆에 앉았고, 3시간 반 비행을 같이 하게 됐다. 비행 내내 둘 다 각자의 노트북을 열심히 두드리고 있었는데 불규칙한 키보드 타격 소리와 속도로 봤을 때 아마도 글을 쓰거나 콘텐츠를 만들고 있는 것 같았다. 그런데 비행 내내 글이 잘 안 써지거나, 생각이 정리가 안 되거나, 영감이 안 떠오르는지 혼자 계속 한숨을 쉬면서 중얼거렸다. 실은 나도 뭔가를 쓸 때, 정리가 안 되거나, 영감이 안 떠오르면 이런 행동을 하므로 금방 알 수 있었는데, 이분은 이런 행동과 동작이 좀 과격했다.\n그래서 이분에게 “그냥 궁금해서 그런데, 뭐 쓰고 있어요? 잘 안되나 보죠?”라고 물어봤고 그때부터 한 15분 정도 우린 이야기를 나눴다. 본인은 시카고 외곽 동네에서 수공예품을 직접 만들어서 파는 작은 가게를 운영하는 자영업자인데, 그동안 오프라인 가게에서만 제품을 판매하다가 이제 미국의 다른 도시나 주에서 구매 문의가 와서 Shopify로 만든 사이트로 최근에 이커머스를 시작한 초보 창업가라고 소개했다.\n돈이 별로 없어서, 직원 고용은 아직 생각도 못 하고 있고, 혼자서 제품을 직접 만들고, 혼자서 사이트도 운영하고, 혼자서 포장과 배송도 직접 하고 있는데, 어쨌든 힘들지만, 굉장히 재미있고 보람찬 일이라고 자랑했다. 온라인 마케팅 예산이 없어서 공짜이면서 동시에 효율이 좋다고 하는 블로그와 뉴스레터 기반의 콘텐츠 마케팅을 이제 3개월째 하고 있는데, 막상 없는 콘텐츠를 만드는 작업이 시간과 에너지가 많이 투입되는 상당히 고통스러운 일이고, 이렇게 투자하는 에너지와 시간 대비 눈에 띄는 결과가 전혀 안 보여서, 이런 콘텐츠 마케팅이 정말 될까 굉장히 회의적이라고 고민을 토로했다. 그리고 지금 이 비행기에서도 다음 주에 발송할 뉴스레터에 실을 내용에 대해서 고민하고 있고, 격주로 포스팅하는 블로그에 올릴 소재가 이미 다 떨어져서 계속 한숨만 쉬고 있었던 것이다.\n나는 내가 VC라는 말은 안 했다. 하지만, 내 블로그에 관해서 이야기를 좀 해줬다. 내가 운영하는 개인 블로그를 2007년부터 쓰기 시작했고, 지금도 꾸준히 17년째 쓰고 있는데, 이게 확실히 개인적이든 사업적이든 force multiplier가 될 수 있다는 건 내가 경험적으로 보장할 수 있다고 해줬다. 그런데 이게 진정한 전력 승수가 되려면, 최소 2년은 꾸준히 해야 하고, 여기서 명심해야 하는 건 블로그의 첫 2년은 최소한의 노력으로 최대의 효과를 만드는 force multiplier가 아니라 그 반대인 force divider라는 점도 알려줬다.\n전력 승수를 위한 기반을 만들기 위한 첫 2년은 콘텐츠를 만드는데 정말 많은 시간과 노력을 투입하지만, 그로 인한 효과는 눈에 거의 보이지 않는다. 일단 아무도 이런 콘텐츠가 있다는 걸 모르고, 아무리 좋은 포스팅이라도 이런 블로그가 존재한다는 것도 모른다. 이 기간 동안엔 블로그나 뉴스레터를 활용하는 콘텐츠 마케팅은 전형적인 force divider가 된다.\n하지만, 세상 모든 일이 그렇듯이, 결국 복리의 마법은 항상 작동한다. 꾸준히, 정기적으로, 그리고 오랜 기간 동안 양질의 콘텐츠를 만들면, 누군가는 읽을 것이고, 남들과 계속 공유할 것이다. 그러다가 어느 순간이나 어떤 계기를 통해서 그동안 꾸준히 만들었던 양질의 콘텐츠는 엄청난 전력 증강자가 될 것이다.\n뭐, 대충 이런 이야기를 비행기에서 옆 좌석 분과 했다. 그리고 이제 시작했고, 아직은 결과가 나오지 않지만, compounding과 force multiplier라는 단어를 무조건 기억하라고 했다.\n누구나 다 인생에서, 또는 직장에서 이런 전력 증강자를 원할 것이다. 실은, 누구에게나 가능하고 누구나 스스로 만들 수 있다고 생각한다. 단지 약간의 노력과 꾸준함이 필요할 뿐이다.",
        "dc:creator": "Kihong Bae",
        "comments": "https://www.thestartupbible.com/2024/08/force-multiplier.html#respond",
        "content": "미국 사업가들이 자주 하는 말과 비즈니스 관련 글을 보면 가끔 등장하는 어휘 중 force multiplier라는 단어가 있다. 원래 군대에서 유래된 말인데 찾아보니 우리말의 정확한 어휘는 ‘전력 증강자’ 또는 ‘전력 승수’이고, 사전적인 의미는 전투 부대에 추가적으로 사용되었을 때 부대의 전투력을 두드러지게 증가시키고 나아가서 부대의 임무 성공 가능성을 높이는 역량 혹은 능력이다. 이런 전력 증강자의 대표적인 사례가(...)",
        "contentSnippet": "미국 사업가들이 자주 하는 말과 비즈니스 관련 글을 보면 가끔 등장하는 어휘 중 force multiplier라는 단어가 있다. 원래 군대에서 유래된 말인데 찾아보니 우리말의 정확한 어휘는 ‘전력 증강자’ 또는 ‘전력 승수’이고, 사전적인 의미는 전투 부대에 추가적으로 사용되었을 때 부대의 전투력을 두드러지게 증가시키고 나아가서 부대의 임무 성공 가능성을 높이는 역량 혹은 능력이다. 이런 전력 증강자의 대표적인 사례가(...)",
        "guid": "https://www.thestartupbible.com/?p=9168",
        "categories": [
          "Uncategorized",
          "B2B",
          "B2C",
          "FoundersAtWork",
          "hustle",
          "marketing",
          "vc"
        ],
        "isoDate": "2024-07-31T21:43:00.000Z"
      }
    ]
  },
  {
    "name": "Build a Great Product",
    "category": "개인",
    "posts": [
      {
        "creator": "Sonu Jung",
        "title": "프로덕트 디자이너 in 플랫폼 조직",
        "link": "https://sonu.hashnode.dev/product-designer-in-platform-organization",
        "pubDate": "Sun, 04 Aug 2024 08:40:38 GMT",
        "dc:creator": "Sonu Jung",
        "content": "지난 2021년 프로덕트 디자인 in 스타트업이란 글을 통해 프로덕트 디자인이란 개념이 IT업계 내 디자이너의 역할을 어떻게 달리 정의하며, 기업 성장 단계에 따라 그 역할이 어떻게 변화하는지 다룬 바 있습니다.\n이번엔 기업의 성장 과정 중 필연적으로 마주하는 플랫폼 조직에 대한 이해와 그 안에서 디자이너가 어떤 일들을 하게 되는지에 대한 생각을 기록해 보려 합니다.\n\n플랫폼 조직?\n플랫폼 조직은 전통적인 기능 조직 중심의 소프트웨어 개발 환경...",
        "contentSnippet": "지난 2021년 프로덕트 디자인 in 스타트업이란 글을 통해 프로덕트 디자인이란 개념이 IT업계 내 디자이너의 역할을 어떻게 달리 정의하며, 기업 성장 단계에 따라 그 역할이 어떻게 변화하는지 다룬 바 있습니다.\n이번엔 기업의 성장 과정 중 필연적으로 마주하는 플랫폼 조직에 대한 이해와 그 안에서 디자이너가 어떤 일들을 하게 되는지에 대한 생각을 기록해 보려 합니다.\n\n플랫폼 조직?\n플랫폼 조직은 전통적인 기능 조직 중심의 소프트웨어 개발 환경...",
        "guid": "https://sonu.hashnode.dev/product-designer-in-platform-organization",
        "categories": [
          "Product Design",
          "platform",
          "Platform Engineering "
        ],
        "isoDate": "2024-08-04T08:40:38.000Z"
      }
    ]
  },
  {
    "name": "지금 써보러 갑니다",
    "category": "개인",
    "posts": []
  },
  {
    "name": "매거진 입맛",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "요즘 IT",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "쿠팡 엔지니어링",
    "category": "기업",
    "posts": []
  },
  {
    "name": "지마켓 기술 블로그",
    "category": "기업",
    "posts": []
  },
  {
    "name": "리멤버 (드라마 앤 컴퍼니)",
    "category": "기업",
    "posts": []
  },
  {
    "name": "Kimchi hill",
    "category": "큐레이션",
    "posts": []
  },
  {
    "name": "Hudi.blog",
    "category": "개인",
    "posts": []
  },
  {
    "name": "토스",
    "category": "기업",
    "posts": [
      {
        "title": "소상공인이라면 주목해야 할 돈 되는 정책 8가지",
        "link": "https://blog.toss.im/article/money-policies-20",
        "pubDate": "Fri, 02 Aug 2024 04:52:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}채무부담 덜어주는 금융지원 3종 세트\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n1. 대출 상환기간 최대 5년까지 연장돼요.\n.css-1kxrhf3{white-space:pre-wrap;}소상공인시장진흥공단 직접대출을 이용 중, 경영에 어려움을 겪고 있다면 .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}대출 상환기간을 최대 5년까지 늘릴 수 있어요. 직접대출 잔액 3,000만 원 이상+업력 3년 이상이어야 했던 기존 조건이 폐지되었어요. 경영상 어려움 등을 심사해 대출상환 기간을 최대 5년까지 연장합니다. 8월 중, .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}소상공인정책자금 홈페이지를 통해 신청할 수 있어요.\n문의: 소상공인시장진흥공단 채무조정팀 (042-363-7241)\n2. 고금리 대출을 저금리 대출로 전환할 수 있어요.\n은행권, 비은행권의 고금리 대출(7% 이상)을 소상공인시장진흥공단의 저금리(4.5%, 고정금리) 대출로 전환할 수 있어요. 대출금은 10년간 분할 상환할 수 있습니다. 지원대상 조건은 아래와 같아요.\n➀ 3개월 이상 성실상환 중인 7% 이상 고금리 대출을 받은 경우\n➁ 3개월 이상 성실상환 중이고, 대출받은 은행에서 ‘만기연장 애로 확인서'를 받은 경우\n8월 중 소상공인정책자금 홈페이지에서 신청할 수 있어요.\n문의: 소상공인시장진흥공단 대출지원팀 (044-363-7204)\n3. 보증부대출을 신규보증으로 전환해 상환기간을 연장할 수 있어요.\n지역신용보증재단(지역신보) 보증을 통한 대출(보증부대출)을 이용 중인 소상공인이라면 기존 보증부대출을 신규보증으로 전환해 상환기간을 연장할 수 있습니다. 기존대출 중도상환 수수료를 면제하고, NICE평가정보 개인신용점수(CB) 744점 이하는 산출보증료율에서 0.2%p를 인하 받을 수 있습니다. 7월 31일부터 기존 보증서를 발급받은 지역신보에서 신청 가능합니다.\n전기료, 임대료, 배달료 등 고정비용 부담 완화\n4. 전기료 20만 원 지원을 확대해요.\n2022년 또는 2023년 연 매출 6천만 원 이하 취약 소상공인까지 20만 원의 전기료 특별지원을 받을 수 있습니다. 소상공인전기요금특별지원 홈페이지에서 자세한 내용을 확인할 수 있어요.\n5. ‘착한임대인’ 제도는 2025년 말까지 계속돼요.\n임대료를 깎아준 임대 사업자는 임대료 인하액의 최대 70%를 세액공제 받을 수 있어요. 종합소득세, 법인세 신고 시 세액공제 신청서에 필요서류*를 첨부해 관할 세무서에 제출하면 돼요. 홈택스 신청도 가능해요.\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}*➀임대차 계약서 ➁임대료 인하 합의서 ➂세금계산서 ➃임차인의 착한임대인 세액공제 확인서 등\n어려운 소상공인의 취업과 재창업까지\n6. 사업 정리를 원하면 채무조정을 도와드려요.\n사업 정리를 희망하는 소상공인의 채무조정을 돕는 ‘새출발기금’의 지원 규모를 기존 30조 원에서 40조 원으로 확대합니다. 지원 대상과 신청기한도 크게 늘어났습니다. 2020년 4월~2024년 6월 사이에 사업을 영위한 소상공인은 2026년 12월까지 .css-1ly3pih{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey800);background-color:#3fd59936;-webkit-text-decoration:underline!important;text-decoration:underline!important;}새출발기금 홈페이지를 통해 채무조정을 신청할 수 있습니다.\n문의: 새출발기금 콜센터(1660-1378)\n7. 점포철거비를 지원해요.\n폐업 예정인 소상공인에게 점포철거 및 원상복구 시 소요되는 비용을 지원합니다. 점포철거비는 기존 최대 250만 원에서 최대 400만 원으로 오릅니다. 신청접수는 희망리턴패키지 홈페이지 공고를 참고하세요.\n문의: 소상공인시장진흥공단 재기지원실(042-363-7702), 희망리턴패키지 콜센터(1800-5981)\n8. 폐업 소상공인의 취업을 돕습니다.\n소상공인의 취업을 지원하는 ‘소상공인 새출발 희망 프로젝트*'를 새롭게 추진해요. 취업을 원하는 폐업 소상공인은 ‘소상공인 특화 취업지원 프로그램'을 통해 최대 6개월간 월 50~110만 원의 훈련참여수당을 받을 수 있어요. 폐업 소상공인을 고용한 사업주에게는 1년간 월 30~60만 원(1인당)의 고용촉진장려금을 지급할 계획입니다.\n*2025년 1월부터 시행 예정\n문의: 고용노동부 콜센터(1350), 소상공인시장진흥공단 재기지원실(042-363-7706), 희망리턴패키지 콜센터(1800-5981)\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 이지영 Graphic 조수희",
        "content": "소상공인‧자영업자 종합대책을 정리했어요",
        "contentSnippet": "소상공인‧자영업자 종합대책을 정리했어요",
        "guid": "https://blog.toss.im/article/money-policies-20",
        "isoDate": "2024-08-02T04:52:00.000Z"
      },
      {
        "title": "집을 둘러싼 분쟁에서 나를 지켜줄 특약 13가지",
        "link": "https://blog.toss.im/article/home-buyers-guide-8",
        "pubDate": "Fri, 02 Aug 2024 02:46:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-nv7vyi{margin:24px 0 8px;padding:16px 40px 32px;border-radius:16px;background-color:var(--adaptiveGrey100);}.css-123co55{font-size:19px;letter-spacing:0em;line-height:1.6;margin:24px 0 0;font-weight:400;color:var(--adaptiveGrey900);background-color:transparent;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}이 글이 필요한 순간\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n.css-1kxrhf3{white-space:pre-wrap;}부동산 매매계약서 도장 찍기 전 계약 내용 점검할 때\n\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n특약 사항이 중요한 이유는? \n분쟁 예방과 해결의 마지노선!\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n주택을 사고팔 때 주고받는 것은 물리적으로 눈에 보이는 외형물만 의미하는 것이 아니라 거기에 부합되어 있는 모든 권리와 의무까지도 포함한다. .css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}따라서 매매계약서에는 단순히 ‘매매가’, ‘대금지급방법(계약금, 중도금, 잔금)’, ‘거래당사자의 인적사항’뿐 아니라 추후에 문제가 발생했을 경우 어떻게 해결할 것인지에 대한 해결책도 함께 기재되어 있어야 한다.\n매매 이후 불가피한 사유로 분쟁이 발생했을 경우에는 일단 대화로 풀어보는 것이 좋다. 그래도 해결되지 않으면 법적 소송으로 이어지고 매도자와 매수자 양측 모두 정신적 스트레스, 시간, 비용 등에 대한 손해가 커지게 된다.\n그러므로 혹시 발생할지도 모를 분쟁을 대비해서 꼼꼼하게 특약 사항을 기재해놓는 것이 중요하다. 분쟁의 소지를 사전에 예방할 수 있고, 분쟁이 발생하더라도 신속하고 수월하게 문제를 해결할 수 있는 기준이 되어주기 때문이다.\n특약 사항은 간결하고 정확하게, \n스스로 점검할 것\n특약 사항을 기재할 때는 모호한 표현이나 해석에 따라 의미가 달라질 수 있는 다의적인 표현은 피해야 한다. 누구나 쉽게 이해할 수 있도록 간결하면서 정확하게 작성한다.\n물론 부동산중개사무소에서 계약서를 쓰면 공인중개사가 기본적인 내용은 알아서 기재해준다. 하지만 아무리 사소한 것이라도 특약 사항란에 넣고 싶은 내용이 있다면 빠트리지 말고 써두어야 나중에 후회를 줄일 수 있다. 특약 사항을 꼼꼼하게 작성할수록 향후 분쟁거리가 줄어들기 때문이다. 계약서를 작성하러 가기 전에는 거래하는 부동산의 특성을 생각하고 아래 이어지는 예시들을 참고해 미리 자신에게 필요(유리)한 특약 사항을 정리해봐야 한다.\n사회질서 안에서 사적 계약은 특약 사항이 우선한다\n부동산 매매계약은 개인과 개인 간 체결되는 사적 계약이고, 특약은 당사자 간 특별한 약속을 의미한다. 법으로 다른 규정이 있어도 당사자 간의 특약 사항을 우선 적용받는다. 단, 아무리 특약 사항에 기재했더라도 사회질서를 해칠 만한 강행규정 위반일 경우에는 효력이 없다. 강행규정이란 당사자의 의사와 상관없이 강제적으로 적용되는 규범이며, 선량한 풍속, 기타 사회질서 유지에 반하는 내용의 특약은 무효가 된다.\n매매계약서 작성 시 강행규정을 벗어나지 않는 범위 내에서 자주 활용되는 대표적인 특약 사항을 ‘권리적인 사항’과 ‘물리적인 사항’으로 나눠서 살펴보자.\n1. 매매 시 특약 문구 - 권리적인 사항\n① 계약 해제 시 위약금에 대한 내용\n아래와 같은 위약금 조항이 없으면, 상대방의 단순변심으로 계약 해제를 하더라도 별도의 손해배상을 받기가 쉽지 않다.\n\n✅ 일방의 계약 해제 또는 계약 위반에 따른 손해배상으로 매도자는 받은 계약금의 두 배의 금액을 매수자는 계약금을 위약금으로 약정한다.\n\n\n② 매수한 주택에 세를 놓아야 하는 경우\n매수자가 실입주하지 않는 경우, 새로운 임차인을 구해야 하기 때문에 이러한 점을 사전에 매도자에게 알리고 협조를 구한다.\n\n✅ 매도자(또는 점유자)는 매수인이 새로운 임대차 계약을 체결하는 것에 최대한 협조하기로 하며, 매수자와 부동산의 요구가 있을 경우 집을 보여주는 것에 적극 협조하기로 한다.\n\n\n③ 매수자가 잔금을 새로운 임차인의 보증금으로 충당하려 할 때\n다음과 같은 특약이 없을 경우, 매수자에게 권한이 없기 때문에 새로운 임차인이 소유권이전등기(잔금) 후에 입주할 경우 매도자와 임대차계약서를 작성하고, 입주한 뒤에 매수자와 계약서를 다시 작성해야 하는 번거로움이 발생할 수 있다.\n\n✅ 매수자의 잔금 중 일부를 새로운 임차인의 보증금으로 충당하기로 하며, 이때 매도자는 새로운 임대차계약체결 권한을 매수자에게 부여하기로 한다.\n\n\n④ 기존 임대차를 매수자가 승계할 경우\n매수자는 계약 체결 시 해당 주택의 임대차계약서 사본을, 잔금 시에는 원본을 매도자에게 받아야 한다. 특히 다가구주택의 경우에는 각 호실별로 임대내역(보증금 및 월세, 계약기간)을 모두 매매계약서에 기재해야 한다.\n\n✅ 매수자는 해당 주택의 모든 임대차를 승계하기로 한다. 현 임차인(임차인 ○○○, 보증금 ○○원, 만기 ○○년 ○○월 ○○일)은 매수자가 그대로 승계한다.\n\n참고로 임차인은 계약기간 도중 임대인(소유자)이 바뀔 경우, 계약기간의 잔존 여부와 상관없이 계약을 해지하고 임대차를 종료할 수 있다.(대법원 1998.9.2. 자98마100결정)\n그러므로 임대 목적으로 매수할 경우 매매계약서를 작성할 때, 안전 장치로 ‘임대인 변경에 대한 임차인 동의서’ 또는 기존의 임차인과 ‘재계약서’를 바로 작성해놓는 것이 좋다.\n\n⑤ 임차인 있는 주택에 매수자가 실입주를 해야 하는 경우\n계약 당시에 해당 주택에 임차인이 거주하고 있는 경우, 매수자가 실입주를 하기 위해서는 잔금 시까지 임차인을 내보내야 한다. 이때 누구의 책임하에 임차인을 내보낼지를 명확하게 해둬야 한다.\n\n✅ 매수자는 해당 주택에 실입주할 예정이므로 매도자는 잔금 시까지 현 임차인에 대한 명도를 책임지기로 한다. \n✅ 임차인 명도에 차질이 생겨 발생하는 모든 비용은 매도자가 부담하기로 한다.\n\n\n⑥ ‘.css-wi4a2c{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;font-weight:bold;}토지거래허가구역’ 내의 주택일 경우\n소유권이전등기를 하기 위해서 토지거래허가를 받아야 하는 지역 내 주택이라면 계약서 특약 사항란에 허가 여부에 따른 향후 조치에 대한 내용을 반드시 기재해 놓아야 한다.\n\n✅ 해당 주택의 소재 지역은 토지거래허가구역으로 만일 토지거래허가가 나지 않을 경우 본 매매계약은 무효로 하며, 매도자는 아무런 조건 없이 계약금을 즉시 매수자에게 반환하기로 한다. 매도자와 매수자는 이와 관련하여 상대방에게 그 어떠한 손해배상도 청구하지 않기로 한다.\n\n\n⑦ 단독주택 등에서 대지면적에 대한 차이가 있을 경우\n오래된 단독주택은 건물보다는 땅의 가치가 매매가에서 큰 비중을 차지하게 된다. 그래서 ‘평당 얼마’라는 식으로 매매가가 정해지는 경우가 있다. 이때 향후 대지면적에 차이가 생길 경우 어떻게 해결할 것인지를 기재해 놓아야 한다.\n\n✅ 면적은 등기사항증명서 및 토지대장을 기준으로 하며, 차후 수량의 차이가 발견되어도 매수자는 매도자에게 일체의 이의 제기를 하지 않기로 한다. → 매도자 유리\n✅ 본건 토지대장 등 공부상의 면적을 기준으로 한 매매이며, 잔금 후 30일 이내에 실측 후 공부상면적과 실측면적에 차이가 발생할 경우 평당 ○○만원을 감액하기로 한다. → 매수자 유리\n✅ 본 매매계약은 ‘수량지정매매’이며, 총매매대금 ○○만원(평당 ○○만원×○○평)으로 산정되었으므로 향후 거래평수와 실제평수가 차이가 날 경우 차이 나는 금액만큼 반환하기로 한다.  → 매수자 유리\n\n수량지정매매란 거래 대상물의 가격을 산정할 때 ‘평당 얼마’ 혹은 ‘개당 얼마’ 등의 식으로 수량으로 매매가를 산정하는 방식이다. 이 방식은 아파트, 빌라 등의 공동주택 매매에서는 크게 의미가 없지만, 단독주택과 같이 대지의 비중이 큰 주택 거래 시에는 의미가 있다. 특히 신축을 목적으로 하는 주택은 대지의 면적에 따라 건물의 크기와 설계 등이 달라질 수 있으므로 중요한 의미를 갖는다.\n\n⑧ 부가세(VAT) 관련 비용\n일반적으로 주택의 경우에는 부가세 문제가 없어 특별히 신경 쓸 부분이 없으나, 상가주택의 상가에는 부가세가 발생한다. 이때 부가세를 누가 부담할지에 대해 명확하게 기재해 놓아야 한다.\n\n✅ 해당 주택의 1층은 근린생활시설(상가)로 부가세는 매수자가 부담하기로 한다.\n\n참고로 부가세에 대한 언급이 없을 경우 매매 가격에 포함된 것으로 간주되어 매도자가 부담하게 된다.\n2. 매매 시 특약 문구 - 물리적인 사항\n① 옵션과 관련된 사항\n최근에는 가전제품이 옵션으로 설치되어 있는 경우가 많다. 처음부터 빌트인되어 있던 제품이라면 관계없지만, 매도자 입장에서는 자신이 살면서 나중에 설치한 제품이라면 해당 주택의 매매와는 별도라고 생각하는 경우가 의외로 많다. 그러므로 옵션에 대한 특약 사항을 명확하게 기재함으로써 분쟁을 미연에 방지하도록 한다. 특히 단독주택의 경우 고가의 나무, 조형물(암석) 등이 있을 경우 소유권의 범위를 특약 사항에 명확하게 기재해 놓아야 한다.\n\n✅ 현재 해당 주택에 설치되어 있는 전기인덕션, 식기세척기, 김치냉장고, 디지털도어록은 매매 목적물에 포함된 것이다. → 매수자 유리\n✅ 현재 해당 주택에 주방에 설치되어 있는 전기인덕션는 잔금 시 매도자가 가지고 가기로 한다. → 매도자 유리\n✅ 대문을 기준으로 우측에 식재되어 있는 소나무는 잔금 시 매도자가 가지고 가기로 한다. → 매도자 유리\n\n\n② 하자담보책임 범위 및 기간\n집을 사자마자 하자가 발생하면 매수자의 입장에서는 금전적, 정신적 피해를 받게 된다. 그러므로 범위와 일정 기간을 정해서 최소한 그 사이에 발생하는 하자에 대한 책임을 매도자에게 지도록 하는 내용의 특약 사항을 기재해 놓는 것이 좋다.\n\n✅ 매도자는 해당 부동산의 잔금일로부터 6개월 내에 발생하는 모든 하자에 대한 책임을 지기로 한다. 단, ‘누수’와 ‘균열’과 같은 중대한 하자는 그 기간을 1년으로 한다. → 매수자 유리\n✅ 매매계약 시, 중대한 하자(내부누수 등)에 대하여 미고지 후 발생하는 하자는 매도인이 책임지기로 한다. → 매수자 유리\n\n\n③ 현 시설 상태에서 매매계약인 경우\n‘현 시설 상태에서’라는 말은 향후 매수자가 매도자에게 부동산의 사소한 하자에 대하여 책임을 물을 수 없다는 말과 같다. 계약서 작성 전에 해당 주택의 시설상태를 확인하고 진행했기 때문에 매도자의 고의가 아니라면 어느 정도 책임을 면할 수 있다는 조항이 될 수 있다.\n\n✅ 매수자의 현장 방문 확인 후, 쌍방 협의에 따라 현 시설 상태에서 진행하는 계약이다. → 매도자 유리\n\n\n④ 제세공과금 및 기타 관리비 정산 관련\n일반적으로 공과금 정산 시점은 ‘잔금일(입주일)’이다. 상호 협의 하에 다른 날을 기준일로 정할 수도 있다.\n\n✅ 잔금일까지의 제세공과금 및 기타 관리비는 매도자가 부담하기로 한다.\n\n\n⑤ 잔금 지급 이전에 리모델링에 관한 사항\n간혹 잔금 전에 리모델링을 사유로 매매 목적물을 먼저 인수받는 매수자 중에서 새로운 흠집(하자) 등을 근거로 매매금액을 깎으려고 시도하거나 새로운 요구사항을 제시하는 경우가 있다. 매도자의 입장에서는 이러한 특약 사항을 미리 넣어놓음으로써 매수자의 새로운 요구사항을 자연스럽게 거절할 수 있다.\n\n✅ 매도자는 매수자가 잔금 지급 전에 리모델링 공사를 하는 것에 동의(협조)한다. → 매수자 유리\n✅ 매도자는 매수자가 리모델링 공사를 시작하기 전날까지 일체의 공과금 및 세금을 정산하고 열쇠(비밀번호)와 함께 매수자에게 인도하며, 이 시점을 기준으로 관리비 등 일체의 공과금은 매수자가 부담하기로 한다. → 매도자·매수자 모두 유리\n✅ 매도자는 잔금 전 매수자가 리모델링 공사를 하는 것에 동의하기로 하며, 매수자가 리모델링 공사 시작일부터 본 부동산에 관하여 매매대금을 포함하여 그 어떠한 이의를 제기하지 않기로 한다. → 매도자 유리\n✅ 집수리 시부터 관리비는 매수자가 부담하기로 하며, 이때부터 매도자는 해당 주택에 대한 하자담보의 책임에서 면책하기로 한다. → 매도자 유리\n\n\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 주소은 Graphic 이은호\n해당 콘텐츠는 2024.08.02. 기준으로 작성되었습니다.",
        "content": "매매계약서 쓸 때 확인해야 할 특약 사항 체크리스트",
        "contentSnippet": "매매계약서 쓸 때 확인해야 할 특약 사항 체크리스트",
        "guid": "https://blog.toss.im/article/home-buyers-guide-8",
        "isoDate": "2024-08-02T02:46:00.000Z"
      },
      {
        "title": "관세 폭탄 예고한 미국 공화당, 전 세계에 미치는 영향은?",
        "link": "https://blog.toss.im/article/economic-terms-24-tariff-bomb",
        "pubDate": "Thu, 01 Aug 2024 02:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-of5acw{margin:24px 0 8px;text-align:center;}.css-8atqhb{width:100%;}.css-1c1qox8{font-size:30px;letter-spacing:0em;line-height:1.55;font-weight:bold;color:var(--adaptiveGrey900);margin:40px 0 4px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-p4abj2{display:contents;line-height:1.55;}.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}🔖 이번 주 경제 용어\n관세 폭탄\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1iisb9p{display:contents;line-height:1.6;}.css-1kxrhf3{white-space:pre-wrap;}이번 주 경제 용어는 글로벌 경제를 파악하기 위해 필요한 정보예요.\n\n.css-1pgssrp{max-width:100%;border-radius:16px;}\n관세는 자국으로 들어오는 외국 물품에 대해서 부과·징수하는 세금을, 관세 폭탄은 자국 무역을 보호하기 위해 어마어마한 관세율을 부과하는 것을 말해요.\n\n\n관세는 국가가 수입품에 부과하는 세금으로, 자국 산업을 보호하고 재정 수입을 확보하기 위해 사용됩니다. 관세를 부과하면 수입품의 가격이 상승해 국내 생산품의 가격 경쟁력이 높아지기 때문입니다.\n최근 미국 공화당 대선 후보인 트럼프 전 대통령은 중국산 수입품에 60~100%의 관세를 부과하겠다고 했어요. 이렇게 관세를 대폭 높이면 미·중 무역이 단절될 가능성이 높고, 중국도 보복 관세로 대응할 수 있습니다. 또한, 저렴한 중국산 제품이 줄어들면 미국 물가가 상승할 수도 있어요.\n그럼에도 불구하고 트럼프 전 대통령은 왜 관세를 높여서라도 중국산 제품이 미국에 들어오는 것을 막으려고 하는 걸까요? 이유는 공화당 부통령 후보인 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}J.D. 밴스 연방 상원의원의 발언에서 찾을 수 있습니다. 밴스 상원의원은 \"중국은 미국이 직면한 가장 큰 위협\"이라고 주장하고 있습니다. 왜 그는 중국을 위협적인 나라라고 말하는 걸까요?\n.css-2sk6rv{font-size:19px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);white-space:pre-wrap;margin:24px 0;padding-left:20px;position:relative;}.css-2sk6rv::before{content:'';display:block;position:absolute;top:4px;left:0;width:2px;height:calc(100% - 4px * 2);padding:4px 0;background-color:var(--adaptiveGrey800);}\n“수백만 인구가 공장에 취직을 하려고 북부로 이주하면서 공장 주변에 우후죽순 생겨난 지역 사회들이 초기에는 활기가 넘쳤으나 그리 오래가지 못했다는 내용이었다. 공장들이 문을 닫자, 남겨진 주민의 발이 묶였고, 시에서도 더 이상 그렇게 많은 인구에게 양질의 일자리를 제공하지 못했다.”\n.css-18442ym{font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}.css-jfs1hr{white-space:pre-wrap;font-size:13px;line-height:1.7;word-break:keep-all;letter-spacing:0em;color:var(--adaptiveGrey600);white-space:pre-wrap;}- 『힐빌리의 노래 (Hillbilly Elegy)』.css-7mseny>*{margin-left:0;margin-right:0;}.css-7mseny>:last-child{margin-bottom:0;}blockquote>.css-7mseny:first-child>:first-child{margin-top:0;}\n밴스 상원의원의 자전적 소설 『힐빌리의 노래(Hillbilly Elegy)』에 이 질문의 답이 있습니다. 이 소설은 1980년대 미국 러스트 벨트를 배경으로 한 사람들의 삶을 그려내며, 밴스가 자신의 성장 과정을 담아내고 있는데요.\n러스트 벨트는 한때 미국의 경제를 이끌었던 지역이었지만, 1980년대 당시 미국의 제조업이 중국으로 대거 넘어가면서 제조업이 쇠퇴하고 일자리 또한 줄어들었습니다. 이로 인해 미국 노동 계층의 삶이 무너지고 도시는 쇠락하기 시작했고요. 인구 감소는 물론 경제, 사회, 정치적 상황이 전체적으로 악화되었습니다.\n이러한 경험을 바탕으로 밴스 상원의원은 중국을 ‘미국의 경제와 일자리에 위협이 되는 나라’로 보고 있으며, 트럼프 전 대통령과도 이러한 시각을 공유하고 있는 것이고요.\n밴스 상원의원과 트럼프 전 대통령은 모두 미국의 제조업과 노동자들을 보호하기 위해 중국과의 무역 관계를 재조정해야 한다고 생각합니다. 이러한 배경에는 러스트 벨트 지역에서의 경제적 어려움과 뼈아픈 경험이 자리하고 있는 것으로 보여요.\n그래서 미국은 중국에 빼앗긴 일자리를 되찾기 위한 정책들을 내놓고 있습니다. 그중 대표적인 것이 바로 ‘관세’입니다. 중국산 물건에 어마어마한 관세를 부과하고, 미국산 물건은 가격을 유지함으로써 소비자들이 미국산 물건을 선택하게 하려는 것이죠.\n이러한 관세 폭탄 정책은 미국의 제조업과 경제에 긍정적인 영향을 미칠 수 있으며, 트럼프 전 대통령의 대세론을 더욱 강화할 것으로 예상됩니다.\n\n\n.css-2yhypk{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);font-style:italic;-webkit-text-decoration:underline!important;text-decoration:underline!important;}\"10% 수입관세\" 외친 트럼프… 삼성·LG에도 청구서 내미나\n(파이낸셜뉴스 2024.7.17.)\n피격 사건 이후 '대세론'을 타고 있는 도널드 트럼프 전 대통령이 '모든 국가 수입품에 10% 관세 부과' 방침을 공식화하면서 국내 가전업계가 촉각을 세우고 있다.\n가전업계는 현지에 세운 가전 생산공장에서 미국으로 들어가는 제품 대부분을 생산하는 만큼 관세 영향은 크지 않을 것으로 보고 있다. 다만, '트럼프 2기' 시대를 맞아 관세 부과를 앞세워 국내 가전업계의 현지 투자 확대 등을 압박하는 '트럼프 청구서'가 재연될 것이라는 관측이 지배적이다.\n■ 삼성·LG, 현지생산으로 관세부담 회피\n17일 관련 업계에 따르면 트럼프 전 대통령은 최근 피격 사건 이후 외신 인터뷰에서 '중국에 60~100%, 다른 나라 수입품은 10%'의 보편 관세를 부과하겠다고 밝혔다.\n.css-16cuouw{white-space:pre-wrap;color:var(--adaptiveGrey800);background-color:#3fd59936;}2018년 트럼프 전 대통령 집권 당시 미 국제무역위원회(ITC)는 삼성전자와 LG전자가 생산한 수입 세탁기 120만대 초과 시 최대 30%의 '관세 폭탄'을 매기는 세이프가드(긴급수입제한조치) 조치를 발동하기도 했다. 세이프가드는 특정 품목 수입이 급증해 자국 기업과 산업에 심각한 피해가 우려되는 경우 관세 인상, 수입물량 제한 등을 통해 규제하는 무역장벽이다. (중략)\n\n\n트럼프 전 대통령은 자국 상품의 가격 경쟁력을 높이기 위해 해외 수입품에 높은 관세를 부과하겠다고 밝혔습니다. 중국산 제품에는 60~100%, 그외 다른 나라 제품에는 10% 정도로요. 대미 수출이 중요한 나라들 입장에서는 관세 폭탄을 맞은 느낌일 겁니다.\n우리나라는 기사에서 언급된 2018년 트럼프 전 대통령 집권 당시 관세 폭탄을 맞은 경험이 있는데요. 당시 최대 30%의 관세가 부과됐어요. 그때 발동된 세이프가드(긴급수입제한조치)는 자국에 심각한 피해가 우려될 경우, 관세를 대폭 올리거나 수입 물량을 줄이는 등의 방법으로 자국 무역을 보호하기 위한 장치였다 볼 수 있겠습니다.\n트럼프 전 대통령은 미국의 경제와 일자리를 보호하기 위해 중국산 제품에 높은 관세를 부과하고, 필요할 경우 세이프가드 같은 조치까지 감행해 외국산 제품의 수입을 제한하려는 정책을 추진하고자 합니다.\n밴스 상원의원은 17일 진행된 공화당 전당대회에서 트럼프보다도 강한 미국 우선주의를 강조하기도 했어요. 부통령 후보 수락 연설 중 일자리를 늘리고, 미국의 제조업을 부활시킬 것이라며 보호무역주의 색을 강하게 드러냈는데요. 그는 “우리는 무한한 글로벌 무역을 위해 공급망을 희생하는 것을 끝내고, 더 많은 제품에 ‘메이드 인 아메리카(Made in America)’라는 아름다운 라벨을 붙일 것\"이며, “미국에 공장을 다시 짓고, 미국 노동자들의 손으로 만든, 진짜 제품들을 만드는 일에 사람들을 투입할 것\"이라고도 말했습니다.\n이에 따라 국내 가전업계는 미국 시장의 큰 변화에 대응할 수 있는 전략을 마련하고, 정부는 국내 기업의 피해를 최소화하기 위해 미국과의 무역 협상에서 적극적으로 대처해야 할 필요가 있겠습니다.\n보통 자국 무역보호주의에서 이어지는 각국의 수입규제 조치가 확대되면, 기업들은 해외투자를 늘려 현지에 공장 등 생산시설을 짓거나 물류 경로 및 수출선 다변화 등을 꾀하기도 합니다. 최근 몇 년간 미국과 중국 간 갈등이 고조되면서 기업들 입장에서는 글로벌 공급망 재배치 및 재구축을 고민해야 하는 상황에 마주했고요.\n특히 미국은 적극적인 기업유치 활동을 통해 미국에 직접 투자할 것을 권하며, 이에 많은 기업이 미국에 대한 투자를 늘리고 현지 생산시설을 건설합니다. 특히 미국이 중국 제품에 대한 대규모 관세를 부과하게 되면 중국에 공장을 두고 중간재를 수출하는 한국 기업 입장에서도 큰 타격을 받게 됩니다.\n따라서 미중 갈등을 계기로 중국에 대한 의존도를 낮출 필요성이 제기되고 있으며, 중국 이외의 지역으로 공장을 옮기는 방안을 포함해 물류와 생산 방식을 다변화하고 기업 공급망을 재편하는 방안을 검토해볼 수 있을 것입니다.\n\n.css-uswsmm{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;margin:24px 0 8px;padding:0;list-style:none;}.css-uswsmm ul,.css-uswsmm ol{margin:16px 0 0;}.css-uswsmm>li{margin-bottom:16px;padding-left:24px;}.css-uswsmm>li:last-of-type{margin-bottom:0;}.css-uswsmm>li>span{position:relative;}.css-uswsmm>li>span>:first-child::before{content:'•';font-weight:500;color:var(--adaptiveGrey800);position:absolute;left:-24px;}\n.css-1hwiibq{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;font-weight:400;color:var(--adaptiveGrey800);}\n자유 무역: 국제 무역에서 상품 교역에 대한 정부의 간섭을 최소화하는 무역 제도로 보호 무역과 대비되는 개념. 자유 무역을 통해 국가 간 상호 이익이 늘어나고 경제 성장을 이룰 수 있습니다. 자유 무역이 활성화되면 자국 산업을 보호하기 위한 관세나 수입 제한 등의 규제가 최소화돼요.\n최혜국 대우: 특정 국가에 다른 국가들보다 더 유리한 관세율과 통관 절차를 제공하는 것. 이러한 대우를 받는 나라를 최혜국이라 하며, 조약에 들어 있는 그러한 조항을 최혜국 조항이라고 합니다. 무역 협정에서 흔히 볼 수 있으며, 무역 상대국에게 가장 유리한 조건을 제공함으로써 양국 간의 무역을 활성화하려는 목적이 있어요.\n관세율: 수입품에 부과되는 세금의 비율. 관세율은 국가별로 다르게 적용되며, 수입품의 종류와 가격에 따라 다르게 적용될 수 있습니다. 높은 관세율은 수입품의 가격을 상승시켜 자국 제품을 보호하고, 낮은 관세율은 수입품의 가격을 낮추어 소비자들이 다양한 국가의 상품 중 본인에게 가장 잘 맞는 것을 선택할 수 있는 넓은 선택권을 가져다 줄 수 있어요.\n\n\n.css-13d8cj1{font-size:17px;line-height:1.6;word-break:keep-all;letter-spacing:0em;margin:24px 0 8px;cursor:pointer;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;color:var(--adaptiveGrey700);}\n.css-1dzrkjz{width:16px;margin-right:8px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}\n.svg-icon-wrapper{position:relative;display:inline-block;width:24px;height:24px;}.svg-icon-wrapper >.svg-icon:empty+.svg-icon-fallback{visibility:visible;z-index:inherit;}.svg-icon{color:var(--adaptiveGrey900);display:inline-block;width:24px;height:24px;display:block;width:100%;height:100%;}.svg-icon svg,.svg-icon img{display:block;width:100%;height:100%;}.svg-icon--hide{display:none;}.svg-icon-fallback{position:absolute;left:0;right:0;top:0;z-index:z-index(hidden);visibility:hidden;display:block;width:100%;height:100%;}.svg-icon-fallback--show{visibility:visible;z-index:inherit;}\n참고 자료\n\n\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이동건",
        "content": "중국산 수입품에는 60~100% 관세를 부과한대요.",
        "contentSnippet": "중국산 수입품에는 60~100% 관세를 부과한대요.",
        "guid": "https://blog.toss.im/article/economic-terms-24-tariff-bomb",
        "isoDate": "2024-08-01T02:00:00.000Z"
      },
      {
        "title": "항공권은 왜 직항보다 경유가 더 저렴할까?",
        "link": "https://blog.toss.im/article/everyday-economics-17-airline-ticket",
        "pubDate": "Wed, 31 Jul 2024 07:00:00 GMT",
        "content:encodedSnippet": ".css-1vn47db{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-flex:none;-ms-flex:none;flex:none;}\n.css-14on8x8{font-size:17px;letter-spacing:0em;line-height:1.6;font-weight:normal;color:var(--adaptiveGrey800);margin:24px 0 8px;}\n.css-1r3ko7u{line-height:0;display:block;}.css-1iisb9p{display:contents;line-height:1.6;}.css-94on8q{white-space:pre-wrap;color:#c770e4;font-weight:bold;}에디터 G (이하 G):.css-1kxrhf3{white-space:pre-wrap;} 7월 말이 되니 장마가 물러가고, 본격 여름 휴가철이 시작된 것 같아요. 교수님은 휴가 계획 세우셨나요? 이번 휴가 때 해외로 나가시는 분들도 많을 것 같더라고요.\n.css-12p6bv8{white-space:pre-wrap;color:#15c47e;font-weight:bold;}교수 K (이하 K): 그러게 말이에요. 휴가 계획, 특히 해외 여행을 가기로 계획한다면 가장 먼저 고민하는 것 중 하나가 항공권일텐데요. 여행을 떠나고 싶은 도시의 항공권 가격을 인터넷으로 검색하다 보면, 직항 항공편이 경유 항공편보다 비싼 것을 확인하실 수 있을 거예요.\nG: 맞아요! 왜 같은 목적지인데도 경유 항공편이 직항보다 저렴한 걸까요? 그동안 당연하다고만 생각해왔는데… 교수님이 이 이야기를 꺼내시는 것을 보니 여기에도 경제학 원리가 숨어있나 보군요.\nK: 하하, 에디터 님 추측이 맞습니다. 왜 직항 항공편과 경유 항공편의 가격이 차이나는지 몇 가지 경제학 이론으로 살펴볼게요.\n.css-1feg9au{font-size:24px;letter-spacing:0em;line-height:1.6;font-weight:bold;color:var(--adaptiveGrey900);margin:24px 0 4px;}\n.css-q3ktjb{white-space:pre-wrap;font-weight:bold;}1) 수요와 공급의 원리\n가장 먼저 생각해볼 수 있는 것은 ‘수요와 공급의 원리’입니다.\n수요자 입장에서 보면, 직항 항공편은 중간에 내릴 필요 없이 목적지까지 한 번에 편하게 갈 수 있습니다. 그리고 긴 여행일 경우 기내식이 포함되어 있기 때문에, 따로 밥을 사먹을 필요 없이 비행기에서 식사를 해결할 수 있죠.\n반면, 경유 항공편은 중간에 비행기를 갈아타는 과정에서 시간이 더 듭니다. 다음 연결 편을 기다리는 동안 경유하는 공항에서 식사나 간식을 사먹는 등 추가 비용이 발생할 수 있고요.\n이는 수요자 입장에서 경유 항공편에 비해 직항 항공편의 수요가 더 높다는 것을 의미합니다. 경유 항공편이 시간과 돈이 더 많이 들고, 비행기를 갈아타야 하는 등 불편하기 때문이죠.\n이전의 .css-iynyr0{white-space:pre-wrap;cursor:pointer;color:var(--adaptiveGrey600);-webkit-text-decoration:underline!important;text-decoration:underline!important;}다이아몬드 수요 관련 아티클에서도 확인했었는데요. 다른 조건이 일정한 상황에서 수요가 많아지면 가격이 올라가고, 수요가 줄어들면 가격은 떨어지게 됩니다. 수요자들에게 인기가 많은 직항 항공권의 가격이 상대적으로 인기가 적은 경유 항공권의 가격보다 비싼 이유가 설명되는 것이죠.\nG: 수요자 입장에서는 확실히 말씀하신대로 경유보다 직항이 선호될 수밖에 없는 것 같아요. 경유 항공권은 중간에 들르는 공항에서도 꽤 긴 시간 머물러야 하기 때문에, 여행지에 도착하는 시간도 늦어질 수밖에 없으니까요.\nK: 그렇죠. 수요자뿐 아니라 공급자 관점에서도 항공권의 가격이 차이나는 이유를 설명할 수 있는데요.\n항공사가 직항 노선을 운영하기 위해서는 일정한 수의 승객이 유지되어야 합니다. 주요 도시를 연결하는 인기 노선은 괜찮지만, 상대적으로 수요의 불확실성이 높은 노선에서는 직항 항공편의 좌석이 다 차지 않는 문제가 발생할 수 있습니다.\n이와 같이 상대적으로 수요가 일정하지 않은 노선에 대해 항공사는 두 가지 선택지를 가지고 있습니다.\n첫 번째는 직항 항공편을 유지하되, 수요의 불확실성에 대한 위험을 감수하기 위해 더 높은 요금을 부과하는 것입니다. 또한 이런 노선일수록 직항편이 희소하여 공급이 부족하기 때문에, 항공권 가격이 올라가게 되죠.\n두 번째는 해당 직항 노선을 폐지하고, 경유 노선을 운영하는 것입니다. 예를 들어, 좌석이 반쯤 빈 직항편을 운행하는 대신, 경유 노선을 통해 연결 도시로 가는 좌석이 꽉 찬 비행기를 운행하는 것인데요. 그 도시에서 또 다른 승객들을 태우고 최종 목적지로 가게 하는 것이죠.\nG: 아하, 이런 이유로 경유 항공편이 생기는 거군요. 그럼 직항 항공편 대신 경유 항공편을 운영하는 것이 항공사에게는 어떤 이점이 있는 걸까요?\n2) 고정비용과 가변비용\nK: 비용 측면에서 분석해보죠. 경제학에서 비용은 크게 ‘고정비용(fixed costs)’과 ‘가변비용(variable costs)’으로 나누어집니다.\n고정비용은 항공사가 항공편을 운영하는 데에 들어가는 비용 중, 승객 수나 항공편 수에 관계 없이 일정하게 발생하는 비용을 말합니다. 항공기 리스 비용과 유지 보수비, 조종사와 승무원 급여 등이 있죠. (참고로 항공기 한 대 가격이 워낙 비싸기 때문에, 항공사들은 항공기를 직접 구매하기 보다 리스를 주로 합니다)\n반면, 가변비용은 항공사가 항공편을 운영하는 데에 들어가는 비용 중 승객 수나 항공편 수에 따라 변하는 비용입니다. 연료비, 공항 이용료, 기내 서비스 비용 등이 있어요.\n고정비용 관점에서 보면, 승객이 많든 적든 항공기 리스 비용과 직원들에 대한 급여는 매달 고정적으로 나가야 하는데요. 경유 항공편은 한 항공기를 여러 구간으로 나누어 운영하기 때문에, 탑승률을 높일 수 있다는 장점이 있습니다. 한 항공기로 더 많은 승객을 태우면 원래 나가야 하는 고정비용이 여러 구간의 승객들에 의해 분산될 수 있는 것이죠.\nG: 몇 명이 탑승하든, 몇 번의 항공을 담당하든 고정비용은 어차피 나가야 하는 돈이니 항공사 입장에서 손해를 안 볼 수 있는 좋은 방법이겠네요.\nK: 맞습니다. 좀더 자세한 예시를 들어 볼게요. 서울에서 파리로 가는 직항 항공편은 한 번의 비행으로 전체 고정비용을 충당해야 합니다. 반면, 서울에서 두바이를 경유해 파리로 가는 항공편은 서울 - 두바이, 두바이 - 파리 두 구간으로 나누어 각 구간 승객들에게 고정비용을 분산하여 부담시킬 수 있는 것입니다.\n가변비용 관점에서 보면, 경유 항공편은 연료비와 공항 이용료 등이 직항편에 비해 증가할 수 있습니다. 그러나 경유편 운영을 통해 얻을 수 있는 고정비용 절감 효과에 비해 가변비용의 증가분은 크지 않을 수 있어요.\n서울에서 파리로 가는 두바이 경유 항공편의 경우, 두바이에서 추가 승객을 태워 얻을 수 있는 추가 이익이 추가로 발생하는 연료비와 공항 이용료보다 더 큰 것이죠.\nG: 결과적으로 항공사는 경유편 운영을 통해 비용을 절감할 수 있고, 이런 이유로 경유 항공편 가격이 직항 항공편보다 저렴하게 설정될 수 있는 것이군요.\nK: 그렇죠. 참고로 미국은 땅이 워낙 넓다 보니, 다른 도시로 이동할 때 (우리가 기차 타듯) 거의 모든 사람들이 비행기를 타잖아요. 비행기 사용량이 많아질 수밖에 없으니, 미국 주요 항공사들은 직항편보다 주요 허브 공항을 중심으로 여러 목적지를 연결하는 방식인 허브 앤 스포크(Hub-and-Spoke) 시스템을 운영합니다.\n델타 항공은 애틀랜타(Atlanta) 공항, 아메리칸 항공은 댈러스-포트워스(Dallas/Fort Worth) 공항, 유나이티드 항공은 시카고 오헤어(Chicago O’Hare) 공항을 허브 공항으로 사용하는데요. 경유 항공편을 통해 여러 승객을 허브 공항으로 모으고, 거기서 다시 다양한 목적지로 연결시킴으로써 비용을 절감할 수 있는 것이죠.\nG: 같은 이유로 미국 내 이동을 담당하는 항공편 역시 직항보다 경유가 저렴하군요. 직항 항공편은 허브 공항을 거치지 않고 바로 목적지로 가는 편리함을 제공하니, 더 높은 요금이 부과되는 경향이 있는 것이고요.\n3) 가격 차별 (price discrimination)\nK: 맞습니다. 한편, 경유 항공편이 직항 항공편보다 저렴한 이유를 ‘가격 차별’ 관점에서도 설명할 수 있는데요. 보통 기업은 수익을 극대화하기 위해 동일 제품이나 서비스에 가격을 다르게 설정하곤 합니다. 얼마나 비용을 지불할 능력과 의지가 있는지에 따라 고객군을 구분하죠.\n항공편을 예로 들어보겠습니다. 출장 목적으로 항공기를 이용하는 고객들은 시간에 민감해요. 출장 비용은 보통 회사에서 지원을 받기 때문에 시간을 아끼기 위해 더 비싼 직항 항공편을 선택할 가능성이 높고요.\n반면 상대적으로 시간에 여유가 있거나 비용을 중요하게 여기는 고객들은 시간이 더 걸리고 불편하더라도 비용을 아끼기 위해 경유 항공편을 선택할 가능성이 높습니다.\n항공사 입장에서는 이렇게 서로 다른 성격을 갖는 고객들에게 다른 가격을 책정한 항공편을 판매하고자 합니다. 직항 항공편과 경유 항공편에 서로 다른 가격을 책정하고, 더 많은 고객을 유치하고 수익을 늘리려 하는 것이죠.\n그래서 저가 항공사들은 더 싼 비용을 선호하는 고객들에게 다양한 경유 항공편을 낮은 가격에 제공합니다. 학생이나 예산이 한정되어 있는 여행객들을 주된 타겟으로 삼는 것이죠. 저가 항공사 입장에서는 고가의 직항 항공권 대비 저렴한 경유 항공권을 다양한 조건으로 판매하는 전략이 항공 시장 내 점유율을 높이는 것이라 판단한 것이죠.\nG: 그렇겠네요. 비용에 민감한 고객들을 데려올 수 있는 확실한 방법이니까요.\nK: 이러한 가격 차별 원리를 항공편이 아닌 다른 분야에서도 찾아볼 수 있는데요. 예전에 살펴본 학생 할인이 대표적인 예시입니다. 학생들은 직장인 대비 구매력이 떨어지는 고객이기에, 기업 입장에서는 아예 학생과 직장인 두 그룹으로 소비자를 구분해 서로 다른 가격을 매기는 것이죠.\n우리가 많이 이용하는 유튜브도 가격 차별 원리를 잘 이용하고 있습니다. 유튜브는 광고가 없는 유료 서비스와 중간에 광고가 포함되는 무료 서비스를 나누어 제공하고 있는데요. 비용을 내더라도 끊김 없이 시청하고자 하는 고객과 중간 광고가 좀 불편하더라도 비용을 아끼는 것이 더 중요한 고객을 아예 구분하고, 각각의 고객에 맞는 맞춤형 서비스를 제공하는 것입니다.\n넷플릭스도 마찬가지죠. 광고 없이 시청할 수 있는 상품에 비해, 중간 광고가 나오는 상품 가격이 더 저렴합니다. 시간이나 편의성을 중요시하는 고객에게는 프리미엄 버전을, 비용을 중시하는 고객에게는 보다 경제적인 버전을 제공하는 가격 차별 전략을 사용하는 것이죠.\n\n오늘은 경유 항공편이 직항 항공편을 비교해 보면서 항공사들이 어떻게 가격을 책정하고, 왜 일부 노선이 상대적으로 저렴한지에 대해 1) 수요와 공급의 원리, 2) 고정비용과 가변비용, 3) 가격 차별 - 세 가지 경제 이론으로 살펴보았는데요. 앞으로 여행 계획을 세울 때 이 개념을 떠올리면서 항공권의 가격을 비교해보면 좋을 것 같습니다.\n.css-1ifza5r{border:0;margin-top:0;margin-bottom:0;height:1px;opacity:1;background:var(--tHairlineBackground);margin:0;}\nEdit 금혜원 Graphic 조수희 이제현",
        "content": "직항보다 경유가 싼 이유, 당연하다고만 생각했는데 경제학 원리가 숨어있었어요.",
        "contentSnippet": "직항보다 경유가 싼 이유, 당연하다고만 생각했는데 경제학 원리가 숨어있었어요.",
        "guid": "https://blog.toss.im/article/everyday-economics-17-airline-ticket",
        "isoDate": "2024-07-31T07:00:00.000Z"
      }
    ]
  },
  {
    "name": "모나미",
    "category": "개인",
    "posts": []
  },
  {
    "name": "김진홍",
    "category": "개인",
    "posts": []
  }
]