[
  {
    "id": 1,
    "imageUrl": "",
    "title": "파이어 베이스 functions 로컬 실행 및 자동 실행 / Typescript",
    "description": "typescript 로 작업하는데 저장하니까 새로고침이 안되는군요\n \n노드몬 설치합니다. \n(필요 없을꺼 같군요)\nnpm install nodemon -g \n \npackage.json 에 script 부분을 수정해야합니다.\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"build:watch\": \"tsc --watch\",\n    \"serve2\": \"npm run build && firebase emulators:start --only functions\",\n    \"serve\": \"npm run build && --watch | firebase emulators:start --only functions\",\n    \"shell\": \"npm run build && firebase functions:shell\",\n    \"start\": \"npm run shell\",\n    \"deploy\": \"firebase deploy --only functions\",\n    \"logs\": \"firebase functions:log\"\n  },\nserve2 가 기존 명령 보관해둔거구요\nserve 가 새로 넣은 명령입니다. --watch 가 들어간걸 알 수 있습니다.\n테스트 서버 실행\nfirebase emulators:start \n \n다시 실행 해주긴하는데\n반응이 겁나 느립니다.\n이런 환경에서 개발하다니 놀랍습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1212",
    "pubDate": "Tue, 18 Mar 2025 21:21:50 +0900",
    "creator": "이건개발",
    "categories": [
      "프로그래밍/개발메모"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Sign Up for the free Pure Virtual C++ 2025 Conference",
    "description": "Every year we run Pure Virtual C++: a free one-day virtual conference for the whole C++ community. Next month we’re doing it again! Sign-up for free to get access to our five live sessions and a host of pre-conference content. The live event will start at April 30th 14:00 UTC. Videos will be available to […]\nThe post Sign Up for the free Pure Virtual C++ 2025 Conference appeared first on C++ Team Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/cppblog/sign-up-for-the-free-pure-virtual-c-2025-conference/",
    "pubDate": "Fri, 21 Mar 2025 11:34:23 +0000",
    "creator": "Sy Brand",
    "categories": [
      "Announcement",
      "Pure Virtual C++"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "IntelliJ IDEA 2024.3.5 Is Out!",
    "description": "We’ve released another update for v2024.3! You can update to this version from inside the IDE, using the Toolbox App, or by using snaps if you are a Ubuntu user. You can also download it from our website. This new version that brings the following valuable improvements:  To see the full list of issues addressed in this […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/idea/2025/03/intellij-idea-2024-3-5/",
    "pubDate": "Tue, 18 Mar 2025 10:38:35 +0000",
    "creator": "Maria Kosukhina",
    "categories": [
      "releases",
      "2024-3",
      "bug-fix-update",
      "intellij-idea-2024-3"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "코드 품질 개선 기법 6편: 마구 자를 것인가 반듯하게 자를 것인가",
    "description": "안녕하세요. 커뮤니케이션 앱 LINE의 모바일 클라이언트를 개발하고 있는 Ishikawa입니다.\n저희 회사는 높은 개발 생산성을 유지하기 위해 코드 품질 및 개발 문화 개선에 힘쓰...",
    "reviews": [],
    "syllabus": [],
    "link": "https://techblog.lycorp.co.jp/ko/techniques-for-improving-code-quality-6",
    "pubDate": "Wed, 19 Mar 2025 02:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "Enhance Pull Request Reviews with In-Depth Feedback",
    "description": "Visual Studio 2022 has taken the pull request experience to the next level by making reviews interactive. We previously enabled viewing your pull request comments inline in your working files. Now, the latest update empowers you to add comments directly within the IDE, streamlining the review process. Now, pull request reviewers can conduct deep reviews […]\nThe post Enhance Pull Request Reviews with In-Depth Feedback appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/enhance-pull-request-reviews-with-in-depth-feedback/",
    "pubDate": "Thu, 20 Mar 2025 15:00:02 +0000",
    "creator": "Jessie Houghton",
    "categories": [
      "Git",
      "Team and Development",
      "Visual Studio",
      "GitHub"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "C++ Dynamic Debugging: Full Debuggability for Optimized Builds",
    "description": "Over the past 5 years, we’ve had many incredible opportunities to engage with game developers. From AAA studios to indie developers, the passion for slashing iteration times is significant. Amidst all the fantastic feedback we’ve received for Visual Studio, one sentiment has rung loud and clear: a desire to debug optimized C++ code without sacrificing […]\nThe post C++ Dynamic Debugging: Full Debuggability for Optimized Builds appeared first on C++ Team Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/cppblog/cpp-dynamic-debugging-full-debuggability-for-optimized-builds/",
    "pubDate": "Wed, 19 Mar 2025 18:33:52 +0000",
    "creator": "David Li",
    "categories": [
      "C++",
      "Game Development",
      "debugging",
      "Optimized Builds"
    ]
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "heroku 는 유료였군요. 맛만본 개발자 체험기",
    "description": "vercel 은 망했구요\nheroku 가 잘된다고 해서 들어가봤습니다.\n가입절차가 많이 길군요\n일반 바갑\n-> OTP 등록 (세일즈포스 인증기)\n-> 대시보드\n-> new app 을 하면 그때결제 방법 등록하라고 합니다..\n당장 돈이 들지는 않고 사용료에 따라 돈을 내야한다고합니다.\n글을 보니 7달러 내본 사람이 있다고 합니다.\n클라우드 타입의 최소비용이 2.5만원\ncafe24 클라우드 비용은 만원\n정도이니 왠만하면 cafe24 클라우드가 나을 수도 있겠군요\n어차피 돈만 내면 제약을 없을태니\n적당한 방식의 사용은 괜찮아보입니다.\n \n장점\n웹소켓은 트래픽이 적으니 비용이 작을 것 같습니다.\n \n단점\n서버 위치가 미국만 있는거 같습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1220",
    "pubDate": "Fri, 21 Mar 2025 20:14:58 +0900",
    "creator": "이건개발",
    "categories": [
      "프로그래밍/개발메모"
    ]
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "선을 긋기",
    "description": "이 공간을 통해서도 과거에 몇 번 글을 쓴 적이 있는데, 내가 2012년에 스트롱을 시작하고 첫 2년 동안 투자자로서 가장 스트레스를 많이 받았던 건, 우리가 투자한 회사의 창업가보다 내가 그 사업에 대해서 더 많이 알고, 내가 그 사업을 하면 더 잘할 수 있을 것 같은데, 대표가 항상 내 생각과 말과 다르게 생각하고 행동할 때였다. 아마도 이걸(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/03/where-to-draw-the-line.html",
    "pubDate": "Wed, 19 Mar 2025 21:33:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "inspiring",
      "people",
      "Strong",
      "vc"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "유니티 2D 애니메이션 / 스프타라이트 말고 다른 방식",
    "description": "영상: https://www.youtube.com/watch?v=-7r9fZSmZJw&t=443s\n\n\n\n캐릭터가 맹한게 귀엽군요",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1219",
    "pubDate": "Fri, 21 Mar 2025 03:56:54 +0900",
    "creator": "이건개발",
    "categories": [
      "프로그래밍/개발메모"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "Hash..라니~!!",
    "description": "따끈따끈한 이번 작업을 소개하려고 한다. \n오늘의 주인공은 상용데이터의 Hash 마이그레이션이다.\n📌 등장 배경\n🌞 화창한 아침..운영 실무자에 의해 데이터 변경 요청이 떨어졌다\n\n현재 요청된 내용은 프로덕트에 매핑된 속성을 변경하되 그 속성 옵션값은 그대로 유지해달라는 요청이다. \n좀 더 구체적으로 말해보자면, 상품1에 속성으로 PRADA 컬러라는 속성이 있고 그 값으로 빨강, 주황이 있는데 상품 1의 속성을 GUCCI 컬러라는 속성으로 변경하되 값은 그대로 빨강, 주황으로 유지 해달라는 것이다.\n운영팀의 요청: 특정 상품의 속성을 다른 속성으로 변경해야 하지만, 속성 값은 유지해야 한다.\n문제: 기존 정책상 노출 속성은 수정할 수 없으므로, 마이그레이션 작업이 필요하다.\n현재 정책상 노출 속성은 한번 상품에 매핑되면 수정불가한 정책을 가지고 있기 때문에 우리가 마이그레이션을 해줄 수밖에 없다. \n\n내가 할일은 \nproduct_attribute에서 attribute를 변경해주고\nitem_attribute_option에서 attribute와 attributeOption을 변경해줘야한다. \n바꿀 attributeOption은 기존의 attributeOption 값과 일치한 것을 찾아다가 변경해주면된다. \n사실 여기까지보면 뭐.. 쿼리 돌려주면 되지 한다. 맞다 이 일은 어렵지 않다. 근데 문제는 hash이다. 이번 이야기에서 나오는 주제의 주인공은 HASH이다. \n우리는 상품과 아이템의 중복확인을 hash로 구별한다. \n상품 중복 조건 : 카테고리 + 상품이름 + 노출속성목록 + 브랜드Id + 모델명\n아이템 중복 조건 : 상품 Id + 노출속성목록 + 속성값목록\n이렇게 되어 있다. \n이번에 이 조건들 중에 상품에는 노출 속성 목록이, 아이템에는 노출속성목록과 속성값 목록이 변경되기 때문에 Hash를 새로 변경해줄 수밖에 없다. \n그럼 변경된 상품과 아이템만 변경하면되잖아? 하기에는 이번 작업부터 중복 조건이 일부 변경되었다. 위에 언급한 조건은 이번에 변경되는 조건에 해당된다.\n\n에이 변경하면 되지..하기엔 단순히 몇백개가 아니고 몇십만 단위다..ㅎ 거기다가 상품 중복 조건이 이번 작업부터 변경된 조건이라 해시 충돌이 안날래야 안날 수가 없는 작업이다 ㄸㄹㄹ,, \n💡 정리하자면, 상품과 아이템의 중복 여부를 확인하는 데 해시를 사용하는 이번 속성 변경하면서 그 기준이 되는 값 또한 변경이 되었기에 hash 작업이 필요하다\n📌 Hash?\n💡 해시\n임의의 크기를 가진 데이터를 고정된 크기의 데이터로 변화시켜 저장하는 것\n결론부터 말하자면, 동일한 입력값이면 항상 동일한 해시값이 생성되므로, 데이터를 직접 비교하지 않고도 빠르게 중복을 판별할 수 있다. 즉, 중복 체크하는데 성능적으로 해시가 더 빠르다고 판단한 것이다. \n🐳 직접 비교 Vs 해시 비교\n상품을 등록하는 걸 예시로 들어보자. \n상품을 등록하기 전 위 중복조건에 의해 중복된 상품이 있는지 확인해야 한다. \n만약 직접 비교해야 한다면?\nEXPLAIN SELECT * FROM product \nWHERE category_id = ? \nAND product_name = ? \nAND brand_id = ? \nAND model_no = ? \nAND displayed_attribute_ids = ?;\n해당 쿼리를 돌려 보면\n\n실행계획에 테이블 풀스캔하고 있음을 확인할 수 있었다. \n즉, 상품을 추가할때 기존 상품과 하나씩 비교한다는 것이다. -> 최악의 경우 O(N)\n풀 스캔하는 것을 보니 데이터가 많을수록 성능이 저하됨을 의미하는데 현재 우리 상품은 몇십만개이다. 그럼.. 성능은 아주 최악이 되는 것이다. \n그럼 Hash의 경우는?\nEXPLAIN SELECT * FROM product_identity pi\n               WHERE pi.hash = ?;\n해당 쿼리를 돌려보면\n\nconst row lookup으로 인덱스를 확용한 상수 조회를 하고 있음을 확인할 수 있다. \n해당 스캔 방식은 단일 행을 대상으로 하는 상수 값을 기반으로 하는데 Primary Key 또는 Unique Key에 대한 WHERE 절의 상수 값 비교가 있을 때 나타난다. \nhash에 의해 unique를 걸 수 있기 때문에 인덱스를 걸 수 있는 것이다. \n즉, 테이블의 유니크 인덱스 (uk_hash)를 사용하여 단 한개의 행만 조회하고 있다. \n-> 시간 복잡도 O(1) ~ O(logN)\n결과적으로 직접 비교보다 해시비교가 풀스캔 방지가 될 뿐만아니라 속도도 훨씬 빠르기 때문에 중복 검사에 해시를 적용하는 것이 성능상 최적이라는 것을 알 수 있다. \n정리하자면,\n직접 비교\n풀스캔, 시간복잡도 : O(N), 데이터 많을수록 성능 저하\nHash 비교\nO(1) ~ O(logN), 인덱스를 활용해 빠른 조회 가능\n📌 마이그레이션 작업에 대한 회고\n작업에 대한 플로우를 말해보자면,\n속성 변경에 대한 프로덕트-속성 매핑 데이터, 아이템-속성 매핑 데이터 변경 \n중복 조건에 의한 해시 충돌 테스트\n충돌된 상품에 대한 실무자 전달 및 데이터 정리\n프로덕트, 아이템 해시 테이블에 생성 -> 임시 테이블에 생성\n기존 해시 테이블 백업 후 임시테이블을 기존 테이블 명으로 변환\nproduct, item 해시 캐시의 기존 데이터 삭제 후 새로 생성\n상용 데이터를 다루기도 하고, 내 기준상 데이터가 많아서 사실 두렵기도 하고 어려움도 많았던 작업이었다. 이 작업을 하면서 흥미로웠던 구간은 기존의 데이터에 대한 해시 생성 구간이었다. \n아이템만 해도 현재 활성화된 아이템이 몇십만개인데 이걸 어떻게 생성을 하느냐?\n방법은 page를 활용해서 한번에 3000개씩 가져와서 배치를 돌리는 것이다. \n( 이건 그냥 여담인데 아무생각없이 10개씩 가져오도록 했다가 반나절이되어도 안끝났다..ㅎ 그래서 확 3000개씩 가져오는 걸로 바꾸었더니 5도 안되어서 끝났다. ㅎㅎ 네트워크 비용에 대한 체감이 확 드는 순간이었다. )\n🐳 내부 코드 분석\n가장 흥미로웠던 코드를 분석해보자.\n\n해당 코드는 대량 데이터를 한번에 삽입해야 할때 사용한다. \n먼저 excute 내부 코드를 살펴보면, ( Spring 내부 코드 )\n\n1) getTransaction() : 직접 트랜잭션을 가져오고,\n2) commit() : 트랜잭션을 직접 커밋하고\n3) rollbackOnException() : 트랜잭션을 수동으로 롤백하고\n이를 통해 excute() 메소드는 트랜잭션 관리 로직을 직접 실행하는 메서드임을 확인할 수 있다. \n-> 예외 발생시 전체 롤백이 되게 됨을 알 수 있다. 실제로 테스트할때 충돌로 인한 예외 발생시 전체 롤백된 것을 확인하였다. \n대망의 batchUpdate 메소드를 살펴보자면,  ( Spring 내부 코드 ) \n이 메소드는 JDBC 기반 배치 업데이트 메서드로 여러개의 데이터를 한번에 업데이트하는 기능을 함을 알 수 있다.\n\n실제로 Sql에 해당 하는 코드가\n\n이렇게 앞전에 선언해놓았고, 이것을 매개변수로 받아서 hash 생성을 한꺼번에 하는 것을 알 수 있었다. \n🐳 회고\n이 작업을 수행하면서, 역시 직접해봐야 좀더 와닿음을 다시 한번 확인하는 순간이었다. 내가 이번에 작업한 해시는 이전부터 중복 검사를 위해 해놓았던 조치였다. 그러나 내가 한게 아니다보니, 해시 작업에 대한 이해도가 낮았다. \n이번에 해시 생성 작업을 하다보니, 왜 필요하고 어떤 코드를 사용했는지 나를 납득해가면서 작업을 하다보니 얻어가는 것도 많고 이해도도 높아짐을 알 수 있었다. 나중에 중복 검사가 필요할때 이 작업을 떠올리며 해시를 생각해내지 않을까? ㅎㅎ😄\n처음에 이 작업이 주어졌을때, 상용 데이터를 만진다는 것에 대한 두려움이 있었는데, '이 연차에 어떤 누가 몇십만개의 상용 데이터를 다루는 경험을 하겠어?' 하는 마음으로 임했다. 그래도 무서웠다. 혹시 내가 잘못할까봐 덜덜 떨면서 했다. 며칠 지난 지금, 이 작업을 회고하면 간단한데? 싶다. \n이 작업에서 가장 오래 시간이 걸렸던 부분은 해시 충돌 부분이었다. \n사실 상품 해시 충돌은 예상했지만, 아이템 해시 충돌은 예상 못했다. 왜냐면 상품 해시 충돌된 것을 해결하면(상품 충돌난 아이템까지 삭제했기에) 아이템 중복 기준에 상품 ID가 있기 때문에 아이템 해시 충돌은 전혀 나지 않을 것이라 예상했기 때문이다. 그런데 아이템 해시 충돌이 발생했다.\n앞선 코드에 보여줬던 것이 하나라도 충돌되면 멈추는 로직이기때문에 몇십만개의 아이템을 다 돌리면서 충돌날때마다 에러나는 상황은 너무나도 시간이 많이 들기때문에 \n\n에러나더라도 계속 돌아가도록 해당 부분을 try-Catch로 감싸서 충돌나서 에러가 나더라도 멈추지 않도록 했고, 페이지네이션으로 3000개씩 데이터를 돌렸더니 몇십만개의 데이터가 모두 거의 5분만에 다 돌아가서 모든 충돌을 잡아낼 수 있었다. 덕분에 빠르게 어떤 아이템들이 충돌났는지 확인할 수 있었다.\n 거의 40개의 아이템이 충돌났고, 상품으로 따지자면 3개 상품에 대한 아이템들이었다. 알고보니 임의로 수동으로 넣은 아이템 데이터에서 발생한 것이다. 따라서 해당 아이템들과 상품들을 삭제하니 해결되었던 문제였다. \n해시 충돌된 상품들과 아이템들이 다행히 모두 주문이 나간적이 없거나 테스트 상품이라서 삭제하기 어렵지 않았다. 물론 해당 상품과 아이템들을 삭제하기 위해 그 하위 집단인 벤더아이템, 딜벤더아이템, 딜 등의 삭제 작업들을 추가로 해줘야 하지만 오더가 없었기에 스위칭이 아닌 삭제로 해결할 수 있었던 작업이었다. 이번 작업을 통해 실무자와 커뮤니케이션도 해야하고 배포 작업도 걸려있어서 부담이 많이 가는 작업이었다. 하지만, 정말 값진 경험이었다. 앞으로 중복검사나 데이터 마이그레이션이 필요할때 이번 경험이 큰 도움이 될 것 같다.",
    "reviews": [],
    "syllabus": [],
    "link": "https://velog.io/@sweet_sumin/Hash..%EB%9D%BC%EB%8B%88",
    "pubDate": "Thu, 20 Mar 2025 12:52:34 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "Introducing automatic documentation comment generation in Visual Studio",
    "description": "We are excited to announce that Copilot is now automatically integrated into Visual Studio’s editor to help you generate doc comments for functions. This new feature aims to streamline your documentation process and enhance your coding experience. To access these updates, you will need a GitHub Copilot subscription. If you don’t already have GitHub Copilot, […]\nThe post Introducing automatic documentation comment generation in Visual Studio appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/introducing-automatic-documentation-comment-generation-in-visual-studio/",
    "pubDate": "Mon, 17 Mar 2025 15:00:10 +0000",
    "creator": "Sinem Akinci, Allie Barry",
    "categories": [
      "Copilot",
      "Productivity",
      "Visual Studio",
      "Docs"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "다음(Daum)의 굴곡진 역사, 포털 제왕에서 카카오의 손을 떠나기까지",
    "description": "한때 대한민국을 대표했던 포털, 다음(Daum). 한메일과 카페로 인터넷 문화를 선도했지만, 네이버와 구글의 부상, 모바일 전환 실패로 쇠퇴의 길을 걸었습니다. 결국 카카오에 인수된 다음은 이제 다시 독립할 가능성이 제기되고 있는데요. 그렇다면 티스토리의 운명은 어떻게 될까요?\n\n\n \n\"다음 카페에서 찾아볼게.\"\n이 말이 인터넷에서 자연스럽게 오가던 시절이 있었습니다. 2000년대 초반까지만 해도 다음(Daum)은 대한민국에서 가장 인기 있는 포털이었어요. 검색하면 네이버가 아니라 다음이 먼저 나왔고, 이메일도 다음의 한메일이 대세였습니다.\n \n하지만 지금은 다릅니다. 포털 1위 자리는 네이버에게 완전히 내줬고, 뉴스·검색·커뮤니티 서비스도 예전만 못합니다. 한때 포털의 제왕이었던 다음은 어떻게 지금의 상황에 처하게 된 걸까요?\n \n저 역시 인터넷 초창기부터 다음을 사용해왔고, 지금도 티스토리를 운영하는 블로거로서 이 변화가 남의 일처럼 느껴지지 않아요. 오늘은 다음이 어떻게 성장하고 쇠퇴했으며, 티스토리가 앞으로 어떤 길을 걷게 될지 이야기해보려고 합니다.\n \n \n1. 다음(Daum)의 전성기: 한메일과 포털의 제왕 (1995~2000년대 초반)\n1995년, 대한민국의 인터넷 환경은 지금과 많이 달랐습니다. 인터넷이 보급되기 시작하던 시절, 기업과 연구기관을 중심으로 이메일이 사용되었지만, 일반 사용자는 쉽게 접근할 방법이 없었어요.\n \n이때 이재웅 대표가 창업한 ‘다음커뮤니케이션’은 무료 이메일 서비스 ‘한메일(Hanmail)’을 선보이며 인터넷 대중화를 이끌었습니다. 당시 이메일을 무료로 제공하는 것은 혁신적인 서비스였고, 이 덕분에 다음은 급속도로 성장할 수 있었어요.\n \n<다음이 출범한 1999년은 야후(Yahoo)의 위상이 인터넷 업계에서 세계 최고 정점에 이르렀던 시기였다!!>\n\n\n✅ 다음의 성공 요인\n무료 이메일 서비스(한메일) 제공 → 국내 최초의 대중화된 이메일 서비스\n카페, 뉴스, 커뮤니티 중심 포털 구축 → 정보 검색과 온라인 커뮤니티 활성화\n한국 시장에 최적화된 서비스 제공 → 야후, 라이코스 등 해외 포털과의 차별화\n1999년, 다음은 이메일을 기반으로 ‘다음(Daum) 포털 사이트’를 오픈하면서 대한민국 최대 포털로 자리 잡았습니다.\n특히 다음 카페는 온라인 커뮤니티 문화의 중심이었습니다. 네이버의 ‘지식iN’이 등장하기 전까지, 많은 사용자들이 정보를 얻기 위해 다음 카페를 이용했어요.\n하지만 이런 성공은 오래가지 않았습니다.\n \n2. 네이버와 구글에 밀려난 다음 (2000년대 중반~2010년대 초반)\n2000년대 중반부터 다음의 하락세가 시작되었습니다. 가장 큰 이유는 검색 엔진 경쟁에서 밀려났기 때문이에요.\n네이버의 ‘지식iN’과 검색 기술 강화\n\n네이버는 2002년 ‘지식iN’을 출시하며 검색 점유율을 급격히 끌어올렸어요.\n당시 검색 기술이 부족했던 상황에서, 사용자들이 직접 답변을 달아주는 ‘지식iN’ 서비스는 검색의 패러다임을 바꿨죠.\n다음의 검색 서비스는 상대적으로 뒤처지면서 점점 사용자들의 이탈이 가속화되었습니다.\n구글의 광고 모델(애드센스) 도입\n\n구글이 애드센스를 도입하면서 온라인 광고 시장이 급변했어요.\n하지만 다음은 이에 효과적으로 대응하지 못했고, 네이버 역시 자체 광고 시스템을 구축하면서 다음의 수익 모델이 흔들리기 시작했습니다.\n모바일 시장 대응 부족\n\n2010년 이후 스마트폰이 대중화되면서 모바일 검색이 중요해졌습니다.\n네이버는 ‘모바일 최적화’를 빠르게 진행했지만, 다음은 대응이 늦었어요.\n  이 시점에서 다음의 웹 검색 점유율은 10%대로 추락했고, 네이버가 70% 이상을 차지하는 독점적 구조가 형성되었습니다.\n \n3. 티스토리의 탄생과 성장 (2006~2010년대 초반)\n2000년대 중반, 블로그가 새로운 콘텐츠 플랫폼으로 주목받기 시작했어요.\n2006년, 태터앤컴퍼니(TNC)가 개발한 티스토리(Tistory)는 기존 블로그 서비스와 차별화된 특징을 갖고 있었습니다.\n✅ 티스토리의 차별점\nHTML/CSS 편집 가능 → 완전한 자유도 제공\n애드센스(AdSense) 및 자체 광고 운영 가능 → 수익형 블로그 운영 가능\n개방형 플랫폼 → 검색 엔진 최적화(SEO) 강점\n  2007년, 다음이 TNC를 인수하면서 티스토리는 다음의 공식 블로그 서비스가 되었습니다.\n \n이후 많은 블로거들이 네이버 블로그 대신 티스토리를 선택했어요. 하지만 2010년대 이후 유튜브, SNS 중심의 콘텐츠 소비가 늘어나면서 블로그 시장도 점차 변화를 맞이하게 됩니다.\n \n4. 카카오의 다음 인수 (2014년)와 티스토리의 변화\n2014년, 카카오는 다음을 인수하며 ‘다음카카오’라는 새로운 기업을 출범했습니다.\n카카오는 다음을 인수하면서 검색 트래픽과 콘텐츠 플랫폼을 강화하려는 전략을 내세웠습니다.\n하지만 시간이 지나면서 카카오는 점점 카카오톡, AI, 금융(카카오페이), 콘텐츠(브런치·카카오뷰) 사업에 집중하며, 다음과 티스토리는 점점 우선순위에서 밀려났습니다.\n결국, 카카오는 2023년, 포털 서비스 '다음(Daum)'을 사내독립기업(CIC, Company-in-Company)으로 전환했습니다. 이는 급변하는 인터넷 환경 속에서 포털 사업의 자율성을 높이고, 독립적인 의사 결정을 통해 경쟁력을 강화하려는 목적이었습니다. 당시 카카오는 다음의 검색, 뉴스, 커뮤니티 서비스 등을 최적화하는 한편, 자사 핵심 서비스인 카카오톡, AI, 금융 사업에 더욱 집중하는 전략을 펼쳤습니다.\n그러나 2025년 3월, 카카오는 결국 다음의 분사를 공식 발표했습니다. 정확한 분사 시점은 아직 정해지지 않았지만, 이번 결정은 포털 사업의 독립성을 더욱 강화하고, 다음의 새로운 성장 가능성을 모색하기 위한 움직임으로 해석됩니다. 이에 따라 다음과 티스토리의 향후 운영 방향과 서비스 구조에도 큰 변화가 예상되며, 기존 사용자들도 이에 대한 대비가 필요할 것으로 보입니다.\n \n \n5. 다음(Daum)과 티스토리, 앞으로 어떻게 될까?\n다음과 티스토리가 처한 현재 상황을 이해했다면, 이제 앞으로의 미래가 궁금해질 텐데요.\n다음과 티스토리의 미래는 단순히 한 번의 분석으로 끝날 문제가 아닙니다. 이에 따라, 보다 심층적으로 다룰 예정입니다.\n  다음 연재 시리즈에서 다룰 주제\n1. 다음의 분사가 티스토리에 미치는 영향\n2. 티스토리의 유료화 가능성과 블로거들의 대응 전략\n3. 티스토리를 대체할 수 있는 플랫폼 비교 분석\n  앞으로의 연재 시리즈에서 티스토리의 미래를 보다 깊이 있게 다룰 예정이니, 계속 지켜봐 주세요!  \n  Q&A\nQ1. 다음(Daum)은 왜 네이버에게 1위 자리를 빼앗겼나요?\nA. 네이버가 검색 엔진을 강화하고, ‘지식iN’ 같은 차별화된 서비스를 제공하면서 검색 점유율을 급격히 끌어올렸기 때문입니다. 또한 모바일 시장 대응이 늦어지면서 점유율을 잃었습니다.\nQ2. 티스토리는 왜 네이버 블로그보다 인기가 많았나요?\nA. 티스토리는 HTML/CSS 편집이 가능하고, 애드센스를 통한 수익화가 가능했기 때문에 많은 블로거들에게 인기가 있었습니다. 반면, 네이버 블로그는 폐쇄적인 운영 방식을 고수했습니다.\nQ3. 카카오는 왜 다음을 인수했나요?\nA. 카카오는 다음을 인수하여 포털 검색 트래픽을 활용하고, 뉴스·커뮤니티·광고 플랫폼을 강화하려 했습니다. 하지만 시간이 지나면서 검색보다는 카카오톡, AI, 금융 등 다른 사업에 집중하게 되었습니다.\nQ4. 다음이 카카오에서 분리되면 티스토리는 어떻게 될까요?\nA. 티스토리가 다음과 함께 독립할지, 아니면 카카오가 유지할지가 관건입니다. 카카오가 유지하면 브런치, 카카오뷰와의 연계가 강화될 가능성이 높고, 다음과 함께 독립한다면 기존 포털 검색 기반 블로그로 남을 가능성이 큽니다.\nQ5. 티스토리를 떠나야 할까요?\nA. 티스토리의 미래가 불확실한 만큼, 워드프레스, 브런치, 네이버 블로그 같은 대체 플랫폼을 고려해 대비하는 것이 좋습니다.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"다음(Daum)은 왜 네이버에게 1위 자리를 빼앗겼나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네이버가 검색 엔진을 강화하고, ‘지식iN’ 같은 차별화된 서비스를 제공하면서 검색 점유율을 급격히 끌어올렸기 때문입니다. 또한 모바일 시장 대응이 늦어지면서 점유율을 잃었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"티스토리는 왜 네이버 블로그보다 인기가 많았나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"티스토리는 HTML/CSS 편집이 가능하고, 애드센스를 통한 수익화가 가능했기 때문에 많은 블로거들에게 인기가 있었습니다. 반면, 네이버 블로그는 폐쇄적인 운영 방식을 고수했습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"카카오는 왜 다음을 인수했나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"카카오는 다음을 인수하여 포털 검색 트래픽을 활용하고, 뉴스·커뮤니티·광고 플랫폼을 강화하려 했습니다. 하지만 시간이 지나면서 검색보다는 카카오톡, AI, 금융 등 다른 사업에 집중하게 되었습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"다음이 카카오에서 분리되면 티스토리는 어떻게 될까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"티스토리가 다음과 함께 독립할지, 아니면 카카오가 유지할지가 관건입니다. 카카오가 유지하면 브런치, 카카오뷰와의 연계가 강화될 가능성이 높고, 다음과 함께 독립한다면 기존 포털 검색 기반 블로그로 남을 가능성이 큽니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"티스토리를 떠나야 할까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"티스토리의 미래가 불확실한 만큼, 워드프레스, 브런치, 네이버 블로그 같은 대체 플랫폼을 고려해 대비하는 것이 좋습니다.\"\n      }\n    }\n  ]\n}",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483556",
    "pubDate": "Wed, 19 Mar 2025 09:40:40 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "NEWS/IT 뉴스",
      "검색 엔진",
      "네이버",
      "다음",
      "다음 카페",
      "카카오",
      "카카오 다음 분사",
      "티스토리",
      "티스토리 유료화",
      "포털 역사",
      "한메일"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "Find the IDE features you need with GitHub Copilot and Search",
    "description": "Ever find yourself needing to locate a specific menu item, command, or option in Visual Studio, but you don’t know its name or location? Do you often struggle to find detailed instructions on using certain features effectively? Now, there’s a solution to get you the information you need right in the IDE. Visual Studio now […]\nThe post Find the IDE features you need with GitHub Copilot and Search appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/find-the-ide-features-you-need-with-github-copilot-and-search/",
    "pubDate": "Wed, 19 Mar 2025 15:00:29 +0000",
    "creator": "Leah Tran",
    "categories": [
      "GitHub Copilot",
      "Visual Studio",
      "GitHub Copilot Chat",
      "Search"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "Optimizing Build Times with Build Insights: How Activision Cut Call of Duty’s Build Time by 50%",
    "description": "Slow build times are a major headache for developers, especially in large, complex C++ codebases like game engines. Every minute spent waiting on a build is time that could be used to refine features, resolve issues, or push development forward. Activision faced this challenge with Call of Duty: Modern Warfare II, where prolonged build times […]\nThe post Optimizing Build Times with Build Insights: How Activision Cut Call of Duty’s Build Time by 50% appeared first on C++ Team Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/cppblog/optimizing-build-times-with-build-insights-how-activision-cut-call-of-dutys-build-time-by-50/",
    "pubDate": "Tue, 18 Mar 2025 13:51:17 +0000",
    "creator": "Moyo Okeremi",
    "categories": [
      "Build Insights",
      "Build Optimization",
      "C++",
      "Game Development",
      "Activision"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "Kling AI 로 뽑은 영상 02",
    "description": "이전글 : https://serverdown.tistory.com/1213\n지난번에 반대로 회전했었고\n화전 반향을 지정해봐야 안먹힌다는 사실을 알았습니다.\n그래서 천천히 움직이라고 추가했고 \n영상이 짧으니 천천히 움직이면 당연히 조금밖에 못움직입니다.\n \n프롬프트\nMove your head slowly.\nBlink your eyes.\nMove your mouth gently.\n천천히 고개를 움직이고\n눈을 깝박이고\n입을 부드럽게 움직여라\n이렇게 적은것입니다.\n결과물\n \n\n\n\n눈을 깜박임이 과하군요 횟수 까지 지정해줘야겠군요",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1218",
    "pubDate": "Fri, 21 Mar 2025 01:41:26 +0900",
    "creator": "이건개발",
    "categories": [
      "유튜브"
    ]
  }
]