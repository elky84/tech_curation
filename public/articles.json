[
  {
    "id": 1,
    "imageUrl": "",
    "title": "JetBrains Academy – September Digest",
    "description": "Do you remember, dancin’ in September? 🎶 This September, let JetBrains keep the rhythm of your studies strong with free JetBrains IDEs and tools for study, a brand-new collaboration between AWS and JetBrains Academy, exclusive opportunities for school students, and more. Ready to groove into learning?",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/education/2025/09/19/jetbrains-academy-september/",
    "pubDate": "Fri, 19 Sep 2025 11:02:32 +0000",
    "creator": "Maria Sharobaeva",
    "categories": [
      "digest",
      "jetbrains-academy",
      "newsletter"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Kubernetes CPU Limit을 사용하면 벌어지는 일",
    "description": "[![NHN Cloud_meetup banner_K8s CPU limit_202509-01.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannerK8s%20CPU%20limit20250901.png)](https://www.nhncloud.com/kr)\r\r\n\r\r\n## 들어가며\r\r\n오늘날 대부분의 서비스가 컨테이너 환경을 이용하고 있고, 컨테이너를 실행하는 환경으로는 Kubernetes가 표준으로 자리 잡고 있습니다. Kubernetes에서 컨테이너를 실행할 때는 Pod를 사용하는데요. Pod를 사용할 때 컨테이너의 리소스를 얼마나 할당할 것인가는 클러스터의 안정성과 연결되어 있기 때문에 중요한 문제 중 하나입니다. Pod의 컴퓨팅 리소스는 보통 다음과 같이 **requests**와 **limit**으로 설정할 수 있습니다.\r\r\n\r\r\n```\r\r\napiVersion: v1\r\r\nkind: Pod\r\r\nmetadata:\r\r\n  name: frontend\r\r\nspec:\r\r\n  containers:\r\r\n  - name: app\r\r\n    image: images.my-company.example/app:v4\r\r\n    resources:\r\r\n      requests:\r\r\n        memory: \"64Mi\"\r\r\n        cpu: \"250m\"\r\r\n      limits:\r\r\n        memory: \"128Mi\"\r\r\n        cpu: \"500m\"\r\r\n  - name: log-aggregator\r\r\n    image: images.my-company.example/log-aggregator:v6\r\r\n    resources:\r\r\n      requests:\r\r\n        memory: \"64Mi\"\r\r\n        cpu: \"250m\"\r\r\n      limits:\r\r\n        memory: \"128Mi\"\r\r\n        cpu: \"500m\"\r\r\n\r\r\n```\r\r\n\r\r\n리소스를 설정할 때 우리는 보통 메모리를 중심으로 정하는데요, 컨테이너의 메모리 사용량이 한계값에 도달하면 Pod는 재실행됩니다.\r\r\n그렇다면, CPU 사용량의 경우에는 어떨까요? 자주 사용되진 않지만 한 번쯤 알아두면 좋은 CPU 사용량 제한에 대해 알아보았습니다.\r\r\n\r\r\n## Kubernetes CPU Resource 설정\r\r\n먼저 Pod의 Resource 항목에서 설정 가능한 CPU의 Request와 Limit, 그리고 단위에 대해 알아보도록 하겠습니다.\r\r\n\r\r\n### 1. CPU Requests\r\r\nCPU requests는 컨테이너가 정상적으로 실행하기 위한 최소한의 CPU 양을 의미합니다. requests는 kube-scheduler가 Pod를 노드에 할당하는 스케줄링 작업에서 사용합니다. kube-scheduler는 Pod의 requests 값을 합산하여 할당 가능한 노드를 찾아서 Pod를 배치합니다. 노드에 Pod의 requests를 수용할 만한 여유가 있어야 할당이 되는 것이죠. 이 조건을 만족하는 노드가 없다면 Pod는 pending 상태로 스케줄링되지 않습니다.\r\r\nPod가 특정 노드에 스케줄링되었다면 요청된 CPU의 양은 보장됩니다. 이 말은 requests의 양만큼 CPU를 항상 점유한다는 뜻은 아닙니다. CPU 사용에 경합이 발생했을 때도 요청한 만큼의 CPU 시간을 할당 받는 것을 보장합니다. requests의 값이 없다면 Pod가 비효율적으로 배치될 수 있고 필요 이상의 클러스터 자원을 사용하여 불필요한 비용 지출이 발생할 수 있습니다.\r\r\n\r\r\n### 2. CPU Limits\r\r\nCPU limits는 컨테이너가 사용할 수 있는 CPU의 절대적인 최댓값을 의미하며 kubelet이 관리합니다. Pod의 컨테이너가 limits를 초과하여 CPU를 사용하려 할 때 해당 컨테이너의 CPU 사용을 인위적으로 낮추는 스로틀링(Throttling)을 통해 상한선을 강제합니다. limits는 여러 서비스가 동시에 실행되고 있는 Kubernetes 클러스터에서 하나의 컨테이너가 CPU를 과점하여 다른 컨테이너의 성능에 영향을 주거나 노드의 안정성을 해치는 CPU 기아 상태를 방지하는 데 의미가 있습니다.\r\r\n\r\r\n### 3. CPU Unit\r\r\nKubernetes에서 CPU의 단위는 절대적인 양으로 사용되며 1 Kubernetes CPU는 1vCPU 또는 물리적인 1 CPU 코어의 컴퓨팅 파워와 동일한 것으로 간주합니다.\r\r\nKubernetes에서는 코어를 밀리코어(millicore)로 더 작게 나누어 설정할 수 있습니다. 1000m은 1 CPU와 동일하며 0.5 CPU는 500m과 같습니다.\r\r\n\r\r\n### 4. QoS(quality of service, 서비스 품질) 클래스\r\r\nKubernetes는 설정한 requests와 limits에 따라서 자동으로 QoS 클래스를 할당합니다.\r\r\n• **Guaranteed (보장)**: Pod 내의 모든 컨테이너가 CPU와 메모리에 대해 requests와 limits를 모두 설정하고, 그 값이 서로 동일할 때(requests.cpu == limits.cpu) 할당됩니다. 이 Pod들은 가장 높은 우선순위를 가지며, 노드에 리소스 압박이 발생했을 때 가장 마지막에 축출(eviction)됩니다.\r\r\n• **Burstable (버스트 가능)**: Pod 내에 최소 하나 이상의 컨테이너가 CPU 또는 메모리 requests를 설정했지만, Guaranteed 클래스의 조건을 충족하지 못할 때 할당됩니다(예: requests.cpu < limits.cpu). 이 Pod들은 노드에 여유 리소스가 있을 경우, 요청한 양보다 더 많은 리소스를 \"버스트(burst)\"하여 사용할 수 있습니다.\r\r\n• **BestEffort (최선 노력)**: Pod 내의 어떤 컨테이너도 CPU나 메모리에 대한 requests나 limits를 설정하지 않았을 때 할당됩니다. 이 Pod들은 가장 낮은 우선순위를 가지며, 노드 리소스가 부족해지면 가장 먼저 축출 대상이 됩니다. \r\r\n\r\r\n## 리눅스 커널의 CPU 관리 메커니즘\r\r\nKubernetes에서 설정한 requests와 limits를 리눅스 커널이 어떻게 실제로 CPU를 할당하고 제한하는지 알아보도록 하겠습니다. 여기에는 컨테이너 기술을 탄생시킨 cgroup(Control Group)과 CFS(Completely Fair Scheduler)가 사용됩니다.\r\r\n\r\r\n### 1. 리눅스 컨트롤 그룹(cgroup)\r\r\ncgroup은 프로세스들의 집합에 대해 CPU, 메모리, I/O와 같은 시스템 리소스의 사용량을 제한하고, 추적하며, 격리합니다. cgroup은 /sys/fs/cgroup/이라는 가상 파일 시스템 내에 계층적 구조로 구성됩니다. Kubernetes는 이 구조 내에 kubepods.slice라는 전용 경로를 만들어 Pod들의 리소스를 관리합니다.\r\r\nCPU 리소스 관리를 담당하는 cgroup의 특정 모듈을 ‘컨트롤러’ 또는 ‘서브시스템’이라 부르며, Kubernetes가 CPU requests와 limits를 구현하기 위해 사용하는 것이 바로 CPU 서브시스템입니다.\r\r\n\r\r\n### 2. Completely Fair Scheduler(CFS)\r\r\nCFS는 리눅스 커널의 기본 프로세스 스케줄러로, 그 이름처럼 ‘완전한 공정성’을 목표로 합니다. CFS는 마치 ‘이상적인 멀티태스킹 CPU’가 존재하는 것처럼, 실행 가능한 모든 태스크(프로세스)가 정확히 동일한 비율의 CPU 시간을 할당 받도록 노력합니다.\r\r\n실제 하드웨어는 한 번에 하나의 작업만 실행할 수 있기 때문에, CFS는 ‘가상 런타임(virtual runtime, vruntime)’이라는 개념을 사용합니다. CFS는 항상 가장 작은 vruntime 값을 가진 작업, 즉 지금까지 가장 적게 실행된 작업을 선택하여 실행함으로써 장기적인 관점에서 공정성을 보장합니다.\r\r\n\r\r\n### 3. Kubernetes와 커널의 매핑\r\r\nkubelet은 Kubernetes의 yaml 명세를 실제 커널에 적용하기 위해서 변환 작업을 수행합니다. kubelet은 resources 설정을 읽어 해당 컨테이너의 cgroup 디렉터리 내 특정 파일에 값을 덮어쓰는 방식으로 커널에 지시를 내립니다.\r\r\n\r\r\n#### **3.1. Requests와 cpu.shares: 상대적 가중치 시스템**\r\r\nPod의 resources.requests.cpu 값은 cgroup의 cpu.shares 파일 값으로 변환됩니다. 공식은 다음과 같습니다.\r\r\n```\r\r\ncpu.shares=requests.cpu (millicores)×1024/1000.\r\r\n```\r\r\n예를 들어, 1000m(1 코어) 요청은 1024 shares로, 500m 요청은 512 shares로 변환됩니다. 가장 중요한 점은 cpu.shares가 **노드에 CPU 경합이 있을 때만 의미를 가지는 상대적 가중치**라는 것입니다. 만약 CPU 자원을 두고 경쟁하는 두 컨테이너가 있고, 하나는 2048 shares, 다른 하나는 1024 shares를 가지고 있다면, 전자는 후자보다 두 배의 CPU 시간을 할당 받게 됩니다. 하지만 노드가 유휴 상태이고 CPU 경합이 없다면, 컨테이너는 자신의 shares 값과 무관하게 필요한 만큼의 CPU를 사용할 수 있습니다.\r\r\n\r\r\n#### **3.2. Limits와 cpu.cfs_period_us & cpu.cfs_quota_us: 절대적 시간 할당량 시스템**\r\r\nPod의 resources.limits.cpu 값은 CFS 대역폭 제어라는 메커니즘을 통해 강제됩니다. 이 메커니즘은 두 가지 파라미터에 의해서 결정됩니다.\r\r\n• cpu.cfs_period_us: 할당량을 정산하는 주기로 단위는 마이크로초입니다. Kubernetes는 기본값인 100000(즉 100ms)을 사용합니다. 이 한 window 내에서 할당량이 정해집니다.\r\r\n• cpu.cfs_quota_us: 위에서 정의된 period 동안 cgroup이 소비할 수 있는 총 CPU 시간을 정의합니다. 단위는 마이크로초입니다. 이 값은 resources.limitscpu로부터 계산됩니다. limits가 없을 경우 -1로 할당량 없음을 의미합니다.\r\r\n\r\r\n변환 공식은 다음과 같습니다.\r\r\n```\r\r\ncpu.cfs_quota_us=limits.cpu (cores)×cpu.cfs_period_us.\r\r\n```\r\r\n예를 들어, limits.cpu를 500m(0.5 코어)로 설정하면, cpu.cfs_quota_us=0.5×100000=50000이 됩니다. 이는 해당 컨테이너가 매 100ms 주기마다 최대 50,000 마이크로초(50ms)의 CPU 시간만 사용할 수 있음을 의미합니다.\r\r\n\r\r\n#### 요약\r\r\n| Kubernetes 설정 | Kubernetes에서의 목적 | 리눅스 cgroup 파일 | 동작 |\r\r\n| --- | --- | --- | --- |\r\r\n| resources.requests.cpu | 스케줄링 및 경합 시 최소 CPU 보장 | cpu.shares | 상대적 가중치; CPU 경합 시에만 활성화 |\r\r\n| resources.lmits.cpu | 런타임 시 최대 CPU사용량 제한 | cpu.cfs_quota_us | 절대적 시간 할당량; 항상 활성화, 스로틀링 발생 |\r\r\n\r\r\n## Limits 적용으로 발생할 수 있는 현상\r\r\nCPU limits를 설정했을 때 발생하는 가장 중요하고 종종 오해 받는 현상이 바로 CPU 스로틀링입니다. 스로틀링은 단순히 성능을 약간 늦추는 것이 아니라, 애플리케이션의 지연 시간에 심각하고 예측 불가능한 영향을 미칠 수 있는 ‘정지-대기(stop-wait)’ 프로세스입니다.\r\r\n\r\r\n### 1. CPU 스로틀링과 발생 원인\r\r\nCPU 스로틀링은 컨테이너 내의 프로세스들이 현재의 cfs_period_us(보통 100ms) 동안 할당된 cfs_quota_us를 모두 소진했을 때 발생합니다. 할당량을 모두 사용한 컨테이너의 프로세스들은 커널 스케줄러에 의해 실행이 '정지'됩니다. 그리고 다음 100ms 주기가 시작되어 할당량이 다시 채워질 때까지 대기해야 합니다.\r\r\n이 현상은 특히 멀티 스레드 애플리케이션에서 증폭되어 나타납니다. 예를 들어, 한 컨테이너가 1 코어(cfs_quota_us=100000)의 limit을 가지고 있지만, 4개의 바쁜 스레드를 동시에 실행한다고 가정해 봅시다.\r\r\n이 컨테이너는 4개의 코어를 동시에 사용하여 단 25ms의 실제 시간만에 100ms의 CPU 시간 할당량을 모두 소진할 수 있습니다. 그 후, 해당 컨테이너는 남은 75ms 동안 노드에 유휴 코어가 있더라도 완전히 스로틀링되어 아무 작업도 수행할 수 없게 됩니다.\r\r\n![K8s_CPU limit_1.png](https://image.toast.com/aaaadh/real/2025/techblog/K8sCPU%20limit1.png)\r\r\n\r\r\n### 2. CPU 스로틀링으로 인한 지연 시간 증가\r\r\n![K8s_CPU limit_2.png](https://image.toast.com/aaaadh/real/2025/techblog/K8sCPU%20limit2.png)\r\r\n스로틀링은 애플리케이션 요청 처리 시간에 직접적으로 지연을 추가합니다. 예를 들어, 어떤 작업을 완료하는 데 순수하게 300ms의 CPU 시간이 필요한 애플리케이션이 100ms 주기당 50ms의 limit에 의해 제한된다고 가정해 봅시다. 이 작업은 다른 시스템 부하가 전혀 없더라도 최소 6개의 주기, 즉 600ms의 실제 시간이 걸려야 완료될 수 있습니다. 이러한 지연은 타임아웃, 연쇄적인 장애, 그리고 궁극적으로는 나쁜 사용자 경험으로 이어질 수 있습니다.\r\r\n스로틀링은 전통적인 CPU 사용률 지표로는 확인하기가 힘든 경우가 있습니다. 어떤 컨테이너가 CPU 사용률 50%(자신의 limit 값)를 보이고 있더라도, 실제로는 심각하게 스로틀링되어 매우 느린 상태일 수 있습니다. 이 경우 CPU는 전통적인 의미에서 '최대치로 사용'되는 것이 아니라, 인위적으로 억제되고 있는 상태입니다.\r\r\n\r\r\n\r\r\n### 3. '시끄러운 이웃' 오해\r\r\nlimits가 ‘시끄러운 이웃(noisy neighbor)’ 문제, 즉 하나의 애플리케이션이 리소스를 독점하여 다른 애플리케이션에 영향을 주는 것을 막아 줄 수 있을 것처럼 보입니다. 하지만 실제로는 requests에 의해 결정되는 cpu.shares가 경합 상황에서도 적절하게 리소스를 배분할 수 있는 시스템이라고 할 수 있습니다. 만약 모든 Pod에 적절한 requests가 설정되어 있다면, CFS 스케줄러는 shares 값에 비례하여 CPU 시간을 분배함으로써 특정 Pod가 다른 Pod들이 기아 상태에 빠지는 것을 방지합니다. 반면 limits는 다른 누구도 CPU를 필요로 하지 않는 상황에서조차 Pod의 사용량을 제한하는 무딘 도구에 가깝습니다.\r\r\n\r\r\n## 스로틀링 테스트\r\r\n테스트를 위해 한 웹 애플리케이션을 만들었습니다. 이 애플리케이션에 1 CPU를 할당하면 작업을 완료하는 데 대략 12초 정도 걸립니다.\r\r\n이 애플리케이션에 각각 1 CPU, 0.1 CPU를 할당하여 CPU 사용량과 작업 시간을 확인하여 지금까지 확인한 현상이 발생하는지 테스트해 보았습니다.\r\r\n\r\r\n### 테스트용 Pod 준비\r\r\n아래와 같이 CPU limit만 다르게 설정하여 Pod를 생성하였습니다.\r\r\n```\r\r\napiVersion: apps/v1\r\r\nkind: Deployment\r\r\nmetadata:\r\r\n  name: cpu-test-app\r\r\n  labels:\r\r\n    app: cpu-test-app\r\r\nspec:\r\r\n  replicas: 1\r\r\n  selector:\r\r\n    matchLabels:\r\r\n      app: cpu-test-app\r\r\n  template:\r\r\n    metadata:\r\r\n      labels:\r\r\n        app: cpu-test-app\r\r\n    spec:\r\r\n      containers:\r\r\n      - name: cpu-test-app\r\r\n        image: cpu-test-app\r\r\n        ports:\r\r\n        - containerPort: 8081\r\r\n        resources:\r\r\n          requests:\r\r\n            memory: \"64Mi\"\r\r\n            cpu: \"100m\"    # 0.1 코어\r\r\n          limits:\r\r\n            memory: \"128Mi\"\r\r\n            cpu: \"100m\"    # 0.1 코어로 제한\r\r\n        livenessProbe:\r\r\n          httpGet:\r\r\n            path: /health\r\r\n            port: 8080\r\r\n          initialDelaySeconds: 10\r\r\n          periodSeconds: 30\r\r\n        readinessProbe:\r\r\n          httpGet:\r\r\n            path: /health\r\r\n            port: 8080\r\r\n          initialDelaySeconds: 5\r\r\n          periodSeconds: 10\r\r\n---\r\r\n# 1 코어 제한 버전\r\r\napiVersion: apps/v1\r\r\nkind: Deployment\r\r\nmetadata:\r\r\n  name: cpu-test-app-1core\r\r\n  labels:\r\r\n    app: cpu-test-app-1core\r\r\nspec:\r\r\n  replicas: 1\r\r\n  selector:\r\r\n    matchLabels:\r\r\n      app: cpu-test-app-1core\r\r\n  template:\r\r\n    metadata:\r\r\n      labels:\r\r\n        app: cpu-test-app-1core\r\r\n    spec:\r\r\n      containers:\r\r\n      - name: cpu-test-app\r\r\n        image: cpu-test-app\r\r\n        ports:\r\r\n        - containerPort: 8080\r\r\n        resources:\r\r\n          requests:\r\r\n            memory: \"64Mi\"\r\r\n            cpu: \"1000m\"   # 1 코어\r\r\n          limits:\r\r\n            memory: \"128Mi\"\r\r\n            cpu: \"1000m\"   # 1 코어로 제한\r\r\n        livenessProbe:\r\r\n          httpGet:\r\r\n            path: /health\r\r\n            port: 8080\r\r\n          initialDelaySeconds: 10\r\r\n          periodSeconds: 30\r\r\n        readinessProbe:\r\r\n          httpGet:\r\r\n            path: /health\r\r\n            port: 8080\r\r\n          initialDelaySeconds: 5\r\r\n          periodSeconds: 10\r\r\n```\r\r\n\r\r\n### 응답 시간 비교\r\r\n0.1 CPU를 할당한 애플리케이션에서는 122초가 소요된 반면 1 CPU가 할당된 애플리케이션에서는 11.51초만 소요된 것을 확인할 수 있었습니다.\r\r\n![K8s_CPU limit_3.png](https://image.toast.com/aaaadh/real/2025/techblog/K8sCPU%20limit3.png)\r\r\n\r\r\n### 그라파나를 통한 스로틀링 현상 확인\r\r\n* 초록색: 1 CPU\r\r\n* 노란색: 0.1 CPU\r\r\n\r\r\nCPU 사용률에서 노란색 그래프가 CPU limits가 0.1로 설정되어 그 이상 사용하지 못하는 모습을 보여줍니다. CPU 할당 횟수에서 노란색이 Limits에 걸려서 더 많은 cpu 할당이 발생한 것을 확인할 수 있습니다. 이것은 스로틀링으로 인한 지연 시간 증가 시뮬레이션과 일치하는 결과입니다. 당연하게도 스로틀링 비율도 노란색이 더 높은 것을 알 수 있습니다.\r\r\n![K8s_CPU limit_4.png](https://image.toast.com/aaaadh/real/2025/techblog/K8sCPU%20limit4.png)\r\r\n중요한 지표는 스로틀링 비율로서 비율이 5%를 지속적으로 넘는 현상이 발생한다면 스로틀링이 빈번하게 발생하여 성능에 제약을 받아 서비스가 느려져 있을 가능성이 있으므로 조치를 취해야 합니다.\r\r\n\r\r\n#### 스로틀링 비율 지표 예시\r\r\n```\r\r\nsum by (namespace, pod) (rate(container_cpu_cfs_throttled_periods_total{container!=\"\"}[5m]))\r\r\n/\r\r\nsum by (namespace, pod) (rate(container_cpu_cfs_periods_total{container!=\"\"}[5m]))\r\r\n```\r\r\n\r\r\n## 나가며\r\r\n결론은 아래와 같습니다.\r\r\n* 일반적인 경우,\r\r\n\t* request만 설정하여 자원이 더 필요할 때는 노드의 가용 자원을 사용하고 자원이 모자랄 때는 비율로 할당 받도록 하는 것이 좋은 것 같습니다. (QoS는 Burstable로 설정됨)\r\r\n\t* QoS가 Burstable로 설정되지만 CPU는 Eviction의 조건이 아니기 때문에 throttling이 발생할지언정 pod가 eviction 되지는 않습니다.\r\r\n* limit만 설정하는 경우는 피해야 합니다. limit만 설정할 경우 request가 0이 되어 자원 가용량이 없는 노드에도 스케줄링 될 수 있으며 런타임 시 예측이 어려워집니다.\r\r\n* CPU request는 Pod가 노드에 할당될 때는 절댓값으로 사용되고 할당된 뒤에는 상대적인 비율로 사용됩니다.\r\r\n\r\r\n\r\r\n긴 글을 읽어 주셔서 감사합니다. \r\r\n\r\r\n### 참고 문헌\r\r\n• Kubernetes, Resource Management for Pods and Containers, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\r\r\n• KubeBlog, Understanding CPU Requests and Limits, 2023. 10. 5., https://www.kubeblog.com/basics/understanding-cpu-requests-and-limits/\r\r\n• Itiel Shwartz, Kubernetes CPU Limits: What’s the Right Way to Assign CPU Resources?, 2025. 1. 14., https://komodor.com/learn/kubernetes-cpu-limits-throttling/\r\r\n• Eliran Cohen, For the love of god, learn when to use CPU limits on Kubernetes., 2023. 3. 5., https://medium.com/@eliran89c/for-the-love-of-god-learn-when-to-use-cpu-limits-on-kubernetes-2225341e9dbd\r\r\n• Max Levin, Kubernetes CPU Throttling: What it is, and Best Practices, 2024. 6. 6., https://www.groundcover.com/blog/kubernetes-cpu-throttling\r\r\n• CODE FARM, Linux CGroups and Containers, 2024. 2. 3., https://blog.codefarm.me/2021/11/23/linux-cgroups-containers/\r\r\n• Andreas Karis Blog, Quick guide for cgroups, 2020. 9. 3., https://andreaskaris.github.io/blog/linux/cgroups/\r\r\n• Martin, Cgroups - Deep Dive into Resource Management in Kubernetes, 2023. 2. 20., https://martinheinz.dev/blog/91\r\r\n• Jianhao, Kubernetes CPU requests and limits, 2021. 11. 11., https://jaanhio.me/blog/kubernetes-cpu-requests-limits/\r\r\n• Red Hat, Resource Management Guide > CPU, https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/resource_management_guide/sec-cpu\r\r\n• Real-time Ubuntu, Linux kernel schedulers, https://documentation.ubuntu.com/real-time/latest/explanation/schedulers/\r\r\n• Rifewang, Kubernetes: CPU Configuration, Linux CFS, and Performance Issues with Programming Languages, 2024. 12. 11., https://medium.com/@rifewang/kubernetes-cpu-configuration-linux-cfs-and-performance-issues-with-programming-languages-ccef783ed22e\r\r\n• JettyCloud, Making Sense of Kubernetes CPU Requests And Limits, 2023. 3. 20., https://medium.com/@jettycloud/making-sense-of-kubernetes-cpu-requests-and-limits-390bbb5b7c92\r\r\n• Tania Duggal, PerfectScale, Kubernetes CPU Limit: Best Practices for Optimal Performance, 2024. 10. 24., https://www.perfectscale.io/blog/kubernetes-cpu-limit-best-practises\r\r\n• Shane Corbett, AWS Blogs, Using Prometheus to Avoid Disasters with Kubernetes CPU Limits, 2022. 9. 21., https://aws.amazon.com/blogs/containers/using-prometheus-to-avoid-disasters-with-kubernetes-cpu-limits/\r\r\n\r\r\n\r\r\n[![NHN Cloud_meetup banner_footer_blue_202509.png](https://image.toast.com/aaaadh/real/2025/techblog/NHN%20Cloudmeetup%20bannerfooterblue202509.png)](https://www.nhncloud.com/kr)",
    "reviews": [],
    "syllabus": [],
    "link": "https://meetup.nhncloud.com/posts/395",
    "pubDate": "Sun, 14 Sep 2025 23:39:12 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "대구 대명시작 옥이국수 골목김밥 - 500원 올랐다. (23년도 보다)",
    "description": "옥이국수의 골목김밥\n\n\n1,500 에서 올랐다. \n국수는 5천원이다.\n \n23년도 블로그 글: https://blog.naver.com/yusungkjw/223235432716\n\n \n대구 대명시장 맛집 옥이국수 그리고 골목김밥\n대구 전통시장 중 가장 큰 규모를 자랑하고 많은 사람들이 찾는 곳이 서문시장과 칠성시장, 매천시장 등을 ...\nblog.naver.com\n\n별 수 없다 오르기전에 빨리 먹는 방법 밖에\n \nhttps://www.youtube.com/watch?v=hdwb0rsowLo\n\n\n\n \n물가가 오르는 영향을 받아 어쩔 수 없이 올라간다.\n쌀때 많이 먹을껄",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1392",
    "pubDate": "Tue, 16 Sep 2025 18:36:33 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브",
      "맛집"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "빚 다 갚으면 연체 기록도 지워주는 ‘신용회복’, 나도 대상자일까?",
    "description": "대상자 확인부터 상환 방법까지 2025년 최신 버전을 알려드려요",
    "reviews": [],
    "syllabus": [],
    "link": "https://toss.im/tossfeed/article/tossmoment-17",
    "pubDate": "Tue, 16 Sep 2025 09:32:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "More Updates and Fixes for ReSharper and Rider 2025.2",
    "description": "A second set of updates and bug fixes for the 2025.2 release of ReSharper and Rider has just been made public.  Let’s take a look at what’s been improved. ReSharper 2025.2.2 To make your transition to Visual Studio 2026 seamless, ReSharper now installs a lightweight migration extension bundled with the product. This extension will be carried over automatically by […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/dotnet/2025/09/18/resharper-rider-2025-2-2/",
    "pubDate": "Thu, 18 Sep 2025 14:49:19 +0000",
    "creator": "Sasha Ivanova",
    "categories": [
      "net-tools",
      "resharper",
      "rider",
      "junie"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "A Farewell to Consoles",
    "description": "Starting from the 2025.3 release, DataGrip and other JetBrains IDEs with database support will stop using the term query console. From now on, we’ll use query file – because consoles were essentially files all along, and it’s time the UI reflected that. We’ve made the workflow simpler, more discoverable, and more consistent. A bit of […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/datagrip/2025/09/16/a-farewell-to-consoles/",
    "pubDate": "Tue, 16 Sep 2025 16:46:20 +0000",
    "creator": "Maksim Sobolevskiy",
    "categories": []
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "노코드 도구 Dify 사용기",
    "description": "이 글은 노코드 도구 Dify 사용기이다. \n\n\n레퍼런스\n\nGuide to Dify, an open-source platform for developing large language model (LLM) applications | by Gen. Devin DL. | Medium\nDify.AI – Medium\nExplore Dify: A Step-by-Step Guide to Building a Simple LLM-Powered Application | by Ken Maeda | Medium\nGetting Started with Dify: No-Code AI Application Development | by Research Graph | Medium",
    "reviews": [],
    "syllabus": [],
    "link": "http://daddynkidsmakers.blogspot.com/2025/09/dify.html",
    "pubDate": "2025-09-16T07:16:00.000Z",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "[MULTI] 선택을 버리고 복수에 전념하여, 다잉 라이트: 더 비스트",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2361",
    "pubDate": "Fri, 19 Sep 2025 01:00:03 +0900",
    "creator": "「RULIWEB」",
    "categories": [
      "리뷰"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "욕심과 능력의 조율",
    "description": "관련해서 내가 여러 번 포스팅했고, 우리 투자사 대표님들을 포함, 나를 만나본 분들은 나한테 자주 듣는 말인데, 하고 싶은 것과 할 수 있는 것 관련 내용이다. 작든 크든, 회사를 운영할 때 대표이사는 스스로에게 매우 냉정하게 물어보고 확인해야 할 것들이 여러 가지가 있는데, 그중 하나가 바로 본인과 팀이 할 수 있는 것과 하고 싶은 것을 스스로에게 물어보고,(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/09/aligning-wants-and-capabilities.html",
    "pubDate": "Wed, 17 Sep 2025 21:34:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "FoundersAtWork",
      "general",
      "strategy",
      "Strong"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "게임 성인물 차단 움직임이 점점 강해지고 있다.",
    "description": "좋다 나쁘다의 판단은 없습니다.\n문화의 움직임은 중요하기 때문에 관심을 가져야합니다.\n \n작년\n일본 성인 만화 결제를 비자가 막았습니다.\n올해\n스팀과 이치.io 에서 성인물 관련 게임을 차단했고\n마스터카드도 동창했습니다.\n영국의 온라인 안전법 등장\n넥서스모드도 성인 인증후에 모드를 다운로드 할 수 있습니다.\n \n \n영상: https://www.youtube.com/watch?v=0glLHO42dow\n\n\n\n5분에 나옵니다.\n \n유저들은 검열이라면서 불만을 쏟아내고 있는데\n성인물을 차단하는 근본적인 이유는 잘 모르겠습니다.\n \n아무튼 카드회사에 이어 국가도 나섰다는 점을 주목해야할 것입니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1390",
    "pubDate": "Sat, 13 Sep 2025 17:42:30 +0900",
    "creator": "SIDNFT",
    "categories": [
      "투자",
      "게임",
      "성인물"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "8 Common DevOps Problems And How to Solve Them With GoLand",
    "description": "One of the most popular posts on the /devops subreddit says, “After 24 years in IT, I’m done. I don’t want to debug another YAML file. This is not how I foresee spending my life.” DevOps can be frustrating, and the 3,000+ people who upvoted that post clearly agree. It doesn’t have to be this […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/go/2025/09/17/8-common-devops-problems-and-how-to-solve-them-with-goland/",
    "pubDate": "Wed, 17 Sep 2025 18:15:54 +0000",
    "creator": "Olga Bedrina",
    "categories": [
      "features",
      "devops",
      "goland"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "eBay Honored at Fast Company's Innovation by Design Awards",
    "description": "The eBay Evo brand and design system received three honorable mentions.",
    "reviews": [],
    "syllabus": [],
    "link": "https://innovation.ebayinc.com/stories/ebay-honored-at-fast-companys-innovation-by-design-awards/",
    "pubDate": "Thu, 18 Sep 2025 00:00:00 -0700",
    "creator": "eBay News Team",
    "categories": [
      "article"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "실패를 통과하는 일",
    "description": "예전 최정우님이 쓰신 옐로모바일의 흥망성쇠를 담은 스타트업은 어떻게 유니콘이 되는가 이후 오랫만에 스타트업의 대표님이 직접 쓰신 일기장 같은 책을 봤다.\n퍼블리는 인프런과 꽤나 닮은 부분이 많았다.\n퍼블리 & 커리어리 & 위하이어\n인프런 교육 & 인프런 커뮤니티 & 랠릿\n꼭 퍼블리만 아니더라도 대부분의 커리어 플랫폼들은 그 방향성은 비슷하게 간다.\n교육 & 채용 & 커뮤니티\n시작은 서로 다를 수 있으나, 큰 그림은 다들 비슷하게 보고 있다.\n원티드처럼 채용으로 시작해서 커뮤니티와 교육으로 확장하는 경우도 있으며\n리멤버처럼 (명함) 커뮤니티로 시작해서 채용으로 확장한 경우도 있으며\n인프런처럼 교육으로 시작해서 커뮤니티, 채용으로 확장한 경우도 있다.\n다만, 지금의 우리는 교육으로 글로벌 시장을 노리는 것으로 에너지를 집중하고 있다.\n3개 꼭지점을 모두 다 달성한 플랫폼은 국내/국외 어디에도 없다.\n아마도 가장 근접한 건 링크드인이다.\n커뮤니티와 채용에 있어서는 세계 최고가 되었고, 린다닷컴을 인수해서 교육쪽으로도 계속해서 시도하고 있으니 말이다.\n국내에서는 확실하게 이 영역을 모두 확보한 플랫폼이 없다.\n하지만 많은 커리어 플랫폼이 이 영역들을 확보하기 위해 도전하고 있다.\n그러다보니 퍼블리를 비롯해 비슷한 결의 서비스들은 어떻게 시도하는지 자주 지켜봤다.\n마침 퍼블리에는 좋아하는 콘텐츠들도 많았어서 구독제 멤버십도 가입해서 자주 사용했다.\n\n\n퍼블리를 자주 이용하던 중,\n개발자들을 위한 SNS 서비스 '커리어리'를 시작한다는 소식을 들었다.\n'위하이어' 라는 ATS 서비스를 시작하신다는 것도 들었다.\n그리고 어느 순간 퍼블리에 읽고 싶은 콘텐츠가 더이상 추가되지 않았다.\n내 취향의 콘텐츠가 없다보니 얼마되지 않는 그 구독료도 아까웠다.\n그래서 훨씬 더 내 취향인 폴인의 구독을 시작했고, 지금까지도 연간 구독으로 계속해서 콘텐츠를 보고 있다.\n2023년엔 대표인 쭈와 함께 박소령 대표님, 이승국 CPO님과 함께 저녁식사를 먹으면서 스타트업에 대한 이야기를 나누기도 했다.\n커리어리와 위하이어로 개발자와 채용에 관해서 집중하신다는 것도 알게 됐다.\n그래서 어떤 과정으로 퍼블리와 그 외 서비스들이 시작했는지, 비중은 어떻게 되는지, 시리즈 B 투자로 받은 135억을 어떻게 활용하셨는지 등등 많이 궁금했었다.\n한국 콘텐츠 스타트업에서 퍼블리가 남긴 족적은 분명히 크다.\n그래서 퍼블리가 어떻게 10년을 보내왔는지 그 기록이 너무나 중요하다고 생각했는데, 이번에 이렇게 책으로 정리해주셔서 정말 감사했다.\n금, 토 이틀만에 다 읽으면서 지금 스타트업 시리즈 A, B 단계의 회사에서는 이 노트가 얼마나 귀한 기록인지 감사한 마음뿐이다.\nVC와의 관계와 투자는 어떻게 진행해야하는지,\n투자 받은 자금을 어떻게 활용해야하는지,\n레이오프는 어떻게 해야 덜 후회하고 앞으로를 위해 도움이 되는지 등등.\n아직 유니콘이 되지 못한 스타트업에 다니시는 분들이라면 무조건 적으로 읽어보시라고 추천하고 싶다.\n책 제목이 \"실패를 통과하는 일\"이다.\n인프런은 꼭 통과하지 않기로 몇번이고 다짐했다.\n책 속 문장\n매월 달성해야하는 재무 목표는 곧 매주, 매일의 목표로도 환산되기에 업무 우선순위에 대한 감각이 더 예민해지면서 긴장감을 가질 수 있었음.\n팀과 커뮤니케이션을 할 때도 단순히 \"BEP를 달성하자\"가 아니라 \"2023년 4월에 ㅇㅇ곳의 신규고객사가 ㅇㅇ원을 결제해서 매출이 00원 발생하면 BEP를 덜상할 수 있으니 집중하자\" 라고 말하면, 해야 할 일이 명료해져서 좋았음.\n사업에서 돈을 벌려면 '남이 하기 싫은 일을 대신 해주고, 그 대가로 돈을 받는다'라는 고전적인 명제가 진리임을 다시 한번 절감함.\n부와 행복은 두 가지 요소로 이뤄진 등식임을 항상 기억하자.\n두 가지란 당신이 '가진 것(현실)'과 '기대하는 것(기대치)'이다.\n이 둘은 똑같이 중요하다.\n따라서 가진 것을 늘리는 데에는 엄청난 노력을 쏟으면서 기대치를 관리하는 데에는 거의 신경을 쓰지 않는 것은 말이 안된다.\n특히 우리가 훨씬 더 쉽게 통제할 수 있는 것은 현실이 아닌 기대치이므로 더욱 그렇다.\n...\n정말로 원하는 것은 기대한 것과 실제 결과의 차이를 경험하는 일이다.\n우리는 기대한 것보다 더 좋은 결과를 얻었을 때 만족과 성취감을 느낀다.\n커리어 소셜미디어를 먼저 만들고 나중에 비즈니스 모델을 붙이는 것, 채용관리 소프트웨어를 먼저 만들고 나중에 신규고객에게 세일즈하는 것은 모두 돈 버는 것을 뒤로 미룬 결정이었다.\n최저 가치 단계에서 어떻게 돈을 벌어야하는지, 이렇게 돈 버는 방법이 나와 잘 맞는지, 앞으로도 지치지 않고 꾸준히 할 수 있는 일인지 미리 파악하고 고칠 수 있는 기회를 날려버리고 말았던 것이다.\n나는 모든 일은 시작보다 끝이 중요하다고 생각하며, 사람과의 관계도 마찬가지라고 생각함.\n시작에는 설렘과 충동성, 도파민이 있음.\n반면 끝은 책임감, 희생정신, 전우애가 필요함.\n'어떤 일의 끝에 다다랐을 때 어떻게 행동하는가' 는 그 사람이 고통을 대하는 태도를 보여주는 좋은 리트머스 테스트다.\n가장 끝의 순간에 하는 행동은 그 사람에 대해 정말 많은 것을 보여준다.\n...\n그래서 함께 일할 사람을 채용할 때 반드시 체크해야 할 것은 '전 직장을 퇴사할 때 어떻게 행동했는가'이다.\n자신이 사지 않을 것은 팔지 않는다.\n존경하지 않고 존중하지 않는 사람 밑에서 일하지 않는다.\n같이 있으면 즐거운 사람들하고만 일한다.\n정기구독 사업은 7일 무료체험을 시작하면서 고객 수가 빠르게 증가했고, 12개월 장기상품 판매로 매출도 올라가기 시작했음.\n그 와중에 연말 프로모션 준비까지 더해지며 팀 전체가 매우 바쁘고 정신없었음.\n하지만 밤늦게까지 야근을 해도 사무실엔 항상 활력이 돌았음.\n사업 지표가 올라가고 매출이 상승하면 누가 시키지 않아도 신나서 일한다는 것을 알게 됨.\n...\n마지막으로 2019년 4월에 만들기 시작한 '커리어리'가 있었음.\n이 서비스는 2년이 되도록 지지부진한 상태였음.\n이런 상황에서는 팀 내 갈등 역시 두드러지기 마련이라는 것도, 아무리 HR 차원에서 해결책을 강구해도 사업 성과가 해결되지 않는 한 백약이 무효라는 것도 배웠음.\n평시 CEO의 특성은 소위 '좋은 사람이자 좋은 리더'의 전형적 모습이다.\n반대로 전시 CEO의 특성은 가까이하고 싶지 않은 인물 유형이고, 특히 한국 사회의 기준에서는 비판받기 쉬운 점들도 다수 포함되어 있다.\n그렇기에 전시 CEO로 일하려면 어릴때부터 학습된 '좋은 사회인'에서 벗어날 뻔뻔함이 필요한데, 나는 그러지 못했다.\n...\n전시 CEO는 어디까지나 긴급 상황에서 일시적으로 유효하다고 생각했고, 내가 읽었던 많은 책에 나오는 것처럼 평시 CEO 모드로 일하는 것이 더 우월한 방향이라고 믿었다.\n하지만 지금 돌아보면, 나는 그저 전시 CEO로서 '미움받을 용기'가 없었던 것이다.\n<하드씽> 에서 벤 호로위츠는 대부분의 경영서들이 평화로운 시기의 성공적인 기업들을 연구한 컨설턴트가 썼다는 점을 기억해야 한다고 주장한다.\n평시 CEO가 사용하는 방법들에 대해 알려주는 책이 아니라, 전시 CEO가 탁월하게 경영하는 법을 알려주는 책을 읽어야 한다는 것이다.\n문제는 그런 책이 거의 없다는 것이라며, 나처럼 책으로 학습하는 것을 좋아하는 독자에게 날카롭게 경고한다.\n이나모리 가즈오는 전시 상황을 겪은 기업들을 살려낸 생생한 경험이 있었기에, <왜 리더인가> 에서 이렇게 적는다.\n\"나는 느슨하고 헐거운 마음가짐으로 문제의 뒤로 물러나 좋은 사람인 척하는 리더보다 가끔은 미치광이 소리를 듣더라도 무소처럼 일의 정면으로 달려들어 일을 완벽하게 장악하는 리더를 훨씬 신뢰한다.\n우리는 일 앞에서 좀 더 난폭해져도 된다.\n아니, 리더라면 반드시 그래야만 한다\"\n레이 달리오가 쓴 책 <원칙>을 읽었음.\n\"사람을 계획에 맞춰라.\n당신에게 필요한 사람들의 유형은 조직의 설계에 달려 있기 때문에, 조직을 구성할 때는 계획이 사람보다 선행한다.\n조직을 설계하면서 일을 잘하기 위해 개인들에게 요구되는 특성에 대한 명확한 심상지도를 만들어라.\n...\n사람에 맞추기 위해 업무를 계획해서는 안 된다.\n이것은 시간이 흐르면 대부분 실패로 드러난다.\n이런 일은 해고하는 것을 꺼리는 사람이 그 사람이 할 수 있는 다른 일을 찾아보려는 경향이 있을 때 흔히 발생한다\"\n\"내가 지금까지 만난 대표 중에 늦게 레이오프해서 후회한 대표는 있어도, 빨리 레이오프해서 후회한 대표는 한 명도 없었다.\n대표가 '뭔가 잘못되었는제'라고 느끼고 있다면 그때가 결정해야 할 타이밍이다.\n대표가 가진 직감을 믿어라.\"\n필요한 일을 할 수 있는 사람이 지금 팀에서 누구인지 매칭하는 작업도 진행함.\n변화에 빠르고 유연하게 적응할 수 있는 능력,\n계속 학습하며 성장하는 마인드셋을 보인 사람과 그렇지 않은 사람에 대해서도 의견을 듣고 여러 차례 논의를 거침.\n7월 1일 19명이었던 팀이 8월 20일 무렵 11명으로 줄어 있었음.\n레이오프는 한 명이었지만, 연쇄작용으로 7명이 자진 퇴사했기 때문임.\n레이오프를 거치면서, 채용에 대한 생가에 변화가 생김\n첫 번째, 유능한 제너럴리스트를 뽑자.\n비가와도 망하는 게 스타트업이라고, 한 치 앞을 알 수 없는 상황에서는 사업이 언제 어떻게 바뀔지 모름.\n시장 상황에 맞게 계속 변화하고 또 변화해야만 생존할 수 있음.\n스페셜리스트에게 맞지 않는 일을 주는 것은 개인에게도 조직에도 불행임.\n따라서 사업모델에 여전히 불확실성이 높은 상태에서는 유능한 스페셜리스트가 아니라 유능한 제너럴리스트를 뽑아야 함.\n내가 생각한 스타트업의 가장 큰 특징은 '생존의 불확실성'이었음\n실력과 태도 둘 다 좋은 사람만 채용한다는 것은 현실적으로 매우 어려운 일이었고, 또 다른 어려운 점은 실력과 태도라는 개념이 참으로 추상적이라는 사실이었음.\n...\n여기서 말하는 태도는 조직에서 선호하는 속성이 기준임.\n...\n나의 경우, 시간이 갈수록 점점 더 중요하게 본 세 가지 속성이 겸손함, 성실함, 책임감이었음.\n반대로 말하자면 겸손하지 않은 사람, 성실하지 않은 사람, 책임감이 없는 사람은 '곱하기'에서 0에 해당한다고 생각했음.\n첫 번째 대규모 레이오프를 계획하면서 두 가지 선택지를 놓고 고민했음.\n동일한 액수의 현금을 절감한다면,\na. 많은 인원을 레이오프하고, 기존 인력들의 보상을 유지한다.\nb. 적은 인원을 레이오프하는 대신, 기존 인력들의 현금 보상을 절감한다.\n나는 두 번째를 선택함.\n커리어리가 이제 막 개발자라는 주요한 타깃 고객을 찾아낸 상황이었고, 이들이 사랑할 수 있는 제품을 만들려면 빠르게 많은 실험을 해야 하므로 제품 조직은 꼭 필요하다는 생각 떄문이었음.\n...\n당시 팀 규모는 60명 후반에서 70명 초반 정도였고, 레이오프 대상자는 10% 이내였음.\n각자 받는 총보상액에 따라 현금 보상의 삭감 수준이 달랐는데 5~20% 범위였고, 나는 40%를 삭감함\n...\n놀랍게도 현금 보상을 줄이자는 제안에 모두가 동의했음.\n...\n하지만 내가 잘못 판단한 것이 있었음.\n타운홀을 기점으로 레이오프에 대한 커뮤니케이션을 종료하고 그 다음 목표를 향해 빠르게 달리자고 치열함을 독려하기보다는, 어수선하고 상처받았을 팀원들을 감정적으로 케어하는 데 조직의 에너지를 쓰게 만든 것임.\n회사의 공식적인 리소스가 게속 포스트 레이오프에 쓰이게 됨.\n미래로 나아가는 것이 아니라 과거의 상처를 핥는 데 팀의 중요한 시간을 쓰게 한 것, 즉 레이오프 이후 냉정하지 못했떤 나 자신에 대한 반성이 있음.\n2023년 11월에 진행된 대규모 레이오프의 목적은 첫 번째 대규모 레이오프에서 얻은 크나큰 깨달음에서 비롯되었음.\n현금 보상 삭감이라는 선택이 얼마나 인간의 본성에 어긋나는 결정이었는가에 대한 아하 모멘트가 뒤늦게 찾아왔기 때문임.\n...\n어렵게 채용한 팀원들을 최대한 데리고 가야 원하는 성과를 낼 수 있다는 이유 때문이었음.\n...\n약 반년이 지나 깨달은 것은 '내가 회사를 위해 보상을 희생했다' 라는 인식으로 여러 부작용이 발생했다는 것임.\n개인으로서는 자연스러운 감정이라고 생각함.\n나 자신도 되돌아보니, 급여에 대한 희생을 요구했다는 미안함 때문에 팀과 정확한 커뮤니케이션을 해야 할 때도 심리적 장벽으로 인해 그러지 못했음.\n레이오프를 많이 했다고 후회하는 대표는 본 적이 없다.\n할 수 있는 한 최대한 해라.\n60~70%까지 해도 된다.\n이렇게 해도 의외로 회사는 잘 돌아간다.\n처음 레이오프를 적게 했다가 두 번 레이오프하는 게 최악이다.\n<파워풀> 에는 수십 명 규모의 작은 스타트업이었던 넷플릭스가 전 세계에 서비스를 제공하는 글로벌 기업으로 확장하던 시기에 겪은 내부 진통의 경험이 나온다.\n패티 맥코드에게 초기 멤버였던 팀원이 회사가 변했다며 불만을 토로하자, 당신은 50명 규모의 스타트업 조직에서 가장 행복해할 사람이라며 이제는 회사와 개인의 교집합이 종료되었다는 사실을 알려준다.\n또한 커리어 상담을 하러 찾아온 직원에게는 자신이 좋아하고 잘하는 일을 계속 같은 회사에서 할 필요는 없다고 조언한다.\n이사진이나 주요 주주를 눈치 봐야 할 상사로 생각하지 말고, 문제를 상담할 수 있는 멘토로 여겨라.\n기업가치 극대화라는 관점에서 이들은 그 어떤 이들보다 우군이다.\n2024년 <이나모리 가즈오의 회계경영> 이라는 책을 선물 받았다.\n...\n'60년간 수많은 기업을 이끌며 내가 단 한 번도 적자를 기록한 적이 없는 비결은 매출은 최대로, 경비는 최소로 라는 아주 단순한 원칙을 목숨처럼 지켰기 때문이다.\n...\n함부로 사람 늘리지마라. 원자재는 딱 필요한 만큼만 사라.\n...\n이익이 없다면 당신의 사업은 사업이 아니다.\n이익이 없으면 그것은 회사가 아니다.\n제프 베이조스는 의사결정 전에 '이 결정은 번복 가능한가, 아닌가'를 먼저 따져봐야 한다고 말했다.\n대부분은 번복 가능한 의사결정에 속하므로 원하는 결과가 아니라면 결정을 빠르게 되돌리면 그만이다.\n하지만 주주에 관한 결정 (누구를 주주로 초대하고, 그가 몇 퍼센트의 지분을 갖는가)은 번복하기 어려운 데다 번복하려면 큰 비용을 치러야 한다.\n회사 매각 과정을 거치면서 내가 절실하게 깨달았던 것은, 창업자와 주주 사이에 중요한 어젠다 중 하나가 회사의 최종 목표와 주주의 엑시트 플랜에 대한 대화라는 점이다.\nVC 주주는 우리 회사에 투자한 펀드의 만기일이 있다보니 오랜 시간 기다려줄 수도 없거니와, 애초에 오랜 기간이 필요한 사업이었다면 VC 투자가 적합하지도 않다.\n'우리의 목표는 매각인가, IPO인가? 매각이라면 언제 얼마의 가치로 어떤 곳을 잠재 인수자로 고려하여 진행해야 하는가? IPO라면 언제 얼마의 가치로 어디에 상장할 것인가?\n다음 라운드는 언제, 얼마로 펀드레이징을 할 것인가?\n펀드 만기와 수익률을 고려할 때 납득할 만한 계획인가?'\n회사의 최종 목표와 주주의 엑시트 플랜에 대한 고민은 '중요하지만 급하지는 않은 일'에 해당했고, 이런 카테고리의 일이야말로 시간을 따로 빼노혹 챙겨야 한다는 것을 머리로는 알았지만 몸이 따라가지 못했다.\n'중요하지만 급하지는 않은 일'이 어느새 '중요하고 급한 일'이 되는 순간부터 혼돈이 시작되는 것은 당연지사였다.\n<허브 코헨의 협상의 기술 1> 의 내용이 뒤늦게 떠올랐음.\n...\n이 책에서 그는 협상에서 승리하는 열쇠는 항상 상대방이 시간, 돈, 에너지를 먼저 투자하게 만드는 것이라고 강조함.\n어떤 형태로든 투자한 게 있어야 자신이 쏟아부은 노력을 돌려받고자 하는 심리가 발동한다는 이유 때문이었음.\n2024년 9월, 드라마 <쇼군>이 미국 에미상 시상식에서 18관왕을 휩쓸었다는 기사를 읽은 후 뒤늦게 몰아보았다.\n...\n그리고 <쇼군>이 내게 준 가장 큰 교훈은 '약자의 협상법'이었다.\n...\n드라마 후반, 죽음이 코앞에 닥친 상황에서 도쿠가와는 오사카 세력을 상대로 협상하면서 한 가지를 반드시 지킨다.\n바로 '시간의 주도권'만큼은 본인이 절대 놓지 않는 것.\n그는 협상 자리에서 매번 \"X라는 상황이 오면, 나는 언제까지 Y를 하겠다\"라는 식으로 말한다.\n상황 자체는 본인 힘으로 온전히 통제할 수 없지만, 그 상황에 따른 자신의 행동만큼은 먼저 타임라인을 설정하고 상대에게 통보한다.\n이렇게 하면 상대도 그가 제시한 타임라인을 기준으로 생각하게 된다.\n내가 만약 다시 투자받을 일이 있다면, 그때는 투자한 회사 중 잘 안된 곳 대표를 소개해달라고 할 것 같다.\n그 대표와 이야기를 하면 이 VC가 어떤 곳인지 가장 잘 알 수 있을 것 같다.\n왜 이렇게 돈 관리가 느슨했는지 돌이켜보면, '스타트업은 속도가 생명이니, 돈으로 시간을 살 수 있다면 돈을 쓰는게 맞다' 라는 분위기에 나도 별생각 없이 편승했기 때문이라고 생각한다.\n문제는 이 명제가 언제나 그리고 모든 사업에 통용되는 건 아니라는 사실이다.\n우리 사업은 '지금 돈과 시간 중 무엇에 더 높은 가치를 둘 것인가'에 대해 건강검진하듯 꾸준히 체크했어야 했는데, 그러지 못했다.\n<월마트, 두려움 없는 도전>을 읽고 나서, 제포 베이조스는 분명 샘 월턴으로부터 영향을 받았을 것이라고 생각했다.\n...\n'경쟁에서 이기는 것보다 비용 관리에 더 집중하라.\n이를 잘하면 반드시 경쟁우위를 선점할 수 있다.\n우리는 매출액 대비 비용이 가장 낮다는 점에서 업계 내 1위를 차지했다.\n사업을 하다 보면 몇 차례 실수하기 마련이다.\n그대로 전반적인 운영 효율이 높으면 실수를 해도 큰 타격을 입을 우려는 없다'\n'내가 약간은 손해 보는 것이 좋다' 라는 생각으로 임하자.\n...\n내가 약간은 손해 본다는 생각으로 타협해야만 상대방은 5대5라고 느낀다고 했다.\n반대로 내가 5대5라고 생각하고 타협하면 상대는 오히려 손해 봤다고 생각할 거라고.",
    "reviews": [],
    "syllabus": [],
    "link": "https://jojoldu.tistory.com/845",
    "pubDate": "Sat, 13 Sep 2025 20:49:26 +0900",
    "creator": "향로 (기억보단 기록을)",
    "categories": [
      "도서",
      "박소령",
      "스타트업",
      "실패를 통과하는 일",
      "인프런",
      "커리어리",
      "퍼블리"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "IntelliJ IDEA 2025.3 Early Access Program Is Open!",
    "description": "We’re kicking off the next development cycle and inviting you to join it. The Early Access Program (EAP) for IntelliJ IDEA 2025.3 is now open, offering an early look at the new features and improvements we’re working on. By evaluating new features and sharing constructive feedback, you help us provide you with powerful, reliable tooling […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/idea/2025/09/intellij-idea-2025-3-eap/",
    "pubDate": "Tue, 16 Sep 2025 11:46:24 +0000",
    "creator": "Maria Kosukhina",
    "categories": [
      "eap",
      "2025-3-eap",
      "intellij-idea",
      "intellij-idea-2025-3"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "FAQ: New AI Quotas",
    "description": "We hear you. And you’re right – the new quotas are a reduction from what you experienced. When we launched, we had little usage data for agentic experiences and no top‑up feature existed, so we set quotas much higher than the real cost of AI usage (tokens from providers) as a temporary measure. That felt […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/ai/2025/09/faq-new-ai-quota/",
    "pubDate": "Tue, 16 Sep 2025 15:01:26 +0000",
    "creator": "Ilya Petrov",
    "categories": [
      "news",
      "ai-assistant",
      "ai-in-ides",
      "junie"
    ]
  }
]