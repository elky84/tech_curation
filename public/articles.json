[
  {
    "id": 1,
    "imageUrl": "",
    "title": "The Angular Language Server: Understanding IDE Integration Approaches",
    "description": "The Language Server Protocol (LSP) has been a fundamental part of the code editor landscape for years, providing a consistent development experience across different editors. The Angular Language Server leverages this protocol to provide Angular-specific features to compatible editors. However, not all IDEs take the same approach to delivering these capabilities. Let’s look at the […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/webstorm/2025/03/the-angular-language-server-understanding-ide-integration-approaches/",
    "pubDate": "Thu, 06 Mar 2025 18:26:00 +0000",
    "creator": "Jan-Niklas Wortmann",
    "categories": [
      "all-things-web",
      "web-development",
      "webstorm"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "엘라스틱의 합집합 집계",
    "description": "특정 프로세스 발생 통계.\n\n\n\n\n\n집계 분할 기준에 제작사 정보를 추가하면 집계 실패. 제작사 정보가 없으니까.\n\n\n\n\n이때 null값 추가 옵션을 사용하면 합집합 집계 가능.\n\n\n\n엘라스틱이 열심히 밀어주는 Lens에서는 이렇게.\n\n\n\n\n관련 글\n\n데이터 시인성\nSplunk의 fillnull",
    "reviews": [],
    "syllabus": [],
    "link": "https://kangmyounghun.blogspot.com/2025/03/blog-post.html",
    "pubDate": "2025-03-06T09:34:00.000Z",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "관계의 아궁이",
    "description": "예전에 본 갈망의 아궁이 발표를 좋아한다.\n\n\n갈망이란 아궁이 속 불씨와 같아서 한번 완전히 꺼지면 다시 살리기가 어렵다.\n그래서 아궁이 속 불이 완전히 꺼지기 전에 다른 아궁이로 불씨를 옮기듯이 갈망의 대상도 (본업, 취미, 연인관계, 사이드 프로젝트 등) 계속해서 옮겨가야 한다는 이야기이다.\n이 이야기를 듣고나서 회사에서의 일 외에도 기댈 곳을 만들어 두는 것이 얼마나 장기적으로 큰 힘이 되는 지 알게 되었다.\n이후로 블로그나 커뮤니티, 멘토링 등 여러 방면에서 본업에서의 갈망이 식었을때 완전히 연소되는 일을 막아주었다.\n요즘은 이 아궁이가 꼭 갈망에만 적용되는 것이 아니라는 생각이 들었다.\n사람간 관계에서도 비슷한 것 같다.\n어떤 인간 관계든 오랫동안 함께 하다보면 서운한 상황이 생길 수 있다.\n이를테면 내 주변에는 다음과 같은 관계들이 있다.\n와이프\n부모님을 비롯한 가족들\n학창 친구들\n(현재의) 회사 동료들\n(전) 회사 동료들\n회사 밖 지인들\n여러 관계가 있다보니 각 관계속에서의 여러 감정들이 서로 위로가 될 때가 많다.\n와이프와 어떤 문제를 가지고 주말에 싸우고 월요일에 출근을 하면 회사 동료들과 일 하면서 어느새 그 문제가 별것 아닌 일이 되어 있었다.\n평일에 회사일을 하면서 받은 여러 부정적 감정들이 주말에 와이프와 쉬거나 운동 선생님과 운동하면서 나누는 대화로 인해 금새 잊혀지게 된다.\n가족과 회사 일 모두에게 문제가 생길때는 친구들 혹은 전 회사 동료들과의 대화에서 위로를 받기도 한다.\n하나의 관계에만 너무 몰입했다면 그 관계에서 상처나 실망을 받았을 때 못 버티는 경우를 종종 봤다.\n여러 관계를 맺어두고, 그 관계에서 받은 여러 감정들을 다른 관계를 통해 해소할 수 있다.\n물론 어느 유튜브 속 대사처럼 나 자신에게 집중하면 굳이 타인과의 관계에 휩쓸리지 않을 수 있다.\n\n\n그렇지만 우리 같은 직장인 특히나 어느정도 커리어를 쌓은 입장에서는 전문직이나 연예인처럼 온전히 나에게만 집중할 수 없다.\n나도 꽤나 나에게 집중하는 성향이 강한데도, 사회적인 상황이 달라지면 나에게만 온전히 집중할 수 없었다.\n커리어가 쌓일수록 결국 사람과의 관계가 더 중요한 상황이 되기 때문이다.\n관계로서 만나는 문제는 또 다른 관계로 해결할 수 있다.\n여러 사람간의 관계가 의외로 여러 부정적 감정에 대해 위로 받을 수 있으니 굳이 멀리할 필요가 없고, 오히려 새로운 관계를 맺음으로 지금의 많은 문제들이 자연스레 해결될 수도 있다.\n물론 와이프에게 가장 집중해야하는 것은 두말할 필요 없지만 말이다.",
    "reviews": [],
    "syllabus": [],
    "link": "https://jojoldu.tistory.com/819",
    "pubDate": "Sun, 2 Mar 2025 21:18:08 +0900",
    "creator": "향로 (기억보단 기록을)",
    "categories": [
      "생각정리"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "Google Play 앱 출시 오류 / 계정 세부정보 업데이트 / 대한민국에 거주하는 모든 개발자는 대한민국 법규를 준수하기 위해 Google Play에 추가 정보를 제공해야 합니다.",
    "description": "저는 남의 계정에 앱 올려주다 발생했습니다.\n비공개 테스트 까지 올리려고 하는데 발생했구요\n\n\n우측에 문제 보기 누르시면\n \n발견된 문제 1개\nclose\n검토를 위해 앱을 전송하는 것을 막는 몇 가지 일반적인 문제가 발견되었습니다. 검토를 위해 변경사항을 전송하기 전에 이러한 문제를 해결해야 합니다.\n계정 세부정보 업데이트\n대한민국에 거주하는 모든 개발자는 대한민국 법규를 준수하기 위해 Google Play에 추가 정보를 제공해야 합니다.\n이런 내용이구요\n출시국가랑은 관련 없습니다. 올리는 사람이 한국 사람이면 이걸 증명하라는 뜻입니다.\n \n\n\n버튼 누르시면 개발자 정보 메뉴로 넘어갑니다.\n아래쪽에 보시면 사업자 등록증 번호를 요구 합니다.\n \n\n\n이후 필요한 내용은 \n앱을 출시하려면 사업자등록번호\n인앱을 판매하려면 통신판매업 번호 및 통신판매업 등록 구청 이름 \n(통신판매업자 문서 받아보시면 거기 나옵니다.)\n \n제가 등록했던 방법 글 링크: https://serverdown.tistory.com/815\n\n \n1인개발자 개인사업자 등록에서 앱스토어 런칭까지 01 / 사람 안만나고 인터넷로만 진행가능\n순서1부 - 이글 입니다. 사업자 등록 같은 서류 준비 부분입니다.2부 - Googla play 스토어에 입력해야할 것 (작성중)  사전지식앱스토어에서 인앱을 팔려면 통신판매업자를 등록해야 합니다.통신\nserverdown.tistory.com\n\n \n수익나면 매달 국세청에 올리라고 했던거 같은데 수익이 안나서 그걸 못해봤군요 ㅠㅠ",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1168",
    "pubDate": "Thu, 6 Mar 2025 17:57:22 +0900",
    "creator": "SIDNFT",
    "categories": [
      "프로그래밍/개발메모",
      "앱개발"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "최저임금 제도 개편의 모든 것",
    "description": "최저임금을 두고 서로 생각이 다른 이유",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/friendly-economics-1",
    "pubDate": "Fri, 28 Feb 2025 02:10:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "레이 달리오 그는 훌륭하지도 투자자도 아니였다.",
    "description": "영상: https://www.youtube.com/watch?v=3H9IzYweqAA&list=WL\n\n\n\n그는 엄청나게 고평가된 사람이며\n위기가 올때까지 7년을 위기라고 밀고 나간 사람이다.\n회사의 운영방식은 너무 이상했고\n돈을 번게 아니라 위기때 마다 인기를 얻어 투자금이 들어오면서 성공한것 처럼 보였다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1169",
    "pubDate": "Fri, 7 Mar 2025 09:51:38 +0900",
    "creator": "SIDNFT",
    "categories": [
      "투자"
    ]
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "토스페이 3월 할인 이벤트와 쿠폰 혜택 총정리",
    "description": "지그재그, GS25, 알리익스프레스 할인·적립 쿠폰까지, 토스페이 2025년 3월 혜택 확인하기",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/tosspay-2025-03",
    "pubDate": "Wed, 05 Mar 2025 01:11:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "중국 인구는 이미 5억명이 줄었다는 주장 / 괴담",
    "description": "영상: https://www.youtube.com/watch?v=cHY-ZiGFozA\n\n\n\n2억 ~ 5억명이 이미 사라졌을 가능성이 있다는 주장이 나왔습니다.\n이것은 코로나와 주택버블 붕괴로 여러명이 사망했을 가능성이 있다고 합니다.\n몇년째 화장터가 쉬지 않고 가동중이며 \n코로나 봉쇄가 너무 과했다고 생각했는데 \n그럴만한 이유가 있었던게 아닌가 하는 생각도 드는군요",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1166",
    "pubDate": "Wed, 5 Mar 2025 01:13:43 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브",
      "중국"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "신뢰성 향상을 위한 SLI/SLO 도입 2편 - 플랫폼 적용 사례",
    "description": "시작하며\n안녕하세요. Enablement Engineering 팀에서 SRE(site reliability engineer)로 일하고 있는 어다희입니다.\n저희 팀은 LINE 서비스...",
    "reviews": [],
    "syllabus": [],
    "link": "https://techblog.lycorp.co.jp/ko/sli-and-slo-for-improving-reliability-2",
    "pubDate": "Fri, 28 Feb 2025 02:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "무쌍영걸들로 명토를 휩쓸어라! 무쌍:어비스",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2290",
    "pubDate": "Thu, 06 Mar 2025 23:18:24 +0900",
    "creator": "｜RULIWEB｜",
    "categories": [
      "게임툰"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "A case for QLC SSDs in the data center",
    "description": "The growth of data and need for increased power efficiency are leading to innovative storage solutions. HDDs have been growing in density, but not performance, and TLC flash remains at a price point that is restrictive for scaling.  QLC technology addresses these challenges by forming a middle tier between HDDs and TLC SSDs.   QLC [...]\nRead More...\nThe post A case for QLC SSDs in the data center appeared first on Engineering at Meta.",
    "reviews": [],
    "syllabus": [],
    "link": "https://engineering.fb.com/2025/03/04/data-center-engineering/a-case-for-qlc-ssds-in-the-data-center/",
    "pubDate": "Tue, 04 Mar 2025 17:00:26 +0000",
    "creator": "Unknown",
    "categories": [
      "Data Center Engineering"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "유니티 UIToolKit 배워보자 / 디자이너와 프로그래머의 협업이 쉬워진다.",
    "description": "영상: https://www.youtube.com/watch?v=eeDjeziVEbA&t=23s\n\n\n\n기존에는 ...\nUI 디자이너와 프로그래머는 같은 씬파일을 사용해서\n서로 저장하다보면 합치는 과정에서 누구하나 피를 봐야합니다.\n하지만 서로 다른 파일을 사용한다면 쉽겠죠?\n프로그래머가 이런일에 익숙하다면 UI 디자이너에게 별도의 씬파일을 제공해주는 것도 괸찮은 방법이지만\n아예 유니티에서 만들어 줬습니다.\n그이름이 UIToolKit 입니다.\nuxml 이라는 파일을 사용하며 html 형식으로 제작됩니다.\n디자이너는 uxml 을 편집해서 작업을하고\n프로그래머는 uxml 에 있는 요소와 연결하여 상호작용하기 때문에 서로 겹칠일이 없게됩니다.\n씬은 계속 프로그래머가 사용하겠군요\n좋은 방식입니다. \n생소한 UI 에 적응하시기 바랍니다.\n \n코딩 부분\n영상: https://www.youtube.com/watch?v=_jtj73lu2Ko\n\n\n\n이영상을 참고해서 아래의 코드를 작성했다\n버튼을 누르면 어떤 box 의 배경색을 바꾸는 코드이다.\n프로그래머가 해야할 부분은 마우스로 UI 요소를 끌어다 놓는 일을\n이제 UI 엘리먼트 이름을 가져와 사용해야한다.\n이름은 서로 잘 협의 되어야겠다. 있던게 삭제되고 그러면 곤란하다.\n \nusing UnityEngine; \nusing UnityEngine.UIElements; \npublic class TestMyUIDoc : MonoBehaviour \n{ \n     public UIDocument doc; \n     Button button; \n     VisualElement box; \n     int index = 0; \n     Color[] colors = new Color[3] \n     { \n          Color.red, \n          Color.green, \n          Color.blue, \n     }; \n     void Start() \n     { \n          box = doc.rootVisualElement.Q<VisualElement>(\"mybox\"); \n          button = doc.rootVisualElement.Q<Button>(\"mybutton\"); \n          button.RegisterCallback<ClickEvent>(delegate \n          {\n                // 버튼 이벤트\n               Debug.Log(\"click\");\n                // 색깔을 바꾼다.\n               index++; \n               box.style.backgroundColor = colors[index % colors.Length]; \n          }); \n     } \n}\n \n\n\ndoc 정도는 마우스로 끌어다 놓아다.\n \n\n\n엘리먼트 이름들은 UI 편집기에서 표시되는 이름이다.\n디자이너랑 협의하던가 디자이너가 완성한 파일을 보고 찾아 쓰면 되겠다.\n \n코딩 자동완성으로 더 많은 기능에 접근 가능해서 편했다.\n위치 맞추는 법이 생각보다 어려웠고 이해가 잘 안되었다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1164",
    "pubDate": "Sat, 1 Mar 2025 22:15:08 +0900",
    "creator": "SIDNFT",
    "categories": [
      "프로그래밍/개발메모",
      "유니티"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "분산락 적용하기 (개념)",
    "description": "📌 적용 배경\n이번에 회사에서 하는 프로젝트는 '오더 상태 관리'이다. '오더서밋, 오더취소, 배송, 오 더컨펌' 까지의 다양한 오더 상태에 대한 관리를 적용하는 프로젝트이다. \n우리 회사는 공급사 상품들의 묶음 단위인 딜을 이용해 주문을 한다. 상품이 있으니까 재고가 있겠지? 즉, 각 오더 상태의 역할별로 재고가 차감되거나 복원된다. \n오더 서밋시 : 재고 차감\n오더 취소시 : 재고 복원\n오더 컨펌시 : 재고 차감 / 재고 복원\n이러한 상태가 변경될때 각 딜에는 항상 중복되는 상품이 존재하기 때문에 동시성 문제가 발생하게 된다. 여기서 추가로 딜에는 여러 상품들이 있기 때문에 여러 상품을 동시에 락을 걸어야 하는 상황이다. \n📌 동시성 문제를 해결하는 방법\n여러가지 방법이 있는데 비관적락, 낙관적락, 분산락, 네임드락 등이 있다. 각각의 특징을 간단히 알아보자면,\n1) 비관적락(DB락)\nDB에서 직접 락을 걸어 다른 트랜잭션 차단\n장점 : 데이터 정합성 강하게 보장, 실시간 동시 수정 방지 가능\n단점 : 성능 저하(트랜잭션이 길어질수록 락 유지시간 증가), 데드락\n적용 예시) 은행 계좌 잔고 업데이트\n2) 낙관적락(버전 필드)\n충돌 감지 후 재시도 (rollback & retry)\n장점 : 락을 안걸어서 성능이 좋음\n단점 : 충돌이 빈번할 경우 계속 재시도하여 성능 저하를 일으킴. 정합성이 다소 낮음\n3) 분산락(Redis, Zookeeper)\n여러 서버에서 동일한 리소스를 동시에 수정하지 못하도록 제어\n장점 : 분산 시스템에도 동기화 가능\n단점 : 락 관리(해제, TTL 설정 등) 신경 써야 함, 분산 환경에서 네트워크 이슈로 인해 지연 가능\n우리 회사의 경우, 멀티 인스턴스 환경에서 오더상태 변경을 해야하고 재고관리에 있어서 강한 정합성을 요구하기 때문에 분산락을 적용하기로 결정하였다.\n📌 분산락\n분산락이란 무엇일까?\n앞서 언급했듯이 분산락은 여러 서버에서 동일한 리소스를 동시에 접근하지 못하도록 제어하는 것을 의미한다.(비관적 락이나 낙관적 락은 하나의 DB에서만 동작하는 락) 좀 더 기술적 용어를 사용해서 설명하자면, \n💡 분산락\n락을 획득한 프로세스 혹은 스레드만이 공유 자원 혹은 Critical Section 에 접근할 수 있도록 하는 것\n키(락)를 가진 사람(프로세스/스레드)만 보물이 있는 공간(공유자원)의 문을 열 수 있는 것이다 🗝\n분산락을 적용하는 방법은 여러가지가 있다. Redis, Zookeeper, MySql 등등.. 결론적으로 말하자면, 우린 Redis를 사용하였다.\n우선 Redis는 그동안 캐시용도로 이미 구성해놓은 반면에 Zookeeper는 추가적인 인프라 구성이 필요하기 때문에 제외하게 되었다. 그리고 알다시피 Redis는 싱글스레드로 작동하기 때문에 동시성 문제도 현저히 작다. 아 물론 Mysql도 있긴 한데, 락을 사용하기 위해 별도의 커넥션 풀을 관리해야 하고 락에 관련된 부하를 RDS에서 받으니 Redis를 사용하는 것이 더 효율적이다.\nRedisson을 사용한 이유는?\nRedis는 인메모리 데이터 저장소로 사용되지만 , 캐시 역할을 넘어서 다양한 분산 시스템 기능을 지원하는 구현제(라이브러리, 프레임워크)들이 존재한다. 그 중 난 분산락을 위한 구현체에 대해 간단히 알아보자면,\nJedis -> Lettuce가 성능이 더 좋아서 Lettuce로 대체됨\nLettuce\nRedisson\n1) Lettuce\nSpring Data Redis에서 기본적으로 사용하는 Redis 클라이언트\nsetnx를 활용한 스핀락 : 반복적으로 락 획득 시도 -> 레디스에 많은 부하 발생. CPU를 계속 사용하면서 재시도하는 방식\n락 획득 방식\n(1) SET NX 명령어로 락 획득을 시도\n(2) 락이 없으면 성공 → 작업 진행 후 DEL로 락 해제\n(3) 이미 락이 있으면 실패 → 일정 시간 대기 후 재시도 (스핀락 방식)\n(4) TTL(EX)을 설정하여 데드락 방지\n2) Redisson\n별도의 Lock interface를 지원 : RedLock, RLock(단일 인스턴스 락) 지원\n💡 RedLock\nRedis 기반의 분산 락을 더 안전하게 보장하기 위한 알고리즘\n멀티 Redis 노드 환경에서 장애 복구가 중요한 경우\n데이터 정합성이 중요한 글로벌 시스템\nRedis 장애가 발생해도 락을 유지해야 하는 경우\nRedLock은 과반수 이상의 Redis 노드에서 락을 획득해야 성공\nPub/Sub 방식을 이용하기에 락이 해제되면 락을 subscribe 하는 클라이언트는 락이 해제되었다는 신호를 받고 락 획득을 시도\nRedisson은 락 대기 및 해제 처리를 최적화하여 불필요한 CPU 낭비 없이 안정적으로 락을 관리\n락이 만료되기 전에 자동으로 TTL을 연장하여, 장시간 작업에서도 안정적인 락 유지가 가능\n( Lettuce는 TTL이 지나면 락이 풀릴 수 있어 작업 중 충돌 위험이 존재 )\n결론적으로, Lettuce보다 안정적인 분산 락이 필요했고, CPU 사용을 줄이면서 TTL 자동 연장과 다양한 락 기능을 활용하기 위해 Redisson을 선택하게 된것이다. 그럼 이제, RedLock을 이용할지, RLock을 이용해서 구현할지에 대한 고민이 생긴다.\nRedLock, RLock ? 어떤 것을 이용할까\n❌ RedLock이 과할 수 있는 경우\n싱글 Redis 노드 환경이거나, 락을 걸어야 하는 트랜잭션이 짧다면 RedLock은 오버헤드가 될 수도 있다\n단일 Redis 인스턴스 환경에서는 RedLock을 사용할 필요 없음\n과반수 노드가 죽으면 락 획득이 불가능해질 수도 있음\n현재 우리의 레디스 환경은 하나의 레디스 인스턴스에서 모든 데이터와 락을 관리하는 싱글 노드 형태이기 때문에 RedLock보다는 RLock을 선택하는 것이 낫다는 판단이 되었다.\n코드내에서 주목해야 할점\n코드 내에서 주목해야 할 점을 난 2가지를 뽑았다. \n1) RLock의 내부 코드 파헤치기\n2) 트랜잭션 분리\n🤔 RLock의 내부 코드 파헤치기\nRedission을 이용한 분산락 코드는 사실 인터넷을 조금은 서칭하면 거의 비슷하게 나온다. 그런데 정작 내부의 RLock의 코드를 파헤친 기록은 없더이다. 퇴근하고 남는게 시간인데 놀면 뭐하나,, 내부 코드 뒤적거리면서 시간이나 보내야지 ⏳\n적용한 코드를 크게 보면 간단하다\n락 객체 생성(열쇠 가져오기) → 락 걸기(열쇠로 잠그기) → 락 해제(열쇠로 잠금 풀기) \n1) 락 객체 생성(열쇠 가져오기)\n자.. 락 객체 생성부터 알아볼까?\n\n처음 시작은 getLock부터 시작한다. 이 코드를 따라가다보면, 최종적으로 RedissonLock 클래스의 생성자로 연결된다. \n\n첫번째 코드 줄을 통해, RedissonLock은 RedissonBaseLock을 상속받고, 기본적인 락 이름(name)과 명령 실행기(commandExecutor)가 초기화함을 알 수 있다. \n명령 실행기(commandExecutor)라는 것은 🎁 비동기 Redis 명령어 실행기를 의미한다. 음 Redis에 직접 명령을 보내는 역할인거다. 예를 들어 tryLock()을 호출하면, 내부적으로 SET NX PX 명령이 Redis에 전송되는 것이다. 그래서 명령 실행기를 초기화한다는 것은 commandExecutor를 통해 Redis와 통신할 준비를 한다는 거라고 생각하면 된다. \ninternalLockLeaseTime는 자동 락 해제 시간 설정하는 것이다. 여기서 우리가 주목해야 할것은 🎁 락 워치독 (Watchdog) 기능이다. 쉽게 말하면, 자동 연장 기능이다. \n📌 락 워치독(Watchdog)은 왜 필요할까?\n보통 Redis에서 락을 설정할 때 TTL(만료 시간)을 지정하는데, 작업이 TTL 안에 끝나지 않으면 락이 자동으로 해제되는 문제가 있다. \n예를 들어 TTL이 5초인데 작업이 6초걸린다고 치자. 5초 후 락이 만료되고 자동으로 해제되면?\n다른 프로세스가 같은 락을 획득할 수 있다 → 데이터 일관성 깨짐 😨\n그래서 락을 획득한 스레드가 살아 있는 동안 TTL이 자동으로 연장된다는 기능이다. TTL을 직접 설정하지 않으면 기본 30초 동안 유지된다고 한다. \n마지막 줄인 pubSub은 🎁 Pub/Sub 기능을 활용하여 락 해제 이벤트를 감지하는 역할이다. \nRedis에서 분산 락을 사용할 때, 다른 클라이언트가 락을 대기하는 방식에는 2가지 방식이 있다. \n폴링(Polling) 방식: 주기적으로 Redis를 조회해서 락이 해제되었는지 확인함.\n이벤트 기반 방식: 락이 해제될 때 Redis가 직접 알림(Pub/Sub)을 보내서 대기 중인 클라이언트가 즉시 실행됨.\n만약 폴링 방식이라면? 락을 얻으려는 클라이언트가 주기적으로 Redis에 요청을 보내 락이 해제되었는지 확인해야한다. 듣기만 해도, 불필요한 Redis 부하가 발생하고 클라이언트가 지속적으로 Redis에 요청을 보내므로 트래픽이 많아질 거라는 단점이 느껴지지?\n그래서 Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다. 언제? RLock.unlock() 이 호출될때!\n2) 락 걸기(열쇠로 잠그기)\n이제 락을 어떻게 거는지 알아보자. 코드를 따라가다보면 Redission 클래스에서 tryLock()의 구현체를 확인할 수 있다. \n코드에 대한 내용을 간단하게 정리하자면, \n주어진 대기 시간(waitTime) 내에 락을 획득하려 시도하며, 락을 획득하면 지정된 임대 시간(leaseTime) 동안 락을 유지한다. 락을 즉시 획득하지 못한 경우, 다른 클라이언트의 락 해제 이벤트를 대기하기 위해 Pub/Sub 메커니즘을 활용하고, 대기 시간 내에 락을 획득하지 못하면 false를 반환하는 매커니즘을 확인할 수 있다. \n\n3) 락 해제(열쇠로 잠금 풀기)\n비동기적으로 락을 해제하는 모습을 볼 수 있다. 앞서 언급했듯이  Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다 -> 이부분을 찾기 위해 코드를 엄청 뒤졌는데 사실 해당 역할을 하는 코드를 찾을 수가 없어서 좀 아쉽다..ㅠ\n\n🤔 트랜잭션 분리\n코드를 살펴보면 락을 걸고 나서 트랜잭션을 분리해서 비즈니스 로직을 실행하는 역할을 하는 것을 볼 수 있다. \n\n음..쉽게 말하면 DistributedLock 어노테이션이 선언된 메서드를 별도의 트랜잭션으로 실행하게 만든 코드인 것이다. \n\nPropagation.REQUIRES_NEW 옵션을 지정해 부모 트랜잭션의 유무에 관계없이 별도의 트랜잭션으로 동작하게끔 설정하고 반드시 트랜잭션 커밋 이후 락이 해제되게끔 처리하고 있다. 왜 이렇게 분리를 했을까?\n해당 내용은 컬리의 블로그에 너무 자세히 써져있다. 내가 진행한 프로젝트도 재고를 위한 분산락인데 여기서도 재고를 예시로 들어서 너무나 적절하게 써져있으니 해당 링크 참고하길 바란다. 결론을 말하자면 데이터 정합성을 위한 방법으로 트랜잭션 커밋 이후 락이 해제되게끔 처리 해놓았다. \n📌 추가된 요구사항\n실전으로 넘어가기 전에, 추가할 요구사항이 있다. 앞선 요구사항은 하나의 key 즉, 하나의 row만 락을 거는 형식으로 구현되어 있다. 하지만 우리 회사 특성상 주문시 여러 상품을 동시에 상태 변경하기 때문에 한번에 여러 상품의 재고를 변경해야한다. 따라서 하나의 row가 아닌 여러 row에 락을 걸어야 한다. \n그렇다면 기존에 받는 키도 하나에서 여러개를 받게 되고 락도 동시에 여러개를 건다는 말이겠지? 정리하자면, 여러 개의 락을 동시에 걸고, 하나라도 실패하면 전체 실패하도록 하고 싶다는 것이다. 이때 난 RedissonMultiLock이라는 것을 사용했다. \n\n즉, 하나의 트랜잭션처럼 모든 락이 성공해야만 실행되도록 할때 사용된다. 그렇다는 말은 락을 해제할때도 한꺼번에 해제한다는 말과 동일하다. \n이제 추가된 요구까지 알아보았으니 본격적으로 테스트를 해볼까? 해당 내용은 다음편에 있다. \n참고) \nhttps://velog.io/@a01021039107/%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%B4%EB%A1%A0%ED%8E%B8\nhttps://helloworld.kurly.com/blog/distributed-redisson-lock/\nhttps://techblog.woowahan.com/17416/\nhttps://velog.io/@jinony/Spring-Boot-Apache-JMeter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8",
    "reviews": [],
    "syllabus": [],
    "link": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EA%B0%9C%EB%85%90",
    "pubDate": "Wed, 05 Mar 2025 22:42:55 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "Admission for the Computer Science and AI BSc Is Open",
    "description": "Admission to the Computer Science and Artificial Intelligence bachelor’s program at Neapolis University Pafos is open!  The JetBrains Foundation supports this bachelor’s program and offers 15 fully funded scholarships for the most talented applicants. The scholarships cover tuition, accommodation, medical insurance, visa fees, and spending money (€300 per month). Many students who graduate from bachelor’s […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/education/2025/03/03/admission-for-the-computer-science-and-ai-bsc-is-open/",
    "pubDate": "Mon, 03 Mar 2025 08:17:10 +0000",
    "creator": "Alena Gupaisova",
    "categories": [
      "offline-programs",
      "csai"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "토스인사이트, 초대 연구소장에 홍기훈 홍익대학교 교수 선임",
    "description": "“핀테크 산업의 발전과 금융정책 연구에 기여할 것”",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/TOSSINSIGHTHONG",
    "pubDate": "Fri, 28 Feb 2025 01:34:00 GMT",
    "creator": "Unknown",
    "categories": []
  }
]