[
  {
    "id": 1,
    "imageUrl": "",
    "title": "Visual Studio 17.12의 디버거 및 진단 업데이트",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/VS_20250309/",
    "pubDate": "Sun, 09 Mar 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Unlock Free Access to Cloud Academy: A New Benefit for Visual Studio Subscribers",
    "description": "I’m very excited to share some great news with you! Starting today, if you’re a Visual Studio Professional or Enterprise subscriber, you can get free access to Cloud Academy from QA—no trial, and no credit card required. This exclusive benefit is included with your Visual Studio subscription and provides 12 months of free access to […]\nThe post Unlock Free Access to Cloud Academy: A New Benefit for Visual Studio Subscribers appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/cloud-academy-visual-studio-subscription-benefit/",
    "pubDate": "Mon, 10 Mar 2025 12:00:55 +0000",
    "creator": "Jim Harrer",
    "categories": [
      "Visual Studio"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "한국어 몰라요 - 글로벌 협업의 4가지 패턴",
    "description": "요즘 우리나라는 어느 회사든 글로벌 진출을 염두에 두고 있습니다. 대부분의 분야에서 우리나라 시장은 가파른 속도로 축소될 전망이므로 해외 진출은 하고 싶은 것이 아닌 할 수밖에 없...",
    "reviews": [],
    "syllabus": [],
    "link": "https://techblog.lycorp.co.jp/ko/4-patterns-of-global-collaboration",
    "pubDate": "Fri, 07 Mar 2025 04:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "분산락 적용하기 (개념)",
    "description": "📌 적용 배경\n이번에 회사에서 하는 프로젝트는 '오더 상태 관리'이다. '오더서밋, 오더취소, 배송, 오 더컨펌' 까지의 다양한 오더 상태에 대한 관리를 적용하는 프로젝트이다. \n우리 회사는 공급사 상품들의 묶음 단위인 딜을 이용해 주문을 한다. 상품이 있으니까 재고가 있겠지? 즉, 각 오더 상태의 역할별로 재고가 차감되거나 복원된다. \n오더 서밋시 : 재고 차감\n오더 취소시 : 재고 복원\n오더 컨펌시 : 재고 차감 / 재고 복원\n이러한 상태가 변경될때 각 딜에는 항상 중복되는 상품이 존재하기 때문에 동시성 문제가 발생하게 된다. 여기서 추가로 딜에는 여러 상품들이 있기 때문에 여러 상품을 동시에 락을 걸어야 하는 상황이다. \n📌 동시성 문제를 해결하는 방법\n여러가지 방법이 있는데 비관적락, 낙관적락, 분산락, 네임드락 등이 있다. 각각의 특징을 간단히 알아보자면,\n1) 비관적락(DB락)\nDB에서 직접 락을 걸어 다른 트랜잭션 차단\n장점 : 데이터 정합성 강하게 보장, 실시간 동시 수정 방지 가능\n단점 : 성능 저하(트랜잭션이 길어질수록 락 유지시간 증가), 데드락\n적용 예시) 은행 계좌 잔고 업데이트\n2) 낙관적락(버전 필드)\n충돌 감지 후 재시도 (rollback & retry)\n장점 : 락을 안걸어서 성능이 좋음\n단점 : 충돌이 빈번할 경우 계속 재시도하여 성능 저하를 일으킴. 정합성이 다소 낮음\n3) 분산락(Redis, Zookeeper)\n여러 서버에서 동일한 리소스를 동시에 수정하지 못하도록 제어\n장점 : 분산 시스템에도 동기화 가능\n단점 : 락 관리(해제, TTL 설정 등) 신경 써야 함, 분산 환경에서 네트워크 이슈로 인해 지연 가능\n우리 회사의 경우, 멀티 인스턴스 환경에서 오더상태 변경을 해야하고 재고관리에 있어서 강한 정합성을 요구하기 때문에 분산락을 적용하기로 결정하였다.\n📌 분산락\n분산락이란 무엇일까?\n앞서 언급했듯이 분산락은 여러 서버에서 동일한 리소스를 동시에 접근하지 못하도록 제어하는 것을 의미한다.(비관적 락이나 낙관적 락은 하나의 DB에서만 동작하는 락) 좀 더 기술적 용어를 사용해서 설명하자면, \n💡 분산락\n락을 획득한 프로세스 혹은 스레드만이 공유 자원 혹은 Critical Section 에 접근할 수 있도록 하는 것\n키(락)를 가진 사람(프로세스/스레드)만 보물이 있는 공간(공유자원)의 문을 열 수 있는 것이다 🗝\n분산락을 적용하는 방법은 여러가지가 있다. Redis, Zookeeper, MySql 등등.. 결론적으로 말하자면, 우린 Redis를 사용하였다.\n우선 Redis는 그동안 캐시용도로 이미 구성해놓은 반면에 Zookeeper는 추가적인 인프라 구성이 필요하기 때문에 제외하게 되었다. 그리고 알다시피 Redis는 싱글스레드로 작동하기 때문에 동시성 문제도 현저히 작다. 아 물론 Mysql도 있긴 한데, 락을 사용하기 위해 별도의 커넥션 풀을 관리해야 하고 락에 관련된 부하를 RDS에서 받으니 Redis를 사용하는 것이 더 효율적이다.\nRedisson을 사용한 이유는?\nRedis는 인메모리 데이터 저장소로 사용되지만 , 캐시 역할을 넘어서 다양한 분산 시스템 기능을 지원하는 구현제(라이브러리, 프레임워크)들이 존재한다. 그 중 난 분산락을 위한 구현체에 대해 간단히 알아보자면,\nJedis -> Lettuce가 성능이 더 좋아서 Lettuce로 대체됨\nLettuce\nRedisson\n1) Lettuce\nSpring Data Redis에서 기본적으로 사용하는 Redis 클라이언트\nsetnx를 활용한 스핀락 : 반복적으로 락 획득 시도 -> 레디스에 많은 부하 발생. CPU를 계속 사용하면서 재시도하는 방식\n락 획득 방식\n(1) SET NX 명령어로 락 획득을 시도\n(2) 락이 없으면 성공 → 작업 진행 후 DEL로 락 해제\n(3) 이미 락이 있으면 실패 → 일정 시간 대기 후 재시도 (스핀락 방식)\n(4) TTL(EX)을 설정하여 데드락 방지\n2) Redisson\n별도의 Lock interface를 지원 : RedLock, RLock(단일 인스턴스 락) 지원\n💡 RedLock\nRedis 기반의 분산 락을 더 안전하게 보장하기 위한 알고리즘\n멀티 Redis 노드 환경에서 장애 복구가 중요한 경우\n데이터 정합성이 중요한 글로벌 시스템\nRedis 장애가 발생해도 락을 유지해야 하는 경우\nRedLock은 과반수 이상의 Redis 노드에서 락을 획득해야 성공\nPub/Sub 방식을 이용하기에 락이 해제되면 락을 subscribe 하는 클라이언트는 락이 해제되었다는 신호를 받고 락 획득을 시도\nRedisson은 락 대기 및 해제 처리를 최적화하여 불필요한 CPU 낭비 없이 안정적으로 락을 관리\n락이 만료되기 전에 자동으로 TTL을 연장하여, 장시간 작업에서도 안정적인 락 유지가 가능\n( Lettuce는 TTL이 지나면 락이 풀릴 수 있어 작업 중 충돌 위험이 존재 )\n결론적으로, Lettuce보다 안정적인 분산 락이 필요했고, CPU 사용을 줄이면서 TTL 자동 연장과 다양한 락 기능을 활용하기 위해 Redisson을 선택하게 된것이다. 그럼 이제, RedLock을 이용할지, RLock을 이용해서 구현할지에 대한 고민이 생긴다.\nRedLock, RLock ? 어떤 것을 이용할까\n❌ RedLock이 과할 수 있는 경우\n싱글 Redis 노드 환경이거나, 락을 걸어야 하는 트랜잭션이 짧다면 RedLock은 오버헤드가 될 수도 있다\n단일 Redis 인스턴스 환경에서는 RedLock을 사용할 필요 없음\n과반수 노드가 죽으면 락 획득이 불가능해질 수도 있음\n현재 우리의 레디스 환경은 하나의 레디스 인스턴스에서 모든 데이터와 락을 관리하는 싱글 노드 형태이기 때문에 RedLock보다는 RLock을 선택하는 것이 낫다는 판단이 되었다.\n코드내에서 주목해야 할점\n코드 내에서 주목해야 할 점을 난 2가지를 뽑았다. \n1) RLock의 내부 코드 파헤치기\n2) 트랜잭션 분리\n🤔 RLock의 내부 코드 파헤치기\nRedission을 이용한 분산락 코드는 사실 인터넷을 조금은 서칭하면 거의 비슷하게 나온다. 그런데 정작 내부의 RLock의 코드를 파헤친 기록은 없더이다. 퇴근하고 남는게 시간인데 놀면 뭐하나,, 내부 코드 뒤적거리면서 시간이나 보내야지 ⏳\n적용한 코드를 크게 보면 간단하다\n락 객체 생성(열쇠 가져오기) → 락 걸기(열쇠로 잠그기) → 락 해제(열쇠로 잠금 풀기) \n1) 락 객체 생성(열쇠 가져오기)\n자.. 락 객체 생성부터 알아볼까?\n\n처음 시작은 getLock부터 시작한다. 이 코드를 따라가다보면, 최종적으로 RedissonLock 클래스의 생성자로 연결된다. \n\n첫번째 코드 줄을 통해, RedissonLock은 RedissonBaseLock을 상속받고, 기본적인 락 이름(name)과 명령 실행기(commandExecutor)가 초기화함을 알 수 있다. \n명령 실행기(commandExecutor)라는 것은 🎁 비동기 Redis 명령어 실행기를 의미한다. 음 Redis에 직접 명령을 보내는 역할인거다. 예를 들어 tryLock()을 호출하면, 내부적으로 SET NX PX 명령이 Redis에 전송되는 것이다. 그래서 명령 실행기를 초기화한다는 것은 commandExecutor를 통해 Redis와 통신할 준비를 한다는 거라고 생각하면 된다. \ninternalLockLeaseTime는 자동 락 해제 시간 설정하는 것이다. 여기서 우리가 주목해야 할것은 🎁 락 워치독 (Watchdog) 기능이다. 쉽게 말하면, 자동 연장 기능이다. \n📌 락 워치독(Watchdog)은 왜 필요할까?\n보통 Redis에서 락을 설정할 때 TTL(만료 시간)을 지정하는데, 작업이 TTL 안에 끝나지 않으면 락이 자동으로 해제되는 문제가 있다. \n예를 들어 TTL이 5초인데 작업이 6초걸린다고 치자. 5초 후 락이 만료되고 자동으로 해제되면?\n다른 프로세스가 같은 락을 획득할 수 있다 → 데이터 일관성 깨짐 😨\n그래서 락을 획득한 스레드가 살아 있는 동안 TTL이 자동으로 연장된다는 기능이다. TTL을 직접 설정하지 않으면 기본 30초 동안 유지된다고 한다. \n마지막 줄인 pubSub은 🎁 Pub/Sub 기능을 활용하여 락 해제 이벤트를 감지하는 역할이다. \nRedis에서 분산 락을 사용할 때, 다른 클라이언트가 락을 대기하는 방식에는 2가지 방식이 있다. \n폴링(Polling) 방식: 주기적으로 Redis를 조회해서 락이 해제되었는지 확인함.\n이벤트 기반 방식: 락이 해제될 때 Redis가 직접 알림(Pub/Sub)을 보내서 대기 중인 클라이언트가 즉시 실행됨.\n만약 폴링 방식이라면? 락을 얻으려는 클라이언트가 주기적으로 Redis에 요청을 보내 락이 해제되었는지 확인해야한다. 듣기만 해도, 불필요한 Redis 부하가 발생하고 클라이언트가 지속적으로 Redis에 요청을 보내므로 트래픽이 많아질 거라는 단점이 느껴지지?\n그래서 Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다. 언제? RLock.unlock() 이 호출될때!\n2) 락 걸기(열쇠로 잠그기)\n이제 락을 어떻게 거는지 알아보자. 코드를 따라가다보면 Redission 클래스에서 tryLock()의 구현체를 확인할 수 있다. \n코드에 대한 내용을 간단하게 정리하자면, \n주어진 대기 시간(waitTime) 내에 락을 획득하려 시도하며, 락을 획득하면 지정된 임대 시간(leaseTime) 동안 락을 유지한다. 락을 즉시 획득하지 못한 경우, 다른 클라이언트의 락 해제 이벤트를 대기하기 위해 Pub/Sub 메커니즘을 활용하고, 대기 시간 내에 락을 획득하지 못하면 false를 반환하는 매커니즘을 확인할 수 있다. \n\n3) 락 해제(열쇠로 잠금 풀기)\n비동기적으로 락을 해제하는 모습을 볼 수 있다. 앞서 언급했듯이  Redisson에서는 락이 해제될 때 이벤트를 발생시켜 다른 클라이언트가 즉시 실행될 수 있도록 처리한다 -> 이부분을 찾기 위해 코드를 엄청 뒤졌는데 사실 해당 역할을 하는 코드를 찾을 수가 없어서 좀 아쉽다..ㅠ\n\n🤔 트랜잭션 분리\n코드를 살펴보면 락을 걸고 나서 트랜잭션을 분리해서 비즈니스 로직을 실행하는 역할을 하는 것을 볼 수 있다. \n\n음..쉽게 말하면 DistributedLock 어노테이션이 선언된 메서드를 별도의 트랜잭션으로 실행하게 만든 코드인 것이다. \n\nPropagation.REQUIRES_NEW 옵션을 지정해 부모 트랜잭션의 유무에 관계없이 별도의 트랜잭션으로 동작하게끔 설정하고 반드시 트랜잭션 커밋 이후 락이 해제되게끔 처리하고 있다. 왜 이렇게 분리를 했을까?\n해당 내용은 컬리의 블로그에 너무 자세히 써져있다. 내가 진행한 프로젝트도 재고를 위한 분산락인데 여기서도 재고를 예시로 들어서 너무나 적절하게 써져있으니 해당 링크 참고하길 바란다. 결론을 말하자면 데이터 정합성을 위한 방법으로 트랜잭션 커밋 이후 락이 해제되게끔 처리 해놓았다. \n📌 추가된 요구사항\n실전으로 넘어가기 전에, 추가할 요구사항이 있다. 앞선 요구사항은 하나의 key 즉, 하나의 row만 락을 거는 형식으로 구현되어 있다. 하지만 우리 회사 특성상 주문시 여러 상품을 동시에 상태 변경하기 때문에 한번에 여러 상품의 재고를 변경해야한다. 따라서 하나의 row가 아닌 여러 row에 락을 걸어야 한다. \n그렇다면 기존에 받는 키도 하나에서 여러개를 받게 되고 락도 동시에 여러개를 건다는 말이겠지? 정리하자면, 여러 개의 락을 동시에 걸고, 하나라도 실패하면 전체 실패하도록 하고 싶다는 것이다. 이때 난 RedissonMultiLock이라는 것을 사용했다. \n\n즉, 하나의 트랜잭션처럼 모든 락이 성공해야만 실행되도록 할때 사용된다. 그렇다는 말은 락을 해제할때도 한꺼번에 해제한다는 말과 동일하다. \n이제 추가된 요구까지 알아보았으니 본격적으로 테스트를 해볼까? 해당 내용은 다음편에 있다. \n참고) \nhttps://velog.io/@a01021039107/%EB%B6%84%EC%82%B0%EB%9D%BD%EC%9C%BC%EB%A1%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%B4%EB%A1%A0%ED%8E%B8\nhttps://helloworld.kurly.com/blog/distributed-redisson-lock/\nhttps://techblog.woowahan.com/17416/\nhttps://velog.io/@jinony/Spring-Boot-Apache-JMeter%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B6%80%ED%95%98-%ED%85%8C%EC%8A%A4%ED%8A%B8",
    "reviews": [],
    "syllabus": [],
    "link": "https://velog.io/@sweet_sumin/%EB%B6%84%EC%82%B0%EB%9D%BD-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-%EA%B0%9C%EB%85%90",
    "pubDate": "Wed, 05 Mar 2025 22:42:55 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "TeamCity 2024.12.3 Bug Fix Is Out!",
    "description": "The TeamCity On-Premises 2024.12.3 bug-fix update is out and ready to be installed on your servers! This update resolves over 10 issues and, as always, includes essential security and performance fixes. We highly recommend upgrading to keep your system secure and optimized. The list of resolved issues includes: See TeamCity 2024.12.3 Upgrade Notes for the […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/teamcity/2025/03/teamcity-2024-12-3-bug-fix/",
    "pubDate": "Fri, 07 Mar 2025 09:54:08 +0000",
    "creator": "Dmitrii Korovin",
    "categories": [
      "bug-fix"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "Announcing Guidelines Support Library v4.2.0",
    "description": "Version 4.2.0 of Microsoft's Guidelines Support Library brings performance improvements, safety features, modern compiler support.\nThe post Announcing Guidelines Support Library v4.2.0 appeared first on C++ Team Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/cppblog/announcing-guidelines-support-library-v4-2-0/",
    "pubDate": "Thu, 06 Mar 2025 09:36:54 +0000",
    "creator": "Carson Radtke",
    "categories": [
      "Announcement",
      "C++"
    ]
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "GPT-4o Copilot code completion model available now in Visual Studio public preview",
    "description": "We are excited to announce that the new GPT-4o Copilot code completion model is now available for GitHub Copilot users in Visual Studio starting in 17.14 Preview 2! This new model, based on GPT-4o mini, has undergone additional training on over 275,000 high-quality public repositories across more than 30 popular programming languages. As a result, […]\nThe post GPT-4o Copilot code completion model available now in Visual Studio public preview appeared first on Visual Studio Blog.",
    "reviews": [],
    "syllabus": [],
    "link": "https://devblogs.microsoft.com/visualstudio/gpt-4o-copilot-code-completion-model-available-now-in-visual-studio-public-preview/",
    "pubDate": "Tue, 11 Mar 2025 15:00:21 +0000",
    "creator": "Simona Liao",
    "categories": [
      "Artificial Intelligence",
      "Copilot",
      "GitHub Copilot",
      "Productivity",
      "Visual Studio",
      "GitHub Copilot Completions"
    ]
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "갤럭시S2에서 갤럭시S25로",
    "description": "첫 스마트폰은 갤럭시 S2 였습니다. 개발자 치고는 스마트폰을 무척 늦게 샀습니다.\n갤럭시 S2를 쓴 이후로 스마트폰을 20개 정도는 써본 것 같습니다.\n이번에는 마음이 바뀌었습니다. 어쩌면 그동안 메인스트림에서 너무 멀어져 있던 건 아닐까?\n갤럭시 S25로 메인폰을 변경 후 한 달 정도 지난 것 같은데 아주 만족하며 잘 쓰고 있습니다.\n사소하게 한 가지 불편한 점이 있다면…\n크롬 브라우저의 숫자 키패드에 마이너스 키가 없다는 것.\n\n갤럭시에만 숫자 키패드에 마이너스 키가 없다. (크롬 브라우저)\n브라우저의 키패드는 각각의 제조사에서 구현을 하는 듯 보입니다.\n마이너스 숫자를 종종 입력해야 할 일이 생기는 저는 매번 고통을… 꼭 고쳐주시면 좋겠네요.\n10년 전쯤에는 안드로이드 대 아이폰의 점유율이 9:1에 가깝게 된 적도 있었습니다.\n\n함께 읽으면 좋은 글:\n그때 아이폰을 살 걸 그랬어\n아이폰과 안드로이드",
    "reviews": [],
    "syllabus": [],
    "link": "https://jeho.page/essay/2025/03/10/galaxy-s2-to-s25.html",
    "pubDate": "2025-03-10T09:01:00.000Z",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "Try The New Toolbox App 2.6 EAP With Remote Development Support",
    "description": "With the latest update, the Toolbox App now supports remote development, allowing you to manage your JetBrains tools and projects both locally and on remote servers. This allows you to connect to cross-platform hosts, including Windows, macOS, and Linux, and use integrated OpenSSH for secure and customizable SSH connections. You can download the latest Toolbox […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/toolbox-app/2025/03/try-the-new-toolbox-app-2-6-eap-with-remote-development-support/",
    "pubDate": "Thu, 06 Mar 2025 10:45:29 +0000",
    "creator": "Ivan Kuzmin",
    "categories": [
      "jetbrains-toolbox",
      "toolbox-app"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "Visual Studio v17.12 로 생산성을 높이기",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/VS_20250307/",
    "pubDate": "Fri, 07 Mar 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "악순환에 빠지는 해커 이야기",
    "description": "영상: https://www.youtube.com/watch?v=CILzHb_-ijc\n\n\n\n \n1. 컴터를 잘함\n2. 중졸이라 취업이 안됨 / 고등학교 자퇴\n3. 해킹을 함\n4. 잡혀감\n5. 잡혀간 경력때문에 취업이 더 안됨\n5. 또 해킹을 함\n...\n뭔가 슬프다",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1180",
    "pubDate": "Tue, 11 Mar 2025 00:49:10 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "미국주식 2025-03-12 현재 상황",
    "description": "영상: https://www.youtube.com/watch?v=zkWobeFLAD4&t=307s\n\n\n\n미국채 금리를 4% 이하려 떨어드려야 주가 부양이 가능한거 같습니다.\n트럼프는 작정하고 침체를 만들어 국채 이자를 떨어트릴 생각입니다.\n미국채 투자를 고려해 봐야겠군요\n \n트럼프의 이 고집은 길면 6월까지 지속될 가능성이 있습니다.\n \n변곡점 예상\n3월 14일 부채 한도 협상\n4월 2일 관세 적용\n5월 fomc 금리 인하\n6월 fomc 금리 인하\n이벤트에 중에 하락이 끝날 가능성이 있어 보입니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1182",
    "pubDate": "Tue, 11 Mar 2025 14:01:40 +0900",
    "creator": "SIDNFT",
    "categories": [
      "투자"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "죄도 병으로 만들면 된다. / 도벽증 / 둔주 해리성 기억장애",
    "description": "영상: https://www.youtube.com/watch?v=dmVYhc_w_ew\n\n\n\n어느시대엔 죄가 되고 어느 시대엔 죄가 안되고\n미국도 한때 천달라 이하의 절도는 죄가 안되는 벙이 있었고\n한국은 군대에 가지 않기 위해 장애 판정을 받기도 했습니다.\n돈이 있는 사람에게는 죄도 죄가 아니게 할 수 있었던 적도 있었습니다.\n시대의 흐름을 안보고 관념에 사로잡혀있으면 안된다는 것을 말하고 싶었습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1176",
    "pubDate": "Sun, 9 Mar 2025 14:29:26 +0900",
    "creator": "SIDNFT",
    "categories": [
      "시대"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "노트북 배터리가 빨리 닳는 이유? 절전 모드 때문일 수도",
    "description": "윈도우 PC에서 '절전 모드'를 자주 사용하면 성능 저하, 배터리 문제, 하드웨어 부담 등의 문제가 발생할 수 있습니다. 절전 모드 대신 '완전 종료'나 '최대 절전 모드'를 활용하는 것이 더 나은 선택일 수 있습니다.\n\n\n \n\"PC를 켤 때 기다리는 게 싫어서 절전 모드를 자주 사용했는데, 오히려 성능이 나빠지는 느낌이에요.\" 이런 경험 있으신가요? 저도 한때는 절전 모드가 편리하다고 생각했어요. 하지만 사용하면 할수록 PC가 느려지고, 배터리도 예상보다 빨리 닳는 걸 깨닫고 나서 완전히 생각을 바꿨죠.\n \n윈도우의 절전 모드는 겉보기엔 편리하지만, 장기적으로 보면 여러 가지 문제가 생길 수 있습니다. 성능 저하, 배터리 소모, 시스템 충돌 등 다양한 이유로 저는 절전 모드를 피하는 편이에요. 그렇다면, 왜 절전 모드가 문제가 될까요? 그리고 대안은 무엇일까요?\n \n  최신 PC는 부팅 속도가 빠르다\n예전에는 PC를 완전히 종료하면 다시 켤 때 시간이 오래 걸렸어요. 하지만 요즘은 SSD가 대중화되면서 부팅 속도가 크게 개선됐습니다.\n \nSSD를 사용하면 부팅 시간이 평균 10초 내외로 줄어들어요. 게다가 윈도우의 '빠른 시작(Fast Startup)' 기능을 활성화하면 더욱 빠르게 사용할 수 있죠. 절전 모드를 쓰지 않아도 충분히 빠른 부팅이 가능하니, 굳이 사용할 이유가 적어집니다.\n \n⚠️ 절전 모드가 성능 저하를 유발할 수 있다\n절전 모드는 PC를 완전히 끄는 것이 아니라, 메모리에 현재 상태를 저장한 채 최소한의 전력을 유지하는 방식이에요. 그래서 계속 절전 모드만 반복해서 사용하면 시스템 메모리가 점점 쌓이고, 백그라운드에서 실행되는 프로그램이 많아져 PC 속도가 느려질 수 있어요.\n \n특히, 윈도우 업데이트 같은 중요한 작업은 시스템이 완전히 종료될 때 진행되는 경우가 많아서, 절전 모드를 너무 자주 사용하면 업데이트가 원활하게 이루어지지 않을 수도 있습니다.\n \n  배터리가 예상보다 빨리 닳는다\n\"노트북을 절전 모드로 두고 가방에 넣었는데, 몇 시간 후에 보니 배터리가 절반 이상 닳아 있었어요.\" 이런 경험 해보신 적 있나요?\n \n절전 모드는 전력을 완전히 차단하는 것이 아니라, 메모리를 유지하기 위해 계속 전력을 소비해요. 특히 'Modern Standby' 기능이 활성화된 상태에서는 네트워크 연결을 유지하면서도 절전 모드가 지속되기 때문에 배터리 소모가 심해질 수 있습니다.\n \n  시스템 프로세스가 중단될 가능성이 있다\n컴퓨터를 완전히 종료하면 실행 중인 프로세스들이 정상적으로 종료되지만, 절전 모드에서는 그렇지 않습니다. 작업 중이던 프로그램이 강제로 중단되면서 오류가 발생할 가능성이 높아지는 거죠.\n특히, 포토샵이나 프리미어 프로 같은 전문 소프트웨어를 사용하는 경우, 절전 모드를 반복하면 프로젝트 파일이 손상될 수도 있어요. 이런 프로그램을 사용한다면 절전 모드보다는 완전 종료 또는 최대 절전 모드를 사용하는 것이 더 안전합니다.\n \n  하드웨어 부담과 비정상적인 작동\n절전 모드를 지속적으로 사용하면 하드웨어에도 부담이 갈 수 있어요. 예를 들어, 노트북을 절전 모드 상태로 가방에 넣어두면 내부적으로 열이 발생하면서 장기적으로 부품에 영향을 줄 수 있습니다.\n또한, 배터리는 충전과 방전을 반복할수록 수명이 줄어드는데, 절전 모드를 자주 사용하면 배터리가 지속적으로 활성화된 상태가 되어 수명 감소가 빨라질 수 있어요.\n \n✅ 절전 모드 대신 사용할 수 있는 대안\n절전 모드를 꼭 사용해야 할까요? 더 좋은 방법이 있습니다.\n \n1️⃣ 완전 종료(Shut Down)\nPC를 장시간 사용하지 않을 때는 완전히 종료하는 것이 가장 깔끔한 방법이에요. 이렇게 하면 시스템이 완전히 리셋되면서 불필요한 프로세스가 종료되고, 성능이 최적화됩니다.\n \n2️⃣ 최대 절전 모드(Hibernate)\n노트북을 잠시 닫아야 하지만 배터리를 아끼고 싶다면, 최대 절전 모드를 활용해 보세요. 이 모드는 현재 작업 상태를 저장한 후 PC를 완전히 꺼버리기 때문에 전력 소모가 없습니다. 그리고 다시 켜면 원래 작업하던 상태로 바로 돌아올 수 있어요.\n \n3️⃣ 빠른 시작(Fast Startup) 활성화\n윈도우의 빠른 시작 기능을 활성화하면 부팅 속도를 더 빠르게 할 수 있어요. 설정 방법은 다음과 같습니다.\n\n\n\n제어판(Control Panel) > 전원 옵션(Power Options)으로 이동\n왼쪽 메뉴에서 전원 버튼 작동 설정(Choose what the power button does) 선택\n빠른 시작 켜기(Turn on fast startup) 옵션 활성화 후 저장\n이 기능을 활용하면 절전 모드를 사용하지 않아도 빠르게 PC를 켤 수 있습니다.\n \n✍️ 결론\n절전 모드는 편리한 기능이지만, 장기적으로 보면 성능 저하, 배터리 소모, 하드웨어 부담 등의 문제가 발생할 수 있습니다. 그래서 저는 절전 모드를 거의 사용하지 않고, 대신 완전 종료, 최대 절전 모드, 빠른 시작 기능을 활용하고 있어요.\n여러분도 혹시 절전 모드 때문에 불편을 겪고 계신가요? 그렇다면 오늘부터라도 더 효율적인 방법을 사용해 보세요!  \n  Q&A\n1. 절전 모드를 사용하면 배터리가 빨리 닳는 이유는?\n절전 모드에서도 메모리를 유지하기 위해 일정량의 전력을 계속 사용하기 때문입니다. 특히 최신 윈도우 노트북은 네트워크 연결까지 유지하려고 하면서 배터리 소모가 더 심해질 수 있습니다.\n2. 절전 모드 대신 가장 좋은 대안은?\nPC를 완전히 종료하는 것이 가장 좋습니다. 하지만 작업 상태를 유지해야 한다면 '최대 절전 모드'를 사용하는 것이 절전 모드보다 훨씬 효과적입니다.\n3. 절전 모드를 계속 사용하면 성능이 저하될 수 있나요?\n네, 절전 모드를 반복 사용하면 시스템 메모리가 점점 쌓이고, 백그라운드 프로세스가 제대로 종료되지 않아 PC가 느려질 수 있습니다.\n4. 빠른 시작(Fast Startup) 기능을 활성화하면 절전 모드가 필요 없을까요?\n네, 빠른 시작 기능을 켜면 부팅 속도가 절전 모드에서 깨어나는 것과 거의 비슷한 수준으로 빨라지므로 절전 모드를 굳이 사용할 필요가 없습니다.\n5. 노트북을 이동할 때 어떤 전원 옵션을 사용하는 것이 좋을까요?\n가방에 넣고 이동할 때는 반드시 '완전 종료'나 '최대 절전 모드'를 사용하는 것이 좋습니다. 절전 모드를 사용하면 내부 발열이 발생할 수 있어요.\n\n{\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"FAQPage\",\n  \"mainEntity\": [\n    {\n      \"@type\": \"Question\",\n      \"name\": \"절전 모드를 사용하면 배터리가 빨리 닳는 이유는?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"절전 모드에서도 메모리를 유지하기 위해 일정량의 전력을 계속 사용하기 때문입니다. 특히 최신 윈도우 노트북은 네트워크 연결까지 유지하려고 하면서 배터리 소모가 더 심해질 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"절전 모드 대신 가장 좋은 대안은?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"PC를 완전히 종료하는 것이 가장 좋습니다. 하지만 작업 상태를 유지해야 한다면 '최대 절전 모드'를 사용하는 것이 절전 모드보다 훨씬 효과적입니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"절전 모드를 계속 사용하면 성능이 저하될 수 있나요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 절전 모드를 반복 사용하면 시스템 메모리가 점점 쌓이고, 백그라운드 프로세스가 제대로 종료되지 않아 PC가 느려질 수 있습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"빠른 시작(Fast Startup) 기능을 활성화하면 절전 모드가 필요 없을까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"네, 빠른 시작 기능을 켜면 부팅 속도가 절전 모드에서 깨어나는 것과 거의 비슷한 수준으로 빨라지므로 절전 모드를 굳이 사용할 필요가 없습니다.\"\n      }\n    },\n    {\n      \"@type\": \"Question\",\n      \"name\": \"노트북을 이동할 때 어떤 전원 옵션을 사용하는 것이 좋을까요?\",\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": \"가방에 넣고 이동할 때는 반드시 '완전 종료'나 '최대 절전 모드'를 사용하는 것이 좋습니다. 절전 모드를 사용하면 내부 발열이 발생할 수 있어요.\"\n      }\n    }\n  ]\n}",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483551",
    "pubDate": "Mon, 10 Mar 2025 15:43:41 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "윈도우 사용팁/윈도우11 사용법",
      "노트북 배터리 관리",
      "노트북 전원 관리",
      "배터리 절약",
      "빠른 시작",
      "시스템 종료",
      "윈도우 부팅 속도",
      "윈도우 절전 모드",
      "절전 모드 단점",
      "절전 모드 성능 저하",
      "최대 절전 모드"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "대출 이자 줄이는 3가지 방법",
    "description": "금리인하요구권부터 대환대출까지 개념 정리",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/loan-101-interest-rate",
    "pubDate": "Fri, 07 Mar 2025 01:03:00 GMT",
    "creator": "Unknown",
    "categories": []
  }
]