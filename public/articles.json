[
  {
    "id": 1,
    "imageUrl": "",
    "title": "The “10x” Commandments of Highly Effective Go",
    "description": "This is a guest post from John Arundel of Bitfield Consulting, a Go trainer and writer who runs a free newsletter for Go learners. His most recent book is The Deeper Love of Go. Ever wondered if there’s a software engineer, somewhere, who actually knows what they’re doing? Well, I finally found the one serene, […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/go/2025/10/16/the-10x-commandments-of-highly-effective-go/",
    "pubDate": "Thu, 16 Oct 2025 11:13:18 +0000",
    "creator": "Anna Protsenko",
    "categories": [
      "goland",
      "golang"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "OCP Summit 2025: The Open Future of Networking Hardware for AI",
    "description": "At Open Compute Project Summit (OCP) 2025, we’re sharing details about the direction of next-generation network fabrics for our AI training clusters. We’ve expanded our network hardware portfolio and are contributing new disaggregated network platforms to OCP. We look forward to continued collaboration with OCP to open designs for racks, servers, storage boxes, and motherboards [...]\nRead More...\nThe post OCP Summit 2025: The Open Future of Networking Hardware for AI appeared first on Engineering at Meta.",
    "reviews": [],
    "syllabus": [],
    "link": "https://engineering.fb.com/2025/10/13/data-infrastructure/ocp-summit-2025-the-open-future-of-networking-hardware-for-ai/",
    "pubDate": "Tue, 14 Oct 2025 00:00:20 +0000",
    "creator": "Unknown",
    "categories": [
      "Data Center Engineering",
      "Data Infrastructure",
      "DevInfra",
      "ML Applications",
      "Networking & Traffic",
      "Open Source"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "[MULTI] 부침 후 새로운 시작, 배틀필드 6",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2374",
    "pubDate": "Fri, 17 Oct 2025 16:39:28 +0900",
    "creator": "「RULIWEB」",
    "categories": [
      "리뷰"
    ]
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "5분 만에 앱 뚝딱! UI 캔버스로 그림을 앱으로 만드는 방법",
    "description": "코딩이나 복잡한 디자인 툴 없이도 나만의 앱을 만들 수 있다면 어떨까요? '지피티 팍의 UI 캔버스'와 함께라면 여러분의 아이디어를 그림처럼 그려 단 5분 만에 실제 작동하는 앱으로 만들 수 있습니다. AI 이미지 분석부터 자동 디자인 명세서 작성까지, 혁신적인 UI 캔버스의 모든 것을 경험해보세요!\n\n\n\n 머릿속에 번뜩이는 앱 아이디어가 있는데, 막상 이걸 현실로 옮기려면 어디서부터 시작해야 할지 막막했던 경험, 다들 한 번쯤 있으실 거예요. 복잡한 코딩 프롬프트는 물론이고, UI 디자인은 또 어떻게 해야 할지... 생각만 해도 머리가 지끈거리지 않나요? 포토샵 같은 전문 툴은 너무 어렵고, 그렇다고 모든 걸 직접 코딩하자니 시간이 너무 오래 걸리고요.\n\n그런데 만약, 그림을 그리듯 쉽게 앱 디자인을 하고, 그 디자인이 순식간에 실제 앱으로 변신한다면 어떨까요? 말만 들어도 솔직히 좀 놀랍죠? 제가 직접 개발한 '지피티 팍의 UI 캔버스'가 바로 그 놀라운 경험을 현실로 만들어 드립니다. 2025년, 더 이상 아이디어만 가지고 머뭇거리지 마세요. 이 툴 하나면 여러분의 상상력이 단 몇 분 만에 전문가 수준의 UI 디자인과 앱으로 탄생할 수 있습니다. 오늘은 이 강력한 도구의 모든 비밀을 여러분께 아낌없이 풀어놓을 예정이니, 스크롤 고정! 해주시면 좋겠네요!\n  UI 캔버스, 과연 어떤 도구일까요?\nUI 캔버스라는 이름, 참 직관적이죠? UI, 즉 사용자 인터페이스를 만드는 데 특화된 제가 직접 만든 전문적인 디자인 툴입니다. 마치 어릴 적 레고 블록을 조립하듯, 미리 만들어진 다양한 UI 컴포넌트들을 캔버스 위에 자유롭게 배치하면서 나만의 앱 화면을 직관적으로 디자인할 수 있어요. 버튼, 입력창, 이미지 박스는 물론이고, 조금 더 복잡한 차트까지 없는 게 없답니다. 그냥 마우스로 끌어다 놓기만 하면 끝이에요!\n여기서 제가 정말 중요하다고 생각하는 점은, 이 툴이 단순히 '보이는 대로 그리는' 것에 그치지 않는다는 거예요. 각각의 컴포넌트에는 실제 앱처럼 동작할 수 있는 고유한 속성과 데이터가 담겨있습니다. 이것은 곧, 여러분이 만드는 디자인이 단순한 그림이 아니라, 실제 개발로 바로 이어질 수 있는 '살아있는 설계도'가 된다는 의미예요. 기획자와 디자이너, 개발자 사이에 늘 존재했던 그 복잡한 소통 과정을 획기적으로 줄여주는, 그야말로 강력한 다리 역할을 해주는 거죠. 제가 겪어본 바로는, 이런 부분에서 오는 효율성이 정말 어마어마합니다.\n✨ UI 캔버스의 핵심 기능: 두 가지 마법\nUI 캔버스에는 여러분의 앱 개발 경험을 완전히 바꿔놓을 두 가지 핵심 마법 같은 기능이 숨어있어요. 이 기능들 덕분에 '5분 만에 앱 뚝딱'이라는 말이 절대 과장이 아니게 됩니다.\n1. AI 이미지 분석: 캡처 이미지를 살아있는 앱으로\n길을 걷다 발견한 멋진 앱 디자인, 혹은 웹사이트에서 본 인상 깊은 UI. 그저 한 장의 스크린샷이나 이미지가 순식간에 실제 작동하는 UI 컴포넌트로 변신하는 현실을 상상해 보셨나요? UI 캔버스의 첫 번째 마법이 바로 이겁니다. 캡처 이미지를 업로드하기만 하면, 제가 제미나이 AI와 협력하여 헤더, 버튼, 입력창 등 각 요소의 기능과 관계를 정밀하게 분석해요.\n그리고 몇 초 만에! 믿기 어렵겠지만, 몇 초 만에 작동하는 UI 컴포넌트로 화면을 완벽하게 재구성해 줍니다. 이건 단순히 이미지를 베끼는 것을 넘어섭니다. AI가 디자인의 의도와 구조를 파악해서 마치 리버스 엔지니어링을 하는 것처럼, 새로운 창조의 과정을 만들어낸다고 보시면 돼요. 솔직히 저도 처음 이 기능을 구현했을 때 정말 놀랐답니다.\n\n\n  팁: 영감을 얻은 이미지가 있다면 주저 말고 업로드해보세요! 아이디어 스케치나 경쟁 앱 분석에도 아주 유용할 거예요.\n2. 자동 디자인 명세서: 문서 작업은 이제 AI에게!\n개발 과정에서 가장 지루하고 번거로운 작업 중 하나가 바로 디자인 명세서 작성일 거예요. 일일이 스크린샷 붙여넣고, 각 컴포넌트의 기능과 데이터를 설명하고... 생각만 해도 한숨이 나오죠? UI 캔버스의 두 번째 천재성이 바로 이 부분에 있습니다. 'AI로 내용 채우기' 버튼 하나만 누르면, 여러분의 디자인을 기반으로 완벽한 문서가 뚝딱 완성됩니다!\nAI는 여러분이 만든 디자인을 심층적으로 분석하고, 이 화면이 어떤 목적으로 만들어졌는지 추론합니다. 그래서 앱 이름, 핵심 기능, 타겟 사용자, 심지어 각 컴포넌트의 상세한 동작 방식까지 자동으로 작성해 줘요. AI가 여러분의 디자인에 설득력 있는 스토리를 입혀주는 최고의 스토리텔러가 되어줄 거예요. 기획자와 개발자 간의 소통 오류를 줄이는 데 정말 결정적인 역할을 합니다.\n  UI 캔버스는 누구를 위한 도구일까요?\nUI 캔버스가 특정 전문가만을 위한 도구라고 생각하신다면 오산입니다! 사실 저도 이 툴을 만들면서 '누구나 쉽게'라는 철학을 가장 중요하게 생각했어요. 그래서 복잡한 코딩이나 디자인 지식 없이도 여러분의 아이디어를 현실로 만들고 싶은 모든 분들을 위한 혁신적인 도구라고 할 수 있죠.\n어떤 분들에게 특히 유용할까요? 제 생각에는요,\n아이디어를 빠르게 시각화하고 싶은 기획자: 복잡한 와이어프레임 툴이나 파워포인트 대신, UI 캔버스에서 직접 앱의 흐름과 화면을 구성하며 기획 의도를 명확하게 전달할 수 있어요.\n효율적인 구조 소통을 원하는 개발자: 디자이너와의 협업 과정에서 불필요한 오해를 줄이고, 디자인 명세서를 통해 앱의 구조를 한눈에 파악하며 개발 속도를 높일 수 있습니다.\n복잡한 UI 없이도 멋진 앱 화면을 만들고 싶은 AI 앱 입문자: 코딩은 물론 디자인도 막막한 AI 앱 입문자들에게 UI 캔버스는 훌륭한 첫걸음이 될 거예요. 직관적인 인터페이스로 전문가 같은 결과물을 만들 수 있죠.\n⚠️ 주의: UI 캔버스는 '마법 지팡이'이지만, 앱 개발의 기본 개념 이해는 여전히 중요해요. 하지만 시작은 훨씬 쉽다는 사실!\n  UI 캔버스 탐험: 메인 화면과 주요 기능\n자, 이제 'UI 캔버스'의 메인 화면으로 함께 떠나볼까요? 처음 보시면 \"와, 생각보다 직관적인데?\"라는 말이 절로 나오실 거예요. 크게 세 가지 영역으로 나뉘어 있습니다.\n\n\n\n왼쪽 사이드바: '컴포넌트' 탭을 누르면 버튼, 입력창, 텍스트 등 모든 UI 요소들이 모여있는 툴박스가 나타납니다. 여기서 필요한 요소를 캔버스로 끌어다 놓기만 하면 돼요. '레이어' 탭에서는 포토샵처럼 컴포넌트들의 순서를 쉽게 관리할 수 있죠.\n중앙 캔버스: 여러분의 아이디어가 현실이 될 넓은 무대입니다. 이곳에서 마음껏 UI를 디자인하고 배치하세요.\n오른쪽 속성 패널: 캔버스에서 특정 컴포넌트를 선택하면, 이 패널에서 해당 요소의 색상, 크기, 텍스트 내용 등 아주 세세한 부분까지 모든 속성을 컨트롤할 수 있습니다.\n간단한 조작법을 좀 더 자세히 알아볼까요? 예를 들어, '컴포넌트' 탭에서 버튼을 하나 추가해 볼게요. 그러면 레이어 탭 최상단에 방금 생성한 버튼이 바로 표시됩니다. 이 버튼이 선택된 상태에서 오른쪽 속성 패널에서 버튼의 종류를 바꾸거나, 색상을 지정하고, 텍스트 내용을 수정하는 등 상세 정보를 입력할 수 있어요. 마우스 오른쪽 버튼을 클릭하면 레이어 순서를 변경하거나 복제, 삭제하는 메뉴도 나타나죠.\n특히, 속성 패널의 '설명' 부분에 이 버튼을 클릭했을 때 어떤 동작이 이루어지는지 미리 입력해두면, 나중에 앱을 만들 때 AI가 이를 참고하여 더 정확하게 앱 기능을 구현해 줍니다. 정말 편리하겠죠?\n화면에 컴포넌트가 많아지면 관리하기 어려울 때가 있어요. 이때는 용도별로 컴포넌트들을 그룹으로 묶어두면 아주 편리합니다. 마우스로 화면에 적당한 범위를 지정하고 마우스 오른쪽 메뉴에서 '그룹'을 선택하면 끝! 만들어진 그룹은 필요에 따라 다시 해제할 수도 있습니다. 제 경험상 이런 그룹화 기능이 작업 효율을 크게 높여주더라고요.\n  실전 연습: 나만의 음악 플레이어 만들기 (feat. 5분 뚝딱)\n백문이 불여일견! 제가 아무리 설명해도 직접 해보는 것만큼 좋은 건 없죠. 저와 함께 UI 캔버스를 활용해서 간단한 '음악 플레이어' 앱을 뚝딱 만들어볼까요? 솔직히 5분도 채 안 걸릴 겁니다. 잘 따라와 주세요!\n\n\n1단계: 기본 컨테이너 설정\n먼저, 앱 전체의 외곽을 정의하고 영역을 구분하는 '컨테이너'를 하나 그려줍니다. 컨테이너를 생성한 후에는 다른 요소들이 영향을 주지 않도록 잠금 설정을 하는 걸 추천해요. 이게 작은 팁인데, 나중에 실수하는 걸 막아줍니다.\n2단계: 곡 목록 및 불러오기 버튼 추가\n그다음, 음악 파일 목록을 보여줄 '목록 상자' 컴포넌트를 추가합니다. 속성 패널의 앱 설명에는 '음악 파일 목록 관리'라고 입력해 주세요. 이어서 파일 탐색기를 실행하고 곡을 불러오기 위한 버튼을 추가합니다. 버튼 텍스트는 \"불러오기\"로, 앱 설명에는 '탐색기를 열어 곡 불러오기'라고 상세하게 적어주면 AI가 더 잘 이해하겠죠?\n3단계: 오디오 스펙트럼 및 앱 제목\n음악 플레이어라면 역시 시각적 효과가 중요하죠? 곡이 재생될 때 멋진 비주얼을 위해 '오디오 스펙트럼'을 추가해 봅시다. 만약 컴포넌트 목록에 바로 보이지 않는다면 '기타'를 선택하고 추가하세요. 속성에는 '오디오 스펙트럼 막대형'이라고 입력하면 됩니다. 스펙트럼 위에는 텍스트 컴포넌트를 추가해서 앱의 제목을 \"지피티 팍 플레이어\" 같은 식으로 멋지게 설정해 주세요.\n4단계: 재생 제어 버튼 추가\n이제 음악 재생에 필수적인 버튼들을 추가할 차례입니다. 버튼을 하나 추가한 다음, 2개 더 복제해서 '재생', '이전 곡', '다음 곡' 버튼을 각각 만들고 배치합니다. 각 버튼의 앱 설명에는 해당 버튼이 어떤 기능을 하는지 명확하게 입력하는 것이 중요해요.\n5단계: 디자인 명세서 작성 및 저장\n마지막으로, 이 앱의 디자인 명세서를 작성합니다. 앱의 이름, 구체적인 동작 설명을 입력해야 하는데요, 여기서 핵심은 간단한 설명만 입력한 후 'AI로 내용 채우기' 버튼을 클릭하는 겁니다! 그러면 이전에 여러분이 작업한 디자인을 기반으로 AI가 명세서를 대신 작성해 주니 정말 편리하죠? 작업이 완료되면 오른쪽 상단에 있는 '컴포넌트'와 '디자인 명세 JSON' 버튼을 클릭해서 작업 파일을 저장하세요. 필요하다면 이미지로도 저장이 가능하니 참고해두시면 좋습니다.\n이렇게 디자인한 JSON 파일을 앱 빌더로 가져가서 \"이 파일을 기반으로 한글 앱을 만들어\"라고 입력하면... 놀랍게도 바로 여러분만의 음악 플레이어가 완성됩니다! 정말이지 감탄사가 절로 나오는 경험이었어요.\n \n[GPT PARK MUSIC PLAYER]\n\n \n로그인 - Google 계정\n이메일 또는 휴대전화\naccounts.google.com\n\n \n ️ 이미지 한 장으로 할 일 관리 앱 만들기\n지금부터가 진짜 마법입니다. 혹시 잘 만든 다른 앱 디자인을 참고해서 빠르게 프로토타입을 만들고 싶었던 적 없으셨나요? 'UI 캔버스'는 이미지 한 장만 있으면 AI가 UI를 자동으로 분석하고 생성해줍니다!\n\n\n예를 들어, 제가 만든 '할 일 관리 앱'이 있습니다. 이 앱의 스크린샷 한 장만 가지고 UI 디자인을 해볼게요. 'UI 캔버스'에서 캡처한 이미지를 불러오면 바로 분석을 진행합니다. 잠시만 기다리면...\n짜잔! 이렇게 사용자가 직접 디자인하지 않아도 이미지만 분석해서 디자인 초안이 뚝딱 만들어집니다. 혹시 이미지 분석 과정에서 약간 깨져 보이거나 완벽하지 않은 부분이 있더라도 너무 걱정하지 마세요. 왜냐하면 컴포넌트별 속성과 디자인 명세서를 함께 생성해주기 때문입니다. 우리는 여기서 디자인 명세서나 컴포넌트에 수정할 부분이 있는지, 예를 들어 '생산성 부스터 앱'이라고 되어있던 것을 '할 일 관리 앱'으로 수정하고 'AI로 내용 채우기'를 다시 클릭해서 최적화만 해주면 됩니다.\n확인이 끝나면 우측 상단의 두 가지 JSON 다운로드 버튼을 클릭하여 파일을 저장합니다. 이번에도 앱 빌더로 가서 \"첨부파일을 기반으로 한글 앱을 생성해\"라고 입력하고, 화면 캡처본을 포함해서 JSON 파일 두 개를 함께 업로드합니다. 그러면 디자인 없이 이미지만 업로드해서 만든 놀라운 결과물이 눈앞에 펼쳐질 거예요. 여기서도 우리는 완성된 앱을 테스트하고 필요한 부분을 미세 조정하기만 하면 됩니다. 정말이지 편리함의 극치라고 생각해요!\n \n[오늘의 할 일 & 성과앱]\n\n \n로그인 - Google 계정\n이메일 또는 휴대전화\naccounts.google.com\n\n \n  AI가 그려준 디자인으로 앱 만들기\n마지막으로 재미있는 테스트를 하나 더 해볼까요? 처음에 만들어본 음악 플레이어를 이번에는 완전히 다른 방법으로 만들어 보겠습니다. 이번엔 제가 직접 UI를 그리는 대신, 제미나이 AI에게 \"음악 파일 목록과 비주얼 스펙트럼이 인상적인 데스크탑용 음악 플레이어 '지피티 팍 PLAYER' 정면 UI를 그려줘.\"라고 입력해서 이미지를 생성합니다.\n생성된 이미지를 먼저 저장하고, 다시 'UI 캔버스'에서 이미지를 불러오면 바로 AI 분석이 진행되면서 디자인 초안이 생성됩니다. 이후의 앱 제작 과정은 앞서 보여드린 '할 일 관리 앱'을 만들 때와 동일합니다. AI가 그려준 그림 한 장으로도 이렇게 멋진 앱을 만들 수 있다니, 정말 놀랍지 않나요? 복잡한 프롬프트 고민도, UI 디자인 걱정도 필요 없이 'UI 캔버스' 하나면 앱을 쉽게 만들 수 있다는 사실, 꼭 기억해 주세요!\n  UI 캔버스 vs. 기존 앱 개발 방식\nUI 캔버스가 왜 혁신적인지, 기존의 앱 개발 방식과 비교하면 더욱 명확하게 이해하실 수 있을 거예요. 제가 직접 경험하며 느낀 가장 큰 차이점들을 표로 정리해봤습니다.\n구분\nUI 캔버스 워크플로우\n기존 앱 개발 워크플로우\n\n\n\n\nUI 디자인\n그림처럼 드래그 앤 드롭, AI 이미지 분석으로 자동 생성.\n포토샵, Figma 등 전문 툴 사용, 숙련된 디자인 지식 요구.\n\n\n개발 연동\n디자인 명세서 및 컴포넌트 JSON으로 앱 빌더와 즉시 연동.\n디자인 시안을 보고 개발자가 직접 코딩, 많은 소통과 수정 필요.\n\n\n문서화\nAI가 디자인을 분석하여 앱 이름, 기능 등 자동 명세서 생성.\n기획자/디자이너가 수동으로 작성, 시간과 노력 소모 큼.\n\n\n필요 역량\n기본적인 아이디어와 UI 캔버스 활용법만으로 충분.\n디자인 툴 숙련도, 코딩 지식, 개발 프로세스 이해.\n\n\n\n표를 보시면 아시겠지만, UI 캔버스는 특히 '시간 단축'과 '진입 장벽 완화'라는 두 가지 면에서 압도적인 장점을 가지고 있습니다. 제 생각엔 이 부분이 가장 매력적인 점이라고 봐요.\n\n[GPT PARK의 UI 캔버스 Pro]\n\n \n로그인 - Google 계정\n이메일 또는 휴대전화\naccounts.google.com\n\n \n  핵심 요약\n1. 그림처럼 쉬운 UI 디자인: 드래그 앤 드롭 방식으로 컴포넌트 배치, 직관적인 UI 제작.\n2. AI 이미지 분석: 캡처 이미지 한 장으로 실제 작동하는 UI 컴포넌트 자동 생성.\n3. 자동 디자인 명세서: AI가 앱 이름, 기능, 타겟 사용자까지 문서로 자동 생성하여 소통 효율 증대.\n4. 누구나 앱 개발 가능: 기획자, 개발자, AI 앱 입문자 모두를 위한 혁신적인 도구.\n이 모든 기능이 2025년, 여러분의 앱 개발 경험을 완전히 새롭게 정의할 것입니다.\n❓ 자주 묻는 질문 (FAQ)\nQ1: UI 캔버스 사용 시 코딩 지식이 필수적인가요?\nA1: 아니요, 전혀 그렇지 않습니다. UI 캔버스는 코딩 지식이 없는 분들도 그림을 그리듯이 쉽게 앱 UI를 디자인하고, AI의 도움을 받아 실제 앱으로 만들 수 있도록 설계되었습니다. 드래그 앤 드롭 방식으로 컴포넌트를 배치하고 속성만 설정하면 되기 때문에 진입 장벽이 매우 낮아요.\nQ2: UI 캔버스로 만든 디자인은 실제로 어떻게 앱이 되나요?\nA2: UI 캔버스에서 완성된 디자인은 JSON 파일 형태로 저장됩니다. 이 파일을 '앱 빌더'와 같은 플랫폼에 업로드하고 간단한 명령을 내리면, AI가 디자인 명세서와 컴포넌트 속성 정보를 기반으로 실제 작동하는 앱을 자동으로 생성해 줍니다. 정말 신기하죠?\nQ3: 이미지를 분석해서 앱 디자인을 만드는 기능은 어떤 AI 기술을 활용하나요?\nA3: UI 캔버스는 구글의 제미나이(Gemini) AI를 활용하여 이미지를 분석합니다. 업로드된 이미지에서 헤더, 버튼, 입력창 등 UI 요소를 인식하고, 각 요소의 기능과 상호 관계를 파악하여 UI 컴포넌트로 재구성하는 방식으로 작동해요. 이 기술 덕분에 여러분의 아이디어가 더욱 빠르게 현실이 될 수 있습니다.\nQ4: 디자인 명세서 자동 생성 기능은 얼마나 정확한가요?\nA4: AI 기반의 자동 디자인 명세서 기능은 매우 높은 정확도를 자랑합니다. AI는 여러분이 캔버스에 배치한 컴포넌트들의 특성과 입력된 속성 정보, 그리고 전반적인 UI 구조를 분석하여 앱의 목적, 핵심 기능, 타겟 사용자, 각 컴포넌트의 상세 동작까지 추론하여 문서를 작성합니다. 물론, 최종적으로 사용자 확인을 거쳐 미세 조정하는 것을 권장합니다.\n지금까지 보셨듯이, '지피티 팍의 UI 캔버스'는 여러분이 디자인 작업 시 설정한 동작과 디자인 명세서의 내용만으로 상상하시는 모든 앱들을 현실로 만들어 줍니다. 단순한 그림이 아니라, AI 이미지 분석을 통해 캡처 이미지 한 장을 실제 작동하는 UI 컴포넌트로 완벽하게 재구성하고, 자동 디자인 명세서로 기획자와 개발자 간의 소통을 획기적으로 줄여줘요. 정말이지, 이 툴이 가져올 변화는 대단하다고 생각합니다.\n여러분의 머릿속에만 있던 그 멋진 아이디어를 더 이상 가두지 마세요. 2025년, 'UI 캔버스'와 함께라면 누구든지 자신만의 앱을 만들고 세상에 선보일 수 있습니다. 지금 바로 'UI 캔버스'를 사용해서 여러분의 앱을 현실로 만들어보는 건 어떨까요? 분명히 새로운 경험을 하게 되실 거예요!",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483666",
    "pubDate": "Sun, 12 Oct 2025 13:57:35 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "AI, 미래기술/AI 챗봇 및 지침 무료 배포",
      "AI 앱 디자인",
      "AI 이미지 분석 앱",
      "UI 캔버스",
      "UI 컴포넌트",
      "노코드 앱",
      "디자인 명세서 자동화",
      "모바일 앱 제작",
      "앱 개발",
      "앱 프로토타이핑",
      "지피티 팍"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "노트북 배터리 수명, 당신도 모르게 갉아먹는 치명적인 습관 5가지",
    "description": "휴대성의 상징인 노트북, 그런데 배터리 때문에 늘 충전기에 묶여 있다면 정말 아쉽죠. 2025년 최신 정보에 따르면, 우리가 무심코 하는 작은 습관들이 노트북 배터리 수명을 야금야금 갉아먹는 주범이라고 해요. 배터리는 소모품이지만, 올바른 관리 습관으로 그 수명을 획기적으로 늘릴 수 있답니다. 오늘 이 글에서는 배터리 수명을 단축시키는 치명적인 습관 5가지와 함께, 간단하지만 효과적인 해결책들을 자세히 알려드릴게요. 이제는 배터리 걱정 없이 노트북을 자유롭게 사용해 보세요!\n첫 번째 습관:   항상 충전기에 꽂아두기\n\n\n\n사무실이나 집에서 노트북을 주로 사용하는 분들은 늘 충전기를 꽂아두는 경우가 많을 거예요. 편리하니까요! 그런데 이 사소한 습관이 리튬 이온 배터리의 수명에는 의외로 치명적일 수 있습니다. 리튬 이온 배터리는 충전과 방전을 적절히 반복하며 활성 상태를 유지할 때 가장 건강하다고 해요. 계속 100% 충전 상태로 유지하면 배터리 내부의 화학 반응이 불필요하게 가속화되어 수명이 단축될 수 있습니다.\n스마트폰처럼 노트북도 80% 정도까지만 충전하고, 20%~30% 이하로 떨어지면 다시 충전하는 것이 배터리 건강에 훨씬 이롭습니다. 윈도우 자체에는 충전 상한을 설정하는 기능이 없지만, 다행히 많은 노트북 제조사(삼성, LG, HP, Dell 등)에서 배터리 보호 기능을 제공하고 있어요. 저 역시 제 노트북의 전용 소프트웨어를 통해 충전 상한을 80%로 설정해두고 사용하고 있답니다. 이 기능은 배터리 과충전을 막아줘서 수명 연장에 정말 큰 도움이 돼요.\n  팁: 여러분의 노트북 제조사 웹사이트나 제어판 설정에서 '배터리 관리' 또는 '전원 관리' 소프트웨어가 있는지 확인해보세요. 대부분의 경우 배터리 충전 임계값을 설정할 수 있는 옵션을 제공합니다.\n두 번째 습관:   배터리를 0%까지 완전히 방전시키기\n충전기에 계속 꽂아두는 것만큼이나 좋지 않은 습관이 바로 배터리를 0%까지 완전히 방전시키는 것입니다. '완전 방전'은 배터리에게 가장 큰 스트레스를 주는 행위 중 하나라고 생각해요. 0%까지 내려가면 배터리 내부의 전해액에 좋지 않은 변화가 생기면서, 충전 용량이 점차 줄어들고 결국에는 배터리 자체의 고장을 유발할 수도 있습니다.\n제가 겪어본 바로는, 배터리를 20%~30% 정도 남았을 때 충전하기 시작하는 것이 가장 이상적이에요. 그리고 충전은 80%까지만 하는 '20-80 규칙'을 지키는 것이 리튬 이온 배터리의 수명을 최대한으로 늘리는 비결입니다. 이 범위 안에서 배터리를 관리하면 내부 이온들이 안정적으로 작동하여 배터리 수명 저하를 최소화할 수 있습니다. 마치 사람도 너무 배고프게 두거나 너무 배부르게 두지 않는 것과 비슷하죠!\n\n\n세 번째 습관:   노트북을 뜨겁게 방치하기\n노트북이 가끔 뜨거워지는 건 자연스러운 현상이지만, 장시간 높은 온도에 노출되는 것은 배터리에게 정말 최악의 환경을 제공합니다. 고열은 배터리 내부의 화학 반응을 가속화시켜 배터리 열화를 빠르게 진행시키는 주범이죠. 배터리뿐만 아니라 노트북의 다른 중요한 부품들에도 좋지 않은 영향을 미치고요.\n무엇이 노트북을 뜨겁게 만들까요?\n고사양 작업: 고사양 게임, 긴 영상 편집, 여러 개의 리소스 소모가 큰 앱을 동시에 실행하는 것은 CPU와 GPU에 부담을 주어 발열을 일으킵니다.\n부적절한 사용 환경: 침대 이불, 소파, 베개 같은 푹신한 표면에 노트북을 올려놓고 사용하면 통풍구를 막아 열이 갇히게 됩니다. 이건 정말 많은 분들이 놓치기 쉬운 습관이에요.\n먼지 쌓인 통풍구: 노트북 내부의 통풍구에 먼지가 쌓이면 공기 흐름을 방해하여 냉각 효율을 떨어뜨립니다.\n과열은 단순히 배터리 수명만 줄이는 것이 아닙니다. 노트북 성능 저하, 팬 소음 증가, 그리고 심한 경우 내부 부품 손상까지 일으킬 수 있으니 정말 주의해야 합니다. 제 경우에도 예전에 침대에서 노트북을 자주 쓰다가 팬 소음이 심해지고 발열이 심해져서 결국 쿨링 패드를 구매했었어요. 확실히 효과가 있더라고요.\n\n\n  해결책:\n\n노트북이 뜨거워지면 잠시 식혀주는 시간을 가지세요.\n항상 단단하고 평평한 표면에서 사용하여 통풍이 원활하게 이루어지도록 합니다.\n고사양 작업을 자주 한다면 노트북 쿨링 패드를 사용하는 것이 현명한 투자입니다.\n정기적으로 에어스프레이 등으로 통풍구와 팬 주변의 먼지를 제거해주세요.\n네 번째 습관: ⚡ 정품이 아닌 충전기 사용하기\n스마트폰과는 다르게 대부분의 노트북은 구매 시 전용 충전기가 함께 제공됩니다. 그런데 만약 충전기를 잃어버리거나 고장 났을 때, 아무 충전기나 주워다 쓰는 경우가 생각보다 많더라고요. 단순히 포트만 맞으면 괜찮다고 생각할 수 있지만, 이는 배터리뿐만 아니라 노트북 전체에 위험을 초래할 수 있는 아주 중요한 문제입니다.\n노트북 모델마다 필요한 전력량(W)이 다릅니다. 이 전력 요구사항을 충족시키지 못하는 충전기를 사용하면 노트북이 충분한 전력을 공급받지 못해 시스템이 과부하될 수 있고, 반대로 너무 높은 전력을 공급하는 충전기는 과열을 유발하여 배터리에 스트레스를 줍니다. 둘 다 배터리 수명을 단축시키고, 심지어는 노트북의 내부 부품까지 손상시킬 수 있는 잠재적 위험을 가지고 있습니다.\n제 생각에는 항상 노트북과 함께 제공된 정품 충전기를 사용하는 것이 가장 안전합니다. 만약 새 충전기가 필요하다면, 반드시 노트북 제조사의 공식 충전기나 해당 모델 전용으로 검증된 신뢰할 수 있는 브랜드의 제품을 구매해야 해요. 값싼 호환 충전기는 당장은 문제가 없어 보여도 장기적으로는 더 큰 비용을 초래할 수 있다는 점을 꼭 기억해주세요.\n⚠️ 주의: 규격에 맞지 않는 저품질 충전기는 화재나 감전 위험까지 있을 수 있습니다. 안전을 위해서라도 정품 또는 검증된 제품을 사용하세요.\n다섯 번째 습관:   배터리가 방전된 상태로 장기간 보관하기\n노트북을 며칠 혹은 몇 주 동안 사용하지 않고 보관할 계획이라면, 배터리를 완전히 방전된 상태로 두는 것이 가장 좋지 않습니다. 리튬 이온 배터리가 0% 상태로 너무 오래 방치되면 '과방전 상태(deep discharge state)'에 빠질 수 있습니다. 이 상태가 되면 배터리가 아예 충전 능력을 잃어버리거나, 심지어 재활성화가 불가능해질 수도 있어요. 경험상 한 번 과방전된 배터리는 원래 성능으로 돌아오기 정말 어렵습니다.\n노트북을 장기간 보관할 때 가장 건강한 방법은 배터리를 부분적으로 충전한 상태로 두는 것입니다. 일반적으로 50% 정도의 충전율이 가장 '이상적인 보관 상태'로 여겨집니다. 이 정도 충전 상태는 배터리가 안정적으로 유지될 수 있는 충분한 전력을 가지고 있으면서도, 너무 높거나 낮은 극단적인 상태로 인한 스트레스를 피할 수 있게 해줍니다.\n그러니 여행을 가거나 당분간 노트북을 사용하지 않을 예정이라면, 떠나기 전에 꼭 배터리를\n\n\n50% 수준으로 맞춰두는 습관을 들이세요. 이 작은 노력이 여러분의 배터리 수명을 놀랍도록 연장시켜 줄 겁니다.\n  핵심 요약\n1. 항상 충전하지 마세요: 80%까지만 충전하고, 배터리 보호 기능을 활용하세요.\n2. 완전 방전은 피하세요: 20~30%에서 충전을 시작하는 것이 좋습니다.\n3. 과열을 막으세요: 평평한 곳에서 사용하고, 필요하다면 쿨링 패드를 사용하세요.\n4. 정품 충전기를 사용하세요: 규격에 맞는 충전기는 배터리 건강과 안전의 필수입니다.\n이 작은 습관들이 여러분의 노트북 배터리 수명을 2025년에도 최상으로 유지하는 비결이 될 거예요!\n❓ 자주 묻는 질문 (FAQ)\nQ1: 노트북 배터리 수명은 평균적으로 얼마나 되나요?\nA1: 일반적으로 리튬 이온 배터리는 약 300~500회 충전 사이클 후에 초기 용량의 80% 수준으로 감소하기 시작합니다. 사용 습관에 따라 다르지만, 보통 2~4년 정도가 평균적인 수명으로 볼 수 있습니다. 위에 언급된 습관들을 잘 지키면 더 오래 건강하게 사용할 수 있어요.\nQ2: 배터리 잔량 표기가 갑자기 이상해졌는데 어떻게 해야 하나요?\nA2: 배터리 잔량 표기가 부정확해지는 현상은 흔히 '배터리 캘리브레이션'이 필요하다는 신호일 수 있습니다. 노트북 제조사에서 제공하는 배터리 관리 프로그램을 사용하거나, 완전 충전(100%) 후 노트북이 꺼질 때까지 완전 방전(0%)을 한두 번 반복하여 배터리 컨트롤러를 재조정해 볼 수 있습니다. 단, 이 방법은 배터리에 스트레스를 줄 수 있으므로 너무 자주 하지는 마세요.\nQ3: 노트북을 장시간 사용하지 않을 때 배터리를 분리해야 하나요?\nA3: 최신 노트북의 리튬 이온 배터리는 보통 분리가 불가능하거나, 분리할 필요가 없습니다. 대부분의 노트북은 배터리 보호 회로가 내장되어 있어 과충전이나 과방전을 자동으로 방지해주기 때문입니다. 다만, 보관 시에는 위에서 언급했듯이 50% 정도 충전 상태를 유지하는 것이 좋습니다. 배터리 분리가 가능한 구형 노트북이라면 50% 충전 후 분리하여 서늘한 곳에 보관하는 것이 좋습니다.\n오늘 알려드린 5가지 습관만 고쳐도 여러분의 노트북 배터리는 훨씬 더 오래, 건강하게 함께할 수 있을 거예요!",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483667",
    "pubDate": "Thu, 16 Oct 2025 19:36:21 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "윈도우 사용팁/하드웨어",
      "2025 노트북 가이드",
      "노트북 과열 방지",
      "노트북 배터리 관리",
      "노트북 배터리 수명",
      "노트북 배터리 절약",
      "노트북 보관법",
      "노트북 충전 습관",
      "노트북 충전기 선택",
      "리튬 이온 배터리",
      "배터리 성능 저하"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "Splunk의 sourcetype 변경",
    "description": "다시 인덱싱을 하지 않는 한 저장된 인덱스의 소스타입은 바꿀 수 없다.\n\n\n\n\n이때 collect란 명령어를 사용해볼 수 있다. mysql의 create target_table select * from source_table과 유사. 인덱스는 당연히 미리 만들어 놔야 한다.\n\n\n\n\n\n검색 결과를 특정 경로에 임시 파일로 저장한 후, 새로운 인덱스에 저장해줌.  \n\n\n\n\n\n소스타입 변경도 가능.\n\n\n\n\n가공 결과를 별도 저장하고 싶을 때 유용할 듯.",
    "reviews": [],
    "syllabus": [],
    "link": "https://kangmyounghun.blogspot.com/2025/10/splunk-sourcetype.html",
    "pubDate": "2025-10-14T11:43:00.004Z",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "아버지 쇼핑 - 독일 드르투 면도기",
    "description": "저는 참고로 인포벨 싫어합니다. \n싫다는 정도로 표현할 수 없고 증오에 가깝습니다.\n먹는거는 절대 비추구요 쿠팡에서 비슷한거 사면 절반가격에 살 수 있습니다.\n중국산도 찾아보면 비슷한거 반값에 팝니다. 괜히 2개 줘서 가격을 올리는 놈들입니다.\n여러번 쇼핑 호구 당하신 아버지는 이번에도 인포벨껄 사달라고 하십니다.\n\n이번엔 면도기군요 \n먹을꺼도 아니고\n중국산도 아니라 \n구입 진행합니다.\n \n장점으로 내세우는것\n안전 - 다른걸 써도 피본적이 없어서 전혀 공감은 안갑니다.\n충전된다. - 미친 인포벨 이걸 장점이라고\n물로 씻는다 - 이것도 장점인가\n다용도 \n코털도 깎는다.\n머리도 깎는다.\n이거는 좋습니다. 따로 사면 만원씩 드는거라\n \n \n \n제가 생각하는 자점\n싸다 - 39,900 원\n다용도다\n \n과장 광고는 계속 의심해야합니다.\n독일꺼 엄청 강조하는데 \n중국에서 제조했을 것으로 의심됩니다.\n이상할 정도로 많이 강조합니다.\n \n인포벨의 과장광고는 노인들을 잘 홀리니 주의 하시구요\n사달라고 하면 안된다고 말해봐야 소용없으니 본인 돈으로 사게 만드시면\n몇번 사보다 호구 털린걸 알게되서 안사는 쪽으로 유도해야합니다.\n \n우리들도 쇼핑의 즐거움은 알기 때문에 못사게 말리는건 역효과가 납니다.\n싼거 있으면 싼거 알려주고 사준다음 인터넷에 이런 저런 단점들을 알려주면서\n교육 시켜야합니다.\n \n \n \n \n중국산 보다 광고자체는 슴슴합니다.\n인포벨 영상: https://www.youtube.com/watch?v=IwBL7y1MS84\n\n\n\n \n \n쿠팡 스샷",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1432",
    "pubDate": "Thu, 16 Oct 2025 16:42:11 +0900",
    "creator": "SIDNFT",
    "categories": [
      "유튜브",
      "과장광고",
      "쇼핑",
      "인포벨"
    ]
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "Design for Sustainability: New Design Principles for Reducing IT Hardware Emissions",
    "description": "We’re presenting Design for Sustainability,  a set of technical design principles for new designs of IT hardware to reduce emissions and cost through reuse, extending useful life, and optimizing design. At Meta, we’ve been able to significantly reduce the carbon footprint of our data centers by integrating several design strategies such as modularity, reuse, retrofitting, [...]\nRead More...\nThe post Design for Sustainability: New Design Principles for Reducing IT Hardware Emissions appeared first on Engineering at Meta.",
    "reviews": [],
    "syllabus": [],
    "link": "https://engineering.fb.com/2025/10/14/data-center-engineering/design-for-sustainability-new-design-principles-for-reducing-it-hardware-emissions/",
    "pubDate": "Tue, 14 Oct 2025 20:40:20 +0000",
    "creator": "Unknown",
    "categories": [
      "Data Center Engineering"
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "Koog 0.5.0 Is Out: Smarter Tools, Persistent Agents, and Simplified Strategy Design",
    "description": "We recently released Koog 0.5.0, introducing full Agent2Agent (A2A) protocol support, which makes it easier than ever to build systems of interconnected AI agents in Kotlin. But A2A is just the beginning. Koog 0.5.0 brings a host of improvements that make agents more persistent, tools smarter, and strategy design more intuitive. Let’s dive into the […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/ai/2025/10/koog-0-5-0-is-out-smarter-tools-persistent-agents-and-simplified-strategy-design/",
    "pubDate": "Fri, 17 Oct 2025 07:19:48 +0000",
    "creator": "Daniela Bentrup",
    "categories": [
      "news",
      "releases",
      "ai",
      "ai-agents"
    ]
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "Zeuslab 터치 모니터의 터치 범위 설정",
    "description": "Zeuslab의 P16KT 같은 터치 모니터를 사용해서 서브 모니터로 연결하면 터치하는 위치가 이상해지거나 혹은 첫번째 모니터 화면이 터치되는 경우가 있다. 이는 터치 위치가 전체 모니터 크기(2개의 모니터 공간의 합)로 계산되어 일어나는 문제이다. 따라서 특정 모니터 좌표만 터치되도록 조정해주면 된다.\n \n1. 준비 작업 : event 장치명 확인 (root 권한으로)\n우선 Zeuslab의 P16KT 터치 모니터의 event 장치명을 알기 위해 아래와 같이 명령한다. Zeuslab의 USB VID, PID는 0457, 0819이므로 grep에서 'usb:0457:0819'를 필터링했는데, 만일 다른 회사 제품이라면 libinput list-devices에서 제품명을 직접 찾은 다음에 Id값을 찾아서 넣으면 된다. 예를 들어 당신의 제품이 'usb:0123:4567' 이라면 grep -B 2 -A 12 'usb:0123:4567' 이라고 명령하면 쉽게 찾을 수 있다.\n아래 결과에서 보듯이 /dev/input/event26 를 기억해두면 된다. 이는 뒤에서 udevadm로 리로드와 트리거를 명령 할 때 필요하기 때문에 미리 알아본 것이다. 참고로 libinput 명령어는 root권한을 필요로 한다. 일반 유저로 명령시 Permission denied 에러가 발생할 것이다.\n$ sudo libinput list-devices | grep -B 2 -A 12 'usb:0457:0819'\nDevice:                  Silicon Integrated System Co. SiS HID Touch Controller\nKernel:                  /dev/input/event26\nId:                      usb:0457:0819\nGroup:                   3\nSeat:                    seat0, default\nSize:                    117x85mm\nCapabilities:            touch \nTap-to-click:            n/a\nTap-and-drag:            n/a\nTap button map:          n/a\nTap drag lock:           n/a\nLeft-handed:             n/a\nNat.scrolling:           n/a\nMiddle emulation:        n/a\nCalibration:             0.5 0.00 0.0 0.00 1.00 0.00\n \n \n2. LIBINPUT_CALIBRATION_MATRIX의 이해\nWayland를 사용하는 최근의 리눅스에서는 LIBINPUT_CALIBRATION_MATRIX를 이용해서 터치 공간의 픽셀 위치를 조정(calibration) 할 수 있다. 이 값은 총 9개의 매트릭스로 되어있으며 각각은 아래와 같다.\nlibinput calibrtion matrix\n\n\n여기서 터치 스크린용으로 사용되는 값은 M11, M12, M13, M21, M22, M23의 6개이며 각각은 아래와 같은 의미를 가진다.\nM11\nX축 배율(scaling), 입력된 X좌표에 곱해져서 최종 X좌표를 구한다. 예를 들어 0.5면 좌표의 위치가 절반으로 줄어드는 효과를 가진다.\n\n\nM12\nX좌표의 Y의존성(Skew/Rotation). 화면이 로테이션이 된 경우에 보정하는 값이다.\n\n\nM13\nX축 오프셋(offset), X좌표에 시작위치이다. 0이면 이동이 없는 것을 의미한다.\n\n\nM21\nY좌표의 X의존성(Skew/Rotation). 화면이 로테이션이 된 경우에 보정하는 값이다.\n\n\nM22\nY축 배율(scaling), 입력된 Y좌표에 곱해져서 최종 Y좌표를 구한다. 예를 들어 1이면 좌표를 변화시키지 않는다.\n\n\nM23\nY축 오프셋(Offset), Y좌표의 시작위치이다.\n\n\nM31\n투시 변환(Perspective), 일반적으로 0이다. 이 값들은 건드리지 않는다.(뭔지는 자세히 모른다)\n\n\nM32\n투시 변환(Perspective), 일반적으로 0이다. 이 값들은 건드리지 않는다.(뭔지는 자세히 모른다)\n\n\nM33\n투시 변환(Perspective), 일반적으로 1이다. 이 값들은 건드리지 않는다.(뭔지는 자세히 모른다)\n\n\n\n예를 들어 2개의 모니터가 있고, 각각 2560x1600의 해상도를 가진다고 가정하자. 모니터1이 일반 모니터이고, 모니터2가 Zeuslab의 P16KT 터치 모니터이다. 그리고 P16KT가 좌측에 배치되어있다고 가정하자.\n이런 경우 전체 화면 크기는 5120x1600의 화면 크기를 가진다. 그리고 좌측 상단의 X,Y좌표는 (0,0)이고 2560x1600이므로 절반만 사용하는 셈이다. 따라서 M11은 0.5를 넣고, Y축 크기는 둘다 1600이므로 배율을 변화시킬 필요가 없으므로 M22는 1이다. 따라서 LIBINPUT_CALIBRATION_MATRIX는 다음과 같다.\nLIBINPUT_CALIBRATION_MATRIX=\"0.5 0 0 0 1 0 0 0 1\"\n이 값을 적용시킬려면 udev의 rules 파일로 만드는 것이 좋다. 파일을 만들 디렉터리 경로는 /etc/udev/rules.d 이며, 파일명은 98-zeuslab-p16kt-libinput-calibration.rules 정도로 만들자. 사실 파일명은 다르게 해도 상관은 없다. 보통 앞의 숫자 2개와 파일 내용을 설명하는 적당한 이름이면 된다. 이것도 당연히 root 권한으로 파일을 생성해야만 한다. 내용은 아래 1줄짜리를 넣어두면 된다.\nACTION==\"add|change\", SUBSYSTEM==\"input\", ATTRS{idVendor}==\"0457\", ATTRS{idProduct}==\"0819\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"0.5 0 0 0 1 0 0 0 1\"\n보통은 rules 파일을 새로 넣으면 곧바로 적용되지만 기존 파일을 수정했거나, 혹여 로딩이 잘 안되는 경우가 있기 때문에 아래처럼 수동으로 이벤트를 발생시키는 것을 권장한다. 당연히 root로 명령한다. --name 의 장치명은 앞서 libinput에서 알아낸 파일명을 쓰면 된다. 혹시라도 이벤트가 제대로 작동하는지 확인하고 싶다면 미리 터미널 창을 하나 더 열고 udevadm monitor --environment --udev 명령을 내려두면 모니터링을 할 수 있다.\n$ sudo udevadm control --reload && udevadm trigger --name=/dev/input/event26\n보통 명령이 내려지면 바로 적용되는 경우도 있지만 때에 따라서는 10여분 가까이 걸리기도 한다. 왜 그런지는 잘 모르겠다. 적용이 제대로 되었는지는 libinput list-devices ... 명령에서 \"Calibration\" 항목을 보면 된다.\n \n3. 화면의 크기가 다른 모니터 사용시\n두 화면의 크기가 다른 모니터를 사용하는 경우에는 X, Y 좌표의 값이 달라지기 때문에 계산이 조금 복잡해진다. 예를 들어  모니터1번이 3840x2160, 모니터2번이 P16KT(2560x1600)이라면 논리적인 좌표값은 최대값을 따르기 때문에 토탈 화면 크기는 6400x2160이 된다. 이런 경우에는 M11, M13, M22의 좌표 계산이 약간 골치아파지기 때문에 이를 계산해주는 bash script를 하나 작성했다 (copilot을 이용해서 기본적인 뼈대를 작성하고, 오류가 있어서 약간 수정을 했다.)\n#!/bin/bash\n# 아래 1번, 2번 모니터의 설정을 본인의 화면에 맞게 수정한다.\n### 설정 시작 ###\n# 1. 모니터 설정 (물리적 픽셀 및 배율)\n# 1번 모니터 (주 모니터)\nMONITOR1_P_WIDTH=5120\nMONITOR1_P_HEIGHT=2160\nMONITOR1_SCALE=1.5 # 150%\n\n# 2번 모니터 (터치 모니터)\nMONITOR2_P_WIDTH=2560\nMONITOR2_P_HEIGHT=1600\nMONITOR2_SCALE=1.0 # 100% 가정 (필요에 따라 1.25, 1.5 등으로 변경 가능)\n### 설정 끝 ###\n\n# 터치 입력을 적용할 2번 모니터의 위치\nTARGET=\"$1\"\nif [[ \"$TARGET\" != \"left\" && \"$TARGET\" != \"right\" ]]; then\n    echo \"Usage $0 [left|right]\"\n    exit 1\nfi\n\n# ### 2. 논리적 크기 계산 ###\n# 1번 모니터 논리적 크기\nMONITOR1_L_WIDTH=$(echo \"scale=4; $MONITOR1_P_WIDTH / $MONITOR1_SCALE\" | bc -l)\nMONITOR1_L_HEIGHT=$(echo \"scale=4; $MONITOR1_P_HEIGHT / $MONITOR1_SCALE\" | bc -l)\necho \"Monitor[1] : Logical width x height = $MONITOR1_L_WIDTH x $MONITOR1_L_HEIGHT\"\n\n# 2번 모니터 논리적 크기\nMONITOR2_L_WIDTH=$(echo \"scale=4; $MONITOR2_P_WIDTH / $MONITOR2_SCALE\" | bc -l)\nMONITOR2_L_HEIGHT=$(echo \"scale=4; $MONITOR2_P_HEIGHT / $MONITOR2_SCALE\" | bc -l)\necho \"Monitor[2] : Logical width x height = $MONITOR2_L_WIDTH x $MONITOR2_L_HEIGHT\"\n\n# 전체 화면 논리적 크기 (두 모니터의 논리적 너비 합산)\nTOTAL_WIDTH=$(echo \"scale=4; $MONITOR1_L_WIDTH + $MONITOR2_L_WIDTH\" | bc -l)\n\n# 전체 화면 논리적 높이 (두 모니터의 논리적 높이 중 큰 값)\nif (( $(echo \"$MONITOR1_L_HEIGHT > $MONITOR2_L_HEIGHT\" | bc -l) )); then\n    TOTAL_HEIGHT=$MONITOR1_L_HEIGHT\nelse\n    TOTAL_HEIGHT=$MONITOR2_L_HEIGHT\nfi\n\n# 2번 모니터의 논리적 Y축 오프셋 (중앙 정렬 가정)\nY_OFFSET_PIXELS=0\n\n# ### 3. 매트릭스 계산 함수 ###\ncalc_matrix() {\n    local x_offset=$1\n    local y_offset=$2\n    local width=$3\n    local height=$4\n\n    # 스케일링 비율 (A, E)\n    local scale_x=$(echo \"scale=4; $width / $TOTAL_WIDTH\" | bc -l)\n    local scale_y=$(echo \"scale=4; $height / $TOTAL_HEIGHT\" | bc -l)\n    # 오프셋 비율 (C, F)\n    local offset_x=$(echo \"scale=4; $x_offset / $TOTAL_WIDTH\" | bc -l)\n    local offset_y=$(echo \"scale=4; $y_offset / $TOTAL_HEIGHT\" | bc -l)\n\n    # 행렬 출력: M11 M12 M13 M21 M22 M23 M31 M32 M33 M12와 M21은 0: Rotation없음)\n    echo \"LIBINPUT_CALIBRATION_MATRIX=\\\"$scale_x 0 $offset_x 0 $scale_y $offset_y 0 0 1\\\"\"\n}\n\n# ### 4. 매트릭스 적용 ###\nif [[ \"$TARGET\" == \"left\" ]]; then\n    # 2번 모니터가 left: X 오프셋=0, Y 오프셋=$Y_OFFSET_PIXELS, 크기=2번 모니터 논리적 크기\n    calc_matrix 0 $Y_OFFSET_PIXELS $MONITOR2_L_WIDTH $MONITOR2_L_HEIGHT\nelse\n    # 2번 모니터가 right: X 오프셋=1번 모니터 논리적 너비, Y 오프셋=$Y_OFFSET_PIXELS, 크기=2번 모니터 논리적 크기\n    calc_matrix $MONITOR1_L_WIDTH $Y_OFFSET_PIXELS $MONITOR2_L_WIDTH $MONITOR2_L_HEIGHT\nfi\n고해상도 모니터는 종종 배율을 150%나 200%로 높이는 경우도 있는데, 배율이 높아지면 논리적인 해상도가 달라진다. 예를 들어 4k 모니터의 물리적인 해상도는 3840x2160이지만, 배율을 200%로 높이면 논리적인 해상도는 1920x1080으로 변한다. 따라서 위에 스크립트에 위에서 6줄 코드 부분에 각 모니터의 해상도와 배율을 적도록 해뒀다. \n일단 예제의 현재 값은 1번 모니터는 5k (5120x2160)에 배율은 150%로 저장해뒀다. 이 상태에서 터치 모니터가 왼쪽에 배치된 경우라면 아래처럼 명령한다.\n$ ./libinput_calibration_matrix.sh left\nMonitor[1] : Logical width x height = 3413.3333 x 1440.0000\nMonitor[2] : Logical width x height = 2560.0000 x 1600.0000\nLIBINPUT_CALIBRATION_MATRIX=\".4285 0 0 0 1.0000 0 0 0 1\"\n위에서 나온 맨 아랫줄을 /etc/udev/rules.d 에 설정 파일에 넣어두면 된다. 설정 후 적용은 앞서 본 udevadm control --reload && udevadm trigger --name=/dev/input/event26 명령을 사용하도록 하자. (명령 후 실제 효과는 10여분까지 지연될 수 있음을 명심하자)\n만일 오른쪽에 배치된 경우라면 right를 명령을 하면 된다.\n$ ./libinput_calibration_matrix.sh right\nMonitor[1] : Logical width x height = 3413.3333 x 1440.0000\nMonitor[2] : Logical width x height = 2560.0000 x 1600.0000\nLIBINPUT_CALIBRATION_MATRIX=\".4285 0 .5714 0 1.0000 0 0 0 1\"\n \n혹시라도 아예 터치 기능을 비활성화 하고자 한다면 예전에 써둔 글이 있으니 그것을 참고하기 바란다.\n2025.06.23 - [컴퓨터 관련/리눅스 데스크탑] - 리눅스에서 제우스랩 P16KT 터치 기능 끄기\n히스토리\n2025-10-12 초안 작성\n \n레퍼런스\nCalibrating Touchscreen, Arch Linux wiki, https://wiki.archlinux.org/title/Calibrating_Touchscreen\nHow to calibrate touch screen on Wayland, https://unix.stackexchange.com/questions/708447/how-to-calibrate-touch-screen-on-wayland",
    "reviews": [],
    "syllabus": [],
    "link": "http://sunyzero.tistory.com/320",
    "pubDate": "Sun, 12 Oct 2025 22:05:25 +0900",
    "creator": "sunyzero",
    "categories": [
      "컴퓨터 관련/리눅스 데스크탑",
      "Fedora Linux",
      "libinput",
      "Touchscreen calibation on Linux",
      "Wayland",
      "Zeuslab P16KT",
      "리눅스 터치 스크린"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "고블린과 함께 청소를! 고블린 클린업",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2372",
    "pubDate": "Mon, 13 Oct 2025 15:28:44 +0900",
    "creator": "｜RULIWEB｜",
    "categories": [
      "게임툰"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "JetBrains Is Sunsetting CodeCanvas",
    "description": "We started the development of CodeCanvas back in 2022, with the strong belief that cloud development environments (CDEs) would make development faster, smoother, and more efficient.  With this goal in mind, we launched CodeCanvas publicly in 2024 and started accumulating users. We dove into the issues they faced in their development workflows and how we […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/codecanvas/2025/10/jetbrains-is-sunsetting-codecanvas/",
    "pubDate": "Thu, 16 Oct 2025 07:03:56 +0000",
    "creator": "Elizaveta Zaytseva",
    "categories": [
      "codecanvas"
    ]
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "The State of Developer Ecosystem 2025: Coding in the Age of AI, New Productivity Metrics, and Changing Realities",
    "description": "Every year, the JetBrains Developer Ecosystem Survey takes a deep dive into the world of software development, looking at how developers work, what tools they use, and how the industry is changing.  The survey has been running since 2017 and has since grown into one of the most comprehensive studies of its kind. The 2025 […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/research/2025/10/state-of-developer-ecosystem-2025/",
    "pubDate": "Wed, 15 Oct 2025 13:01:04 +0000",
    "creator": "Olga Bedrina",
    "categories": [
      "deveco",
      "news",
      "research",
      "jetbrains-deveco",
      "jetbrains-research",
      "market-research"
    ]
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "악역영애 4컷 만화는 한 주 쉬어갑니다.",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2373",
    "pubDate": "Wed, 15 Oct 2025 22:23:25 +0900",
    "creator": "｜RULIWEB｜",
    "categories": [
      "웹툰"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "소화불량으로 인한 죽음",
    "description": "경험이 좀 있는 미국 투자자들이 하는 말 중 이런 말이 있다. “굶주려서 문 닫는 회사보단, 소화불량으로 문 닫는 회사가 훨씬 더 많다.(More companies die due to indigestion than starvation)” 굳이 설명하지 않아도 이게 무슨 말인지는 대충 알 텐데, 스타트업의 맥락에서 이야기하자면, 돈이(=런웨이) 없어서 문을 닫는 회사도 많지만, 이보다 돈이 너무 많아서 멍청한 짓을 해서(cross out)(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/10/dont-die-from-indigestion.html",
    "pubDate": "Wed, 15 Oct 2025 21:27:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "failure",
      "FoundersAtWork",
      "fundraising",
      "Strong",
      "vc"
    ]
  }
]