[
  {
    "id": 1,
    "imageUrl": "",
    "title": "챗GPT 텍스트 워터마크 감지 및 제거 도구",
    "description": "챗GPT 텍스트 워터마크 제거 도구\nLLM으로 생성한 텍스트에 포함된 워터마크를 감지하고 제거하는 도구입니다\n\n      \n      \n워터마크 감지\n        워터마크 제거\n      \n\n    \n\n  \n[\\p{Emoji}])(?[\\uFE00-\\uFE0F])/gu;\n    let match;\n    \n    while ((match = emojiWithVSPattern.exec(text)) !== null) {\n      const emojiPos = match.index;\n      const vsPos = emojiPos + match.groups.emoji.length;\n      const vsChar = match.groups.vs;\n  \n      // 이미 감지된 위치가 아닌 경우만 처리\n      if (!detectedPositions.has(vsPos)) {\n        watermarks.count++;\n        watermarks.types.add('이모지 변형 선택자');\n        detectedPositions.add(vsPos);\n  \n        const unicode = `U+${vsChar.codePointAt(0).toString(16).toUpperCase().padStart(4, '0')}`;\n        watermarks.positions.push({\n          type: '이모지 변형 선택자',\n          position: vsPos,\n          char: vsChar,\n          unicode: unicode,\n          description: '이모지에 적용된 변형 선택자',\n          context: getContext(text, vsPos)\n        });\n      }\n    }\n  \n    // 2. 단독 제어 문자 패턴 검사\n    const patterns = [\n      {\n        type: '제로 너비 문자',\n        regex: /[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g,\n        description: '보이지 않는 공백이나 제어 문자'\n      },\n      {\n        type: '특수 공백',\n        regex: /[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g,\n        description: '일반 공백과 다른 특수 공백 문자'\n      }\n    ];\n  \n    // 이미 감지되지 않은 위치의 제어 문자만 검사\n    patterns.forEach(pattern => {\n      while ((match = pattern.regex.exec(text)) !== null) {\n        const pos = match.index;\n        \n        if (!detectedPositions.has(pos)) {\n          watermarks.count++;\n          watermarks.types.add(pattern.type);\n          detectedPositions.add(pos);\n  \n          const charCode = match[0].codePointAt(0);\n          const unicode = `U+${charCode.toString(16).toUpperCase().padStart(4, '0')}`;\n          \n          watermarks.positions.push({\n            type: pattern.type,\n            position: pos,\n            char: match[0],\n            unicode: unicode,\n            description: pattern.description,\n            context: getContext(text, pos)\n          });\n        }\n      }\n    });\n  \n    // 감지된 워터마크 위치 정렬\n    watermarks.positions.sort((a, b) => a.position - b.position);\n  \n    showDetectionResult(watermarks);\n    return watermarks;\n  }\n  \n  function getContext(text, position, contextSize = 20) {\n    const start = Math.max(0, position - contextSize);\n    const end = Math.min(text.length, position + contextSize);\n    const prefix = text.substring(start, position);\n    const suffix = text.substring(position + 1, end);\n    \n    return {\n      full: text.substring(start, end),\n      position: position - start,\n      prefix: prefix,\n      suffix: suffix\n    };\n  }\n  \n  function showDetectionResult(watermarks) {\n    const resultDiv = document.getElementById('detection-result');\n    \n    if (watermarks.count > 0) {\n      // 원본 텍스트를 가져옴\n      const originalText = document.getElementById('content-input').value;\n      \n      // 워터마크 위치를 정렬\n      watermarks.positions.sort((a, b) => a.position - b.position);\n      \n      // 결과 HTML 생성\n      let html = `\n        \n워터마크 감지 결과\n발견된 워터마크 수: ${watermarks.count}개\n워터마크 종류: ${Array.from(watermarks.types).join(', ')}\n전체 텍스트 (워터마크 강조 표시)\n`;\n  \n      // 전체 텍스트에 워터마크 표시\n      let lastPos = 0;\n      watermarks.positions.forEach(mark => {\n        html += escapeHtml(originalText.substring(lastPos, mark.position));\n        html += `${mark.char}[${mark.unicode}]`;\n        lastPos = mark.position + 1;\n      });\n      html += escapeHtml(originalText.substring(lastPos));\n  \n      html += `\n`;\n      resultDiv.innerHTML = html;\n    } else {\n      resultDiv.innerHTML = '\n워터마크가 발견되지 않았습니다.\n';\n    }\n  }\n  \n  function highlightContext(context) {\n    const pos = context.position;\n    const text = context.full;\n    return `${escapeHtml(text.substring(0, pos))}${escapeHtml(text.charAt(pos))}${escapeHtml(text.substring(pos + 1))}`;\n  }\n  \n  // HTML 이스케이프 함수\n  function escapeHtml(text) {\n    return text\n      .replace(/&/g, \"&\")\n      .replace(//g, \">\")\n      .replace(/\"/g, \"\"\")\n      .replace(/'/g, \"'\");\n  }\n  \n  // 워터마크 제거 함수\n  function removeWatermark(text) {\n    let cleaned = text\n      .replace(/[\\uFE00-\\uFE0F]/g, '')\n      .replace(/[\\u200B-\\u200F\\u2060-\\u2064\\uFEFF]/g, '')\n      .replace(/[\\u00A0\\u2000-\\u200A\\u202F\\u205F\\u3000]/g, ' ');\n  \n    document.getElementById('removal-result').innerHTML = `\n      \n워터마크 제거 결과\n${cleaned}\n        \n\n              \n\n            \n            결과 복사\n          \n        \n\n        \n        복사 완료\n      `;\n      \n      // 3초 후 버튼 상태 복원\n      setTimeout(() => {\n        copyButton.classList.remove('copied');\n        copyButton.innerHTML = `\n          \n            \n            \n\n          \n          결과 복사\n        `;\n      }, 3000);\n    } catch (err) {\n      console.error('복사 실패:', err);\n    }\n  \n    // 선택 해제\n    window.getSelection().removeAllRanges();\n  }\n  \n  // 이벤트 리스너 수정\n  document.getElementById('detect-button').onclick = function() {\n    const text = document.getElementById('content-input').value;\n    // 제거 결과 초기화\n    document.getElementById('removal-result').innerHTML = '';\n    detectWatermark(text);\n  };\n  \n  // 워터마크 제거 함수 수정\n  document.getElementById('remove-button').onclick = function() {\n    const text = document.getElementById('content-input').value;\n    const originalWatermarks = detectWatermark(text);\n    const cleaned = removeWatermark(text);\n    const remainingWatermarks = detectWatermark(cleaned);\n  \n    // 제거 작업 결과 표시\n    document.getElementById('detection-result').innerHTML = `\n      \n워터마크 제거 작업 결과\n원본 워터마크 수: ${originalWatermarks.count}개\n제거된 워터마크 수: ${originalWatermarks.count - remainingWatermarks.count}개\n 0 \n            ? `\n남은 워터마크 수: ${remainingWatermarks.count}개\n남은 워터마크 종류: ${Array.from(remainingWatermarks.types).join(', ')}\n`\n            : '\n모든 워터마크가 성공적으로 제거되었습니다!\n'\n          }\n        \n 0 \n          ? `\n제거되지 않은 워터마크 위치:\n`\n          : ''\n        }\n      \n {\n      html += escapeHtml(text.substring(lastPos, mark.position));\n      html += `${mark.char}[${mark.unicode}]`;\n      lastPos = mark.position + 1;\n    });\n    \n    html += escapeHtml(text.substring(lastPos));\n    return html;\n  }\n  \n  // content-input에 입력 이벤트 리스너 추가\n  document.getElementById('content-input').addEventListener('input', function() {\n    // 제거 결과 초기화\n    document.getElementById('removal-result').innerHTML = '';\n    // 감지 결과도 초기화 (선택사항)\n    document.getElementById('detection-result').innerHTML = '';\n  });\n  \nAI가 생성한 텍스트 속 보이지 않는 워터마크를 찾아내는 도구입니다. ChatGPT 등 LLM이 남기는 특수 문자를 쉽게 감지하고 제거할 수 있는 웹 프로그램의 작동 원리와 사용법을 알아보세요.\nAI 텍스트 워터마크 감지 및 제거 도구 소개  ️‍♂️\n최근 ChatGPT와 같은 AI 모델들이 생성하는 텍스트에 눈에 보이지 않는 워터마크가 삽입된다는 사실이 알려져 논란이 되고 있어요. 특히 GPT-o3와 GPT-o4 mini 같은 최신 모델에서 이런 현상이 발견되고 있죠. 이러한 보이지 않는 워터마크를 감지하고 제거할 수 있는 웹 프로그램입니다.\n \n워터마크란 무엇인가요?  \nAI 텍스트 워터마크는 육안으로는 보이지 않지만, 텍스트에 숨겨진 특수 유니코드 문자들입니다. 주로 다음과 같은 종류가 있어요:\n제로 너비 문자: 화면에 표시되지 않는 공백이나 제어 문자\n특수 공백: 일반 공백처럼 보이지만 다른 코드를 가진 특수 유니코드 문자\n이모지 변형 선택자: 이모지 뒤에 붙어 변형을 주는 특수 문자\n이런 특수 문자들은 일반적인 텍스트 에디터에서는 확인하기 어렵지만, 특정 도구를 사용하면 감지할 수 있습니다.\n \n워터마크 감지/제거 웹 프로그램 기능 소개  \n이 웹 프로그램은 다음과 같은 주요 기능을 제공합니다:\n1. 워터마크 감지 기능\nAI가 생성한 텍스트에 숨겨진 워터마크를 찾아냄\n발견된 워터마크의 수와 종류를 표시\n워터마크가 위치한 곳을 시각적으로 강조 표시\n2. 워터마크 제거 기능\n감지된 워터마크를 모두 제거하거나 일반 문자로 변환\n원본과 정리된 텍스트 비교 제공\n정리된 텍스트를 쉽게 복사할 수 있는 기능\n3. 상세 분석 기능\n워터마크의 유니코드 값 표시\n텍스트 내 워터마크의 정확한 위치 정보 제공\n워터마크 제거 전후 비교 분석\n \n프로그램 사용 방법  \n기본 사용법\n텍스트 입력: 워터마크가 있는지 확인하고 싶은 텍스트를 입력 창에 붙여넣습니다.\n워터마크 감지: '워터마크 감지' 버튼을 클릭하여 텍스트 내 워터마크를 찾습니다.\n워터마크 제거: '워터마크 제거' 버튼을 클릭하여 감지된 워터마크를 제거합니다.\n결과 확인: 워터마크 감지 결과와 제거 결과를 각각 확인할 수 있습니다.\n정리된 텍스트 복사: '결과 복사' 버튼을 클릭하여 워터마크가 제거된 텍스트를 클립보드에 복사합니다.\n결과 해석하기\n워터마크 감지 후에는 다음과 같은 정보를 확인할 수 있습니다:\n발견된 워터마크 수: 텍스트에서 발견된 총 워터마크 수\n워터마크 종류: 발견된 워터마크의 유형(제로 너비 문자, 특수 공백, 이모지 변형 선택자 등)\n워터마크 위치: 원본 텍스트에서 워터마크가 발견된 위치가 강조 표시됨\n유니코드 정보: 각 워터마크의 유니코드 값(예: U+200B, U+2060 등)\n워터마크 제거 후에는:\n워터마크 제거 수: 성공적으로 제거된 워터마크의 수\n정리된 텍스트: 워터마크가 제거된 깨끗한 텍스트\n남은 워터마크: 제거하지 못한 워터마크가 있다면 그 정보\nAI 발전: AI 모델의 워터마킹 기술도 계속 발전하고 있으므로, 최신 모델에서는 새로운 유형의 워터마크가 있을 수 있습니다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://muzbox.tistory.com/483574",
    "pubDate": "Wed, 23 Apr 2025 23:54:18 +0900",
    "creator": "어떤오후의 프리웨어 이야기",
    "categories": [
      "AI, 미래기술/AI 챗봇 및 언어 모델",
      "ai 워터마크",
      "ai 텍스트 감지",
      "chatgpt 워터마크",
      "gpt-o3 워터마크",
      "워터마크 감지 도구",
      "유니코드 워터마크",
      "제로 너비 문자",
      "텍스트 워터마크 제거",
      "특수 공백 문자",
      "특수 문자 감지"
    ]
  },
  {
    "id": 2,
    "imageUrl": "",
    "title": "Qodana For Code Quality in STEM",
    "description": "Your code drives discovery. Keep it precise. In STEM fields, software isn’t just a product, it underpins innovation, research, and life-critical infrastructure. Qodana brings advanced static code analysis to STEM software projects, helping ensure code quality, security, and compliance where it matters most. Qodana for STEM Why code quality matters in STEM Software in science, […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/qodana/2025/04/qodana-for-code-quality-in-stem/",
    "pubDate": "Tue, 22 Apr 2025 10:37:18 +0000",
    "creator": "Kerry Beetge",
    "categories": [
      "case-study-qodana",
      "qodana",
      "code-analysis",
      "stem"
    ]
  },
  {
    "id": 3,
    "imageUrl": "",
    "title": "2024년 우리가 가장 좋아하는 새로운 Visual Studio 기능들",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/VS_20250422/",
    "pubDate": "Tue, 22 Apr 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 4,
    "imageUrl": "",
    "title": "Debugging Java Code in IntelliJ IDEA",
    "description": "In this blog post, we will look at how to debug Java code using the IntelliJ IDEA debugger. We will look at how to fix a failing test, how to find out where an `Exception` is thrown, and how to find problems with our data. And we will learn some neat tricks about the debugger […]",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.jetbrains.com/idea/2025/04/debugging-java-code-in-intellij-idea/",
    "pubDate": "Thu, 24 Apr 2025 09:12:11 +0000",
    "creator": "Marit van Dijk",
    "categories": [
      "idea",
      "java",
      "tutorials",
      "debug",
      "debugger",
      "debugging",
      "intelij-idea"
    ]
  },
  {
    "id": 5,
    "imageUrl": "",
    "title": "&quot;로제가 등장하자 3만 관중 떼창&quot;...콜드플레이 서울 공연, 레전드가 된 순간",
    "description": "콜드플레이 서울 콘서트, 상상을 초월한 무대\n2025년 4월 22일, 고양종합운동장 주경기장은 그야말로 전율의 도가니였다. 콜드플레이의 두 번째 내한공연 ‘뮤직 오브 더 스피어스(Music of the Spheres)’ 투어의 네 번째 무대가 열린 이날, 수만 명의 관객 앞에 놀라운 장면이 펼쳐졌다. 그 중심에는 블랙핑크의 로제가 있었다.\n콜드플레이의 보컬 크리스 마틴은 장난스레 피아노로 ‘아파트’ 전주를 연주하며 한국어로 “아파트, 아파트”를 외쳤다. 관객들은 처음엔 익살스러운 제스처로 여겼지만, 무대 위에 로제가 등장하자 반응은 완전히 뒤바뀌었다. 갑작스러운 등장에 수만 명이 일제히 ‘아파트’를 떼창하는 진풍경이 연출됐다.\n로제와 크리스 마틴, ‘아파트’로 하나되다\n로제는 무대 위를 활보하며 크리스 마틴과 함께 ‘아파트’를 열창했다. 두 사람은 감정을 실어 화음을 주고받았고, 관객은 일제히 떼창으로 응답했다. 노래가 끝난 후에도 크리스 마틴은 “너무 신난다. 한 번 더 하자”며 로제에게 제안했고, 이내 ‘아파트’는 또 한 번 경기장을 뒤흔들었다.\n이 특별한 협업은 단순한 게스트 무대를 넘어선 진심어린 음악적 교류였다. 로제와 콜드플레이는 모두 워너뮤직 산하 애틀랜틱 레코드 소속으로, 이전에도 로제가 콜드플레이의 ‘Viva La Vida’를 리메이크해 애플TV+ 드라마 ‘파친코’ 시즌2 엔딩곡으로 사용되기도 했다.\n하루 만에 코첼라에서 서울로, 로제의 의리\n더 놀라운 점은 로제가 불과 하루 전까지 미국 코첼라 페스티벌에서 블랙핑크 멤버들을 응원하는 모습이 포착되었다는 사실이다. 하루 만에 서울로 날아와 콜드플레이의 무대에 함께한 로제의 의리는 많은 팬들에게 깊은 인상을 남겼다.\n공연장을 찾은 이들 중에는 YG엔터테인먼트의 또 다른 대표 아티스트인 지드래곤(G-DRAGON)도 있었다. 그는 코드 쿤스트, 배우 정해인과 함께 관객석에서 공연을 관람했으며, 같은 날 태양도 공연장에 모습을 드러냈다. 크리스 마틴은 태양의 유명한 밈 “여러분, 너무 보고 싶었어요”를 피아노와 함께 재현하며 한국 팬들을 향한 애정을 표현하기도 했다.\n내한공연 역사 새로 쓴 콜드플레이\n이번 콜드플레이의 내한은 단순한 공연 그 이상이다. 4월 16일부터 시작해 18일, 19일, 22일, 그리고 예정된 24일과 25일까지 총 6회 공연은 단일 아티스트 기준 한국 내 공연 역사상 최대 규모로, 약 30만 명의 관객을 동원하는 대기록을 세웠다.\n이날 무대는 단순한 음악 공연이 아니라, 글로벌 팝스타들과 한국 아티스트의 깊은 교류가 만들어낸 감동의 순간이었다. 특히 로제와의 협업은 국경과 장르를 뛰어넘는 음악의 힘을 증명했다.\n마무리\n이번 콜드플레이 내한공연은 단순한 콘서트가 아닌, 하나의 문화적 사건이었다. 그 안에는 글로벌 무대에서 활약하는 한국 아티스트들의 존재감, 그리고 진심이 담긴 음악의 교류가 있었다. 로제의 깜짝 등장은 그 상징적인 순간이 되었으며, 관객들은 이 날을 두고두고 기억하게 될 것이다.",
    "reviews": [],
    "syllabus": [],
    "link": "http://app-developer.tistory.com/entry/%EB%A1%9C%EC%A0%9C%EA%B0%80-%EB%93%B1%EC%9E%A5%ED%95%98%EC%9E%90-3%EB%A7%8C-%EA%B4%80%EC%A4%91-%EB%96%BC%EC%B0%BD%EC%BD%9C%EB%93%9C%ED%94%8C%EB%A0%88%EC%9D%B4-%EC%84%9C%EC%9A%B8-%EA%B3%B5%EC%97%B0-%EB%A0%88%EC%A0%84%EB%93%9C%EA%B0%80-%EB%90%9C-%EC%88%9C%EA%B0%84",
    "pubDate": "Wed, 23 Apr 2025 08:48:01 +0900",
    "creator": "브리핑허브",
    "categories": [
      "고양종합운동장",
      "내한공연",
      "로제",
      "블랙핑크",
      "아파트떼창",
      "지드래곤",
      "코첼라",
      "콜드플레이",
      "크리스마틴",
      "태양"
    ]
  },
  {
    "id": 6,
    "imageUrl": "",
    "title": "Elasticsearch 9.0의 변화",
    "description": "지난주에 무슨 일이 있었는지 8.18과 9.0 버전이 동시에 릴리즈됐다. 8.18 지못미 다른 건 잘 모르겠고, ESQL에 LOOKUP JOIN 기능이 추가됨. ENRICH 기능과의 차이점은 정책 생성 및 실행 과정이 필요없다는 것.\n\n\n1. enrich 인덱스 생성\n\n\n2. enrich 정책 생성 및 실행\n\nPUT _enrich/policy/proc_info\n{\n    \"match\": {\n      \"indices\": \"proc_info\",\n      \"match_field\": \"proc\",\n      \"enrich_fields\": [\"company\"]\n    }\n}\n\nPOST _enrich/policy/proc_info/_execute\n\n\n\n3. enrich 쿼리\n\n\nLOOKUP JOIN\n\n\n1. lookup 인덱스 생성. enrich 인덱스와 달리 Lookup 인덱스 모드를 선택해야 한다. 필드 매핑도 keyword 타입 필수. \n\n\n2. lookup join 쿼리\n\n\n\n서브 쿼리 좀 빨리(..)\n\n관련 글\n\nElasticsearch 8.11의 변화\nenrich processor\n엘라스틱의 Join",
    "reviews": [],
    "syllabus": [],
    "link": "https://kangmyounghun.blogspot.com/2025/04/elasticsearch-90.html",
    "pubDate": "2025-04-20T07:02:00.002Z",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 7,
    "imageUrl": "",
    "title": "프리랜서 종합소득세 신고, 이것만 알아도 충분해요",
    "description": "프리랜서라면 꼭 알아야 할 종합소득세 신고 방식",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/tossmoment-8",
    "pubDate": "Wed, 23 Apr 2025 04:53:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 8,
    "imageUrl": "",
    "title": "맥북에서 로지텍 MX Master 3 마우스 끊김 해결: SmartShift 비활성화 경험",
    "description": "맥북 M4와 로지텍 MX Master 3는 생산성을 위한 강력한 도구 조합이지만, 예기치 않게 마우스 끊김, 스크롤 오류, 화면 확대/축소 문제가 발생할 수 있습니다. 저 또한 이러한 문제로 불편함을 겪었고, 마우스를 교체할까 고민할 정도로 답답했습니다. 하지만 끈질긴 문제 해결 시도 끝에, MX Master 3의 특정 기능이 맥북 M4와의 호환성 문제의 원인임을 발견했습니다.\n문제의 핵심: MX Master 3 SmartShift 기능과 맥북 M4\n문제의 원인은 바로 MX Master 3의 SmartShift 기능이었습니다. 이 기능은 마우스 휠 속도에 따라 자동으로 스크롤 모드를 전환하여 편리함을 제공하지만, 맥북 M4 환경에서는 예기치 않은 작동 오류를 일으킬 수 있었습니다.\n갑작스러운 마우스 멈춤 (MacBook mouse freeze)\n불규칙한 스크롤 동작 (MX Master 3 scroll issue)\n의도치 않은 화면 확대 또는 축소 (MacBook screen zoom problem)\n해결 과정: 마우스 기능 점검과 SmartShift 비활성화\n명확한 해결책을 찾기 어려워 답답했던 저는, 최후의 수단으로 MX Master 3의 기능을 하나씩 테스트하며 원인을 좁혀나가기 시작했습니다. 그러던 중 SmartShift 기능을 끄는 것이 문제 해결의 결정적인 단계였습니다.\n\nSmartShift 비활성화 방법 (Logi Options+ 기준):\nLogi Options+ 앱을 실행합니다.\n연결된 MX Master 3를 선택합니다.\n휠 설정 메뉴로 이동합니다.\nSmartShift 옵션을 OFF로 설정합니다.\n이 간단한 조치만으로 맥북 M4에서 MX Master 3 마우스 끊김, 스크롤 오류, 화면 확대/축소 문제가 깔끔하게 해결되었습니다.\n맥북 M4 마우스 끊김 예방을 위한 추가 팁\nLogi Options+ 및 마우스 펌웨어 최신 버전 유지: 정기적인 업데이트는 호환성 문제 해결 및 성능 향상에 도움이 됩니다.\n로지텍 전용 USB 수신기 활용: 블루투스 연결 불안정 시, 동글 사용을 고려해보세요.\nmacOS 접근 권한 확인: ‘시스템 설정’ > '개인 정보 보호 및 보안’에서 Logi Options+ 권한 설정을 확인합니다.\n결론: 맥북 M4와 MX Master 3 마우스 문제 해결은 SmartShift 비활성화가 답이었다.\n맥북 M4 환경에서 로지텍 MX Master 3 마우스 사용 중 끊김, 스크롤 이상, 화면 확대/축소 현상을 겪고 있다면, SmartShift 기능을 비활성화하는 것이 효과적인 해결책이 될 수 있습니다. 마우스 교체를 고려하기 전에 이 방법을 시도하여 쾌적한 맥북 사용 환경을 되찾으시길 바랍니다.",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.gaerae.com/2025/04/macbook-mx-master-3-smartshift.html",
    "pubDate": "Thu, 24 Apr 2025 09:51:00 +0000",
    "creator": "noreply@blogger.com (Unknown)",
    "categories": [
      {
        "_": "macbook",
        "$": {
          "domain": "http://www.blogger.com/atom/ns#"
        }
      },
      {
        "_": "mouse",
        "$": {
          "domain": "http://www.blogger.com/atom/ns#"
        }
      }
    ]
  },
  {
    "id": 9,
    "imageUrl": "",
    "title": "C# - .NET 9, C#13 정리",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/NET_20250424/",
    "pubDate": "Thu, 24 Apr 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 10,
    "imageUrl": "",
    "title": "[MULTI] RPG 팬이라면 올해 꼭 해봐야 하는 타이틀, 클레르 옵스퀴르",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://bbs.ruliweb.com/news/board/11/read/2299",
    "pubDate": "Thu, 24 Apr 2025 17:00:04 +0900",
    "creator": "［RULIWEB］",
    "categories": [
      "리뷰"
    ]
  },
  {
    "id": 11,
    "imageUrl": "",
    "title": "미친 사람들과 같이 일하기",
    "description": "미친 사람들. 이게 내가 요새 우리 투자사 창업가들과 만날 때마다 내 머릿속에 떠오르는 단어다. 우리가 투자한 창업가들은 본인들의 사업이 잘되든, 잘 안되든, 내가 지금까지 만난 모든 직장인 중 일 잘하는 순위를 매겨보면 상위 1%에 들어가는 분들이다. 일을 좀 하는 분들이 아니라, 오지게 잘하는 분들이고, 남이 만들어 놓은 회사에서 직장인 생활을 하면 날아다닐 정도로 야무지게, 그리고(...)",
    "reviews": [],
    "syllabus": [],
    "link": "https://www.thestartupbible.com/2025/04/working-with-crazy-people.html",
    "pubDate": "Sun, 20 Apr 2025 21:41:00 +0000",
    "creator": "Kihong Bae",
    "categories": [
      "Uncategorized",
      "failure",
      "FoundersAtWork",
      "hustle",
      "korea",
      "people",
      "Strong"
    ]
  },
  {
    "id": 12,
    "imageUrl": "",
    "title": "토스인컴, '5월 종소세 신고' 앞두고 '추징 안심보상제' 실시",
    "description": "‘추징 안심보상제’와 ‘종소세 미리보기’ 서비스 출시",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/tossincomeservices",
    "pubDate": "Mon, 21 Apr 2025 01:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 13,
    "imageUrl": "",
    "title": "Visual Studio의 새로운 디버깅 및 프로파일링 기능(v17.13)",
    "description": "No description available",
    "reviews": [],
    "syllabus": [],
    "link": "https://jacking75.github.io/VS_20250420/",
    "pubDate": "Sun, 20 Apr 2025 00:00:00 +0900",
    "creator": "Unknown",
    "categories": []
  },
  {
    "id": 14,
    "imageUrl": "",
    "title": "Brick Away / 블록분해 v2 / 회전 레벨 생성",
    "description": "두번째 버전 출시 했습니다.\n \n관련 링크\n플레이 링크: https://play.unity.com/en/games/1108fd21-5ab1-481e-a4c8-7dc42a7641e9/brick-away-v2\n\n \nBrick Away V2 on Unity Play\nv2 - mouse drag rotation - random level generate BLOG: https://serverdown.tistory.com/category/%EB%B8%94%EB%A1%9D%20%EB%B6%84%ED%95%B4%20%EA%B2%8C%EC%9E%84%20%28%EC%9E%90%EC%9E%91%29\nplay.unity.com\n\n \n플레이 영상: https://www.youtube.com/watch?v=_EVuM-JzcMw\n\n\n\n \n \n \n마우스 드레그로 회전 가능합니다.\n레벨을 랜덤으로 생성합니다.\n클리어 하면 레벨이 올라갑니다.\n레벨은 상자 수를 의미합니다.\n \n다음 버전 예정\n레벨 생성이 잘 되도록 수정 예정",
    "reviews": [],
    "syllabus": [],
    "link": "http://serverdown.tistory.com/1281",
    "pubDate": "Thu, 24 Apr 2025 16:20:56 +0900",
    "creator": "SIDNFT",
    "categories": [
      "블록 분해 게임 (자작)",
      "게임",
      "유니티",
      "자작"
    ]
  },
  {
    "id": 15,
    "imageUrl": "",
    "title": "토스, 전자문서 발급으로 종이 2억 2천만 장 절감",
    "description": "사용자 편의성과 환경 보호 동시 실현",
    "reviews": [],
    "syllabus": [],
    "link": "https://blog.toss.im/article/tosssavetheplanet",
    "pubDate": "Mon, 21 Apr 2025 23:00:00 GMT",
    "creator": "Unknown",
    "categories": []
  }
]